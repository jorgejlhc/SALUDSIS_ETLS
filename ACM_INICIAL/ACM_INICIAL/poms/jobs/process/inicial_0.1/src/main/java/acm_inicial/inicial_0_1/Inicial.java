// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package acm_inicial.inicial_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJava_3
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: Inicial Purpose: Plantilla para inicial el desarrollo de un ETL<br>
 * Description: Para iniciar el desarrollo de un ETL con conexión de base de datos, log de errores y log de ejecución <br>
 * @author jorgejlhc@gmail.com
 * @version 8.8.8.20240722_1936-SNAPSHOT
 * @status 
 */
public class Inicial implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(db_destino_AdditionalParams != null){
				
					this.setProperty("db_destino_AdditionalParams", db_destino_AdditionalParams.toString());
				
			}
			
			if(db_destino_Login != null){
				
					this.setProperty("db_destino_Login", db_destino_Login.toString());
				
			}
			
			if(db_destino_Password != null){
				
					this.setProperty("db_destino_Password", db_destino_Password.toString());
				
			}
			
			if(db_destino_Port != null){
				
					this.setProperty("db_destino_Port", db_destino_Port.toString());
				
			}
			
			if(db_destino_Schema != null){
				
					this.setProperty("db_destino_Schema", db_destino_Schema.toString());
				
			}
			
			if(db_destino_Server != null){
				
					this.setProperty("db_destino_Server", db_destino_Server.toString());
				
			}
			
			if(db_destino_ServiceName != null){
				
					this.setProperty("db_destino_ServiceName", db_destino_ServiceName.toString());
				
			}
			
			if(db_origen_AdditionalParams != null){
				
					this.setProperty("db_origen_AdditionalParams", db_origen_AdditionalParams.toString());
				
			}
			
			if(db_origen_Login != null){
				
					this.setProperty("db_origen_Login", db_origen_Login.toString());
				
			}
			
			if(db_origen_Password != null){
				
					this.setProperty("db_origen_Password", db_origen_Password.toString());
				
			}
			
			if(db_origen_Port != null){
				
					this.setProperty("db_origen_Port", db_origen_Port.toString());
				
			}
			
			if(db_origen_Schema != null){
				
					this.setProperty("db_origen_Schema", db_origen_Schema.toString());
				
			}
			
			if(db_origen_Server != null){
				
					this.setProperty("db_origen_Server", db_origen_Server.toString());
				
			}
			
			if(db_origen_ServiceName != null){
				
					this.setProperty("db_origen_ServiceName", db_origen_ServiceName.toString());
				
			}
			
			if(BODEGA != null){
				
					this.setProperty("BODEGA", BODEGA.toString());
				
			}
			
			if(ESTADO_EXEC != null){
				
					this.setProperty("ESTADO_EXEC", ESTADO_EXEC.toString());
				
			}
			
			if(FECHA_EJECUCION != null){
				
					this.setProperty("FECHA_EJECUCION", FECHA_EJECUCION.toString());
				
			}
			
			if(HORA_FINAL != null){
				
					this.setProperty("HORA_FINAL", HORA_FINAL.toString());
				
			}
			
			if(HORA_INICIO != null){
				
					this.setProperty("HORA_INICIO", HORA_INICIO.toString());
				
			}
			
			if(JOB != null){
				
					this.setProperty("JOB", JOB.toString());
				
			}
			
			if(LOGS_ERROR != null){
				
					this.setProperty("LOGS_ERROR", LOGS_ERROR.toString());
				
			}
			
			if(LOGS_EXECUTION != null){
				
					this.setProperty("LOGS_EXECUTION", LOGS_EXECUTION.toString());
				
			}
			
			if(ORIGEN != null){
				
					this.setProperty("ORIGEN", ORIGEN.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String db_destino_AdditionalParams;
public String getDb_destino_AdditionalParams(){
	return this.db_destino_AdditionalParams;
}
public String db_destino_Login;
public String getDb_destino_Login(){
	return this.db_destino_Login;
}
public java.lang.String db_destino_Password;
public java.lang.String getDb_destino_Password(){
	return this.db_destino_Password;
}
public String db_destino_Port;
public String getDb_destino_Port(){
	return this.db_destino_Port;
}
public String db_destino_Schema;
public String getDb_destino_Schema(){
	return this.db_destino_Schema;
}
public String db_destino_Server;
public String getDb_destino_Server(){
	return this.db_destino_Server;
}
public String db_destino_ServiceName;
public String getDb_destino_ServiceName(){
	return this.db_destino_ServiceName;
}
public String db_origen_AdditionalParams;
public String getDb_origen_AdditionalParams(){
	return this.db_origen_AdditionalParams;
}
public String db_origen_Login;
public String getDb_origen_Login(){
	return this.db_origen_Login;
}
public java.lang.String db_origen_Password;
public java.lang.String getDb_origen_Password(){
	return this.db_origen_Password;
}
public String db_origen_Port;
public String getDb_origen_Port(){
	return this.db_origen_Port;
}
public String db_origen_Schema;
public String getDb_origen_Schema(){
	return this.db_origen_Schema;
}
public String db_origen_Server;
public String getDb_origen_Server(){
	return this.db_origen_Server;
}
public String db_origen_ServiceName;
public String getDb_origen_ServiceName(){
	return this.db_origen_ServiceName;
}
public String BODEGA;
public String getBODEGA(){
	return this.BODEGA;
}
public String ESTADO_EXEC;
public String getESTADO_EXEC(){
	return this.ESTADO_EXEC;
}
public String FECHA_EJECUCION;
public String getFECHA_EJECUCION(){
	return this.FECHA_EJECUCION;
}
public String HORA_FINAL;
public String getHORA_FINAL(){
	return this.HORA_FINAL;
}
public String HORA_INICIO;
public String getHORA_INICIO(){
	return this.HORA_INICIO;
}
public String JOB;
public String getJOB(){
	return this.JOB;
}
public String LOGS_ERROR;
public String getLOGS_ERROR(){
	return this.LOGS_ERROR;
}
public String LOGS_EXECUTION;
public String getLOGS_EXECUTION(){
	return this.LOGS_EXECUTION;
}
public String ORIGEN;
public String getORIGEN(){
	return this.ORIGEN;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Inicial";
	private final String projectName = "ACM_INICIAL";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Inicial.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Inicial.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tReplicate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_14_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	









public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tFileInputXML_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_ACM_INICIAL_Inicial = new byte[0];
    static byte[] commonByteArray_ACM_INICIAL_Inicial = new byte[0];

	
			    public String Host;

				public String getHost () {
					return this.Host;
				}

				public Boolean HostIsNullable(){
				    return true;
				}
				public Boolean HostIsKey(){
				    return false;
				}
				public Integer HostLength(){
				    return 15;
				}
				public Integer HostPrecision(){
				    return 0;
				}
				public String HostDefault(){
				
					return null;
				
				}
				public String HostComment(){
				
				    return "";
				
				}
				public String HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HostOriginalDbColumnName(){
				
					return "Host";
				
				}

				
			    public String Port;

				public String getPort () {
					return this.Port;
				}

				public Boolean PortIsNullable(){
				    return true;
				}
				public Boolean PortIsKey(){
				    return false;
				}
				public Integer PortLength(){
				    return 4;
				}
				public Integer PortPrecision(){
				    return 0;
				}
				public String PortDefault(){
				
					return null;
				
				}
				public String PortComment(){
				
				    return "";
				
				}
				public String PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PortOriginalDbColumnName(){
				
					return "Port";
				
				}

				
			    public String Sid;

				public String getSid () {
					return this.Sid;
				}

				public Boolean SidIsNullable(){
				    return true;
				}
				public Boolean SidIsKey(){
				    return false;
				}
				public Integer SidLength(){
				    return 4;
				}
				public Integer SidPrecision(){
				    return 0;
				}
				public String SidDefault(){
				
					return null;
				
				}
				public String SidComment(){
				
				    return "";
				
				}
				public String SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SidOriginalDbColumnName(){
				
					return "Sid";
				
				}

				
			    public String ServiceName;

				public String getServiceName () {
					return this.ServiceName;
				}

				public Boolean ServiceNameIsNullable(){
				    return true;
				}
				public Boolean ServiceNameIsKey(){
				    return false;
				}
				public Integer ServiceNameLength(){
				    return 7;
				}
				public Integer ServiceNamePrecision(){
				    return 0;
				}
				public String ServiceNameDefault(){
				
					return null;
				
				}
				public String ServiceNameComment(){
				
				    return "";
				
				}
				public String ServiceNamePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ServiceNameOriginalDbColumnName(){
				
					return "ServiceName";
				
				}

				
			    public String Schema;

				public String getSchema () {
					return this.Schema;
				}

				public Boolean SchemaIsNullable(){
				    return true;
				}
				public Boolean SchemaIsKey(){
				    return false;
				}
				public Integer SchemaLength(){
				    return 8;
				}
				public Integer SchemaPrecision(){
				    return 0;
				}
				public String SchemaDefault(){
				
					return null;
				
				}
				public String SchemaComment(){
				
				    return "";
				
				}
				public String SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SchemaOriginalDbColumnName(){
				
					return "Schema";
				
				}

				
			    public String User;

				public String getUser () {
					return this.User;
				}

				public Boolean UserIsNullable(){
				    return true;
				}
				public Boolean UserIsKey(){
				    return false;
				}
				public Integer UserLength(){
				    return 8;
				}
				public Integer UserPrecision(){
				    return 0;
				}
				public String UserDefault(){
				
					return null;
				
				}
				public String UserComment(){
				
				    return "";
				
				}
				public String UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UserOriginalDbColumnName(){
				
					return "User";
				
				}

				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}

				public Boolean PasswordIsNullable(){
				    return true;
				}
				public Boolean PasswordIsKey(){
				    return false;
				}
				public Integer PasswordLength(){
				    return 15;
				}
				public Integer PasswordPrecision(){
				    return 0;
				}
				public String PasswordDefault(){
				
					return null;
				
				}
				public String PasswordComment(){
				
				    return "";
				
				}
				public String PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordOriginalDbColumnName(){
				
					return "Password";
				
				}

				
			    public String PathStorage;

				public String getPathStorage () {
					return this.PathStorage;
				}

				public Boolean PathStorageIsNullable(){
				    return true;
				}
				public Boolean PathStorageIsKey(){
				    return false;
				}
				public Integer PathStorageLength(){
				    return 44;
				}
				public Integer PathStoragePrecision(){
				    return 0;
				}
				public String PathStorageDefault(){
				
					return null;
				
				}
				public String PathStorageComment(){
				
				    return "";
				
				}
				public String PathStoragePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PathStorageOriginalDbColumnName(){
				
					return "PathStorage";
				
				}

				
			    public String SMTPHost;

				public String getSMTPHost () {
					return this.SMTPHost;
				}

				public Boolean SMTPHostIsNullable(){
				    return true;
				}
				public Boolean SMTPHostIsKey(){
				    return false;
				}
				public Integer SMTPHostLength(){
				    return 14;
				}
				public Integer SMTPHostPrecision(){
				    return 0;
				}
				public String SMTPHostDefault(){
				
					return null;
				
				}
				public String SMTPHostComment(){
				
				    return "";
				
				}
				public String SMTPHostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPHostOriginalDbColumnName(){
				
					return "SMTPHost";
				
				}

				
			    public String SMTPPort;

				public String getSMTPPort () {
					return this.SMTPPort;
				}

				public Boolean SMTPPortIsNullable(){
				    return true;
				}
				public Boolean SMTPPortIsKey(){
				    return false;
				}
				public Integer SMTPPortLength(){
				    return 3;
				}
				public Integer SMTPPortPrecision(){
				    return 0;
				}
				public String SMTPPortDefault(){
				
					return null;
				
				}
				public String SMTPPortComment(){
				
				    return "";
				
				}
				public String SMTPPortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPPortOriginalDbColumnName(){
				
					return "SMTPPort";
				
				}

				
			    public String UsernameMail;

				public String getUsernameMail () {
					return this.UsernameMail;
				}

				public Boolean UsernameMailIsNullable(){
				    return true;
				}
				public Boolean UsernameMailIsKey(){
				    return false;
				}
				public Integer UsernameMailLength(){
				    return 34;
				}
				public Integer UsernameMailPrecision(){
				    return 0;
				}
				public String UsernameMailDefault(){
				
					return null;
				
				}
				public String UsernameMailComment(){
				
				    return "";
				
				}
				public String UsernameMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UsernameMailOriginalDbColumnName(){
				
					return "UsernameMail";
				
				}

				
			    public String PasswordMail;

				public String getPasswordMail () {
					return this.PasswordMail;
				}

				public Boolean PasswordMailIsNullable(){
				    return true;
				}
				public Boolean PasswordMailIsKey(){
				    return false;
				}
				public Integer PasswordMailLength(){
				    return 13;
				}
				public Integer PasswordMailPrecision(){
				    return 0;
				}
				public String PasswordMailDefault(){
				
					return null;
				
				}
				public String PasswordMailComment(){
				
				    return "";
				
				}
				public String PasswordMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordMailOriginalDbColumnName(){
				
					return "PasswordMail";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_INICIAL_Inicial.length) {
				if(length < 1024 && commonByteArray_ACM_INICIAL_Inicial.length == 0) {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[1024];
				} else {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_INICIAL_Inicial, 0, length);
			strReturn = new String(commonByteArray_ACM_INICIAL_Inicial, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_INICIAL_Inicial.length) {
				if(length < 1024 && commonByteArray_ACM_INICIAL_Inicial.length == 0) {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[1024];
				} else {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_INICIAL_Inicial, 0, length);
			strReturn = new String(commonByteArray_ACM_INICIAL_Inicial, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.PathStorage = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.PathStorage = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.PathStorage,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.PathStorage,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Host="+Host);
		sb.append(",Port="+Port);
		sb.append(",Sid="+Sid);
		sb.append(",ServiceName="+ServiceName);
		sb.append(",Schema="+Schema);
		sb.append(",User="+User);
		sb.append(",Password="+Password);
		sb.append(",PathStorage="+PathStorage);
		sb.append(",SMTPHost="+SMTPHost);
		sb.append(",SMTPPort="+SMTPPort);
		sb.append(",UsernameMail="+UsernameMail);
		sb.append(",PasswordMail="+PasswordMail);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tFileInputXML_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_1", false);
		start_Hash.put("tFileInputXML_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_1";
	
	
		int tos_count_tFileInputXML_1 = 0;
		

	

int nb_line_tFileInputXML_1 = 0;

	String os_tFileInputXML_1 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_1=false;
	if(os_tFileInputXML_1.indexOf("windows") > -1 || os_tFileInputXML_1.indexOf("nt") > -1){
		isWindows_tFileInputXML_1=true;
	}
class XML_API_tFileInputXML_1{
	public boolean isDefNull(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0] != null && node[1]!=null && ("true").equals(node[1])){
        	return true;
        }
        return false;
    }

    public boolean isMissing(String[] node) throws javax.xml.transform.TransformerException {
        return node[0] == null ? true : false;
    }

    public boolean isEmpty(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0]!=null ){
        	return node[0].length() == 0;
        }
        return false;
    }
}
XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();

String[] queryPaths_tFileInputXML_1 = new String[]{	
	"Host"		
	,"Host"+"/@xsi:nil"	
	,"Port"		
	,"Port"+"/@xsi:nil"	
	,"Sid"		
	,"Sid"+"/@xsi:nil"	
	,"ServiceName"		
	,"ServiceName"+"/@xsi:nil"	
	,"Schema"		
	,"Schema"+"/@xsi:nil"	
	,"User"		
	,"User"+"/@xsi:nil"	
	,"Password"		
	,"Password"+"/@xsi:nil"	
	,"PathStorage"		
	,"PathStorage"+"/@xsi:nil"	
	,"SMTPHost"		
	,"SMTPHost"+"/@xsi:nil"	
	,"SMTPPort"		
	,"SMTPPort"+"/@xsi:nil"	
	,"UsernameMail"		
	,"UsernameMail"+"/@xsi:nil"	
	,"PasswordMail"		
	,"PasswordMail"+"/@xsi:nil"
};

boolean[] asXMLs_tFileInputXML_1 = new boolean[]{	
	false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false
};

String str_tFileInputXML_1 = "";
String[] node_tFileInputXML_1 = null;
org.talend.xml.sax.SAXLooper looper_tFileInputXML_1 = new org.talend.xml.sax.SAXLooper("/connectionStrings",queryPaths_tFileInputXML_1,asXMLs_tFileInputXML_1);
looper_tFileInputXML_1.setEncoding("UTF-8");
Object filename_tFileInputXML_1 = null;
try {
	filename_tFileInputXML_1 = context.ORIGEN;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_1 != null && filename_tFileInputXML_1 instanceof String && filename_tFileInputXML_1.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_1){
		filename_tFileInputXML_1 = filename_tFileInputXML_1.toString().replaceFirst("//","/");
	}
}
if(filename_tFileInputXML_1 instanceof java.io.InputStream){
	looper_tFileInputXML_1.parse((java.io.InputStream)filename_tFileInputXML_1);
}else{
	looper_tFileInputXML_1.parse(String.valueOf(filename_tFileInputXML_1));
}
java.util.Iterator<java.util.Map<String, String>> it_tFileInputXML_1  = looper_tFileInputXML_1.iterator();
while (it_tFileInputXML_1.hasNext()) {
	java.util.Map<String, String> row_tFileInputXML_1 = it_tFileInputXML_1.next();
	if (nb_line_tFileInputXML_1>=50) {
	
			looper_tFileInputXML_1.stopRead();
	
		break;
	}
		nb_line_tFileInputXML_1++;
		
	row1 = null;			
	boolean whetherReject_tFileInputXML_1 = false;
	row1 = new row1Struct();
	try{
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Host");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Host"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Host =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Host ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Host =null;
									}else{
		row1.Host = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Port");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Port"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Port =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Port ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Port =null;
									}else{
		row1.Port = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Sid");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Sid"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Sid =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Sid ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Sid =null;
									}else{
		row1.Sid = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("ServiceName");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("ServiceName"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.ServiceName =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.ServiceName ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.ServiceName =null;
									}else{
		row1.ServiceName = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Schema");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Schema"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Schema =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Schema ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Schema =null;
									}else{
		row1.Schema = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("User");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("User"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.User =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.User ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.User =null;
									}else{
		row1.User = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Password");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Password"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Password =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Password ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Password =null;
									}else{
		row1.Password = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("PathStorage");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("PathStorage"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.PathStorage =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.PathStorage ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.PathStorage =null;
									}else{
		row1.PathStorage = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("SMTPHost");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("SMTPHost"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.SMTPHost =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.SMTPHost ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.SMTPHost =null;
									}else{
		row1.SMTPHost = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("SMTPPort");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("SMTPPort"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.SMTPPort =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.SMTPPort ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.SMTPPort =null;
									}else{
		row1.SMTPPort = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("UsernameMail");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("UsernameMail"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.UsernameMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.UsernameMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.UsernameMail =null;
									}else{
		row1.UsernameMail = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("PasswordMail");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("PasswordMail"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.PasswordMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.PasswordMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.PasswordMail =null;
									}else{
		row1.PasswordMail = str_tFileInputXML_1;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_1 = true;
                System.err.println(e.getMessage());
                row1 = null;
    }
			
			

 



/**
 * [tFileInputXML_1 begin ] stop
 */
	
	/**
	 * [tFileInputXML_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 


	tos_count_tFileInputXML_1++;

/**
 * [tFileInputXML_1 main ] stop
 */
	
	/**
	 * [tFileInputXML_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

    //Guarda en variables de contexto los parametros de conexión a la bd saludsis
context.db_origen_Server = row1.Host;
context.db_origen_Port = row1.Port;
context.db_origen_ServiceName = row1.ServiceName;
context.db_origen_Schema = row1.Schema;
context.db_origen_Login = row1.User;
context.db_origen_Password = row1.Password;


//Guarda en variables de contexto la fecha de ejecución y la hora de inicio

context.FECHA_EJECUCION = TalendDate.getDate("DD/MM/YYYY");
context.HORA_INICIO = TalendDate.getDate("HH:mm:ss");
context.JOB = "Inicial";

//Imprime en consola el job, la fecha de ejecución y la hora de inicio
System.out.println(context.JOB+" :-Start: "+context.FECHA_EJECUCION+" "+context.HORA_INICIO);


    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputXML_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	


	}
	try {
		looper_tFileInputXML_1.handleTaskResponse();
	} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
		if(!(e.getCause() instanceof org.talend.xml.sax.exception.EnoughDataException))
	
		
		System.err.println(e.getMessage());	
	
	}
	globalMap.put("tFileInputXML_1_NB_LINE",nb_line_tFileInputXML_1);

	

 

ok_Hash.put("tFileInputXML_1", true);
end_Hash.put("tFileInputXML_1", System.currentTimeMillis());




/**
 * [tFileInputXML_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tOracleConnection_1Process(globalMap);



/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_1", false);
		start_Hash.put("tOracleConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_1";
	
	
		int tos_count_tOracleConnection_1 = 0;
		
	

	
        String url_tOracleConnection_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_1", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_1 = context.db_origen_Login;
	
	
		
	final String decryptedPassword_tOracleConnection_1 = context.db_origen_Password; 
		String dbPwd_tOracleConnection_1 = decryptedPassword_tOracleConnection_1;
	
	
	java.sql.Connection conn_tOracleConnection_1 = null;
	
		
			String driverClass_tOracleConnection_1 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_1 = java.lang.Class.forName(driverClass_tOracleConnection_1);
			globalMap.put("driverClass_tOracleConnection_1", driverClass_tOracleConnection_1);
		
			java.util.Properties atnParamsPrope_tOracleConnection_1 = new java.util.Properties();
			    atnParamsPrope_tOracleConnection_1.put("user",dbUser_tOracleConnection_1);
			    atnParamsPrope_tOracleConnection_1.put("password",dbPwd_tOracleConnection_1);
			if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                atnParamsPrope_tOracleConnection_1.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tOracleConnection_1 = java.sql.DriverManager.getConnection(url_tOracleConnection_1, atnParamsPrope_tOracleConnection_1);

		globalMap.put("conn_tOracleConnection_1", conn_tOracleConnection_1);
	if (null != conn_tOracleConnection_1) {
		
			conn_tOracleConnection_1.setAutoCommit(false);
	}
        globalMap.put("host_" + "tOracleConnection_1",context.db_origen_Server);
        globalMap.put("port_" + "tOracleConnection_1",context.db_origen_Port);
        globalMap.put("dbname_" + "tOracleConnection_1",context.db_origen_ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_1", context.db_origen_Schema);
	globalMap.put("username_" + "tOracleConnection_1",context.db_origen_Login);
	globalMap.put("password_" + "tOracleConnection_1",dbPwd_tOracleConnection_1);

 



/**
 * [tOracleConnection_1 begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 


	tos_count_tOracleConnection_1++;

/**
 * [tOracleConnection_1 main ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_1 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 

ok_Hash.put("tOracleConnection_1", true);
end_Hash.put("tOracleConnection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tOracleInput_3Process(globalMap);



/**
 * [tOracleConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class InsHauditoriasStruct implements routines.system.IPersistableRow<InsHauditoriasStruct> {
    final static byte[] commonByteArrayLock_ACM_INICIAL_Inicial = new byte[0];
    static byte[] commonByteArray_ACM_INICIAL_Inicial = new byte[0];

	
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return false;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return 0;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return null;
				
				}
				public String RECEPCION_IDComment(){
				
				    return "FK - ACM_RECEPCION";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal ETAPASNORMATIVIDAD_ID;

				public BigDecimal getETAPASNORMATIVIDAD_ID () {
					return this.ETAPASNORMATIVIDAD_ID;
				}

				public Boolean ETAPASNORMATIVIDAD_IDIsNullable(){
				    return false;
				}
				public Boolean ETAPASNORMATIVIDAD_IDIsKey(){
				    return false;
				}
				public Integer ETAPASNORMATIVIDAD_IDLength(){
				    return 0;
				}
				public Integer ETAPASNORMATIVIDAD_IDPrecision(){
				    return null;
				}
				public String ETAPASNORMATIVIDAD_IDDefault(){
				
					return null;
				
				}
				public String ETAPASNORMATIVIDAD_IDComment(){
				
				    return "FK - ACM_ETAPASNORMATIVIDAD";
				
				}
				public String ETAPASNORMATIVIDAD_IDPattern(){
				
					return "";
				
				}
				public String ETAPASNORMATIVIDAD_IDOriginalDbColumnName(){
				
					return "ETAPASNORMATIVIDAD_ID";
				
				}

				
			    public BigDecimal AUDITORIAS_ID;

				public BigDecimal getAUDITORIAS_ID () {
					return this.AUDITORIAS_ID;
				}

				public Boolean AUDITORIAS_IDIsNullable(){
				    return false;
				}
				public Boolean AUDITORIAS_IDIsKey(){
				    return false;
				}
				public Integer AUDITORIAS_IDLength(){
				    return 0;
				}
				public Integer AUDITORIAS_IDPrecision(){
				    return null;
				}
				public String AUDITORIAS_IDDefault(){
				
					return null;
				
				}
				public String AUDITORIAS_IDComment(){
				
				    return "FK - ACM_AUDITORIAS";
				
				}
				public String AUDITORIAS_IDPattern(){
				
					return "";
				
				}
				public String AUDITORIAS_IDOriginalDbColumnName(){
				
					return "AUDITORIAS_ID";
				
				}

				
			    public String DESCRIPCION;

				public String getDESCRIPCION () {
					return this.DESCRIPCION;
				}

				public Boolean DESCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean DESCRIPCIONIsKey(){
				    return false;
				}
				public Integer DESCRIPCIONLength(){
				    return 4000;
				}
				public Integer DESCRIPCIONPrecision(){
				    return 0;
				}
				public String DESCRIPCIONDefault(){
				
					return null;
				
				}
				public String DESCRIPCIONComment(){
				
				    return "";
				
				}
				public String DESCRIPCIONPattern(){
				
					return "";
				
				}
				public String DESCRIPCIONOriginalDbColumnName(){
				
					return "DESCRIPCION";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 0;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return null;
				
				}
				public String USUARIOS_IDComment(){
				
				    return "FK - GEN_USUARIOS";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return null;
				
				}
				public String UORG_IDComment(){
				
				    return "FK - GEN_UORG";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public java.util.Date FIETAPA;

				public java.util.Date getFIETAPA () {
					return this.FIETAPA;
				}

				public Boolean FIETAPAIsNullable(){
				    return false;
				}
				public Boolean FIETAPAIsKey(){
				    return false;
				}
				public Integer FIETAPALength(){
				    return 7;
				}
				public Integer FIETAPAPrecision(){
				    return 0;
				}
				public String FIETAPADefault(){
				
					return null;
				
				}
				public String FIETAPAComment(){
				
				    return "Fecha inicio etapa";
				
				}
				public String FIETAPAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FIETAPAOriginalDbColumnName(){
				
					return "FIETAPA";
				
				}

				
			    public BigDecimal ESTAUDITORIA_ID;

				public BigDecimal getESTAUDITORIA_ID () {
					return this.ESTAUDITORIA_ID;
				}

				public Boolean ESTAUDITORIA_IDIsNullable(){
				    return true;
				}
				public Boolean ESTAUDITORIA_IDIsKey(){
				    return false;
				}
				public Integer ESTAUDITORIA_IDLength(){
				    return 0;
				}
				public Integer ESTAUDITORIA_IDPrecision(){
				    return null;
				}
				public String ESTAUDITORIA_IDDefault(){
				
					return null;
				
				}
				public String ESTAUDITORIA_IDComment(){
				
				    return "FK - ACM_ESTAUDITORIA";
				
				}
				public String ESTAUDITORIA_IDPattern(){
				
					return "";
				
				}
				public String ESTAUDITORIA_IDOriginalDbColumnName(){
				
					return "ESTAUDITORIA_ID";
				
				}

				
			    public String TIPO;

				public String getTIPO () {
					return this.TIPO;
				}

				public Boolean TIPOIsNullable(){
				    return true;
				}
				public Boolean TIPOIsKey(){
				    return false;
				}
				public Integer TIPOLength(){
				    return null;
				}
				public Integer TIPOPrecision(){
				    return null;
				}
				public String TIPODefault(){
				
					return null;
				
				}
				public String TIPOComment(){
				
				    return "";
				
				}
				public String TIPOPattern(){
				
					return "";
				
				}
				public String TIPOOriginalDbColumnName(){
				
					return "TIPO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_INICIAL_Inicial.length) {
				if(length < 1024 && commonByteArray_ACM_INICIAL_Inicial.length == 0) {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[1024];
				} else {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_INICIAL_Inicial, 0, length);
			strReturn = new String(commonByteArray_ACM_INICIAL_Inicial, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_INICIAL_Inicial.length) {
				if(length < 1024 && commonByteArray_ACM_INICIAL_Inicial.length == 0) {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[1024];
				} else {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_INICIAL_Inicial, 0, length);
			strReturn = new String(commonByteArray_ACM_INICIAL_Inicial, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.ETAPASNORMATIVIDAD_ID = (BigDecimal) dis.readObject();
					
						this.AUDITORIAS_ID = (BigDecimal) dis.readObject();
					
					this.DESCRIPCION = readString(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.FIETAPA = readDate(dis);
					
						this.ESTAUDITORIA_ID = (BigDecimal) dis.readObject();
					
					this.TIPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.ETAPASNORMATIVIDAD_ID = (BigDecimal) dis.readObject();
					
						this.AUDITORIAS_ID = (BigDecimal) dis.readObject();
					
					this.DESCRIPCION = readString(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.FIETAPA = readDate(dis);
					
						this.ESTAUDITORIA_ID = (BigDecimal) dis.readObject();
					
					this.TIPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ETAPASNORMATIVIDAD_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.AUDITORIAS_ID);
					
					// String
				
						writeString(this.DESCRIPCION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// java.util.Date
				
						writeDate(this.FIETAPA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTAUDITORIA_ID);
					
					// String
				
						writeString(this.TIPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ETAPASNORMATIVIDAD_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AUDITORIAS_ID);
					
					// String
				
						writeString(this.DESCRIPCION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// java.util.Date
				
						writeDate(this.FIETAPA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTAUDITORIA_ID);
					
					// String
				
						writeString(this.TIPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",ETAPASNORMATIVIDAD_ID="+String.valueOf(ETAPASNORMATIVIDAD_ID));
		sb.append(",AUDITORIAS_ID="+String.valueOf(AUDITORIAS_ID));
		sb.append(",DESCRIPCION="+DESCRIPCION);
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",FIETAPA="+String.valueOf(FIETAPA));
		sb.append(",ESTAUDITORIA_ID="+String.valueOf(ESTAUDITORIA_ID));
		sb.append(",TIPO="+TIPO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(InsHauditoriasStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_ACM_INICIAL_Inicial = new byte[0];
    static byte[] commonByteArray_ACM_INICIAL_Inicial = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal AUDITORIAS_ID;

				public BigDecimal getAUDITORIAS_ID () {
					return this.AUDITORIAS_ID;
				}

				public Boolean AUDITORIAS_IDIsNullable(){
				    return false;
				}
				public Boolean AUDITORIAS_IDIsKey(){
				    return false;
				}
				public Integer AUDITORIAS_IDLength(){
				    return null;
				}
				public Integer AUDITORIAS_IDPrecision(){
				    return null;
				}
				public String AUDITORIAS_IDDefault(){
				
					return "";
				
				}
				public String AUDITORIAS_IDComment(){
				
				    return "";
				
				}
				public String AUDITORIAS_IDPattern(){
				
					return "";
				
				}
				public String AUDITORIAS_IDOriginalDbColumnName(){
				
					return "AUDITORIAS_ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return false;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return null;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal ESTAUDITORIAS_ID;

				public BigDecimal getESTAUDITORIAS_ID () {
					return this.ESTAUDITORIAS_ID;
				}

				public Boolean ESTAUDITORIAS_IDIsNullable(){
				    return true;
				}
				public Boolean ESTAUDITORIAS_IDIsKey(){
				    return false;
				}
				public Integer ESTAUDITORIAS_IDLength(){
				    return null;
				}
				public Integer ESTAUDITORIAS_IDPrecision(){
				    return null;
				}
				public String ESTAUDITORIAS_IDDefault(){
				
					return "";
				
				}
				public String ESTAUDITORIAS_IDComment(){
				
				    return "";
				
				}
				public String ESTAUDITORIAS_IDPattern(){
				
					return "";
				
				}
				public String ESTAUDITORIAS_IDOriginalDbColumnName(){
				
					return "ESTAUDITORIAS_ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return null;
				}
				public Integer FECHAPrecision(){
				    return null;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public BigDecimal CAMBIO_ETAPA;

				public BigDecimal getCAMBIO_ETAPA () {
					return this.CAMBIO_ETAPA;
				}

				public Boolean CAMBIO_ETAPAIsNullable(){
				    return true;
				}
				public Boolean CAMBIO_ETAPAIsKey(){
				    return false;
				}
				public Integer CAMBIO_ETAPALength(){
				    return null;
				}
				public Integer CAMBIO_ETAPAPrecision(){
				    return null;
				}
				public String CAMBIO_ETAPADefault(){
				
					return "";
				
				}
				public String CAMBIO_ETAPAComment(){
				
				    return "";
				
				}
				public String CAMBIO_ETAPAPattern(){
				
					return "";
				
				}
				public String CAMBIO_ETAPAOriginalDbColumnName(){
				
					return "CAMBIO_ETAPA";
				
				}

				
			    public BigDecimal CODIGO_ETAPA;

				public BigDecimal getCODIGO_ETAPA () {
					return this.CODIGO_ETAPA;
				}

				public Boolean CODIGO_ETAPAIsNullable(){
				    return false;
				}
				public Boolean CODIGO_ETAPAIsKey(){
				    return false;
				}
				public Integer CODIGO_ETAPALength(){
				    return null;
				}
				public Integer CODIGO_ETAPAPrecision(){
				    return null;
				}
				public String CODIGO_ETAPADefault(){
				
					return "";
				
				}
				public String CODIGO_ETAPAComment(){
				
				    return "";
				
				}
				public String CODIGO_ETAPAPattern(){
				
					return "";
				
				}
				public String CODIGO_ETAPAOriginalDbColumnName(){
				
					return "CODIGO_ETAPA";
				
				}

				
			    public String RESPONSABLE;

				public String getRESPONSABLE () {
					return this.RESPONSABLE;
				}

				public Boolean RESPONSABLEIsNullable(){
				    return true;
				}
				public Boolean RESPONSABLEIsKey(){
				    return false;
				}
				public Integer RESPONSABLELength(){
				    return null;
				}
				public Integer RESPONSABLEPrecision(){
				    return null;
				}
				public String RESPONSABLEDefault(){
				
					return null;
				
				}
				public String RESPONSABLEComment(){
				
				    return "";
				
				}
				public String RESPONSABLEPattern(){
				
					return "";
				
				}
				public String RESPONSABLEOriginalDbColumnName(){
				
					return "RESPONSABLE";
				
				}

				
			    public String RESPONSABLE_CDP;

				public String getRESPONSABLE_CDP () {
					return this.RESPONSABLE_CDP;
				}

				public Boolean RESPONSABLE_CDPIsNullable(){
				    return true;
				}
				public Boolean RESPONSABLE_CDPIsKey(){
				    return false;
				}
				public Integer RESPONSABLE_CDPLength(){
				    return null;
				}
				public Integer RESPONSABLE_CDPPrecision(){
				    return null;
				}
				public String RESPONSABLE_CDPDefault(){
				
					return null;
				
				}
				public String RESPONSABLE_CDPComment(){
				
				    return "";
				
				}
				public String RESPONSABLE_CDPPattern(){
				
					return "";
				
				}
				public String RESPONSABLE_CDPOriginalDbColumnName(){
				
					return "RESPONSABLE_CDP";
				
				}

				
			    public String TIPO_ETAPA;

				public String getTIPO_ETAPA () {
					return this.TIPO_ETAPA;
				}

				public Boolean TIPO_ETAPAIsNullable(){
				    return true;
				}
				public Boolean TIPO_ETAPAIsKey(){
				    return false;
				}
				public Integer TIPO_ETAPALength(){
				    return null;
				}
				public Integer TIPO_ETAPAPrecision(){
				    return null;
				}
				public String TIPO_ETAPADefault(){
				
					return null;
				
				}
				public String TIPO_ETAPAComment(){
				
				    return "";
				
				}
				public String TIPO_ETAPAPattern(){
				
					return "";
				
				}
				public String TIPO_ETAPAOriginalDbColumnName(){
				
					return "TIPO_ETAPA";
				
				}

				
			    public String TIPO_ETAPA_CDP;

				public String getTIPO_ETAPA_CDP () {
					return this.TIPO_ETAPA_CDP;
				}

				public Boolean TIPO_ETAPA_CDPIsNullable(){
				    return true;
				}
				public Boolean TIPO_ETAPA_CDPIsKey(){
				    return false;
				}
				public Integer TIPO_ETAPA_CDPLength(){
				    return null;
				}
				public Integer TIPO_ETAPA_CDPPrecision(){
				    return null;
				}
				public String TIPO_ETAPA_CDPDefault(){
				
					return null;
				
				}
				public String TIPO_ETAPA_CDPComment(){
				
				    return "";
				
				}
				public String TIPO_ETAPA_CDPPattern(){
				
					return "";
				
				}
				public String TIPO_ETAPA_CDPOriginalDbColumnName(){
				
					return "TIPO_ETAPA_CDP";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_INICIAL_Inicial.length) {
				if(length < 1024 && commonByteArray_ACM_INICIAL_Inicial.length == 0) {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[1024];
				} else {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_INICIAL_Inicial, 0, length);
			strReturn = new String(commonByteArray_ACM_INICIAL_Inicial, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_INICIAL_Inicial.length) {
				if(length < 1024 && commonByteArray_ACM_INICIAL_Inicial.length == 0) {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[1024];
				} else {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_INICIAL_Inicial, 0, length);
			strReturn = new String(commonByteArray_ACM_INICIAL_Inicial, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.AUDITORIAS_ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.ESTAUDITORIAS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
						this.CAMBIO_ETAPA = (BigDecimal) dis.readObject();
					
						this.CODIGO_ETAPA = (BigDecimal) dis.readObject();
					
					this.RESPONSABLE = readString(dis);
					
					this.RESPONSABLE_CDP = readString(dis);
					
					this.TIPO_ETAPA = readString(dis);
					
					this.TIPO_ETAPA_CDP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.AUDITORIAS_ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.ESTAUDITORIAS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
						this.CAMBIO_ETAPA = (BigDecimal) dis.readObject();
					
						this.CODIGO_ETAPA = (BigDecimal) dis.readObject();
					
					this.RESPONSABLE = readString(dis);
					
					this.RESPONSABLE_CDP = readString(dis);
					
					this.TIPO_ETAPA = readString(dis);
					
					this.TIPO_ETAPA_CDP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.AUDITORIAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTAUDITORIAS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CAMBIO_ETAPA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CODIGO_ETAPA);
					
					// String
				
						writeString(this.RESPONSABLE,dos);
					
					// String
				
						writeString(this.RESPONSABLE_CDP,dos);
					
					// String
				
						writeString(this.TIPO_ETAPA,dos);
					
					// String
				
						writeString(this.TIPO_ETAPA_CDP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AUDITORIAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTAUDITORIAS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CAMBIO_ETAPA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CODIGO_ETAPA);
					
					// String
				
						writeString(this.RESPONSABLE,dos);
					
					// String
				
						writeString(this.RESPONSABLE_CDP,dos);
					
					// String
				
						writeString(this.TIPO_ETAPA,dos);
					
					// String
				
						writeString(this.TIPO_ETAPA_CDP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",AUDITORIAS_ID="+String.valueOf(AUDITORIAS_ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",ESTAUDITORIAS_ID="+String.valueOf(ESTAUDITORIAS_ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",CAMBIO_ETAPA="+String.valueOf(CAMBIO_ETAPA));
		sb.append(",CODIGO_ETAPA="+String.valueOf(CODIGO_ETAPA));
		sb.append(",RESPONSABLE="+RESPONSABLE);
		sb.append(",RESPONSABLE_CDP="+RESPONSABLE_CDP);
		sb.append(",TIPO_ETAPA="+TIPO_ETAPA);
		sb.append(",TIPO_ETAPA_CDP="+TIPO_ETAPA_CDP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_ACM_INICIAL_Inicial = new byte[0];
    static byte[] commonByteArray_ACM_INICIAL_Inicial = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal AUDITORIAS_ID;

				public BigDecimal getAUDITORIAS_ID () {
					return this.AUDITORIAS_ID;
				}

				public Boolean AUDITORIAS_IDIsNullable(){
				    return false;
				}
				public Boolean AUDITORIAS_IDIsKey(){
				    return false;
				}
				public Integer AUDITORIAS_IDLength(){
				    return null;
				}
				public Integer AUDITORIAS_IDPrecision(){
				    return null;
				}
				public String AUDITORIAS_IDDefault(){
				
					return "";
				
				}
				public String AUDITORIAS_IDComment(){
				
				    return "";
				
				}
				public String AUDITORIAS_IDPattern(){
				
					return "";
				
				}
				public String AUDITORIAS_IDOriginalDbColumnName(){
				
					return "AUDITORIAS_ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return false;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return null;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal ESTAUDITORIAS_ID;

				public BigDecimal getESTAUDITORIAS_ID () {
					return this.ESTAUDITORIAS_ID;
				}

				public Boolean ESTAUDITORIAS_IDIsNullable(){
				    return true;
				}
				public Boolean ESTAUDITORIAS_IDIsKey(){
				    return false;
				}
				public Integer ESTAUDITORIAS_IDLength(){
				    return null;
				}
				public Integer ESTAUDITORIAS_IDPrecision(){
				    return null;
				}
				public String ESTAUDITORIAS_IDDefault(){
				
					return "";
				
				}
				public String ESTAUDITORIAS_IDComment(){
				
				    return "";
				
				}
				public String ESTAUDITORIAS_IDPattern(){
				
					return "";
				
				}
				public String ESTAUDITORIAS_IDOriginalDbColumnName(){
				
					return "ESTAUDITORIAS_ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return null;
				}
				public Integer FECHAPrecision(){
				    return null;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public BigDecimal CAMBIO_ETAPA;

				public BigDecimal getCAMBIO_ETAPA () {
					return this.CAMBIO_ETAPA;
				}

				public Boolean CAMBIO_ETAPAIsNullable(){
				    return true;
				}
				public Boolean CAMBIO_ETAPAIsKey(){
				    return false;
				}
				public Integer CAMBIO_ETAPALength(){
				    return null;
				}
				public Integer CAMBIO_ETAPAPrecision(){
				    return null;
				}
				public String CAMBIO_ETAPADefault(){
				
					return "";
				
				}
				public String CAMBIO_ETAPAComment(){
				
				    return "";
				
				}
				public String CAMBIO_ETAPAPattern(){
				
					return "";
				
				}
				public String CAMBIO_ETAPAOriginalDbColumnName(){
				
					return "CAMBIO_ETAPA";
				
				}

				
			    public BigDecimal CODIGO_ETAPA;

				public BigDecimal getCODIGO_ETAPA () {
					return this.CODIGO_ETAPA;
				}

				public Boolean CODIGO_ETAPAIsNullable(){
				    return false;
				}
				public Boolean CODIGO_ETAPAIsKey(){
				    return false;
				}
				public Integer CODIGO_ETAPALength(){
				    return null;
				}
				public Integer CODIGO_ETAPAPrecision(){
				    return null;
				}
				public String CODIGO_ETAPADefault(){
				
					return "";
				
				}
				public String CODIGO_ETAPAComment(){
				
				    return "";
				
				}
				public String CODIGO_ETAPAPattern(){
				
					return "";
				
				}
				public String CODIGO_ETAPAOriginalDbColumnName(){
				
					return "CODIGO_ETAPA";
				
				}

				
			    public String RESPONSABLE;

				public String getRESPONSABLE () {
					return this.RESPONSABLE;
				}

				public Boolean RESPONSABLEIsNullable(){
				    return true;
				}
				public Boolean RESPONSABLEIsKey(){
				    return false;
				}
				public Integer RESPONSABLELength(){
				    return null;
				}
				public Integer RESPONSABLEPrecision(){
				    return null;
				}
				public String RESPONSABLEDefault(){
				
					return null;
				
				}
				public String RESPONSABLEComment(){
				
				    return "";
				
				}
				public String RESPONSABLEPattern(){
				
					return "";
				
				}
				public String RESPONSABLEOriginalDbColumnName(){
				
					return "RESPONSABLE";
				
				}

				
			    public String RESPONSABLE_CDP;

				public String getRESPONSABLE_CDP () {
					return this.RESPONSABLE_CDP;
				}

				public Boolean RESPONSABLE_CDPIsNullable(){
				    return true;
				}
				public Boolean RESPONSABLE_CDPIsKey(){
				    return false;
				}
				public Integer RESPONSABLE_CDPLength(){
				    return null;
				}
				public Integer RESPONSABLE_CDPPrecision(){
				    return null;
				}
				public String RESPONSABLE_CDPDefault(){
				
					return null;
				
				}
				public String RESPONSABLE_CDPComment(){
				
				    return "";
				
				}
				public String RESPONSABLE_CDPPattern(){
				
					return "";
				
				}
				public String RESPONSABLE_CDPOriginalDbColumnName(){
				
					return "RESPONSABLE_CDP";
				
				}

				
			    public String TIPO_ETAPA;

				public String getTIPO_ETAPA () {
					return this.TIPO_ETAPA;
				}

				public Boolean TIPO_ETAPAIsNullable(){
				    return true;
				}
				public Boolean TIPO_ETAPAIsKey(){
				    return false;
				}
				public Integer TIPO_ETAPALength(){
				    return null;
				}
				public Integer TIPO_ETAPAPrecision(){
				    return null;
				}
				public String TIPO_ETAPADefault(){
				
					return null;
				
				}
				public String TIPO_ETAPAComment(){
				
				    return "";
				
				}
				public String TIPO_ETAPAPattern(){
				
					return "";
				
				}
				public String TIPO_ETAPAOriginalDbColumnName(){
				
					return "TIPO_ETAPA";
				
				}

				
			    public String TIPO_ETAPA_CDP;

				public String getTIPO_ETAPA_CDP () {
					return this.TIPO_ETAPA_CDP;
				}

				public Boolean TIPO_ETAPA_CDPIsNullable(){
				    return true;
				}
				public Boolean TIPO_ETAPA_CDPIsKey(){
				    return false;
				}
				public Integer TIPO_ETAPA_CDPLength(){
				    return null;
				}
				public Integer TIPO_ETAPA_CDPPrecision(){
				    return null;
				}
				public String TIPO_ETAPA_CDPDefault(){
				
					return null;
				
				}
				public String TIPO_ETAPA_CDPComment(){
				
				    return "";
				
				}
				public String TIPO_ETAPA_CDPPattern(){
				
					return "";
				
				}
				public String TIPO_ETAPA_CDPOriginalDbColumnName(){
				
					return "TIPO_ETAPA_CDP";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_INICIAL_Inicial.length) {
				if(length < 1024 && commonByteArray_ACM_INICIAL_Inicial.length == 0) {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[1024];
				} else {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_INICIAL_Inicial, 0, length);
			strReturn = new String(commonByteArray_ACM_INICIAL_Inicial, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_INICIAL_Inicial.length) {
				if(length < 1024 && commonByteArray_ACM_INICIAL_Inicial.length == 0) {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[1024];
				} else {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_INICIAL_Inicial, 0, length);
			strReturn = new String(commonByteArray_ACM_INICIAL_Inicial, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.AUDITORIAS_ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.ESTAUDITORIAS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
						this.CAMBIO_ETAPA = (BigDecimal) dis.readObject();
					
						this.CODIGO_ETAPA = (BigDecimal) dis.readObject();
					
					this.RESPONSABLE = readString(dis);
					
					this.RESPONSABLE_CDP = readString(dis);
					
					this.TIPO_ETAPA = readString(dis);
					
					this.TIPO_ETAPA_CDP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.AUDITORIAS_ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.ESTAUDITORIAS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
						this.CAMBIO_ETAPA = (BigDecimal) dis.readObject();
					
						this.CODIGO_ETAPA = (BigDecimal) dis.readObject();
					
					this.RESPONSABLE = readString(dis);
					
					this.RESPONSABLE_CDP = readString(dis);
					
					this.TIPO_ETAPA = readString(dis);
					
					this.TIPO_ETAPA_CDP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.AUDITORIAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTAUDITORIAS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CAMBIO_ETAPA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CODIGO_ETAPA);
					
					// String
				
						writeString(this.RESPONSABLE,dos);
					
					// String
				
						writeString(this.RESPONSABLE_CDP,dos);
					
					// String
				
						writeString(this.TIPO_ETAPA,dos);
					
					// String
				
						writeString(this.TIPO_ETAPA_CDP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AUDITORIAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTAUDITORIAS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CAMBIO_ETAPA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CODIGO_ETAPA);
					
					// String
				
						writeString(this.RESPONSABLE,dos);
					
					// String
				
						writeString(this.RESPONSABLE_CDP,dos);
					
					// String
				
						writeString(this.TIPO_ETAPA,dos);
					
					// String
				
						writeString(this.TIPO_ETAPA_CDP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",AUDITORIAS_ID="+String.valueOf(AUDITORIAS_ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",ESTAUDITORIAS_ID="+String.valueOf(ESTAUDITORIAS_ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",CAMBIO_ETAPA="+String.valueOf(CAMBIO_ETAPA));
		sb.append(",CODIGO_ETAPA="+String.valueOf(CODIGO_ETAPA));
		sb.append(",RESPONSABLE="+RESPONSABLE);
		sb.append(",RESPONSABLE_CDP="+RESPONSABLE_CDP);
		sb.append(",TIPO_ETAPA="+TIPO_ETAPA);
		sb.append(",TIPO_ETAPA_CDP="+TIPO_ETAPA_CDP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_ACM_INICIAL_Inicial = new byte[0];
    static byte[] commonByteArray_ACM_INICIAL_Inicial = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal AUDITORIAS_ID;

				public BigDecimal getAUDITORIAS_ID () {
					return this.AUDITORIAS_ID;
				}

				public Boolean AUDITORIAS_IDIsNullable(){
				    return false;
				}
				public Boolean AUDITORIAS_IDIsKey(){
				    return false;
				}
				public Integer AUDITORIAS_IDLength(){
				    return null;
				}
				public Integer AUDITORIAS_IDPrecision(){
				    return null;
				}
				public String AUDITORIAS_IDDefault(){
				
					return "";
				
				}
				public String AUDITORIAS_IDComment(){
				
				    return "";
				
				}
				public String AUDITORIAS_IDPattern(){
				
					return "";
				
				}
				public String AUDITORIAS_IDOriginalDbColumnName(){
				
					return "AUDITORIAS_ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return false;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return null;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal ESTAUDITORIAS_ID;

				public BigDecimal getESTAUDITORIAS_ID () {
					return this.ESTAUDITORIAS_ID;
				}

				public Boolean ESTAUDITORIAS_IDIsNullable(){
				    return true;
				}
				public Boolean ESTAUDITORIAS_IDIsKey(){
				    return false;
				}
				public Integer ESTAUDITORIAS_IDLength(){
				    return null;
				}
				public Integer ESTAUDITORIAS_IDPrecision(){
				    return null;
				}
				public String ESTAUDITORIAS_IDDefault(){
				
					return "";
				
				}
				public String ESTAUDITORIAS_IDComment(){
				
				    return "";
				
				}
				public String ESTAUDITORIAS_IDPattern(){
				
					return "";
				
				}
				public String ESTAUDITORIAS_IDOriginalDbColumnName(){
				
					return "ESTAUDITORIAS_ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return null;
				}
				public Integer FECHAPrecision(){
				    return null;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public BigDecimal CAMBIO_ETAPA;

				public BigDecimal getCAMBIO_ETAPA () {
					return this.CAMBIO_ETAPA;
				}

				public Boolean CAMBIO_ETAPAIsNullable(){
				    return true;
				}
				public Boolean CAMBIO_ETAPAIsKey(){
				    return false;
				}
				public Integer CAMBIO_ETAPALength(){
				    return null;
				}
				public Integer CAMBIO_ETAPAPrecision(){
				    return null;
				}
				public String CAMBIO_ETAPADefault(){
				
					return "";
				
				}
				public String CAMBIO_ETAPAComment(){
				
				    return "";
				
				}
				public String CAMBIO_ETAPAPattern(){
				
					return "";
				
				}
				public String CAMBIO_ETAPAOriginalDbColumnName(){
				
					return "CAMBIO_ETAPA";
				
				}

				
			    public BigDecimal CODIGO_ETAPA;

				public BigDecimal getCODIGO_ETAPA () {
					return this.CODIGO_ETAPA;
				}

				public Boolean CODIGO_ETAPAIsNullable(){
				    return false;
				}
				public Boolean CODIGO_ETAPAIsKey(){
				    return false;
				}
				public Integer CODIGO_ETAPALength(){
				    return null;
				}
				public Integer CODIGO_ETAPAPrecision(){
				    return null;
				}
				public String CODIGO_ETAPADefault(){
				
					return "";
				
				}
				public String CODIGO_ETAPAComment(){
				
				    return "";
				
				}
				public String CODIGO_ETAPAPattern(){
				
					return "";
				
				}
				public String CODIGO_ETAPAOriginalDbColumnName(){
				
					return "CODIGO_ETAPA";
				
				}

				
			    public String RESPONSABLE;

				public String getRESPONSABLE () {
					return this.RESPONSABLE;
				}

				public Boolean RESPONSABLEIsNullable(){
				    return true;
				}
				public Boolean RESPONSABLEIsKey(){
				    return false;
				}
				public Integer RESPONSABLELength(){
				    return null;
				}
				public Integer RESPONSABLEPrecision(){
				    return null;
				}
				public String RESPONSABLEDefault(){
				
					return null;
				
				}
				public String RESPONSABLEComment(){
				
				    return "";
				
				}
				public String RESPONSABLEPattern(){
				
					return "";
				
				}
				public String RESPONSABLEOriginalDbColumnName(){
				
					return "RESPONSABLE";
				
				}

				
			    public String RESPONSABLE_CDP;

				public String getRESPONSABLE_CDP () {
					return this.RESPONSABLE_CDP;
				}

				public Boolean RESPONSABLE_CDPIsNullable(){
				    return true;
				}
				public Boolean RESPONSABLE_CDPIsKey(){
				    return false;
				}
				public Integer RESPONSABLE_CDPLength(){
				    return null;
				}
				public Integer RESPONSABLE_CDPPrecision(){
				    return null;
				}
				public String RESPONSABLE_CDPDefault(){
				
					return null;
				
				}
				public String RESPONSABLE_CDPComment(){
				
				    return "";
				
				}
				public String RESPONSABLE_CDPPattern(){
				
					return "";
				
				}
				public String RESPONSABLE_CDPOriginalDbColumnName(){
				
					return "RESPONSABLE_CDP";
				
				}

				
			    public String TIPO_ETAPA;

				public String getTIPO_ETAPA () {
					return this.TIPO_ETAPA;
				}

				public Boolean TIPO_ETAPAIsNullable(){
				    return true;
				}
				public Boolean TIPO_ETAPAIsKey(){
				    return false;
				}
				public Integer TIPO_ETAPALength(){
				    return null;
				}
				public Integer TIPO_ETAPAPrecision(){
				    return null;
				}
				public String TIPO_ETAPADefault(){
				
					return null;
				
				}
				public String TIPO_ETAPAComment(){
				
				    return "";
				
				}
				public String TIPO_ETAPAPattern(){
				
					return "";
				
				}
				public String TIPO_ETAPAOriginalDbColumnName(){
				
					return "TIPO_ETAPA";
				
				}

				
			    public String TIPO_ETAPA_CDP;

				public String getTIPO_ETAPA_CDP () {
					return this.TIPO_ETAPA_CDP;
				}

				public Boolean TIPO_ETAPA_CDPIsNullable(){
				    return true;
				}
				public Boolean TIPO_ETAPA_CDPIsKey(){
				    return false;
				}
				public Integer TIPO_ETAPA_CDPLength(){
				    return null;
				}
				public Integer TIPO_ETAPA_CDPPrecision(){
				    return null;
				}
				public String TIPO_ETAPA_CDPDefault(){
				
					return null;
				
				}
				public String TIPO_ETAPA_CDPComment(){
				
				    return "";
				
				}
				public String TIPO_ETAPA_CDPPattern(){
				
					return "";
				
				}
				public String TIPO_ETAPA_CDPOriginalDbColumnName(){
				
					return "TIPO_ETAPA_CDP";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_INICIAL_Inicial.length) {
				if(length < 1024 && commonByteArray_ACM_INICIAL_Inicial.length == 0) {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[1024];
				} else {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_INICIAL_Inicial, 0, length);
			strReturn = new String(commonByteArray_ACM_INICIAL_Inicial, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_INICIAL_Inicial.length) {
				if(length < 1024 && commonByteArray_ACM_INICIAL_Inicial.length == 0) {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[1024];
				} else {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_INICIAL_Inicial, 0, length);
			strReturn = new String(commonByteArray_ACM_INICIAL_Inicial, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.AUDITORIAS_ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.ESTAUDITORIAS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
						this.CAMBIO_ETAPA = (BigDecimal) dis.readObject();
					
						this.CODIGO_ETAPA = (BigDecimal) dis.readObject();
					
					this.RESPONSABLE = readString(dis);
					
					this.RESPONSABLE_CDP = readString(dis);
					
					this.TIPO_ETAPA = readString(dis);
					
					this.TIPO_ETAPA_CDP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.AUDITORIAS_ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.ESTAUDITORIAS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
						this.CAMBIO_ETAPA = (BigDecimal) dis.readObject();
					
						this.CODIGO_ETAPA = (BigDecimal) dis.readObject();
					
					this.RESPONSABLE = readString(dis);
					
					this.RESPONSABLE_CDP = readString(dis);
					
					this.TIPO_ETAPA = readString(dis);
					
					this.TIPO_ETAPA_CDP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.AUDITORIAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTAUDITORIAS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CAMBIO_ETAPA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CODIGO_ETAPA);
					
					// String
				
						writeString(this.RESPONSABLE,dos);
					
					// String
				
						writeString(this.RESPONSABLE_CDP,dos);
					
					// String
				
						writeString(this.TIPO_ETAPA,dos);
					
					// String
				
						writeString(this.TIPO_ETAPA_CDP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AUDITORIAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTAUDITORIAS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CAMBIO_ETAPA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CODIGO_ETAPA);
					
					// String
				
						writeString(this.RESPONSABLE,dos);
					
					// String
				
						writeString(this.RESPONSABLE_CDP,dos);
					
					// String
				
						writeString(this.TIPO_ETAPA,dos);
					
					// String
				
						writeString(this.TIPO_ETAPA_CDP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",AUDITORIAS_ID="+String.valueOf(AUDITORIAS_ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",ESTAUDITORIAS_ID="+String.valueOf(ESTAUDITORIAS_ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",CAMBIO_ETAPA="+String.valueOf(CAMBIO_ETAPA));
		sb.append(",CODIGO_ETAPA="+String.valueOf(CODIGO_ETAPA));
		sb.append(",RESPONSABLE="+RESPONSABLE);
		sb.append(",RESPONSABLE_CDP="+RESPONSABLE_CDP);
		sb.append(",TIPO_ETAPA="+TIPO_ETAPA);
		sb.append(",TIPO_ETAPA_CDP="+TIPO_ETAPA_CDP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();
row9Struct row9 = new row9Struct();
InsHauditoriasStruct InsHauditorias = new InsHauditoriasStruct();
row11Struct row11 = new row11Struct();






	
	/**
	 * [tOracleOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_4", false);
		start_Hash.put("tOracleOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"InsHauditorias");
					}
				
		int tos_count_tOracleOutput_4 = 0;
		






    
    int nb_line_tOracleOutput_4 = 0;
    int nb_line_update_tOracleOutput_4 = 0;
    int nb_line_inserted_tOracleOutput_4 = 0;
    int nb_line_deleted_tOracleOutput_4 = 0;
    int nb_line_rejected_tOracleOutput_4 = 0;

    int tmp_batchUpdateCount_tOracleOutput_4 = 0;

    int deletedCount_tOracleOutput_4=0;
    int updatedCount_tOracleOutput_4=0;
    int insertedCount_tOracleOutput_4=0;
    int rowsToCommitCount_tOracleOutput_4=0;
    int rejectedCount_tOracleOutput_4=0;

    boolean whetherReject_tOracleOutput_4 = false;

    java.sql.Connection conn_tOracleOutput_4 = null;

    //optional table
    String dbschema_tOracleOutput_4 = null;
    String tableName_tOracleOutput_4 = null;
                    String driverClass_tOracleOutput_4 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_4);
                String url_tOracleOutput_4 = null;
                    url_tOracleOutput_4 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
                String dbUser_tOracleOutput_4 = context.db_origen_Login;

	final String decryptedPassword_tOracleOutput_4 = context.db_origen_Password; 

                String dbPwd_tOracleOutput_4 = decryptedPassword_tOracleOutput_4;
                dbschema_tOracleOutput_4 = context.db_origen_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_4 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_4.put("user",dbUser_tOracleOutput_4);
                    atnParamsPrope_tOracleOutput_4.put("password",dbPwd_tOracleOutput_4);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_4.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_4 = java.sql.DriverManager.getConnection(url_tOracleOutput_4, atnParamsPrope_tOracleOutput_4);
        resourceMap.put("conn_tOracleOutput_4", conn_tOracleOutput_4);
            conn_tOracleOutput_4.setAutoCommit(false);
            int commitEvery_tOracleOutput_4 = 10000;
            int commitCounter_tOracleOutput_4 = 0;
        int batchSize_tOracleOutput_4 = 10000;
        int batchSizeCounter_tOracleOutput_4=0;
        int count_tOracleOutput_4=0;

        if(dbschema_tOracleOutput_4 == null || dbschema_tOracleOutput_4.trim().length() == 0) {
            tableName_tOracleOutput_4 = ("ACM_HAUDITORIAS");
        } else {
            tableName_tOracleOutput_4 = dbschema_tOracleOutput_4 + "." + ("ACM_HAUDITORIAS");
        }
                String insert_tOracleOutput_4 = "INSERT INTO " + tableName_tOracleOutput_4 + " (RECEPCION_ID,ETAPASNORMATIVIDAD_ID,AUDITORIAS_ID,DESCRIPCION,USUARIOS_ID,UORG_ID,FIETAPA,ESTAUDITORIA_ID,TIPO) VALUES (?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_4 = conn_tOracleOutput_4.prepareStatement(insert_tOracleOutput_4);
                        resourceMap.put("pstmt_tOracleOutput_4", pstmt_tOracleOutput_4);





 



/**
 * [tOracleOutput_4 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
InsHauditoriasStruct InsHauditorias_tmp = new InsHauditoriasStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */




	
	/**
	 * [tHashOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_2", false);
		start_Hash.put("tHashOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tHashOutput_2 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row11Struct> tHashFile_tHashOutput_2 = null;
		String hashKey_tHashOutput_2 = "tHashFile_Inicial_" + pid + "_tHashOutput_2";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_2)){
			    if(mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2) == null){
	      		    mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row11Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }else{
			    	tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }
			}
        int nb_line_tHashOutput_2 = 0;

 



/**
 * [tHashOutput_2 begin ] stop
 */



	
	/**
	 * [tReplicate_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tReplicate_1", false);
		start_Hash.put("tReplicate_1", System.currentTimeMillis());
		
	
	currentComponent="tReplicate_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tReplicate_1 = 0;
		

 



/**
 * [tReplicate_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_3", false);
		start_Hash.put("tOracleInput_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_3";
	
	
		int tos_count_tOracleInput_3 = 0;
		
	


	
		    int nb_line_tOracleInput_3 = 0;
		    java.sql.Connection conn_tOracleInput_3 = null;
				String driverClass_tOracleInput_3 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_3);
				
			String url_tOracleInput_3 = null;
				url_tOracleInput_3 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";

				String dbUser_tOracleInput_3 = context.db_origen_Login;

				

				
	final String decryptedPassword_tOracleInput_3 = context.db_origen_Password; 

				String dbPwd_tOracleInput_3 = decryptedPassword_tOracleInput_3;

				
					java.util.Properties atnParamsPrope_tOracleInput_3 = new java.util.Properties();
					atnParamsPrope_tOracleInput_3.put("user",dbUser_tOracleInput_3);
					atnParamsPrope_tOracleInput_3.put("password",dbPwd_tOracleInput_3);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleInput_3.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
					conn_tOracleInput_3 = java.sql.DriverManager.getConnection(url_tOracleInput_3, atnParamsPrope_tOracleInput_3);
				java.sql.Statement stmtGetTZ_tOracleInput_3 = conn_tOracleInput_3.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_3 = stmtGetTZ_tOracleInput_3.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_3 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_3.next()) {
					sessionTimezone_tOracleInput_3 = rsGetTZ_tOracleInput_3.getString(1);
				}
                                if (!(conn_tOracleInput_3 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_3.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_3.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_3.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_3);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_3).setSessionTimeZone(sessionTimezone_tOracleInput_3);
                                }
		    
			java.sql.Statement stmt_tOracleInput_3 = conn_tOracleInput_3.createStatement();

		    String dbquery_tOracleInput_3 = "SELECT \nHA.ID,\nHA.AUDITORIAS_ID,\nHA.RECEPCION_ID,\nRE.USUARIOS_ID,\nRE.UORG_ID,\n(SELECT ID FROM ACM_ESTAUDITORIAS W"
+"HERE NOMBRE = 'Sin iniciar' ) AS ESTAUDITORIAS_ID,\nACM.SumaDiasHabilesFecha (HA.FECHA,1,RE.UORG_ID) AS FECHA,\nACM.GetS"
+"igEtapaAuditoriaId(HA.AUDITORIAS_ID) AS CAMBIO_ETAPA,\nEN.CODIGO AS CODIGO_ETAPA,\nEN.RESPONSABLE,\nENCP.RESPONSABLE AS "
+"RESPONSABLE_CDP,\nHA.TIPO AS TIPO_ETAPA,\nDECODE(ENCP.CODIGO, EN.CODIGO, 'Conciliación', 'Etapa') AS TIPO_ETAPA_CDP \nFR"
+"OM ACM_HAUDITORIAS HA \nINNER JOIN ACM_AUDITORIAS AU ON AU.HAUDITORIAS_ID = HA.ID AND HA.ESTREGISTRO_ID = 1\nINNER JOIN "
+"ACM_RECEPCION RE  ON RE.ID = HA.RECEPCION_ID  \nINNER JOIN ACM_ESTAUDITORIAS ES ON ES.ID = HA.ESTAUDITORIA_ID\nINNER JOI"
+"N ACM_ETAPASNORMATIVIDAD EN ON EN.ID = HA.ETAPASNORMATIVIDAD_ID AND EN.ESTREGISTRO_ID = 1\nINNER JOIN ACM_ETAPASNORMATIV"
+"IDAD ENCP ON ENCP.ID = ACM.GetSigEtapaAuditoriaId(HA.AUDITORIAS_ID)\nWHERE \nES.NOMBRE = 'Finalizada'\nAND HA.VLGOSADO <"
+"> 0\nAND (HA.EJECUCION = 0 OR HA.EJECUCION IS NULL )\nAND ((EN.CODIGO = 1 AND HA.VLGOSADO <> 0) OR\n    (((EN.CODIGO <> "
+"1 AND EN.RESPONSABLE = 'PRESTADOR' AND HA.TIPO <> 'Conciliación') OR (HA.TIPO = 'Conciliación' AND HA.VRATIFICADO <> 0))"
+") OR\n     EN.RESPONSABLE = 'AUDITOR' AND EN.CODIGO <> 1 AND HA.VRATIFICADO <> 0)";
		    

		    globalMap.put("tOracleInput_3_QUERY",dbquery_tOracleInput_3);

		    java.sql.ResultSet rs_tOracleInput_3 = null;

		    try {
		    	rs_tOracleInput_3 = stmt_tOracleInput_3.executeQuery(dbquery_tOracleInput_3);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_3 = rs_tOracleInput_3.getMetaData();
		    	int colQtyInRs_tOracleInput_3 = rsmd_tOracleInput_3.getColumnCount();

		    String tmpContent_tOracleInput_3 = null;
		    
		    
		    while (rs_tOracleInput_3.next()) {
		        nb_line_tOracleInput_3++;
		        
							if(colQtyInRs_tOracleInput_3 < 1) {
								row7.ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(1) != null) {
						row7.ID = rs_tOracleInput_3.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 2) {
								row7.AUDITORIAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(2) != null) {
						row7.AUDITORIAS_ID = rs_tOracleInput_3.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 3) {
								row7.RECEPCION_ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(3) != null) {
						row7.RECEPCION_ID = rs_tOracleInput_3.getBigDecimal(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 4) {
								row7.USUARIOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(4) != null) {
						row7.USUARIOS_ID = rs_tOracleInput_3.getBigDecimal(4);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 5) {
								row7.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(5) != null) {
						row7.UORG_ID = rs_tOracleInput_3.getBigDecimal(5);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 6) {
								row7.ESTAUDITORIAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(6) != null) {
						row7.ESTAUDITORIAS_ID = rs_tOracleInput_3.getBigDecimal(6);
					} else {
				
						row7.ESTAUDITORIAS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 7) {
								row7.FECHA = null;
							} else {
										
			row7.FECHA = routines.system.JDBCUtil.getDate(rs_tOracleInput_3, 7);
		                    }
							if(colQtyInRs_tOracleInput_3 < 8) {
								row7.CAMBIO_ETAPA = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(8) != null) {
						row7.CAMBIO_ETAPA = rs_tOracleInput_3.getBigDecimal(8);
					} else {
				
						row7.CAMBIO_ETAPA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 9) {
								row7.CODIGO_ETAPA = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(9) != null) {
						row7.CODIGO_ETAPA = rs_tOracleInput_3.getBigDecimal(9);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 10) {
								row7.RESPONSABLE = null;
							} else {
	                         		
        	row7.RESPONSABLE = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 10, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 11) {
								row7.RESPONSABLE_CDP = null;
							} else {
	                         		
        	row7.RESPONSABLE_CDP = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 11, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 12) {
								row7.TIPO_ETAPA = null;
							} else {
	                         		
        	row7.TIPO_ETAPA = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 12, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 13) {
								row7.TIPO_ETAPA_CDP = null;
							} else {
	                         		
        	row7.TIPO_ETAPA_CDP = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 13, false);
		                    }
					




 



/**
 * [tOracleInput_3 begin ] stop
 */
	
	/**
	 * [tOracleInput_3 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 


	tos_count_tOracleInput_3++;

/**
 * [tOracleInput_3 main ] stop
 */
	
	/**
	 * [tOracleInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tReplicate_1 main ] start
	 */

	

	
	
	currentComponent="tReplicate_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					


	row9 = new row9Struct();
						
	row9.ID = row7.ID;								
	row9.AUDITORIAS_ID = row7.AUDITORIAS_ID;								
	row9.RECEPCION_ID = row7.RECEPCION_ID;								
	row9.USUARIOS_ID = row7.USUARIOS_ID;								
	row9.UORG_ID = row7.UORG_ID;								
	row9.ESTAUDITORIAS_ID = row7.ESTAUDITORIAS_ID;								
	row9.FECHA = row7.FECHA;								
	row9.CAMBIO_ETAPA = row7.CAMBIO_ETAPA;								
	row9.CODIGO_ETAPA = row7.CODIGO_ETAPA;								
	row9.RESPONSABLE = row7.RESPONSABLE;								
	row9.RESPONSABLE_CDP = row7.RESPONSABLE_CDP;								
	row9.TIPO_ETAPA = row7.TIPO_ETAPA;								
	row9.TIPO_ETAPA_CDP = row7.TIPO_ETAPA_CDP;			
	row11 = new row11Struct();
						
	row11.ID = row7.ID;								
	row11.AUDITORIAS_ID = row7.AUDITORIAS_ID;								
	row11.RECEPCION_ID = row7.RECEPCION_ID;								
	row11.USUARIOS_ID = row7.USUARIOS_ID;								
	row11.UORG_ID = row7.UORG_ID;								
	row11.ESTAUDITORIAS_ID = row7.ESTAUDITORIAS_ID;								
	row11.FECHA = row7.FECHA;								
	row11.CAMBIO_ETAPA = row7.CAMBIO_ETAPA;								
	row11.CODIGO_ETAPA = row7.CODIGO_ETAPA;								
	row11.RESPONSABLE = row7.RESPONSABLE;								
	row11.RESPONSABLE_CDP = row7.RESPONSABLE_CDP;								
	row11.TIPO_ETAPA = row7.TIPO_ETAPA;								
	row11.TIPO_ETAPA_CDP = row7.TIPO_ETAPA_CDP;			


 


	tos_count_tReplicate_1++;

/**
 * [tReplicate_1 main ] stop
 */
	
	/**
	 * [tReplicate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tReplicate_1";
	
	

 



/**
 * [tReplicate_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

InsHauditorias = null;


// # Output table : 'InsHauditorias'
InsHauditorias_tmp.RECEPCION_ID = row9.RECEPCION_ID ;
InsHauditorias_tmp.ETAPASNORMATIVIDAD_ID = row9.CAMBIO_ETAPA ;
InsHauditorias_tmp.AUDITORIAS_ID = row9.AUDITORIAS_ID ;
InsHauditorias_tmp.DESCRIPCION = "ETL Cambio de etapa";
InsHauditorias_tmp.USUARIOS_ID = row9.USUARIOS_ID ;
InsHauditorias_tmp.UORG_ID = row9.UORG_ID ;
InsHauditorias_tmp.FIETAPA = row9.FECHA ;
InsHauditorias_tmp.ESTAUDITORIA_ID = row9.ESTAUDITORIAS_ID ;
InsHauditorias_tmp.TIPO = row9.TIPO_ETAPA_CDP ;
InsHauditorias = InsHauditorias_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "InsHauditorias"
if(InsHauditorias != null) { 



	
	/**
	 * [tOracleOutput_4 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"InsHauditorias"
						
						);
					}
					



        whetherReject_tOracleOutput_4 = false;
                        pstmt_tOracleOutput_4.setBigDecimal(1, InsHauditorias.RECEPCION_ID);

                        pstmt_tOracleOutput_4.setBigDecimal(2, InsHauditorias.ETAPASNORMATIVIDAD_ID);

                        pstmt_tOracleOutput_4.setBigDecimal(3, InsHauditorias.AUDITORIAS_ID);

                        if(InsHauditorias.DESCRIPCION == null) {
pstmt_tOracleOutput_4.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_4.setString(4, InsHauditorias.DESCRIPCION);
}

                        pstmt_tOracleOutput_4.setBigDecimal(5, InsHauditorias.USUARIOS_ID);

                        pstmt_tOracleOutput_4.setBigDecimal(6, InsHauditorias.UORG_ID);

                        if(InsHauditorias.FIETAPA != null) {
pstmt_tOracleOutput_4.setObject(7, new java.sql.Timestamp(InsHauditorias.FIETAPA.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_4.setNull(7, java.sql.Types.DATE);
}

                        pstmt_tOracleOutput_4.setBigDecimal(8, InsHauditorias.ESTAUDITORIA_ID);

                        if(InsHauditorias.TIPO == null) {
pstmt_tOracleOutput_4.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_4.setString(9, InsHauditorias.TIPO);
}

                pstmt_tOracleOutput_4.addBatch();
                nb_line_tOracleOutput_4++;
                batchSizeCounter_tOracleOutput_4++;
            if (batchSize_tOracleOutput_4 > 0 &&  batchSize_tOracleOutput_4 <= batchSizeCounter_tOracleOutput_4) {
                try {
                    pstmt_tOracleOutput_4.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_4){
globalMap.put("tOracleOutput_4_ERROR_MESSAGE",e_tOracleOutput_4.getMessage());
			        java.sql.SQLException ne_tOracleOutput_4 = e_tOracleOutput_4.getNextException(),sqle_tOracleOutput_4=null;
			    	String errormessage_tOracleOutput_4;
					if (ne_tOracleOutput_4 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_4 = new java.sql.SQLException(e_tOracleOutput_4.getMessage() + "\ncaused by: " + ne_tOracleOutput_4.getMessage(), ne_tOracleOutput_4.getSQLState(), ne_tOracleOutput_4.getErrorCode(), ne_tOracleOutput_4);
						errormessage_tOracleOutput_4 = sqle_tOracleOutput_4.getMessage();
					}else{
						errormessage_tOracleOutput_4 = e_tOracleOutput_4.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_4);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_4 = pstmt_tOracleOutput_4.getUpdateCount();
                    insertedCount_tOracleOutput_4
                += (tmp_batchUpdateCount_tOracleOutput_4!=-1?tmp_batchUpdateCount_tOracleOutput_4:0);
                rowsToCommitCount_tOracleOutput_4 += (tmp_batchUpdateCount_tOracleOutput_4!=-1?tmp_batchUpdateCount_tOracleOutput_4:0);
                batchSizeCounter_tOracleOutput_4 = 0;
            }
                commitCounter_tOracleOutput_4++;
                if(commitEvery_tOracleOutput_4 <= commitCounter_tOracleOutput_4) {
                    if(batchSizeCounter_tOracleOutput_4 > 0) {
                        try {
                            pstmt_tOracleOutput_4.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_4){
globalMap.put("tOracleOutput_4_ERROR_MESSAGE",e_tOracleOutput_4.getMessage());
					        java.sql.SQLException ne_tOracleOutput_4 = e_tOracleOutput_4.getNextException(),sqle_tOracleOutput_4=null;
					    	String errormessage_tOracleOutput_4;
							if (ne_tOracleOutput_4 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_4 = new java.sql.SQLException(e_tOracleOutput_4.getMessage() + "\ncaused by: " + ne_tOracleOutput_4.getMessage(), ne_tOracleOutput_4.getSQLState(), ne_tOracleOutput_4.getErrorCode(), ne_tOracleOutput_4);
								errormessage_tOracleOutput_4 = sqle_tOracleOutput_4.getMessage();
							}else{
								errormessage_tOracleOutput_4 = e_tOracleOutput_4.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_4);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_4 = pstmt_tOracleOutput_4.getUpdateCount();
                            insertedCount_tOracleOutput_4
                        += (tmp_batchUpdateCount_tOracleOutput_4!=-1?tmp_batchUpdateCount_tOracleOutput_4:0);
                        rowsToCommitCount_tOracleOutput_4 += (tmp_batchUpdateCount_tOracleOutput_4!=-1?tmp_batchUpdateCount_tOracleOutput_4:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_4 != 0){
                    	
                    }
                    conn_tOracleOutput_4.commit();
                    if(rowsToCommitCount_tOracleOutput_4 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_4 = 0;
                    }
                    commitCounter_tOracleOutput_4=0;
                    	batchSizeCounter_tOracleOutput_4=0;
                }

 


	tos_count_tOracleOutput_4++;

/**
 * [tOracleOutput_4 main ] stop
 */
	
	/**
	 * [tOracleOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	

 



/**
 * [tOracleOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	

 



/**
 * [tOracleOutput_4 process_data_end ] stop
 */

} // End of branch "InsHauditorias"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */




	
	/**
	 * [tHashOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row11"
						
						);
					}
					



    
		row11Struct oneRow_tHashOutput_2 = new row11Struct();
				
					oneRow_tHashOutput_2.ID = row11.ID;
					oneRow_tHashOutput_2.AUDITORIAS_ID = row11.AUDITORIAS_ID;
					oneRow_tHashOutput_2.RECEPCION_ID = row11.RECEPCION_ID;
					oneRow_tHashOutput_2.USUARIOS_ID = row11.USUARIOS_ID;
					oneRow_tHashOutput_2.UORG_ID = row11.UORG_ID;
					oneRow_tHashOutput_2.ESTAUDITORIAS_ID = row11.ESTAUDITORIAS_ID;
					oneRow_tHashOutput_2.FECHA = row11.FECHA;
					oneRow_tHashOutput_2.CAMBIO_ETAPA = row11.CAMBIO_ETAPA;
					oneRow_tHashOutput_2.CODIGO_ETAPA = row11.CODIGO_ETAPA;
					oneRow_tHashOutput_2.RESPONSABLE = row11.RESPONSABLE;
					oneRow_tHashOutput_2.RESPONSABLE_CDP = row11.RESPONSABLE_CDP;
					oneRow_tHashOutput_2.TIPO_ETAPA = row11.TIPO_ETAPA;
					oneRow_tHashOutput_2.TIPO_ETAPA_CDP = row11.TIPO_ETAPA_CDP;
		
        tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
        nb_line_tHashOutput_2 ++;

 


	tos_count_tHashOutput_2++;

/**
 * [tHashOutput_2 main ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tReplicate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tReplicate_1";
	
	

 



/**
 * [tReplicate_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_3 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

}
}finally{
	if (rs_tOracleInput_3 != null) {
		rs_tOracleInput_3.close();
	}
	if (stmt_tOracleInput_3 != null) {
		stmt_tOracleInput_3.close();
	}
	if(conn_tOracleInput_3 != null && !conn_tOracleInput_3.isClosed()) {
	
			conn_tOracleInput_3.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tOracleInput_3_NB_LINE",nb_line_tOracleInput_3);
 

ok_Hash.put("tOracleInput_3", true);
end_Hash.put("tOracleInput_3", System.currentTimeMillis());




/**
 * [tOracleInput_3 end ] stop
 */

	
	/**
	 * [tReplicate_1 end ] start
	 */

	

	
	
	currentComponent="tReplicate_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tReplicate_1", true);
end_Hash.put("tReplicate_1", System.currentTimeMillis());




/**
 * [tReplicate_1 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tOracleOutput_4 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_4 > 0) {
            try {
            	if (pstmt_tOracleOutput_4 != null) {
					
					pstmt_tOracleOutput_4.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_4){
globalMap.put("tOracleOutput_4_ERROR_MESSAGE",e_tOracleOutput_4.getMessage());
		        java.sql.SQLException ne_tOracleOutput_4 = e_tOracleOutput_4.getNextException(),sqle_tOracleOutput_4=null;
		    	String errormessage_tOracleOutput_4;
				if (ne_tOracleOutput_4 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_4 = new java.sql.SQLException(e_tOracleOutput_4.getMessage() + "\ncaused by: " + ne_tOracleOutput_4.getMessage(), ne_tOracleOutput_4.getSQLState(), ne_tOracleOutput_4.getErrorCode(), ne_tOracleOutput_4);
					errormessage_tOracleOutput_4 = sqle_tOracleOutput_4.getMessage();
				}else{
					errormessage_tOracleOutput_4 = e_tOracleOutput_4.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_4);
            	
        	}
        	if (pstmt_tOracleOutput_4 != null) {
            	tmp_batchUpdateCount_tOracleOutput_4 = pstmt_tOracleOutput_4.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_4
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_4!=-1?tmp_batchUpdateCount_tOracleOutput_4:0);
				rowsToCommitCount_tOracleOutput_4 += (tmp_batchUpdateCount_tOracleOutput_4!=-1?tmp_batchUpdateCount_tOracleOutput_4:0);
            }
        }
        if(pstmt_tOracleOutput_4 != null) {
			
				pstmt_tOracleOutput_4.close();
				resourceMap.remove("pstmt_tOracleOutput_4");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_4", true);
		if(commitCounter_tOracleOutput_4 > 0 && rowsToCommitCount_tOracleOutput_4 != 0) {
			
		}
		conn_tOracleOutput_4.commit();
		if(commitCounter_tOracleOutput_4 > 0 && rowsToCommitCount_tOracleOutput_4 != 0) {
			
			rowsToCommitCount_tOracleOutput_4 = 0;
		}
		commitCounter_tOracleOutput_4 = 0;
		
		
		conn_tOracleOutput_4 .close();
		
		resourceMap.put("finish_tOracleOutput_4", true);
   	

	
	nb_line_deleted_tOracleOutput_4=nb_line_deleted_tOracleOutput_4+ deletedCount_tOracleOutput_4;
	nb_line_update_tOracleOutput_4=nb_line_update_tOracleOutput_4 + updatedCount_tOracleOutput_4;
	nb_line_inserted_tOracleOutput_4=nb_line_inserted_tOracleOutput_4 + insertedCount_tOracleOutput_4;
	nb_line_rejected_tOracleOutput_4=nb_line_rejected_tOracleOutput_4 + rejectedCount_tOracleOutput_4;
	
        globalMap.put("tOracleOutput_4_NB_LINE",nb_line_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_UPDATED",nb_line_update_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_4);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"InsHauditorias");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_4", true);
end_Hash.put("tOracleOutput_4", System.currentTimeMillis());




/**
 * [tOracleOutput_4 end ] stop
 */







	
	/**
	 * [tHashOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tHashOutput_2", true);
end_Hash.put("tHashOutput_2", System.currentTimeMillis());




/**
 * [tHashOutput_2 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_3:OnSubjobOk1", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tOracleInput_4Process(globalMap); 
						
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_3:OnSubjobOk2", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk15", 0, "ok");
								} 
							
							tOracleInput_14Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 finally ] stop
 */

	
	/**
	 * [tReplicate_1 finally ] start
	 */

	

	
	
	currentComponent="tReplicate_1";
	
	

 



/**
 * [tReplicate_1 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tOracleOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_4") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_4 = null;
                if ((pstmtToClose_tOracleOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_4")) != null) {
                    pstmtToClose_tOracleOutput_4.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_4") == null){
            java.sql.Connection ctn_tOracleOutput_4 = null;
            if((ctn_tOracleOutput_4 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_4")) != null){
                try {
                    ctn_tOracleOutput_4.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_4) {
                    String errorMessage_tOracleOutput_4 = "failed to close the connection in tOracleOutput_4 :" + sqlEx_tOracleOutput_4.getMessage();
                    System.err.println(errorMessage_tOracleOutput_4);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_4 finally ] stop
 */







	
	/**
	 * [tHashOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_ACM_INICIAL_Inicial = new byte[0];
    static byte[] commonByteArray_ACM_INICIAL_Inicial = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal AUDITORIAS_ID;

				public BigDecimal getAUDITORIAS_ID () {
					return this.AUDITORIAS_ID;
				}

				public Boolean AUDITORIAS_IDIsNullable(){
				    return false;
				}
				public Boolean AUDITORIAS_IDIsKey(){
				    return false;
				}
				public Integer AUDITORIAS_IDLength(){
				    return 0;
				}
				public Integer AUDITORIAS_IDPrecision(){
				    return null;
				}
				public String AUDITORIAS_IDDefault(){
				
					return "";
				
				}
				public String AUDITORIAS_IDComment(){
				
				    return "";
				
				}
				public String AUDITORIAS_IDPattern(){
				
					return "";
				
				}
				public String AUDITORIAS_IDOriginalDbColumnName(){
				
					return "AUDITORIAS_ID";
				
				}

				
			    public BigDecimal ETAPASNORMATIVIDAD_ID;

				public BigDecimal getETAPASNORMATIVIDAD_ID () {
					return this.ETAPASNORMATIVIDAD_ID;
				}

				public Boolean ETAPASNORMATIVIDAD_IDIsNullable(){
				    return false;
				}
				public Boolean ETAPASNORMATIVIDAD_IDIsKey(){
				    return false;
				}
				public Integer ETAPASNORMATIVIDAD_IDLength(){
				    return 0;
				}
				public Integer ETAPASNORMATIVIDAD_IDPrecision(){
				    return null;
				}
				public String ETAPASNORMATIVIDAD_IDDefault(){
				
					return "";
				
				}
				public String ETAPASNORMATIVIDAD_IDComment(){
				
				    return "";
				
				}
				public String ETAPASNORMATIVIDAD_IDPattern(){
				
					return "";
				
				}
				public String ETAPASNORMATIVIDAD_IDOriginalDbColumnName(){
				
					return "ETAPASNORMATIVIDAD_ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return false;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return 0;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 0;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.AUDITORIAS_ID = (BigDecimal) dis.readObject();
					
						this.ETAPASNORMATIVIDAD_ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.AUDITORIAS_ID = (BigDecimal) dis.readObject();
					
						this.ETAPASNORMATIVIDAD_ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.AUDITORIAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ETAPASNORMATIVIDAD_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AUDITORIAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ETAPASNORMATIVIDAD_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",AUDITORIAS_ID="+String.valueOf(AUDITORIAS_ID));
		sb.append(",ETAPASNORMATIVIDAD_ID="+String.valueOf(ETAPASNORMATIVIDAD_ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();




	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tHashOutput_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row8Struct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_Inicial_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
			    if(mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null){
	      		    mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row8Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }else{
			    	tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }
			}
        int nb_line_tHashOutput_1 = 0;

 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_4", false);
		start_Hash.put("tOracleInput_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_4";
	
	
		int tos_count_tOracleInput_4 = 0;
		
	


	
		    int nb_line_tOracleInput_4 = 0;
		    java.sql.Connection conn_tOracleInput_4 = null;
				String driverClass_tOracleInput_4 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_4);
				
			String url_tOracleInput_4 = null;
				url_tOracleInput_4 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";

				String dbUser_tOracleInput_4 = context.db_origen_Login;

				

				
	final String decryptedPassword_tOracleInput_4 = context.db_origen_Password; 

				String dbPwd_tOracleInput_4 = decryptedPassword_tOracleInput_4;

				
					java.util.Properties atnParamsPrope_tOracleInput_4 = new java.util.Properties();
					atnParamsPrope_tOracleInput_4.put("user",dbUser_tOracleInput_4);
					atnParamsPrope_tOracleInput_4.put("password",dbPwd_tOracleInput_4);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleInput_4.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
					conn_tOracleInput_4 = java.sql.DriverManager.getConnection(url_tOracleInput_4, atnParamsPrope_tOracleInput_4);
				java.sql.Statement stmtGetTZ_tOracleInput_4 = conn_tOracleInput_4.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_4 = stmtGetTZ_tOracleInput_4.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_4 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_4.next()) {
					sessionTimezone_tOracleInput_4 = rsGetTZ_tOracleInput_4.getString(1);
				}
                                if (!(conn_tOracleInput_4 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_4.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_4.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_4.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_4);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_4).setSessionTimeZone(sessionTimezone_tOracleInput_4);
                                }
		    
			java.sql.Statement stmt_tOracleInput_4 = conn_tOracleInput_4.createStatement();

		    String dbquery_tOracleInput_4 = "SELECT \nHA.ID,\nHA.AUDITORIAS_ID,\nHA.ETAPASNORMATIVIDAD_ID,\nHA.RECEPCION_ID,\nHA.USUARIOS_ID,\nHA.UORG_ID\nFROM ACM_"
+"HAUDITORIAS HA \nWHERE \nTRUNC(HA.FECHA) = TRUNC(SYSDATE)\nORDER BY HA.ID DESC";
		    

		    globalMap.put("tOracleInput_4_QUERY",dbquery_tOracleInput_4);

		    java.sql.ResultSet rs_tOracleInput_4 = null;

		    try {
		    	rs_tOracleInput_4 = stmt_tOracleInput_4.executeQuery(dbquery_tOracleInput_4);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_4 = rs_tOracleInput_4.getMetaData();
		    	int colQtyInRs_tOracleInput_4 = rsmd_tOracleInput_4.getColumnCount();

		    String tmpContent_tOracleInput_4 = null;
		    
		    
		    while (rs_tOracleInput_4.next()) {
		        nb_line_tOracleInput_4++;
		        
							if(colQtyInRs_tOracleInput_4 < 1) {
								row8.ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(1) != null) {
						row8.ID = rs_tOracleInput_4.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 2) {
								row8.AUDITORIAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(2) != null) {
						row8.AUDITORIAS_ID = rs_tOracleInput_4.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 3) {
								row8.ETAPASNORMATIVIDAD_ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(3) != null) {
						row8.ETAPASNORMATIVIDAD_ID = rs_tOracleInput_4.getBigDecimal(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 4) {
								row8.RECEPCION_ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(4) != null) {
						row8.RECEPCION_ID = rs_tOracleInput_4.getBigDecimal(4);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 5) {
								row8.USUARIOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(5) != null) {
						row8.USUARIOS_ID = rs_tOracleInput_4.getBigDecimal(5);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 6) {
								row8.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(6) != null) {
						row8.UORG_ID = rs_tOracleInput_4.getBigDecimal(6);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
					




 



/**
 * [tOracleInput_4 begin ] stop
 */
	
	/**
	 * [tOracleInput_4 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 


	tos_count_tOracleInput_4++;

/**
 * [tOracleInput_4 main ] stop
 */
	
	/**
	 * [tOracleInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					



    
		row8Struct oneRow_tHashOutput_1 = new row8Struct();
				
					oneRow_tHashOutput_1.ID = row8.ID;
					oneRow_tHashOutput_1.AUDITORIAS_ID = row8.AUDITORIAS_ID;
					oneRow_tHashOutput_1.ETAPASNORMATIVIDAD_ID = row8.ETAPASNORMATIVIDAD_ID;
					oneRow_tHashOutput_1.RECEPCION_ID = row8.RECEPCION_ID;
					oneRow_tHashOutput_1.USUARIOS_ID = row8.USUARIOS_ID;
					oneRow_tHashOutput_1.UORG_ID = row8.UORG_ID;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;

 


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_4 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

}
}finally{
	if (rs_tOracleInput_4 != null) {
		rs_tOracleInput_4.close();
	}
	if (stmt_tOracleInput_4 != null) {
		stmt_tOracleInput_4.close();
	}
	if(conn_tOracleInput_4 != null && !conn_tOracleInput_4.isClosed()) {
	
			conn_tOracleInput_4.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tOracleInput_4_NB_LINE",nb_line_tOracleInput_4);
 

ok_Hash.put("tOracleInput_4", true);
end_Hash.put("tOracleInput_4", System.currentTimeMillis());




/**
 * [tOracleInput_4 end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());




/**
 * [tHashOutput_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tOracleInput_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class UPDGLOSAStruct implements routines.system.IPersistableRow<UPDGLOSAStruct> {
    final static byte[] commonByteArrayLock_ACM_INICIAL_Inicial = new byte[0];
    static byte[] commonByteArray_ACM_INICIAL_Inicial = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "SALUDSIS\".\"ISEQ$$_102063\".nextval";
				
				}
				public String IDComment(){
				
				    return "PK - LLave primaria";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal VSOPORTADO;

				public BigDecimal getVSOPORTADO () {
					return this.VSOPORTADO;
				}

				public Boolean VSOPORTADOIsNullable(){
				    return true;
				}
				public Boolean VSOPORTADOIsKey(){
				    return false;
				}
				public Integer VSOPORTADOLength(){
				    return 0;
				}
				public Integer VSOPORTADOPrecision(){
				    return null;
				}
				public String VSOPORTADODefault(){
				
					return "0";
				
				}
				public String VSOPORTADOComment(){
				
				    return "Valor con soportes";
				
				}
				public String VSOPORTADOPattern(){
				
					return "";
				
				}
				public String VSOPORTADOOriginalDbColumnName(){
				
					return "VSOPORTADO";
				
				}

				
			    public BigDecimal VACEPTADO;

				public BigDecimal getVACEPTADO () {
					return this.VACEPTADO;
				}

				public Boolean VACEPTADOIsNullable(){
				    return true;
				}
				public Boolean VACEPTADOIsKey(){
				    return false;
				}
				public Integer VACEPTADOLength(){
				    return 0;
				}
				public Integer VACEPTADOPrecision(){
				    return null;
				}
				public String VACEPTADODefault(){
				
					return "0";
				
				}
				public String VACEPTADOComment(){
				
				    return "Valor Aceptado";
				
				}
				public String VACEPTADOPattern(){
				
					return "";
				
				}
				public String VACEPTADOOriginalDbColumnName(){
				
					return "VACEPTADO";
				
				}

				
			    public BigDecimal VRATIFICADO;

				public BigDecimal getVRATIFICADO () {
					return this.VRATIFICADO;
				}

				public Boolean VRATIFICADOIsNullable(){
				    return true;
				}
				public Boolean VRATIFICADOIsKey(){
				    return false;
				}
				public Integer VRATIFICADOLength(){
				    return 0;
				}
				public Integer VRATIFICADOPrecision(){
				    return null;
				}
				public String VRATIFICADODefault(){
				
					return "0";
				
				}
				public String VRATIFICADOComment(){
				
				    return "Valor Ratificado";
				
				}
				public String VRATIFICADOPattern(){
				
					return "";
				
				}
				public String VRATIFICADOOriginalDbColumnName(){
				
					return "VRATIFICADO";
				
				}

				
			    public BigDecimal VAVALPAGO;

				public BigDecimal getVAVALPAGO () {
					return this.VAVALPAGO;
				}

				public Boolean VAVALPAGOIsNullable(){
				    return true;
				}
				public Boolean VAVALPAGOIsKey(){
				    return false;
				}
				public Integer VAVALPAGOLength(){
				    return 0;
				}
				public Integer VAVALPAGOPrecision(){
				    return null;
				}
				public String VAVALPAGODefault(){
				
					return "0";
				
				}
				public String VAVALPAGOComment(){
				
				    return "Valor con aval de Pago";
				
				}
				public String VAVALPAGOPattern(){
				
					return "";
				
				}
				public String VAVALPAGOOriginalDbColumnName(){
				
					return "VAVALPAGO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final UPDGLOSAStruct other = (UPDGLOSAStruct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(UPDGLOSAStruct other) {

		other.ID = this.ID;
	            other.VSOPORTADO = this.VSOPORTADO;
	            other.VACEPTADO = this.VACEPTADO;
	            other.VRATIFICADO = this.VRATIFICADO;
	            other.VAVALPAGO = this.VAVALPAGO;
	            
	}

	public void copyKeysDataTo(UPDGLOSAStruct other) {

		other.ID = this.ID;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAVALPAGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VAVALPAGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",VSOPORTADO="+String.valueOf(VSOPORTADO));
		sb.append(",VACEPTADO="+String.valueOf(VACEPTADO));
		sb.append(",VRATIFICADO="+String.valueOf(VRATIFICADO));
		sb.append(",VAVALPAGO="+String.valueOf(VAVALPAGO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(UPDGLOSAStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
    final static byte[] commonByteArrayLock_ACM_INICIAL_Inicial = new byte[0];
    static byte[] commonByteArray_ACM_INICIAL_Inicial = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal VSOPORTADO;

				public BigDecimal getVSOPORTADO () {
					return this.VSOPORTADO;
				}

				public Boolean VSOPORTADOIsNullable(){
				    return true;
				}
				public Boolean VSOPORTADOIsKey(){
				    return false;
				}
				public Integer VSOPORTADOLength(){
				    return 0;
				}
				public Integer VSOPORTADOPrecision(){
				    return 0;
				}
				public String VSOPORTADODefault(){
				
					return "";
				
				}
				public String VSOPORTADOComment(){
				
				    return "";
				
				}
				public String VSOPORTADOPattern(){
				
					return "";
				
				}
				public String VSOPORTADOOriginalDbColumnName(){
				
					return "VSOPORTADO";
				
				}

				
			    public BigDecimal VACEPTADO;

				public BigDecimal getVACEPTADO () {
					return this.VACEPTADO;
				}

				public Boolean VACEPTADOIsNullable(){
				    return true;
				}
				public Boolean VACEPTADOIsKey(){
				    return false;
				}
				public Integer VACEPTADOLength(){
				    return 0;
				}
				public Integer VACEPTADOPrecision(){
				    return 0;
				}
				public String VACEPTADODefault(){
				
					return "";
				
				}
				public String VACEPTADOComment(){
				
				    return "";
				
				}
				public String VACEPTADOPattern(){
				
					return "";
				
				}
				public String VACEPTADOOriginalDbColumnName(){
				
					return "VACEPTADO";
				
				}

				
			    public BigDecimal VAVALPAGO;

				public BigDecimal getVAVALPAGO () {
					return this.VAVALPAGO;
				}

				public Boolean VAVALPAGOIsNullable(){
				    return true;
				}
				public Boolean VAVALPAGOIsKey(){
				    return false;
				}
				public Integer VAVALPAGOLength(){
				    return 0;
				}
				public Integer VAVALPAGOPrecision(){
				    return 0;
				}
				public String VAVALPAGODefault(){
				
					return "";
				
				}
				public String VAVALPAGOComment(){
				
				    return "";
				
				}
				public String VAVALPAGOPattern(){
				
					return "";
				
				}
				public String VAVALPAGOOriginalDbColumnName(){
				
					return "VAVALPAGO";
				
				}

				
			    public BigDecimal VRATIFICADO;

				public BigDecimal getVRATIFICADO () {
					return this.VRATIFICADO;
				}

				public Boolean VRATIFICADOIsNullable(){
				    return true;
				}
				public Boolean VRATIFICADOIsKey(){
				    return false;
				}
				public Integer VRATIFICADOLength(){
				    return 0;
				}
				public Integer VRATIFICADOPrecision(){
				    return null;
				}
				public String VRATIFICADODefault(){
				
					return "";
				
				}
				public String VRATIFICADOComment(){
				
				    return "";
				
				}
				public String VRATIFICADOPattern(){
				
					return "";
				
				}
				public String VRATIFICADOOriginalDbColumnName(){
				
					return "VRATIFICADO";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAVALPAGO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRATIFICADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VAVALPAGO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VRATIFICADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",VSOPORTADO="+String.valueOf(VSOPORTADO));
		sb.append(",VACEPTADO="+String.valueOf(VACEPTADO));
		sb.append(",VAVALPAGO="+String.valueOf(VAVALPAGO));
		sb.append(",VRATIFICADO="+String.valueOf(VRATIFICADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row18Struct row18 = new row18Struct();
UPDGLOSAStruct UPDGLOSA = new UPDGLOSAStruct();





	
	/**
	 * [tOracleOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_1", false);
		start_Hash.put("tOracleOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"UPDGLOSA");
					}
				
		int tos_count_tOracleOutput_1 = 0;
		






        int updateKeyCount_tOracleOutput_1 = 1;
        if(updateKeyCount_tOracleOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_1 == 5 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_1 = 0;
    int nb_line_update_tOracleOutput_1 = 0;
    int nb_line_inserted_tOracleOutput_1 = 0;
    int nb_line_deleted_tOracleOutput_1 = 0;
    int nb_line_rejected_tOracleOutput_1 = 0;

    int tmp_batchUpdateCount_tOracleOutput_1 = 0;

    int deletedCount_tOracleOutput_1=0;
    int updatedCount_tOracleOutput_1=0;
    int insertedCount_tOracleOutput_1=0;
    int rowsToCommitCount_tOracleOutput_1=0;
    int rejectedCount_tOracleOutput_1=0;

    boolean whetherReject_tOracleOutput_1 = false;

    java.sql.Connection conn_tOracleOutput_1 = null;

    //optional table
    String dbschema_tOracleOutput_1 = null;
    String tableName_tOracleOutput_1 = null;
                    String driverClass_tOracleOutput_1 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_1);
                String url_tOracleOutput_1 = null;
                    url_tOracleOutput_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
                String dbUser_tOracleOutput_1 = context.db_origen_Login;

	final String decryptedPassword_tOracleOutput_1 = context.db_origen_Password; 

                String dbPwd_tOracleOutput_1 = decryptedPassword_tOracleOutput_1;
                dbschema_tOracleOutput_1 = context.db_origen_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_1 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_1.put("user",dbUser_tOracleOutput_1);
                    atnParamsPrope_tOracleOutput_1.put("password",dbPwd_tOracleOutput_1);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_1.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_1 = java.sql.DriverManager.getConnection(url_tOracleOutput_1, atnParamsPrope_tOracleOutput_1);
        resourceMap.put("conn_tOracleOutput_1", conn_tOracleOutput_1);
            conn_tOracleOutput_1.setAutoCommit(false);
            int commitEvery_tOracleOutput_1 = 10000;
            int commitCounter_tOracleOutput_1 = 0;
        int batchSize_tOracleOutput_1 = 10000;
        int batchSizeCounter_tOracleOutput_1=0;
        int count_tOracleOutput_1=0;

        if(dbschema_tOracleOutput_1 == null || dbschema_tOracleOutput_1.trim().length() == 0) {
            tableName_tOracleOutput_1 = ("ACM_GLOSASCAUSADAS");
        } else {
            tableName_tOracleOutput_1 = dbschema_tOracleOutput_1 + "." + ("ACM_GLOSASCAUSADAS");
        }
                String update_tOracleOutput_1 = "UPDATE " + tableName_tOracleOutput_1 + " SET VSOPORTADO = ?,VACEPTADO = ?,VRATIFICADO = ?,VAVALPAGO = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_1 = conn_tOracleOutput_1.prepareStatement(update_tOracleOutput_1);
                resourceMap.put("pstmt_tOracleOutput_1", pstmt_tOracleOutput_1);





 



/**
 * [tOracleOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row18");
					}
				
		int tos_count_tMap_8 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
UPDGLOSAStruct UPDGLOSA_tmp = new UPDGLOSAStruct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */



	
	/**
	 * [tOracleInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_5", false);
		start_Hash.put("tOracleInput_5", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_5";
	
	
		int tos_count_tOracleInput_5 = 0;
		
	


	
		    int nb_line_tOracleInput_5 = 0;
		    java.sql.Connection conn_tOracleInput_5 = null;
				String driverClass_tOracleInput_5 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_5);
				
			String url_tOracleInput_5 = null;
				url_tOracleInput_5 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";

				String dbUser_tOracleInput_5 = context.db_origen_Login;

				

				
	final String decryptedPassword_tOracleInput_5 = context.db_origen_Password; 

				String dbPwd_tOracleInput_5 = decryptedPassword_tOracleInput_5;

				
					java.util.Properties atnParamsPrope_tOracleInput_5 = new java.util.Properties();
					atnParamsPrope_tOracleInput_5.put("user",dbUser_tOracleInput_5);
					atnParamsPrope_tOracleInput_5.put("password",dbPwd_tOracleInput_5);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleInput_5.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
					conn_tOracleInput_5 = java.sql.DriverManager.getConnection(url_tOracleInput_5, atnParamsPrope_tOracleInput_5);
				java.sql.Statement stmtGetTZ_tOracleInput_5 = conn_tOracleInput_5.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_5 = stmtGetTZ_tOracleInput_5.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_5 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_5.next()) {
					sessionTimezone_tOracleInput_5 = rsGetTZ_tOracleInput_5.getString(1);
				}
                                if (!(conn_tOracleInput_5 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_5.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_5.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_5.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_5);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_5).setSessionTimeZone(sessionTimezone_tOracleInput_5);
                                }
		    
			java.sql.Statement stmt_tOracleInput_5 = conn_tOracleInput_5.createStatement();

		    String dbquery_tOracleInput_5 = "SELECT \nGLO.ID,\nSUM(CASE \n    WHEN ENG.RESPONSABLE  = 'AUDITOR' OR HAU.TIPO = 'Conciliación' THEN HGLO.VSOPORTADO EL"
+"SE 0 END) AS VSOPORTADO, \nSUM(CASE \n    WHEN ENG.RESPONSABLE  = 'AUDITOR' OR HAU.TIPO = 'Conciliación' THEN HGLO.VACEP"
+"TADO ELSE 0 END) AS VACEPTADO, \nSUM(CASE \n    WHEN ENG.RESPONSABLE  = 'AUDITOR' OR HAU.TIPO = 'Conciliación' THEN HGLO"
+".VAVALPAGO ELSE 0 END) AS VAVALPAGO,\n    HGLOU.VRATIFICADO\nFROM ACM_HAUDITORIAS HA \nINNER JOIN ACM_AUDITORIAS AU ON A"
+"U.ID = HA.AUDITORIAS_ID\nINNER JOIN ACM_ESTAUDITORIAS ES ON ES.ID = HA.ESTAUDITORIA_ID\nINNER JOIN ACM_GLOSASCAUSADAS GL"
+"O ON GLO.RECEPCION_ID = HA.RECEPCION_ID	AND GLO.ESTREGISTRO_ID = 1\nINNER JOIN ACM_HGLOSASCAUSADAS HGLO ON HGLO.GLOSASCA"
+"USADAS_ID = GLO.ID\nINNER JOIN ACM_HGLOSASCAUSADAS HGLOU ON HGLOU.ID = (SELECT MAX(H.ID) FROM ACM_HGLOSASCAUSADAS H \n  "
+"                                                  INNER JOIN ACM_ETAPASNORMATIVIDAD EP ON EP.ID = H.ETAPASNORMATIVIDAD_I"
+"D AND EP.ESTREGISTRO_ID = 1\n                                                    INNER JOIN ACM_HAUDITORIAS IAS ON IAS.I"
+"D = H.HAUDITORIAS_ID\n                                                    WHERE H.GLOSASCAUSADAS_ID = GLO.ID\n          "
+"                                          AND (EP.RESPONSABLE  = 'AUDITOR' OR IAS.TIPO = 'Conciliación'))\nINNER JOIN AC"
+"M_HAUDITORIAS HAU ON HAU.ID = HGLO.HAUDITORIAS_ID\nINNER JOIN ACM_ETAPASNORMATIVIDAD EN ON EN.ID = HA.ETAPASNORMATIVIDAD"
+"_ID AND EN.ESTREGISTRO_ID = 1\nINNER JOIN ACM_ETAPASNORMATIVIDAD ENG ON ENG.ID = HGLO.ETAPASNORMATIVIDAD_ID AND ENG.ESTR"
+"EGISTRO_ID = 1\nINNER JOIN ACM_RECEPCION RE ON RE.ID = GLO.RECEPCION_ID\nWHERE \nES.NOMBRE = 'Finalizada'\nAND HA.VLGOSA"
+"DO <> 0\nAND (HA.EJECUCION = 0 OR HA.EJECUCION IS NULL )\nAND ((EN.CODIGO = 1 AND HA.VLGOSADO <> 0) OR\n     (((EN.CODIG"
+"O <> 1 AND EN.RESPONSABLE = 'PRESTADOR' AND HA.TIPO <> 'Conciliación') OR (HA.TIPO = 'Conciliación' AND HA.VRATIFICADO <"
+"> 0))) OR\n     (EN.RESPONSABLE = 'AUDITOR' AND EN.CODIGO <> 1 AND HA.VRATIFICADO <> 0) OR\n     ((HA.VRATIFICADO = 0 OR"
+" (HA.VRATIFICADO = 0 AND HA.VLGOSADO = 0 AND EN.CODIGO = 1)) AND (EN.RESPONSABLE = 'AUDITOR' OR HA.TIPO = 'Conciliación'"
+")))\nGROUP BY GLO.ID,HGLOU.VRATIFICADO";
		    

		    globalMap.put("tOracleInput_5_QUERY",dbquery_tOracleInput_5);

		    java.sql.ResultSet rs_tOracleInput_5 = null;

		    try {
		    	rs_tOracleInput_5 = stmt_tOracleInput_5.executeQuery(dbquery_tOracleInput_5);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_5 = rs_tOracleInput_5.getMetaData();
		    	int colQtyInRs_tOracleInput_5 = rsmd_tOracleInput_5.getColumnCount();

		    String tmpContent_tOracleInput_5 = null;
		    
		    
		    while (rs_tOracleInput_5.next()) {
		        nb_line_tOracleInput_5++;
		        
							if(colQtyInRs_tOracleInput_5 < 1) {
								row18.ID = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(1) != null) {
						row18.ID = rs_tOracleInput_5.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_5 < 2) {
								row18.VSOPORTADO = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(2) != null) {
						row18.VSOPORTADO = rs_tOracleInput_5.getBigDecimal(2);
					} else {
				
						row18.VSOPORTADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_5 < 3) {
								row18.VACEPTADO = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(3) != null) {
						row18.VACEPTADO = rs_tOracleInput_5.getBigDecimal(3);
					} else {
				
						row18.VACEPTADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_5 < 4) {
								row18.VAVALPAGO = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(4) != null) {
						row18.VAVALPAGO = rs_tOracleInput_5.getBigDecimal(4);
					} else {
				
						row18.VAVALPAGO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_5 < 5) {
								row18.VRATIFICADO = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(5) != null) {
						row18.VRATIFICADO = rs_tOracleInput_5.getBigDecimal(5);
					} else {
				
						row18.VRATIFICADO = null;
					}
		                    }
					




 



/**
 * [tOracleInput_5 begin ] stop
 */
	
	/**
	 * [tOracleInput_5 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 


	tos_count_tOracleInput_5++;

/**
 * [tOracleInput_5 main ] stop
 */
	
	/**
	 * [tOracleInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row18"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_8 = false;
		boolean mainRowRejected_tMap_8 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

UPDGLOSA = null;


// # Output table : 'UPDGLOSA'
UPDGLOSA_tmp.ID = row18.ID ;
UPDGLOSA_tmp.VSOPORTADO = row18.VSOPORTADO ;
UPDGLOSA_tmp.VACEPTADO = row18.VACEPTADO ;
UPDGLOSA_tmp.VRATIFICADO = row18.VRATIFICADO ;
UPDGLOSA_tmp.VAVALPAGO = row18.VAVALPAGO ;
UPDGLOSA = UPDGLOSA_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "UPDGLOSA"
if(UPDGLOSA != null) { 



	
	/**
	 * [tOracleOutput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"UPDGLOSA"
						
						);
					}
					



        whetherReject_tOracleOutput_1 = false;
                    pstmt_tOracleOutput_1.setBigDecimal(1, UPDGLOSA.VSOPORTADO);

                    pstmt_tOracleOutput_1.setBigDecimal(2, UPDGLOSA.VACEPTADO);

                    pstmt_tOracleOutput_1.setBigDecimal(3, UPDGLOSA.VRATIFICADO);

                    pstmt_tOracleOutput_1.setBigDecimal(4, UPDGLOSA.VAVALPAGO);


                    pstmt_tOracleOutput_1.setBigDecimal(5 + count_tOracleOutput_1, UPDGLOSA.ID);

                pstmt_tOracleOutput_1.addBatch();
                nb_line_tOracleOutput_1++;
                batchSizeCounter_tOracleOutput_1++;
            if (batchSize_tOracleOutput_1 > 0 &&  batchSize_tOracleOutput_1 <= batchSizeCounter_tOracleOutput_1) {
                try {
                    pstmt_tOracleOutput_1.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_1){
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
			        java.sql.SQLException ne_tOracleOutput_1 = e_tOracleOutput_1.getNextException(),sqle_tOracleOutput_1=null;
			    	String errormessage_tOracleOutput_1;
					if (ne_tOracleOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_1 = new java.sql.SQLException(e_tOracleOutput_1.getMessage() + "\ncaused by: " + ne_tOracleOutput_1.getMessage(), ne_tOracleOutput_1.getSQLState(), ne_tOracleOutput_1.getErrorCode(), ne_tOracleOutput_1);
						errormessage_tOracleOutput_1 = sqle_tOracleOutput_1.getMessage();
					}else{
						errormessage_tOracleOutput_1 = e_tOracleOutput_1.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_1);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_1 = pstmt_tOracleOutput_1.getUpdateCount();
                    updatedCount_tOracleOutput_1
                += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
                rowsToCommitCount_tOracleOutput_1 += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
                batchSizeCounter_tOracleOutput_1 = 0;
            }
                commitCounter_tOracleOutput_1++;
                if(commitEvery_tOracleOutput_1 <= commitCounter_tOracleOutput_1) {
                    if(batchSizeCounter_tOracleOutput_1 > 0) {
                        try {
                            pstmt_tOracleOutput_1.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_1){
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
					        java.sql.SQLException ne_tOracleOutput_1 = e_tOracleOutput_1.getNextException(),sqle_tOracleOutput_1=null;
					    	String errormessage_tOracleOutput_1;
							if (ne_tOracleOutput_1 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_1 = new java.sql.SQLException(e_tOracleOutput_1.getMessage() + "\ncaused by: " + ne_tOracleOutput_1.getMessage(), ne_tOracleOutput_1.getSQLState(), ne_tOracleOutput_1.getErrorCode(), ne_tOracleOutput_1);
								errormessage_tOracleOutput_1 = sqle_tOracleOutput_1.getMessage();
							}else{
								errormessage_tOracleOutput_1 = e_tOracleOutput_1.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_1);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_1 = pstmt_tOracleOutput_1.getUpdateCount();
                            updatedCount_tOracleOutput_1
                        += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
                        rowsToCommitCount_tOracleOutput_1 += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_1 != 0){
                    	
                    }
                    conn_tOracleOutput_1.commit();
                    if(rowsToCommitCount_tOracleOutput_1 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_1 = 0;
                    }
                    commitCounter_tOracleOutput_1=0;
                    	batchSizeCounter_tOracleOutput_1=0;
                }

 


	tos_count_tOracleOutput_1++;

/**
 * [tOracleOutput_1 main ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_end ] stop
 */

} // End of branch "UPDGLOSA"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	

 



/**
 * [tMap_8 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_5 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

}
}finally{
	if (rs_tOracleInput_5 != null) {
		rs_tOracleInput_5.close();
	}
	if (stmt_tOracleInput_5 != null) {
		stmt_tOracleInput_5.close();
	}
	if(conn_tOracleInput_5 != null && !conn_tOracleInput_5.isClosed()) {
	
			conn_tOracleInput_5.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tOracleInput_5_NB_LINE",nb_line_tOracleInput_5);
 

ok_Hash.put("tOracleInput_5", true);
end_Hash.put("tOracleInput_5", System.currentTimeMillis());




/**
 * [tOracleInput_5 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row18");
			  	}
			  	
 

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tOracleOutput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_1 > 0) {
            try {
            	if (pstmt_tOracleOutput_1 != null) {
					
					pstmt_tOracleOutput_1.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_1){
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
		        java.sql.SQLException ne_tOracleOutput_1 = e_tOracleOutput_1.getNextException(),sqle_tOracleOutput_1=null;
		    	String errormessage_tOracleOutput_1;
				if (ne_tOracleOutput_1 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_1 = new java.sql.SQLException(e_tOracleOutput_1.getMessage() + "\ncaused by: " + ne_tOracleOutput_1.getMessage(), ne_tOracleOutput_1.getSQLState(), ne_tOracleOutput_1.getErrorCode(), ne_tOracleOutput_1);
					errormessage_tOracleOutput_1 = sqle_tOracleOutput_1.getMessage();
				}else{
					errormessage_tOracleOutput_1 = e_tOracleOutput_1.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_1);
            	
        	}
        	if (pstmt_tOracleOutput_1 != null) {
            	tmp_batchUpdateCount_tOracleOutput_1 = pstmt_tOracleOutput_1.getUpdateCount();
    	    	
    	    		updatedCount_tOracleOutput_1
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
				rowsToCommitCount_tOracleOutput_1 += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
            }
        }
        if(pstmt_tOracleOutput_1 != null) {
			
				pstmt_tOracleOutput_1.close();
				resourceMap.remove("pstmt_tOracleOutput_1");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_1", true);
		if(commitCounter_tOracleOutput_1 > 0 && rowsToCommitCount_tOracleOutput_1 != 0) {
			
		}
		conn_tOracleOutput_1.commit();
		if(commitCounter_tOracleOutput_1 > 0 && rowsToCommitCount_tOracleOutput_1 != 0) {
			
			rowsToCommitCount_tOracleOutput_1 = 0;
		}
		commitCounter_tOracleOutput_1 = 0;
		
		
		conn_tOracleOutput_1 .close();
		
		resourceMap.put("finish_tOracleOutput_1", true);
   	

	
	nb_line_deleted_tOracleOutput_1=nb_line_deleted_tOracleOutput_1+ deletedCount_tOracleOutput_1;
	nb_line_update_tOracleOutput_1=nb_line_update_tOracleOutput_1 + updatedCount_tOracleOutput_1;
	nb_line_inserted_tOracleOutput_1=nb_line_inserted_tOracleOutput_1 + insertedCount_tOracleOutput_1;
	nb_line_rejected_tOracleOutput_1=nb_line_rejected_tOracleOutput_1 + rejectedCount_tOracleOutput_1;
	
        globalMap.put("tOracleOutput_1_NB_LINE",nb_line_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_UPDATED",nb_line_update_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_1);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"UPDGLOSA");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_1", true);
end_Hash.put("tOracleOutput_1", System.currentTimeMillis());




/**
 * [tOracleOutput_1 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tOracleInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_5 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tOracleOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_1 = null;
                if ((pstmtToClose_tOracleOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_1")) != null) {
                    pstmtToClose_tOracleOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_1") == null){
            java.sql.Connection ctn_tOracleOutput_1 = null;
            if((ctn_tOracleOutput_1 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_1")) != null){
                try {
                    ctn_tOracleOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_1) {
                    String errorMessage_tOracleOutput_1 = "failed to close the connection in tOracleOutput_1 :" + sqlEx_tOracleOutput_1.getMessage();
                    System.err.println(errorMessage_tOracleOutput_1);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class InsHglosaCausadaStruct implements routines.system.IPersistableRow<InsHglosaCausadaStruct> {
    final static byte[] commonByteArrayLock_ACM_INICIAL_Inicial = new byte[0];
    static byte[] commonByteArray_ACM_INICIAL_Inicial = new byte[0];

	
			    public BigDecimal ETAPASNORMATIVIDAD_ID;

				public BigDecimal getETAPASNORMATIVIDAD_ID () {
					return this.ETAPASNORMATIVIDAD_ID;
				}

				public Boolean ETAPASNORMATIVIDAD_IDIsNullable(){
				    return false;
				}
				public Boolean ETAPASNORMATIVIDAD_IDIsKey(){
				    return false;
				}
				public Integer ETAPASNORMATIVIDAD_IDLength(){
				    return 0;
				}
				public Integer ETAPASNORMATIVIDAD_IDPrecision(){
				    return null;
				}
				public String ETAPASNORMATIVIDAD_IDDefault(){
				
					return null;
				
				}
				public String ETAPASNORMATIVIDAD_IDComment(){
				
				    return "FK - ACM_ETAPASNORMATIVIDAD";
				
				}
				public String ETAPASNORMATIVIDAD_IDPattern(){
				
					return "";
				
				}
				public String ETAPASNORMATIVIDAD_IDOriginalDbColumnName(){
				
					return "ETAPASNORMATIVIDAD_ID";
				
				}

				
			    public BigDecimal GLOSASCAUSADAS_ID;

				public BigDecimal getGLOSASCAUSADAS_ID () {
					return this.GLOSASCAUSADAS_ID;
				}

				public Boolean GLOSASCAUSADAS_IDIsNullable(){
				    return false;
				}
				public Boolean GLOSASCAUSADAS_IDIsKey(){
				    return false;
				}
				public Integer GLOSASCAUSADAS_IDLength(){
				    return 0;
				}
				public Integer GLOSASCAUSADAS_IDPrecision(){
				    return null;
				}
				public String GLOSASCAUSADAS_IDDefault(){
				
					return null;
				
				}
				public String GLOSASCAUSADAS_IDComment(){
				
				    return "FK - ACM_GLOSASCAUSADAS";
				
				}
				public String GLOSASCAUSADAS_IDPattern(){
				
					return "";
				
				}
				public String GLOSASCAUSADAS_IDOriginalDbColumnName(){
				
					return "GLOSASCAUSADAS_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return false;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return 0;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "FK - ACM_FACTURA";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 0;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return null;
				
				}
				public String USUARIOS_IDComment(){
				
				    return "FK - GEN_USUARIOS";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return null;
				
				}
				public String UORG_IDComment(){
				
				    return "FK - GEN_UORG";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal VGLOSADO;

				public BigDecimal getVGLOSADO () {
					return this.VGLOSADO;
				}

				public Boolean VGLOSADOIsNullable(){
				    return true;
				}
				public Boolean VGLOSADOIsKey(){
				    return false;
				}
				public Integer VGLOSADOLength(){
				    return 0;
				}
				public Integer VGLOSADOPrecision(){
				    return null;
				}
				public String VGLOSADODefault(){
				
					return "0";
				
				}
				public String VGLOSADOComment(){
				
				    return "Valor Glosado para la Etapa";
				
				}
				public String VGLOSADOPattern(){
				
					return "";
				
				}
				public String VGLOSADOOriginalDbColumnName(){
				
					return "VGLOSADO";
				
				}

				
			    public BigDecimal CAUSALGLOSAS_ID;

				public BigDecimal getCAUSALGLOSAS_ID () {
					return this.CAUSALGLOSAS_ID;
				}

				public Boolean CAUSALGLOSAS_IDIsNullable(){
				    return true;
				}
				public Boolean CAUSALGLOSAS_IDIsKey(){
				    return false;
				}
				public Integer CAUSALGLOSAS_IDLength(){
				    return 0;
				}
				public Integer CAUSALGLOSAS_IDPrecision(){
				    return null;
				}
				public String CAUSALGLOSAS_IDDefault(){
				
					return null;
				
				}
				public String CAUSALGLOSAS_IDComment(){
				
				    return "FK - ACM_CAUSALGLOSAS (Prestador)";
				
				}
				public String CAUSALGLOSAS_IDPattern(){
				
					return "";
				
				}
				public String CAUSALGLOSAS_IDOriginalDbColumnName(){
				
					return "CAUSALGLOSAS_ID";
				
				}

				
			    public BigDecimal HAUDITORIAS_ID;

				public BigDecimal getHAUDITORIAS_ID () {
					return this.HAUDITORIAS_ID;
				}

				public Boolean HAUDITORIAS_IDIsNullable(){
				    return true;
				}
				public Boolean HAUDITORIAS_IDIsKey(){
				    return false;
				}
				public Integer HAUDITORIAS_IDLength(){
				    return 0;
				}
				public Integer HAUDITORIAS_IDPrecision(){
				    return null;
				}
				public String HAUDITORIAS_IDDefault(){
				
					return null;
				
				}
				public String HAUDITORIAS_IDComment(){
				
				    return "FK - ACM_HAUDITORIAS";
				
				}
				public String HAUDITORIAS_IDPattern(){
				
					return "";
				
				}
				public String HAUDITORIAS_IDOriginalDbColumnName(){
				
					return "HAUDITORIAS_ID";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ETAPASNORMATIVIDAD_ID = (BigDecimal) dis.readObject();
					
						this.GLOSASCAUSADAS_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.CAUSALGLOSAS_ID = (BigDecimal) dis.readObject();
					
						this.HAUDITORIAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ETAPASNORMATIVIDAD_ID = (BigDecimal) dis.readObject();
					
						this.GLOSASCAUSADAS_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.CAUSALGLOSAS_ID = (BigDecimal) dis.readObject();
					
						this.HAUDITORIAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ETAPASNORMATIVIDAD_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GLOSASCAUSADAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CAUSALGLOSAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.HAUDITORIAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ETAPASNORMATIVIDAD_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GLOSASCAUSADAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CAUSALGLOSAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.HAUDITORIAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ETAPASNORMATIVIDAD_ID="+String.valueOf(ETAPASNORMATIVIDAD_ID));
		sb.append(",GLOSASCAUSADAS_ID="+String.valueOf(GLOSASCAUSADAS_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",VGLOSADO="+String.valueOf(VGLOSADO));
		sb.append(",CAUSALGLOSAS_ID="+String.valueOf(CAUSALGLOSAS_ID));
		sb.append(",HAUDITORIAS_ID="+String.valueOf(HAUDITORIAS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(InsHglosaCausadaStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_ACM_INICIAL_Inicial = new byte[0];
    static byte[] commonByteArray_ACM_INICIAL_Inicial = new byte[0];

	
			    public BigDecimal AUDITORIAS_ID;

				public BigDecimal getAUDITORIAS_ID () {
					return this.AUDITORIAS_ID;
				}

				public Boolean AUDITORIAS_IDIsNullable(){
				    return false;
				}
				public Boolean AUDITORIAS_IDIsKey(){
				    return false;
				}
				public Integer AUDITORIAS_IDLength(){
				    return null;
				}
				public Integer AUDITORIAS_IDPrecision(){
				    return null;
				}
				public String AUDITORIAS_IDDefault(){
				
					return "";
				
				}
				public String AUDITORIAS_IDComment(){
				
				    return "";
				
				}
				public String AUDITORIAS_IDPattern(){
				
					return "";
				
				}
				public String AUDITORIAS_IDOriginalDbColumnName(){
				
					return "AUDITORIAS_ID";
				
				}

				
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal CAUSALGLOSAS_ID;

				public BigDecimal getCAUSALGLOSAS_ID () {
					return this.CAUSALGLOSAS_ID;
				}

				public Boolean CAUSALGLOSAS_IDIsNullable(){
				    return false;
				}
				public Boolean CAUSALGLOSAS_IDIsKey(){
				    return false;
				}
				public Integer CAUSALGLOSAS_IDLength(){
				    return null;
				}
				public Integer CAUSALGLOSAS_IDPrecision(){
				    return null;
				}
				public String CAUSALGLOSAS_IDDefault(){
				
					return "";
				
				}
				public String CAUSALGLOSAS_IDComment(){
				
				    return "";
				
				}
				public String CAUSALGLOSAS_IDPattern(){
				
					return "";
				
				}
				public String CAUSALGLOSAS_IDOriginalDbColumnName(){
				
					return "CAUSALGLOSAS_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return false;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return "";
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return null;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal VSOPORTADO_;

				public BigDecimal getVSOPORTADO_ () {
					return this.VSOPORTADO_;
				}

				public Boolean VSOPORTADO_IsNullable(){
				    return true;
				}
				public Boolean VSOPORTADO_IsKey(){
				    return false;
				}
				public Integer VSOPORTADO_Length(){
				    return null;
				}
				public Integer VSOPORTADO_Precision(){
				    return null;
				}
				public String VSOPORTADO_Default(){
				
					return "";
				
				}
				public String VSOPORTADO_Comment(){
				
				    return "";
				
				}
				public String VSOPORTADO_Pattern(){
				
					return "";
				
				}
				public String VSOPORTADO_OriginalDbColumnName(){
				
					return "VSOPORTADO_";
				
				}

				
			    public BigDecimal VACEPTADO_;

				public BigDecimal getVACEPTADO_ () {
					return this.VACEPTADO_;
				}

				public Boolean VACEPTADO_IsNullable(){
				    return true;
				}
				public Boolean VACEPTADO_IsKey(){
				    return false;
				}
				public Integer VACEPTADO_Length(){
				    return null;
				}
				public Integer VACEPTADO_Precision(){
				    return null;
				}
				public String VACEPTADO_Default(){
				
					return "";
				
				}
				public String VACEPTADO_Comment(){
				
				    return "";
				
				}
				public String VACEPTADO_Pattern(){
				
					return "";
				
				}
				public String VACEPTADO_OriginalDbColumnName(){
				
					return "VACEPTADO_";
				
				}

				
			    public BigDecimal VAVALPAGO_;

				public BigDecimal getVAVALPAGO_ () {
					return this.VAVALPAGO_;
				}

				public Boolean VAVALPAGO_IsNullable(){
				    return true;
				}
				public Boolean VAVALPAGO_IsKey(){
				    return false;
				}
				public Integer VAVALPAGO_Length(){
				    return null;
				}
				public Integer VAVALPAGO_Precision(){
				    return null;
				}
				public String VAVALPAGO_Default(){
				
					return "";
				
				}
				public String VAVALPAGO_Comment(){
				
				    return "";
				
				}
				public String VAVALPAGO_Pattern(){
				
					return "";
				
				}
				public String VAVALPAGO_OriginalDbColumnName(){
				
					return "VAVALPAGO_";
				
				}

				
			    public BigDecimal VRATIFICADO_;

				public BigDecimal getVRATIFICADO_ () {
					return this.VRATIFICADO_;
				}

				public Boolean VRATIFICADO_IsNullable(){
				    return true;
				}
				public Boolean VRATIFICADO_IsKey(){
				    return false;
				}
				public Integer VRATIFICADO_Length(){
				    return null;
				}
				public Integer VRATIFICADO_Precision(){
				    return null;
				}
				public String VRATIFICADO_Default(){
				
					return "";
				
				}
				public String VRATIFICADO_Comment(){
				
				    return "";
				
				}
				public String VRATIFICADO_Pattern(){
				
					return "";
				
				}
				public String VRATIFICADO_OriginalDbColumnName(){
				
					return "VRATIFICADO_";
				
				}

				
			    public BigDecimal VGLOSADO_;

				public BigDecimal getVGLOSADO_ () {
					return this.VGLOSADO_;
				}

				public Boolean VGLOSADO_IsNullable(){
				    return true;
				}
				public Boolean VGLOSADO_IsKey(){
				    return false;
				}
				public Integer VGLOSADO_Length(){
				    return null;
				}
				public Integer VGLOSADO_Precision(){
				    return null;
				}
				public String VGLOSADO_Default(){
				
					return "";
				
				}
				public String VGLOSADO_Comment(){
				
				    return "";
				
				}
				public String VGLOSADO_Pattern(){
				
					return "";
				
				}
				public String VGLOSADO_OriginalDbColumnName(){
				
					return "VGLOSADO_";
				
				}

				
			    public String RESPONSABLE;

				public String getRESPONSABLE () {
					return this.RESPONSABLE;
				}

				public Boolean RESPONSABLEIsNullable(){
				    return true;
				}
				public Boolean RESPONSABLEIsKey(){
				    return false;
				}
				public Integer RESPONSABLELength(){
				    return null;
				}
				public Integer RESPONSABLEPrecision(){
				    return null;
				}
				public String RESPONSABLEDefault(){
				
					return "";
				
				}
				public String RESPONSABLEComment(){
				
				    return "";
				
				}
				public String RESPONSABLEPattern(){
				
					return "";
				
				}
				public String RESPONSABLEOriginalDbColumnName(){
				
					return "RESPONSABLE";
				
				}

				
			    public String TIPO;

				public String getTIPO () {
					return this.TIPO;
				}

				public Boolean TIPOIsNullable(){
				    return true;
				}
				public Boolean TIPOIsKey(){
				    return false;
				}
				public Integer TIPOLength(){
				    return null;
				}
				public Integer TIPOPrecision(){
				    return null;
				}
				public String TIPODefault(){
				
					return "";
				
				}
				public String TIPOComment(){
				
				    return "";
				
				}
				public String TIPOPattern(){
				
					return "";
				
				}
				public String TIPOOriginalDbColumnName(){
				
					return "TIPO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_INICIAL_Inicial.length) {
				if(length < 1024 && commonByteArray_ACM_INICIAL_Inicial.length == 0) {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[1024];
				} else {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_INICIAL_Inicial, 0, length);
			strReturn = new String(commonByteArray_ACM_INICIAL_Inicial, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_INICIAL_Inicial.length) {
				if(length < 1024 && commonByteArray_ACM_INICIAL_Inicial.length == 0) {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[1024];
				} else {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_INICIAL_Inicial, 0, length);
			strReturn = new String(commonByteArray_ACM_INICIAL_Inicial, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.AUDITORIAS_ID = (BigDecimal) dis.readObject();
					
						this.ID = (BigDecimal) dis.readObject();
					
						this.CAUSALGLOSAS_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO_ = (BigDecimal) dis.readObject();
					
						this.VACEPTADO_ = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO_ = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO_ = (BigDecimal) dis.readObject();
					
						this.VGLOSADO_ = (BigDecimal) dis.readObject();
					
					this.RESPONSABLE = readString(dis);
					
					this.TIPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.AUDITORIAS_ID = (BigDecimal) dis.readObject();
					
						this.ID = (BigDecimal) dis.readObject();
					
						this.CAUSALGLOSAS_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO_ = (BigDecimal) dis.readObject();
					
						this.VACEPTADO_ = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO_ = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO_ = (BigDecimal) dis.readObject();
					
						this.VGLOSADO_ = (BigDecimal) dis.readObject();
					
					this.RESPONSABLE = readString(dis);
					
					this.TIPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.AUDITORIAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CAUSALGLOSAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VSOPORTADO_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VACEPTADO_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAVALPAGO_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRATIFICADO_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VGLOSADO_);
					
					// String
				
						writeString(this.RESPONSABLE,dos);
					
					// String
				
						writeString(this.TIPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AUDITORIAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CAUSALGLOSAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VSOPORTADO_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VACEPTADO_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VAVALPAGO_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VRATIFICADO_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VGLOSADO_);
					
					// String
				
						writeString(this.RESPONSABLE,dos);
					
					// String
				
						writeString(this.TIPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AUDITORIAS_ID="+String.valueOf(AUDITORIAS_ID));
		sb.append(",ID="+String.valueOf(ID));
		sb.append(",CAUSALGLOSAS_ID="+String.valueOf(CAUSALGLOSAS_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",VSOPORTADO_="+String.valueOf(VSOPORTADO_));
		sb.append(",VACEPTADO_="+String.valueOf(VACEPTADO_));
		sb.append(",VAVALPAGO_="+String.valueOf(VAVALPAGO_));
		sb.append(",VRATIFICADO_="+String.valueOf(VRATIFICADO_));
		sb.append(",VGLOSADO_="+String.valueOf(VGLOSADO_));
		sb.append(",RESPONSABLE="+RESPONSABLE);
		sb.append(",TIPO="+TIPO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_1Struct implements routines.system.IPersistableRow<after_tOracleInput_1Struct> {
    final static byte[] commonByteArrayLock_ACM_INICIAL_Inicial = new byte[0];
    static byte[] commonByteArray_ACM_INICIAL_Inicial = new byte[0];

	
			    public BigDecimal AUDITORIAS_ID;

				public BigDecimal getAUDITORIAS_ID () {
					return this.AUDITORIAS_ID;
				}

				public Boolean AUDITORIAS_IDIsNullable(){
				    return false;
				}
				public Boolean AUDITORIAS_IDIsKey(){
				    return false;
				}
				public Integer AUDITORIAS_IDLength(){
				    return null;
				}
				public Integer AUDITORIAS_IDPrecision(){
				    return null;
				}
				public String AUDITORIAS_IDDefault(){
				
					return "";
				
				}
				public String AUDITORIAS_IDComment(){
				
				    return "";
				
				}
				public String AUDITORIAS_IDPattern(){
				
					return "";
				
				}
				public String AUDITORIAS_IDOriginalDbColumnName(){
				
					return "AUDITORIAS_ID";
				
				}

				
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal CAUSALGLOSAS_ID;

				public BigDecimal getCAUSALGLOSAS_ID () {
					return this.CAUSALGLOSAS_ID;
				}

				public Boolean CAUSALGLOSAS_IDIsNullable(){
				    return false;
				}
				public Boolean CAUSALGLOSAS_IDIsKey(){
				    return false;
				}
				public Integer CAUSALGLOSAS_IDLength(){
				    return null;
				}
				public Integer CAUSALGLOSAS_IDPrecision(){
				    return null;
				}
				public String CAUSALGLOSAS_IDDefault(){
				
					return "";
				
				}
				public String CAUSALGLOSAS_IDComment(){
				
				    return "";
				
				}
				public String CAUSALGLOSAS_IDPattern(){
				
					return "";
				
				}
				public String CAUSALGLOSAS_IDOriginalDbColumnName(){
				
					return "CAUSALGLOSAS_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return false;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return "";
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return null;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal VSOPORTADO_;

				public BigDecimal getVSOPORTADO_ () {
					return this.VSOPORTADO_;
				}

				public Boolean VSOPORTADO_IsNullable(){
				    return true;
				}
				public Boolean VSOPORTADO_IsKey(){
				    return false;
				}
				public Integer VSOPORTADO_Length(){
				    return null;
				}
				public Integer VSOPORTADO_Precision(){
				    return null;
				}
				public String VSOPORTADO_Default(){
				
					return "";
				
				}
				public String VSOPORTADO_Comment(){
				
				    return "";
				
				}
				public String VSOPORTADO_Pattern(){
				
					return "";
				
				}
				public String VSOPORTADO_OriginalDbColumnName(){
				
					return "VSOPORTADO_";
				
				}

				
			    public BigDecimal VACEPTADO_;

				public BigDecimal getVACEPTADO_ () {
					return this.VACEPTADO_;
				}

				public Boolean VACEPTADO_IsNullable(){
				    return true;
				}
				public Boolean VACEPTADO_IsKey(){
				    return false;
				}
				public Integer VACEPTADO_Length(){
				    return null;
				}
				public Integer VACEPTADO_Precision(){
				    return null;
				}
				public String VACEPTADO_Default(){
				
					return "";
				
				}
				public String VACEPTADO_Comment(){
				
				    return "";
				
				}
				public String VACEPTADO_Pattern(){
				
					return "";
				
				}
				public String VACEPTADO_OriginalDbColumnName(){
				
					return "VACEPTADO_";
				
				}

				
			    public BigDecimal VAVALPAGO_;

				public BigDecimal getVAVALPAGO_ () {
					return this.VAVALPAGO_;
				}

				public Boolean VAVALPAGO_IsNullable(){
				    return true;
				}
				public Boolean VAVALPAGO_IsKey(){
				    return false;
				}
				public Integer VAVALPAGO_Length(){
				    return null;
				}
				public Integer VAVALPAGO_Precision(){
				    return null;
				}
				public String VAVALPAGO_Default(){
				
					return "";
				
				}
				public String VAVALPAGO_Comment(){
				
				    return "";
				
				}
				public String VAVALPAGO_Pattern(){
				
					return "";
				
				}
				public String VAVALPAGO_OriginalDbColumnName(){
				
					return "VAVALPAGO_";
				
				}

				
			    public BigDecimal VRATIFICADO_;

				public BigDecimal getVRATIFICADO_ () {
					return this.VRATIFICADO_;
				}

				public Boolean VRATIFICADO_IsNullable(){
				    return true;
				}
				public Boolean VRATIFICADO_IsKey(){
				    return false;
				}
				public Integer VRATIFICADO_Length(){
				    return null;
				}
				public Integer VRATIFICADO_Precision(){
				    return null;
				}
				public String VRATIFICADO_Default(){
				
					return "";
				
				}
				public String VRATIFICADO_Comment(){
				
				    return "";
				
				}
				public String VRATIFICADO_Pattern(){
				
					return "";
				
				}
				public String VRATIFICADO_OriginalDbColumnName(){
				
					return "VRATIFICADO_";
				
				}

				
			    public BigDecimal VGLOSADO_;

				public BigDecimal getVGLOSADO_ () {
					return this.VGLOSADO_;
				}

				public Boolean VGLOSADO_IsNullable(){
				    return true;
				}
				public Boolean VGLOSADO_IsKey(){
				    return false;
				}
				public Integer VGLOSADO_Length(){
				    return null;
				}
				public Integer VGLOSADO_Precision(){
				    return null;
				}
				public String VGLOSADO_Default(){
				
					return "";
				
				}
				public String VGLOSADO_Comment(){
				
				    return "";
				
				}
				public String VGLOSADO_Pattern(){
				
					return "";
				
				}
				public String VGLOSADO_OriginalDbColumnName(){
				
					return "VGLOSADO_";
				
				}

				
			    public String RESPONSABLE;

				public String getRESPONSABLE () {
					return this.RESPONSABLE;
				}

				public Boolean RESPONSABLEIsNullable(){
				    return true;
				}
				public Boolean RESPONSABLEIsKey(){
				    return false;
				}
				public Integer RESPONSABLELength(){
				    return null;
				}
				public Integer RESPONSABLEPrecision(){
				    return null;
				}
				public String RESPONSABLEDefault(){
				
					return "";
				
				}
				public String RESPONSABLEComment(){
				
				    return "";
				
				}
				public String RESPONSABLEPattern(){
				
					return "";
				
				}
				public String RESPONSABLEOriginalDbColumnName(){
				
					return "RESPONSABLE";
				
				}

				
			    public String TIPO;

				public String getTIPO () {
					return this.TIPO;
				}

				public Boolean TIPOIsNullable(){
				    return true;
				}
				public Boolean TIPOIsKey(){
				    return false;
				}
				public Integer TIPOLength(){
				    return null;
				}
				public Integer TIPOPrecision(){
				    return null;
				}
				public String TIPODefault(){
				
					return "";
				
				}
				public String TIPOComment(){
				
				    return "";
				
				}
				public String TIPOPattern(){
				
					return "";
				
				}
				public String TIPOOriginalDbColumnName(){
				
					return "TIPO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_INICIAL_Inicial.length) {
				if(length < 1024 && commonByteArray_ACM_INICIAL_Inicial.length == 0) {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[1024];
				} else {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_INICIAL_Inicial, 0, length);
			strReturn = new String(commonByteArray_ACM_INICIAL_Inicial, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_INICIAL_Inicial.length) {
				if(length < 1024 && commonByteArray_ACM_INICIAL_Inicial.length == 0) {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[1024];
				} else {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_INICIAL_Inicial, 0, length);
			strReturn = new String(commonByteArray_ACM_INICIAL_Inicial, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.AUDITORIAS_ID = (BigDecimal) dis.readObject();
					
						this.ID = (BigDecimal) dis.readObject();
					
						this.CAUSALGLOSAS_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO_ = (BigDecimal) dis.readObject();
					
						this.VACEPTADO_ = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO_ = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO_ = (BigDecimal) dis.readObject();
					
						this.VGLOSADO_ = (BigDecimal) dis.readObject();
					
					this.RESPONSABLE = readString(dis);
					
					this.TIPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.AUDITORIAS_ID = (BigDecimal) dis.readObject();
					
						this.ID = (BigDecimal) dis.readObject();
					
						this.CAUSALGLOSAS_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO_ = (BigDecimal) dis.readObject();
					
						this.VACEPTADO_ = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO_ = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO_ = (BigDecimal) dis.readObject();
					
						this.VGLOSADO_ = (BigDecimal) dis.readObject();
					
					this.RESPONSABLE = readString(dis);
					
					this.TIPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.AUDITORIAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CAUSALGLOSAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VSOPORTADO_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VACEPTADO_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAVALPAGO_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRATIFICADO_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VGLOSADO_);
					
					// String
				
						writeString(this.RESPONSABLE,dos);
					
					// String
				
						writeString(this.TIPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AUDITORIAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CAUSALGLOSAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VSOPORTADO_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VACEPTADO_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VAVALPAGO_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VRATIFICADO_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VGLOSADO_);
					
					// String
				
						writeString(this.RESPONSABLE,dos);
					
					// String
				
						writeString(this.TIPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AUDITORIAS_ID="+String.valueOf(AUDITORIAS_ID));
		sb.append(",ID="+String.valueOf(ID));
		sb.append(",CAUSALGLOSAS_ID="+String.valueOf(CAUSALGLOSAS_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",VSOPORTADO_="+String.valueOf(VSOPORTADO_));
		sb.append(",VACEPTADO_="+String.valueOf(VACEPTADO_));
		sb.append(",VAVALPAGO_="+String.valueOf(VAVALPAGO_));
		sb.append(",VRATIFICADO_="+String.valueOf(VRATIFICADO_));
		sb.append(",VGLOSADO_="+String.valueOf(VGLOSADO_));
		sb.append(",RESPONSABLE="+RESPONSABLE);
		sb.append(",TIPO="+TIPO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_2Process(globalMap);

		row6Struct row6 = new row6Struct();
InsHglosaCausadaStruct InsHglosaCausada = new InsHglosaCausadaStruct();





	
	/**
	 * [tOracleOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_2", false);
		start_Hash.put("tOracleOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"InsHglosaCausada");
					}
				
		int tos_count_tOracleOutput_2 = 0;
		






    
    int nb_line_tOracleOutput_2 = 0;
    int nb_line_update_tOracleOutput_2 = 0;
    int nb_line_inserted_tOracleOutput_2 = 0;
    int nb_line_deleted_tOracleOutput_2 = 0;
    int nb_line_rejected_tOracleOutput_2 = 0;

    int tmp_batchUpdateCount_tOracleOutput_2 = 0;

    int deletedCount_tOracleOutput_2=0;
    int updatedCount_tOracleOutput_2=0;
    int insertedCount_tOracleOutput_2=0;
    int rowsToCommitCount_tOracleOutput_2=0;
    int rejectedCount_tOracleOutput_2=0;

    boolean whetherReject_tOracleOutput_2 = false;

    java.sql.Connection conn_tOracleOutput_2 = null;

    //optional table
    String dbschema_tOracleOutput_2 = null;
    String tableName_tOracleOutput_2 = null;
                    String driverClass_tOracleOutput_2 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_2);
                String url_tOracleOutput_2 = null;
                    url_tOracleOutput_2 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
                String dbUser_tOracleOutput_2 = context.db_origen_Login;

	final String decryptedPassword_tOracleOutput_2 = context.db_origen_Password; 

                String dbPwd_tOracleOutput_2 = decryptedPassword_tOracleOutput_2;
                dbschema_tOracleOutput_2 = context.db_origen_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_2 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_2.put("user",dbUser_tOracleOutput_2);
                    atnParamsPrope_tOracleOutput_2.put("password",dbPwd_tOracleOutput_2);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_2.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_2 = java.sql.DriverManager.getConnection(url_tOracleOutput_2, atnParamsPrope_tOracleOutput_2);
        resourceMap.put("conn_tOracleOutput_2", conn_tOracleOutput_2);
            conn_tOracleOutput_2.setAutoCommit(false);
            int commitEvery_tOracleOutput_2 = 10000;
            int commitCounter_tOracleOutput_2 = 0;
        int batchSize_tOracleOutput_2 = 10000;
        int batchSizeCounter_tOracleOutput_2=0;
        int count_tOracleOutput_2=0;

        if(dbschema_tOracleOutput_2 == null || dbschema_tOracleOutput_2.trim().length() == 0) {
            tableName_tOracleOutput_2 = ("ACM_HGLOSASCAUSADAS");
        } else {
            tableName_tOracleOutput_2 = dbschema_tOracleOutput_2 + "." + ("ACM_HGLOSASCAUSADAS");
        }
                String insert_tOracleOutput_2 = "INSERT INTO " + tableName_tOracleOutput_2 + " (ETAPASNORMATIVIDAD_ID,GLOSASCAUSADAS_ID,FACTURA_ID,USUARIOS_ID,UORG_ID,VGLOSADO,CAUSALGLOSAS_ID,HAUDITORIAS_ID) VALUES (?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_2 = conn_tOracleOutput_2.prepareStatement(insert_tOracleOutput_2);
                        resourceMap.put("pstmt_tOracleOutput_2", pstmt_tOracleOutput_2);





 



/**
 * [tOracleOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) 
					globalMap.get( "tHash_Lookup_row10" ))
					;					
					
	

row10Struct row10HashKey = new row10Struct();
row10Struct row10Default = new row10Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
InsHglosaCausadaStruct InsHglosaCausada_tmp = new InsHglosaCausadaStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_1", false);
		start_Hash.put("tOracleInput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_1";
	
	
		int tos_count_tOracleInput_1 = 0;
		
	


	
		    int nb_line_tOracleInput_1 = 0;
		    java.sql.Connection conn_tOracleInput_1 = null;
				String driverClass_tOracleInput_1 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_1);
				
			String url_tOracleInput_1 = null;
				url_tOracleInput_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";

				String dbUser_tOracleInput_1 = context.db_origen_Login;

				

				
	final String decryptedPassword_tOracleInput_1 = context.db_origen_Password; 

				String dbPwd_tOracleInput_1 = decryptedPassword_tOracleInput_1;

				
					java.util.Properties atnParamsPrope_tOracleInput_1 = new java.util.Properties();
					atnParamsPrope_tOracleInput_1.put("user",dbUser_tOracleInput_1);
					atnParamsPrope_tOracleInput_1.put("password",dbPwd_tOracleInput_1);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleInput_1.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
					conn_tOracleInput_1 = java.sql.DriverManager.getConnection(url_tOracleInput_1, atnParamsPrope_tOracleInput_1);
				java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_1 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_1.next()) {
					sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1.getString(1);
				}
                                if (!(conn_tOracleInput_1 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_1.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_1.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_1.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_1);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_1).setSessionTimeZone(sessionTimezone_tOracleInput_1);
                                }
		    
			java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1.createStatement();

		    String dbquery_tOracleInput_1 = "SELECT \nPRINCIPAL.AUDITORIAS_ID,\nPRINCIPAL.ID,\nPRINCIPAL.CAUSALGLOSAS_ID,\nPRINCIPAL.FACTURA_ID,\nPRINCIPAL.UORG_ID,"
+"\nPRINCIPAL.USUARIOS_ID,\nPRINCIPAL.VSOPORTADO_,\nPRINCIPAL.VACEPTADO_,\nPRINCIPAL.VAVALPAGO_,\nPRINCIPAL.VRATIFICADO_,"
+"\nCASE \nWHEN ETAPA.CODIGO = 1 OR (ETAPA.RESPONSABLE = 'PRESTADOR' AND HAU.TIPO  = 'Etapa') THEN  PRINCIPAL.VGLOSADO_\nWH"
+"EN ETAPA.CODIGO <> 1 AND (ETAPA.RESPONSABLE = 'AUDITOR' OR HAU.TIPO  = 'Conciliación' ) THEN PRINCIPAL.VRATIFICADO_\nEND"
+" AS VGLOSADO_,\nETAPA.RESPONSABLE, \nHAU.TIPO\nFROM (SELECT \n                T.AUDITORIAS_ID,\n                T.ID,\n "
+"               T.CAUSALGLOSAS_ID,\n                T.FACTURA_ID,\n                T.UORG_ID,\n                T.USUARIOS"
+"_ID,\n\n                SUM(CASE WHEN T.RESPONSABLE_TGLOSAS = 'AUDITOR' OR T.TIPO = 'Conciliación' THEN T.VSOPORTADO ELS"
+"E 0 END ) AS VSOPORTADO_,\n                SUM(CASE WHEN T.RESPONSABLE_TGLOSAS = 'AUDITOR' OR T.TIPO = 'Conciliación' TH"
+"EN T.VACEPTADO ELSE 0 END) AS VACEPTADO_,\n                SUM(CASE WHEN T.RESPONSABLE_TGLOSAS = 'AUDITOR' OR T.TIPO = '"
+"Conciliación' THEN T.VAVALPAGO ELSE 0 END) AS VAVALPAGO_,\n                \n                   SUM(CASE \n             "
+"       WHEN T.NUMERACION = 1 THEN T.VGLOSADO \n                    ELSE 0 END) AS VGLOSADO_,\n                SUM(CASE "
+"\n                    WHEN (T.RESPONSABLE = 'AUDITOR' OR T.TIPO = 'Conciliación' ) AND T.NUMERACION = 1 THEN T.VRATIFICAD"
+"O \n                    WHEN (T.RESPONSABLE <> 'AUDITOR' AND  T.TIPO <> 'Conciliación') AND T.NUMERACION = 2 THEN T.VRAT"
+"IFICADO \n                    ELSE 0 END) AS VRATIFICADO_\n\n\n                FROM (SELECT\n                        VRA"
+".AUDITORIAS_ID,\n                        VRA.ID,\n                        VRA.CAUSALGLOSAS_ID,\n                        "
+"VRA.FACTURA_ID,\n                        VRA.UORG_ID,\n                        VRA.VSOPORTADO,\n                        "
+"VRA.VACEPTADO,\n                        VRA.VAVALPAGO,\n                        VRA.VRATIFICADO,\n                      "
+"  VRA.VGLOSADO,\n                        VRA.CODIGO,\n                        VRA.RESPONSABLE,\n                        "
+"VRA.HGLO_ID,\n                        VRA.TIPO,\n                        VRA.USUARIOS_ID,\n                        VRA.R"
+"ESPONSABLE AS RESPONSABLE_TGLOSAS,\n                        VRA.NUMERACION\n                        FROM (SELECT \n     "
+"                           HA.AUDITORIAS_ID,\n                                GLO.ID,\n                                G"
+"LO.CAUSALGLOSAS_ID,\n                                GLO.FACTURA_ID,\n                                GLO.UORG_ID,\n    "
+"                            HGLO.VSOPORTADO,\n                                HGLO.VACEPTADO,\n                         "
+"       HGLO.VAVALPAGO,\n                                HGLO.VRATIFICADO,\n                                HGLO.VGLOSADO"
+",\n                                EN.CODIGO,\n                                EN.RESPONSABLE,\n                        "
+"        HGLO.ID AS HGLO_ID,\n                                HA.TIPO,\n                                RE.USUARIOS_ID,\n"
+"                                ENG.RESPONSABLE AS RESPONSABLE_TGLOSAS,\n                                ROW_NUMBER() OV"
+"ER (PARTITION BY GLO.ID ORDER BY HGLO.ID DESC) AS NUMERACION\n                                FROM ACM_HAUDITORIAS HA \n"
+"                                INNER JOIN ACM_AUDITORIAS AU ON AU.ID = HA.AUDITORIAS_ID\n                              "
+"  INNER JOIN ACM_ESTAUDITORIAS ES ON ES.ID = HA.ESTAUDITORIA_ID\n                                INNER JOIN ACM_GLOSASCA"
+"USADAS GLO ON GLO.RECEPCION_ID = HA.RECEPCION_ID AND GLO.ESTREGISTRO_ID = 1\n                                INNER JOIN "
+"ACM_HGLOSASCAUSADAS HGLO ON HGLO.GLOSASCAUSADAS_ID = GLO.ID	AND HGLO.ESTREGISTRO_ID = 1\n                               "
+" INNER JOIN ACM_ETAPASNORMATIVIDAD EN ON EN.ID = HA.ETAPASNORMATIVIDAD_ID AND EN.ESTREGISTRO_ID = 1\n                   "
+"             INNER JOIN ACM_ETAPASNORMATIVIDAD ENG ON ENG.ID = HGLO.ETAPASNORMATIVIDAD_ID AND ENG.ESTREGISTRO_ID = 1\n  "
+"                              INNER JOIN ACM_RECEPCION RE ON RE.ID = GLO.RECEPCION_ID\n                                 "
+"WHERE \n                                        ES.NOMBRE = 'Finalizada'\n                                        AND HA"
+".VLGOSADO <> 0\n                                        AND (HA.EJECUCION = 0 OR HA.EJECUCION IS NULL )\n               "
+"                         AND ((EN.CODIGO = 1 AND HA.VLGOSADO <> 0) OR\n                                        (((EN.COD"
+"IGO <> 1 AND EN.RESPONSABLE = 'PRESTADOR' AND HA.TIPO <> 'Conciliación') OR (HA.TIPO = 'Conciliación' AND HA.VRATIFICADO"
+" <> 0))) OR\n                                         EN.RESPONSABLE = 'AUDITOR' AND EN.CODIGO <> 1 AND HA.VRATIFICADO <"
+"> 0))VRA) T\n                GROUP BY T.AUDITORIAS_ID,\n                T.ID,\n                T.CAUSALGLOSAS_ID,\n     "
+"           T.FACTURA_ID,\n                T.UORG_ID,\n                T.USUARIOS_ID) PRINCIPAL\nINNER JOIN ACM_AUDITORIA"
+"S AUD ON AUD.ID = PRINCIPAL.AUDITORIAS_ID\nINNER JOIN ACM_HAUDITORIAS HAU ON HAU.ID = AUD.HAUDITORIAS_ID\nINNER JOIN ACM"
+"_HGLOSASCAUSADAS HH ON HH.HAUDITORIAS_ID =  HAU.ID AND HH.GLOSASCAUSADAS_ID = PRINCIPAL.ID AND HH.ESTREGISTRO_ID = 1\nIN"
+"NER JOIN ACM_ETAPASNORMATIVIDAD ETAPA ON ETAPA.ID = HAU.ETAPASNORMATIVIDAD_ID";
		    

		    globalMap.put("tOracleInput_1_QUERY",dbquery_tOracleInput_1);

		    java.sql.ResultSet rs_tOracleInput_1 = null;

		    try {
		    	rs_tOracleInput_1 = stmt_tOracleInput_1.executeQuery(dbquery_tOracleInput_1);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1.getMetaData();
		    	int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1.getColumnCount();

		    String tmpContent_tOracleInput_1 = null;
		    
		    
		    while (rs_tOracleInput_1.next()) {
		        nb_line_tOracleInput_1++;
		        
							if(colQtyInRs_tOracleInput_1 < 1) {
								row6.AUDITORIAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(1) != null) {
						row6.AUDITORIAS_ID = rs_tOracleInput_1.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 2) {
								row6.ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(2) != null) {
						row6.ID = rs_tOracleInput_1.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 3) {
								row6.CAUSALGLOSAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(3) != null) {
						row6.CAUSALGLOSAS_ID = rs_tOracleInput_1.getBigDecimal(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 4) {
								row6.FACTURA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(4) != null) {
						row6.FACTURA_ID = rs_tOracleInput_1.getBigDecimal(4);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 5) {
								row6.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(5) != null) {
						row6.UORG_ID = rs_tOracleInput_1.getBigDecimal(5);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 6) {
								row6.USUARIOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(6) != null) {
						row6.USUARIOS_ID = rs_tOracleInput_1.getBigDecimal(6);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 7) {
								row6.VSOPORTADO_ = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(7) != null) {
						row6.VSOPORTADO_ = rs_tOracleInput_1.getBigDecimal(7);
					} else {
				
						row6.VSOPORTADO_ = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 8) {
								row6.VACEPTADO_ = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(8) != null) {
						row6.VACEPTADO_ = rs_tOracleInput_1.getBigDecimal(8);
					} else {
				
						row6.VACEPTADO_ = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 9) {
								row6.VAVALPAGO_ = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(9) != null) {
						row6.VAVALPAGO_ = rs_tOracleInput_1.getBigDecimal(9);
					} else {
				
						row6.VAVALPAGO_ = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 10) {
								row6.VRATIFICADO_ = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(10) != null) {
						row6.VRATIFICADO_ = rs_tOracleInput_1.getBigDecimal(10);
					} else {
				
						row6.VRATIFICADO_ = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 11) {
								row6.VGLOSADO_ = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(11) != null) {
						row6.VGLOSADO_ = rs_tOracleInput_1.getBigDecimal(11);
					} else {
				
						row6.VGLOSADO_ = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 12) {
								row6.RESPONSABLE = null;
							} else {
	                         		
        	row6.RESPONSABLE = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 12, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 13) {
								row6.TIPO = null;
							} else {
	                         		
        	row6.TIPO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 13, false);
		                    }
					




 



/**
 * [tOracleInput_1 begin ] stop
 */
	
	/**
	 * [tOracleInput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 


	tos_count_tOracleInput_1++;

/**
 * [tOracleInput_1 main ] stop
 */
	
	/**
	 * [tOracleInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
						row10Struct row10 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row10" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow10 = false;
       		  	    	
       		  	    	
 							row10Struct row10ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row10HashKey.AUDITORIAS_ID = row6.AUDITORIAS_ID ;
                        		    		

								
		                        	row10HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row10.lookup( row10HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row10Struct fromLookup_row10 = null;
							row10 = row10Default;
										 
							
								 
							
							
								if (tHash_Lookup_row10 !=null && tHash_Lookup_row10.hasNext()) { // G 099
								
							
								
								fromLookup_row10 = tHash_Lookup_row10.next();

							
							
								} // G 099
							
							

							if(fromLookup_row10 != null) {
								row10 = fromLookup_row10;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

InsHglosaCausada = null;


// # Output table : 'InsHglosaCausada'
// # Filter conditions 
if( 

row6.VGLOSADO_.intValue() != 0

 ) {
InsHglosaCausada_tmp.ETAPASNORMATIVIDAD_ID = row10.ETAPASNORMATIVIDAD_ID ;
InsHglosaCausada_tmp.GLOSASCAUSADAS_ID = row6.ID ;
InsHglosaCausada_tmp.FACTURA_ID = row6.FACTURA_ID ;
InsHglosaCausada_tmp.USUARIOS_ID = row6.USUARIOS_ID ;
InsHglosaCausada_tmp.UORG_ID = row6.UORG_ID ;
InsHglosaCausada_tmp.VGLOSADO = row6.VGLOSADO_ ;
InsHglosaCausada_tmp.CAUSALGLOSAS_ID = row6.CAUSALGLOSAS_ID ;
InsHglosaCausada_tmp.HAUDITORIAS_ID = row10.ID ;
InsHglosaCausada = InsHglosaCausada_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "InsHglosaCausada"
if(InsHglosaCausada != null) { 



	
	/**
	 * [tOracleOutput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"InsHglosaCausada"
						
						);
					}
					



        whetherReject_tOracleOutput_2 = false;
                        pstmt_tOracleOutput_2.setBigDecimal(1, InsHglosaCausada.ETAPASNORMATIVIDAD_ID);

                        pstmt_tOracleOutput_2.setBigDecimal(2, InsHglosaCausada.GLOSASCAUSADAS_ID);

                        pstmt_tOracleOutput_2.setBigDecimal(3, InsHglosaCausada.FACTURA_ID);

                        pstmt_tOracleOutput_2.setBigDecimal(4, InsHglosaCausada.USUARIOS_ID);

                        pstmt_tOracleOutput_2.setBigDecimal(5, InsHglosaCausada.UORG_ID);

                        pstmt_tOracleOutput_2.setBigDecimal(6, InsHglosaCausada.VGLOSADO);

                        pstmt_tOracleOutput_2.setBigDecimal(7, InsHglosaCausada.CAUSALGLOSAS_ID);

                        pstmt_tOracleOutput_2.setBigDecimal(8, InsHglosaCausada.HAUDITORIAS_ID);

                pstmt_tOracleOutput_2.addBatch();
                nb_line_tOracleOutput_2++;
                batchSizeCounter_tOracleOutput_2++;
            if (batchSize_tOracleOutput_2 > 0 &&  batchSize_tOracleOutput_2 <= batchSizeCounter_tOracleOutput_2) {
                try {
                    pstmt_tOracleOutput_2.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_2){
globalMap.put("tOracleOutput_2_ERROR_MESSAGE",e_tOracleOutput_2.getMessage());
			        java.sql.SQLException ne_tOracleOutput_2 = e_tOracleOutput_2.getNextException(),sqle_tOracleOutput_2=null;
			    	String errormessage_tOracleOutput_2;
					if (ne_tOracleOutput_2 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_2 = new java.sql.SQLException(e_tOracleOutput_2.getMessage() + "\ncaused by: " + ne_tOracleOutput_2.getMessage(), ne_tOracleOutput_2.getSQLState(), ne_tOracleOutput_2.getErrorCode(), ne_tOracleOutput_2);
						errormessage_tOracleOutput_2 = sqle_tOracleOutput_2.getMessage();
					}else{
						errormessage_tOracleOutput_2 = e_tOracleOutput_2.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_2);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_2 = pstmt_tOracleOutput_2.getUpdateCount();
                    insertedCount_tOracleOutput_2
                += (tmp_batchUpdateCount_tOracleOutput_2!=-1?tmp_batchUpdateCount_tOracleOutput_2:0);
                rowsToCommitCount_tOracleOutput_2 += (tmp_batchUpdateCount_tOracleOutput_2!=-1?tmp_batchUpdateCount_tOracleOutput_2:0);
                batchSizeCounter_tOracleOutput_2 = 0;
            }
                commitCounter_tOracleOutput_2++;
                if(commitEvery_tOracleOutput_2 <= commitCounter_tOracleOutput_2) {
                    if(batchSizeCounter_tOracleOutput_2 > 0) {
                        try {
                            pstmt_tOracleOutput_2.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_2){
globalMap.put("tOracleOutput_2_ERROR_MESSAGE",e_tOracleOutput_2.getMessage());
					        java.sql.SQLException ne_tOracleOutput_2 = e_tOracleOutput_2.getNextException(),sqle_tOracleOutput_2=null;
					    	String errormessage_tOracleOutput_2;
							if (ne_tOracleOutput_2 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_2 = new java.sql.SQLException(e_tOracleOutput_2.getMessage() + "\ncaused by: " + ne_tOracleOutput_2.getMessage(), ne_tOracleOutput_2.getSQLState(), ne_tOracleOutput_2.getErrorCode(), ne_tOracleOutput_2);
								errormessage_tOracleOutput_2 = sqle_tOracleOutput_2.getMessage();
							}else{
								errormessage_tOracleOutput_2 = e_tOracleOutput_2.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_2);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_2 = pstmt_tOracleOutput_2.getUpdateCount();
                            insertedCount_tOracleOutput_2
                        += (tmp_batchUpdateCount_tOracleOutput_2!=-1?tmp_batchUpdateCount_tOracleOutput_2:0);
                        rowsToCommitCount_tOracleOutput_2 += (tmp_batchUpdateCount_tOracleOutput_2!=-1?tmp_batchUpdateCount_tOracleOutput_2:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_2 != 0){
                    	
                    }
                    conn_tOracleOutput_2.commit();
                    if(rowsToCommitCount_tOracleOutput_2 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_2 = 0;
                    }
                    commitCounter_tOracleOutput_2=0;
                    	batchSizeCounter_tOracleOutput_2=0;
                }

 


	tos_count_tOracleOutput_2++;

/**
 * [tOracleOutput_2 main ] stop
 */
	
	/**
	 * [tOracleOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	

 



/**
 * [tOracleOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	

 



/**
 * [tOracleOutput_2 process_data_end ] stop
 */

} // End of branch "InsHglosaCausada"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

}
}finally{
	if (rs_tOracleInput_1 != null) {
		rs_tOracleInput_1.close();
	}
	if (stmt_tOracleInput_1 != null) {
		stmt_tOracleInput_1.close();
	}
	if(conn_tOracleInput_1 != null && !conn_tOracleInput_1.isClosed()) {
	
			conn_tOracleInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tOracleInput_1_NB_LINE",nb_line_tOracleInput_1);
 

ok_Hash.put("tOracleInput_1", true);
end_Hash.put("tOracleInput_1", System.currentTimeMillis());




/**
 * [tOracleInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row10 != null) {
						tHash_Lookup_row10.endGet();
					}
					globalMap.remove( "tHash_Lookup_row10" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tOracleOutput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_2 > 0) {
            try {
            	if (pstmt_tOracleOutput_2 != null) {
					
					pstmt_tOracleOutput_2.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_2){
globalMap.put("tOracleOutput_2_ERROR_MESSAGE",e_tOracleOutput_2.getMessage());
		        java.sql.SQLException ne_tOracleOutput_2 = e_tOracleOutput_2.getNextException(),sqle_tOracleOutput_2=null;
		    	String errormessage_tOracleOutput_2;
				if (ne_tOracleOutput_2 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_2 = new java.sql.SQLException(e_tOracleOutput_2.getMessage() + "\ncaused by: " + ne_tOracleOutput_2.getMessage(), ne_tOracleOutput_2.getSQLState(), ne_tOracleOutput_2.getErrorCode(), ne_tOracleOutput_2);
					errormessage_tOracleOutput_2 = sqle_tOracleOutput_2.getMessage();
				}else{
					errormessage_tOracleOutput_2 = e_tOracleOutput_2.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_2);
            	
        	}
        	if (pstmt_tOracleOutput_2 != null) {
            	tmp_batchUpdateCount_tOracleOutput_2 = pstmt_tOracleOutput_2.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_2
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_2!=-1?tmp_batchUpdateCount_tOracleOutput_2:0);
				rowsToCommitCount_tOracleOutput_2 += (tmp_batchUpdateCount_tOracleOutput_2!=-1?tmp_batchUpdateCount_tOracleOutput_2:0);
            }
        }
        if(pstmt_tOracleOutput_2 != null) {
			
				pstmt_tOracleOutput_2.close();
				resourceMap.remove("pstmt_tOracleOutput_2");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_2", true);
		if(commitCounter_tOracleOutput_2 > 0 && rowsToCommitCount_tOracleOutput_2 != 0) {
			
		}
		conn_tOracleOutput_2.commit();
		if(commitCounter_tOracleOutput_2 > 0 && rowsToCommitCount_tOracleOutput_2 != 0) {
			
			rowsToCommitCount_tOracleOutput_2 = 0;
		}
		commitCounter_tOracleOutput_2 = 0;
		
		
		conn_tOracleOutput_2 .close();
		
		resourceMap.put("finish_tOracleOutput_2", true);
   	

	
	nb_line_deleted_tOracleOutput_2=nb_line_deleted_tOracleOutput_2+ deletedCount_tOracleOutput_2;
	nb_line_update_tOracleOutput_2=nb_line_update_tOracleOutput_2 + updatedCount_tOracleOutput_2;
	nb_line_inserted_tOracleOutput_2=nb_line_inserted_tOracleOutput_2 + insertedCount_tOracleOutput_2;
	nb_line_rejected_tOracleOutput_2=nb_line_rejected_tOracleOutput_2 + rejectedCount_tOracleOutput_2;
	
        globalMap.put("tOracleOutput_2_NB_LINE",nb_line_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_UPDATED",nb_line_update_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_2);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"InsHglosaCausada");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_2", true);
end_Hash.put("tOracleOutput_2", System.currentTimeMillis());




/**
 * [tOracleOutput_2 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tOracleInput_8Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row10"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tOracleOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_2 = null;
                if ((pstmtToClose_tOracleOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_2")) != null) {
                    pstmtToClose_tOracleOutput_2.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_2") == null){
            java.sql.Connection ctn_tOracleOutput_2 = null;
            if((ctn_tOracleOutput_2 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_2")) != null){
                try {
                    ctn_tOracleOutput_2.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_2) {
                    String errorMessage_tOracleOutput_2 = "failed to close the connection in tOracleOutput_2 :" + sqlEx_tOracleOutput_2.getMessage();
                    System.err.println(errorMessage_tOracleOutput_2);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class UPDFStruct implements routines.system.IPersistableRow<UPDFStruct> {
    final static byte[] commonByteArrayLock_ACM_INICIAL_Inicial = new byte[0];
    static byte[] commonByteArray_ACM_INICIAL_Inicial = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "SALUDSIS\".\"ISEQ$$_102013\".nextval";
				
				}
				public String IDComment(){
				
				    return "PK - LLave primaria";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal VSOPORTADO;

				public BigDecimal getVSOPORTADO () {
					return this.VSOPORTADO;
				}

				public Boolean VSOPORTADOIsNullable(){
				    return true;
				}
				public Boolean VSOPORTADOIsKey(){
				    return false;
				}
				public Integer VSOPORTADOLength(){
				    return 0;
				}
				public Integer VSOPORTADOPrecision(){
				    return null;
				}
				public String VSOPORTADODefault(){
				
					return "0";
				
				}
				public String VSOPORTADOComment(){
				
				    return "Valor con soportes";
				
				}
				public String VSOPORTADOPattern(){
				
					return "";
				
				}
				public String VSOPORTADOOriginalDbColumnName(){
				
					return "VSOPORTADO";
				
				}

				
			    public BigDecimal VACEPTADO;

				public BigDecimal getVACEPTADO () {
					return this.VACEPTADO;
				}

				public Boolean VACEPTADOIsNullable(){
				    return true;
				}
				public Boolean VACEPTADOIsKey(){
				    return false;
				}
				public Integer VACEPTADOLength(){
				    return 0;
				}
				public Integer VACEPTADOPrecision(){
				    return null;
				}
				public String VACEPTADODefault(){
				
					return "0";
				
				}
				public String VACEPTADOComment(){
				
				    return "Valor Aceptado";
				
				}
				public String VACEPTADOPattern(){
				
					return "";
				
				}
				public String VACEPTADOOriginalDbColumnName(){
				
					return "VACEPTADO";
				
				}

				
			    public BigDecimal VRATIFICADO;

				public BigDecimal getVRATIFICADO () {
					return this.VRATIFICADO;
				}

				public Boolean VRATIFICADOIsNullable(){
				    return true;
				}
				public Boolean VRATIFICADOIsKey(){
				    return false;
				}
				public Integer VRATIFICADOLength(){
				    return 0;
				}
				public Integer VRATIFICADOPrecision(){
				    return null;
				}
				public String VRATIFICADODefault(){
				
					return "0";
				
				}
				public String VRATIFICADOComment(){
				
				    return "Valor Ratificado";
				
				}
				public String VRATIFICADOPattern(){
				
					return "";
				
				}
				public String VRATIFICADOOriginalDbColumnName(){
				
					return "VRATIFICADO";
				
				}

				
			    public BigDecimal VAVALPAGO;

				public BigDecimal getVAVALPAGO () {
					return this.VAVALPAGO;
				}

				public Boolean VAVALPAGOIsNullable(){
				    return true;
				}
				public Boolean VAVALPAGOIsKey(){
				    return false;
				}
				public Integer VAVALPAGOLength(){
				    return 0;
				}
				public Integer VAVALPAGOPrecision(){
				    return null;
				}
				public String VAVALPAGODefault(){
				
					return "0";
				
				}
				public String VAVALPAGOComment(){
				
				    return "Valor con aval de Pago";
				
				}
				public String VAVALPAGOPattern(){
				
					return "";
				
				}
				public String VAVALPAGOOriginalDbColumnName(){
				
					return "VAVALPAGO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final UPDFStruct other = (UPDFStruct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(UPDFStruct other) {

		other.ID = this.ID;
	            other.VSOPORTADO = this.VSOPORTADO;
	            other.VACEPTADO = this.VACEPTADO;
	            other.VRATIFICADO = this.VRATIFICADO;
	            other.VAVALPAGO = this.VAVALPAGO;
	            
	}

	public void copyKeysDataTo(UPDFStruct other) {

		other.ID = this.ID;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAVALPAGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VAVALPAGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",VSOPORTADO="+String.valueOf(VSOPORTADO));
		sb.append(",VACEPTADO="+String.valueOf(VACEPTADO));
		sb.append(",VRATIFICADO="+String.valueOf(VRATIFICADO));
		sb.append(",VAVALPAGO="+String.valueOf(VAVALPAGO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(UPDFStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
    final static byte[] commonByteArrayLock_ACM_INICIAL_Inicial = new byte[0];
    static byte[] commonByteArray_ACM_INICIAL_Inicial = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal VSOPORTADO;

				public BigDecimal getVSOPORTADO () {
					return this.VSOPORTADO;
				}

				public Boolean VSOPORTADOIsNullable(){
				    return true;
				}
				public Boolean VSOPORTADOIsKey(){
				    return false;
				}
				public Integer VSOPORTADOLength(){
				    return 0;
				}
				public Integer VSOPORTADOPrecision(){
				    return 0;
				}
				public String VSOPORTADODefault(){
				
					return "";
				
				}
				public String VSOPORTADOComment(){
				
				    return "";
				
				}
				public String VSOPORTADOPattern(){
				
					return "";
				
				}
				public String VSOPORTADOOriginalDbColumnName(){
				
					return "VSOPORTADO";
				
				}

				
			    public BigDecimal VACEPTADO;

				public BigDecimal getVACEPTADO () {
					return this.VACEPTADO;
				}

				public Boolean VACEPTADOIsNullable(){
				    return true;
				}
				public Boolean VACEPTADOIsKey(){
				    return false;
				}
				public Integer VACEPTADOLength(){
				    return 0;
				}
				public Integer VACEPTADOPrecision(){
				    return 0;
				}
				public String VACEPTADODefault(){
				
					return "";
				
				}
				public String VACEPTADOComment(){
				
				    return "";
				
				}
				public String VACEPTADOPattern(){
				
					return "";
				
				}
				public String VACEPTADOOriginalDbColumnName(){
				
					return "VACEPTADO";
				
				}

				
			    public BigDecimal VAVALPAGO;

				public BigDecimal getVAVALPAGO () {
					return this.VAVALPAGO;
				}

				public Boolean VAVALPAGOIsNullable(){
				    return true;
				}
				public Boolean VAVALPAGOIsKey(){
				    return false;
				}
				public Integer VAVALPAGOLength(){
				    return 0;
				}
				public Integer VAVALPAGOPrecision(){
				    return 0;
				}
				public String VAVALPAGODefault(){
				
					return "";
				
				}
				public String VAVALPAGOComment(){
				
				    return "";
				
				}
				public String VAVALPAGOPattern(){
				
					return "";
				
				}
				public String VAVALPAGOOriginalDbColumnName(){
				
					return "VAVALPAGO";
				
				}

				
			    public BigDecimal VRATIFICADO;

				public BigDecimal getVRATIFICADO () {
					return this.VRATIFICADO;
				}

				public Boolean VRATIFICADOIsNullable(){
				    return true;
				}
				public Boolean VRATIFICADOIsKey(){
				    return false;
				}
				public Integer VRATIFICADOLength(){
				    return 0;
				}
				public Integer VRATIFICADOPrecision(){
				    return null;
				}
				public String VRATIFICADODefault(){
				
					return "";
				
				}
				public String VRATIFICADOComment(){
				
				    return "";
				
				}
				public String VRATIFICADOPattern(){
				
					return "";
				
				}
				public String VRATIFICADOOriginalDbColumnName(){
				
					return "VRATIFICADO";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAVALPAGO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRATIFICADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VAVALPAGO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VRATIFICADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",VSOPORTADO="+String.valueOf(VSOPORTADO));
		sb.append(",VACEPTADO="+String.valueOf(VACEPTADO));
		sb.append(",VAVALPAGO="+String.valueOf(VAVALPAGO));
		sb.append(",VRATIFICADO="+String.valueOf(VRATIFICADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row19Struct row19 = new row19Struct();
UPDFStruct UPDF = new UPDFStruct();





	
	/**
	 * [tOracleOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_3", false);
		start_Hash.put("tOracleOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"UPDF");
					}
				
		int tos_count_tOracleOutput_3 = 0;
		






        int updateKeyCount_tOracleOutput_3 = 1;
        if(updateKeyCount_tOracleOutput_3 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_3 == 5 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_3 = 0;
    int nb_line_update_tOracleOutput_3 = 0;
    int nb_line_inserted_tOracleOutput_3 = 0;
    int nb_line_deleted_tOracleOutput_3 = 0;
    int nb_line_rejected_tOracleOutput_3 = 0;

    int tmp_batchUpdateCount_tOracleOutput_3 = 0;

    int deletedCount_tOracleOutput_3=0;
    int updatedCount_tOracleOutput_3=0;
    int insertedCount_tOracleOutput_3=0;
    int rowsToCommitCount_tOracleOutput_3=0;
    int rejectedCount_tOracleOutput_3=0;

    boolean whetherReject_tOracleOutput_3 = false;

    java.sql.Connection conn_tOracleOutput_3 = null;

    //optional table
    String dbschema_tOracleOutput_3 = null;
    String tableName_tOracleOutput_3 = null;
                    String driverClass_tOracleOutput_3 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_3);
                String url_tOracleOutput_3 = null;
                    url_tOracleOutput_3 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
                String dbUser_tOracleOutput_3 = context.db_origen_Login;

	final String decryptedPassword_tOracleOutput_3 = context.db_origen_Password; 

                String dbPwd_tOracleOutput_3 = decryptedPassword_tOracleOutput_3;
                dbschema_tOracleOutput_3 = context.db_origen_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_3 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_3.put("user",dbUser_tOracleOutput_3);
                    atnParamsPrope_tOracleOutput_3.put("password",dbPwd_tOracleOutput_3);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_3.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_3 = java.sql.DriverManager.getConnection(url_tOracleOutput_3, atnParamsPrope_tOracleOutput_3);
        resourceMap.put("conn_tOracleOutput_3", conn_tOracleOutput_3);
            conn_tOracleOutput_3.setAutoCommit(false);
            int commitEvery_tOracleOutput_3 = 10000;
            int commitCounter_tOracleOutput_3 = 0;
        int batchSize_tOracleOutput_3 = 10000;
        int batchSizeCounter_tOracleOutput_3=0;
        int count_tOracleOutput_3=0;

        if(dbschema_tOracleOutput_3 == null || dbschema_tOracleOutput_3.trim().length() == 0) {
            tableName_tOracleOutput_3 = ("ACM_DFACTURASERVICIO");
        } else {
            tableName_tOracleOutput_3 = dbschema_tOracleOutput_3 + "." + ("ACM_DFACTURASERVICIO");
        }
                String update_tOracleOutput_3 = "UPDATE " + tableName_tOracleOutput_3 + " SET VSOPORTADO = ?,VACEPTADO = ?,VRATIFICADO = ?,VAVALPAGO = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_3 = conn_tOracleOutput_3.prepareStatement(update_tOracleOutput_3);
                resourceMap.put("pstmt_tOracleOutput_3", pstmt_tOracleOutput_3);





 



/**
 * [tOracleOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row19");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
UPDFStruct UPDF_tmp = new UPDFStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tOracleInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_8", false);
		start_Hash.put("tOracleInput_8", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_8";
	
	
		int tos_count_tOracleInput_8 = 0;
		
	


	
		    int nb_line_tOracleInput_8 = 0;
		    java.sql.Connection conn_tOracleInput_8 = null;
				String driverClass_tOracleInput_8 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_8);
				
			String url_tOracleInput_8 = null;
				url_tOracleInput_8 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";

				String dbUser_tOracleInput_8 = context.db_origen_Login;

				

				
	final String decryptedPassword_tOracleInput_8 = context.db_origen_Password; 

				String dbPwd_tOracleInput_8 = decryptedPassword_tOracleInput_8;

				
					java.util.Properties atnParamsPrope_tOracleInput_8 = new java.util.Properties();
					atnParamsPrope_tOracleInput_8.put("user",dbUser_tOracleInput_8);
					atnParamsPrope_tOracleInput_8.put("password",dbPwd_tOracleInput_8);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleInput_8.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
					conn_tOracleInput_8 = java.sql.DriverManager.getConnection(url_tOracleInput_8, atnParamsPrope_tOracleInput_8);
				java.sql.Statement stmtGetTZ_tOracleInput_8 = conn_tOracleInput_8.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_8 = stmtGetTZ_tOracleInput_8.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_8 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_8.next()) {
					sessionTimezone_tOracleInput_8 = rsGetTZ_tOracleInput_8.getString(1);
				}
                                if (!(conn_tOracleInput_8 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_8.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_8.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_8.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_8);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_8).setSessionTimeZone(sessionTimezone_tOracleInput_8);
                                }
		    
			java.sql.Statement stmt_tOracleInput_8 = conn_tOracleInput_8.createStatement();

		    String dbquery_tOracleInput_8 = "SELECT \nDF.ID,\nSUM(CASE  WHEN ENG.RESPONSABLE  = 'AUDITOR' OR HAU.TIPO = 'Conciliación' THEN HDF.VSOPORTADO ELSE 0 EN"
+"D) AS VSOPORTADO, \nSUM(CASE  WHEN ENG.RESPONSABLE  = 'AUDITOR' OR HAU.TIPO = 'Conciliación' THEN HDF.VACEPTADO ELSE 0 E"
+"ND) AS VACEPTADO, \nSUM(CASE  WHEN ENG.RESPONSABLE  = 'AUDITOR' OR HAU.TIPO = 'Conciliación' THEN HDF.VAVALPAGO ELSE 0 E"
+"ND) AS VAVALPAGO,\n    HDFU.VRATIFICADO\n        FROM ACM_HAUDITORIAS HA\n        INNER JOIN ACM_AUDITORIAS AU ON AU.HAU"
+"DITORIAS_ID = HA.ID\n        INNER JOIN ACM_ESTAUDITORIAS ES ON ES.ID = HA.ESTAUDITORIA_ID  \n        INNER JOIN ACM_ETA"
+"PASNORMATIVIDAD EN ON EN.ID = HA.ETAPASNORMATIVIDAD_ID AND EN.ESTREGISTRO_ID = 1\n        INNER JOIN ACM_DFACTURASERVICI"
+"O DF  ON DF.RECEPCION_ID = AU.RECEPCION_ID\n        INNER JOIN ACM_HDFACTURASERVICIO HDF ON HDF.DFACTURASERVICIO_ID = DF"
+".ID\n        INNER JOIN ACM_ETAPASNORMATIVIDAD ENG ON ENG.ID = HDF.ETAPASNORMATIVIDAD_ID AND EN.ESTREGISTRO_ID = 1\n    "
+"    INNER JOIN ACM_HAUDITORIAS HAU ON HAU.ID = HDF.HAUDITORIAS_ID\n        INNER JOIN ACM_HDFACTURASERVICIO HDFU ON HDFU"
+".ID = (SELECT MAX(H.ID) \n                                                            FROM ACM_HDFACTURASERVICIO H\n    "
+"                                                        INNER JOIN ACM_ETAPASNORMATIVIDAD EP ON EP.ID = H.ETAPASNORMATIV"
+"IDAD_ID AND EP.ESTREGISTRO_ID = 1\n                                                            INNER JOIN ACM_HAUDITORIA"
+"S IAS ON IAS.ID = H.HAUDITORIAS_ID\n                                                            WHERE H.DFACTURASERVICIO"
+"_ID = DF.ID\n                                                            AND (EP.RESPONSABLE  = 'AUDITOR' OR IAS.TIPO = "
+"'Conciliación')                                                            )\nWHERE \nES.NOMBRE = 'Finalizada'\nAND HA.V"
+"LGOSADO <> 0\nAND (HA.EJECUCION = 0 OR HA.EJECUCION IS NULL )\nAND ((EN.CODIGO = 1 AND HA.VLGOSADO <> 0) OR\n     (((EN."
+"CODIGO <> 1 AND EN.RESPONSABLE = 'PRESTADOR' AND HA.TIPO <> 'Conciliación') OR (HA.TIPO = 'Conciliación' AND HA.VRATIFIC"
+"ADO <> 0))) OR\n     (EN.RESPONSABLE = 'AUDITOR' AND EN.CODIGO <> 1 AND HA.VRATIFICADO <> 0) OR\n     ((HA.VRATIFICADO ="
+" 0 OR (HA.VRATIFICADO = 0 AND HA.VLGOSADO = 0 AND EN.CODIGO = 1)) AND (EN.RESPONSABLE = 'AUDITOR' OR HA.TIPO = 'Concilia"
+"ción'))) \nGROUP BY DF.ID, HDFU.VRATIFICADO";
		    

		    globalMap.put("tOracleInput_8_QUERY",dbquery_tOracleInput_8);

		    java.sql.ResultSet rs_tOracleInput_8 = null;

		    try {
		    	rs_tOracleInput_8 = stmt_tOracleInput_8.executeQuery(dbquery_tOracleInput_8);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_8 = rs_tOracleInput_8.getMetaData();
		    	int colQtyInRs_tOracleInput_8 = rsmd_tOracleInput_8.getColumnCount();

		    String tmpContent_tOracleInput_8 = null;
		    
		    
		    while (rs_tOracleInput_8.next()) {
		        nb_line_tOracleInput_8++;
		        
							if(colQtyInRs_tOracleInput_8 < 1) {
								row19.ID = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(1) != null) {
						row19.ID = rs_tOracleInput_8.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 2) {
								row19.VSOPORTADO = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(2) != null) {
						row19.VSOPORTADO = rs_tOracleInput_8.getBigDecimal(2);
					} else {
				
						row19.VSOPORTADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 3) {
								row19.VACEPTADO = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(3) != null) {
						row19.VACEPTADO = rs_tOracleInput_8.getBigDecimal(3);
					} else {
				
						row19.VACEPTADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 4) {
								row19.VAVALPAGO = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(4) != null) {
						row19.VAVALPAGO = rs_tOracleInput_8.getBigDecimal(4);
					} else {
				
						row19.VAVALPAGO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 5) {
								row19.VRATIFICADO = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(5) != null) {
						row19.VRATIFICADO = rs_tOracleInput_8.getBigDecimal(5);
					} else {
				
						row19.VRATIFICADO = null;
					}
		                    }
					




 



/**
 * [tOracleInput_8 begin ] stop
 */
	
	/**
	 * [tOracleInput_8 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 


	tos_count_tOracleInput_8++;

/**
 * [tOracleInput_8 main ] stop
 */
	
	/**
	 * [tOracleInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row19"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

UPDF = null;


// # Output table : 'UPDF'
UPDF_tmp.ID = row19.ID ;
UPDF_tmp.VSOPORTADO = row19.VSOPORTADO ;
UPDF_tmp.VACEPTADO = row19.VACEPTADO ;
UPDF_tmp.VRATIFICADO = row19.VRATIFICADO ;
UPDF_tmp.VAVALPAGO = row19.VAVALPAGO ;
UPDF = UPDF_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "UPDF"
if(UPDF != null) { 



	
	/**
	 * [tOracleOutput_3 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"UPDF"
						
						);
					}
					



        whetherReject_tOracleOutput_3 = false;
                    pstmt_tOracleOutput_3.setBigDecimal(1, UPDF.VSOPORTADO);

                    pstmt_tOracleOutput_3.setBigDecimal(2, UPDF.VACEPTADO);

                    pstmt_tOracleOutput_3.setBigDecimal(3, UPDF.VRATIFICADO);

                    pstmt_tOracleOutput_3.setBigDecimal(4, UPDF.VAVALPAGO);


                    pstmt_tOracleOutput_3.setBigDecimal(5 + count_tOracleOutput_3, UPDF.ID);

                pstmt_tOracleOutput_3.addBatch();
                nb_line_tOracleOutput_3++;
                batchSizeCounter_tOracleOutput_3++;
            if (batchSize_tOracleOutput_3 > 0 &&  batchSize_tOracleOutput_3 <= batchSizeCounter_tOracleOutput_3) {
                try {
                    pstmt_tOracleOutput_3.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_3){
globalMap.put("tOracleOutput_3_ERROR_MESSAGE",e_tOracleOutput_3.getMessage());
			        java.sql.SQLException ne_tOracleOutput_3 = e_tOracleOutput_3.getNextException(),sqle_tOracleOutput_3=null;
			    	String errormessage_tOracleOutput_3;
					if (ne_tOracleOutput_3 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_3 = new java.sql.SQLException(e_tOracleOutput_3.getMessage() + "\ncaused by: " + ne_tOracleOutput_3.getMessage(), ne_tOracleOutput_3.getSQLState(), ne_tOracleOutput_3.getErrorCode(), ne_tOracleOutput_3);
						errormessage_tOracleOutput_3 = sqle_tOracleOutput_3.getMessage();
					}else{
						errormessage_tOracleOutput_3 = e_tOracleOutput_3.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_3);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_3 = pstmt_tOracleOutput_3.getUpdateCount();
                    updatedCount_tOracleOutput_3
                += (tmp_batchUpdateCount_tOracleOutput_3!=-1?tmp_batchUpdateCount_tOracleOutput_3:0);
                rowsToCommitCount_tOracleOutput_3 += (tmp_batchUpdateCount_tOracleOutput_3!=-1?tmp_batchUpdateCount_tOracleOutput_3:0);
                batchSizeCounter_tOracleOutput_3 = 0;
            }
                commitCounter_tOracleOutput_3++;
                if(commitEvery_tOracleOutput_3 <= commitCounter_tOracleOutput_3) {
                    if(batchSizeCounter_tOracleOutput_3 > 0) {
                        try {
                            pstmt_tOracleOutput_3.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_3){
globalMap.put("tOracleOutput_3_ERROR_MESSAGE",e_tOracleOutput_3.getMessage());
					        java.sql.SQLException ne_tOracleOutput_3 = e_tOracleOutput_3.getNextException(),sqle_tOracleOutput_3=null;
					    	String errormessage_tOracleOutput_3;
							if (ne_tOracleOutput_3 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_3 = new java.sql.SQLException(e_tOracleOutput_3.getMessage() + "\ncaused by: " + ne_tOracleOutput_3.getMessage(), ne_tOracleOutput_3.getSQLState(), ne_tOracleOutput_3.getErrorCode(), ne_tOracleOutput_3);
								errormessage_tOracleOutput_3 = sqle_tOracleOutput_3.getMessage();
							}else{
								errormessage_tOracleOutput_3 = e_tOracleOutput_3.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_3);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_3 = pstmt_tOracleOutput_3.getUpdateCount();
                            updatedCount_tOracleOutput_3
                        += (tmp_batchUpdateCount_tOracleOutput_3!=-1?tmp_batchUpdateCount_tOracleOutput_3:0);
                        rowsToCommitCount_tOracleOutput_3 += (tmp_batchUpdateCount_tOracleOutput_3!=-1?tmp_batchUpdateCount_tOracleOutput_3:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_3 != 0){
                    	
                    }
                    conn_tOracleOutput_3.commit();
                    if(rowsToCommitCount_tOracleOutput_3 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_3 = 0;
                    }
                    commitCounter_tOracleOutput_3=0;
                    	batchSizeCounter_tOracleOutput_3=0;
                }

 


	tos_count_tOracleOutput_3++;

/**
 * [tOracleOutput_3 main ] stop
 */
	
	/**
	 * [tOracleOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	

 



/**
 * [tOracleOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	

 



/**
 * [tOracleOutput_3 process_data_end ] stop
 */

} // End of branch "UPDF"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_8 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

}
}finally{
	if (rs_tOracleInput_8 != null) {
		rs_tOracleInput_8.close();
	}
	if (stmt_tOracleInput_8 != null) {
		stmt_tOracleInput_8.close();
	}
	if(conn_tOracleInput_8 != null && !conn_tOracleInput_8.isClosed()) {
	
			conn_tOracleInput_8.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tOracleInput_8_NB_LINE",nb_line_tOracleInput_8);
 

ok_Hash.put("tOracleInput_8", true);
end_Hash.put("tOracleInput_8", System.currentTimeMillis());




/**
 * [tOracleInput_8 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row19");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tOracleOutput_3 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_3 > 0) {
            try {
            	if (pstmt_tOracleOutput_3 != null) {
					
					pstmt_tOracleOutput_3.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_3){
globalMap.put("tOracleOutput_3_ERROR_MESSAGE",e_tOracleOutput_3.getMessage());
		        java.sql.SQLException ne_tOracleOutput_3 = e_tOracleOutput_3.getNextException(),sqle_tOracleOutput_3=null;
		    	String errormessage_tOracleOutput_3;
				if (ne_tOracleOutput_3 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_3 = new java.sql.SQLException(e_tOracleOutput_3.getMessage() + "\ncaused by: " + ne_tOracleOutput_3.getMessage(), ne_tOracleOutput_3.getSQLState(), ne_tOracleOutput_3.getErrorCode(), ne_tOracleOutput_3);
					errormessage_tOracleOutput_3 = sqle_tOracleOutput_3.getMessage();
				}else{
					errormessage_tOracleOutput_3 = e_tOracleOutput_3.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_3);
            	
        	}
        	if (pstmt_tOracleOutput_3 != null) {
            	tmp_batchUpdateCount_tOracleOutput_3 = pstmt_tOracleOutput_3.getUpdateCount();
    	    	
    	    		updatedCount_tOracleOutput_3
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_3!=-1?tmp_batchUpdateCount_tOracleOutput_3:0);
				rowsToCommitCount_tOracleOutput_3 += (tmp_batchUpdateCount_tOracleOutput_3!=-1?tmp_batchUpdateCount_tOracleOutput_3:0);
            }
        }
        if(pstmt_tOracleOutput_3 != null) {
			
				pstmt_tOracleOutput_3.close();
				resourceMap.remove("pstmt_tOracleOutput_3");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_3", true);
		if(commitCounter_tOracleOutput_3 > 0 && rowsToCommitCount_tOracleOutput_3 != 0) {
			
		}
		conn_tOracleOutput_3.commit();
		if(commitCounter_tOracleOutput_3 > 0 && rowsToCommitCount_tOracleOutput_3 != 0) {
			
			rowsToCommitCount_tOracleOutput_3 = 0;
		}
		commitCounter_tOracleOutput_3 = 0;
		
		
		conn_tOracleOutput_3 .close();
		
		resourceMap.put("finish_tOracleOutput_3", true);
   	

	
	nb_line_deleted_tOracleOutput_3=nb_line_deleted_tOracleOutput_3+ deletedCount_tOracleOutput_3;
	nb_line_update_tOracleOutput_3=nb_line_update_tOracleOutput_3 + updatedCount_tOracleOutput_3;
	nb_line_inserted_tOracleOutput_3=nb_line_inserted_tOracleOutput_3 + insertedCount_tOracleOutput_3;
	nb_line_rejected_tOracleOutput_3=nb_line_rejected_tOracleOutput_3 + rejectedCount_tOracleOutput_3;
	
        globalMap.put("tOracleOutput_3_NB_LINE",nb_line_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_UPDATED",nb_line_update_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_3);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"UPDF");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_3", true);
end_Hash.put("tOracleOutput_3", System.currentTimeMillis());




/**
 * [tOracleOutput_3 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_8:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tOracleInput_9Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_8 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tOracleOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_3 = null;
                if ((pstmtToClose_tOracleOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_3")) != null) {
                    pstmtToClose_tOracleOutput_3.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_3") == null){
            java.sql.Connection ctn_tOracleOutput_3 = null;
            if((ctn_tOracleOutput_3 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_3")) != null){
                try {
                    ctn_tOracleOutput_3.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_3) {
                    String errorMessage_tOracleOutput_3 = "failed to close the connection in tOracleOutput_3 :" + sqlEx_tOracleOutput_3.getMessage();
                    System.err.println(errorMessage_tOracleOutput_3);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class UPFFStruct implements routines.system.IPersistableRow<UPFFStruct> {
    final static byte[] commonByteArrayLock_ACM_INICIAL_Inicial = new byte[0];
    static byte[] commonByteArray_ACM_INICIAL_Inicial = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "SALUDSIS\".\"ISEQ$$_102027\".nextval";
				
				}
				public String IDComment(){
				
				    return "PK - LLave primaria";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal VSOPORTADO;

				public BigDecimal getVSOPORTADO () {
					return this.VSOPORTADO;
				}

				public Boolean VSOPORTADOIsNullable(){
				    return true;
				}
				public Boolean VSOPORTADOIsKey(){
				    return false;
				}
				public Integer VSOPORTADOLength(){
				    return 0;
				}
				public Integer VSOPORTADOPrecision(){
				    return null;
				}
				public String VSOPORTADODefault(){
				
					return "0";
				
				}
				public String VSOPORTADOComment(){
				
				    return "Valor con soportes";
				
				}
				public String VSOPORTADOPattern(){
				
					return "";
				
				}
				public String VSOPORTADOOriginalDbColumnName(){
				
					return "VSOPORTADO";
				
				}

				
			    public BigDecimal VACEPTADO;

				public BigDecimal getVACEPTADO () {
					return this.VACEPTADO;
				}

				public Boolean VACEPTADOIsNullable(){
				    return true;
				}
				public Boolean VACEPTADOIsKey(){
				    return false;
				}
				public Integer VACEPTADOLength(){
				    return 0;
				}
				public Integer VACEPTADOPrecision(){
				    return null;
				}
				public String VACEPTADODefault(){
				
					return "0";
				
				}
				public String VACEPTADOComment(){
				
				    return "Valor Aceptado";
				
				}
				public String VACEPTADOPattern(){
				
					return "";
				
				}
				public String VACEPTADOOriginalDbColumnName(){
				
					return "VACEPTADO";
				
				}

				
			    public BigDecimal VRATIFICADO;

				public BigDecimal getVRATIFICADO () {
					return this.VRATIFICADO;
				}

				public Boolean VRATIFICADOIsNullable(){
				    return true;
				}
				public Boolean VRATIFICADOIsKey(){
				    return false;
				}
				public Integer VRATIFICADOLength(){
				    return 0;
				}
				public Integer VRATIFICADOPrecision(){
				    return null;
				}
				public String VRATIFICADODefault(){
				
					return "0";
				
				}
				public String VRATIFICADOComment(){
				
				    return "Valor Ratificado";
				
				}
				public String VRATIFICADOPattern(){
				
					return "";
				
				}
				public String VRATIFICADOOriginalDbColumnName(){
				
					return "VRATIFICADO";
				
				}

				
			    public BigDecimal VAVALPAGO;

				public BigDecimal getVAVALPAGO () {
					return this.VAVALPAGO;
				}

				public Boolean VAVALPAGOIsNullable(){
				    return true;
				}
				public Boolean VAVALPAGOIsKey(){
				    return false;
				}
				public Integer VAVALPAGOLength(){
				    return 0;
				}
				public Integer VAVALPAGOPrecision(){
				    return null;
				}
				public String VAVALPAGODefault(){
				
					return "0";
				
				}
				public String VAVALPAGOComment(){
				
				    return "Valor con aval de Pago";
				
				}
				public String VAVALPAGOPattern(){
				
					return "";
				
				}
				public String VAVALPAGOOriginalDbColumnName(){
				
					return "VAVALPAGO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final UPFFStruct other = (UPFFStruct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(UPFFStruct other) {

		other.ID = this.ID;
	            other.VSOPORTADO = this.VSOPORTADO;
	            other.VACEPTADO = this.VACEPTADO;
	            other.VRATIFICADO = this.VRATIFICADO;
	            other.VAVALPAGO = this.VAVALPAGO;
	            
	}

	public void copyKeysDataTo(UPFFStruct other) {

		other.ID = this.ID;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAVALPAGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VAVALPAGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",VSOPORTADO="+String.valueOf(VSOPORTADO));
		sb.append(",VACEPTADO="+String.valueOf(VACEPTADO));
		sb.append(",VRATIFICADO="+String.valueOf(VRATIFICADO));
		sb.append(",VAVALPAGO="+String.valueOf(VAVALPAGO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(UPFFStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
    final static byte[] commonByteArrayLock_ACM_INICIAL_Inicial = new byte[0];
    static byte[] commonByteArray_ACM_INICIAL_Inicial = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal VSOPORTADO;

				public BigDecimal getVSOPORTADO () {
					return this.VSOPORTADO;
				}

				public Boolean VSOPORTADOIsNullable(){
				    return true;
				}
				public Boolean VSOPORTADOIsKey(){
				    return false;
				}
				public Integer VSOPORTADOLength(){
				    return 0;
				}
				public Integer VSOPORTADOPrecision(){
				    return 0;
				}
				public String VSOPORTADODefault(){
				
					return "";
				
				}
				public String VSOPORTADOComment(){
				
				    return "";
				
				}
				public String VSOPORTADOPattern(){
				
					return "";
				
				}
				public String VSOPORTADOOriginalDbColumnName(){
				
					return "VSOPORTADO";
				
				}

				
			    public BigDecimal VACEPTADO;

				public BigDecimal getVACEPTADO () {
					return this.VACEPTADO;
				}

				public Boolean VACEPTADOIsNullable(){
				    return true;
				}
				public Boolean VACEPTADOIsKey(){
				    return false;
				}
				public Integer VACEPTADOLength(){
				    return 0;
				}
				public Integer VACEPTADOPrecision(){
				    return 0;
				}
				public String VACEPTADODefault(){
				
					return "";
				
				}
				public String VACEPTADOComment(){
				
				    return "";
				
				}
				public String VACEPTADOPattern(){
				
					return "";
				
				}
				public String VACEPTADOOriginalDbColumnName(){
				
					return "VACEPTADO";
				
				}

				
			    public BigDecimal VAVALPAGO;

				public BigDecimal getVAVALPAGO () {
					return this.VAVALPAGO;
				}

				public Boolean VAVALPAGOIsNullable(){
				    return true;
				}
				public Boolean VAVALPAGOIsKey(){
				    return false;
				}
				public Integer VAVALPAGOLength(){
				    return 0;
				}
				public Integer VAVALPAGOPrecision(){
				    return 0;
				}
				public String VAVALPAGODefault(){
				
					return "";
				
				}
				public String VAVALPAGOComment(){
				
				    return "";
				
				}
				public String VAVALPAGOPattern(){
				
					return "";
				
				}
				public String VAVALPAGOOriginalDbColumnName(){
				
					return "VAVALPAGO";
				
				}

				
			    public BigDecimal VRATIFICADO;

				public BigDecimal getVRATIFICADO () {
					return this.VRATIFICADO;
				}

				public Boolean VRATIFICADOIsNullable(){
				    return true;
				}
				public Boolean VRATIFICADOIsKey(){
				    return false;
				}
				public Integer VRATIFICADOLength(){
				    return 0;
				}
				public Integer VRATIFICADOPrecision(){
				    return null;
				}
				public String VRATIFICADODefault(){
				
					return "";
				
				}
				public String VRATIFICADOComment(){
				
				    return "";
				
				}
				public String VRATIFICADOPattern(){
				
					return "";
				
				}
				public String VRATIFICADOOriginalDbColumnName(){
				
					return "VRATIFICADO";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAVALPAGO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRATIFICADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VAVALPAGO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VRATIFICADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",VSOPORTADO="+String.valueOf(VSOPORTADO));
		sb.append(",VACEPTADO="+String.valueOf(VACEPTADO));
		sb.append(",VAVALPAGO="+String.valueOf(VAVALPAGO));
		sb.append(",VRATIFICADO="+String.valueOf(VRATIFICADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row21Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row21Struct row21 = new row21Struct();
UPFFStruct UPFF = new UPFFStruct();





	
	/**
	 * [tOracleOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_5", false);
		start_Hash.put("tOracleOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"UPFF");
					}
				
		int tos_count_tOracleOutput_5 = 0;
		






        int updateKeyCount_tOracleOutput_5 = 1;
        if(updateKeyCount_tOracleOutput_5 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_5 == 5 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_5 = 0;
    int nb_line_update_tOracleOutput_5 = 0;
    int nb_line_inserted_tOracleOutput_5 = 0;
    int nb_line_deleted_tOracleOutput_5 = 0;
    int nb_line_rejected_tOracleOutput_5 = 0;

    int tmp_batchUpdateCount_tOracleOutput_5 = 0;

    int deletedCount_tOracleOutput_5=0;
    int updatedCount_tOracleOutput_5=0;
    int insertedCount_tOracleOutput_5=0;
    int rowsToCommitCount_tOracleOutput_5=0;
    int rejectedCount_tOracleOutput_5=0;

    boolean whetherReject_tOracleOutput_5 = false;

    java.sql.Connection conn_tOracleOutput_5 = null;

    //optional table
    String dbschema_tOracleOutput_5 = null;
    String tableName_tOracleOutput_5 = null;
                    String driverClass_tOracleOutput_5 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_5);
                String url_tOracleOutput_5 = null;
                    url_tOracleOutput_5 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
                String dbUser_tOracleOutput_5 = context.db_origen_Login;

	final String decryptedPassword_tOracleOutput_5 = context.db_origen_Password; 

                String dbPwd_tOracleOutput_5 = decryptedPassword_tOracleOutput_5;
                dbschema_tOracleOutput_5 = context.db_origen_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_5 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_5.put("user",dbUser_tOracleOutput_5);
                    atnParamsPrope_tOracleOutput_5.put("password",dbPwd_tOracleOutput_5);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_5.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_5 = java.sql.DriverManager.getConnection(url_tOracleOutput_5, atnParamsPrope_tOracleOutput_5);
        resourceMap.put("conn_tOracleOutput_5", conn_tOracleOutput_5);
            conn_tOracleOutput_5.setAutoCommit(false);
            int commitEvery_tOracleOutput_5 = 10000;
            int commitCounter_tOracleOutput_5 = 0;
        int batchSize_tOracleOutput_5 = 10000;
        int batchSizeCounter_tOracleOutput_5=0;
        int count_tOracleOutput_5=0;

        if(dbschema_tOracleOutput_5 == null || dbschema_tOracleOutput_5.trim().length() == 0) {
            tableName_tOracleOutput_5 = ("ACM_DFACTURAFORMULACION");
        } else {
            tableName_tOracleOutput_5 = dbschema_tOracleOutput_5 + "." + ("ACM_DFACTURAFORMULACION");
        }
                String update_tOracleOutput_5 = "UPDATE " + tableName_tOracleOutput_5 + " SET VSOPORTADO = ?,VACEPTADO = ?,VRATIFICADO = ?,VAVALPAGO = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_5 = conn_tOracleOutput_5.prepareStatement(update_tOracleOutput_5);
                resourceMap.put("pstmt_tOracleOutput_5", pstmt_tOracleOutput_5);





 



/**
 * [tOracleOutput_5 begin ] stop
 */



	
	/**
	 * [tMap_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_9", false);
		start_Hash.put("tMap_9", System.currentTimeMillis());
		
	
	currentComponent="tMap_9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row21");
					}
				
		int tos_count_tMap_9 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_9__Struct  {
}
Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
UPFFStruct UPFF_tmp = new UPFFStruct();
// ###############################

        
        



        









 



/**
 * [tMap_9 begin ] stop
 */



	
	/**
	 * [tOracleInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_9", false);
		start_Hash.put("tOracleInput_9", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_9";
	
	
		int tos_count_tOracleInput_9 = 0;
		
	


	
		    int nb_line_tOracleInput_9 = 0;
		    java.sql.Connection conn_tOracleInput_9 = null;
				String driverClass_tOracleInput_9 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_9);
				
			String url_tOracleInput_9 = null;
				url_tOracleInput_9 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";

				String dbUser_tOracleInput_9 = context.db_origen_Login;

				

				
	final String decryptedPassword_tOracleInput_9 = context.db_origen_Password; 

				String dbPwd_tOracleInput_9 = decryptedPassword_tOracleInput_9;

				
					java.util.Properties atnParamsPrope_tOracleInput_9 = new java.util.Properties();
					atnParamsPrope_tOracleInput_9.put("user",dbUser_tOracleInput_9);
					atnParamsPrope_tOracleInput_9.put("password",dbPwd_tOracleInput_9);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleInput_9.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
					conn_tOracleInput_9 = java.sql.DriverManager.getConnection(url_tOracleInput_9, atnParamsPrope_tOracleInput_9);
				java.sql.Statement stmtGetTZ_tOracleInput_9 = conn_tOracleInput_9.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_9 = stmtGetTZ_tOracleInput_9.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_9 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_9.next()) {
					sessionTimezone_tOracleInput_9 = rsGetTZ_tOracleInput_9.getString(1);
				}
                                if (!(conn_tOracleInput_9 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_9.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_9.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_9.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_9);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_9).setSessionTimeZone(sessionTimezone_tOracleInput_9);
                                }
		    
			java.sql.Statement stmt_tOracleInput_9 = conn_tOracleInput_9.createStatement();

		    String dbquery_tOracleInput_9 = "SELECT \nDF.ID,\nSUM(CASE  WHEN ENG.RESPONSABLE  = 'AUDITOR' OR HAU.TIPO = 'Conciliación' THEN HDF.VSOPORTADO ELSE 0 EN"
+"D) AS VSOPORTADO, \nSUM(CASE  WHEN ENG.RESPONSABLE  = 'AUDITOR' OR HAU.TIPO = 'Conciliación' THEN HDF.VACEPTADO ELSE 0 E"
+"ND) AS VACEPTADO, \nSUM(CASE  WHEN ENG.RESPONSABLE  = 'AUDITOR' OR HAU.TIPO = 'Conciliación' THEN HDF.VAVALPAGO ELSE 0 E"
+"ND) AS VAVALPAGO,\n    HDFU.VRATIFICADO\nFROM ACM_HAUDITORIAS HA\nINNER JOIN ACM_AUDITORIAS AU ON AU.HAUDITORIAS_ID = HA"
+".ID\nINNER JOIN ACM_ESTAUDITORIAS ES ON ES.ID = HA.ESTAUDITORIA_ID  \nINNER JOIN ACM_ETAPASNORMATIVIDAD EN ON EN.ID = HA"
+".ETAPASNORMATIVIDAD_ID AND EN.ESTREGISTRO_ID = 1\nINNER JOIN ACM_DFACTURAFORMULACION DF  ON DF.RECEPCION_ID = AU.RECEPCI"
+"ON_ID\n INNER JOIN ACM_HDFACTURASERVICIO HDF ON HDF.DFACTURAFORMULACION_ID = DF.ID\n INNER JOIN ACM_ETAPASNORMATIVIDAD E"
+"NG ON ENG.ID = HDF.ETAPASNORMATIVIDAD_ID AND EN.ESTREGISTRO_ID = 1\n INNER JOIN ACM_HAUDITORIAS HAU ON HAU.ID = HDF.HAUD"
+"ITORIAS_ID\n INNER JOIN ACM_HDFACTURASERVICIO HDFU ON HDFU.ID = (SELECT MAX(H.ID) \n                                    "
+"                        FROM ACM_HDFACTURASERVICIO H\n                                                            INNER "
+"JOIN ACM_ETAPASNORMATIVIDAD EP ON EP.ID = H.ETAPASNORMATIVIDAD_ID AND EP.ESTREGISTRO_ID = 1\n                           "
+"                                 INNER JOIN ACM_HAUDITORIAS IAS ON IAS.ID = H.HAUDITORIAS_ID\n                          "
+"                                  WHERE H.DFACTURAFORMULACION_ID = DF.ID\n                                              "
+"              AND (EP.RESPONSABLE  = 'AUDITOR' OR IAS.TIPO = 'Conciliación')                                            "
+"                )\nWHERE \nES.NOMBRE = 'Finalizada'\nAND HA.VLGOSADO <> 0\nAND (HA.EJECUCION = 0 OR HA.EJECUCION IS NULL"
+" )\nAND ((EN.CODIGO = 1 AND HA.VLGOSADO <> 0) OR\n     (((EN.CODIGO <> 1 AND EN.RESPONSABLE = 'PRESTADOR' AND HA.TIPO <>"
+" 'Conciliación') OR (HA.TIPO = 'Conciliación' AND HA.VRATIFICADO <> 0))) OR\n     (EN.RESPONSABLE = 'AUDITOR' AND EN.COD"
+"IGO <> 1 AND HA.VRATIFICADO <> 0) OR\n     ((HA.VRATIFICADO = 0 OR (HA.VRATIFICADO = 0 AND HA.VLGOSADO = 0 AND EN.CODIGO"
+" = 1)) AND (EN.RESPONSABLE = 'AUDITOR' OR HA.TIPO = 'Conciliación'))) \n    \nGROUP BY DF.ID, HDFU.VRATIFICADO";
		    

		    globalMap.put("tOracleInput_9_QUERY",dbquery_tOracleInput_9);

		    java.sql.ResultSet rs_tOracleInput_9 = null;

		    try {
		    	rs_tOracleInput_9 = stmt_tOracleInput_9.executeQuery(dbquery_tOracleInput_9);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_9 = rs_tOracleInput_9.getMetaData();
		    	int colQtyInRs_tOracleInput_9 = rsmd_tOracleInput_9.getColumnCount();

		    String tmpContent_tOracleInput_9 = null;
		    
		    
		    while (rs_tOracleInput_9.next()) {
		        nb_line_tOracleInput_9++;
		        
							if(colQtyInRs_tOracleInput_9 < 1) {
								row21.ID = null;
							} else {
		                          
					if(rs_tOracleInput_9.getObject(1) != null) {
						row21.ID = rs_tOracleInput_9.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_9 < 2) {
								row21.VSOPORTADO = null;
							} else {
		                          
					if(rs_tOracleInput_9.getObject(2) != null) {
						row21.VSOPORTADO = rs_tOracleInput_9.getBigDecimal(2);
					} else {
				
						row21.VSOPORTADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_9 < 3) {
								row21.VACEPTADO = null;
							} else {
		                          
					if(rs_tOracleInput_9.getObject(3) != null) {
						row21.VACEPTADO = rs_tOracleInput_9.getBigDecimal(3);
					} else {
				
						row21.VACEPTADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_9 < 4) {
								row21.VAVALPAGO = null;
							} else {
		                          
					if(rs_tOracleInput_9.getObject(4) != null) {
						row21.VAVALPAGO = rs_tOracleInput_9.getBigDecimal(4);
					} else {
				
						row21.VAVALPAGO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_9 < 5) {
								row21.VRATIFICADO = null;
							} else {
		                          
					if(rs_tOracleInput_9.getObject(5) != null) {
						row21.VRATIFICADO = rs_tOracleInput_9.getBigDecimal(5);
					} else {
				
						row21.VRATIFICADO = null;
					}
		                    }
					




 



/**
 * [tOracleInput_9 begin ] stop
 */
	
	/**
	 * [tOracleInput_9 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 


	tos_count_tOracleInput_9++;

/**
 * [tOracleInput_9 main ] stop
 */
	
	/**
	 * [tOracleInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tMap_9 main ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row21"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_9 = false;
		boolean mainRowRejected_tMap_9 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
        // ###############################
        // # Output tables

UPFF = null;


// # Output table : 'UPFF'
UPFF_tmp.ID = row21.ID;
UPFF_tmp.VSOPORTADO = row21.VSOPORTADO ;
UPFF_tmp.VACEPTADO = row21.VACEPTADO ;
UPFF_tmp.VRATIFICADO = row21.VRATIFICADO ;
UPFF_tmp.VAVALPAGO = row21.VAVALPAGO ;
UPFF = UPFF_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_9 = false;










 


	tos_count_tMap_9++;

/**
 * [tMap_9 main ] stop
 */
	
	/**
	 * [tMap_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	

 



/**
 * [tMap_9 process_data_begin ] stop
 */
// Start of branch "UPFF"
if(UPFF != null) { 



	
	/**
	 * [tOracleOutput_5 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"UPFF"
						
						);
					}
					



        whetherReject_tOracleOutput_5 = false;
                    pstmt_tOracleOutput_5.setBigDecimal(1, UPFF.VSOPORTADO);

                    pstmt_tOracleOutput_5.setBigDecimal(2, UPFF.VACEPTADO);

                    pstmt_tOracleOutput_5.setBigDecimal(3, UPFF.VRATIFICADO);

                    pstmt_tOracleOutput_5.setBigDecimal(4, UPFF.VAVALPAGO);


                    pstmt_tOracleOutput_5.setBigDecimal(5 + count_tOracleOutput_5, UPFF.ID);

                pstmt_tOracleOutput_5.addBatch();
                nb_line_tOracleOutput_5++;
                batchSizeCounter_tOracleOutput_5++;
            if (batchSize_tOracleOutput_5 > 0 &&  batchSize_tOracleOutput_5 <= batchSizeCounter_tOracleOutput_5) {
                try {
                    pstmt_tOracleOutput_5.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_5){
globalMap.put("tOracleOutput_5_ERROR_MESSAGE",e_tOracleOutput_5.getMessage());
			        java.sql.SQLException ne_tOracleOutput_5 = e_tOracleOutput_5.getNextException(),sqle_tOracleOutput_5=null;
			    	String errormessage_tOracleOutput_5;
					if (ne_tOracleOutput_5 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_5 = new java.sql.SQLException(e_tOracleOutput_5.getMessage() + "\ncaused by: " + ne_tOracleOutput_5.getMessage(), ne_tOracleOutput_5.getSQLState(), ne_tOracleOutput_5.getErrorCode(), ne_tOracleOutput_5);
						errormessage_tOracleOutput_5 = sqle_tOracleOutput_5.getMessage();
					}else{
						errormessage_tOracleOutput_5 = e_tOracleOutput_5.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_5);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_5 = pstmt_tOracleOutput_5.getUpdateCount();
                    updatedCount_tOracleOutput_5
                += (tmp_batchUpdateCount_tOracleOutput_5!=-1?tmp_batchUpdateCount_tOracleOutput_5:0);
                rowsToCommitCount_tOracleOutput_5 += (tmp_batchUpdateCount_tOracleOutput_5!=-1?tmp_batchUpdateCount_tOracleOutput_5:0);
                batchSizeCounter_tOracleOutput_5 = 0;
            }
                commitCounter_tOracleOutput_5++;
                if(commitEvery_tOracleOutput_5 <= commitCounter_tOracleOutput_5) {
                    if(batchSizeCounter_tOracleOutput_5 > 0) {
                        try {
                            pstmt_tOracleOutput_5.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_5){
globalMap.put("tOracleOutput_5_ERROR_MESSAGE",e_tOracleOutput_5.getMessage());
					        java.sql.SQLException ne_tOracleOutput_5 = e_tOracleOutput_5.getNextException(),sqle_tOracleOutput_5=null;
					    	String errormessage_tOracleOutput_5;
							if (ne_tOracleOutput_5 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_5 = new java.sql.SQLException(e_tOracleOutput_5.getMessage() + "\ncaused by: " + ne_tOracleOutput_5.getMessage(), ne_tOracleOutput_5.getSQLState(), ne_tOracleOutput_5.getErrorCode(), ne_tOracleOutput_5);
								errormessage_tOracleOutput_5 = sqle_tOracleOutput_5.getMessage();
							}else{
								errormessage_tOracleOutput_5 = e_tOracleOutput_5.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_5);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_5 = pstmt_tOracleOutput_5.getUpdateCount();
                            updatedCount_tOracleOutput_5
                        += (tmp_batchUpdateCount_tOracleOutput_5!=-1?tmp_batchUpdateCount_tOracleOutput_5:0);
                        rowsToCommitCount_tOracleOutput_5 += (tmp_batchUpdateCount_tOracleOutput_5!=-1?tmp_batchUpdateCount_tOracleOutput_5:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_5 != 0){
                    	
                    }
                    conn_tOracleOutput_5.commit();
                    if(rowsToCommitCount_tOracleOutput_5 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_5 = 0;
                    }
                    commitCounter_tOracleOutput_5=0;
                    	batchSizeCounter_tOracleOutput_5=0;
                }

 


	tos_count_tOracleOutput_5++;

/**
 * [tOracleOutput_5 main ] stop
 */
	
	/**
	 * [tOracleOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	

 



/**
 * [tOracleOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	

 



/**
 * [tOracleOutput_5 process_data_end ] stop
 */

} // End of branch "UPFF"




	
	/**
	 * [tMap_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	

 



/**
 * [tMap_9 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_9 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

}
}finally{
	if (rs_tOracleInput_9 != null) {
		rs_tOracleInput_9.close();
	}
	if (stmt_tOracleInput_9 != null) {
		stmt_tOracleInput_9.close();
	}
	if(conn_tOracleInput_9 != null && !conn_tOracleInput_9.isClosed()) {
	
			conn_tOracleInput_9.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tOracleInput_9_NB_LINE",nb_line_tOracleInput_9);
 

ok_Hash.put("tOracleInput_9", true);
end_Hash.put("tOracleInput_9", System.currentTimeMillis());




/**
 * [tOracleInput_9 end ] stop
 */

	
	/**
	 * [tMap_9 end ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row21");
			  	}
			  	
 

ok_Hash.put("tMap_9", true);
end_Hash.put("tMap_9", System.currentTimeMillis());




/**
 * [tMap_9 end ] stop
 */

	
	/**
	 * [tOracleOutput_5 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_5 > 0) {
            try {
            	if (pstmt_tOracleOutput_5 != null) {
					
					pstmt_tOracleOutput_5.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_5){
globalMap.put("tOracleOutput_5_ERROR_MESSAGE",e_tOracleOutput_5.getMessage());
		        java.sql.SQLException ne_tOracleOutput_5 = e_tOracleOutput_5.getNextException(),sqle_tOracleOutput_5=null;
		    	String errormessage_tOracleOutput_5;
				if (ne_tOracleOutput_5 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_5 = new java.sql.SQLException(e_tOracleOutput_5.getMessage() + "\ncaused by: " + ne_tOracleOutput_5.getMessage(), ne_tOracleOutput_5.getSQLState(), ne_tOracleOutput_5.getErrorCode(), ne_tOracleOutput_5);
					errormessage_tOracleOutput_5 = sqle_tOracleOutput_5.getMessage();
				}else{
					errormessage_tOracleOutput_5 = e_tOracleOutput_5.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_5);
            	
        	}
        	if (pstmt_tOracleOutput_5 != null) {
            	tmp_batchUpdateCount_tOracleOutput_5 = pstmt_tOracleOutput_5.getUpdateCount();
    	    	
    	    		updatedCount_tOracleOutput_5
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_5!=-1?tmp_batchUpdateCount_tOracleOutput_5:0);
				rowsToCommitCount_tOracleOutput_5 += (tmp_batchUpdateCount_tOracleOutput_5!=-1?tmp_batchUpdateCount_tOracleOutput_5:0);
            }
        }
        if(pstmt_tOracleOutput_5 != null) {
			
				pstmt_tOracleOutput_5.close();
				resourceMap.remove("pstmt_tOracleOutput_5");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_5", true);
		if(commitCounter_tOracleOutput_5 > 0 && rowsToCommitCount_tOracleOutput_5 != 0) {
			
		}
		conn_tOracleOutput_5.commit();
		if(commitCounter_tOracleOutput_5 > 0 && rowsToCommitCount_tOracleOutput_5 != 0) {
			
			rowsToCommitCount_tOracleOutput_5 = 0;
		}
		commitCounter_tOracleOutput_5 = 0;
		
		
		conn_tOracleOutput_5 .close();
		
		resourceMap.put("finish_tOracleOutput_5", true);
   	

	
	nb_line_deleted_tOracleOutput_5=nb_line_deleted_tOracleOutput_5+ deletedCount_tOracleOutput_5;
	nb_line_update_tOracleOutput_5=nb_line_update_tOracleOutput_5 + updatedCount_tOracleOutput_5;
	nb_line_inserted_tOracleOutput_5=nb_line_inserted_tOracleOutput_5 + insertedCount_tOracleOutput_5;
	nb_line_rejected_tOracleOutput_5=nb_line_rejected_tOracleOutput_5 + rejectedCount_tOracleOutput_5;
	
        globalMap.put("tOracleOutput_5_NB_LINE",nb_line_tOracleOutput_5);
        globalMap.put("tOracleOutput_5_NB_LINE_UPDATED",nb_line_update_tOracleOutput_5);
        globalMap.put("tOracleOutput_5_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_5);
        globalMap.put("tOracleOutput_5_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_5);
        globalMap.put("tOracleOutput_5_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_5);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"UPFF");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_5", true);
end_Hash.put("tOracleOutput_5", System.currentTimeMillis());




/**
 * [tOracleOutput_5 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_9:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk11", 0, "ok");
								} 
							
							tOracleInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_9 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 finally ] stop
 */

	
	/**
	 * [tMap_9 finally ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	

 



/**
 * [tMap_9 finally ] stop
 */

	
	/**
	 * [tOracleOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_5") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_5 = null;
                if ((pstmtToClose_tOracleOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_5")) != null) {
                    pstmtToClose_tOracleOutput_5.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_5") == null){
            java.sql.Connection ctn_tOracleOutput_5 = null;
            if((ctn_tOracleOutput_5 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_5")) != null){
                try {
                    ctn_tOracleOutput_5.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_5) {
                    String errorMessage_tOracleOutput_5 = "failed to close the connection in tOracleOutput_5 :" + sqlEx_tOracleOutput_5.getMessage();
                    System.err.println(errorMessage_tOracleOutput_5);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_5 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class InsHDStruct implements routines.system.IPersistableRow<InsHDStruct> {
    final static byte[] commonByteArrayLock_ACM_INICIAL_Inicial = new byte[0];
    static byte[] commonByteArray_ACM_INICIAL_Inicial = new byte[0];

	
			    public BigDecimal ETAPASNORMATIVIDAD_ID;

				public BigDecimal getETAPASNORMATIVIDAD_ID () {
					return this.ETAPASNORMATIVIDAD_ID;
				}

				public Boolean ETAPASNORMATIVIDAD_IDIsNullable(){
				    return false;
				}
				public Boolean ETAPASNORMATIVIDAD_IDIsKey(){
				    return false;
				}
				public Integer ETAPASNORMATIVIDAD_IDLength(){
				    return 0;
				}
				public Integer ETAPASNORMATIVIDAD_IDPrecision(){
				    return null;
				}
				public String ETAPASNORMATIVIDAD_IDDefault(){
				
					return null;
				
				}
				public String ETAPASNORMATIVIDAD_IDComment(){
				
				    return "FK - ACM_ETAPASNORMATIVIDAD";
				
				}
				public String ETAPASNORMATIVIDAD_IDPattern(){
				
					return "";
				
				}
				public String ETAPASNORMATIVIDAD_IDOriginalDbColumnName(){
				
					return "ETAPASNORMATIVIDAD_ID";
				
				}

				
			    public BigDecimal DFACTURASERVICIO_ID;

				public BigDecimal getDFACTURASERVICIO_ID () {
					return this.DFACTURASERVICIO_ID;
				}

				public Boolean DFACTURASERVICIO_IDIsNullable(){
				    return true;
				}
				public Boolean DFACTURASERVICIO_IDIsKey(){
				    return false;
				}
				public Integer DFACTURASERVICIO_IDLength(){
				    return 0;
				}
				public Integer DFACTURASERVICIO_IDPrecision(){
				    return null;
				}
				public String DFACTURASERVICIO_IDDefault(){
				
					return null;
				
				}
				public String DFACTURASERVICIO_IDComment(){
				
				    return "FK - ACM_DFACTURASERVICIO";
				
				}
				public String DFACTURASERVICIO_IDPattern(){
				
					return "";
				
				}
				public String DFACTURASERVICIO_IDOriginalDbColumnName(){
				
					return "DFACTURASERVICIO_ID";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 0;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return null;
				
				}
				public String USUARIOS_IDComment(){
				
				    return "FK - GEN_USUARIOS";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return null;
				
				}
				public String UORG_IDComment(){
				
				    return "FK - GEN_UORG";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal DFACTURAFORMULACION_ID;

				public BigDecimal getDFACTURAFORMULACION_ID () {
					return this.DFACTURAFORMULACION_ID;
				}

				public Boolean DFACTURAFORMULACION_IDIsNullable(){
				    return true;
				}
				public Boolean DFACTURAFORMULACION_IDIsKey(){
				    return false;
				}
				public Integer DFACTURAFORMULACION_IDLength(){
				    return 0;
				}
				public Integer DFACTURAFORMULACION_IDPrecision(){
				    return null;
				}
				public String DFACTURAFORMULACION_IDDefault(){
				
					return null;
				
				}
				public String DFACTURAFORMULACION_IDComment(){
				
				    return "FK - ACM_DFACTURAFORMULACION";
				
				}
				public String DFACTURAFORMULACION_IDPattern(){
				
					return "";
				
				}
				public String DFACTURAFORMULACION_IDOriginalDbColumnName(){
				
					return "DFACTURAFORMULACION_ID";
				
				}

				
			    public BigDecimal VLGLOSADO;

				public BigDecimal getVLGLOSADO () {
					return this.VLGLOSADO;
				}

				public Boolean VLGLOSADOIsNullable(){
				    return true;
				}
				public Boolean VLGLOSADOIsKey(){
				    return false;
				}
				public Integer VLGLOSADOLength(){
				    return 0;
				}
				public Integer VLGLOSADOPrecision(){
				    return null;
				}
				public String VLGLOSADODefault(){
				
					return "0";
				
				}
				public String VLGLOSADOComment(){
				
				    return "Valor Glosado para la Etapa";
				
				}
				public String VLGLOSADOPattern(){
				
					return "";
				
				}
				public String VLGLOSADOOriginalDbColumnName(){
				
					return "VLGLOSADO";
				
				}

				
			    public BigDecimal HAUDITORIAS_ID;

				public BigDecimal getHAUDITORIAS_ID () {
					return this.HAUDITORIAS_ID;
				}

				public Boolean HAUDITORIAS_IDIsNullable(){
				    return true;
				}
				public Boolean HAUDITORIAS_IDIsKey(){
				    return false;
				}
				public Integer HAUDITORIAS_IDLength(){
				    return 0;
				}
				public Integer HAUDITORIAS_IDPrecision(){
				    return null;
				}
				public String HAUDITORIAS_IDDefault(){
				
					return null;
				
				}
				public String HAUDITORIAS_IDComment(){
				
				    return "FK - ACM_HAUDITORIAS";
				
				}
				public String HAUDITORIAS_IDPattern(){
				
					return "";
				
				}
				public String HAUDITORIAS_IDOriginalDbColumnName(){
				
					return "HAUDITORIAS_ID";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ETAPASNORMATIVIDAD_ID = (BigDecimal) dis.readObject();
					
						this.DFACTURASERVICIO_ID = (BigDecimal) dis.readObject();
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.DFACTURAFORMULACION_ID = (BigDecimal) dis.readObject();
					
						this.VLGLOSADO = (BigDecimal) dis.readObject();
					
						this.HAUDITORIAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ETAPASNORMATIVIDAD_ID = (BigDecimal) dis.readObject();
					
						this.DFACTURASERVICIO_ID = (BigDecimal) dis.readObject();
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.DFACTURAFORMULACION_ID = (BigDecimal) dis.readObject();
					
						this.VLGLOSADO = (BigDecimal) dis.readObject();
					
						this.HAUDITORIAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ETAPASNORMATIVIDAD_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DFACTURASERVICIO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DFACTURAFORMULACION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VLGLOSADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.HAUDITORIAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ETAPASNORMATIVIDAD_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DFACTURASERVICIO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DFACTURAFORMULACION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VLGLOSADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.HAUDITORIAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ETAPASNORMATIVIDAD_ID="+String.valueOf(ETAPASNORMATIVIDAD_ID));
		sb.append(",DFACTURASERVICIO_ID="+String.valueOf(DFACTURASERVICIO_ID));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",DFACTURAFORMULACION_ID="+String.valueOf(DFACTURAFORMULACION_ID));
		sb.append(",VLGLOSADO="+String.valueOf(VLGLOSADO));
		sb.append(",HAUDITORIAS_ID="+String.valueOf(HAUDITORIAS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(InsHDStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
    final static byte[] commonByteArrayLock_ACM_INICIAL_Inicial = new byte[0];
    static byte[] commonByteArray_ACM_INICIAL_Inicial = new byte[0];

	
			    public BigDecimal ETAPASNORMATIVIDAD_ID;

				public BigDecimal getETAPASNORMATIVIDAD_ID () {
					return this.ETAPASNORMATIVIDAD_ID;
				}

				public Boolean ETAPASNORMATIVIDAD_IDIsNullable(){
				    return false;
				}
				public Boolean ETAPASNORMATIVIDAD_IDIsKey(){
				    return false;
				}
				public Integer ETAPASNORMATIVIDAD_IDLength(){
				    return 0;
				}
				public Integer ETAPASNORMATIVIDAD_IDPrecision(){
				    return null;
				}
				public String ETAPASNORMATIVIDAD_IDDefault(){
				
					return null;
				
				}
				public String ETAPASNORMATIVIDAD_IDComment(){
				
				    return "FK - ACM_ETAPASNORMATIVIDAD";
				
				}
				public String ETAPASNORMATIVIDAD_IDPattern(){
				
					return "";
				
				}
				public String ETAPASNORMATIVIDAD_IDOriginalDbColumnName(){
				
					return "ETAPASNORMATIVIDAD_ID";
				
				}

				
			    public BigDecimal DFACTURASERVICIO_ID;

				public BigDecimal getDFACTURASERVICIO_ID () {
					return this.DFACTURASERVICIO_ID;
				}

				public Boolean DFACTURASERVICIO_IDIsNullable(){
				    return true;
				}
				public Boolean DFACTURASERVICIO_IDIsKey(){
				    return false;
				}
				public Integer DFACTURASERVICIO_IDLength(){
				    return 0;
				}
				public Integer DFACTURASERVICIO_IDPrecision(){
				    return null;
				}
				public String DFACTURASERVICIO_IDDefault(){
				
					return null;
				
				}
				public String DFACTURASERVICIO_IDComment(){
				
				    return "FK - ACM_DFACTURASERVICIO";
				
				}
				public String DFACTURASERVICIO_IDPattern(){
				
					return "";
				
				}
				public String DFACTURASERVICIO_IDOriginalDbColumnName(){
				
					return "DFACTURASERVICIO_ID";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 0;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return null;
				
				}
				public String USUARIOS_IDComment(){
				
				    return "FK - GEN_USUARIOS";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return null;
				
				}
				public String UORG_IDComment(){
				
				    return "FK - GEN_UORG";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal DFACTURAFORMULACION_ID;

				public BigDecimal getDFACTURAFORMULACION_ID () {
					return this.DFACTURAFORMULACION_ID;
				}

				public Boolean DFACTURAFORMULACION_IDIsNullable(){
				    return true;
				}
				public Boolean DFACTURAFORMULACION_IDIsKey(){
				    return false;
				}
				public Integer DFACTURAFORMULACION_IDLength(){
				    return 0;
				}
				public Integer DFACTURAFORMULACION_IDPrecision(){
				    return null;
				}
				public String DFACTURAFORMULACION_IDDefault(){
				
					return null;
				
				}
				public String DFACTURAFORMULACION_IDComment(){
				
				    return "FK - ACM_DFACTURAFORMULACION";
				
				}
				public String DFACTURAFORMULACION_IDPattern(){
				
					return "";
				
				}
				public String DFACTURAFORMULACION_IDOriginalDbColumnName(){
				
					return "DFACTURAFORMULACION_ID";
				
				}

				
			    public BigDecimal VLGLOSADO;

				public BigDecimal getVLGLOSADO () {
					return this.VLGLOSADO;
				}

				public Boolean VLGLOSADOIsNullable(){
				    return true;
				}
				public Boolean VLGLOSADOIsKey(){
				    return false;
				}
				public Integer VLGLOSADOLength(){
				    return 0;
				}
				public Integer VLGLOSADOPrecision(){
				    return null;
				}
				public String VLGLOSADODefault(){
				
					return "0";
				
				}
				public String VLGLOSADOComment(){
				
				    return "Valor Glosado para la Etapa";
				
				}
				public String VLGLOSADOPattern(){
				
					return "";
				
				}
				public String VLGLOSADOOriginalDbColumnName(){
				
					return "VLGLOSADO";
				
				}

				
			    public BigDecimal HAUDITORIAS_ID;

				public BigDecimal getHAUDITORIAS_ID () {
					return this.HAUDITORIAS_ID;
				}

				public Boolean HAUDITORIAS_IDIsNullable(){
				    return true;
				}
				public Boolean HAUDITORIAS_IDIsKey(){
				    return false;
				}
				public Integer HAUDITORIAS_IDLength(){
				    return 0;
				}
				public Integer HAUDITORIAS_IDPrecision(){
				    return null;
				}
				public String HAUDITORIAS_IDDefault(){
				
					return null;
				
				}
				public String HAUDITORIAS_IDComment(){
				
				    return "FK - ACM_HAUDITORIAS";
				
				}
				public String HAUDITORIAS_IDPattern(){
				
					return "";
				
				}
				public String HAUDITORIAS_IDOriginalDbColumnName(){
				
					return "HAUDITORIAS_ID";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ETAPASNORMATIVIDAD_ID = (BigDecimal) dis.readObject();
					
						this.DFACTURASERVICIO_ID = (BigDecimal) dis.readObject();
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.DFACTURAFORMULACION_ID = (BigDecimal) dis.readObject();
					
						this.VLGLOSADO = (BigDecimal) dis.readObject();
					
						this.HAUDITORIAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ETAPASNORMATIVIDAD_ID = (BigDecimal) dis.readObject();
					
						this.DFACTURASERVICIO_ID = (BigDecimal) dis.readObject();
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.DFACTURAFORMULACION_ID = (BigDecimal) dis.readObject();
					
						this.VLGLOSADO = (BigDecimal) dis.readObject();
					
						this.HAUDITORIAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ETAPASNORMATIVIDAD_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DFACTURASERVICIO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DFACTURAFORMULACION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VLGLOSADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.HAUDITORIAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ETAPASNORMATIVIDAD_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DFACTURASERVICIO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DFACTURAFORMULACION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VLGLOSADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.HAUDITORIAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ETAPASNORMATIVIDAD_ID="+String.valueOf(ETAPASNORMATIVIDAD_ID));
		sb.append(",DFACTURASERVICIO_ID="+String.valueOf(DFACTURASERVICIO_ID));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",DFACTURAFORMULACION_ID="+String.valueOf(DFACTURAFORMULACION_ID));
		sb.append(",VLGLOSADO="+String.valueOf(VLGLOSADO));
		sb.append(",HAUDITORIAS_ID="+String.valueOf(HAUDITORIAS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_ACM_INICIAL_Inicial = new byte[0];
    static byte[] commonByteArray_ACM_INICIAL_Inicial = new byte[0];

	
			    public BigDecimal AUDITORIAS_ID;

				public BigDecimal getAUDITORIAS_ID () {
					return this.AUDITORIAS_ID;
				}

				public Boolean AUDITORIAS_IDIsNullable(){
				    return false;
				}
				public Boolean AUDITORIAS_IDIsKey(){
				    return false;
				}
				public Integer AUDITORIAS_IDLength(){
				    return 0;
				}
				public Integer AUDITORIAS_IDPrecision(){
				    return null;
				}
				public String AUDITORIAS_IDDefault(){
				
					return "";
				
				}
				public String AUDITORIAS_IDComment(){
				
				    return "";
				
				}
				public String AUDITORIAS_IDPattern(){
				
					return "";
				
				}
				public String AUDITORIAS_IDOriginalDbColumnName(){
				
					return "AUDITORIAS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 0;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal IDENTIFICADOR;

				public BigDecimal getIDENTIFICADOR () {
					return this.IDENTIFICADOR;
				}

				public Boolean IDENTIFICADORIsNullable(){
				    return true;
				}
				public Boolean IDENTIFICADORIsKey(){
				    return false;
				}
				public Integer IDENTIFICADORLength(){
				    return 0;
				}
				public Integer IDENTIFICADORPrecision(){
				    return null;
				}
				public String IDENTIFICADORDefault(){
				
					return "";
				
				}
				public String IDENTIFICADORComment(){
				
				    return "";
				
				}
				public String IDENTIFICADORPattern(){
				
					return "";
				
				}
				public String IDENTIFICADOROriginalDbColumnName(){
				
					return "IDENTIFICADOR";
				
				}

				
			    public BigDecimal VSOPORTADO_;

				public BigDecimal getVSOPORTADO_ () {
					return this.VSOPORTADO_;
				}

				public Boolean VSOPORTADO_IsNullable(){
				    return true;
				}
				public Boolean VSOPORTADO_IsKey(){
				    return false;
				}
				public Integer VSOPORTADO_Length(){
				    return 0;
				}
				public Integer VSOPORTADO_Precision(){
				    return null;
				}
				public String VSOPORTADO_Default(){
				
					return "";
				
				}
				public String VSOPORTADO_Comment(){
				
				    return "";
				
				}
				public String VSOPORTADO_Pattern(){
				
					return "";
				
				}
				public String VSOPORTADO_OriginalDbColumnName(){
				
					return "VSOPORTADO_";
				
				}

				
			    public BigDecimal VACEPTADO_;

				public BigDecimal getVACEPTADO_ () {
					return this.VACEPTADO_;
				}

				public Boolean VACEPTADO_IsNullable(){
				    return true;
				}
				public Boolean VACEPTADO_IsKey(){
				    return false;
				}
				public Integer VACEPTADO_Length(){
				    return 0;
				}
				public Integer VACEPTADO_Precision(){
				    return null;
				}
				public String VACEPTADO_Default(){
				
					return "";
				
				}
				public String VACEPTADO_Comment(){
				
				    return "";
				
				}
				public String VACEPTADO_Pattern(){
				
					return "";
				
				}
				public String VACEPTADO_OriginalDbColumnName(){
				
					return "VACEPTADO_";
				
				}

				
			    public BigDecimal VRATIFICADO_;

				public BigDecimal getVRATIFICADO_ () {
					return this.VRATIFICADO_;
				}

				public Boolean VRATIFICADO_IsNullable(){
				    return true;
				}
				public Boolean VRATIFICADO_IsKey(){
				    return false;
				}
				public Integer VRATIFICADO_Length(){
				    return 0;
				}
				public Integer VRATIFICADO_Precision(){
				    return null;
				}
				public String VRATIFICADO_Default(){
				
					return "";
				
				}
				public String VRATIFICADO_Comment(){
				
				    return "";
				
				}
				public String VRATIFICADO_Pattern(){
				
					return "";
				
				}
				public String VRATIFICADO_OriginalDbColumnName(){
				
					return "VRATIFICADO_";
				
				}

				
			    public BigDecimal VGLOSADO_;

				public BigDecimal getVGLOSADO_ () {
					return this.VGLOSADO_;
				}

				public Boolean VGLOSADO_IsNullable(){
				    return true;
				}
				public Boolean VGLOSADO_IsKey(){
				    return false;
				}
				public Integer VGLOSADO_Length(){
				    return 0;
				}
				public Integer VGLOSADO_Precision(){
				    return 0;
				}
				public String VGLOSADO_Default(){
				
					return "";
				
				}
				public String VGLOSADO_Comment(){
				
				    return "";
				
				}
				public String VGLOSADO_Pattern(){
				
					return "";
				
				}
				public String VGLOSADO_OriginalDbColumnName(){
				
					return "VGLOSADO_";
				
				}

				
			    public String BANDERA;

				public String getBANDERA () {
					return this.BANDERA;
				}

				public Boolean BANDERAIsNullable(){
				    return true;
				}
				public Boolean BANDERAIsKey(){
				    return false;
				}
				public Integer BANDERALength(){
				    return 1;
				}
				public Integer BANDERAPrecision(){
				    return 0;
				}
				public String BANDERADefault(){
				
					return null;
				
				}
				public String BANDERAComment(){
				
				    return "";
				
				}
				public String BANDERAPattern(){
				
					return "";
				
				}
				public String BANDERAOriginalDbColumnName(){
				
					return "BANDERA";
				
				}

				
			    public BigDecimal VAVALPAGO;

				public BigDecimal getVAVALPAGO () {
					return this.VAVALPAGO;
				}

				public Boolean VAVALPAGOIsNullable(){
				    return true;
				}
				public Boolean VAVALPAGOIsKey(){
				    return false;
				}
				public Integer VAVALPAGOLength(){
				    return 0;
				}
				public Integer VAVALPAGOPrecision(){
				    return null;
				}
				public String VAVALPAGODefault(){
				
					return "";
				
				}
				public String VAVALPAGOComment(){
				
				    return "";
				
				}
				public String VAVALPAGOPattern(){
				
					return "";
				
				}
				public String VAVALPAGOOriginalDbColumnName(){
				
					return "VAVALPAGO";
				
				}

				
			    public String RESPONSABLE;

				public String getRESPONSABLE () {
					return this.RESPONSABLE;
				}

				public Boolean RESPONSABLEIsNullable(){
				    return true;
				}
				public Boolean RESPONSABLEIsKey(){
				    return false;
				}
				public Integer RESPONSABLELength(){
				    return 20;
				}
				public Integer RESPONSABLEPrecision(){
				    return 0;
				}
				public String RESPONSABLEDefault(){
				
					return null;
				
				}
				public String RESPONSABLEComment(){
				
				    return "";
				
				}
				public String RESPONSABLEPattern(){
				
					return "";
				
				}
				public String RESPONSABLEOriginalDbColumnName(){
				
					return "RESPONSABLE";
				
				}

				
			    public String TIPO;

				public String getTIPO () {
					return this.TIPO;
				}

				public Boolean TIPOIsNullable(){
				    return true;
				}
				public Boolean TIPOIsKey(){
				    return false;
				}
				public Integer TIPOLength(){
				    return 20;
				}
				public Integer TIPOPrecision(){
				    return 0;
				}
				public String TIPODefault(){
				
					return null;
				
				}
				public String TIPOComment(){
				
				    return "";
				
				}
				public String TIPOPattern(){
				
					return "";
				
				}
				public String TIPOOriginalDbColumnName(){
				
					return "TIPO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_INICIAL_Inicial.length) {
				if(length < 1024 && commonByteArray_ACM_INICIAL_Inicial.length == 0) {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[1024];
				} else {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_INICIAL_Inicial, 0, length);
			strReturn = new String(commonByteArray_ACM_INICIAL_Inicial, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_INICIAL_Inicial.length) {
				if(length < 1024 && commonByteArray_ACM_INICIAL_Inicial.length == 0) {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[1024];
				} else {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_INICIAL_Inicial, 0, length);
			strReturn = new String(commonByteArray_ACM_INICIAL_Inicial, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.AUDITORIAS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.IDENTIFICADOR = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO_ = (BigDecimal) dis.readObject();
					
						this.VACEPTADO_ = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO_ = (BigDecimal) dis.readObject();
					
						this.VGLOSADO_ = (BigDecimal) dis.readObject();
					
					this.BANDERA = readString(dis);
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
					this.RESPONSABLE = readString(dis);
					
					this.TIPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.AUDITORIAS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.IDENTIFICADOR = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO_ = (BigDecimal) dis.readObject();
					
						this.VACEPTADO_ = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO_ = (BigDecimal) dis.readObject();
					
						this.VGLOSADO_ = (BigDecimal) dis.readObject();
					
					this.BANDERA = readString(dis);
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
					this.RESPONSABLE = readString(dis);
					
					this.TIPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.AUDITORIAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IDENTIFICADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VSOPORTADO_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VACEPTADO_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRATIFICADO_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VGLOSADO_);
					
					// String
				
						writeString(this.BANDERA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAVALPAGO);
					
					// String
				
						writeString(this.RESPONSABLE,dos);
					
					// String
				
						writeString(this.TIPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AUDITORIAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IDENTIFICADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VSOPORTADO_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VACEPTADO_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VRATIFICADO_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VGLOSADO_);
					
					// String
				
						writeString(this.BANDERA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VAVALPAGO);
					
					// String
				
						writeString(this.RESPONSABLE,dos);
					
					// String
				
						writeString(this.TIPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AUDITORIAS_ID="+String.valueOf(AUDITORIAS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",IDENTIFICADOR="+String.valueOf(IDENTIFICADOR));
		sb.append(",VSOPORTADO_="+String.valueOf(VSOPORTADO_));
		sb.append(",VACEPTADO_="+String.valueOf(VACEPTADO_));
		sb.append(",VRATIFICADO_="+String.valueOf(VRATIFICADO_));
		sb.append(",VGLOSADO_="+String.valueOf(VGLOSADO_));
		sb.append(",BANDERA="+BANDERA);
		sb.append(",VAVALPAGO="+String.valueOf(VAVALPAGO));
		sb.append(",RESPONSABLE="+RESPONSABLE);
		sb.append(",TIPO="+TIPO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_2Struct implements routines.system.IPersistableRow<after_tOracleInput_2Struct> {
    final static byte[] commonByteArrayLock_ACM_INICIAL_Inicial = new byte[0];
    static byte[] commonByteArray_ACM_INICIAL_Inicial = new byte[0];

	
			    public BigDecimal AUDITORIAS_ID;

				public BigDecimal getAUDITORIAS_ID () {
					return this.AUDITORIAS_ID;
				}

				public Boolean AUDITORIAS_IDIsNullable(){
				    return false;
				}
				public Boolean AUDITORIAS_IDIsKey(){
				    return false;
				}
				public Integer AUDITORIAS_IDLength(){
				    return 0;
				}
				public Integer AUDITORIAS_IDPrecision(){
				    return null;
				}
				public String AUDITORIAS_IDDefault(){
				
					return "";
				
				}
				public String AUDITORIAS_IDComment(){
				
				    return "";
				
				}
				public String AUDITORIAS_IDPattern(){
				
					return "";
				
				}
				public String AUDITORIAS_IDOriginalDbColumnName(){
				
					return "AUDITORIAS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 0;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal IDENTIFICADOR;

				public BigDecimal getIDENTIFICADOR () {
					return this.IDENTIFICADOR;
				}

				public Boolean IDENTIFICADORIsNullable(){
				    return true;
				}
				public Boolean IDENTIFICADORIsKey(){
				    return false;
				}
				public Integer IDENTIFICADORLength(){
				    return 0;
				}
				public Integer IDENTIFICADORPrecision(){
				    return null;
				}
				public String IDENTIFICADORDefault(){
				
					return "";
				
				}
				public String IDENTIFICADORComment(){
				
				    return "";
				
				}
				public String IDENTIFICADORPattern(){
				
					return "";
				
				}
				public String IDENTIFICADOROriginalDbColumnName(){
				
					return "IDENTIFICADOR";
				
				}

				
			    public BigDecimal VSOPORTADO_;

				public BigDecimal getVSOPORTADO_ () {
					return this.VSOPORTADO_;
				}

				public Boolean VSOPORTADO_IsNullable(){
				    return true;
				}
				public Boolean VSOPORTADO_IsKey(){
				    return false;
				}
				public Integer VSOPORTADO_Length(){
				    return 0;
				}
				public Integer VSOPORTADO_Precision(){
				    return null;
				}
				public String VSOPORTADO_Default(){
				
					return "";
				
				}
				public String VSOPORTADO_Comment(){
				
				    return "";
				
				}
				public String VSOPORTADO_Pattern(){
				
					return "";
				
				}
				public String VSOPORTADO_OriginalDbColumnName(){
				
					return "VSOPORTADO_";
				
				}

				
			    public BigDecimal VACEPTADO_;

				public BigDecimal getVACEPTADO_ () {
					return this.VACEPTADO_;
				}

				public Boolean VACEPTADO_IsNullable(){
				    return true;
				}
				public Boolean VACEPTADO_IsKey(){
				    return false;
				}
				public Integer VACEPTADO_Length(){
				    return 0;
				}
				public Integer VACEPTADO_Precision(){
				    return null;
				}
				public String VACEPTADO_Default(){
				
					return "";
				
				}
				public String VACEPTADO_Comment(){
				
				    return "";
				
				}
				public String VACEPTADO_Pattern(){
				
					return "";
				
				}
				public String VACEPTADO_OriginalDbColumnName(){
				
					return "VACEPTADO_";
				
				}

				
			    public BigDecimal VRATIFICADO_;

				public BigDecimal getVRATIFICADO_ () {
					return this.VRATIFICADO_;
				}

				public Boolean VRATIFICADO_IsNullable(){
				    return true;
				}
				public Boolean VRATIFICADO_IsKey(){
				    return false;
				}
				public Integer VRATIFICADO_Length(){
				    return 0;
				}
				public Integer VRATIFICADO_Precision(){
				    return null;
				}
				public String VRATIFICADO_Default(){
				
					return "";
				
				}
				public String VRATIFICADO_Comment(){
				
				    return "";
				
				}
				public String VRATIFICADO_Pattern(){
				
					return "";
				
				}
				public String VRATIFICADO_OriginalDbColumnName(){
				
					return "VRATIFICADO_";
				
				}

				
			    public BigDecimal VGLOSADO_;

				public BigDecimal getVGLOSADO_ () {
					return this.VGLOSADO_;
				}

				public Boolean VGLOSADO_IsNullable(){
				    return true;
				}
				public Boolean VGLOSADO_IsKey(){
				    return false;
				}
				public Integer VGLOSADO_Length(){
				    return 0;
				}
				public Integer VGLOSADO_Precision(){
				    return 0;
				}
				public String VGLOSADO_Default(){
				
					return "";
				
				}
				public String VGLOSADO_Comment(){
				
				    return "";
				
				}
				public String VGLOSADO_Pattern(){
				
					return "";
				
				}
				public String VGLOSADO_OriginalDbColumnName(){
				
					return "VGLOSADO_";
				
				}

				
			    public String BANDERA;

				public String getBANDERA () {
					return this.BANDERA;
				}

				public Boolean BANDERAIsNullable(){
				    return true;
				}
				public Boolean BANDERAIsKey(){
				    return false;
				}
				public Integer BANDERALength(){
				    return 1;
				}
				public Integer BANDERAPrecision(){
				    return 0;
				}
				public String BANDERADefault(){
				
					return null;
				
				}
				public String BANDERAComment(){
				
				    return "";
				
				}
				public String BANDERAPattern(){
				
					return "";
				
				}
				public String BANDERAOriginalDbColumnName(){
				
					return "BANDERA";
				
				}

				
			    public BigDecimal VAVALPAGO;

				public BigDecimal getVAVALPAGO () {
					return this.VAVALPAGO;
				}

				public Boolean VAVALPAGOIsNullable(){
				    return true;
				}
				public Boolean VAVALPAGOIsKey(){
				    return false;
				}
				public Integer VAVALPAGOLength(){
				    return 0;
				}
				public Integer VAVALPAGOPrecision(){
				    return null;
				}
				public String VAVALPAGODefault(){
				
					return "";
				
				}
				public String VAVALPAGOComment(){
				
				    return "";
				
				}
				public String VAVALPAGOPattern(){
				
					return "";
				
				}
				public String VAVALPAGOOriginalDbColumnName(){
				
					return "VAVALPAGO";
				
				}

				
			    public String RESPONSABLE;

				public String getRESPONSABLE () {
					return this.RESPONSABLE;
				}

				public Boolean RESPONSABLEIsNullable(){
				    return true;
				}
				public Boolean RESPONSABLEIsKey(){
				    return false;
				}
				public Integer RESPONSABLELength(){
				    return 20;
				}
				public Integer RESPONSABLEPrecision(){
				    return 0;
				}
				public String RESPONSABLEDefault(){
				
					return null;
				
				}
				public String RESPONSABLEComment(){
				
				    return "";
				
				}
				public String RESPONSABLEPattern(){
				
					return "";
				
				}
				public String RESPONSABLEOriginalDbColumnName(){
				
					return "RESPONSABLE";
				
				}

				
			    public String TIPO;

				public String getTIPO () {
					return this.TIPO;
				}

				public Boolean TIPOIsNullable(){
				    return true;
				}
				public Boolean TIPOIsKey(){
				    return false;
				}
				public Integer TIPOLength(){
				    return 20;
				}
				public Integer TIPOPrecision(){
				    return 0;
				}
				public String TIPODefault(){
				
					return null;
				
				}
				public String TIPOComment(){
				
				    return "";
				
				}
				public String TIPOPattern(){
				
					return "";
				
				}
				public String TIPOOriginalDbColumnName(){
				
					return "TIPO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_INICIAL_Inicial.length) {
				if(length < 1024 && commonByteArray_ACM_INICIAL_Inicial.length == 0) {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[1024];
				} else {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_INICIAL_Inicial, 0, length);
			strReturn = new String(commonByteArray_ACM_INICIAL_Inicial, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_INICIAL_Inicial.length) {
				if(length < 1024 && commonByteArray_ACM_INICIAL_Inicial.length == 0) {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[1024];
				} else {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_INICIAL_Inicial, 0, length);
			strReturn = new String(commonByteArray_ACM_INICIAL_Inicial, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.AUDITORIAS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.IDENTIFICADOR = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO_ = (BigDecimal) dis.readObject();
					
						this.VACEPTADO_ = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO_ = (BigDecimal) dis.readObject();
					
						this.VGLOSADO_ = (BigDecimal) dis.readObject();
					
					this.BANDERA = readString(dis);
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
					this.RESPONSABLE = readString(dis);
					
					this.TIPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.AUDITORIAS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.IDENTIFICADOR = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO_ = (BigDecimal) dis.readObject();
					
						this.VACEPTADO_ = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO_ = (BigDecimal) dis.readObject();
					
						this.VGLOSADO_ = (BigDecimal) dis.readObject();
					
					this.BANDERA = readString(dis);
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
					this.RESPONSABLE = readString(dis);
					
					this.TIPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.AUDITORIAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IDENTIFICADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VSOPORTADO_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VACEPTADO_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRATIFICADO_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VGLOSADO_);
					
					// String
				
						writeString(this.BANDERA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAVALPAGO);
					
					// String
				
						writeString(this.RESPONSABLE,dos);
					
					// String
				
						writeString(this.TIPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AUDITORIAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IDENTIFICADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VSOPORTADO_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VACEPTADO_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VRATIFICADO_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VGLOSADO_);
					
					// String
				
						writeString(this.BANDERA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VAVALPAGO);
					
					// String
				
						writeString(this.RESPONSABLE,dos);
					
					// String
				
						writeString(this.TIPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AUDITORIAS_ID="+String.valueOf(AUDITORIAS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",IDENTIFICADOR="+String.valueOf(IDENTIFICADOR));
		sb.append(",VSOPORTADO_="+String.valueOf(VSOPORTADO_));
		sb.append(",VACEPTADO_="+String.valueOf(VACEPTADO_));
		sb.append(",VRATIFICADO_="+String.valueOf(VRATIFICADO_));
		sb.append(",VGLOSADO_="+String.valueOf(VGLOSADO_));
		sb.append(",BANDERA="+BANDERA);
		sb.append(",VAVALPAGO="+String.valueOf(VAVALPAGO));
		sb.append(",RESPONSABLE="+RESPONSABLE);
		sb.append(",TIPO="+TIPO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_1Process(globalMap);

		row2Struct row2 = new row2Struct();
InsHDStruct InsHD = new InsHDStruct();
out2Struct out2 = new out2Struct();





	
	/**
	 * [tOracleOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_6", false);
		start_Hash.put("tOracleOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"InsHD");
					}
				
		int tos_count_tOracleOutput_6 = 0;
		






    
    int nb_line_tOracleOutput_6 = 0;
    int nb_line_update_tOracleOutput_6 = 0;
    int nb_line_inserted_tOracleOutput_6 = 0;
    int nb_line_deleted_tOracleOutput_6 = 0;
    int nb_line_rejected_tOracleOutput_6 = 0;

    int tmp_batchUpdateCount_tOracleOutput_6 = 0;

    int deletedCount_tOracleOutput_6=0;
    int updatedCount_tOracleOutput_6=0;
    int insertedCount_tOracleOutput_6=0;
    int rowsToCommitCount_tOracleOutput_6=0;
    int rejectedCount_tOracleOutput_6=0;

    boolean whetherReject_tOracleOutput_6 = false;

    java.sql.Connection conn_tOracleOutput_6 = null;

    //optional table
    String dbschema_tOracleOutput_6 = null;
    String tableName_tOracleOutput_6 = null;
                    String driverClass_tOracleOutput_6 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_6);
                String url_tOracleOutput_6 = null;
                    url_tOracleOutput_6 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
                String dbUser_tOracleOutput_6 = context.db_origen_Login;

	final String decryptedPassword_tOracleOutput_6 = context.db_origen_Password; 

                String dbPwd_tOracleOutput_6 = decryptedPassword_tOracleOutput_6;
                dbschema_tOracleOutput_6 = context.db_origen_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_6 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_6.put("user",dbUser_tOracleOutput_6);
                    atnParamsPrope_tOracleOutput_6.put("password",dbPwd_tOracleOutput_6);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_6.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_6 = java.sql.DriverManager.getConnection(url_tOracleOutput_6, atnParamsPrope_tOracleOutput_6);
        resourceMap.put("conn_tOracleOutput_6", conn_tOracleOutput_6);
            conn_tOracleOutput_6.setAutoCommit(false);
            int commitEvery_tOracleOutput_6 = 10000;
            int commitCounter_tOracleOutput_6 = 0;
        int batchSize_tOracleOutput_6 = 10000;
        int batchSizeCounter_tOracleOutput_6=0;
        int count_tOracleOutput_6=0;

        if(dbschema_tOracleOutput_6 == null || dbschema_tOracleOutput_6.trim().length() == 0) {
            tableName_tOracleOutput_6 = ("ACM_HDFACTURASERVICIO");
        } else {
            tableName_tOracleOutput_6 = dbschema_tOracleOutput_6 + "." + ("ACM_HDFACTURASERVICIO");
        }
                String insert_tOracleOutput_6 = "INSERT INTO " + tableName_tOracleOutput_6 + " (ETAPASNORMATIVIDAD_ID,DFACTURASERVICIO_ID,USUARIOS_ID,UORG_ID,DFACTURAFORMULACION_ID,VLGLOSADO,HAUDITORIAS_ID) VALUES (?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_6 = conn_tOracleOutput_6.prepareStatement(insert_tOracleOutput_6);
                        resourceMap.put("pstmt_tOracleOutput_6", pstmt_tOracleOutput_6);





 



/**
 * [tOracleOutput_6 begin ] stop
 */




	
	/**
	 * [tOracleOutput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_12", false);
		start_Hash.put("tOracleOutput_12", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_12";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out2");
					}
				
		int tos_count_tOracleOutput_12 = 0;
		






    
    int nb_line_tOracleOutput_12 = 0;
    int nb_line_update_tOracleOutput_12 = 0;
    int nb_line_inserted_tOracleOutput_12 = 0;
    int nb_line_deleted_tOracleOutput_12 = 0;
    int nb_line_rejected_tOracleOutput_12 = 0;

    int tmp_batchUpdateCount_tOracleOutput_12 = 0;

    int deletedCount_tOracleOutput_12=0;
    int updatedCount_tOracleOutput_12=0;
    int insertedCount_tOracleOutput_12=0;
    int rowsToCommitCount_tOracleOutput_12=0;
    int rejectedCount_tOracleOutput_12=0;

    boolean whetherReject_tOracleOutput_12 = false;

    java.sql.Connection conn_tOracleOutput_12 = null;

    //optional table
    String dbschema_tOracleOutput_12 = null;
    String tableName_tOracleOutput_12 = null;
                    String driverClass_tOracleOutput_12 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_12);
                String url_tOracleOutput_12 = null;
                    url_tOracleOutput_12 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
                String dbUser_tOracleOutput_12 = context.db_origen_Login;

	final String decryptedPassword_tOracleOutput_12 = context.db_origen_Password; 

                String dbPwd_tOracleOutput_12 = decryptedPassword_tOracleOutput_12;
                dbschema_tOracleOutput_12 = context.db_origen_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_12 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_12.put("user",dbUser_tOracleOutput_12);
                    atnParamsPrope_tOracleOutput_12.put("password",dbPwd_tOracleOutput_12);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_12.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_12 = java.sql.DriverManager.getConnection(url_tOracleOutput_12, atnParamsPrope_tOracleOutput_12);
        resourceMap.put("conn_tOracleOutput_12", conn_tOracleOutput_12);
            conn_tOracleOutput_12.setAutoCommit(false);
            int commitEvery_tOracleOutput_12 = 10000;
            int commitCounter_tOracleOutput_12 = 0;
        int batchSize_tOracleOutput_12 = 10000;
        int batchSizeCounter_tOracleOutput_12=0;
        int count_tOracleOutput_12=0;

        if(dbschema_tOracleOutput_12 == null || dbschema_tOracleOutput_12.trim().length() == 0) {
            tableName_tOracleOutput_12 = ("ACM_HDFACTURASERVICIO");
        } else {
            tableName_tOracleOutput_12 = dbschema_tOracleOutput_12 + "." + ("ACM_HDFACTURASERVICIO");
        }
                String insert_tOracleOutput_12 = "INSERT INTO " + tableName_tOracleOutput_12 + " (ETAPASNORMATIVIDAD_ID,DFACTURASERVICIO_ID,USUARIOS_ID,UORG_ID,DFACTURAFORMULACION_ID,VLGLOSADO,HAUDITORIAS_ID) VALUES (?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_12 = conn_tOracleOutput_12.prepareStatement(insert_tOracleOutput_12);
                        resourceMap.put("pstmt_tOracleOutput_12", pstmt_tOracleOutput_12);





 



/**
 * [tOracleOutput_12 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) 
					globalMap.get( "tHash_Lookup_row13" ))
					;					
					
	

row13Struct row13HashKey = new row13Struct();
row13Struct row13Default = new row13Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
InsHDStruct InsHD_tmp = new InsHDStruct();
out2Struct out2_tmp = new out2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tOracleInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_2", false);
		start_Hash.put("tOracleInput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_2";
	
	
		int tos_count_tOracleInput_2 = 0;
		
	


	
		    int nb_line_tOracleInput_2 = 0;
		    java.sql.Connection conn_tOracleInput_2 = null;
				String driverClass_tOracleInput_2 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_2);
				
			String url_tOracleInput_2 = null;
				url_tOracleInput_2 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";

				String dbUser_tOracleInput_2 = context.db_origen_Login;

				

				
	final String decryptedPassword_tOracleInput_2 = context.db_origen_Password; 

				String dbPwd_tOracleInput_2 = decryptedPassword_tOracleInput_2;

				
					java.util.Properties atnParamsPrope_tOracleInput_2 = new java.util.Properties();
					atnParamsPrope_tOracleInput_2.put("user",dbUser_tOracleInput_2);
					atnParamsPrope_tOracleInput_2.put("password",dbPwd_tOracleInput_2);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleInput_2.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
					conn_tOracleInput_2 = java.sql.DriverManager.getConnection(url_tOracleInput_2, atnParamsPrope_tOracleInput_2);
				java.sql.Statement stmtGetTZ_tOracleInput_2 = conn_tOracleInput_2.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_2 = stmtGetTZ_tOracleInput_2.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_2 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_2.next()) {
					sessionTimezone_tOracleInput_2 = rsGetTZ_tOracleInput_2.getString(1);
				}
                                if (!(conn_tOracleInput_2 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_2.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_2.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_2.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_2);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_2).setSessionTimeZone(sessionTimezone_tOracleInput_2);
                                }
		    
			java.sql.Statement stmt_tOracleInput_2 = conn_tOracleInput_2.createStatement();

		    String dbquery_tOracleInput_2 = "SELECT \nT.AUDITORIAS_ID,\nT.UORG_ID,\nT.USUARIOS_ID,\nT.IDENTIFICADOR,\nT.VSOPORTADO_,\nT.VACEPTADO_,\nT.VRATIFICADO_,"
+"\nCASE\nWHEN T.CODIGO = 1 OR (T.RESPONSABLE = 'PRESTADOR' AND T.TIPO  = 'Etapa') THEN  T.VGLOSADO_\nWHEN T.CODIGO <> 1 A"
+"ND (T.RESPONSABLE = 'AUDITOR' OR T.TIPO  = 'Conciliación' ) THEN T.VRATIFICADO_\nEND AS VGLOSADO_,\nT.BANDERA,\nHDFAC.VA"
+"VALPAGO AS VAVALPAGO,\nT.RESPONSABLE, \nT.TIPO\nFROM (\n\nSELECT \nDISTINCT \n        HA.ID,\n        HA.AUDITORIAS_ID,"
+"\n        HDF.UORG_ID,\n        RE.USUARIOS_ID,\n        NVL(HDF.DFACTURASERVICIO_ID,HDF.DFACTURAFORMULACION_ID) AS IDENT"
+"IFICADOR,\n        CASE \n        WHEN HDF.DFACTURASERVICIO_ID IS NOT NULL THEN 'S'\n        ELSE 'M' END AS BANDERA,\n "
+"       EN.CODIGO,\n        EN.RESPONSABLE,\n        HA.TIPO,\n        SUM(HDF.VSOPORTADO) AS VSOPORTADO_,\n        SUM(H"
+"DF.VACEPTADO) AS VACEPTADO_,\n        SUM(HDF.VRATIFICADO) AS VRATIFICADO_,\n        SUM(HDF.VLGLOSADO) AS VGLOSADO_,\n "
+"       SUM(HDF.VAVALPAGO) AS VAVALPAGO_\n        FROM ACM_HDFACTURASERVICIO HDF        \n        INNER JOIN ACM_HAUDITOR"
+"IAS HA ON HA.ID = HDF.HAUDITORIAS_ID\n        INNER JOIN ACM_AUDITORIAS AU ON AU.HAUDITORIAS_ID = HA.ID\n        INNER J"
+"OIN ACM_ESTAUDITORIAS ES ON ES.ID = HA.ESTAUDITORIA_ID  \n        INNER JOIN ACM_RECEPCION RE ON RE.ID = HA.RECEPCION_ID"
+"\n        INNER JOIN ACM_ETAPASNORMATIVIDAD EN ON EN.ID = HA.ETAPASNORMATIVIDAD_ID AND EN.ESTREGISTRO_ID = 1\n        WH"
+"ERE \n        ES.NOMBRE = 'Finalizada'\n		AND HA.VLGOSADO <> 0\n        AND (HA.EJECUCION = 0 OR HA.EJECUCION IS NULL )"
+"\n        AND ((EN.CODIGO = 1 AND HA.VLGOSADO <> 0) OR\n        (((EN.CODIGO <> 1 AND EN.RESPONSABLE = 'PRESTADOR' AND HA"
+".TIPO <> 'Conciliación') OR (HA.TIPO = 'Conciliación' AND HA.VRATIFICADO <> 0))) OR\n        EN.RESPONSABLE = 'AUDITOR' "
+"AND EN.CODIGO <> 1 AND HA.VRATIFICADO <> 0) \n        group by HA.ID, HA.AUDITORIAS_ID, HDF.UORG_ID, RE.USUARIOS_ID,  NV"
+"L(HDF.DFACTURASERVICIO_ID,HDF.DFACTURAFORMULACION_ID), \n        CASE WHEN HDF.DFACTURASERVICIO_ID IS NOT NULL THEN 'S' "
+"ELSE 'M' END, EN.CODIGO, EN.RESPONSABLE, HA.TIPO ) T\nINNER JOIN ( SELECT    \n  SUM(T.VGLOSADO) AS GLOSA_INICIAL,\n  T."
+"IDENTIFICADOR\n  FROM (\n  SELECT \n                    HGLO.VGLOSADO,\n                    NVL(GLO2.DFACTURASERVICIO_ID"
+",GLO2.DFACTURAFORMULACION_ID) AS IDENTIFICADOR\n                    FROM ACM_HGLOSASCAUSADAS HGLO\n                    I"
+"NNER JOIN ACM_GLOSASCAUSADAS GLO2 ON GLO2.ID = HGLO.GLOSASCAUSADAS_ID\n                    INNER JOIN ACM_ETAPASNORMATIV"
+"IDAD ETA ON ETA.ID = HGLO.ETAPASNORMATIVIDAD_ID AND ETA.CODIGO = 1\n                    )T\nGROUP BY T.IDENTIFICADOR) T2"
+" ON T2.IDENTIFICADOR = T.IDENTIFICADOR\nLEFT JOIN ACM_DFACTURASERVICIO DFA ON DFA.ID = DECODE (T.BANDERA,'S',T.IDENTIFIC"
+"ADOR,0)\nLEFT JOIN ACM_DFACTURAFORMULACION DFF ON DFF.ID = DECODE (T.BANDERA,'M',T.IDENTIFICADOR,0)\nLEFT JOIN ACM_HDFAC"
+"TURASERVICIO HDFAC ON DECODE (DFA.ID,NULL, DFF.ID,DFA.ID) =  DECODE (DFA.ID,NULL,HDFAC.DFACTURAFORMULACION_ID,HDFAC.DFAC"
+"TURASERVICIO_ID) AND HDFAC.HAUDITORIAS_ID = T.ID";
		    

		    globalMap.put("tOracleInput_2_QUERY",dbquery_tOracleInput_2);

		    java.sql.ResultSet rs_tOracleInput_2 = null;

		    try {
		    	rs_tOracleInput_2 = stmt_tOracleInput_2.executeQuery(dbquery_tOracleInput_2);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_2 = rs_tOracleInput_2.getMetaData();
		    	int colQtyInRs_tOracleInput_2 = rsmd_tOracleInput_2.getColumnCount();

		    String tmpContent_tOracleInput_2 = null;
		    
		    
		    while (rs_tOracleInput_2.next()) {
		        nb_line_tOracleInput_2++;
		        
							if(colQtyInRs_tOracleInput_2 < 1) {
								row2.AUDITORIAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(1) != null) {
						row2.AUDITORIAS_ID = rs_tOracleInput_2.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 2) {
								row2.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(2) != null) {
						row2.UORG_ID = rs_tOracleInput_2.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 3) {
								row2.USUARIOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(3) != null) {
						row2.USUARIOS_ID = rs_tOracleInput_2.getBigDecimal(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 4) {
								row2.IDENTIFICADOR = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(4) != null) {
						row2.IDENTIFICADOR = rs_tOracleInput_2.getBigDecimal(4);
					} else {
				
						row2.IDENTIFICADOR = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 5) {
								row2.VSOPORTADO_ = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(5) != null) {
						row2.VSOPORTADO_ = rs_tOracleInput_2.getBigDecimal(5);
					} else {
				
						row2.VSOPORTADO_ = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 6) {
								row2.VACEPTADO_ = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(6) != null) {
						row2.VACEPTADO_ = rs_tOracleInput_2.getBigDecimal(6);
					} else {
				
						row2.VACEPTADO_ = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 7) {
								row2.VRATIFICADO_ = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(7) != null) {
						row2.VRATIFICADO_ = rs_tOracleInput_2.getBigDecimal(7);
					} else {
				
						row2.VRATIFICADO_ = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 8) {
								row2.VGLOSADO_ = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(8) != null) {
						row2.VGLOSADO_ = rs_tOracleInput_2.getBigDecimal(8);
					} else {
				
						row2.VGLOSADO_ = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 9) {
								row2.BANDERA = null;
							} else {
	                         		
        	row2.BANDERA = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 9, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 10) {
								row2.VAVALPAGO = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(10) != null) {
						row2.VAVALPAGO = rs_tOracleInput_2.getBigDecimal(10);
					} else {
				
						row2.VAVALPAGO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 11) {
								row2.RESPONSABLE = null;
							} else {
	                         		
        	row2.RESPONSABLE = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 11, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 12) {
								row2.TIPO = null;
							} else {
	                         		
        	row2.TIPO = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 12, false);
		                    }
					




 



/**
 * [tOracleInput_2 begin ] stop
 */
	
	/**
	 * [tOracleInput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 


	tos_count_tOracleInput_2++;

/**
 * [tOracleInput_2 main ] stop
 */
	
	/**
	 * [tOracleInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
						row13Struct row13 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_4 = false;
		boolean mainRowRejected_tMap_4 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row13" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow13 = false;
       		  	    	
       		  	    	
 							row13Struct row13ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    row13HashKey.AUDITORIAS_ID = row2.AUDITORIAS_ID ;
                        		    		

								
		                        	row13HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row13.lookup( row13HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row13.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_4 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row13Struct fromLookup_row13 = null;
							row13 = row13Default;
										 
							
								 
							
							
								if (tHash_Lookup_row13 !=null && tHash_Lookup_row13.hasNext()) { // G 099
								
							
								
								fromLookup_row13 = tHash_Lookup_row13.next();

							
							
								} // G 099
							
							

							if(fromLookup_row13 != null) {
								row13 = fromLookup_row13;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

InsHD = null;
out2 = null;

if(!rejectedInnerJoin_tMap_4 ) {

// # Output table : 'InsHD'
// # Filter conditions 
if( 

row2.VGLOSADO_.intValue() != 0  && row2.BANDERA.equals("S")

 ) {
InsHD_tmp.ETAPASNORMATIVIDAD_ID = row13.ETAPASNORMATIVIDAD_ID ;
InsHD_tmp.DFACTURASERVICIO_ID = row2.IDENTIFICADOR ;
InsHD_tmp.USUARIOS_ID = row13.USUARIOS_ID ;
InsHD_tmp.UORG_ID = row13.UORG_ID ;
InsHD_tmp.DFACTURAFORMULACION_ID = null;
InsHD_tmp.VLGLOSADO = row2.VGLOSADO_ ;
InsHD_tmp.HAUDITORIAS_ID = row13.ID ;
InsHD = InsHD_tmp;
} // closing filter/reject

// # Output table : 'out2'
// # Filter conditions 
if( 

row2.VGLOSADO_.intValue() != 0  && row2.BANDERA.equals("M") 

 ) {
out2_tmp.ETAPASNORMATIVIDAD_ID = row13.ETAPASNORMATIVIDAD_ID ;
out2_tmp.DFACTURASERVICIO_ID = null;
out2_tmp.USUARIOS_ID = row13.USUARIOS_ID ;
out2_tmp.UORG_ID = row13.UORG_ID ;
out2_tmp.DFACTURAFORMULACION_ID = row2.IDENTIFICADOR ;
out2_tmp.VLGLOSADO = row2.VGLOSADO_ ;
out2_tmp.HAUDITORIAS_ID = row13.ID ;
out2 = out2_tmp;
} // closing filter/reject
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "InsHD"
if(InsHD != null) { 



	
	/**
	 * [tOracleOutput_6 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"InsHD"
						
						);
					}
					



        whetherReject_tOracleOutput_6 = false;
                        pstmt_tOracleOutput_6.setBigDecimal(1, InsHD.ETAPASNORMATIVIDAD_ID);

                        pstmt_tOracleOutput_6.setBigDecimal(2, InsHD.DFACTURASERVICIO_ID);

                        pstmt_tOracleOutput_6.setBigDecimal(3, InsHD.USUARIOS_ID);

                        pstmt_tOracleOutput_6.setBigDecimal(4, InsHD.UORG_ID);

                        pstmt_tOracleOutput_6.setBigDecimal(5, InsHD.DFACTURAFORMULACION_ID);

                        pstmt_tOracleOutput_6.setBigDecimal(6, InsHD.VLGLOSADO);

                        pstmt_tOracleOutput_6.setBigDecimal(7, InsHD.HAUDITORIAS_ID);

                pstmt_tOracleOutput_6.addBatch();
                nb_line_tOracleOutput_6++;
                batchSizeCounter_tOracleOutput_6++;
            if (batchSize_tOracleOutput_6 > 0 &&  batchSize_tOracleOutput_6 <= batchSizeCounter_tOracleOutput_6) {
                try {
                    pstmt_tOracleOutput_6.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_6){
globalMap.put("tOracleOutput_6_ERROR_MESSAGE",e_tOracleOutput_6.getMessage());
			        java.sql.SQLException ne_tOracleOutput_6 = e_tOracleOutput_6.getNextException(),sqle_tOracleOutput_6=null;
			    	String errormessage_tOracleOutput_6;
					if (ne_tOracleOutput_6 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_6 = new java.sql.SQLException(e_tOracleOutput_6.getMessage() + "\ncaused by: " + ne_tOracleOutput_6.getMessage(), ne_tOracleOutput_6.getSQLState(), ne_tOracleOutput_6.getErrorCode(), ne_tOracleOutput_6);
						errormessage_tOracleOutput_6 = sqle_tOracleOutput_6.getMessage();
					}else{
						errormessage_tOracleOutput_6 = e_tOracleOutput_6.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_6);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_6 = pstmt_tOracleOutput_6.getUpdateCount();
                    insertedCount_tOracleOutput_6
                += (tmp_batchUpdateCount_tOracleOutput_6!=-1?tmp_batchUpdateCount_tOracleOutput_6:0);
                rowsToCommitCount_tOracleOutput_6 += (tmp_batchUpdateCount_tOracleOutput_6!=-1?tmp_batchUpdateCount_tOracleOutput_6:0);
                batchSizeCounter_tOracleOutput_6 = 0;
            }
                commitCounter_tOracleOutput_6++;
                if(commitEvery_tOracleOutput_6 <= commitCounter_tOracleOutput_6) {
                    if(batchSizeCounter_tOracleOutput_6 > 0) {
                        try {
                            pstmt_tOracleOutput_6.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_6){
globalMap.put("tOracleOutput_6_ERROR_MESSAGE",e_tOracleOutput_6.getMessage());
					        java.sql.SQLException ne_tOracleOutput_6 = e_tOracleOutput_6.getNextException(),sqle_tOracleOutput_6=null;
					    	String errormessage_tOracleOutput_6;
							if (ne_tOracleOutput_6 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_6 = new java.sql.SQLException(e_tOracleOutput_6.getMessage() + "\ncaused by: " + ne_tOracleOutput_6.getMessage(), ne_tOracleOutput_6.getSQLState(), ne_tOracleOutput_6.getErrorCode(), ne_tOracleOutput_6);
								errormessage_tOracleOutput_6 = sqle_tOracleOutput_6.getMessage();
							}else{
								errormessage_tOracleOutput_6 = e_tOracleOutput_6.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_6);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_6 = pstmt_tOracleOutput_6.getUpdateCount();
                            insertedCount_tOracleOutput_6
                        += (tmp_batchUpdateCount_tOracleOutput_6!=-1?tmp_batchUpdateCount_tOracleOutput_6:0);
                        rowsToCommitCount_tOracleOutput_6 += (tmp_batchUpdateCount_tOracleOutput_6!=-1?tmp_batchUpdateCount_tOracleOutput_6:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_6 != 0){
                    	
                    }
                    conn_tOracleOutput_6.commit();
                    if(rowsToCommitCount_tOracleOutput_6 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_6 = 0;
                    }
                    commitCounter_tOracleOutput_6=0;
                    	batchSizeCounter_tOracleOutput_6=0;
                }

 


	tos_count_tOracleOutput_6++;

/**
 * [tOracleOutput_6 main ] stop
 */
	
	/**
	 * [tOracleOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	

 



/**
 * [tOracleOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	

 



/**
 * [tOracleOutput_6 process_data_end ] stop
 */

} // End of branch "InsHD"




// Start of branch "out2"
if(out2 != null) { 



	
	/**
	 * [tOracleOutput_12 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_12";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out2"
						
						);
					}
					



        whetherReject_tOracleOutput_12 = false;
                        pstmt_tOracleOutput_12.setBigDecimal(1, out2.ETAPASNORMATIVIDAD_ID);

                        pstmt_tOracleOutput_12.setBigDecimal(2, out2.DFACTURASERVICIO_ID);

                        pstmt_tOracleOutput_12.setBigDecimal(3, out2.USUARIOS_ID);

                        pstmt_tOracleOutput_12.setBigDecimal(4, out2.UORG_ID);

                        pstmt_tOracleOutput_12.setBigDecimal(5, out2.DFACTURAFORMULACION_ID);

                        pstmt_tOracleOutput_12.setBigDecimal(6, out2.VLGLOSADO);

                        pstmt_tOracleOutput_12.setBigDecimal(7, out2.HAUDITORIAS_ID);

                pstmt_tOracleOutput_12.addBatch();
                nb_line_tOracleOutput_12++;
                batchSizeCounter_tOracleOutput_12++;
            if (batchSize_tOracleOutput_12 > 0 &&  batchSize_tOracleOutput_12 <= batchSizeCounter_tOracleOutput_12) {
                try {
                    pstmt_tOracleOutput_12.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_12){
globalMap.put("tOracleOutput_12_ERROR_MESSAGE",e_tOracleOutput_12.getMessage());
			        java.sql.SQLException ne_tOracleOutput_12 = e_tOracleOutput_12.getNextException(),sqle_tOracleOutput_12=null;
			    	String errormessage_tOracleOutput_12;
					if (ne_tOracleOutput_12 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_12 = new java.sql.SQLException(e_tOracleOutput_12.getMessage() + "\ncaused by: " + ne_tOracleOutput_12.getMessage(), ne_tOracleOutput_12.getSQLState(), ne_tOracleOutput_12.getErrorCode(), ne_tOracleOutput_12);
						errormessage_tOracleOutput_12 = sqle_tOracleOutput_12.getMessage();
					}else{
						errormessage_tOracleOutput_12 = e_tOracleOutput_12.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_12);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_12 = pstmt_tOracleOutput_12.getUpdateCount();
                    insertedCount_tOracleOutput_12
                += (tmp_batchUpdateCount_tOracleOutput_12!=-1?tmp_batchUpdateCount_tOracleOutput_12:0);
                rowsToCommitCount_tOracleOutput_12 += (tmp_batchUpdateCount_tOracleOutput_12!=-1?tmp_batchUpdateCount_tOracleOutput_12:0);
                batchSizeCounter_tOracleOutput_12 = 0;
            }
                commitCounter_tOracleOutput_12++;
                if(commitEvery_tOracleOutput_12 <= commitCounter_tOracleOutput_12) {
                    if(batchSizeCounter_tOracleOutput_12 > 0) {
                        try {
                            pstmt_tOracleOutput_12.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_12){
globalMap.put("tOracleOutput_12_ERROR_MESSAGE",e_tOracleOutput_12.getMessage());
					        java.sql.SQLException ne_tOracleOutput_12 = e_tOracleOutput_12.getNextException(),sqle_tOracleOutput_12=null;
					    	String errormessage_tOracleOutput_12;
							if (ne_tOracleOutput_12 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_12 = new java.sql.SQLException(e_tOracleOutput_12.getMessage() + "\ncaused by: " + ne_tOracleOutput_12.getMessage(), ne_tOracleOutput_12.getSQLState(), ne_tOracleOutput_12.getErrorCode(), ne_tOracleOutput_12);
								errormessage_tOracleOutput_12 = sqle_tOracleOutput_12.getMessage();
							}else{
								errormessage_tOracleOutput_12 = e_tOracleOutput_12.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_12);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_12 = pstmt_tOracleOutput_12.getUpdateCount();
                            insertedCount_tOracleOutput_12
                        += (tmp_batchUpdateCount_tOracleOutput_12!=-1?tmp_batchUpdateCount_tOracleOutput_12:0);
                        rowsToCommitCount_tOracleOutput_12 += (tmp_batchUpdateCount_tOracleOutput_12!=-1?tmp_batchUpdateCount_tOracleOutput_12:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_12 != 0){
                    	
                    }
                    conn_tOracleOutput_12.commit();
                    if(rowsToCommitCount_tOracleOutput_12 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_12 = 0;
                    }
                    commitCounter_tOracleOutput_12=0;
                    	batchSizeCounter_tOracleOutput_12=0;
                }

 


	tos_count_tOracleOutput_12++;

/**
 * [tOracleOutput_12 main ] stop
 */
	
	/**
	 * [tOracleOutput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_12";
	
	

 



/**
 * [tOracleOutput_12 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_12";
	
	

 



/**
 * [tOracleOutput_12 process_data_end ] stop
 */

} // End of branch "out2"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

}
}finally{
	if (rs_tOracleInput_2 != null) {
		rs_tOracleInput_2.close();
	}
	if (stmt_tOracleInput_2 != null) {
		stmt_tOracleInput_2.close();
	}
	if(conn_tOracleInput_2 != null && !conn_tOracleInput_2.isClosed()) {
	
			conn_tOracleInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tOracleInput_2_NB_LINE",nb_line_tOracleInput_2);
 

ok_Hash.put("tOracleInput_2", true);
end_Hash.put("tOracleInput_2", System.currentTimeMillis());




/**
 * [tOracleInput_2 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row13 != null) {
						tHash_Lookup_row13.endGet();
					}
					globalMap.remove( "tHash_Lookup_row13" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tOracleOutput_6 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_6 > 0) {
            try {
            	if (pstmt_tOracleOutput_6 != null) {
					
					pstmt_tOracleOutput_6.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_6){
globalMap.put("tOracleOutput_6_ERROR_MESSAGE",e_tOracleOutput_6.getMessage());
		        java.sql.SQLException ne_tOracleOutput_6 = e_tOracleOutput_6.getNextException(),sqle_tOracleOutput_6=null;
		    	String errormessage_tOracleOutput_6;
				if (ne_tOracleOutput_6 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_6 = new java.sql.SQLException(e_tOracleOutput_6.getMessage() + "\ncaused by: " + ne_tOracleOutput_6.getMessage(), ne_tOracleOutput_6.getSQLState(), ne_tOracleOutput_6.getErrorCode(), ne_tOracleOutput_6);
					errormessage_tOracleOutput_6 = sqle_tOracleOutput_6.getMessage();
				}else{
					errormessage_tOracleOutput_6 = e_tOracleOutput_6.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_6);
            	
        	}
        	if (pstmt_tOracleOutput_6 != null) {
            	tmp_batchUpdateCount_tOracleOutput_6 = pstmt_tOracleOutput_6.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_6
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_6!=-1?tmp_batchUpdateCount_tOracleOutput_6:0);
				rowsToCommitCount_tOracleOutput_6 += (tmp_batchUpdateCount_tOracleOutput_6!=-1?tmp_batchUpdateCount_tOracleOutput_6:0);
            }
        }
        if(pstmt_tOracleOutput_6 != null) {
			
				pstmt_tOracleOutput_6.close();
				resourceMap.remove("pstmt_tOracleOutput_6");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_6", true);
		if(commitCounter_tOracleOutput_6 > 0 && rowsToCommitCount_tOracleOutput_6 != 0) {
			
		}
		conn_tOracleOutput_6.commit();
		if(commitCounter_tOracleOutput_6 > 0 && rowsToCommitCount_tOracleOutput_6 != 0) {
			
			rowsToCommitCount_tOracleOutput_6 = 0;
		}
		commitCounter_tOracleOutput_6 = 0;
		
		
		conn_tOracleOutput_6 .close();
		
		resourceMap.put("finish_tOracleOutput_6", true);
   	

	
	nb_line_deleted_tOracleOutput_6=nb_line_deleted_tOracleOutput_6+ deletedCount_tOracleOutput_6;
	nb_line_update_tOracleOutput_6=nb_line_update_tOracleOutput_6 + updatedCount_tOracleOutput_6;
	nb_line_inserted_tOracleOutput_6=nb_line_inserted_tOracleOutput_6 + insertedCount_tOracleOutput_6;
	nb_line_rejected_tOracleOutput_6=nb_line_rejected_tOracleOutput_6 + rejectedCount_tOracleOutput_6;
	
        globalMap.put("tOracleOutput_6_NB_LINE",nb_line_tOracleOutput_6);
        globalMap.put("tOracleOutput_6_NB_LINE_UPDATED",nb_line_update_tOracleOutput_6);
        globalMap.put("tOracleOutput_6_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_6);
        globalMap.put("tOracleOutput_6_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_6);
        globalMap.put("tOracleOutput_6_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_6);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"InsHD");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_6", true);
end_Hash.put("tOracleOutput_6", System.currentTimeMillis());




/**
 * [tOracleOutput_6 end ] stop
 */




	
	/**
	 * [tOracleOutput_12 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_12";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_12 > 0) {
            try {
            	if (pstmt_tOracleOutput_12 != null) {
					
					pstmt_tOracleOutput_12.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_12){
globalMap.put("tOracleOutput_12_ERROR_MESSAGE",e_tOracleOutput_12.getMessage());
		        java.sql.SQLException ne_tOracleOutput_12 = e_tOracleOutput_12.getNextException(),sqle_tOracleOutput_12=null;
		    	String errormessage_tOracleOutput_12;
				if (ne_tOracleOutput_12 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_12 = new java.sql.SQLException(e_tOracleOutput_12.getMessage() + "\ncaused by: " + ne_tOracleOutput_12.getMessage(), ne_tOracleOutput_12.getSQLState(), ne_tOracleOutput_12.getErrorCode(), ne_tOracleOutput_12);
					errormessage_tOracleOutput_12 = sqle_tOracleOutput_12.getMessage();
				}else{
					errormessage_tOracleOutput_12 = e_tOracleOutput_12.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_12);
            	
        	}
        	if (pstmt_tOracleOutput_12 != null) {
            	tmp_batchUpdateCount_tOracleOutput_12 = pstmt_tOracleOutput_12.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_12
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_12!=-1?tmp_batchUpdateCount_tOracleOutput_12:0);
				rowsToCommitCount_tOracleOutput_12 += (tmp_batchUpdateCount_tOracleOutput_12!=-1?tmp_batchUpdateCount_tOracleOutput_12:0);
            }
        }
        if(pstmt_tOracleOutput_12 != null) {
			
				pstmt_tOracleOutput_12.close();
				resourceMap.remove("pstmt_tOracleOutput_12");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_12", true);
		if(commitCounter_tOracleOutput_12 > 0 && rowsToCommitCount_tOracleOutput_12 != 0) {
			
		}
		conn_tOracleOutput_12.commit();
		if(commitCounter_tOracleOutput_12 > 0 && rowsToCommitCount_tOracleOutput_12 != 0) {
			
			rowsToCommitCount_tOracleOutput_12 = 0;
		}
		commitCounter_tOracleOutput_12 = 0;
		
		
		conn_tOracleOutput_12 .close();
		
		resourceMap.put("finish_tOracleOutput_12", true);
   	

	
	nb_line_deleted_tOracleOutput_12=nb_line_deleted_tOracleOutput_12+ deletedCount_tOracleOutput_12;
	nb_line_update_tOracleOutput_12=nb_line_update_tOracleOutput_12 + updatedCount_tOracleOutput_12;
	nb_line_inserted_tOracleOutput_12=nb_line_inserted_tOracleOutput_12 + insertedCount_tOracleOutput_12;
	nb_line_rejected_tOracleOutput_12=nb_line_rejected_tOracleOutput_12 + rejectedCount_tOracleOutput_12;
	
        globalMap.put("tOracleOutput_12_NB_LINE",nb_line_tOracleOutput_12);
        globalMap.put("tOracleOutput_12_NB_LINE_UPDATED",nb_line_update_tOracleOutput_12);
        globalMap.put("tOracleOutput_12_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_12);
        globalMap.put("tOracleOutput_12_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_12);
        globalMap.put("tOracleOutput_12_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_12);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out2");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_12", true);
end_Hash.put("tOracleOutput_12", System.currentTimeMillis());




/**
 * [tOracleOutput_12 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tOracleInput_10Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row13"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tOracleOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_6") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_6 = null;
                if ((pstmtToClose_tOracleOutput_6 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_6")) != null) {
                    pstmtToClose_tOracleOutput_6.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_6") == null){
            java.sql.Connection ctn_tOracleOutput_6 = null;
            if((ctn_tOracleOutput_6 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_6")) != null){
                try {
                    ctn_tOracleOutput_6.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_6) {
                    String errorMessage_tOracleOutput_6 = "failed to close the connection in tOracleOutput_6 :" + sqlEx_tOracleOutput_6.getMessage();
                    System.err.println(errorMessage_tOracleOutput_6);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_6 finally ] stop
 */




	
	/**
	 * [tOracleOutput_12 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_12";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_12") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_12 = null;
                if ((pstmtToClose_tOracleOutput_12 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_12")) != null) {
                    pstmtToClose_tOracleOutput_12.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_12") == null){
            java.sql.Connection ctn_tOracleOutput_12 = null;
            if((ctn_tOracleOutput_12 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_12")) != null){
                try {
                    ctn_tOracleOutput_12.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_12) {
                    String errorMessage_tOracleOutput_12 = "failed to close the connection in tOracleOutput_12 :" + sqlEx_tOracleOutput_12.getMessage();
                    System.err.println(errorMessage_tOracleOutput_12);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_12 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class UPFAStruct implements routines.system.IPersistableRow<UPFAStruct> {
    final static byte[] commonByteArrayLock_ACM_INICIAL_Inicial = new byte[0];
    static byte[] commonByteArray_ACM_INICIAL_Inicial = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "SALUDSIS\".\"ISEQ$$_102011\".nextval";
				
				}
				public String IDComment(){
				
				    return "PK - LLave primaria";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal VSOPORTADO;

				public BigDecimal getVSOPORTADO () {
					return this.VSOPORTADO;
				}

				public Boolean VSOPORTADOIsNullable(){
				    return true;
				}
				public Boolean VSOPORTADOIsKey(){
				    return false;
				}
				public Integer VSOPORTADOLength(){
				    return 0;
				}
				public Integer VSOPORTADOPrecision(){
				    return null;
				}
				public String VSOPORTADODefault(){
				
					return "0";
				
				}
				public String VSOPORTADOComment(){
				
				    return "Valor con soportes";
				
				}
				public String VSOPORTADOPattern(){
				
					return "";
				
				}
				public String VSOPORTADOOriginalDbColumnName(){
				
					return "VSOPORTADO";
				
				}

				
			    public BigDecimal VACEPTADO;

				public BigDecimal getVACEPTADO () {
					return this.VACEPTADO;
				}

				public Boolean VACEPTADOIsNullable(){
				    return true;
				}
				public Boolean VACEPTADOIsKey(){
				    return false;
				}
				public Integer VACEPTADOLength(){
				    return 0;
				}
				public Integer VACEPTADOPrecision(){
				    return null;
				}
				public String VACEPTADODefault(){
				
					return "0";
				
				}
				public String VACEPTADOComment(){
				
				    return "Valor Aceptado";
				
				}
				public String VACEPTADOPattern(){
				
					return "";
				
				}
				public String VACEPTADOOriginalDbColumnName(){
				
					return "VACEPTADO";
				
				}

				
			    public BigDecimal VRATIFICADO;

				public BigDecimal getVRATIFICADO () {
					return this.VRATIFICADO;
				}

				public Boolean VRATIFICADOIsNullable(){
				    return true;
				}
				public Boolean VRATIFICADOIsKey(){
				    return false;
				}
				public Integer VRATIFICADOLength(){
				    return 0;
				}
				public Integer VRATIFICADOPrecision(){
				    return null;
				}
				public String VRATIFICADODefault(){
				
					return "0";
				
				}
				public String VRATIFICADOComment(){
				
				    return "Valor Ratificado";
				
				}
				public String VRATIFICADOPattern(){
				
					return "";
				
				}
				public String VRATIFICADOOriginalDbColumnName(){
				
					return "VRATIFICADO";
				
				}

				
			    public BigDecimal VAVALPAGO;

				public BigDecimal getVAVALPAGO () {
					return this.VAVALPAGO;
				}

				public Boolean VAVALPAGOIsNullable(){
				    return true;
				}
				public Boolean VAVALPAGOIsKey(){
				    return false;
				}
				public Integer VAVALPAGOLength(){
				    return 0;
				}
				public Integer VAVALPAGOPrecision(){
				    return null;
				}
				public String VAVALPAGODefault(){
				
					return "0";
				
				}
				public String VAVALPAGOComment(){
				
				    return "Valor con aval de Pago";
				
				}
				public String VAVALPAGOPattern(){
				
					return "";
				
				}
				public String VAVALPAGOOriginalDbColumnName(){
				
					return "VAVALPAGO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final UPFAStruct other = (UPFAStruct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(UPFAStruct other) {

		other.ID = this.ID;
	            other.VSOPORTADO = this.VSOPORTADO;
	            other.VACEPTADO = this.VACEPTADO;
	            other.VRATIFICADO = this.VRATIFICADO;
	            other.VAVALPAGO = this.VAVALPAGO;
	            
	}

	public void copyKeysDataTo(UPFAStruct other) {

		other.ID = this.ID;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAVALPAGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VAVALPAGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",VSOPORTADO="+String.valueOf(VSOPORTADO));
		sb.append(",VACEPTADO="+String.valueOf(VACEPTADO));
		sb.append(",VRATIFICADO="+String.valueOf(VRATIFICADO));
		sb.append(",VAVALPAGO="+String.valueOf(VAVALPAGO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(UPFAStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
    final static byte[] commonByteArrayLock_ACM_INICIAL_Inicial = new byte[0];
    static byte[] commonByteArray_ACM_INICIAL_Inicial = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal VSOPORTADO;

				public BigDecimal getVSOPORTADO () {
					return this.VSOPORTADO;
				}

				public Boolean VSOPORTADOIsNullable(){
				    return true;
				}
				public Boolean VSOPORTADOIsKey(){
				    return false;
				}
				public Integer VSOPORTADOLength(){
				    return 0;
				}
				public Integer VSOPORTADOPrecision(){
				    return 0;
				}
				public String VSOPORTADODefault(){
				
					return "";
				
				}
				public String VSOPORTADOComment(){
				
				    return "";
				
				}
				public String VSOPORTADOPattern(){
				
					return "";
				
				}
				public String VSOPORTADOOriginalDbColumnName(){
				
					return "VSOPORTADO";
				
				}

				
			    public BigDecimal VACEPTADO;

				public BigDecimal getVACEPTADO () {
					return this.VACEPTADO;
				}

				public Boolean VACEPTADOIsNullable(){
				    return true;
				}
				public Boolean VACEPTADOIsKey(){
				    return false;
				}
				public Integer VACEPTADOLength(){
				    return 0;
				}
				public Integer VACEPTADOPrecision(){
				    return 0;
				}
				public String VACEPTADODefault(){
				
					return "";
				
				}
				public String VACEPTADOComment(){
				
				    return "";
				
				}
				public String VACEPTADOPattern(){
				
					return "";
				
				}
				public String VACEPTADOOriginalDbColumnName(){
				
					return "VACEPTADO";
				
				}

				
			    public BigDecimal VAVALPAGO;

				public BigDecimal getVAVALPAGO () {
					return this.VAVALPAGO;
				}

				public Boolean VAVALPAGOIsNullable(){
				    return true;
				}
				public Boolean VAVALPAGOIsKey(){
				    return false;
				}
				public Integer VAVALPAGOLength(){
				    return 0;
				}
				public Integer VAVALPAGOPrecision(){
				    return 0;
				}
				public String VAVALPAGODefault(){
				
					return "";
				
				}
				public String VAVALPAGOComment(){
				
				    return "";
				
				}
				public String VAVALPAGOPattern(){
				
					return "";
				
				}
				public String VAVALPAGOOriginalDbColumnName(){
				
					return "VAVALPAGO";
				
				}

				
			    public BigDecimal VRATIFICADO;

				public BigDecimal getVRATIFICADO () {
					return this.VRATIFICADO;
				}

				public Boolean VRATIFICADOIsNullable(){
				    return true;
				}
				public Boolean VRATIFICADOIsKey(){
				    return false;
				}
				public Integer VRATIFICADOLength(){
				    return 0;
				}
				public Integer VRATIFICADOPrecision(){
				    return null;
				}
				public String VRATIFICADODefault(){
				
					return "";
				
				}
				public String VRATIFICADOComment(){
				
				    return "";
				
				}
				public String VRATIFICADOPattern(){
				
					return "";
				
				}
				public String VRATIFICADOOriginalDbColumnName(){
				
					return "VRATIFICADO";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAVALPAGO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRATIFICADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VAVALPAGO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VRATIFICADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",VSOPORTADO="+String.valueOf(VSOPORTADO));
		sb.append(",VACEPTADO="+String.valueOf(VACEPTADO));
		sb.append(",VAVALPAGO="+String.valueOf(VAVALPAGO));
		sb.append(",VRATIFICADO="+String.valueOf(VRATIFICADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row22Struct row22 = new row22Struct();
UPFAStruct UPFA = new UPFAStruct();





	
	/**
	 * [tOracleOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_7", false);
		start_Hash.put("tOracleOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"UPFA");
					}
				
		int tos_count_tOracleOutput_7 = 0;
		






        int updateKeyCount_tOracleOutput_7 = 1;
        if(updateKeyCount_tOracleOutput_7 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_7 == 5 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_7 = 0;
    int nb_line_update_tOracleOutput_7 = 0;
    int nb_line_inserted_tOracleOutput_7 = 0;
    int nb_line_deleted_tOracleOutput_7 = 0;
    int nb_line_rejected_tOracleOutput_7 = 0;

    int tmp_batchUpdateCount_tOracleOutput_7 = 0;

    int deletedCount_tOracleOutput_7=0;
    int updatedCount_tOracleOutput_7=0;
    int insertedCount_tOracleOutput_7=0;
    int rowsToCommitCount_tOracleOutput_7=0;
    int rejectedCount_tOracleOutput_7=0;

    boolean whetherReject_tOracleOutput_7 = false;

    java.sql.Connection conn_tOracleOutput_7 = null;

    //optional table
    String dbschema_tOracleOutput_7 = null;
    String tableName_tOracleOutput_7 = null;
                    String driverClass_tOracleOutput_7 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_7);
                String url_tOracleOutput_7 = null;
                    url_tOracleOutput_7 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
                String dbUser_tOracleOutput_7 = context.db_origen_Login;

	final String decryptedPassword_tOracleOutput_7 = context.db_origen_Password; 

                String dbPwd_tOracleOutput_7 = decryptedPassword_tOracleOutput_7;
                dbschema_tOracleOutput_7 = context.db_origen_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_7 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_7.put("user",dbUser_tOracleOutput_7);
                    atnParamsPrope_tOracleOutput_7.put("password",dbPwd_tOracleOutput_7);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_7.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_7 = java.sql.DriverManager.getConnection(url_tOracleOutput_7, atnParamsPrope_tOracleOutput_7);
        resourceMap.put("conn_tOracleOutput_7", conn_tOracleOutput_7);
            conn_tOracleOutput_7.setAutoCommit(false);
            int commitEvery_tOracleOutput_7 = 10000;
            int commitCounter_tOracleOutput_7 = 0;
        int batchSize_tOracleOutput_7 = 10000;
        int batchSizeCounter_tOracleOutput_7=0;
        int count_tOracleOutput_7=0;

        if(dbschema_tOracleOutput_7 == null || dbschema_tOracleOutput_7.trim().length() == 0) {
            tableName_tOracleOutput_7 = ("ACM_FACTURA");
        } else {
            tableName_tOracleOutput_7 = dbschema_tOracleOutput_7 + "." + ("ACM_FACTURA");
        }
                String update_tOracleOutput_7 = "UPDATE " + tableName_tOracleOutput_7 + " SET VSOPORTADO = ?,VACEPTADO = ?,VRATIFICADO = ?,VAVALPAGO = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_7 = conn_tOracleOutput_7.prepareStatement(update_tOracleOutput_7);
                resourceMap.put("pstmt_tOracleOutput_7", pstmt_tOracleOutput_7);





 



/**
 * [tOracleOutput_7 begin ] stop
 */



	
	/**
	 * [tMap_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_10", false);
		start_Hash.put("tMap_10", System.currentTimeMillis());
		
	
	currentComponent="tMap_10";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row22");
					}
				
		int tos_count_tMap_10 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_10__Struct  {
}
Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
// ###############################

// ###############################
// # Outputs initialization
UPFAStruct UPFA_tmp = new UPFAStruct();
// ###############################

        
        



        









 



/**
 * [tMap_10 begin ] stop
 */



	
	/**
	 * [tOracleInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_10", false);
		start_Hash.put("tOracleInput_10", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_10";
	
	
		int tos_count_tOracleInput_10 = 0;
		
	


	
		    int nb_line_tOracleInput_10 = 0;
		    java.sql.Connection conn_tOracleInput_10 = null;
				String driverClass_tOracleInput_10 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_10);
				
			String url_tOracleInput_10 = null;
				url_tOracleInput_10 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";

				String dbUser_tOracleInput_10 = context.db_origen_Login;

				

				
	final String decryptedPassword_tOracleInput_10 = context.db_origen_Password; 

				String dbPwd_tOracleInput_10 = decryptedPassword_tOracleInput_10;

				
					java.util.Properties atnParamsPrope_tOracleInput_10 = new java.util.Properties();
					atnParamsPrope_tOracleInput_10.put("user",dbUser_tOracleInput_10);
					atnParamsPrope_tOracleInput_10.put("password",dbPwd_tOracleInput_10);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleInput_10.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
					conn_tOracleInput_10 = java.sql.DriverManager.getConnection(url_tOracleInput_10, atnParamsPrope_tOracleInput_10);
				java.sql.Statement stmtGetTZ_tOracleInput_10 = conn_tOracleInput_10.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_10 = stmtGetTZ_tOracleInput_10.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_10 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_10.next()) {
					sessionTimezone_tOracleInput_10 = rsGetTZ_tOracleInput_10.getString(1);
				}
                                if (!(conn_tOracleInput_10 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_10.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_10.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_10.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_10);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_10).setSessionTimeZone(sessionTimezone_tOracleInput_10);
                                }
		    
			java.sql.Statement stmt_tOracleInput_10 = conn_tOracleInput_10.createStatement();

		    String dbquery_tOracleInput_10 = "SELECT\nFA.ID,\nSUM(CASE WHEN ENG.RESPONSABLE  = 'AUDITOR' OR HAU.TIPO = 'Conciliación' THEN HFA.VSOPORTADO ELSE 0 END)"
+" AS VSOPORTADO, \nSUM(CASE WHEN ENG.RESPONSABLE  = 'AUDITOR' OR HAU.TIPO = 'Conciliación' THEN HFA.VACEPTADO ELSE 0 END)"
+" AS VACEPTADO, \nSUM(CASE WHEN ENG.RESPONSABLE  = 'AUDITOR' OR HAU.TIPO = 'Conciliación' THEN HFA.VAVALPAGO ELSE 0 END) "
+"AS VAVALPAGO,\nHFAUL.VRATIFICADO\nFROM ACM_AUDITORIAS AU \nINNER JOIN ACM_HAUDITORIAS HA ON HA.ID = AU.HAUDITORIAS_ID\nI"
+"NNER JOIN ACM_ESTAUDITORIAS ES ON ES.ID = HA.ESTAUDITORIA_ID\nINNER JOIN ACM_ETAPASNORMATIVIDAD EN ON EN.ID = HA.ETAPASN"
+"ORMATIVIDAD_ID AND EN.ESTREGISTRO_ID = 1\nINNER JOIN ACM_FACTURA FA ON FA.RECEPCION_ID = AU.RECEPCION_ID\nINNER JOIN ACM"
+"_HFACTURAS HFA ON HFA.FACTURA_ID = FA.ID AND HFA.ESTREGISTRO_ID = 1\nINNER JOIN ACM_ETAPASNORMATIVIDAD ENG ON ENG.ID = H"
+"FA.ETAPASNORMATIVIDAD_ID AND ENG.ESTREGISTRO_ID = 1\nINNER JOIN ACM_HAUDITORIAS HAU ON HAU.ID = HFA.HAUDITORIAS_ID\nINNE"
+"R JOIN ACM_HFACTURAS HFAUL ON HFAUL.ID = (SELECT MAX(FF.ID) FROM ACM_HFACTURAS FF\n                                     "
+"        INNER JOIN ACM_ETAPASNORMATIVIDAD EP ON EP.ID = FF.ETAPASNORMATIVIDAD_ID AND EP.ESTREGISTRO_ID = 1\n            "
+"                                 INNER JOIN ACM_HAUDITORIAS IAS ON IAS.ID = FF.HAUDITORIAS_ID\n                         "
+"                    WHERE \n                                             FF.FACTURA_ID = FA.ID\n                        "
+"                      AND (EP.RESPONSABLE  = 'AUDITOR' OR IAS.TIPO = 'Conciliación') )\nWHERE \nES.NOMBRE = 'Finalizada'"
+"\nAND HA.VLGOSADO <> 0\nAND (HA.EJECUCION = 0 OR HA.EJECUCION IS NULL )\nAND ((EN.CODIGO = 1 AND HA.VLGOSADO <> 0) OR\n "
+"    (((EN.CODIGO <> 1 AND EN.RESPONSABLE = 'PRESTADOR' AND HA.TIPO <> 'Conciliación') OR (HA.TIPO = 'Conciliación' AND H"
+"A.VRATIFICADO <> 0))) OR\n     (EN.RESPONSABLE = 'AUDITOR' AND EN.CODIGO <> 1 AND HA.VRATIFICADO <> 0) OR\n      ((HA.VR"
+"ATIFICADO = 0 OR (HA.VRATIFICADO = 0 AND HA.VLGOSADO = 0 AND EN.CODIGO = 1)) AND (EN.RESPONSABLE = 'AUDITOR' OR HA.TIPO "
+"= 'Conciliación')))\nGROUP BY FA.ID, HFAUL.VRATIFICADO";
		    

		    globalMap.put("tOracleInput_10_QUERY",dbquery_tOracleInput_10);

		    java.sql.ResultSet rs_tOracleInput_10 = null;

		    try {
		    	rs_tOracleInput_10 = stmt_tOracleInput_10.executeQuery(dbquery_tOracleInput_10);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_10 = rs_tOracleInput_10.getMetaData();
		    	int colQtyInRs_tOracleInput_10 = rsmd_tOracleInput_10.getColumnCount();

		    String tmpContent_tOracleInput_10 = null;
		    
		    
		    while (rs_tOracleInput_10.next()) {
		        nb_line_tOracleInput_10++;
		        
							if(colQtyInRs_tOracleInput_10 < 1) {
								row22.ID = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(1) != null) {
						row22.ID = rs_tOracleInput_10.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 2) {
								row22.VSOPORTADO = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(2) != null) {
						row22.VSOPORTADO = rs_tOracleInput_10.getBigDecimal(2);
					} else {
				
						row22.VSOPORTADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 3) {
								row22.VACEPTADO = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(3) != null) {
						row22.VACEPTADO = rs_tOracleInput_10.getBigDecimal(3);
					} else {
				
						row22.VACEPTADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 4) {
								row22.VAVALPAGO = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(4) != null) {
						row22.VAVALPAGO = rs_tOracleInput_10.getBigDecimal(4);
					} else {
				
						row22.VAVALPAGO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 5) {
								row22.VRATIFICADO = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(5) != null) {
						row22.VRATIFICADO = rs_tOracleInput_10.getBigDecimal(5);
					} else {
				
						row22.VRATIFICADO = null;
					}
		                    }
					




 



/**
 * [tOracleInput_10 begin ] stop
 */
	
	/**
	 * [tOracleInput_10 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 


	tos_count_tOracleInput_10++;

/**
 * [tOracleInput_10 main ] stop
 */
	
	/**
	 * [tOracleInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 



/**
 * [tOracleInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tMap_10 main ] start
	 */

	

	
	
	currentComponent="tMap_10";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row22"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_10 = false;
		boolean mainRowRejected_tMap_10 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_10__Struct Var = Var__tMap_10;// ###############################
        // ###############################
        // # Output tables

UPFA = null;


// # Output table : 'UPFA'
UPFA_tmp.ID = row22.ID ;
UPFA_tmp.VSOPORTADO = row22.VSOPORTADO ;
UPFA_tmp.VACEPTADO = row22.VACEPTADO ;
UPFA_tmp.VRATIFICADO = row22.VRATIFICADO ;
UPFA_tmp.VAVALPAGO = row22.VAVALPAGO ;
UPFA = UPFA_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_10 = false;










 


	tos_count_tMap_10++;

/**
 * [tMap_10 main ] stop
 */
	
	/**
	 * [tMap_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_10";
	
	

 



/**
 * [tMap_10 process_data_begin ] stop
 */
// Start of branch "UPFA"
if(UPFA != null) { 



	
	/**
	 * [tOracleOutput_7 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"UPFA"
						
						);
					}
					



        whetherReject_tOracleOutput_7 = false;
                    pstmt_tOracleOutput_7.setBigDecimal(1, UPFA.VSOPORTADO);

                    pstmt_tOracleOutput_7.setBigDecimal(2, UPFA.VACEPTADO);

                    pstmt_tOracleOutput_7.setBigDecimal(3, UPFA.VRATIFICADO);

                    pstmt_tOracleOutput_7.setBigDecimal(4, UPFA.VAVALPAGO);


                    pstmt_tOracleOutput_7.setBigDecimal(5 + count_tOracleOutput_7, UPFA.ID);

                pstmt_tOracleOutput_7.addBatch();
                nb_line_tOracleOutput_7++;
                batchSizeCounter_tOracleOutput_7++;
            if (batchSize_tOracleOutput_7 > 0 &&  batchSize_tOracleOutput_7 <= batchSizeCounter_tOracleOutput_7) {
                try {
                    pstmt_tOracleOutput_7.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_7){
globalMap.put("tOracleOutput_7_ERROR_MESSAGE",e_tOracleOutput_7.getMessage());
			        java.sql.SQLException ne_tOracleOutput_7 = e_tOracleOutput_7.getNextException(),sqle_tOracleOutput_7=null;
			    	String errormessage_tOracleOutput_7;
					if (ne_tOracleOutput_7 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_7 = new java.sql.SQLException(e_tOracleOutput_7.getMessage() + "\ncaused by: " + ne_tOracleOutput_7.getMessage(), ne_tOracleOutput_7.getSQLState(), ne_tOracleOutput_7.getErrorCode(), ne_tOracleOutput_7);
						errormessage_tOracleOutput_7 = sqle_tOracleOutput_7.getMessage();
					}else{
						errormessage_tOracleOutput_7 = e_tOracleOutput_7.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_7);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_7 = pstmt_tOracleOutput_7.getUpdateCount();
                    updatedCount_tOracleOutput_7
                += (tmp_batchUpdateCount_tOracleOutput_7!=-1?tmp_batchUpdateCount_tOracleOutput_7:0);
                rowsToCommitCount_tOracleOutput_7 += (tmp_batchUpdateCount_tOracleOutput_7!=-1?tmp_batchUpdateCount_tOracleOutput_7:0);
                batchSizeCounter_tOracleOutput_7 = 0;
            }
                commitCounter_tOracleOutput_7++;
                if(commitEvery_tOracleOutput_7 <= commitCounter_tOracleOutput_7) {
                    if(batchSizeCounter_tOracleOutput_7 > 0) {
                        try {
                            pstmt_tOracleOutput_7.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_7){
globalMap.put("tOracleOutput_7_ERROR_MESSAGE",e_tOracleOutput_7.getMessage());
					        java.sql.SQLException ne_tOracleOutput_7 = e_tOracleOutput_7.getNextException(),sqle_tOracleOutput_7=null;
					    	String errormessage_tOracleOutput_7;
							if (ne_tOracleOutput_7 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_7 = new java.sql.SQLException(e_tOracleOutput_7.getMessage() + "\ncaused by: " + ne_tOracleOutput_7.getMessage(), ne_tOracleOutput_7.getSQLState(), ne_tOracleOutput_7.getErrorCode(), ne_tOracleOutput_7);
								errormessage_tOracleOutput_7 = sqle_tOracleOutput_7.getMessage();
							}else{
								errormessage_tOracleOutput_7 = e_tOracleOutput_7.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_7);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_7 = pstmt_tOracleOutput_7.getUpdateCount();
                            updatedCount_tOracleOutput_7
                        += (tmp_batchUpdateCount_tOracleOutput_7!=-1?tmp_batchUpdateCount_tOracleOutput_7:0);
                        rowsToCommitCount_tOracleOutput_7 += (tmp_batchUpdateCount_tOracleOutput_7!=-1?tmp_batchUpdateCount_tOracleOutput_7:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_7 != 0){
                    	
                    }
                    conn_tOracleOutput_7.commit();
                    if(rowsToCommitCount_tOracleOutput_7 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_7 = 0;
                    }
                    commitCounter_tOracleOutput_7=0;
                    	batchSizeCounter_tOracleOutput_7=0;
                }

 


	tos_count_tOracleOutput_7++;

/**
 * [tOracleOutput_7 main ] stop
 */
	
	/**
	 * [tOracleOutput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_7";
	
	

 



/**
 * [tOracleOutput_7 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_7";
	
	

 



/**
 * [tOracleOutput_7 process_data_end ] stop
 */

} // End of branch "UPFA"




	
	/**
	 * [tMap_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_10";
	
	

 



/**
 * [tMap_10 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 



/**
 * [tOracleInput_10 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_10 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

}
}finally{
	if (rs_tOracleInput_10 != null) {
		rs_tOracleInput_10.close();
	}
	if (stmt_tOracleInput_10 != null) {
		stmt_tOracleInput_10.close();
	}
	if(conn_tOracleInput_10 != null && !conn_tOracleInput_10.isClosed()) {
	
			conn_tOracleInput_10.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tOracleInput_10_NB_LINE",nb_line_tOracleInput_10);
 

ok_Hash.put("tOracleInput_10", true);
end_Hash.put("tOracleInput_10", System.currentTimeMillis());




/**
 * [tOracleInput_10 end ] stop
 */

	
	/**
	 * [tMap_10 end ] start
	 */

	

	
	
	currentComponent="tMap_10";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row22");
			  	}
			  	
 

ok_Hash.put("tMap_10", true);
end_Hash.put("tMap_10", System.currentTimeMillis());




/**
 * [tMap_10 end ] stop
 */

	
	/**
	 * [tOracleOutput_7 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_7";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_7 > 0) {
            try {
            	if (pstmt_tOracleOutput_7 != null) {
					
					pstmt_tOracleOutput_7.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_7){
globalMap.put("tOracleOutput_7_ERROR_MESSAGE",e_tOracleOutput_7.getMessage());
		        java.sql.SQLException ne_tOracleOutput_7 = e_tOracleOutput_7.getNextException(),sqle_tOracleOutput_7=null;
		    	String errormessage_tOracleOutput_7;
				if (ne_tOracleOutput_7 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_7 = new java.sql.SQLException(e_tOracleOutput_7.getMessage() + "\ncaused by: " + ne_tOracleOutput_7.getMessage(), ne_tOracleOutput_7.getSQLState(), ne_tOracleOutput_7.getErrorCode(), ne_tOracleOutput_7);
					errormessage_tOracleOutput_7 = sqle_tOracleOutput_7.getMessage();
				}else{
					errormessage_tOracleOutput_7 = e_tOracleOutput_7.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_7);
            	
        	}
        	if (pstmt_tOracleOutput_7 != null) {
            	tmp_batchUpdateCount_tOracleOutput_7 = pstmt_tOracleOutput_7.getUpdateCount();
    	    	
    	    		updatedCount_tOracleOutput_7
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_7!=-1?tmp_batchUpdateCount_tOracleOutput_7:0);
				rowsToCommitCount_tOracleOutput_7 += (tmp_batchUpdateCount_tOracleOutput_7!=-1?tmp_batchUpdateCount_tOracleOutput_7:0);
            }
        }
        if(pstmt_tOracleOutput_7 != null) {
			
				pstmt_tOracleOutput_7.close();
				resourceMap.remove("pstmt_tOracleOutput_7");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_7", true);
		if(commitCounter_tOracleOutput_7 > 0 && rowsToCommitCount_tOracleOutput_7 != 0) {
			
		}
		conn_tOracleOutput_7.commit();
		if(commitCounter_tOracleOutput_7 > 0 && rowsToCommitCount_tOracleOutput_7 != 0) {
			
			rowsToCommitCount_tOracleOutput_7 = 0;
		}
		commitCounter_tOracleOutput_7 = 0;
		
		
		conn_tOracleOutput_7 .close();
		
		resourceMap.put("finish_tOracleOutput_7", true);
   	

	
	nb_line_deleted_tOracleOutput_7=nb_line_deleted_tOracleOutput_7+ deletedCount_tOracleOutput_7;
	nb_line_update_tOracleOutput_7=nb_line_update_tOracleOutput_7 + updatedCount_tOracleOutput_7;
	nb_line_inserted_tOracleOutput_7=nb_line_inserted_tOracleOutput_7 + insertedCount_tOracleOutput_7;
	nb_line_rejected_tOracleOutput_7=nb_line_rejected_tOracleOutput_7 + rejectedCount_tOracleOutput_7;
	
        globalMap.put("tOracleOutput_7_NB_LINE",nb_line_tOracleOutput_7);
        globalMap.put("tOracleOutput_7_NB_LINE_UPDATED",nb_line_update_tOracleOutput_7);
        globalMap.put("tOracleOutput_7_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_7);
        globalMap.put("tOracleOutput_7_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_7);
        globalMap.put("tOracleOutput_7_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_7);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"UPFA");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_7", true);
end_Hash.put("tOracleOutput_7", System.currentTimeMillis());




/**
 * [tOracleOutput_7 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_10:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk12", 0, "ok");
								} 
							
							tOracleInput_6Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_10 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 



/**
 * [tOracleInput_10 finally ] stop
 */

	
	/**
	 * [tMap_10 finally ] start
	 */

	

	
	
	currentComponent="tMap_10";
	
	

 



/**
 * [tMap_10 finally ] stop
 */

	
	/**
	 * [tOracleOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_7";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_7") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_7 = null;
                if ((pstmtToClose_tOracleOutput_7 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_7")) != null) {
                    pstmtToClose_tOracleOutput_7.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_7") == null){
            java.sql.Connection ctn_tOracleOutput_7 = null;
            if((ctn_tOracleOutput_7 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_7")) != null){
                try {
                    ctn_tOracleOutput_7.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_7) {
                    String errorMessage_tOracleOutput_7 = "failed to close the connection in tOracleOutput_7 :" + sqlEx_tOracleOutput_7.getMessage();
                    System.err.println(errorMessage_tOracleOutput_7);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_7 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_10_SUBPROCESS_STATE", 1);
	}
	


public static class InsHfacturasStruct implements routines.system.IPersistableRow<InsHfacturasStruct> {
    final static byte[] commonByteArrayLock_ACM_INICIAL_Inicial = new byte[0];
    static byte[] commonByteArray_ACM_INICIAL_Inicial = new byte[0];

	
			    public BigDecimal ETAPASNORMATIVIDAD_ID;

				public BigDecimal getETAPASNORMATIVIDAD_ID () {
					return this.ETAPASNORMATIVIDAD_ID;
				}

				public Boolean ETAPASNORMATIVIDAD_IDIsNullable(){
				    return false;
				}
				public Boolean ETAPASNORMATIVIDAD_IDIsKey(){
				    return false;
				}
				public Integer ETAPASNORMATIVIDAD_IDLength(){
				    return 0;
				}
				public Integer ETAPASNORMATIVIDAD_IDPrecision(){
				    return null;
				}
				public String ETAPASNORMATIVIDAD_IDDefault(){
				
					return null;
				
				}
				public String ETAPASNORMATIVIDAD_IDComment(){
				
				    return "FK - ACM_ETAPASNORMATIVIDAD";
				
				}
				public String ETAPASNORMATIVIDAD_IDPattern(){
				
					return "";
				
				}
				public String ETAPASNORMATIVIDAD_IDOriginalDbColumnName(){
				
					return "ETAPASNORMATIVIDAD_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return false;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return 0;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "FK - ACM_FACTURA";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return false;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 7;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return "'SYSDATE'";
				
				}
				public String FECHAComment(){
				
				    return "Fecha de registro";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 0;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return null;
				
				}
				public String USUARIOS_IDComment(){
				
				    return "FK - GEN_USUARIOS";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return null;
				
				}
				public String UORG_IDComment(){
				
				    return "FK - GEN_UORG";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal VGLOSADO;

				public BigDecimal getVGLOSADO () {
					return this.VGLOSADO;
				}

				public Boolean VGLOSADOIsNullable(){
				    return true;
				}
				public Boolean VGLOSADOIsKey(){
				    return false;
				}
				public Integer VGLOSADOLength(){
				    return 0;
				}
				public Integer VGLOSADOPrecision(){
				    return null;
				}
				public String VGLOSADODefault(){
				
					return "0";
				
				}
				public String VGLOSADOComment(){
				
				    return "Valor Glosado para la Etapa";
				
				}
				public String VGLOSADOPattern(){
				
					return "";
				
				}
				public String VGLOSADOOriginalDbColumnName(){
				
					return "VGLOSADO";
				
				}

				
			    public BigDecimal HAUDITORIAS_ID;

				public BigDecimal getHAUDITORIAS_ID () {
					return this.HAUDITORIAS_ID;
				}

				public Boolean HAUDITORIAS_IDIsNullable(){
				    return true;
				}
				public Boolean HAUDITORIAS_IDIsKey(){
				    return false;
				}
				public Integer HAUDITORIAS_IDLength(){
				    return 0;
				}
				public Integer HAUDITORIAS_IDPrecision(){
				    return null;
				}
				public String HAUDITORIAS_IDDefault(){
				
					return null;
				
				}
				public String HAUDITORIAS_IDComment(){
				
				    return "FK - ACM_HAUDITORIAS";
				
				}
				public String HAUDITORIAS_IDPattern(){
				
					return "";
				
				}
				public String HAUDITORIAS_IDOriginalDbColumnName(){
				
					return "HAUDITORIAS_ID";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ETAPASNORMATIVIDAD_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.HAUDITORIAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ETAPASNORMATIVIDAD_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.HAUDITORIAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ETAPASNORMATIVIDAD_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.HAUDITORIAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ETAPASNORMATIVIDAD_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.HAUDITORIAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ETAPASNORMATIVIDAD_ID="+String.valueOf(ETAPASNORMATIVIDAD_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",VGLOSADO="+String.valueOf(VGLOSADO));
		sb.append(",HAUDITORIAS_ID="+String.valueOf(HAUDITORIAS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(InsHfacturasStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_ACM_INICIAL_Inicial = new byte[0];
    static byte[] commonByteArray_ACM_INICIAL_Inicial = new byte[0];

	
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return 0;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return 0;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return "";
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public BigDecimal VGLOSADO_;

				public BigDecimal getVGLOSADO_ () {
					return this.VGLOSADO_;
				}

				public Boolean VGLOSADO_IsNullable(){
				    return true;
				}
				public Boolean VGLOSADO_IsKey(){
				    return false;
				}
				public Integer VGLOSADO_Length(){
				    return 0;
				}
				public Integer VGLOSADO_Precision(){
				    return 0;
				}
				public String VGLOSADO_Default(){
				
					return "";
				
				}
				public String VGLOSADO_Comment(){
				
				    return "";
				
				}
				public String VGLOSADO_Pattern(){
				
					return "";
				
				}
				public String VGLOSADO_OriginalDbColumnName(){
				
					return "VGLOSADO_";
				
				}

				
			    public BigDecimal VSOPORTADO;

				public BigDecimal getVSOPORTADO () {
					return this.VSOPORTADO;
				}

				public Boolean VSOPORTADOIsNullable(){
				    return true;
				}
				public Boolean VSOPORTADOIsKey(){
				    return false;
				}
				public Integer VSOPORTADOLength(){
				    return 0;
				}
				public Integer VSOPORTADOPrecision(){
				    return null;
				}
				public String VSOPORTADODefault(){
				
					return "";
				
				}
				public String VSOPORTADOComment(){
				
				    return "";
				
				}
				public String VSOPORTADOPattern(){
				
					return "";
				
				}
				public String VSOPORTADOOriginalDbColumnName(){
				
					return "VSOPORTADO";
				
				}

				
			    public BigDecimal VACEPTADO;

				public BigDecimal getVACEPTADO () {
					return this.VACEPTADO;
				}

				public Boolean VACEPTADOIsNullable(){
				    return true;
				}
				public Boolean VACEPTADOIsKey(){
				    return false;
				}
				public Integer VACEPTADOLength(){
				    return 0;
				}
				public Integer VACEPTADOPrecision(){
				    return null;
				}
				public String VACEPTADODefault(){
				
					return "";
				
				}
				public String VACEPTADOComment(){
				
				    return "";
				
				}
				public String VACEPTADOPattern(){
				
					return "";
				
				}
				public String VACEPTADOOriginalDbColumnName(){
				
					return "VACEPTADO";
				
				}

				
			    public BigDecimal VRATIFICADO;

				public BigDecimal getVRATIFICADO () {
					return this.VRATIFICADO;
				}

				public Boolean VRATIFICADOIsNullable(){
				    return true;
				}
				public Boolean VRATIFICADOIsKey(){
				    return false;
				}
				public Integer VRATIFICADOLength(){
				    return 0;
				}
				public Integer VRATIFICADOPrecision(){
				    return null;
				}
				public String VRATIFICADODefault(){
				
					return "";
				
				}
				public String VRATIFICADOComment(){
				
				    return "";
				
				}
				public String VRATIFICADOPattern(){
				
					return "";
				
				}
				public String VRATIFICADOOriginalDbColumnName(){
				
					return "VRATIFICADO";
				
				}

				
			    public BigDecimal VAVALPAGO;

				public BigDecimal getVAVALPAGO () {
					return this.VAVALPAGO;
				}

				public Boolean VAVALPAGOIsNullable(){
				    return true;
				}
				public Boolean VAVALPAGOIsKey(){
				    return false;
				}
				public Integer VAVALPAGOLength(){
				    return 0;
				}
				public Integer VAVALPAGOPrecision(){
				    return null;
				}
				public String VAVALPAGODefault(){
				
					return "";
				
				}
				public String VAVALPAGOComment(){
				
				    return "";
				
				}
				public String VAVALPAGOPattern(){
				
					return "";
				
				}
				public String VAVALPAGOOriginalDbColumnName(){
				
					return "VAVALPAGO";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
						this.VGLOSADO_ = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
						this.VGLOSADO_ = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VGLOSADO_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAVALPAGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VGLOSADO_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VAVALPAGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",VGLOSADO_="+String.valueOf(VGLOSADO_));
		sb.append(",VSOPORTADO="+String.valueOf(VSOPORTADO));
		sb.append(",VACEPTADO="+String.valueOf(VACEPTADO));
		sb.append(",VRATIFICADO="+String.valueOf(VRATIFICADO));
		sb.append(",VAVALPAGO="+String.valueOf(VAVALPAGO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_6Struct implements routines.system.IPersistableRow<after_tOracleInput_6Struct> {
    final static byte[] commonByteArrayLock_ACM_INICIAL_Inicial = new byte[0];
    static byte[] commonByteArray_ACM_INICIAL_Inicial = new byte[0];

	
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return 0;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return 0;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return "";
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public BigDecimal VGLOSADO_;

				public BigDecimal getVGLOSADO_ () {
					return this.VGLOSADO_;
				}

				public Boolean VGLOSADO_IsNullable(){
				    return true;
				}
				public Boolean VGLOSADO_IsKey(){
				    return false;
				}
				public Integer VGLOSADO_Length(){
				    return 0;
				}
				public Integer VGLOSADO_Precision(){
				    return 0;
				}
				public String VGLOSADO_Default(){
				
					return "";
				
				}
				public String VGLOSADO_Comment(){
				
				    return "";
				
				}
				public String VGLOSADO_Pattern(){
				
					return "";
				
				}
				public String VGLOSADO_OriginalDbColumnName(){
				
					return "VGLOSADO_";
				
				}

				
			    public BigDecimal VSOPORTADO;

				public BigDecimal getVSOPORTADO () {
					return this.VSOPORTADO;
				}

				public Boolean VSOPORTADOIsNullable(){
				    return true;
				}
				public Boolean VSOPORTADOIsKey(){
				    return false;
				}
				public Integer VSOPORTADOLength(){
				    return 0;
				}
				public Integer VSOPORTADOPrecision(){
				    return null;
				}
				public String VSOPORTADODefault(){
				
					return "";
				
				}
				public String VSOPORTADOComment(){
				
				    return "";
				
				}
				public String VSOPORTADOPattern(){
				
					return "";
				
				}
				public String VSOPORTADOOriginalDbColumnName(){
				
					return "VSOPORTADO";
				
				}

				
			    public BigDecimal VACEPTADO;

				public BigDecimal getVACEPTADO () {
					return this.VACEPTADO;
				}

				public Boolean VACEPTADOIsNullable(){
				    return true;
				}
				public Boolean VACEPTADOIsKey(){
				    return false;
				}
				public Integer VACEPTADOLength(){
				    return 0;
				}
				public Integer VACEPTADOPrecision(){
				    return null;
				}
				public String VACEPTADODefault(){
				
					return "";
				
				}
				public String VACEPTADOComment(){
				
				    return "";
				
				}
				public String VACEPTADOPattern(){
				
					return "";
				
				}
				public String VACEPTADOOriginalDbColumnName(){
				
					return "VACEPTADO";
				
				}

				
			    public BigDecimal VRATIFICADO;

				public BigDecimal getVRATIFICADO () {
					return this.VRATIFICADO;
				}

				public Boolean VRATIFICADOIsNullable(){
				    return true;
				}
				public Boolean VRATIFICADOIsKey(){
				    return false;
				}
				public Integer VRATIFICADOLength(){
				    return 0;
				}
				public Integer VRATIFICADOPrecision(){
				    return null;
				}
				public String VRATIFICADODefault(){
				
					return "";
				
				}
				public String VRATIFICADOComment(){
				
				    return "";
				
				}
				public String VRATIFICADOPattern(){
				
					return "";
				
				}
				public String VRATIFICADOOriginalDbColumnName(){
				
					return "VRATIFICADO";
				
				}

				
			    public BigDecimal VAVALPAGO;

				public BigDecimal getVAVALPAGO () {
					return this.VAVALPAGO;
				}

				public Boolean VAVALPAGOIsNullable(){
				    return true;
				}
				public Boolean VAVALPAGOIsKey(){
				    return false;
				}
				public Integer VAVALPAGOLength(){
				    return 0;
				}
				public Integer VAVALPAGOPrecision(){
				    return null;
				}
				public String VAVALPAGODefault(){
				
					return "";
				
				}
				public String VAVALPAGOComment(){
				
				    return "";
				
				}
				public String VAVALPAGOPattern(){
				
					return "";
				
				}
				public String VAVALPAGOOriginalDbColumnName(){
				
					return "VAVALPAGO";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
						this.VGLOSADO_ = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
						this.VGLOSADO_ = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VGLOSADO_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAVALPAGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VGLOSADO_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VAVALPAGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",VGLOSADO_="+String.valueOf(VGLOSADO_));
		sb.append(",VSOPORTADO="+String.valueOf(VSOPORTADO));
		sb.append(",VACEPTADO="+String.valueOf(VACEPTADO));
		sb.append(",VRATIFICADO="+String.valueOf(VRATIFICADO));
		sb.append(",VAVALPAGO="+String.valueOf(VAVALPAGO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_4Process(globalMap);
		tHashInput_3Process(globalMap);

		row14Struct row14 = new row14Struct();
InsHfacturasStruct InsHfacturas = new InsHfacturasStruct();





	
	/**
	 * [tOracleOutput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_8", false);
		start_Hash.put("tOracleOutput_8", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"InsHfacturas");
					}
				
		int tos_count_tOracleOutput_8 = 0;
		






    
    int nb_line_tOracleOutput_8 = 0;
    int nb_line_update_tOracleOutput_8 = 0;
    int nb_line_inserted_tOracleOutput_8 = 0;
    int nb_line_deleted_tOracleOutput_8 = 0;
    int nb_line_rejected_tOracleOutput_8 = 0;

    int tmp_batchUpdateCount_tOracleOutput_8 = 0;

    int deletedCount_tOracleOutput_8=0;
    int updatedCount_tOracleOutput_8=0;
    int insertedCount_tOracleOutput_8=0;
    int rowsToCommitCount_tOracleOutput_8=0;
    int rejectedCount_tOracleOutput_8=0;

    boolean whetherReject_tOracleOutput_8 = false;

    java.sql.Connection conn_tOracleOutput_8 = null;

    //optional table
    String dbschema_tOracleOutput_8 = null;
    String tableName_tOracleOutput_8 = null;
                    String driverClass_tOracleOutput_8 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_8);
                String url_tOracleOutput_8 = null;
                    url_tOracleOutput_8 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
                String dbUser_tOracleOutput_8 = context.db_origen_Login;

	final String decryptedPassword_tOracleOutput_8 = context.db_origen_Password; 

                String dbPwd_tOracleOutput_8 = decryptedPassword_tOracleOutput_8;
                dbschema_tOracleOutput_8 = context.db_origen_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_8 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_8.put("user",dbUser_tOracleOutput_8);
                    atnParamsPrope_tOracleOutput_8.put("password",dbPwd_tOracleOutput_8);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_8.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_8 = java.sql.DriverManager.getConnection(url_tOracleOutput_8, atnParamsPrope_tOracleOutput_8);
        resourceMap.put("conn_tOracleOutput_8", conn_tOracleOutput_8);
            conn_tOracleOutput_8.setAutoCommit(false);
            int commitEvery_tOracleOutput_8 = 10000;
            int commitCounter_tOracleOutput_8 = 0;
        int batchSize_tOracleOutput_8 = 10000;
        int batchSizeCounter_tOracleOutput_8=0;
        int count_tOracleOutput_8=0;

        if(dbschema_tOracleOutput_8 == null || dbschema_tOracleOutput_8.trim().length() == 0) {
            tableName_tOracleOutput_8 = ("ACM_HFACTURAS");
        } else {
            tableName_tOracleOutput_8 = dbschema_tOracleOutput_8 + "." + ("ACM_HFACTURAS");
        }
                String insert_tOracleOutput_8 = "INSERT INTO " + tableName_tOracleOutput_8 + " (ETAPASNORMATIVIDAD_ID,FACTURA_ID,FECHA,USUARIOS_ID,UORG_ID,VGLOSADO,HAUDITORIAS_ID) VALUES (?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_8 = conn_tOracleOutput_8.prepareStatement(insert_tOracleOutput_8);
                        resourceMap.put("pstmt_tOracleOutput_8", pstmt_tOracleOutput_8);





 



/**
 * [tOracleOutput_8 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) 
					globalMap.get( "tHash_Lookup_row15" ))
					;					
					
	

row15Struct row15HashKey = new row15Struct();
row15Struct row15Default = new row15Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) 
					globalMap.get( "tHash_Lookup_row16" ))
					;					
					
	

row16Struct row16HashKey = new row16Struct();
row16Struct row16Default = new row16Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
InsHfacturasStruct InsHfacturas_tmp = new InsHfacturasStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tOracleInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_6", false);
		start_Hash.put("tOracleInput_6", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_6";
	
	
		int tos_count_tOracleInput_6 = 0;
		
	


	
		    int nb_line_tOracleInput_6 = 0;
		    java.sql.Connection conn_tOracleInput_6 = null;
				String driverClass_tOracleInput_6 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_6);
				
			String url_tOracleInput_6 = null;
				url_tOracleInput_6 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";

				String dbUser_tOracleInput_6 = context.db_origen_Login;

				

				
	final String decryptedPassword_tOracleInput_6 = context.db_origen_Password; 

				String dbPwd_tOracleInput_6 = decryptedPassword_tOracleInput_6;

				
					java.util.Properties atnParamsPrope_tOracleInput_6 = new java.util.Properties();
					atnParamsPrope_tOracleInput_6.put("user",dbUser_tOracleInput_6);
					atnParamsPrope_tOracleInput_6.put("password",dbPwd_tOracleInput_6);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleInput_6.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
					conn_tOracleInput_6 = java.sql.DriverManager.getConnection(url_tOracleInput_6, atnParamsPrope_tOracleInput_6);
				java.sql.Statement stmtGetTZ_tOracleInput_6 = conn_tOracleInput_6.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_6 = stmtGetTZ_tOracleInput_6.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_6 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_6.next()) {
					sessionTimezone_tOracleInput_6 = rsGetTZ_tOracleInput_6.getString(1);
				}
                                if (!(conn_tOracleInput_6 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_6.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_6.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_6.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_6);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_6).setSessionTimeZone(sessionTimezone_tOracleInput_6);
                                }
		    
			java.sql.Statement stmt_tOracleInput_6 = conn_tOracleInput_6.createStatement();

		    String dbquery_tOracleInput_6 = "SELECT \n\nSUB.RECEPCION_ID,\nSUB.FACTURA_ID,\nCASE \nWHEN ENT.CODIGO = 1 OR (ENT.RESPONSABLE = 'PRESTADOR' AND HAU.TIP"
+"O  = 'Etapa') THEN  SUB.VGLOSADO\nWHEN ENT.CODIGO <> 1 AND (ENT.RESPONSABLE = 'AUDITOR' OR HAU.TIPO  = 'Conciliación' ) "
+"THEN SUB.VRATIFICADO\nEND AS VGLOSADO_,\nSUB.VSOPORTADO,\nSUB.VACEPTADO,\nSUB.VRATIFICADO,\nSUB.VAVALPAGO\nFROM (\n\nSEL"
+"ECT \nT.RECEPCION_ID,\nT.FACTURA_ID,\nSUM(T.VGLOSADO) AS VGLOSADO,\nSUM(T.VSOPORTADO) AS VSOPORTADO,\nSUM(T.VACEPTADO) A"
+"S VACEPTADO,\nSUM(T.VRATIFICADO) AS VRATIFICADO,\nSUM(T.VAVALPAGO) AS VAVALPAGO\nFROM (\nSELECT \nDISTINCT \nDFF.RECEPCI"
+"ON_ID,\nTO_NUMBER('') AS DFACTURASERVICIO_ID,\n'ETL Cambio de etapa' AS OBSERVACIONES,\nDFF.ID AS DFACTURAFORMULAICON_ID"
+",\nDFF.FACTURA_ID,\nHD.VLGLOSADO as VGLOSADO,\nDFF.VSOPORTADO,\nDFF.VACEPTADO,\nDFF.VRATIFICADO,\nDFF.VAVALPAGO\nFROM AC"
+"M_DFACTURAFORMULACION DFF\nINNER JOIN ACM_AUDITORIAS AU ON AU.RECEPCION_ID = DFF.RECEPCION_ID\nINNER JOIN ACM_HAUDITORIA"
+"S HA ON HA.ID = AU.HAUDITORIAS_ID\nINNER JOIN ACM_HDFACTURASERVICIO HD ON HD.HAUDITORIAS_ID = HA.ID  AND DFF.ID = HD.DFA"
+"CTURAFORMULACION_ID\nINNER JOIN ACM_ESTAUDITORIAS ES ON ES.ID = HA.ESTAUDITORIA_ID\nINNER JOIN ACM_ETAPASNORMATIVIDAD EN"
+" ON EN.ID = HA.ETAPASNORMATIVIDAD_ID AND EN.ESTREGISTRO_ID = 1\nWHERE \nES.NOMBRE = 'Finalizada'\nAND HA.VLGOSADO <> 0\n"
+"        AND (HA.EJECUCION = 0 OR HA.EJECUCION IS NULL )\n        AND ((EN.CODIGO = 1 AND HA.VLGOSADO <> 0) OR\n        ("
+"((EN.CODIGO <> 1 AND EN.RESPONSABLE = 'PRESTADOR' AND HA.TIPO <> 'Conciliación') OR (HA.TIPO = 'Conciliación' AND HA.VRA"
+"TIFICADO <> 0))) OR\n        EN.RESPONSABLE = 'AUDITOR' AND EN.CODIGO <> 1 AND HA.VRATIFICADO <> 0)\n\nUNION ALL \n\nSEL"
+"ECT \nDISTINCT \nDFS.RECEPCION_ID,\nDFS.ID AS DFACTURASERVICIO_ID,\n'ETL Cambio de etapa' AS OBSERVACIONES,\nTO_NUMBER('"
+"') AS DFACTURAFORMULAICON_ID,\nDFS.FACTURA_ID,\nHD.VLGLOSADO as VGLOSADO,\nDFS.VSOPORTADO,\nDFS.VACEPTADO,\nDFS.VRATIFIC"
+"ADO,\nDFS.VAVALPAGO\nFROM ACM_DFACTURASERVICIO DFS\nINNER JOIN ACM_AUDITORIAS AU ON AU.RECEPCION_ID = DFS.RECEPCION_ID\n"
+"INNER JOIN ACM_HAUDITORIAS HA ON HA.ID = AU.HAUDITORIAS_ID \nINNER JOIN ACM_HDFACTURASERVICIO HD ON HD.HAUDITORIAS_ID = "
+"HA.ID  AND DFS.ID = HD.DFACTURASERVICIO_ID\nINNER JOIN ACM_ESTAUDITORIAS ES ON ES.ID = HA.ESTAUDITORIA_ID\nINNER JOIN AC"
+"M_ETAPASNORMATIVIDAD EN ON EN.ID = HA.ETAPASNORMATIVIDAD_ID AND EN.ESTREGISTRO_ID = 1\nWHERE \nES.NOMBRE = 'Finalizada'"
+"\nAND HA.VLGOSADO <> 0\n        AND (HA.EJECUCION = 0 OR HA.EJECUCION IS NULL )\n        AND ((EN.CODIGO = 1 AND HA.VLGOS"
+"ADO <> 0) OR\n        (((EN.CODIGO <> 1 AND EN.RESPONSABLE = 'PRESTADOR' AND HA.TIPO <> 'Conciliación') OR (HA.TIPO = 'C"
+"onciliación' AND HA.VRATIFICADO <> 0))) OR\n        EN.RESPONSABLE = 'AUDITOR' AND EN.CODIGO <> 1 AND HA.VRATIFICADO <> "
+"0))T\nGROUP BY \nT.RECEPCION_ID,T.FACTURA_ID) SUB\nINNER JOIN ACM_AUDITORIAS AUDI ON AUDI.RECEPCION_ID = SUB.RECEPCION_I"
+"D\nINNER JOIN ACM_HAUDITORIAS HAU ON HAU.ID = AUDI.HAUDITORIAS_ID\nINNER JOIN ACM_ETAPASNORMATIVIDAD ENT ON ENT.ID = HAU"
+".ETAPASNORMATIVIDAD_ID AND ENT.ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_6_QUERY",dbquery_tOracleInput_6);

		    java.sql.ResultSet rs_tOracleInput_6 = null;

		    try {
		    	rs_tOracleInput_6 = stmt_tOracleInput_6.executeQuery(dbquery_tOracleInput_6);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_6 = rs_tOracleInput_6.getMetaData();
		    	int colQtyInRs_tOracleInput_6 = rsmd_tOracleInput_6.getColumnCount();

		    String tmpContent_tOracleInput_6 = null;
		    
		    
		    while (rs_tOracleInput_6.next()) {
		        nb_line_tOracleInput_6++;
		        
							if(colQtyInRs_tOracleInput_6 < 1) {
								row14.RECEPCION_ID = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(1) != null) {
						row14.RECEPCION_ID = rs_tOracleInput_6.getBigDecimal(1);
					} else {
				
						row14.RECEPCION_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 2) {
								row14.FACTURA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(2) != null) {
						row14.FACTURA_ID = rs_tOracleInput_6.getBigDecimal(2);
					} else {
				
						row14.FACTURA_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 3) {
								row14.VGLOSADO_ = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(3) != null) {
						row14.VGLOSADO_ = rs_tOracleInput_6.getBigDecimal(3);
					} else {
				
						row14.VGLOSADO_ = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 4) {
								row14.VSOPORTADO = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(4) != null) {
						row14.VSOPORTADO = rs_tOracleInput_6.getBigDecimal(4);
					} else {
				
						row14.VSOPORTADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 5) {
								row14.VACEPTADO = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(5) != null) {
						row14.VACEPTADO = rs_tOracleInput_6.getBigDecimal(5);
					} else {
				
						row14.VACEPTADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 6) {
								row14.VRATIFICADO = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(6) != null) {
						row14.VRATIFICADO = rs_tOracleInput_6.getBigDecimal(6);
					} else {
				
						row14.VRATIFICADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 7) {
								row14.VAVALPAGO = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(7) != null) {
						row14.VAVALPAGO = rs_tOracleInput_6.getBigDecimal(7);
					} else {
				
						row14.VAVALPAGO = null;
					}
		                    }
					




 



/**
 * [tOracleInput_6 begin ] stop
 */
	
	/**
	 * [tOracleInput_6 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 


	tos_count_tOracleInput_6++;

/**
 * [tOracleInput_6 main ] stop
 */
	
	/**
	 * [tOracleInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row14"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
						row15Struct row15 = null;
					
						row16Struct row16 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_5 = false;
		boolean mainRowRejected_tMap_5 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row15" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow15 = false;
       		  	    	
       		  	    	
 							row15Struct row15ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_5 = false;
								
                        		    		    row15HashKey.RECEPCION_ID = row14.RECEPCION_ID ;
                        		    		

								
		                        	row15HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row15.lookup( row15HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row15.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_5 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row15Struct fromLookup_row15 = null;
							row15 = row15Default;
										 
							
								 
							
							
								if (tHash_Lookup_row15 !=null && tHash_Lookup_row15.hasNext()) { // G 099
								
							
								
								fromLookup_row15 = tHash_Lookup_row15.next();

							
							
								} // G 099
							
							

							if(fromLookup_row15 != null) {
								row15 = fromLookup_row15;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row16" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow16 = false;
       		  	    	
       		  	    	
 							row16Struct row16ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_5 = false;
								
                        		    		    row16HashKey.RECEPCION_ID = row14.RECEPCION_ID ;
                        		    		

								
		                        	row16HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row16.lookup( row16HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row16.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_5 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row16Struct fromLookup_row16 = null;
							row16 = row16Default;
										 
							
								 
							
							
								if (tHash_Lookup_row16 !=null && tHash_Lookup_row16.hasNext()) { // G 099
								
							
								
								fromLookup_row16 = tHash_Lookup_row16.next();

							
							
								} // G 099
							
							

							if(fromLookup_row16 != null) {
								row16 = fromLookup_row16;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

InsHfacturas = null;

if(!rejectedInnerJoin_tMap_5 ) {

// # Output table : 'InsHfacturas'
// # Filter conditions 
if( 

row14.VGLOSADO_.intValue() != 0 

 ) {
InsHfacturas_tmp.ETAPASNORMATIVIDAD_ID = row15.CAMBIO_ETAPA ;
InsHfacturas_tmp.FACTURA_ID = row14.FACTURA_ID ;
InsHfacturas_tmp.FECHA = row15.FECHA ;
InsHfacturas_tmp.USUARIOS_ID = row15.USUARIOS_ID ;
InsHfacturas_tmp.UORG_ID = row15.UORG_ID ;
InsHfacturas_tmp.VGLOSADO = row14.VGLOSADO_ ;
InsHfacturas_tmp.HAUDITORIAS_ID = row16.ID ;
InsHfacturas = InsHfacturas_tmp;
} // closing filter/reject
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "InsHfacturas"
if(InsHfacturas != null) { 



	
	/**
	 * [tOracleOutput_8 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"InsHfacturas"
						
						);
					}
					



        whetherReject_tOracleOutput_8 = false;
                        pstmt_tOracleOutput_8.setBigDecimal(1, InsHfacturas.ETAPASNORMATIVIDAD_ID);

                        pstmt_tOracleOutput_8.setBigDecimal(2, InsHfacturas.FACTURA_ID);

                        if(InsHfacturas.FECHA != null) {
pstmt_tOracleOutput_8.setObject(3, new java.sql.Timestamp(InsHfacturas.FECHA.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_8.setNull(3, java.sql.Types.DATE);
}

                        pstmt_tOracleOutput_8.setBigDecimal(4, InsHfacturas.USUARIOS_ID);

                        pstmt_tOracleOutput_8.setBigDecimal(5, InsHfacturas.UORG_ID);

                        pstmt_tOracleOutput_8.setBigDecimal(6, InsHfacturas.VGLOSADO);

                        pstmt_tOracleOutput_8.setBigDecimal(7, InsHfacturas.HAUDITORIAS_ID);

                pstmt_tOracleOutput_8.addBatch();
                nb_line_tOracleOutput_8++;
                batchSizeCounter_tOracleOutput_8++;
            if (batchSize_tOracleOutput_8 > 0 &&  batchSize_tOracleOutput_8 <= batchSizeCounter_tOracleOutput_8) {
                try {
                    pstmt_tOracleOutput_8.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_8){
globalMap.put("tOracleOutput_8_ERROR_MESSAGE",e_tOracleOutput_8.getMessage());
			        java.sql.SQLException ne_tOracleOutput_8 = e_tOracleOutput_8.getNextException(),sqle_tOracleOutput_8=null;
			    	String errormessage_tOracleOutput_8;
					if (ne_tOracleOutput_8 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_8 = new java.sql.SQLException(e_tOracleOutput_8.getMessage() + "\ncaused by: " + ne_tOracleOutput_8.getMessage(), ne_tOracleOutput_8.getSQLState(), ne_tOracleOutput_8.getErrorCode(), ne_tOracleOutput_8);
						errormessage_tOracleOutput_8 = sqle_tOracleOutput_8.getMessage();
					}else{
						errormessage_tOracleOutput_8 = e_tOracleOutput_8.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_8);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_8 = pstmt_tOracleOutput_8.getUpdateCount();
                    insertedCount_tOracleOutput_8
                += (tmp_batchUpdateCount_tOracleOutput_8!=-1?tmp_batchUpdateCount_tOracleOutput_8:0);
                rowsToCommitCount_tOracleOutput_8 += (tmp_batchUpdateCount_tOracleOutput_8!=-1?tmp_batchUpdateCount_tOracleOutput_8:0);
                batchSizeCounter_tOracleOutput_8 = 0;
            }
                commitCounter_tOracleOutput_8++;
                if(commitEvery_tOracleOutput_8 <= commitCounter_tOracleOutput_8) {
                    if(batchSizeCounter_tOracleOutput_8 > 0) {
                        try {
                            pstmt_tOracleOutput_8.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_8){
globalMap.put("tOracleOutput_8_ERROR_MESSAGE",e_tOracleOutput_8.getMessage());
					        java.sql.SQLException ne_tOracleOutput_8 = e_tOracleOutput_8.getNextException(),sqle_tOracleOutput_8=null;
					    	String errormessage_tOracleOutput_8;
							if (ne_tOracleOutput_8 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_8 = new java.sql.SQLException(e_tOracleOutput_8.getMessage() + "\ncaused by: " + ne_tOracleOutput_8.getMessage(), ne_tOracleOutput_8.getSQLState(), ne_tOracleOutput_8.getErrorCode(), ne_tOracleOutput_8);
								errormessage_tOracleOutput_8 = sqle_tOracleOutput_8.getMessage();
							}else{
								errormessage_tOracleOutput_8 = e_tOracleOutput_8.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_8);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_8 = pstmt_tOracleOutput_8.getUpdateCount();
                            insertedCount_tOracleOutput_8
                        += (tmp_batchUpdateCount_tOracleOutput_8!=-1?tmp_batchUpdateCount_tOracleOutput_8:0);
                        rowsToCommitCount_tOracleOutput_8 += (tmp_batchUpdateCount_tOracleOutput_8!=-1?tmp_batchUpdateCount_tOracleOutput_8:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_8 != 0){
                    	
                    }
                    conn_tOracleOutput_8.commit();
                    if(rowsToCommitCount_tOracleOutput_8 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_8 = 0;
                    }
                    commitCounter_tOracleOutput_8=0;
                    	batchSizeCounter_tOracleOutput_8=0;
                }

 


	tos_count_tOracleOutput_8++;

/**
 * [tOracleOutput_8 main ] stop
 */
	
	/**
	 * [tOracleOutput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_8";
	
	

 



/**
 * [tOracleOutput_8 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_8";
	
	

 



/**
 * [tOracleOutput_8 process_data_end ] stop
 */

} // End of branch "InsHfacturas"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_6 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

}
}finally{
	if (rs_tOracleInput_6 != null) {
		rs_tOracleInput_6.close();
	}
	if (stmt_tOracleInput_6 != null) {
		stmt_tOracleInput_6.close();
	}
	if(conn_tOracleInput_6 != null && !conn_tOracleInput_6.isClosed()) {
	
			conn_tOracleInput_6.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tOracleInput_6_NB_LINE",nb_line_tOracleInput_6);
 

ok_Hash.put("tOracleInput_6", true);
end_Hash.put("tOracleInput_6", System.currentTimeMillis());




/**
 * [tOracleInput_6 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row15 != null) {
						tHash_Lookup_row15.endGet();
					}
					globalMap.remove( "tHash_Lookup_row15" );

					
					
				
					if(tHash_Lookup_row16 != null) {
						tHash_Lookup_row16.endGet();
					}
					globalMap.remove( "tHash_Lookup_row16" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tOracleOutput_8 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_8";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_8 > 0) {
            try {
            	if (pstmt_tOracleOutput_8 != null) {
					
					pstmt_tOracleOutput_8.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_8){
globalMap.put("tOracleOutput_8_ERROR_MESSAGE",e_tOracleOutput_8.getMessage());
		        java.sql.SQLException ne_tOracleOutput_8 = e_tOracleOutput_8.getNextException(),sqle_tOracleOutput_8=null;
		    	String errormessage_tOracleOutput_8;
				if (ne_tOracleOutput_8 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_8 = new java.sql.SQLException(e_tOracleOutput_8.getMessage() + "\ncaused by: " + ne_tOracleOutput_8.getMessage(), ne_tOracleOutput_8.getSQLState(), ne_tOracleOutput_8.getErrorCode(), ne_tOracleOutput_8);
					errormessage_tOracleOutput_8 = sqle_tOracleOutput_8.getMessage();
				}else{
					errormessage_tOracleOutput_8 = e_tOracleOutput_8.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_8);
            	
        	}
        	if (pstmt_tOracleOutput_8 != null) {
            	tmp_batchUpdateCount_tOracleOutput_8 = pstmt_tOracleOutput_8.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_8
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_8!=-1?tmp_batchUpdateCount_tOracleOutput_8:0);
				rowsToCommitCount_tOracleOutput_8 += (tmp_batchUpdateCount_tOracleOutput_8!=-1?tmp_batchUpdateCount_tOracleOutput_8:0);
            }
        }
        if(pstmt_tOracleOutput_8 != null) {
			
				pstmt_tOracleOutput_8.close();
				resourceMap.remove("pstmt_tOracleOutput_8");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_8", true);
		if(commitCounter_tOracleOutput_8 > 0 && rowsToCommitCount_tOracleOutput_8 != 0) {
			
		}
		conn_tOracleOutput_8.commit();
		if(commitCounter_tOracleOutput_8 > 0 && rowsToCommitCount_tOracleOutput_8 != 0) {
			
			rowsToCommitCount_tOracleOutput_8 = 0;
		}
		commitCounter_tOracleOutput_8 = 0;
		
		
		conn_tOracleOutput_8 .close();
		
		resourceMap.put("finish_tOracleOutput_8", true);
   	

	
	nb_line_deleted_tOracleOutput_8=nb_line_deleted_tOracleOutput_8+ deletedCount_tOracleOutput_8;
	nb_line_update_tOracleOutput_8=nb_line_update_tOracleOutput_8 + updatedCount_tOracleOutput_8;
	nb_line_inserted_tOracleOutput_8=nb_line_inserted_tOracleOutput_8 + insertedCount_tOracleOutput_8;
	nb_line_rejected_tOracleOutput_8=nb_line_rejected_tOracleOutput_8 + rejectedCount_tOracleOutput_8;
	
        globalMap.put("tOracleOutput_8_NB_LINE",nb_line_tOracleOutput_8);
        globalMap.put("tOracleOutput_8_NB_LINE_UPDATED",nb_line_update_tOracleOutput_8);
        globalMap.put("tOracleOutput_8_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_8);
        globalMap.put("tOracleOutput_8_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_8);
        globalMap.put("tOracleOutput_8_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_8);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"InsHfacturas");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_8", true);
end_Hash.put("tOracleOutput_8", System.currentTimeMillis());




/**
 * [tOracleOutput_8 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_6:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tOracleInput_11Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_row15"); 
				     			
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_row16"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_6 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tOracleOutput_8 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_8";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_8") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_8 = null;
                if ((pstmtToClose_tOracleOutput_8 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_8")) != null) {
                    pstmtToClose_tOracleOutput_8.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_8") == null){
            java.sql.Connection ctn_tOracleOutput_8 = null;
            if((ctn_tOracleOutput_8 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_8")) != null){
                try {
                    ctn_tOracleOutput_8.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_8) {
                    String errorMessage_tOracleOutput_8 = "failed to close the connection in tOracleOutput_8 :" + sqlEx_tOracleOutput_8.getMessage();
                    System.err.println(errorMessage_tOracleOutput_8);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_8 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class UPAUStruct implements routines.system.IPersistableRow<UPAUStruct> {
    final static byte[] commonByteArrayLock_ACM_INICIAL_Inicial = new byte[0];
    static byte[] commonByteArray_ACM_INICIAL_Inicial = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "SALUDSIS\".\"ISEQ$$_102061\".nextval";
				
				}
				public String IDComment(){
				
				    return "PK - LLave primaria";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal VSOPORTADO;

				public BigDecimal getVSOPORTADO () {
					return this.VSOPORTADO;
				}

				public Boolean VSOPORTADOIsNullable(){
				    return true;
				}
				public Boolean VSOPORTADOIsKey(){
				    return false;
				}
				public Integer VSOPORTADOLength(){
				    return 0;
				}
				public Integer VSOPORTADOPrecision(){
				    return null;
				}
				public String VSOPORTADODefault(){
				
					return "0";
				
				}
				public String VSOPORTADOComment(){
				
				    return "Valor con soportes";
				
				}
				public String VSOPORTADOPattern(){
				
					return "";
				
				}
				public String VSOPORTADOOriginalDbColumnName(){
				
					return "VSOPORTADO";
				
				}

				
			    public BigDecimal VACEPTADO;

				public BigDecimal getVACEPTADO () {
					return this.VACEPTADO;
				}

				public Boolean VACEPTADOIsNullable(){
				    return true;
				}
				public Boolean VACEPTADOIsKey(){
				    return false;
				}
				public Integer VACEPTADOLength(){
				    return 0;
				}
				public Integer VACEPTADOPrecision(){
				    return null;
				}
				public String VACEPTADODefault(){
				
					return "0";
				
				}
				public String VACEPTADOComment(){
				
				    return "Valor Aceptado";
				
				}
				public String VACEPTADOPattern(){
				
					return "";
				
				}
				public String VACEPTADOOriginalDbColumnName(){
				
					return "VACEPTADO";
				
				}

				
			    public BigDecimal VAVALPAGO;

				public BigDecimal getVAVALPAGO () {
					return this.VAVALPAGO;
				}

				public Boolean VAVALPAGOIsNullable(){
				    return true;
				}
				public Boolean VAVALPAGOIsKey(){
				    return false;
				}
				public Integer VAVALPAGOLength(){
				    return 0;
				}
				public Integer VAVALPAGOPrecision(){
				    return null;
				}
				public String VAVALPAGODefault(){
				
					return "0";
				
				}
				public String VAVALPAGOComment(){
				
				    return "Valor con aval de Pago";
				
				}
				public String VAVALPAGOPattern(){
				
					return "";
				
				}
				public String VAVALPAGOOriginalDbColumnName(){
				
					return "VAVALPAGO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final UPAUStruct other = (UPAUStruct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(UPAUStruct other) {

		other.ID = this.ID;
	            other.VSOPORTADO = this.VSOPORTADO;
	            other.VACEPTADO = this.VACEPTADO;
	            other.VAVALPAGO = this.VAVALPAGO;
	            
	}

	public void copyKeysDataTo(UPAUStruct other) {

		other.ID = this.ID;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAVALPAGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VAVALPAGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",VSOPORTADO="+String.valueOf(VSOPORTADO));
		sb.append(",VACEPTADO="+String.valueOf(VACEPTADO));
		sb.append(",VAVALPAGO="+String.valueOf(VAVALPAGO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(UPAUStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row24Struct implements routines.system.IPersistableRow<row24Struct> {
    final static byte[] commonByteArrayLock_ACM_INICIAL_Inicial = new byte[0];
    static byte[] commonByteArray_ACM_INICIAL_Inicial = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal VSOPORTADO;

				public BigDecimal getVSOPORTADO () {
					return this.VSOPORTADO;
				}

				public Boolean VSOPORTADOIsNullable(){
				    return true;
				}
				public Boolean VSOPORTADOIsKey(){
				    return false;
				}
				public Integer VSOPORTADOLength(){
				    return 0;
				}
				public Integer VSOPORTADOPrecision(){
				    return 0;
				}
				public String VSOPORTADODefault(){
				
					return "";
				
				}
				public String VSOPORTADOComment(){
				
				    return "";
				
				}
				public String VSOPORTADOPattern(){
				
					return "";
				
				}
				public String VSOPORTADOOriginalDbColumnName(){
				
					return "VSOPORTADO";
				
				}

				
			    public BigDecimal VACEPTADO;

				public BigDecimal getVACEPTADO () {
					return this.VACEPTADO;
				}

				public Boolean VACEPTADOIsNullable(){
				    return true;
				}
				public Boolean VACEPTADOIsKey(){
				    return false;
				}
				public Integer VACEPTADOLength(){
				    return 0;
				}
				public Integer VACEPTADOPrecision(){
				    return 0;
				}
				public String VACEPTADODefault(){
				
					return "";
				
				}
				public String VACEPTADOComment(){
				
				    return "";
				
				}
				public String VACEPTADOPattern(){
				
					return "";
				
				}
				public String VACEPTADOOriginalDbColumnName(){
				
					return "VACEPTADO";
				
				}

				
			    public BigDecimal VAVALPAGO;

				public BigDecimal getVAVALPAGO () {
					return this.VAVALPAGO;
				}

				public Boolean VAVALPAGOIsNullable(){
				    return true;
				}
				public Boolean VAVALPAGOIsKey(){
				    return false;
				}
				public Integer VAVALPAGOLength(){
				    return 0;
				}
				public Integer VAVALPAGOPrecision(){
				    return 0;
				}
				public String VAVALPAGODefault(){
				
					return "";
				
				}
				public String VAVALPAGOComment(){
				
				    return "";
				
				}
				public String VAVALPAGOPattern(){
				
					return "";
				
				}
				public String VAVALPAGOOriginalDbColumnName(){
				
					return "VAVALPAGO";
				
				}

				
			    public BigDecimal VRATIFICADO;

				public BigDecimal getVRATIFICADO () {
					return this.VRATIFICADO;
				}

				public Boolean VRATIFICADOIsNullable(){
				    return true;
				}
				public Boolean VRATIFICADOIsKey(){
				    return false;
				}
				public Integer VRATIFICADOLength(){
				    return 0;
				}
				public Integer VRATIFICADOPrecision(){
				    return null;
				}
				public String VRATIFICADODefault(){
				
					return "";
				
				}
				public String VRATIFICADOComment(){
				
				    return "";
				
				}
				public String VRATIFICADOPattern(){
				
					return "";
				
				}
				public String VRATIFICADOOriginalDbColumnName(){
				
					return "VRATIFICADO";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAVALPAGO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRATIFICADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VAVALPAGO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VRATIFICADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",VSOPORTADO="+String.valueOf(VSOPORTADO));
		sb.append(",VACEPTADO="+String.valueOf(VACEPTADO));
		sb.append(",VAVALPAGO="+String.valueOf(VAVALPAGO));
		sb.append(",VRATIFICADO="+String.valueOf(VRATIFICADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row24Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row24Struct row24 = new row24Struct();
UPAUStruct UPAU = new UPAUStruct();





	
	/**
	 * [tOracleOutput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_9", false);
		start_Hash.put("tOracleOutput_9", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"UPAU");
					}
				
		int tos_count_tOracleOutput_9 = 0;
		






        int updateKeyCount_tOracleOutput_9 = 1;
        if(updateKeyCount_tOracleOutput_9 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_9 == 4 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_9 = 0;
    int nb_line_update_tOracleOutput_9 = 0;
    int nb_line_inserted_tOracleOutput_9 = 0;
    int nb_line_deleted_tOracleOutput_9 = 0;
    int nb_line_rejected_tOracleOutput_9 = 0;

    int tmp_batchUpdateCount_tOracleOutput_9 = 0;

    int deletedCount_tOracleOutput_9=0;
    int updatedCount_tOracleOutput_9=0;
    int insertedCount_tOracleOutput_9=0;
    int rowsToCommitCount_tOracleOutput_9=0;
    int rejectedCount_tOracleOutput_9=0;

    boolean whetherReject_tOracleOutput_9 = false;

    java.sql.Connection conn_tOracleOutput_9 = null;

    //optional table
    String dbschema_tOracleOutput_9 = null;
    String tableName_tOracleOutput_9 = null;
                    String driverClass_tOracleOutput_9 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_9);
                String url_tOracleOutput_9 = null;
                    url_tOracleOutput_9 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
                String dbUser_tOracleOutput_9 = context.db_origen_Login;

	final String decryptedPassword_tOracleOutput_9 = context.db_origen_Password; 

                String dbPwd_tOracleOutput_9 = decryptedPassword_tOracleOutput_9;
                dbschema_tOracleOutput_9 = context.db_origen_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_9 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_9.put("user",dbUser_tOracleOutput_9);
                    atnParamsPrope_tOracleOutput_9.put("password",dbPwd_tOracleOutput_9);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_9.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_9 = java.sql.DriverManager.getConnection(url_tOracleOutput_9, atnParamsPrope_tOracleOutput_9);
        resourceMap.put("conn_tOracleOutput_9", conn_tOracleOutput_9);
            conn_tOracleOutput_9.setAutoCommit(false);
            int commitEvery_tOracleOutput_9 = 10000;
            int commitCounter_tOracleOutput_9 = 0;
        int batchSize_tOracleOutput_9 = 10000;
        int batchSizeCounter_tOracleOutput_9=0;
        int count_tOracleOutput_9=0;

        if(dbschema_tOracleOutput_9 == null || dbschema_tOracleOutput_9.trim().length() == 0) {
            tableName_tOracleOutput_9 = ("ACM_AUDITORIAS");
        } else {
            tableName_tOracleOutput_9 = dbschema_tOracleOutput_9 + "." + ("ACM_AUDITORIAS");
        }
                String update_tOracleOutput_9 = "UPDATE " + tableName_tOracleOutput_9 + " SET VSOPORTADO = ?,VACEPTADO = ?,VAVALPAGO = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_9 = conn_tOracleOutput_9.prepareStatement(update_tOracleOutput_9);
                resourceMap.put("pstmt_tOracleOutput_9", pstmt_tOracleOutput_9);





 



/**
 * [tOracleOutput_9 begin ] stop
 */



	
	/**
	 * [tMap_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_11", false);
		start_Hash.put("tMap_11", System.currentTimeMillis());
		
	
	currentComponent="tMap_11";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row24");
					}
				
		int tos_count_tMap_11 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_11__Struct  {
}
Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
// ###############################

// ###############################
// # Outputs initialization
UPAUStruct UPAU_tmp = new UPAUStruct();
// ###############################

        
        



        









 



/**
 * [tMap_11 begin ] stop
 */



	
	/**
	 * [tOracleInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_11", false);
		start_Hash.put("tOracleInput_11", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_11";
	
	
		int tos_count_tOracleInput_11 = 0;
		
	


	
		    int nb_line_tOracleInput_11 = 0;
		    java.sql.Connection conn_tOracleInput_11 = null;
				String driverClass_tOracleInput_11 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_11);
				
			String url_tOracleInput_11 = null;
				url_tOracleInput_11 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";

				String dbUser_tOracleInput_11 = context.db_origen_Login;

				

				
	final String decryptedPassword_tOracleInput_11 = context.db_origen_Password; 

				String dbPwd_tOracleInput_11 = decryptedPassword_tOracleInput_11;

				
					java.util.Properties atnParamsPrope_tOracleInput_11 = new java.util.Properties();
					atnParamsPrope_tOracleInput_11.put("user",dbUser_tOracleInput_11);
					atnParamsPrope_tOracleInput_11.put("password",dbPwd_tOracleInput_11);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleInput_11.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
					conn_tOracleInput_11 = java.sql.DriverManager.getConnection(url_tOracleInput_11, atnParamsPrope_tOracleInput_11);
				java.sql.Statement stmtGetTZ_tOracleInput_11 = conn_tOracleInput_11.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_11 = stmtGetTZ_tOracleInput_11.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_11 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_11.next()) {
					sessionTimezone_tOracleInput_11 = rsGetTZ_tOracleInput_11.getString(1);
				}
                                if (!(conn_tOracleInput_11 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_11.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_11.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_11.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_11);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_11).setSessionTimeZone(sessionTimezone_tOracleInput_11);
                                }
		    
			java.sql.Statement stmt_tOracleInput_11 = conn_tOracleInput_11.createStatement();

		    String dbquery_tOracleInput_11 = "SELECT\nAU.ID,\nSUM(CASE \n    WHEN ENG.RESPONSABLE  = 'AUDITOR' OR HHA.TIPO = 'Conciliación' THEN HHA.VSOPORTADO ELSE "
+"0 END) AS VSOPORTADO, \nSUM(CASE \n    WHEN ENG.RESPONSABLE  = 'AUDITOR' OR HHA.TIPO = 'Conciliación' THEN HHA.VACEPTADO"
+" ELSE 0 END) AS VACEPTADO, \nSUM(CASE \n    WHEN ENG.RESPONSABLE  = 'AUDITOR' OR HHA.TIPO = 'Conciliación' THEN HHA.VAVA"
+"LPAGO ELSE 0 END) AS VAVALPAGO,\n    HA.VRATIFICADO\nFROM ACM_AUDITORIAS AU\nINNER JOIN ACM_HAUDITORIAS HA ON HA.ID = AU"
+".HAUDITORIAS_ID \nINNER JOIN ACM_ESTAUDITORIAS ES ON ES.ID = HA.ESTAUDITORIA_ID\nINNER JOIN ACM_ETAPASNORMATIVIDAD EN ON"
+" EN.ID = HA.ETAPASNORMATIVIDAD_ID AND EN.ESTREGISTRO_ID = 1\nINNER JOIN ACM_HAUDITORIAS HHA ON HHA.AUDITORIAS_ID = AU.ID"
+"\nINNER JOIN ACM_ETAPASNORMATIVIDAD ENG ON ENG.ID = HHA.ETAPASNORMATIVIDAD_ID AND ENG.ESTREGISTRO_ID = 1\nWHERE \nES.NOM"
+"BRE = 'Finalizada'\nAND HA.VLGOSADO <> 0\nAND (HA.EJECUCION = 0 OR HA.EJECUCION IS NULL )\nAND ( (EN.CODIGO = 1 AND HA.V"
+"LGOSADO <> 0) OR \n      ((EN.CODIGO <> 1 AND EN.RESPONSABLE = 'PRESTADOR' AND HA.TIPO <> 'Conciliación') OR (HA.TIPO = "
+"'Conciliación' AND HA.VRATIFICADO <> 0)) OR\n      (EN.RESPONSABLE = 'AUDITOR' AND EN.CODIGO <> 1 AND HA.VRATIFICADO <> "
+"0) OR\n      ((HA.VRATIFICADO = 0 OR (HA.VRATIFICADO = 0 AND HA.VLGOSADO = 0 AND EN.CODIGO = 1)) AND (EN.RESPONSABLE = '"
+"AUDITOR' OR HA.TIPO = 'Conciliación')))\nGROUP BY AU.ID,HA.VRATIFICADO";
		    

		    globalMap.put("tOracleInput_11_QUERY",dbquery_tOracleInput_11);

		    java.sql.ResultSet rs_tOracleInput_11 = null;

		    try {
		    	rs_tOracleInput_11 = stmt_tOracleInput_11.executeQuery(dbquery_tOracleInput_11);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_11 = rs_tOracleInput_11.getMetaData();
		    	int colQtyInRs_tOracleInput_11 = rsmd_tOracleInput_11.getColumnCount();

		    String tmpContent_tOracleInput_11 = null;
		    
		    
		    while (rs_tOracleInput_11.next()) {
		        nb_line_tOracleInput_11++;
		        
							if(colQtyInRs_tOracleInput_11 < 1) {
								row24.ID = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(1) != null) {
						row24.ID = rs_tOracleInput_11.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 2) {
								row24.VSOPORTADO = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(2) != null) {
						row24.VSOPORTADO = rs_tOracleInput_11.getBigDecimal(2);
					} else {
				
						row24.VSOPORTADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 3) {
								row24.VACEPTADO = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(3) != null) {
						row24.VACEPTADO = rs_tOracleInput_11.getBigDecimal(3);
					} else {
				
						row24.VACEPTADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 4) {
								row24.VAVALPAGO = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(4) != null) {
						row24.VAVALPAGO = rs_tOracleInput_11.getBigDecimal(4);
					} else {
				
						row24.VAVALPAGO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 5) {
								row24.VRATIFICADO = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(5) != null) {
						row24.VRATIFICADO = rs_tOracleInput_11.getBigDecimal(5);
					} else {
				
						row24.VRATIFICADO = null;
					}
		                    }
					




 



/**
 * [tOracleInput_11 begin ] stop
 */
	
	/**
	 * [tOracleInput_11 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 


	tos_count_tOracleInput_11++;

/**
 * [tOracleInput_11 main ] stop
 */
	
	/**
	 * [tOracleInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 



/**
 * [tOracleInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tMap_11 main ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row24"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_11 = false;
		boolean mainRowRejected_tMap_11 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_11__Struct Var = Var__tMap_11;// ###############################
        // ###############################
        // # Output tables

UPAU = null;


// # Output table : 'UPAU'
UPAU_tmp.ID = row24.ID  ;
UPAU_tmp.VSOPORTADO = row24.VSOPORTADO ;
UPAU_tmp.VACEPTADO = row24.VACEPTADO ;
UPAU_tmp.VAVALPAGO = row24.VAVALPAGO ;
UPAU = UPAU_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_11 = false;










 


	tos_count_tMap_11++;

/**
 * [tMap_11 main ] stop
 */
	
	/**
	 * [tMap_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	

 



/**
 * [tMap_11 process_data_begin ] stop
 */
// Start of branch "UPAU"
if(UPAU != null) { 



	
	/**
	 * [tOracleOutput_9 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"UPAU"
						
						);
					}
					



        whetherReject_tOracleOutput_9 = false;
                    pstmt_tOracleOutput_9.setBigDecimal(1, UPAU.VSOPORTADO);

                    pstmt_tOracleOutput_9.setBigDecimal(2, UPAU.VACEPTADO);

                    pstmt_tOracleOutput_9.setBigDecimal(3, UPAU.VAVALPAGO);


                    pstmt_tOracleOutput_9.setBigDecimal(4 + count_tOracleOutput_9, UPAU.ID);

                pstmt_tOracleOutput_9.addBatch();
                nb_line_tOracleOutput_9++;
                batchSizeCounter_tOracleOutput_9++;
            if (batchSize_tOracleOutput_9 > 0 &&  batchSize_tOracleOutput_9 <= batchSizeCounter_tOracleOutput_9) {
                try {
                    pstmt_tOracleOutput_9.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_9){
globalMap.put("tOracleOutput_9_ERROR_MESSAGE",e_tOracleOutput_9.getMessage());
			        java.sql.SQLException ne_tOracleOutput_9 = e_tOracleOutput_9.getNextException(),sqle_tOracleOutput_9=null;
			    	String errormessage_tOracleOutput_9;
					if (ne_tOracleOutput_9 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_9 = new java.sql.SQLException(e_tOracleOutput_9.getMessage() + "\ncaused by: " + ne_tOracleOutput_9.getMessage(), ne_tOracleOutput_9.getSQLState(), ne_tOracleOutput_9.getErrorCode(), ne_tOracleOutput_9);
						errormessage_tOracleOutput_9 = sqle_tOracleOutput_9.getMessage();
					}else{
						errormessage_tOracleOutput_9 = e_tOracleOutput_9.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_9);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_9 = pstmt_tOracleOutput_9.getUpdateCount();
                    updatedCount_tOracleOutput_9
                += (tmp_batchUpdateCount_tOracleOutput_9!=-1?tmp_batchUpdateCount_tOracleOutput_9:0);
                rowsToCommitCount_tOracleOutput_9 += (tmp_batchUpdateCount_tOracleOutput_9!=-1?tmp_batchUpdateCount_tOracleOutput_9:0);
                batchSizeCounter_tOracleOutput_9 = 0;
            }
                commitCounter_tOracleOutput_9++;
                if(commitEvery_tOracleOutput_9 <= commitCounter_tOracleOutput_9) {
                    if(batchSizeCounter_tOracleOutput_9 > 0) {
                        try {
                            pstmt_tOracleOutput_9.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_9){
globalMap.put("tOracleOutput_9_ERROR_MESSAGE",e_tOracleOutput_9.getMessage());
					        java.sql.SQLException ne_tOracleOutput_9 = e_tOracleOutput_9.getNextException(),sqle_tOracleOutput_9=null;
					    	String errormessage_tOracleOutput_9;
							if (ne_tOracleOutput_9 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_9 = new java.sql.SQLException(e_tOracleOutput_9.getMessage() + "\ncaused by: " + ne_tOracleOutput_9.getMessage(), ne_tOracleOutput_9.getSQLState(), ne_tOracleOutput_9.getErrorCode(), ne_tOracleOutput_9);
								errormessage_tOracleOutput_9 = sqle_tOracleOutput_9.getMessage();
							}else{
								errormessage_tOracleOutput_9 = e_tOracleOutput_9.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_9);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_9 = pstmt_tOracleOutput_9.getUpdateCount();
                            updatedCount_tOracleOutput_9
                        += (tmp_batchUpdateCount_tOracleOutput_9!=-1?tmp_batchUpdateCount_tOracleOutput_9:0);
                        rowsToCommitCount_tOracleOutput_9 += (tmp_batchUpdateCount_tOracleOutput_9!=-1?tmp_batchUpdateCount_tOracleOutput_9:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_9 != 0){
                    	
                    }
                    conn_tOracleOutput_9.commit();
                    if(rowsToCommitCount_tOracleOutput_9 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_9 = 0;
                    }
                    commitCounter_tOracleOutput_9=0;
                    	batchSizeCounter_tOracleOutput_9=0;
                }

 


	tos_count_tOracleOutput_9++;

/**
 * [tOracleOutput_9 main ] stop
 */
	
	/**
	 * [tOracleOutput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_9";
	
	

 



/**
 * [tOracleOutput_9 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_9";
	
	

 



/**
 * [tOracleOutput_9 process_data_end ] stop
 */

} // End of branch "UPAU"




	
	/**
	 * [tMap_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	

 



/**
 * [tMap_11 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 



/**
 * [tOracleInput_11 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_11 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

}
}finally{
	if (rs_tOracleInput_11 != null) {
		rs_tOracleInput_11.close();
	}
	if (stmt_tOracleInput_11 != null) {
		stmt_tOracleInput_11.close();
	}
	if(conn_tOracleInput_11 != null && !conn_tOracleInput_11.isClosed()) {
	
			conn_tOracleInput_11.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tOracleInput_11_NB_LINE",nb_line_tOracleInput_11);
 

ok_Hash.put("tOracleInput_11", true);
end_Hash.put("tOracleInput_11", System.currentTimeMillis());




/**
 * [tOracleInput_11 end ] stop
 */

	
	/**
	 * [tMap_11 end ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row24");
			  	}
			  	
 

ok_Hash.put("tMap_11", true);
end_Hash.put("tMap_11", System.currentTimeMillis());




/**
 * [tMap_11 end ] stop
 */

	
	/**
	 * [tOracleOutput_9 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_9";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_9 > 0) {
            try {
            	if (pstmt_tOracleOutput_9 != null) {
					
					pstmt_tOracleOutput_9.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_9){
globalMap.put("tOracleOutput_9_ERROR_MESSAGE",e_tOracleOutput_9.getMessage());
		        java.sql.SQLException ne_tOracleOutput_9 = e_tOracleOutput_9.getNextException(),sqle_tOracleOutput_9=null;
		    	String errormessage_tOracleOutput_9;
				if (ne_tOracleOutput_9 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_9 = new java.sql.SQLException(e_tOracleOutput_9.getMessage() + "\ncaused by: " + ne_tOracleOutput_9.getMessage(), ne_tOracleOutput_9.getSQLState(), ne_tOracleOutput_9.getErrorCode(), ne_tOracleOutput_9);
					errormessage_tOracleOutput_9 = sqle_tOracleOutput_9.getMessage();
				}else{
					errormessage_tOracleOutput_9 = e_tOracleOutput_9.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_9);
            	
        	}
        	if (pstmt_tOracleOutput_9 != null) {
            	tmp_batchUpdateCount_tOracleOutput_9 = pstmt_tOracleOutput_9.getUpdateCount();
    	    	
    	    		updatedCount_tOracleOutput_9
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_9!=-1?tmp_batchUpdateCount_tOracleOutput_9:0);
				rowsToCommitCount_tOracleOutput_9 += (tmp_batchUpdateCount_tOracleOutput_9!=-1?tmp_batchUpdateCount_tOracleOutput_9:0);
            }
        }
        if(pstmt_tOracleOutput_9 != null) {
			
				pstmt_tOracleOutput_9.close();
				resourceMap.remove("pstmt_tOracleOutput_9");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_9", true);
		if(commitCounter_tOracleOutput_9 > 0 && rowsToCommitCount_tOracleOutput_9 != 0) {
			
		}
		conn_tOracleOutput_9.commit();
		if(commitCounter_tOracleOutput_9 > 0 && rowsToCommitCount_tOracleOutput_9 != 0) {
			
			rowsToCommitCount_tOracleOutput_9 = 0;
		}
		commitCounter_tOracleOutput_9 = 0;
		
		
		conn_tOracleOutput_9 .close();
		
		resourceMap.put("finish_tOracleOutput_9", true);
   	

	
	nb_line_deleted_tOracleOutput_9=nb_line_deleted_tOracleOutput_9+ deletedCount_tOracleOutput_9;
	nb_line_update_tOracleOutput_9=nb_line_update_tOracleOutput_9 + updatedCount_tOracleOutput_9;
	nb_line_inserted_tOracleOutput_9=nb_line_inserted_tOracleOutput_9 + insertedCount_tOracleOutput_9;
	nb_line_rejected_tOracleOutput_9=nb_line_rejected_tOracleOutput_9 + rejectedCount_tOracleOutput_9;
	
        globalMap.put("tOracleOutput_9_NB_LINE",nb_line_tOracleOutput_9);
        globalMap.put("tOracleOutput_9_NB_LINE_UPDATED",nb_line_update_tOracleOutput_9);
        globalMap.put("tOracleOutput_9_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_9);
        globalMap.put("tOracleOutput_9_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_9);
        globalMap.put("tOracleOutput_9_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_9);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"UPAU");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_9", true);
end_Hash.put("tOracleOutput_9", System.currentTimeMillis());




/**
 * [tOracleOutput_9 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_11:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk13", 0, "ok");
								} 
							
							tOracleInput_7Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_11 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 



/**
 * [tOracleInput_11 finally ] stop
 */

	
	/**
	 * [tMap_11 finally ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	

 



/**
 * [tMap_11 finally ] stop
 */

	
	/**
	 * [tOracleOutput_9 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_9";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_9") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_9 = null;
                if ((pstmtToClose_tOracleOutput_9 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_9")) != null) {
                    pstmtToClose_tOracleOutput_9.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_9") == null){
            java.sql.Connection ctn_tOracleOutput_9 = null;
            if((ctn_tOracleOutput_9 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_9")) != null){
                try {
                    ctn_tOracleOutput_9.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_9) {
                    String errorMessage_tOracleOutput_9 = "failed to close the connection in tOracleOutput_9 :" + sqlEx_tOracleOutput_9.getMessage();
                    System.err.println(errorMessage_tOracleOutput_9);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_9 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_11_SUBPROCESS_STATE", 1);
	}
	


public static class UPDHauditoriaStruct implements routines.system.IPersistableRow<UPDHauditoriaStruct> {
    final static byte[] commonByteArrayLock_ACM_INICIAL_Inicial = new byte[0];
    static byte[] commonByteArray_ACM_INICIAL_Inicial = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "SALUDSIS\".\"ISEQ$$_102061\".nextval";
				
				}
				public String IDComment(){
				
				    return "PK - LLave primaria";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal VLGOSADO;

				public BigDecimal getVLGOSADO () {
					return this.VLGOSADO;
				}

				public Boolean VLGOSADOIsNullable(){
				    return true;
				}
				public Boolean VLGOSADOIsKey(){
				    return false;
				}
				public Integer VLGOSADOLength(){
				    return 0;
				}
				public Integer VLGOSADOPrecision(){
				    return null;
				}
				public String VLGOSADODefault(){
				
					return "0";
				
				}
				public String VLGOSADOComment(){
				
				    return "Valor Glosado para la Etapa";
				
				}
				public String VLGOSADOPattern(){
				
					return "";
				
				}
				public String VLGOSADOOriginalDbColumnName(){
				
					return "VLGOSADO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final UPDHauditoriaStruct other = (UPDHauditoriaStruct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(UPDHauditoriaStruct other) {

		other.ID = this.ID;
	            other.VLGOSADO = this.VLGOSADO;
	            
	}

	public void copyKeysDataTo(UPDHauditoriaStruct other) {

		other.ID = this.ID;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.VLGOSADO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.VLGOSADO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VLGOSADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VLGOSADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",VLGOSADO="+String.valueOf(VLGOSADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(UPDHauditoriaStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_ACM_INICIAL_Inicial = new byte[0];
    static byte[] commonByteArray_ACM_INICIAL_Inicial = new byte[0];

	
			    public BigDecimal AUDITORIAS_ID;

				public BigDecimal getAUDITORIAS_ID () {
					return this.AUDITORIAS_ID;
				}

				public Boolean AUDITORIAS_IDIsNullable(){
				    return false;
				}
				public Boolean AUDITORIAS_IDIsKey(){
				    return false;
				}
				public Integer AUDITORIAS_IDLength(){
				    return 0;
				}
				public Integer AUDITORIAS_IDPrecision(){
				    return null;
				}
				public String AUDITORIAS_IDDefault(){
				
					return "";
				
				}
				public String AUDITORIAS_IDComment(){
				
				    return "";
				
				}
				public String AUDITORIAS_IDPattern(){
				
					return "";
				
				}
				public String AUDITORIAS_IDOriginalDbColumnName(){
				
					return "AUDITORIAS_ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return 0;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public String RESPONSABLE;

				public String getRESPONSABLE () {
					return this.RESPONSABLE;
				}

				public Boolean RESPONSABLEIsNullable(){
				    return true;
				}
				public Boolean RESPONSABLEIsKey(){
				    return false;
				}
				public Integer RESPONSABLELength(){
				    return 20;
				}
				public Integer RESPONSABLEPrecision(){
				    return 0;
				}
				public String RESPONSABLEDefault(){
				
					return null;
				
				}
				public String RESPONSABLEComment(){
				
				    return "";
				
				}
				public String RESPONSABLEPattern(){
				
					return "";
				
				}
				public String RESPONSABLEOriginalDbColumnName(){
				
					return "RESPONSABLE";
				
				}

				
			    public String TIPO;

				public String getTIPO () {
					return this.TIPO;
				}

				public Boolean TIPOIsNullable(){
				    return true;
				}
				public Boolean TIPOIsKey(){
				    return false;
				}
				public Integer TIPOLength(){
				    return 20;
				}
				public Integer TIPOPrecision(){
				    return 0;
				}
				public String TIPODefault(){
				
					return null;
				
				}
				public String TIPOComment(){
				
				    return "";
				
				}
				public String TIPOPattern(){
				
					return "";
				
				}
				public String TIPOOriginalDbColumnName(){
				
					return "TIPO";
				
				}

				
			    public BigDecimal VGLOSADO_;

				public BigDecimal getVGLOSADO_ () {
					return this.VGLOSADO_;
				}

				public Boolean VGLOSADO_IsNullable(){
				    return true;
				}
				public Boolean VGLOSADO_IsKey(){
				    return false;
				}
				public Integer VGLOSADO_Length(){
				    return 0;
				}
				public Integer VGLOSADO_Precision(){
				    return 0;
				}
				public String VGLOSADO_Default(){
				
					return "";
				
				}
				public String VGLOSADO_Comment(){
				
				    return "";
				
				}
				public String VGLOSADO_Pattern(){
				
					return "";
				
				}
				public String VGLOSADO_OriginalDbColumnName(){
				
					return "VGLOSADO_";
				
				}

				
			    public BigDecimal VSOPORTADO;

				public BigDecimal getVSOPORTADO () {
					return this.VSOPORTADO;
				}

				public Boolean VSOPORTADOIsNullable(){
				    return true;
				}
				public Boolean VSOPORTADOIsKey(){
				    return false;
				}
				public Integer VSOPORTADOLength(){
				    return 0;
				}
				public Integer VSOPORTADOPrecision(){
				    return null;
				}
				public String VSOPORTADODefault(){
				
					return "";
				
				}
				public String VSOPORTADOComment(){
				
				    return "";
				
				}
				public String VSOPORTADOPattern(){
				
					return "";
				
				}
				public String VSOPORTADOOriginalDbColumnName(){
				
					return "VSOPORTADO";
				
				}

				
			    public BigDecimal VACEPTADO;

				public BigDecimal getVACEPTADO () {
					return this.VACEPTADO;
				}

				public Boolean VACEPTADOIsNullable(){
				    return true;
				}
				public Boolean VACEPTADOIsKey(){
				    return false;
				}
				public Integer VACEPTADOLength(){
				    return 0;
				}
				public Integer VACEPTADOPrecision(){
				    return null;
				}
				public String VACEPTADODefault(){
				
					return "";
				
				}
				public String VACEPTADOComment(){
				
				    return "";
				
				}
				public String VACEPTADOPattern(){
				
					return "";
				
				}
				public String VACEPTADOOriginalDbColumnName(){
				
					return "VACEPTADO";
				
				}

				
			    public BigDecimal VRATIFICADO;

				public BigDecimal getVRATIFICADO () {
					return this.VRATIFICADO;
				}

				public Boolean VRATIFICADOIsNullable(){
				    return true;
				}
				public Boolean VRATIFICADOIsKey(){
				    return false;
				}
				public Integer VRATIFICADOLength(){
				    return 0;
				}
				public Integer VRATIFICADOPrecision(){
				    return null;
				}
				public String VRATIFICADODefault(){
				
					return "";
				
				}
				public String VRATIFICADOComment(){
				
				    return "";
				
				}
				public String VRATIFICADOPattern(){
				
					return "";
				
				}
				public String VRATIFICADOOriginalDbColumnName(){
				
					return "VRATIFICADO";
				
				}

				
			    public BigDecimal VAVALPAGO;

				public BigDecimal getVAVALPAGO () {
					return this.VAVALPAGO;
				}

				public Boolean VAVALPAGOIsNullable(){
				    return true;
				}
				public Boolean VAVALPAGOIsKey(){
				    return false;
				}
				public Integer VAVALPAGOLength(){
				    return 0;
				}
				public Integer VAVALPAGOPrecision(){
				    return null;
				}
				public String VAVALPAGODefault(){
				
					return "";
				
				}
				public String VAVALPAGOComment(){
				
				    return "";
				
				}
				public String VAVALPAGOPattern(){
				
					return "";
				
				}
				public String VAVALPAGOOriginalDbColumnName(){
				
					return "VAVALPAGO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_INICIAL_Inicial.length) {
				if(length < 1024 && commonByteArray_ACM_INICIAL_Inicial.length == 0) {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[1024];
				} else {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_INICIAL_Inicial, 0, length);
			strReturn = new String(commonByteArray_ACM_INICIAL_Inicial, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_INICIAL_Inicial.length) {
				if(length < 1024 && commonByteArray_ACM_INICIAL_Inicial.length == 0) {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[1024];
				} else {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_INICIAL_Inicial, 0, length);
			strReturn = new String(commonByteArray_ACM_INICIAL_Inicial, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.AUDITORIAS_ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
					this.RESPONSABLE = readString(dis);
					
					this.TIPO = readString(dis);
					
						this.VGLOSADO_ = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.AUDITORIAS_ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
					this.RESPONSABLE = readString(dis);
					
					this.TIPO = readString(dis);
					
						this.VGLOSADO_ = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.AUDITORIAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// String
				
						writeString(this.RESPONSABLE,dos);
					
					// String
				
						writeString(this.TIPO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VGLOSADO_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAVALPAGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AUDITORIAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// String
				
						writeString(this.RESPONSABLE,dos);
					
					// String
				
						writeString(this.TIPO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VGLOSADO_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VAVALPAGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AUDITORIAS_ID="+String.valueOf(AUDITORIAS_ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",RESPONSABLE="+RESPONSABLE);
		sb.append(",TIPO="+TIPO);
		sb.append(",VGLOSADO_="+String.valueOf(VGLOSADO_));
		sb.append(",VSOPORTADO="+String.valueOf(VSOPORTADO));
		sb.append(",VACEPTADO="+String.valueOf(VACEPTADO));
		sb.append(",VRATIFICADO="+String.valueOf(VRATIFICADO));
		sb.append(",VAVALPAGO="+String.valueOf(VAVALPAGO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_7Struct implements routines.system.IPersistableRow<after_tOracleInput_7Struct> {
    final static byte[] commonByteArrayLock_ACM_INICIAL_Inicial = new byte[0];
    static byte[] commonByteArray_ACM_INICIAL_Inicial = new byte[0];

	
			    public BigDecimal AUDITORIAS_ID;

				public BigDecimal getAUDITORIAS_ID () {
					return this.AUDITORIAS_ID;
				}

				public Boolean AUDITORIAS_IDIsNullable(){
				    return false;
				}
				public Boolean AUDITORIAS_IDIsKey(){
				    return false;
				}
				public Integer AUDITORIAS_IDLength(){
				    return 0;
				}
				public Integer AUDITORIAS_IDPrecision(){
				    return null;
				}
				public String AUDITORIAS_IDDefault(){
				
					return "";
				
				}
				public String AUDITORIAS_IDComment(){
				
				    return "";
				
				}
				public String AUDITORIAS_IDPattern(){
				
					return "";
				
				}
				public String AUDITORIAS_IDOriginalDbColumnName(){
				
					return "AUDITORIAS_ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return 0;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public String RESPONSABLE;

				public String getRESPONSABLE () {
					return this.RESPONSABLE;
				}

				public Boolean RESPONSABLEIsNullable(){
				    return true;
				}
				public Boolean RESPONSABLEIsKey(){
				    return false;
				}
				public Integer RESPONSABLELength(){
				    return 20;
				}
				public Integer RESPONSABLEPrecision(){
				    return 0;
				}
				public String RESPONSABLEDefault(){
				
					return null;
				
				}
				public String RESPONSABLEComment(){
				
				    return "";
				
				}
				public String RESPONSABLEPattern(){
				
					return "";
				
				}
				public String RESPONSABLEOriginalDbColumnName(){
				
					return "RESPONSABLE";
				
				}

				
			    public String TIPO;

				public String getTIPO () {
					return this.TIPO;
				}

				public Boolean TIPOIsNullable(){
				    return true;
				}
				public Boolean TIPOIsKey(){
				    return false;
				}
				public Integer TIPOLength(){
				    return 20;
				}
				public Integer TIPOPrecision(){
				    return 0;
				}
				public String TIPODefault(){
				
					return null;
				
				}
				public String TIPOComment(){
				
				    return "";
				
				}
				public String TIPOPattern(){
				
					return "";
				
				}
				public String TIPOOriginalDbColumnName(){
				
					return "TIPO";
				
				}

				
			    public BigDecimal VGLOSADO_;

				public BigDecimal getVGLOSADO_ () {
					return this.VGLOSADO_;
				}

				public Boolean VGLOSADO_IsNullable(){
				    return true;
				}
				public Boolean VGLOSADO_IsKey(){
				    return false;
				}
				public Integer VGLOSADO_Length(){
				    return 0;
				}
				public Integer VGLOSADO_Precision(){
				    return 0;
				}
				public String VGLOSADO_Default(){
				
					return "";
				
				}
				public String VGLOSADO_Comment(){
				
				    return "";
				
				}
				public String VGLOSADO_Pattern(){
				
					return "";
				
				}
				public String VGLOSADO_OriginalDbColumnName(){
				
					return "VGLOSADO_";
				
				}

				
			    public BigDecimal VSOPORTADO;

				public BigDecimal getVSOPORTADO () {
					return this.VSOPORTADO;
				}

				public Boolean VSOPORTADOIsNullable(){
				    return true;
				}
				public Boolean VSOPORTADOIsKey(){
				    return false;
				}
				public Integer VSOPORTADOLength(){
				    return 0;
				}
				public Integer VSOPORTADOPrecision(){
				    return null;
				}
				public String VSOPORTADODefault(){
				
					return "";
				
				}
				public String VSOPORTADOComment(){
				
				    return "";
				
				}
				public String VSOPORTADOPattern(){
				
					return "";
				
				}
				public String VSOPORTADOOriginalDbColumnName(){
				
					return "VSOPORTADO";
				
				}

				
			    public BigDecimal VACEPTADO;

				public BigDecimal getVACEPTADO () {
					return this.VACEPTADO;
				}

				public Boolean VACEPTADOIsNullable(){
				    return true;
				}
				public Boolean VACEPTADOIsKey(){
				    return false;
				}
				public Integer VACEPTADOLength(){
				    return 0;
				}
				public Integer VACEPTADOPrecision(){
				    return null;
				}
				public String VACEPTADODefault(){
				
					return "";
				
				}
				public String VACEPTADOComment(){
				
				    return "";
				
				}
				public String VACEPTADOPattern(){
				
					return "";
				
				}
				public String VACEPTADOOriginalDbColumnName(){
				
					return "VACEPTADO";
				
				}

				
			    public BigDecimal VRATIFICADO;

				public BigDecimal getVRATIFICADO () {
					return this.VRATIFICADO;
				}

				public Boolean VRATIFICADOIsNullable(){
				    return true;
				}
				public Boolean VRATIFICADOIsKey(){
				    return false;
				}
				public Integer VRATIFICADOLength(){
				    return 0;
				}
				public Integer VRATIFICADOPrecision(){
				    return null;
				}
				public String VRATIFICADODefault(){
				
					return "";
				
				}
				public String VRATIFICADOComment(){
				
				    return "";
				
				}
				public String VRATIFICADOPattern(){
				
					return "";
				
				}
				public String VRATIFICADOOriginalDbColumnName(){
				
					return "VRATIFICADO";
				
				}

				
			    public BigDecimal VAVALPAGO;

				public BigDecimal getVAVALPAGO () {
					return this.VAVALPAGO;
				}

				public Boolean VAVALPAGOIsNullable(){
				    return true;
				}
				public Boolean VAVALPAGOIsKey(){
				    return false;
				}
				public Integer VAVALPAGOLength(){
				    return 0;
				}
				public Integer VAVALPAGOPrecision(){
				    return null;
				}
				public String VAVALPAGODefault(){
				
					return "";
				
				}
				public String VAVALPAGOComment(){
				
				    return "";
				
				}
				public String VAVALPAGOPattern(){
				
					return "";
				
				}
				public String VAVALPAGOOriginalDbColumnName(){
				
					return "VAVALPAGO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_INICIAL_Inicial.length) {
				if(length < 1024 && commonByteArray_ACM_INICIAL_Inicial.length == 0) {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[1024];
				} else {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_INICIAL_Inicial, 0, length);
			strReturn = new String(commonByteArray_ACM_INICIAL_Inicial, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_INICIAL_Inicial.length) {
				if(length < 1024 && commonByteArray_ACM_INICIAL_Inicial.length == 0) {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[1024];
				} else {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_INICIAL_Inicial, 0, length);
			strReturn = new String(commonByteArray_ACM_INICIAL_Inicial, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.AUDITORIAS_ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
					this.RESPONSABLE = readString(dis);
					
					this.TIPO = readString(dis);
					
						this.VGLOSADO_ = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.AUDITORIAS_ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
					this.RESPONSABLE = readString(dis);
					
					this.TIPO = readString(dis);
					
						this.VGLOSADO_ = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.AUDITORIAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// String
				
						writeString(this.RESPONSABLE,dos);
					
					// String
				
						writeString(this.TIPO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VGLOSADO_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAVALPAGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AUDITORIAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// String
				
						writeString(this.RESPONSABLE,dos);
					
					// String
				
						writeString(this.TIPO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VGLOSADO_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VAVALPAGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AUDITORIAS_ID="+String.valueOf(AUDITORIAS_ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",RESPONSABLE="+RESPONSABLE);
		sb.append(",TIPO="+TIPO);
		sb.append(",VGLOSADO_="+String.valueOf(VGLOSADO_));
		sb.append(",VSOPORTADO="+String.valueOf(VSOPORTADO));
		sb.append(",VACEPTADO="+String.valueOf(VACEPTADO));
		sb.append(",VRATIFICADO="+String.valueOf(VRATIFICADO));
		sb.append(",VAVALPAGO="+String.valueOf(VAVALPAGO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_6Process(globalMap);

		row17Struct row17 = new row17Struct();
UPDHauditoriaStruct UPDHauditoria = new UPDHauditoriaStruct();





	
	/**
	 * [tOracleOutput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_10", false);
		start_Hash.put("tOracleOutput_10", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_10";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"UPDHauditoria");
					}
				
		int tos_count_tOracleOutput_10 = 0;
		






        int updateKeyCount_tOracleOutput_10 = 1;
        if(updateKeyCount_tOracleOutput_10 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_10 == 2 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_10 = 0;
    int nb_line_update_tOracleOutput_10 = 0;
    int nb_line_inserted_tOracleOutput_10 = 0;
    int nb_line_deleted_tOracleOutput_10 = 0;
    int nb_line_rejected_tOracleOutput_10 = 0;

    int tmp_batchUpdateCount_tOracleOutput_10 = 0;

    int deletedCount_tOracleOutput_10=0;
    int updatedCount_tOracleOutput_10=0;
    int insertedCount_tOracleOutput_10=0;
    int rowsToCommitCount_tOracleOutput_10=0;
    int rejectedCount_tOracleOutput_10=0;

    boolean whetherReject_tOracleOutput_10 = false;

    java.sql.Connection conn_tOracleOutput_10 = null;

    //optional table
    String dbschema_tOracleOutput_10 = null;
    String tableName_tOracleOutput_10 = null;
                    String driverClass_tOracleOutput_10 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_10);
                String url_tOracleOutput_10 = null;
                    url_tOracleOutput_10 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
                String dbUser_tOracleOutput_10 = context.db_origen_Login;

	final String decryptedPassword_tOracleOutput_10 = context.db_origen_Password; 

                String dbPwd_tOracleOutput_10 = decryptedPassword_tOracleOutput_10;
                dbschema_tOracleOutput_10 = context.db_origen_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_10 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_10.put("user",dbUser_tOracleOutput_10);
                    atnParamsPrope_tOracleOutput_10.put("password",dbPwd_tOracleOutput_10);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_10.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_10 = java.sql.DriverManager.getConnection(url_tOracleOutput_10, atnParamsPrope_tOracleOutput_10);
        resourceMap.put("conn_tOracleOutput_10", conn_tOracleOutput_10);
            conn_tOracleOutput_10.setAutoCommit(false);
            int commitEvery_tOracleOutput_10 = 10000;
            int commitCounter_tOracleOutput_10 = 0;
        int batchSize_tOracleOutput_10 = 10000;
        int batchSizeCounter_tOracleOutput_10=0;
        int count_tOracleOutput_10=0;

        if(dbschema_tOracleOutput_10 == null || dbschema_tOracleOutput_10.trim().length() == 0) {
            tableName_tOracleOutput_10 = ("ACM_HAUDITORIAS");
        } else {
            tableName_tOracleOutput_10 = dbschema_tOracleOutput_10 + "." + ("ACM_HAUDITORIAS");
        }
                String update_tOracleOutput_10 = "UPDATE " + tableName_tOracleOutput_10 + " SET VLGOSADO = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_10 = conn_tOracleOutput_10.prepareStatement(update_tOracleOutput_10);
                resourceMap.put("pstmt_tOracleOutput_10", pstmt_tOracleOutput_10);





 



/**
 * [tOracleOutput_10 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row17");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) 
					globalMap.get( "tHash_Lookup_row12" ))
					;					
					
	

row12Struct row12HashKey = new row12Struct();
row12Struct row12Default = new row12Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
UPDHauditoriaStruct UPDHauditoria_tmp = new UPDHauditoriaStruct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tOracleInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_7", false);
		start_Hash.put("tOracleInput_7", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_7";
	
	
		int tos_count_tOracleInput_7 = 0;
		
	


	
		    int nb_line_tOracleInput_7 = 0;
		    java.sql.Connection conn_tOracleInput_7 = null;
				String driverClass_tOracleInput_7 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_7);
				
			String url_tOracleInput_7 = null;
				url_tOracleInput_7 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";

				String dbUser_tOracleInput_7 = context.db_origen_Login;

				

				
	final String decryptedPassword_tOracleInput_7 = context.db_origen_Password; 

				String dbPwd_tOracleInput_7 = decryptedPassword_tOracleInput_7;

				
					java.util.Properties atnParamsPrope_tOracleInput_7 = new java.util.Properties();
					atnParamsPrope_tOracleInput_7.put("user",dbUser_tOracleInput_7);
					atnParamsPrope_tOracleInput_7.put("password",dbPwd_tOracleInput_7);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleInput_7.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
					conn_tOracleInput_7 = java.sql.DriverManager.getConnection(url_tOracleInput_7, atnParamsPrope_tOracleInput_7);
				java.sql.Statement stmtGetTZ_tOracleInput_7 = conn_tOracleInput_7.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_7 = stmtGetTZ_tOracleInput_7.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_7 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_7.next()) {
					sessionTimezone_tOracleInput_7 = rsGetTZ_tOracleInput_7.getString(1);
				}
                                if (!(conn_tOracleInput_7 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_7.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_7.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_7.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_7);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_7).setSessionTimeZone(sessionTimezone_tOracleInput_7);
                                }
		    
			java.sql.Statement stmt_tOracleInput_7 = conn_tOracleInput_7.createStatement();

		    String dbquery_tOracleInput_7 = "SELECT \nTA.AUDITORIAS_ID,\nTA.RECEPCION_ID,\nENT.RESPONSABLE,\nHAU.TIPO,\nCASE \nWHEN ENT.CODIGO = 1 OR (ENT.RESPONSAB"
+"LE = 'PRESTADOR' AND HAU.TIPO  = 'Etapa') THEN  TA.VGLOSADO\nWHEN ENT.CODIGO <> 1 AND (ENT.RESPONSABLE = 'AUDITOR' OR HA"
+"U.TIPO  = 'Conciliación' ) THEN TA.VRATIFICADO\nEND AS VGLOSADO_,\nTA.VSOPORTADO,\nTA.VACEPTADO,\nTA.VRATIFICADO,\nTA.VA"
+"VALPAGO\nFROM \n(SELECT \nAU.ID AS AUDITORIAS_ID,\nFA.RECEPCION_ID,\nSUM(HFA.VGLOSADO) AS VGLOSADO,\nSUM(FA.VSOPORTADO) "
+"AS VSOPORTADO,\nSUM(FA.VACEPTADO) AS VACEPTADO, \nSUM(FA.VRATIFICADO) AS VRATIFICADO,\nSUM(FA.VAVALPAGO) AS VAVALPAGO\nF"
+"ROM ACM_FACTURA FA\nINNER JOIN ACM_AUDITORIAS AU ON AU.RECEPCION_ID = FA.RECEPCION_ID\nINNER JOIN ACM_HAUDITORIAS HA ON "
+"HA.ID = AU.HAUDITORIAS_ID \nINNER JOIN ACM_HFACTURAS HFA ON HFA.HAUDITORIAS_ID = HA.ID AND HFA.FACTURA_ID = FA.ID\nINNER"
+" JOIN ACM_ESTAUDITORIAS ES ON ES.ID = HA.ESTAUDITORIA_ID\nINNER JOIN ACM_ETAPASNORMATIVIDAD EN ON EN.ID = HA.ETAPASNORMA"
+"TIVIDAD_ID AND EN.ESTREGISTRO_ID = 1\nWHERE \nES.NOMBRE = 'Finalizada'\nAND HA.VLGOSADO <> 0\n        AND (HA.EJECUCION "
+"= 0 OR HA.EJECUCION IS NULL )\n        AND ((EN.CODIGO = 1 AND HA.VLGOSADO <> 0) OR\n        (((EN.CODIGO <> 1 AND EN.RE"
+"SPONSABLE = 'PRESTADOR' AND HA.TIPO <> 'Conciliación') OR (HA.TIPO = 'Conciliación' AND HA.VRATIFICADO <> 0))) OR\n     "
+"   EN.RESPONSABLE = 'AUDITOR' AND EN.CODIGO <> 1 AND HA.VRATIFICADO <> 0)\nGROUP BY AU.ID,FA.RECEPCION_ID) TA\nINNER JOI"
+"N ACM_AUDITORIAS AUD ON AUD.ID = TA.AUDITORIAS_ID\nINNER JOIN ACM_HAUDITORIAS HAU ON HAU.ID = AUD.HAUDITORIAS_ID\nINNER "
+"JOIN ACM_ETAPASNORMATIVIDAD ENT ON ENT.ID = HAU.ETAPASNORMATIVIDAD_ID AND ENT.ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_7_QUERY",dbquery_tOracleInput_7);

		    java.sql.ResultSet rs_tOracleInput_7 = null;

		    try {
		    	rs_tOracleInput_7 = stmt_tOracleInput_7.executeQuery(dbquery_tOracleInput_7);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_7 = rs_tOracleInput_7.getMetaData();
		    	int colQtyInRs_tOracleInput_7 = rsmd_tOracleInput_7.getColumnCount();

		    String tmpContent_tOracleInput_7 = null;
		    
		    
		    while (rs_tOracleInput_7.next()) {
		        nb_line_tOracleInput_7++;
		        
							if(colQtyInRs_tOracleInput_7 < 1) {
								row17.AUDITORIAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(1) != null) {
						row17.AUDITORIAS_ID = rs_tOracleInput_7.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 2) {
								row17.RECEPCION_ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(2) != null) {
						row17.RECEPCION_ID = rs_tOracleInput_7.getBigDecimal(2);
					} else {
				
						row17.RECEPCION_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 3) {
								row17.RESPONSABLE = null;
							} else {
	                         		
        	row17.RESPONSABLE = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 4) {
								row17.TIPO = null;
							} else {
	                         		
        	row17.TIPO = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 5) {
								row17.VGLOSADO_ = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(5) != null) {
						row17.VGLOSADO_ = rs_tOracleInput_7.getBigDecimal(5);
					} else {
				
						row17.VGLOSADO_ = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 6) {
								row17.VSOPORTADO = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(6) != null) {
						row17.VSOPORTADO = rs_tOracleInput_7.getBigDecimal(6);
					} else {
				
						row17.VSOPORTADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 7) {
								row17.VACEPTADO = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(7) != null) {
						row17.VACEPTADO = rs_tOracleInput_7.getBigDecimal(7);
					} else {
				
						row17.VACEPTADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 8) {
								row17.VRATIFICADO = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(8) != null) {
						row17.VRATIFICADO = rs_tOracleInput_7.getBigDecimal(8);
					} else {
				
						row17.VRATIFICADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 9) {
								row17.VAVALPAGO = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(9) != null) {
						row17.VAVALPAGO = rs_tOracleInput_7.getBigDecimal(9);
					} else {
				
						row17.VAVALPAGO = null;
					}
		                    }
					




 



/**
 * [tOracleInput_7 begin ] stop
 */
	
	/**
	 * [tOracleInput_7 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 


	tos_count_tOracleInput_7++;

/**
 * [tOracleInput_7 main ] stop
 */
	
	/**
	 * [tOracleInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row17"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
						row12Struct row12 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_6 = false;
		boolean mainRowRejected_tMap_6 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row12" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow12 = false;
       		  	    	
       		  	    	
 							row12Struct row12ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    row12HashKey.AUDITORIAS_ID = row17.AUDITORIAS_ID ;
                        		    		

								
		                        	row12HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row12.lookup( row12HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row12Struct fromLookup_row12 = null;
							row12 = row12Default;
										 
							
								 
							
							
								if (tHash_Lookup_row12 !=null && tHash_Lookup_row12.hasNext()) { // G 099
								
							
								
								fromLookup_row12 = tHash_Lookup_row12.next();

							
							
								} // G 099
							
							

							if(fromLookup_row12 != null) {
								row12 = fromLookup_row12;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

UPDHauditoria = null;


// # Output table : 'UPDHauditoria'
UPDHauditoria_tmp.ID = row12.ID ;
UPDHauditoria_tmp.VLGOSADO = row17.VGLOSADO_ ;
UPDHauditoria = UPDHauditoria_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "UPDHauditoria"
if(UPDHauditoria != null) { 



	
	/**
	 * [tOracleOutput_10 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_10";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"UPDHauditoria"
						
						);
					}
					



        whetherReject_tOracleOutput_10 = false;
                    pstmt_tOracleOutput_10.setBigDecimal(1, UPDHauditoria.VLGOSADO);


                    pstmt_tOracleOutput_10.setBigDecimal(2 + count_tOracleOutput_10, UPDHauditoria.ID);

                pstmt_tOracleOutput_10.addBatch();
                nb_line_tOracleOutput_10++;
                batchSizeCounter_tOracleOutput_10++;
            if (batchSize_tOracleOutput_10 > 0 &&  batchSize_tOracleOutput_10 <= batchSizeCounter_tOracleOutput_10) {
                try {
                    pstmt_tOracleOutput_10.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_10){
globalMap.put("tOracleOutput_10_ERROR_MESSAGE",e_tOracleOutput_10.getMessage());
			        java.sql.SQLException ne_tOracleOutput_10 = e_tOracleOutput_10.getNextException(),sqle_tOracleOutput_10=null;
			    	String errormessage_tOracleOutput_10;
					if (ne_tOracleOutput_10 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_10 = new java.sql.SQLException(e_tOracleOutput_10.getMessage() + "\ncaused by: " + ne_tOracleOutput_10.getMessage(), ne_tOracleOutput_10.getSQLState(), ne_tOracleOutput_10.getErrorCode(), ne_tOracleOutput_10);
						errormessage_tOracleOutput_10 = sqle_tOracleOutput_10.getMessage();
					}else{
						errormessage_tOracleOutput_10 = e_tOracleOutput_10.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_10);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_10 = pstmt_tOracleOutput_10.getUpdateCount();
                    updatedCount_tOracleOutput_10
                += (tmp_batchUpdateCount_tOracleOutput_10!=-1?tmp_batchUpdateCount_tOracleOutput_10:0);
                rowsToCommitCount_tOracleOutput_10 += (tmp_batchUpdateCount_tOracleOutput_10!=-1?tmp_batchUpdateCount_tOracleOutput_10:0);
                batchSizeCounter_tOracleOutput_10 = 0;
            }
                commitCounter_tOracleOutput_10++;
                if(commitEvery_tOracleOutput_10 <= commitCounter_tOracleOutput_10) {
                    if(batchSizeCounter_tOracleOutput_10 > 0) {
                        try {
                            pstmt_tOracleOutput_10.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_10){
globalMap.put("tOracleOutput_10_ERROR_MESSAGE",e_tOracleOutput_10.getMessage());
					        java.sql.SQLException ne_tOracleOutput_10 = e_tOracleOutput_10.getNextException(),sqle_tOracleOutput_10=null;
					    	String errormessage_tOracleOutput_10;
							if (ne_tOracleOutput_10 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_10 = new java.sql.SQLException(e_tOracleOutput_10.getMessage() + "\ncaused by: " + ne_tOracleOutput_10.getMessage(), ne_tOracleOutput_10.getSQLState(), ne_tOracleOutput_10.getErrorCode(), ne_tOracleOutput_10);
								errormessage_tOracleOutput_10 = sqle_tOracleOutput_10.getMessage();
							}else{
								errormessage_tOracleOutput_10 = e_tOracleOutput_10.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_10);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_10 = pstmt_tOracleOutput_10.getUpdateCount();
                            updatedCount_tOracleOutput_10
                        += (tmp_batchUpdateCount_tOracleOutput_10!=-1?tmp_batchUpdateCount_tOracleOutput_10:0);
                        rowsToCommitCount_tOracleOutput_10 += (tmp_batchUpdateCount_tOracleOutput_10!=-1?tmp_batchUpdateCount_tOracleOutput_10:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_10 != 0){
                    	
                    }
                    conn_tOracleOutput_10.commit();
                    if(rowsToCommitCount_tOracleOutput_10 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_10 = 0;
                    }
                    commitCounter_tOracleOutput_10=0;
                    	batchSizeCounter_tOracleOutput_10=0;
                }

 


	tos_count_tOracleOutput_10++;

/**
 * [tOracleOutput_10 main ] stop
 */
	
	/**
	 * [tOracleOutput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_10";
	
	

 



/**
 * [tOracleOutput_10 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_10";
	
	

 



/**
 * [tOracleOutput_10 process_data_end ] stop
 */

} // End of branch "UPDHauditoria"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_7 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

}
}finally{
	if (rs_tOracleInput_7 != null) {
		rs_tOracleInput_7.close();
	}
	if (stmt_tOracleInput_7 != null) {
		stmt_tOracleInput_7.close();
	}
	if(conn_tOracleInput_7 != null && !conn_tOracleInput_7.isClosed()) {
	
			conn_tOracleInput_7.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tOracleInput_7_NB_LINE",nb_line_tOracleInput_7);
 

ok_Hash.put("tOracleInput_7", true);
end_Hash.put("tOracleInput_7", System.currentTimeMillis());




/**
 * [tOracleInput_7 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row12 != null) {
						tHash_Lookup_row12.endGet();
					}
					globalMap.remove( "tHash_Lookup_row12" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row17");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tOracleOutput_10 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_10";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_10 > 0) {
            try {
            	if (pstmt_tOracleOutput_10 != null) {
					
					pstmt_tOracleOutput_10.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_10){
globalMap.put("tOracleOutput_10_ERROR_MESSAGE",e_tOracleOutput_10.getMessage());
		        java.sql.SQLException ne_tOracleOutput_10 = e_tOracleOutput_10.getNextException(),sqle_tOracleOutput_10=null;
		    	String errormessage_tOracleOutput_10;
				if (ne_tOracleOutput_10 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_10 = new java.sql.SQLException(e_tOracleOutput_10.getMessage() + "\ncaused by: " + ne_tOracleOutput_10.getMessage(), ne_tOracleOutput_10.getSQLState(), ne_tOracleOutput_10.getErrorCode(), ne_tOracleOutput_10);
					errormessage_tOracleOutput_10 = sqle_tOracleOutput_10.getMessage();
				}else{
					errormessage_tOracleOutput_10 = e_tOracleOutput_10.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_10);
            	
        	}
        	if (pstmt_tOracleOutput_10 != null) {
            	tmp_batchUpdateCount_tOracleOutput_10 = pstmt_tOracleOutput_10.getUpdateCount();
    	    	
    	    		updatedCount_tOracleOutput_10
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_10!=-1?tmp_batchUpdateCount_tOracleOutput_10:0);
				rowsToCommitCount_tOracleOutput_10 += (tmp_batchUpdateCount_tOracleOutput_10!=-1?tmp_batchUpdateCount_tOracleOutput_10:0);
            }
        }
        if(pstmt_tOracleOutput_10 != null) {
			
				pstmt_tOracleOutput_10.close();
				resourceMap.remove("pstmt_tOracleOutput_10");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_10", true);
		if(commitCounter_tOracleOutput_10 > 0 && rowsToCommitCount_tOracleOutput_10 != 0) {
			
		}
		conn_tOracleOutput_10.commit();
		if(commitCounter_tOracleOutput_10 > 0 && rowsToCommitCount_tOracleOutput_10 != 0) {
			
			rowsToCommitCount_tOracleOutput_10 = 0;
		}
		commitCounter_tOracleOutput_10 = 0;
		
		
		conn_tOracleOutput_10 .close();
		
		resourceMap.put("finish_tOracleOutput_10", true);
   	

	
	nb_line_deleted_tOracleOutput_10=nb_line_deleted_tOracleOutput_10+ deletedCount_tOracleOutput_10;
	nb_line_update_tOracleOutput_10=nb_line_update_tOracleOutput_10 + updatedCount_tOracleOutput_10;
	nb_line_inserted_tOracleOutput_10=nb_line_inserted_tOracleOutput_10 + insertedCount_tOracleOutput_10;
	nb_line_rejected_tOracleOutput_10=nb_line_rejected_tOracleOutput_10 + rejectedCount_tOracleOutput_10;
	
        globalMap.put("tOracleOutput_10_NB_LINE",nb_line_tOracleOutput_10);
        globalMap.put("tOracleOutput_10_NB_LINE_UPDATED",nb_line_update_tOracleOutput_10);
        globalMap.put("tOracleOutput_10_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_10);
        globalMap.put("tOracleOutput_10_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_10);
        globalMap.put("tOracleOutput_10_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_10);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"UPDHauditoria");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_10", true);
end_Hash.put("tOracleOutput_10", System.currentTimeMillis());




/**
 * [tOracleOutput_10 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_7:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tJava_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_row12"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_7 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tOracleOutput_10 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_10";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_10") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_10 = null;
                if ((pstmtToClose_tOracleOutput_10 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_10")) != null) {
                    pstmtToClose_tOracleOutput_10.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_10") == null){
            java.sql.Connection ctn_tOracleOutput_10 = null;
            if((ctn_tOracleOutput_10 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_10")) != null){
                try {
                    ctn_tOracleOutput_10.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_10) {
                    String errorMessage_tOracleOutput_10 = "failed to close the connection in tOracleOutput_10 :" + sqlEx_tOracleOutput_10.getMessage();
                    System.err.println(errorMessage_tOracleOutput_10);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_10 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_7_SUBPROCESS_STATE", 1);
	}
	


public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";
	
	
		int tos_count_tJava_3 = 0;
		


String foo = "bar";
 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());

   			if (((Integer)globalMap.get("tOracleOutput_3_NB_LINE")) > 0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If2", 0, "true");
					}
				tOracleInput_13Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "false");
					}   	 
   				}
   			if (((Integer)globalMap.get("tOracleInput_3_NB_LINE")) > 0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If3", 0, "true");
					}
				tHashInput_5Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If3", 0, "false");
					}   	 
   				}



/**
 * [tJava_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}
	


public static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
    final static byte[] commonByteArrayLock_ACM_INICIAL_Inicial = new byte[0];
    static byte[] commonByteArray_ACM_INICIAL_Inicial = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal AUDITORIA_ID;

				public BigDecimal getAUDITORIA_ID () {
					return this.AUDITORIA_ID;
				}

				public Boolean AUDITORIA_IDIsNullable(){
				    return false;
				}
				public Boolean AUDITORIA_IDIsKey(){
				    return false;
				}
				public Integer AUDITORIA_IDLength(){
				    return null;
				}
				public Integer AUDITORIA_IDPrecision(){
				    return null;
				}
				public String AUDITORIA_IDDefault(){
				
					return "";
				
				}
				public String AUDITORIA_IDComment(){
				
				    return "";
				
				}
				public String AUDITORIA_IDPattern(){
				
					return "";
				
				}
				public String AUDITORIA_IDOriginalDbColumnName(){
				
					return "AUDITORIA_ID";
				
				}

				
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row23Struct other = (row23Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row23Struct other) {

		other.AUDITORIA_ID = this.AUDITORIA_ID;
	            other.ID = this.ID;
	            
	}

	public void copyKeysDataTo(row23Struct other) {

		other.ID = this.ID;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.AUDITORIA_ID = (BigDecimal) dis.readObject();
					
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.AUDITORIA_ID = (BigDecimal) dis.readObject();
					
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.AUDITORIA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AUDITORIA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AUDITORIA_ID="+String.valueOf(AUDITORIA_ID));
		sb.append(",ID="+String.valueOf(ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row23Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row23Struct row23 = new row23Struct();




	
	/**
	 * [tOracleOutput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_13", false);
		start_Hash.put("tOracleOutput_13", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_13";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row23");
					}
				
		int tos_count_tOracleOutput_13 = 0;
		






        int updateKeyCount_tOracleOutput_13 = 1;
        if(updateKeyCount_tOracleOutput_13 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_13 == 2 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_13 = 0;
    int nb_line_update_tOracleOutput_13 = 0;
    int nb_line_inserted_tOracleOutput_13 = 0;
    int nb_line_deleted_tOracleOutput_13 = 0;
    int nb_line_rejected_tOracleOutput_13 = 0;

    int tmp_batchUpdateCount_tOracleOutput_13 = 0;

    int deletedCount_tOracleOutput_13=0;
    int updatedCount_tOracleOutput_13=0;
    int insertedCount_tOracleOutput_13=0;
    int rowsToCommitCount_tOracleOutput_13=0;
    int rejectedCount_tOracleOutput_13=0;

    boolean whetherReject_tOracleOutput_13 = false;

    java.sql.Connection conn_tOracleOutput_13 = null;

    //optional table
    String dbschema_tOracleOutput_13 = null;
    String tableName_tOracleOutput_13 = null;
                    String driverClass_tOracleOutput_13 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_13);
                String url_tOracleOutput_13 = null;
                    url_tOracleOutput_13 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
                String dbUser_tOracleOutput_13 = context.db_origen_Login;

	final String decryptedPassword_tOracleOutput_13 = context.db_origen_Password; 

                String dbPwd_tOracleOutput_13 = decryptedPassword_tOracleOutput_13;
                dbschema_tOracleOutput_13 = context.db_origen_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_13 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_13.put("user",dbUser_tOracleOutput_13);
                    atnParamsPrope_tOracleOutput_13.put("password",dbPwd_tOracleOutput_13);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_13.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_13 = java.sql.DriverManager.getConnection(url_tOracleOutput_13, atnParamsPrope_tOracleOutput_13);
        resourceMap.put("conn_tOracleOutput_13", conn_tOracleOutput_13);
            conn_tOracleOutput_13.setAutoCommit(false);
            int commitEvery_tOracleOutput_13 = 10000;
            int commitCounter_tOracleOutput_13 = 0;
        int batchSize_tOracleOutput_13 = 10000;
        int batchSizeCounter_tOracleOutput_13=0;
        int count_tOracleOutput_13=0;

        if(dbschema_tOracleOutput_13 == null || dbschema_tOracleOutput_13.trim().length() == 0) {
            tableName_tOracleOutput_13 = ("RCA_AUTORIZACION");
        } else {
            tableName_tOracleOutput_13 = dbschema_tOracleOutput_13 + "." + ("RCA_AUTORIZACION");
        }
                String update_tOracleOutput_13 = "UPDATE " + tableName_tOracleOutput_13 + " SET AUDITORIA_ID = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_13 = conn_tOracleOutput_13.prepareStatement(update_tOracleOutput_13);
                resourceMap.put("pstmt_tOracleOutput_13", pstmt_tOracleOutput_13);





 



/**
 * [tOracleOutput_13 begin ] stop
 */



	
	/**
	 * [tOracleInput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_13", false);
		start_Hash.put("tOracleInput_13", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_13";
	
	
		int tos_count_tOracleInput_13 = 0;
		
	


	
		    int nb_line_tOracleInput_13 = 0;
		    java.sql.Connection conn_tOracleInput_13 = null;
				String driverClass_tOracleInput_13 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_13);
				
			String url_tOracleInput_13 = null;
				url_tOracleInput_13 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";

				String dbUser_tOracleInput_13 = context.db_origen_Login;

				

				
	final String decryptedPassword_tOracleInput_13 = context.db_origen_Password; 

				String dbPwd_tOracleInput_13 = decryptedPassword_tOracleInput_13;

				
					java.util.Properties atnParamsPrope_tOracleInput_13 = new java.util.Properties();
					atnParamsPrope_tOracleInput_13.put("user",dbUser_tOracleInput_13);
					atnParamsPrope_tOracleInput_13.put("password",dbPwd_tOracleInput_13);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleInput_13.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
					conn_tOracleInput_13 = java.sql.DriverManager.getConnection(url_tOracleInput_13, atnParamsPrope_tOracleInput_13);
				java.sql.Statement stmtGetTZ_tOracleInput_13 = conn_tOracleInput_13.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_13 = stmtGetTZ_tOracleInput_13.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_13 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_13.next()) {
					sessionTimezone_tOracleInput_13 = rsGetTZ_tOracleInput_13.getString(1);
				}
                                if (!(conn_tOracleInput_13 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_13.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_13.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_13.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_13);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_13).setSessionTimeZone(sessionTimezone_tOracleInput_13);
                                }
		    
			java.sql.Statement stmt_tOracleInput_13 = conn_tOracleInput_13.createStatement();

		    String dbquery_tOracleInput_13 = "SELECT  \n    AU.ID AS AUDITORIA_ID,\n    RA.ID \nFROM ACM_AUDITORIAS AU \nINNER JOIN ACM_HAUDITORIAS HA ON HA.ID = AU."
+"HAUDITORIAS_ID \nINNER JOIN ACM_ESTAUDITORIAS ES ON ES.ID = HA.ESTAUDITORIA_ID\nINNER JOIN ACM_ETAPASNORMATIVIDAD EN ON "
+"EN.ID = HA.ETAPASNORMATIVIDAD_ID AND EN.ESTREGISTRO_ID = 1\nINNER JOIN ACM_DFACTURASERVICIO DF  ON DF.RECEPCION_ID = AU."
+"RECEPCION_ID\nINNER JOIN RCA_AUTORIZACION RA ON RA.ID = DF.AUTORIZACION_ID\nWHERE \nES.NOMBRE = 'Finalizada'\nAND (HA.EJ"
+"ECUCION = 0 OR HA.EJECUCION IS NULL )\nAND EN.CODIGO = 1 \nAND HA.VLGOSADO <> 0\nAND RA.AUDITORIA_ID IS NULL";
		    

		    globalMap.put("tOracleInput_13_QUERY",dbquery_tOracleInput_13);

		    java.sql.ResultSet rs_tOracleInput_13 = null;

		    try {
		    	rs_tOracleInput_13 = stmt_tOracleInput_13.executeQuery(dbquery_tOracleInput_13);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_13 = rs_tOracleInput_13.getMetaData();
		    	int colQtyInRs_tOracleInput_13 = rsmd_tOracleInput_13.getColumnCount();

		    String tmpContent_tOracleInput_13 = null;
		    
		    
		    while (rs_tOracleInput_13.next()) {
		        nb_line_tOracleInput_13++;
		        
							if(colQtyInRs_tOracleInput_13 < 1) {
								row23.AUDITORIA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(1) != null) {
						row23.AUDITORIA_ID = rs_tOracleInput_13.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 2) {
								row23.ID = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(2) != null) {
						row23.ID = rs_tOracleInput_13.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
					




 



/**
 * [tOracleInput_13 begin ] stop
 */
	
	/**
	 * [tOracleInput_13 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 


	tos_count_tOracleInput_13++;

/**
 * [tOracleInput_13 main ] stop
 */
	
	/**
	 * [tOracleInput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_13 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_13";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row23"
						
						);
					}
					



        whetherReject_tOracleOutput_13 = false;
                    pstmt_tOracleOutput_13.setBigDecimal(1, row23.AUDITORIA_ID);


                    pstmt_tOracleOutput_13.setBigDecimal(2 + count_tOracleOutput_13, row23.ID);

                pstmt_tOracleOutput_13.addBatch();
                nb_line_tOracleOutput_13++;
                batchSizeCounter_tOracleOutput_13++;
            if (batchSize_tOracleOutput_13 > 0 &&  batchSize_tOracleOutput_13 <= batchSizeCounter_tOracleOutput_13) {
                try {
                    pstmt_tOracleOutput_13.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_13){
globalMap.put("tOracleOutput_13_ERROR_MESSAGE",e_tOracleOutput_13.getMessage());
			        java.sql.SQLException ne_tOracleOutput_13 = e_tOracleOutput_13.getNextException(),sqle_tOracleOutput_13=null;
			    	String errormessage_tOracleOutput_13;
					if (ne_tOracleOutput_13 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_13 = new java.sql.SQLException(e_tOracleOutput_13.getMessage() + "\ncaused by: " + ne_tOracleOutput_13.getMessage(), ne_tOracleOutput_13.getSQLState(), ne_tOracleOutput_13.getErrorCode(), ne_tOracleOutput_13);
						errormessage_tOracleOutput_13 = sqle_tOracleOutput_13.getMessage();
					}else{
						errormessage_tOracleOutput_13 = e_tOracleOutput_13.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_13);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_13 = pstmt_tOracleOutput_13.getUpdateCount();
                    updatedCount_tOracleOutput_13
                += (tmp_batchUpdateCount_tOracleOutput_13!=-1?tmp_batchUpdateCount_tOracleOutput_13:0);
                rowsToCommitCount_tOracleOutput_13 += (tmp_batchUpdateCount_tOracleOutput_13!=-1?tmp_batchUpdateCount_tOracleOutput_13:0);
                batchSizeCounter_tOracleOutput_13 = 0;
            }
                commitCounter_tOracleOutput_13++;
                if(commitEvery_tOracleOutput_13 <= commitCounter_tOracleOutput_13) {
                    if(batchSizeCounter_tOracleOutput_13 > 0) {
                        try {
                            pstmt_tOracleOutput_13.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_13){
globalMap.put("tOracleOutput_13_ERROR_MESSAGE",e_tOracleOutput_13.getMessage());
					        java.sql.SQLException ne_tOracleOutput_13 = e_tOracleOutput_13.getNextException(),sqle_tOracleOutput_13=null;
					    	String errormessage_tOracleOutput_13;
							if (ne_tOracleOutput_13 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_13 = new java.sql.SQLException(e_tOracleOutput_13.getMessage() + "\ncaused by: " + ne_tOracleOutput_13.getMessage(), ne_tOracleOutput_13.getSQLState(), ne_tOracleOutput_13.getErrorCode(), ne_tOracleOutput_13);
								errormessage_tOracleOutput_13 = sqle_tOracleOutput_13.getMessage();
							}else{
								errormessage_tOracleOutput_13 = e_tOracleOutput_13.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_13);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_13 = pstmt_tOracleOutput_13.getUpdateCount();
                            updatedCount_tOracleOutput_13
                        += (tmp_batchUpdateCount_tOracleOutput_13!=-1?tmp_batchUpdateCount_tOracleOutput_13:0);
                        rowsToCommitCount_tOracleOutput_13 += (tmp_batchUpdateCount_tOracleOutput_13!=-1?tmp_batchUpdateCount_tOracleOutput_13:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_13 != 0){
                    	
                    }
                    conn_tOracleOutput_13.commit();
                    if(rowsToCommitCount_tOracleOutput_13 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_13 = 0;
                    }
                    commitCounter_tOracleOutput_13=0;
                    	batchSizeCounter_tOracleOutput_13=0;
                }

 


	tos_count_tOracleOutput_13++;

/**
 * [tOracleOutput_13 main ] stop
 */
	
	/**
	 * [tOracleOutput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_13";
	
	

 



/**
 * [tOracleOutput_13 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_13";
	
	

 



/**
 * [tOracleOutput_13 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_13 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

}
}finally{
	if (rs_tOracleInput_13 != null) {
		rs_tOracleInput_13.close();
	}
	if (stmt_tOracleInput_13 != null) {
		stmt_tOracleInput_13.close();
	}
	if(conn_tOracleInput_13 != null && !conn_tOracleInput_13.isClosed()) {
	
			conn_tOracleInput_13.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tOracleInput_13_NB_LINE",nb_line_tOracleInput_13);
 

ok_Hash.put("tOracleInput_13", true);
end_Hash.put("tOracleInput_13", System.currentTimeMillis());




/**
 * [tOracleInput_13 end ] stop
 */

	
	/**
	 * [tOracleOutput_13 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_13";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_13 > 0) {
            try {
            	if (pstmt_tOracleOutput_13 != null) {
					
					pstmt_tOracleOutput_13.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_13){
globalMap.put("tOracleOutput_13_ERROR_MESSAGE",e_tOracleOutput_13.getMessage());
		        java.sql.SQLException ne_tOracleOutput_13 = e_tOracleOutput_13.getNextException(),sqle_tOracleOutput_13=null;
		    	String errormessage_tOracleOutput_13;
				if (ne_tOracleOutput_13 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_13 = new java.sql.SQLException(e_tOracleOutput_13.getMessage() + "\ncaused by: " + ne_tOracleOutput_13.getMessage(), ne_tOracleOutput_13.getSQLState(), ne_tOracleOutput_13.getErrorCode(), ne_tOracleOutput_13);
					errormessage_tOracleOutput_13 = sqle_tOracleOutput_13.getMessage();
				}else{
					errormessage_tOracleOutput_13 = e_tOracleOutput_13.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_13);
            	
        	}
        	if (pstmt_tOracleOutput_13 != null) {
            	tmp_batchUpdateCount_tOracleOutput_13 = pstmt_tOracleOutput_13.getUpdateCount();
    	    	
    	    		updatedCount_tOracleOutput_13
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_13!=-1?tmp_batchUpdateCount_tOracleOutput_13:0);
				rowsToCommitCount_tOracleOutput_13 += (tmp_batchUpdateCount_tOracleOutput_13!=-1?tmp_batchUpdateCount_tOracleOutput_13:0);
            }
        }
        if(pstmt_tOracleOutput_13 != null) {
			
				pstmt_tOracleOutput_13.close();
				resourceMap.remove("pstmt_tOracleOutput_13");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_13", true);
		if(commitCounter_tOracleOutput_13 > 0 && rowsToCommitCount_tOracleOutput_13 != 0) {
			
		}
		conn_tOracleOutput_13.commit();
		if(commitCounter_tOracleOutput_13 > 0 && rowsToCommitCount_tOracleOutput_13 != 0) {
			
			rowsToCommitCount_tOracleOutput_13 = 0;
		}
		commitCounter_tOracleOutput_13 = 0;
		
		
		conn_tOracleOutput_13 .close();
		
		resourceMap.put("finish_tOracleOutput_13", true);
   	

	
	nb_line_deleted_tOracleOutput_13=nb_line_deleted_tOracleOutput_13+ deletedCount_tOracleOutput_13;
	nb_line_update_tOracleOutput_13=nb_line_update_tOracleOutput_13 + updatedCount_tOracleOutput_13;
	nb_line_inserted_tOracleOutput_13=nb_line_inserted_tOracleOutput_13 + insertedCount_tOracleOutput_13;
	nb_line_rejected_tOracleOutput_13=nb_line_rejected_tOracleOutput_13 + rejectedCount_tOracleOutput_13;
	
        globalMap.put("tOracleOutput_13_NB_LINE",nb_line_tOracleOutput_13);
        globalMap.put("tOracleOutput_13_NB_LINE_UPDATED",nb_line_update_tOracleOutput_13);
        globalMap.put("tOracleOutput_13_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_13);
        globalMap.put("tOracleOutput_13_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_13);
        globalMap.put("tOracleOutput_13_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_13);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row23");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_13", true);
end_Hash.put("tOracleOutput_13", System.currentTimeMillis());




/**
 * [tOracleOutput_13 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_13 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 finally ] stop
 */

	
	/**
	 * [tOracleOutput_13 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_13";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_13") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_13 = null;
                if ((pstmtToClose_tOracleOutput_13 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_13")) != null) {
                    pstmtToClose_tOracleOutput_13.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_13") == null){
            java.sql.Connection ctn_tOracleOutput_13 = null;
            if((ctn_tOracleOutput_13 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_13")) != null){
                try {
                    ctn_tOracleOutput_13.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_13) {
                    String errorMessage_tOracleOutput_13 = "failed to close the connection in tOracleOutput_13 :" + sqlEx_tOracleOutput_13.getMessage();
                    System.err.println(errorMessage_tOracleOutput_13);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_13 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_13_SUBPROCESS_STATE", 1);
	}
	


public static class UpdStruct implements routines.system.IPersistableRow<UpdStruct> {
    final static byte[] commonByteArrayLock_ACM_INICIAL_Inicial = new byte[0];
    static byte[] commonByteArray_ACM_INICIAL_Inicial = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "SALUDSIS\".\"ISEQ$$_102061\".nextval";
				
				}
				public String IDComment(){
				
				    return "PK - LLave primaria";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal EJECUCION;

				public BigDecimal getEJECUCION () {
					return this.EJECUCION;
				}

				public Boolean EJECUCIONIsNullable(){
				    return true;
				}
				public Boolean EJECUCIONIsKey(){
				    return false;
				}
				public Integer EJECUCIONLength(){
				    return 0;
				}
				public Integer EJECUCIONPrecision(){
				    return null;
				}
				public String EJECUCIONDefault(){
				
					return null;
				
				}
				public String EJECUCIONComment(){
				
				    return "Ejecuci\u00F3n del Job (0: Registros que faltan ejecutarse, 1:Registro ejecutados)";
				
				}
				public String EJECUCIONPattern(){
				
					return "";
				
				}
				public String EJECUCIONOriginalDbColumnName(){
				
					return "EJECUCION";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final UpdStruct other = (UpdStruct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(UpdStruct other) {

		other.ID = this.ID;
	            other.EJECUCION = this.EJECUCION;
	            
	}

	public void copyKeysDataTo(UpdStruct other) {

		other.ID = this.ID;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.EJECUCION = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.EJECUCION = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EJECUCION);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EJECUCION);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",EJECUCION="+String.valueOf(EJECUCION));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(UpdStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
    final static byte[] commonByteArrayLock_ACM_INICIAL_Inicial = new byte[0];
    static byte[] commonByteArray_ACM_INICIAL_Inicial = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal AUDITORIAS_ID;

				public BigDecimal getAUDITORIAS_ID () {
					return this.AUDITORIAS_ID;
				}

				public Boolean AUDITORIAS_IDIsNullable(){
				    return false;
				}
				public Boolean AUDITORIAS_IDIsKey(){
				    return false;
				}
				public Integer AUDITORIAS_IDLength(){
				    return 0;
				}
				public Integer AUDITORIAS_IDPrecision(){
				    return null;
				}
				public String AUDITORIAS_IDDefault(){
				
					return "";
				
				}
				public String AUDITORIAS_IDComment(){
				
				    return "";
				
				}
				public String AUDITORIAS_IDPattern(){
				
					return "";
				
				}
				public String AUDITORIAS_IDOriginalDbColumnName(){
				
					return "AUDITORIAS_ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return false;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return 0;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 0;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal ESTAUDITORIAS_ID;

				public BigDecimal getESTAUDITORIAS_ID () {
					return this.ESTAUDITORIAS_ID;
				}

				public Boolean ESTAUDITORIAS_IDIsNullable(){
				    return true;
				}
				public Boolean ESTAUDITORIAS_IDIsKey(){
				    return false;
				}
				public Integer ESTAUDITORIAS_IDLength(){
				    return 0;
				}
				public Integer ESTAUDITORIAS_IDPrecision(){
				    return 0;
				}
				public String ESTAUDITORIAS_IDDefault(){
				
					return "";
				
				}
				public String ESTAUDITORIAS_IDComment(){
				
				    return "";
				
				}
				public String ESTAUDITORIAS_IDPattern(){
				
					return "";
				
				}
				public String ESTAUDITORIAS_IDOriginalDbColumnName(){
				
					return "ESTAUDITORIAS_ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 0;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public BigDecimal CAMBIO_ETAPA;

				public BigDecimal getCAMBIO_ETAPA () {
					return this.CAMBIO_ETAPA;
				}

				public Boolean CAMBIO_ETAPAIsNullable(){
				    return true;
				}
				public Boolean CAMBIO_ETAPAIsKey(){
				    return false;
				}
				public Integer CAMBIO_ETAPALength(){
				    return 0;
				}
				public Integer CAMBIO_ETAPAPrecision(){
				    return 0;
				}
				public String CAMBIO_ETAPADefault(){
				
					return "";
				
				}
				public String CAMBIO_ETAPAComment(){
				
				    return "";
				
				}
				public String CAMBIO_ETAPAPattern(){
				
					return "";
				
				}
				public String CAMBIO_ETAPAOriginalDbColumnName(){
				
					return "CAMBIO_ETAPA";
				
				}

				
			    public BigDecimal CODIGO_ETAPA;

				public BigDecimal getCODIGO_ETAPA () {
					return this.CODIGO_ETAPA;
				}

				public Boolean CODIGO_ETAPAIsNullable(){
				    return false;
				}
				public Boolean CODIGO_ETAPAIsKey(){
				    return false;
				}
				public Integer CODIGO_ETAPALength(){
				    return 0;
				}
				public Integer CODIGO_ETAPAPrecision(){
				    return null;
				}
				public String CODIGO_ETAPADefault(){
				
					return "";
				
				}
				public String CODIGO_ETAPAComment(){
				
				    return "";
				
				}
				public String CODIGO_ETAPAPattern(){
				
					return "";
				
				}
				public String CODIGO_ETAPAOriginalDbColumnName(){
				
					return "CODIGO_ETAPA";
				
				}

				
			    public String RESPONSABLE;

				public String getRESPONSABLE () {
					return this.RESPONSABLE;
				}

				public Boolean RESPONSABLEIsNullable(){
				    return true;
				}
				public Boolean RESPONSABLEIsKey(){
				    return false;
				}
				public Integer RESPONSABLELength(){
				    return 20;
				}
				public Integer RESPONSABLEPrecision(){
				    return 0;
				}
				public String RESPONSABLEDefault(){
				
					return null;
				
				}
				public String RESPONSABLEComment(){
				
				    return "";
				
				}
				public String RESPONSABLEPattern(){
				
					return "";
				
				}
				public String RESPONSABLEOriginalDbColumnName(){
				
					return "RESPONSABLE";
				
				}

				
			    public String RESPONSABLE_CDP;

				public String getRESPONSABLE_CDP () {
					return this.RESPONSABLE_CDP;
				}

				public Boolean RESPONSABLE_CDPIsNullable(){
				    return true;
				}
				public Boolean RESPONSABLE_CDPIsKey(){
				    return false;
				}
				public Integer RESPONSABLE_CDPLength(){
				    return 20;
				}
				public Integer RESPONSABLE_CDPPrecision(){
				    return 0;
				}
				public String RESPONSABLE_CDPDefault(){
				
					return null;
				
				}
				public String RESPONSABLE_CDPComment(){
				
				    return "";
				
				}
				public String RESPONSABLE_CDPPattern(){
				
					return "";
				
				}
				public String RESPONSABLE_CDPOriginalDbColumnName(){
				
					return "RESPONSABLE_CDP";
				
				}

				
			    public String TIPO_ETAPA;

				public String getTIPO_ETAPA () {
					return this.TIPO_ETAPA;
				}

				public Boolean TIPO_ETAPAIsNullable(){
				    return true;
				}
				public Boolean TIPO_ETAPAIsKey(){
				    return false;
				}
				public Integer TIPO_ETAPALength(){
				    return 20;
				}
				public Integer TIPO_ETAPAPrecision(){
				    return 0;
				}
				public String TIPO_ETAPADefault(){
				
					return null;
				
				}
				public String TIPO_ETAPAComment(){
				
				    return "";
				
				}
				public String TIPO_ETAPAPattern(){
				
					return "";
				
				}
				public String TIPO_ETAPAOriginalDbColumnName(){
				
					return "TIPO_ETAPA";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_INICIAL_Inicial.length) {
				if(length < 1024 && commonByteArray_ACM_INICIAL_Inicial.length == 0) {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[1024];
				} else {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_INICIAL_Inicial, 0, length);
			strReturn = new String(commonByteArray_ACM_INICIAL_Inicial, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_INICIAL_Inicial.length) {
				if(length < 1024 && commonByteArray_ACM_INICIAL_Inicial.length == 0) {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[1024];
				} else {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_INICIAL_Inicial, 0, length);
			strReturn = new String(commonByteArray_ACM_INICIAL_Inicial, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.AUDITORIAS_ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.ESTAUDITORIAS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
						this.CAMBIO_ETAPA = (BigDecimal) dis.readObject();
					
						this.CODIGO_ETAPA = (BigDecimal) dis.readObject();
					
					this.RESPONSABLE = readString(dis);
					
					this.RESPONSABLE_CDP = readString(dis);
					
					this.TIPO_ETAPA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.AUDITORIAS_ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.ESTAUDITORIAS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
						this.CAMBIO_ETAPA = (BigDecimal) dis.readObject();
					
						this.CODIGO_ETAPA = (BigDecimal) dis.readObject();
					
					this.RESPONSABLE = readString(dis);
					
					this.RESPONSABLE_CDP = readString(dis);
					
					this.TIPO_ETAPA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.AUDITORIAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTAUDITORIAS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CAMBIO_ETAPA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CODIGO_ETAPA);
					
					// String
				
						writeString(this.RESPONSABLE,dos);
					
					// String
				
						writeString(this.RESPONSABLE_CDP,dos);
					
					// String
				
						writeString(this.TIPO_ETAPA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AUDITORIAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTAUDITORIAS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CAMBIO_ETAPA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CODIGO_ETAPA);
					
					// String
				
						writeString(this.RESPONSABLE,dos);
					
					// String
				
						writeString(this.RESPONSABLE_CDP,dos);
					
					// String
				
						writeString(this.TIPO_ETAPA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",AUDITORIAS_ID="+String.valueOf(AUDITORIAS_ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",ESTAUDITORIAS_ID="+String.valueOf(ESTAUDITORIAS_ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",CAMBIO_ETAPA="+String.valueOf(CAMBIO_ETAPA));
		sb.append(",CODIGO_ETAPA="+String.valueOf(CODIGO_ETAPA));
		sb.append(",RESPONSABLE="+RESPONSABLE);
		sb.append(",RESPONSABLE_CDP="+RESPONSABLE_CDP);
		sb.append(",TIPO_ETAPA="+TIPO_ETAPA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row20Struct row20 = new row20Struct();
UpdStruct Upd = new UpdStruct();





	
	/**
	 * [tOracleOutput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_11", false);
		start_Hash.put("tOracleOutput_11", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_11";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Upd");
					}
				
		int tos_count_tOracleOutput_11 = 0;
		






        int updateKeyCount_tOracleOutput_11 = 1;
        if(updateKeyCount_tOracleOutput_11 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_11 == 2 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_11 = 0;
    int nb_line_update_tOracleOutput_11 = 0;
    int nb_line_inserted_tOracleOutput_11 = 0;
    int nb_line_deleted_tOracleOutput_11 = 0;
    int nb_line_rejected_tOracleOutput_11 = 0;

    int tmp_batchUpdateCount_tOracleOutput_11 = 0;

    int deletedCount_tOracleOutput_11=0;
    int updatedCount_tOracleOutput_11=0;
    int insertedCount_tOracleOutput_11=0;
    int rowsToCommitCount_tOracleOutput_11=0;
    int rejectedCount_tOracleOutput_11=0;

    boolean whetherReject_tOracleOutput_11 = false;

    java.sql.Connection conn_tOracleOutput_11 = null;

    //optional table
    String dbschema_tOracleOutput_11 = null;
    String tableName_tOracleOutput_11 = null;
                    String driverClass_tOracleOutput_11 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_11);
                String url_tOracleOutput_11 = null;
                    url_tOracleOutput_11 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
                String dbUser_tOracleOutput_11 = context.db_origen_Login;

	final String decryptedPassword_tOracleOutput_11 = context.db_origen_Password; 

                String dbPwd_tOracleOutput_11 = decryptedPassword_tOracleOutput_11;
                dbschema_tOracleOutput_11 = context.db_origen_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_11 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_11.put("user",dbUser_tOracleOutput_11);
                    atnParamsPrope_tOracleOutput_11.put("password",dbPwd_tOracleOutput_11);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_11.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_11 = java.sql.DriverManager.getConnection(url_tOracleOutput_11, atnParamsPrope_tOracleOutput_11);
        resourceMap.put("conn_tOracleOutput_11", conn_tOracleOutput_11);
            conn_tOracleOutput_11.setAutoCommit(false);
            int commitEvery_tOracleOutput_11 = 10000;
            int commitCounter_tOracleOutput_11 = 0;
        int batchSize_tOracleOutput_11 = 10000;
        int batchSizeCounter_tOracleOutput_11=0;
        int count_tOracleOutput_11=0;

        if(dbschema_tOracleOutput_11 == null || dbschema_tOracleOutput_11.trim().length() == 0) {
            tableName_tOracleOutput_11 = ("ACM_HAUDITORIAS");
        } else {
            tableName_tOracleOutput_11 = dbschema_tOracleOutput_11 + "." + ("ACM_HAUDITORIAS");
        }
                String update_tOracleOutput_11 = "UPDATE " + tableName_tOracleOutput_11 + " SET EJECUCION = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_11 = conn_tOracleOutput_11.prepareStatement(update_tOracleOutput_11);
                resourceMap.put("pstmt_tOracleOutput_11", pstmt_tOracleOutput_11);





 



/**
 * [tOracleOutput_11 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row20");
					}
				
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
UpdStruct Upd_tmp = new UpdStruct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tHashInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_5", false);
		start_Hash.put("tHashInput_5", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_5";
	
	
		int tos_count_tHashInput_5 = 0;
		


int nb_line_tHashInput_5 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_5=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row11Struct> tHashFile_tHashInput_5 = mf_tHashInput_5.getAdvancedMemoryHashFile("tHashFile_Inicial_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_5==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row11Struct> iterator_tHashInput_5 = tHashFile_tHashInput_5.iterator();
while (iterator_tHashInput_5.hasNext()) {
    row11Struct next_tHashInput_5 = iterator_tHashInput_5.next();

	row20.ID = next_tHashInput_5.ID;
	row20.AUDITORIAS_ID = next_tHashInput_5.AUDITORIAS_ID;
	row20.RECEPCION_ID = next_tHashInput_5.RECEPCION_ID;
	row20.USUARIOS_ID = next_tHashInput_5.USUARIOS_ID;
	row20.UORG_ID = next_tHashInput_5.UORG_ID;
	row20.ESTAUDITORIAS_ID = next_tHashInput_5.ESTAUDITORIAS_ID;
	row20.FECHA = next_tHashInput_5.FECHA;
	row20.CAMBIO_ETAPA = next_tHashInput_5.CAMBIO_ETAPA;
	row20.CODIGO_ETAPA = next_tHashInput_5.CODIGO_ETAPA;
	row20.RESPONSABLE = next_tHashInput_5.RESPONSABLE;
	row20.RESPONSABLE_CDP = next_tHashInput_5.RESPONSABLE_CDP;
	row20.TIPO_ETAPA = next_tHashInput_5.TIPO_ETAPA;

 



/**
 * [tHashInput_5 begin ] stop
 */
	
	/**
	 * [tHashInput_5 main ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 


	tos_count_tHashInput_5++;

/**
 * [tHashInput_5 main ] stop
 */
	
	/**
	 * [tHashInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row20"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_7 = false;
		boolean mainRowRejected_tMap_7 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

Upd = null;


// # Output table : 'Upd'
Upd_tmp.ID = row20.ID ;
Upd_tmp.EJECUCION = new BigDecimal(1);
Upd = Upd_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "Upd"
if(Upd != null) { 



	
	/**
	 * [tOracleOutput_11 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_11";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Upd"
						
						);
					}
					



        whetherReject_tOracleOutput_11 = false;
                    pstmt_tOracleOutput_11.setBigDecimal(1, Upd.EJECUCION);


                    pstmt_tOracleOutput_11.setBigDecimal(2 + count_tOracleOutput_11, Upd.ID);

                pstmt_tOracleOutput_11.addBatch();
                nb_line_tOracleOutput_11++;
                batchSizeCounter_tOracleOutput_11++;
            if (batchSize_tOracleOutput_11 > 0 &&  batchSize_tOracleOutput_11 <= batchSizeCounter_tOracleOutput_11) {
                try {
                    pstmt_tOracleOutput_11.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_11){
globalMap.put("tOracleOutput_11_ERROR_MESSAGE",e_tOracleOutput_11.getMessage());
			        java.sql.SQLException ne_tOracleOutput_11 = e_tOracleOutput_11.getNextException(),sqle_tOracleOutput_11=null;
			    	String errormessage_tOracleOutput_11;
					if (ne_tOracleOutput_11 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_11 = new java.sql.SQLException(e_tOracleOutput_11.getMessage() + "\ncaused by: " + ne_tOracleOutput_11.getMessage(), ne_tOracleOutput_11.getSQLState(), ne_tOracleOutput_11.getErrorCode(), ne_tOracleOutput_11);
						errormessage_tOracleOutput_11 = sqle_tOracleOutput_11.getMessage();
					}else{
						errormessage_tOracleOutput_11 = e_tOracleOutput_11.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_11);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_11 = pstmt_tOracleOutput_11.getUpdateCount();
                    updatedCount_tOracleOutput_11
                += (tmp_batchUpdateCount_tOracleOutput_11!=-1?tmp_batchUpdateCount_tOracleOutput_11:0);
                rowsToCommitCount_tOracleOutput_11 += (tmp_batchUpdateCount_tOracleOutput_11!=-1?tmp_batchUpdateCount_tOracleOutput_11:0);
                batchSizeCounter_tOracleOutput_11 = 0;
            }
                commitCounter_tOracleOutput_11++;
                if(commitEvery_tOracleOutput_11 <= commitCounter_tOracleOutput_11) {
                    if(batchSizeCounter_tOracleOutput_11 > 0) {
                        try {
                            pstmt_tOracleOutput_11.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_11){
globalMap.put("tOracleOutput_11_ERROR_MESSAGE",e_tOracleOutput_11.getMessage());
					        java.sql.SQLException ne_tOracleOutput_11 = e_tOracleOutput_11.getNextException(),sqle_tOracleOutput_11=null;
					    	String errormessage_tOracleOutput_11;
							if (ne_tOracleOutput_11 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_11 = new java.sql.SQLException(e_tOracleOutput_11.getMessage() + "\ncaused by: " + ne_tOracleOutput_11.getMessage(), ne_tOracleOutput_11.getSQLState(), ne_tOracleOutput_11.getErrorCode(), ne_tOracleOutput_11);
								errormessage_tOracleOutput_11 = sqle_tOracleOutput_11.getMessage();
							}else{
								errormessage_tOracleOutput_11 = e_tOracleOutput_11.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_11);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_11 = pstmt_tOracleOutput_11.getUpdateCount();
                            updatedCount_tOracleOutput_11
                        += (tmp_batchUpdateCount_tOracleOutput_11!=-1?tmp_batchUpdateCount_tOracleOutput_11:0);
                        rowsToCommitCount_tOracleOutput_11 += (tmp_batchUpdateCount_tOracleOutput_11!=-1?tmp_batchUpdateCount_tOracleOutput_11:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_11 != 0){
                    	
                    }
                    conn_tOracleOutput_11.commit();
                    if(rowsToCommitCount_tOracleOutput_11 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_11 = 0;
                    }
                    commitCounter_tOracleOutput_11=0;
                    	batchSizeCounter_tOracleOutput_11=0;
                }

 


	tos_count_tOracleOutput_11++;

/**
 * [tOracleOutput_11 main ] stop
 */
	
	/**
	 * [tOracleOutput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_11";
	
	

 



/**
 * [tOracleOutput_11 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_11";
	
	

 



/**
 * [tOracleOutput_11 process_data_end ] stop
 */

} // End of branch "Upd"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_5 end ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	
    

		
			nb_line_tHashInput_5++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_Inicial_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_5_NB_LINE", nb_line_tHashInput_5);       

 

ok_Hash.put("tHashInput_5", true);
end_Hash.put("tHashInput_5", System.currentTimeMillis());




/**
 * [tHashInput_5 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row20");
			  	}
			  	
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tOracleOutput_11 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_11";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_11 > 0) {
            try {
            	if (pstmt_tOracleOutput_11 != null) {
					
					pstmt_tOracleOutput_11.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_11){
globalMap.put("tOracleOutput_11_ERROR_MESSAGE",e_tOracleOutput_11.getMessage());
		        java.sql.SQLException ne_tOracleOutput_11 = e_tOracleOutput_11.getNextException(),sqle_tOracleOutput_11=null;
		    	String errormessage_tOracleOutput_11;
				if (ne_tOracleOutput_11 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_11 = new java.sql.SQLException(e_tOracleOutput_11.getMessage() + "\ncaused by: " + ne_tOracleOutput_11.getMessage(), ne_tOracleOutput_11.getSQLState(), ne_tOracleOutput_11.getErrorCode(), ne_tOracleOutput_11);
					errormessage_tOracleOutput_11 = sqle_tOracleOutput_11.getMessage();
				}else{
					errormessage_tOracleOutput_11 = e_tOracleOutput_11.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_11);
            	
        	}
        	if (pstmt_tOracleOutput_11 != null) {
            	tmp_batchUpdateCount_tOracleOutput_11 = pstmt_tOracleOutput_11.getUpdateCount();
    	    	
    	    		updatedCount_tOracleOutput_11
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_11!=-1?tmp_batchUpdateCount_tOracleOutput_11:0);
				rowsToCommitCount_tOracleOutput_11 += (tmp_batchUpdateCount_tOracleOutput_11!=-1?tmp_batchUpdateCount_tOracleOutput_11:0);
            }
        }
        if(pstmt_tOracleOutput_11 != null) {
			
				pstmt_tOracleOutput_11.close();
				resourceMap.remove("pstmt_tOracleOutput_11");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_11", true);
		if(commitCounter_tOracleOutput_11 > 0 && rowsToCommitCount_tOracleOutput_11 != 0) {
			
		}
		conn_tOracleOutput_11.commit();
		if(commitCounter_tOracleOutput_11 > 0 && rowsToCommitCount_tOracleOutput_11 != 0) {
			
			rowsToCommitCount_tOracleOutput_11 = 0;
		}
		commitCounter_tOracleOutput_11 = 0;
		
		
		conn_tOracleOutput_11 .close();
		
		resourceMap.put("finish_tOracleOutput_11", true);
   	

	
	nb_line_deleted_tOracleOutput_11=nb_line_deleted_tOracleOutput_11+ deletedCount_tOracleOutput_11;
	nb_line_update_tOracleOutput_11=nb_line_update_tOracleOutput_11 + updatedCount_tOracleOutput_11;
	nb_line_inserted_tOracleOutput_11=nb_line_inserted_tOracleOutput_11 + insertedCount_tOracleOutput_11;
	nb_line_rejected_tOracleOutput_11=nb_line_rejected_tOracleOutput_11 + rejectedCount_tOracleOutput_11;
	
        globalMap.put("tOracleOutput_11_NB_LINE",nb_line_tOracleOutput_11);
        globalMap.put("tOracleOutput_11_NB_LINE_UPDATED",nb_line_update_tOracleOutput_11);
        globalMap.put("tOracleOutput_11_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_11);
        globalMap.put("tOracleOutput_11_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_11);
        globalMap.put("tOracleOutput_11_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_11);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Upd");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_11", true);
end_Hash.put("tOracleOutput_11", System.currentTimeMillis());




/**
 * [tOracleOutput_11 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_5 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tOracleOutput_11 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_11";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_11") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_11 = null;
                if ((pstmtToClose_tOracleOutput_11 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_11")) != null) {
                    pstmtToClose_tOracleOutput_11.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_11") == null){
            java.sql.Connection ctn_tOracleOutput_11 = null;
            if((ctn_tOracleOutput_11 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_11")) != null){
                try {
                    ctn_tOracleOutput_11.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_11) {
                    String errorMessage_tOracleOutput_11 = "failed to close the connection in tOracleOutput_11 :" + sqlEx_tOracleOutput_11.getMessage();
                    System.err.println(errorMessage_tOracleOutput_11);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_11 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfUpdStruct implements routines.system.IPersistableRow<copyOfUpdStruct> {
    final static byte[] commonByteArrayLock_ACM_INICIAL_Inicial = new byte[0];
    static byte[] commonByteArray_ACM_INICIAL_Inicial = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "SALUDSIS\".\"ISEQ$$_102061\".nextval";
				
				}
				public String IDComment(){
				
				    return "PK - LLave primaria";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal EJECUCION;

				public BigDecimal getEJECUCION () {
					return this.EJECUCION;
				}

				public Boolean EJECUCIONIsNullable(){
				    return true;
				}
				public Boolean EJECUCIONIsKey(){
				    return false;
				}
				public Integer EJECUCIONLength(){
				    return 0;
				}
				public Integer EJECUCIONPrecision(){
				    return null;
				}
				public String EJECUCIONDefault(){
				
					return null;
				
				}
				public String EJECUCIONComment(){
				
				    return "Ejecuci\u00F3n del Job (0: Registros que faltan ejecutarse, 1:Registro ejecutados)";
				
				}
				public String EJECUCIONPattern(){
				
					return "";
				
				}
				public String EJECUCIONOriginalDbColumnName(){
				
					return "EJECUCION";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final copyOfUpdStruct other = (copyOfUpdStruct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(copyOfUpdStruct other) {

		other.ID = this.ID;
	            other.EJECUCION = this.EJECUCION;
	            
	}

	public void copyKeysDataTo(copyOfUpdStruct other) {

		other.ID = this.ID;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.EJECUCION = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.EJECUCION = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EJECUCION);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EJECUCION);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",EJECUCION="+String.valueOf(EJECUCION));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfUpdStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row25Struct implements routines.system.IPersistableRow<row25Struct> {
    final static byte[] commonByteArrayLock_ACM_INICIAL_Inicial = new byte[0];
    static byte[] commonByteArray_ACM_INICIAL_Inicial = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row25Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row25Struct row25 = new row25Struct();
copyOfUpdStruct copyOfUpd = new copyOfUpdStruct();





	
	/**
	 * [tOracleOutput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_14", false);
		start_Hash.put("tOracleOutput_14", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_14";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfUpd");
					}
				
		int tos_count_tOracleOutput_14 = 0;
		






        int updateKeyCount_tOracleOutput_14 = 1;
        if(updateKeyCount_tOracleOutput_14 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_14 == 2 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_14 = 0;
    int nb_line_update_tOracleOutput_14 = 0;
    int nb_line_inserted_tOracleOutput_14 = 0;
    int nb_line_deleted_tOracleOutput_14 = 0;
    int nb_line_rejected_tOracleOutput_14 = 0;

    int tmp_batchUpdateCount_tOracleOutput_14 = 0;

    int deletedCount_tOracleOutput_14=0;
    int updatedCount_tOracleOutput_14=0;
    int insertedCount_tOracleOutput_14=0;
    int rowsToCommitCount_tOracleOutput_14=0;
    int rejectedCount_tOracleOutput_14=0;

    boolean whetherReject_tOracleOutput_14 = false;

    java.sql.Connection conn_tOracleOutput_14 = null;

    //optional table
    String dbschema_tOracleOutput_14 = null;
    String tableName_tOracleOutput_14 = null;
                    String driverClass_tOracleOutput_14 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_14);
                String url_tOracleOutput_14 = null;
                    url_tOracleOutput_14 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
                String dbUser_tOracleOutput_14 = context.db_origen_Login;

	final String decryptedPassword_tOracleOutput_14 = context.db_origen_Password; 

                String dbPwd_tOracleOutput_14 = decryptedPassword_tOracleOutput_14;
                dbschema_tOracleOutput_14 = context.db_origen_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_14 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_14.put("user",dbUser_tOracleOutput_14);
                    atnParamsPrope_tOracleOutput_14.put("password",dbPwd_tOracleOutput_14);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_14.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_14 = java.sql.DriverManager.getConnection(url_tOracleOutput_14, atnParamsPrope_tOracleOutput_14);
        resourceMap.put("conn_tOracleOutput_14", conn_tOracleOutput_14);
            conn_tOracleOutput_14.setAutoCommit(false);
            int commitEvery_tOracleOutput_14 = 10000;
            int commitCounter_tOracleOutput_14 = 0;
        int batchSize_tOracleOutput_14 = 10000;
        int batchSizeCounter_tOracleOutput_14=0;
        int count_tOracleOutput_14=0;

        if(dbschema_tOracleOutput_14 == null || dbschema_tOracleOutput_14.trim().length() == 0) {
            tableName_tOracleOutput_14 = ("ACM_HAUDITORIAS");
        } else {
            tableName_tOracleOutput_14 = dbschema_tOracleOutput_14 + "." + ("ACM_HAUDITORIAS");
        }
                String update_tOracleOutput_14 = "UPDATE " + tableName_tOracleOutput_14 + " SET EJECUCION = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_14 = conn_tOracleOutput_14.prepareStatement(update_tOracleOutput_14);
                resourceMap.put("pstmt_tOracleOutput_14", pstmt_tOracleOutput_14);





 



/**
 * [tOracleOutput_14 begin ] stop
 */



	
	/**
	 * [tMap_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_12", false);
		start_Hash.put("tMap_12", System.currentTimeMillis());
		
	
	currentComponent="tMap_12";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row25");
					}
				
		int tos_count_tMap_12 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_12__Struct  {
}
Var__tMap_12__Struct Var__tMap_12 = new Var__tMap_12__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfUpdStruct copyOfUpd_tmp = new copyOfUpdStruct();
// ###############################

        
        



        









 



/**
 * [tMap_12 begin ] stop
 */



	
	/**
	 * [tOracleInput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_14", false);
		start_Hash.put("tOracleInput_14", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_14";
	
	
		int tos_count_tOracleInput_14 = 0;
		
	


	
		    int nb_line_tOracleInput_14 = 0;
		    java.sql.Connection conn_tOracleInput_14 = null;
				String driverClass_tOracleInput_14 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_14);
				
			String url_tOracleInput_14 = null;
				url_tOracleInput_14 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";

				String dbUser_tOracleInput_14 = context.db_origen_Login;

				

				
	final String decryptedPassword_tOracleInput_14 = context.db_origen_Password; 

				String dbPwd_tOracleInput_14 = decryptedPassword_tOracleInput_14;

				
					java.util.Properties atnParamsPrope_tOracleInput_14 = new java.util.Properties();
					atnParamsPrope_tOracleInput_14.put("user",dbUser_tOracleInput_14);
					atnParamsPrope_tOracleInput_14.put("password",dbPwd_tOracleInput_14);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleInput_14.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
					conn_tOracleInput_14 = java.sql.DriverManager.getConnection(url_tOracleInput_14, atnParamsPrope_tOracleInput_14);
				java.sql.Statement stmtGetTZ_tOracleInput_14 = conn_tOracleInput_14.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_14 = stmtGetTZ_tOracleInput_14.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_14 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_14.next()) {
					sessionTimezone_tOracleInput_14 = rsGetTZ_tOracleInput_14.getString(1);
				}
                                if (!(conn_tOracleInput_14 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_14.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_14.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_14.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_14);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_14).setSessionTimeZone(sessionTimezone_tOracleInput_14);
                                }
		    
			java.sql.Statement stmt_tOracleInput_14 = conn_tOracleInput_14.createStatement();

		    String dbquery_tOracleInput_14 = "SELECT \nHA.ID\nFROM ACM_HAUDITORIAS HA \nINNER JOIN ACM_AUDITORIAS AU ON AU.HAUDITORIAS_ID = HA.ID AND HA.ESTREGISTRO_"
+"ID = 1\nINNER JOIN ACM_RECEPCION RE  ON RE.ID = HA.RECEPCION_ID  \nINNER JOIN ACM_ESTAUDITORIAS ES ON ES.ID = HA.ESTAUDI"
+"TORIA_ID\nINNER JOIN ACM_ETAPASNORMATIVIDAD EN ON EN.ID = HA.ETAPASNORMATIVIDAD_ID AND EN.ESTREGISTRO_ID = 1\nWHERE \nES"
+".NOMBRE = 'Finalizada'\nAND (HA.EJECUCION = 0 OR HA.EJECUCION IS NULL )\nAND  (HA.VRATIFICADO = 0 OR (HA.VRATIFICADO = 0"
+" AND HA.VLGOSADO = 0 AND EN.CODIGO = 1))\nAND (EN.RESPONSABLE = 'AUDITOR' OR HA.TIPO = 'Conciliación')";
		    

		    globalMap.put("tOracleInput_14_QUERY",dbquery_tOracleInput_14);

		    java.sql.ResultSet rs_tOracleInput_14 = null;

		    try {
		    	rs_tOracleInput_14 = stmt_tOracleInput_14.executeQuery(dbquery_tOracleInput_14);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_14 = rs_tOracleInput_14.getMetaData();
		    	int colQtyInRs_tOracleInput_14 = rsmd_tOracleInput_14.getColumnCount();

		    String tmpContent_tOracleInput_14 = null;
		    
		    
		    while (rs_tOracleInput_14.next()) {
		        nb_line_tOracleInput_14++;
		        
							if(colQtyInRs_tOracleInput_14 < 1) {
								row25.ID = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(1) != null) {
						row25.ID = rs_tOracleInput_14.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
					




 



/**
 * [tOracleInput_14 begin ] stop
 */
	
	/**
	 * [tOracleInput_14 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 


	tos_count_tOracleInput_14++;

/**
 * [tOracleInput_14 main ] stop
 */
	
	/**
	 * [tOracleInput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 



/**
 * [tOracleInput_14 process_data_begin ] stop
 */

	
	/**
	 * [tMap_12 main ] start
	 */

	

	
	
	currentComponent="tMap_12";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row25"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_12 = false;
		boolean mainRowRejected_tMap_12 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_12__Struct Var = Var__tMap_12;// ###############################
        // ###############################
        // # Output tables

copyOfUpd = null;


// # Output table : 'copyOfUpd'
copyOfUpd_tmp.ID = row25.ID ;
copyOfUpd_tmp.EJECUCION = new BigDecimal(1);
copyOfUpd = copyOfUpd_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_12 = false;










 


	tos_count_tMap_12++;

/**
 * [tMap_12 main ] stop
 */
	
	/**
	 * [tMap_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_12";
	
	

 



/**
 * [tMap_12 process_data_begin ] stop
 */
// Start of branch "copyOfUpd"
if(copyOfUpd != null) { 



	
	/**
	 * [tOracleOutput_14 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_14";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfUpd"
						
						);
					}
					



        whetherReject_tOracleOutput_14 = false;
                    pstmt_tOracleOutput_14.setBigDecimal(1, copyOfUpd.EJECUCION);


                    pstmt_tOracleOutput_14.setBigDecimal(2 + count_tOracleOutput_14, copyOfUpd.ID);

                pstmt_tOracleOutput_14.addBatch();
                nb_line_tOracleOutput_14++;
                batchSizeCounter_tOracleOutput_14++;
            if (batchSize_tOracleOutput_14 > 0 &&  batchSize_tOracleOutput_14 <= batchSizeCounter_tOracleOutput_14) {
                try {
                    pstmt_tOracleOutput_14.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_14){
globalMap.put("tOracleOutput_14_ERROR_MESSAGE",e_tOracleOutput_14.getMessage());
			        java.sql.SQLException ne_tOracleOutput_14 = e_tOracleOutput_14.getNextException(),sqle_tOracleOutput_14=null;
			    	String errormessage_tOracleOutput_14;
					if (ne_tOracleOutput_14 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_14 = new java.sql.SQLException(e_tOracleOutput_14.getMessage() + "\ncaused by: " + ne_tOracleOutput_14.getMessage(), ne_tOracleOutput_14.getSQLState(), ne_tOracleOutput_14.getErrorCode(), ne_tOracleOutput_14);
						errormessage_tOracleOutput_14 = sqle_tOracleOutput_14.getMessage();
					}else{
						errormessage_tOracleOutput_14 = e_tOracleOutput_14.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_14);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_14 = pstmt_tOracleOutput_14.getUpdateCount();
                    updatedCount_tOracleOutput_14
                += (tmp_batchUpdateCount_tOracleOutput_14!=-1?tmp_batchUpdateCount_tOracleOutput_14:0);
                rowsToCommitCount_tOracleOutput_14 += (tmp_batchUpdateCount_tOracleOutput_14!=-1?tmp_batchUpdateCount_tOracleOutput_14:0);
                batchSizeCounter_tOracleOutput_14 = 0;
            }
                commitCounter_tOracleOutput_14++;
                if(commitEvery_tOracleOutput_14 <= commitCounter_tOracleOutput_14) {
                    if(batchSizeCounter_tOracleOutput_14 > 0) {
                        try {
                            pstmt_tOracleOutput_14.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_14){
globalMap.put("tOracleOutput_14_ERROR_MESSAGE",e_tOracleOutput_14.getMessage());
					        java.sql.SQLException ne_tOracleOutput_14 = e_tOracleOutput_14.getNextException(),sqle_tOracleOutput_14=null;
					    	String errormessage_tOracleOutput_14;
							if (ne_tOracleOutput_14 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_14 = new java.sql.SQLException(e_tOracleOutput_14.getMessage() + "\ncaused by: " + ne_tOracleOutput_14.getMessage(), ne_tOracleOutput_14.getSQLState(), ne_tOracleOutput_14.getErrorCode(), ne_tOracleOutput_14);
								errormessage_tOracleOutput_14 = sqle_tOracleOutput_14.getMessage();
							}else{
								errormessage_tOracleOutput_14 = e_tOracleOutput_14.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_14);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_14 = pstmt_tOracleOutput_14.getUpdateCount();
                            updatedCount_tOracleOutput_14
                        += (tmp_batchUpdateCount_tOracleOutput_14!=-1?tmp_batchUpdateCount_tOracleOutput_14:0);
                        rowsToCommitCount_tOracleOutput_14 += (tmp_batchUpdateCount_tOracleOutput_14!=-1?tmp_batchUpdateCount_tOracleOutput_14:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_14 != 0){
                    	
                    }
                    conn_tOracleOutput_14.commit();
                    if(rowsToCommitCount_tOracleOutput_14 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_14 = 0;
                    }
                    commitCounter_tOracleOutput_14=0;
                    	batchSizeCounter_tOracleOutput_14=0;
                }

 


	tos_count_tOracleOutput_14++;

/**
 * [tOracleOutput_14 main ] stop
 */
	
	/**
	 * [tOracleOutput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_14";
	
	

 



/**
 * [tOracleOutput_14 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_14";
	
	

 



/**
 * [tOracleOutput_14 process_data_end ] stop
 */

} // End of branch "copyOfUpd"




	
	/**
	 * [tMap_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_12";
	
	

 



/**
 * [tMap_12 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 



/**
 * [tOracleInput_14 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_14 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

}
}finally{
	if (rs_tOracleInput_14 != null) {
		rs_tOracleInput_14.close();
	}
	if (stmt_tOracleInput_14 != null) {
		stmt_tOracleInput_14.close();
	}
	if(conn_tOracleInput_14 != null && !conn_tOracleInput_14.isClosed()) {
	
			conn_tOracleInput_14.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tOracleInput_14_NB_LINE",nb_line_tOracleInput_14);
 

ok_Hash.put("tOracleInput_14", true);
end_Hash.put("tOracleInput_14", System.currentTimeMillis());




/**
 * [tOracleInput_14 end ] stop
 */

	
	/**
	 * [tMap_12 end ] start
	 */

	

	
	
	currentComponent="tMap_12";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row25");
			  	}
			  	
 

ok_Hash.put("tMap_12", true);
end_Hash.put("tMap_12", System.currentTimeMillis());




/**
 * [tMap_12 end ] stop
 */

	
	/**
	 * [tOracleOutput_14 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_14";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_14 > 0) {
            try {
            	if (pstmt_tOracleOutput_14 != null) {
					
					pstmt_tOracleOutput_14.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_14){
globalMap.put("tOracleOutput_14_ERROR_MESSAGE",e_tOracleOutput_14.getMessage());
		        java.sql.SQLException ne_tOracleOutput_14 = e_tOracleOutput_14.getNextException(),sqle_tOracleOutput_14=null;
		    	String errormessage_tOracleOutput_14;
				if (ne_tOracleOutput_14 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_14 = new java.sql.SQLException(e_tOracleOutput_14.getMessage() + "\ncaused by: " + ne_tOracleOutput_14.getMessage(), ne_tOracleOutput_14.getSQLState(), ne_tOracleOutput_14.getErrorCode(), ne_tOracleOutput_14);
					errormessage_tOracleOutput_14 = sqle_tOracleOutput_14.getMessage();
				}else{
					errormessage_tOracleOutput_14 = e_tOracleOutput_14.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_14);
            	
        	}
        	if (pstmt_tOracleOutput_14 != null) {
            	tmp_batchUpdateCount_tOracleOutput_14 = pstmt_tOracleOutput_14.getUpdateCount();
    	    	
    	    		updatedCount_tOracleOutput_14
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_14!=-1?tmp_batchUpdateCount_tOracleOutput_14:0);
				rowsToCommitCount_tOracleOutput_14 += (tmp_batchUpdateCount_tOracleOutput_14!=-1?tmp_batchUpdateCount_tOracleOutput_14:0);
            }
        }
        if(pstmt_tOracleOutput_14 != null) {
			
				pstmt_tOracleOutput_14.close();
				resourceMap.remove("pstmt_tOracleOutput_14");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_14", true);
		if(commitCounter_tOracleOutput_14 > 0 && rowsToCommitCount_tOracleOutput_14 != 0) {
			
		}
		conn_tOracleOutput_14.commit();
		if(commitCounter_tOracleOutput_14 > 0 && rowsToCommitCount_tOracleOutput_14 != 0) {
			
			rowsToCommitCount_tOracleOutput_14 = 0;
		}
		commitCounter_tOracleOutput_14 = 0;
		
		
		conn_tOracleOutput_14 .close();
		
		resourceMap.put("finish_tOracleOutput_14", true);
   	

	
	nb_line_deleted_tOracleOutput_14=nb_line_deleted_tOracleOutput_14+ deletedCount_tOracleOutput_14;
	nb_line_update_tOracleOutput_14=nb_line_update_tOracleOutput_14 + updatedCount_tOracleOutput_14;
	nb_line_inserted_tOracleOutput_14=nb_line_inserted_tOracleOutput_14 + insertedCount_tOracleOutput_14;
	nb_line_rejected_tOracleOutput_14=nb_line_rejected_tOracleOutput_14 + rejectedCount_tOracleOutput_14;
	
        globalMap.put("tOracleOutput_14_NB_LINE",nb_line_tOracleOutput_14);
        globalMap.put("tOracleOutput_14_NB_LINE_UPDATED",nb_line_update_tOracleOutput_14);
        globalMap.put("tOracleOutput_14_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_14);
        globalMap.put("tOracleOutput_14_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_14);
        globalMap.put("tOracleOutput_14_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_14);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfUpd");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_14", true);
end_Hash.put("tOracleOutput_14", System.currentTimeMillis());




/**
 * [tOracleOutput_14 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_14 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 



/**
 * [tOracleInput_14 finally ] stop
 */

	
	/**
	 * [tMap_12 finally ] start
	 */

	

	
	
	currentComponent="tMap_12";
	
	

 



/**
 * [tMap_12 finally ] stop
 */

	
	/**
	 * [tOracleOutput_14 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_14";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_14") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_14 = null;
                if ((pstmtToClose_tOracleOutput_14 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_14")) != null) {
                    pstmtToClose_tOracleOutput_14.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_14") == null){
            java.sql.Connection ctn_tOracleOutput_14 = null;
            if((ctn_tOracleOutput_14 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_14")) != null){
                try {
                    ctn_tOracleOutput_14.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_14) {
                    String errorMessage_tOracleOutput_14 = "failed to close the connection in tOracleOutput_14 :" + sqlEx_tOracleOutput_14.getMessage();
                    System.err.println(errorMessage_tOracleOutput_14);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_14 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_14_SUBPROCESS_STATE", 1);
	}
	


public static class row10Struct implements routines.system.IPersistableComparableLookupRow<row10Struct> {
    final static byte[] commonByteArrayLock_ACM_INICIAL_Inicial = new byte[0];
    static byte[] commonByteArray_ACM_INICIAL_Inicial = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal AUDITORIAS_ID;

				public BigDecimal getAUDITORIAS_ID () {
					return this.AUDITORIAS_ID;
				}

				public Boolean AUDITORIAS_IDIsNullable(){
				    return false;
				}
				public Boolean AUDITORIAS_IDIsKey(){
				    return false;
				}
				public Integer AUDITORIAS_IDLength(){
				    return null;
				}
				public Integer AUDITORIAS_IDPrecision(){
				    return null;
				}
				public String AUDITORIAS_IDDefault(){
				
					return "";
				
				}
				public String AUDITORIAS_IDComment(){
				
				    return "";
				
				}
				public String AUDITORIAS_IDPattern(){
				
					return "";
				
				}
				public String AUDITORIAS_IDOriginalDbColumnName(){
				
					return "AUDITORIAS_ID";
				
				}

				
			    public BigDecimal ETAPASNORMATIVIDAD_ID;

				public BigDecimal getETAPASNORMATIVIDAD_ID () {
					return this.ETAPASNORMATIVIDAD_ID;
				}

				public Boolean ETAPASNORMATIVIDAD_IDIsNullable(){
				    return false;
				}
				public Boolean ETAPASNORMATIVIDAD_IDIsKey(){
				    return false;
				}
				public Integer ETAPASNORMATIVIDAD_IDLength(){
				    return null;
				}
				public Integer ETAPASNORMATIVIDAD_IDPrecision(){
				    return null;
				}
				public String ETAPASNORMATIVIDAD_IDDefault(){
				
					return "";
				
				}
				public String ETAPASNORMATIVIDAD_IDComment(){
				
				    return "";
				
				}
				public String ETAPASNORMATIVIDAD_IDPattern(){
				
					return "";
				
				}
				public String ETAPASNORMATIVIDAD_IDOriginalDbColumnName(){
				
					return "ETAPASNORMATIVIDAD_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.AUDITORIAS_ID == null) ? 0 : this.AUDITORIAS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row10Struct other = (row10Struct) obj;
		
						if (this.AUDITORIAS_ID == null) {
							if (other.AUDITORIAS_ID != null)
								return false;
						
						} else if (!this.AUDITORIAS_ID.equals(other.AUDITORIAS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row10Struct other) {

		other.ID = this.ID;
	            other.AUDITORIAS_ID = this.AUDITORIAS_ID;
	            other.ETAPASNORMATIVIDAD_ID = this.ETAPASNORMATIVIDAD_ID;
	            
	}

	public void copyKeysDataTo(row10Struct other) {

		other.AUDITORIAS_ID = this.AUDITORIAS_ID;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.AUDITORIAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.AUDITORIAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.AUDITORIAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AUDITORIAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
       			    	this.ETAPASNORMATIVIDAD_ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
       			    	this.ETAPASNORMATIVIDAD_ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
       			    	oos.writeObject(this.ETAPASNORMATIVIDAD_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ETAPASNORMATIVIDAD_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",AUDITORIAS_ID="+String.valueOf(AUDITORIAS_ID));
		sb.append(",ETAPASNORMATIVIDAD_ID="+String.valueOf(ETAPASNORMATIVIDAD_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.AUDITORIAS_ID, other.AUDITORIAS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row10Struct row10 = new row10Struct();




	
	/**
	 * [tAdvancedHash_row10 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row10", false);
		start_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row10";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tAdvancedHash_row10 = 0;
		

			   		// connection name:row10
			   		// source node:tHashInput_2 - inputs:(after_tOracleInput_1) outputs:(row10,row10) | target node:tAdvancedHash_row10 - inputs:(row10) outputs:()
			   		// linked node: tMap_1 - inputs:(row6,row10) outputs:(InsHglosaCausada)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row10 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row10Struct>getLookup(matchingModeEnum_row10);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row10", tHash_Lookup_row10);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row10 begin ] stop
 */



	
	/**
	 * [tHashInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_2", false);
		start_Hash.put("tHashInput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_2";
	
	
		int tos_count_tHashInput_2 = 0;
		


int nb_line_tHashInput_2 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row8Struct> tHashFile_tHashInput_2 = mf_tHashInput_2.getAdvancedMemoryHashFile("tHashFile_Inicial_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_2==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row8Struct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
while (iterator_tHashInput_2.hasNext()) {
    row8Struct next_tHashInput_2 = iterator_tHashInput_2.next();

	row10.ID = next_tHashInput_2.ID;
	row10.AUDITORIAS_ID = next_tHashInput_2.AUDITORIAS_ID;
	row10.ETAPASNORMATIVIDAD_ID = next_tHashInput_2.ETAPASNORMATIVIDAD_ID;

 



/**
 * [tHashInput_2 begin ] stop
 */
	
	/**
	 * [tHashInput_2 main ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 


	tos_count_tHashInput_2++;

/**
 * [tHashInput_2 main ] stop
 */
	
	/**
	 * [tHashInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row10 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					


			   
			   

					row10Struct row10_HashRow = new row10Struct();
		   	   	   
				
				row10_HashRow.ID = row10.ID;
				
				row10_HashRow.AUDITORIAS_ID = row10.AUDITORIAS_ID;
				
				row10_HashRow.ETAPASNORMATIVIDAD_ID = row10.ETAPASNORMATIVIDAD_ID;
				
			tHash_Lookup_row10.put(row10_HashRow);
			
            




 


	tos_count_tAdvancedHash_row10++;

/**
 * [tAdvancedHash_row10 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";
	
	

 



/**
 * [tAdvancedHash_row10 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row10 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";
	
	

 



/**
 * [tAdvancedHash_row10 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_2 end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	
    

		
			nb_line_tHashInput_2++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_Inicial_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);       

 

ok_Hash.put("tHashInput_2", true);
end_Hash.put("tHashInput_2", System.currentTimeMillis());




/**
 * [tHashInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row10 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";
	
	

tHash_Lookup_row10.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row10", true);
end_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());




/**
 * [tAdvancedHash_row10 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row10 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";
	
	

 



/**
 * [tAdvancedHash_row10 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row13Struct implements routines.system.IPersistableComparableLookupRow<row13Struct> {
    final static byte[] commonByteArrayLock_ACM_INICIAL_Inicial = new byte[0];
    static byte[] commonByteArray_ACM_INICIAL_Inicial = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal AUDITORIAS_ID;

				public BigDecimal getAUDITORIAS_ID () {
					return this.AUDITORIAS_ID;
				}

				public Boolean AUDITORIAS_IDIsNullable(){
				    return false;
				}
				public Boolean AUDITORIAS_IDIsKey(){
				    return false;
				}
				public Integer AUDITORIAS_IDLength(){
				    return 0;
				}
				public Integer AUDITORIAS_IDPrecision(){
				    return null;
				}
				public String AUDITORIAS_IDDefault(){
				
					return "";
				
				}
				public String AUDITORIAS_IDComment(){
				
				    return "";
				
				}
				public String AUDITORIAS_IDPattern(){
				
					return "";
				
				}
				public String AUDITORIAS_IDOriginalDbColumnName(){
				
					return "AUDITORIAS_ID";
				
				}

				
			    public BigDecimal ETAPASNORMATIVIDAD_ID;

				public BigDecimal getETAPASNORMATIVIDAD_ID () {
					return this.ETAPASNORMATIVIDAD_ID;
				}

				public Boolean ETAPASNORMATIVIDAD_IDIsNullable(){
				    return false;
				}
				public Boolean ETAPASNORMATIVIDAD_IDIsKey(){
				    return false;
				}
				public Integer ETAPASNORMATIVIDAD_IDLength(){
				    return 0;
				}
				public Integer ETAPASNORMATIVIDAD_IDPrecision(){
				    return null;
				}
				public String ETAPASNORMATIVIDAD_IDDefault(){
				
					return "";
				
				}
				public String ETAPASNORMATIVIDAD_IDComment(){
				
				    return "";
				
				}
				public String ETAPASNORMATIVIDAD_IDPattern(){
				
					return "";
				
				}
				public String ETAPASNORMATIVIDAD_IDOriginalDbColumnName(){
				
					return "ETAPASNORMATIVIDAD_ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return false;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return 0;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 0;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.AUDITORIAS_ID == null) ? 0 : this.AUDITORIAS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row13Struct other = (row13Struct) obj;
		
						if (this.AUDITORIAS_ID == null) {
							if (other.AUDITORIAS_ID != null)
								return false;
						
						} else if (!this.AUDITORIAS_ID.equals(other.AUDITORIAS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row13Struct other) {

		other.ID = this.ID;
	            other.AUDITORIAS_ID = this.AUDITORIAS_ID;
	            other.ETAPASNORMATIVIDAD_ID = this.ETAPASNORMATIVIDAD_ID;
	            other.RECEPCION_ID = this.RECEPCION_ID;
	            other.USUARIOS_ID = this.USUARIOS_ID;
	            other.UORG_ID = this.UORG_ID;
	            
	}

	public void copyKeysDataTo(row13Struct other) {

		other.AUDITORIAS_ID = this.AUDITORIAS_ID;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.AUDITORIAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.AUDITORIAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.AUDITORIAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AUDITORIAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
       			    	this.ETAPASNORMATIVIDAD_ID = (BigDecimal) ois.readObject();
					
       			    	this.RECEPCION_ID = (BigDecimal) ois.readObject();
					
       			    	this.USUARIOS_ID = (BigDecimal) ois.readObject();
					
       			    	this.UORG_ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
       			    	this.ETAPASNORMATIVIDAD_ID = (BigDecimal) objectIn.readObject();
					
       			    	this.RECEPCION_ID = (BigDecimal) objectIn.readObject();
					
       			    	this.USUARIOS_ID = (BigDecimal) objectIn.readObject();
					
       			    	this.UORG_ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
       			    	oos.writeObject(this.ETAPASNORMATIVIDAD_ID);
					
       			    	oos.writeObject(this.RECEPCION_ID);
					
       			    	oos.writeObject(this.USUARIOS_ID);
					
       			    	oos.writeObject(this.UORG_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ETAPASNORMATIVIDAD_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.RECEPCION_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.USUARIOS_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.UORG_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",AUDITORIAS_ID="+String.valueOf(AUDITORIAS_ID));
		sb.append(",ETAPASNORMATIVIDAD_ID="+String.valueOf(ETAPASNORMATIVIDAD_ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.AUDITORIAS_ID, other.AUDITORIAS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row13Struct row13 = new row13Struct();




	
	/**
	 * [tAdvancedHash_row13 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row13", false);
		start_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row13";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tAdvancedHash_row13 = 0;
		

			   		// connection name:row13
			   		// source node:tHashInput_1 - inputs:(after_tOracleInput_2) outputs:(row13,row13) | target node:tAdvancedHash_row13 - inputs:(row13) outputs:()
			   		// linked node: tMap_4 - inputs:(row2,row13) outputs:(InsHD,out2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row13 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row13Struct>getLookup(matchingModeEnum_row13);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row13", tHash_Lookup_row13);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row13 begin ] stop
 */



	
	/**
	 * [tHashInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_1", false);
		start_Hash.put("tHashInput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_1";
	
	
		int tos_count_tHashInput_1 = 0;
		


int nb_line_tHashInput_1 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row8Struct> tHashFile_tHashInput_1 = mf_tHashInput_1.getAdvancedMemoryHashFile("tHashFile_Inicial_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_1==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row8Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
while (iterator_tHashInput_1.hasNext()) {
    row8Struct next_tHashInput_1 = iterator_tHashInput_1.next();

	row13.ID = next_tHashInput_1.ID;
	row13.AUDITORIAS_ID = next_tHashInput_1.AUDITORIAS_ID;
	row13.ETAPASNORMATIVIDAD_ID = next_tHashInput_1.ETAPASNORMATIVIDAD_ID;
	row13.RECEPCION_ID = next_tHashInput_1.RECEPCION_ID;
	row13.USUARIOS_ID = next_tHashInput_1.USUARIOS_ID;
	row13.UORG_ID = next_tHashInput_1.UORG_ID;

 



/**
 * [tHashInput_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 main ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 


	tos_count_tHashInput_1++;

/**
 * [tHashInput_1 main ] stop
 */
	
	/**
	 * [tHashInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row13"
						
						);
					}
					


			   
			   

					row13Struct row13_HashRow = new row13Struct();
		   	   	   
				
				row13_HashRow.ID = row13.ID;
				
				row13_HashRow.AUDITORIAS_ID = row13.AUDITORIAS_ID;
				
				row13_HashRow.ETAPASNORMATIVIDAD_ID = row13.ETAPASNORMATIVIDAD_ID;
				
				row13_HashRow.RECEPCION_ID = row13.RECEPCION_ID;
				
				row13_HashRow.USUARIOS_ID = row13.USUARIOS_ID;
				
				row13_HashRow.UORG_ID = row13.UORG_ID;
				
			tHash_Lookup_row13.put(row13_HashRow);
			
            




 


	tos_count_tAdvancedHash_row13++;

/**
 * [tAdvancedHash_row13 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	

 



/**
 * [tAdvancedHash_row13 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row13 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	

 



/**
 * [tAdvancedHash_row13 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_1 end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	
    

		
			nb_line_tHashInput_1++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_Inicial_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);       

 

ok_Hash.put("tHashInput_1", true);
end_Hash.put("tHashInput_1", System.currentTimeMillis());




/**
 * [tHashInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	

tHash_Lookup_row13.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row13", true);
end_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());




/**
 * [tAdvancedHash_row13 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	

 



/**
 * [tAdvancedHash_row13 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row15Struct implements routines.system.IPersistableComparableLookupRow<row15Struct> {
    final static byte[] commonByteArrayLock_ACM_INICIAL_Inicial = new byte[0];
    static byte[] commonByteArray_ACM_INICIAL_Inicial = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal AUDITORIAS_ID;

				public BigDecimal getAUDITORIAS_ID () {
					return this.AUDITORIAS_ID;
				}

				public Boolean AUDITORIAS_IDIsNullable(){
				    return false;
				}
				public Boolean AUDITORIAS_IDIsKey(){
				    return false;
				}
				public Integer AUDITORIAS_IDLength(){
				    return null;
				}
				public Integer AUDITORIAS_IDPrecision(){
				    return null;
				}
				public String AUDITORIAS_IDDefault(){
				
					return "";
				
				}
				public String AUDITORIAS_IDComment(){
				
				    return "";
				
				}
				public String AUDITORIAS_IDPattern(){
				
					return "";
				
				}
				public String AUDITORIAS_IDOriginalDbColumnName(){
				
					return "AUDITORIAS_ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return false;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return null;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal ESTAUDITORIAS_ID;

				public BigDecimal getESTAUDITORIAS_ID () {
					return this.ESTAUDITORIAS_ID;
				}

				public Boolean ESTAUDITORIAS_IDIsNullable(){
				    return true;
				}
				public Boolean ESTAUDITORIAS_IDIsKey(){
				    return false;
				}
				public Integer ESTAUDITORIAS_IDLength(){
				    return null;
				}
				public Integer ESTAUDITORIAS_IDPrecision(){
				    return null;
				}
				public String ESTAUDITORIAS_IDDefault(){
				
					return "";
				
				}
				public String ESTAUDITORIAS_IDComment(){
				
				    return "";
				
				}
				public String ESTAUDITORIAS_IDPattern(){
				
					return "";
				
				}
				public String ESTAUDITORIAS_IDOriginalDbColumnName(){
				
					return "ESTAUDITORIAS_ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return null;
				}
				public Integer FECHAPrecision(){
				    return null;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public BigDecimal CAMBIO_ETAPA;

				public BigDecimal getCAMBIO_ETAPA () {
					return this.CAMBIO_ETAPA;
				}

				public Boolean CAMBIO_ETAPAIsNullable(){
				    return true;
				}
				public Boolean CAMBIO_ETAPAIsKey(){
				    return false;
				}
				public Integer CAMBIO_ETAPALength(){
				    return null;
				}
				public Integer CAMBIO_ETAPAPrecision(){
				    return null;
				}
				public String CAMBIO_ETAPADefault(){
				
					return "";
				
				}
				public String CAMBIO_ETAPAComment(){
				
				    return "";
				
				}
				public String CAMBIO_ETAPAPattern(){
				
					return "";
				
				}
				public String CAMBIO_ETAPAOriginalDbColumnName(){
				
					return "CAMBIO_ETAPA";
				
				}

				
			    public BigDecimal CODIGO_ETAPA;

				public BigDecimal getCODIGO_ETAPA () {
					return this.CODIGO_ETAPA;
				}

				public Boolean CODIGO_ETAPAIsNullable(){
				    return false;
				}
				public Boolean CODIGO_ETAPAIsKey(){
				    return false;
				}
				public Integer CODIGO_ETAPALength(){
				    return null;
				}
				public Integer CODIGO_ETAPAPrecision(){
				    return null;
				}
				public String CODIGO_ETAPADefault(){
				
					return "";
				
				}
				public String CODIGO_ETAPAComment(){
				
				    return "";
				
				}
				public String CODIGO_ETAPAPattern(){
				
					return "";
				
				}
				public String CODIGO_ETAPAOriginalDbColumnName(){
				
					return "CODIGO_ETAPA";
				
				}

				
			    public String RESPONSABLE;

				public String getRESPONSABLE () {
					return this.RESPONSABLE;
				}

				public Boolean RESPONSABLEIsNullable(){
				    return true;
				}
				public Boolean RESPONSABLEIsKey(){
				    return false;
				}
				public Integer RESPONSABLELength(){
				    return null;
				}
				public Integer RESPONSABLEPrecision(){
				    return null;
				}
				public String RESPONSABLEDefault(){
				
					return null;
				
				}
				public String RESPONSABLEComment(){
				
				    return "";
				
				}
				public String RESPONSABLEPattern(){
				
					return "";
				
				}
				public String RESPONSABLEOriginalDbColumnName(){
				
					return "RESPONSABLE";
				
				}

				
			    public String RESPONSABLE_CDP;

				public String getRESPONSABLE_CDP () {
					return this.RESPONSABLE_CDP;
				}

				public Boolean RESPONSABLE_CDPIsNullable(){
				    return true;
				}
				public Boolean RESPONSABLE_CDPIsKey(){
				    return false;
				}
				public Integer RESPONSABLE_CDPLength(){
				    return null;
				}
				public Integer RESPONSABLE_CDPPrecision(){
				    return null;
				}
				public String RESPONSABLE_CDPDefault(){
				
					return null;
				
				}
				public String RESPONSABLE_CDPComment(){
				
				    return "";
				
				}
				public String RESPONSABLE_CDPPattern(){
				
					return "";
				
				}
				public String RESPONSABLE_CDPOriginalDbColumnName(){
				
					return "RESPONSABLE_CDP";
				
				}

				
			    public String TIPO_ETAPA;

				public String getTIPO_ETAPA () {
					return this.TIPO_ETAPA;
				}

				public Boolean TIPO_ETAPAIsNullable(){
				    return true;
				}
				public Boolean TIPO_ETAPAIsKey(){
				    return false;
				}
				public Integer TIPO_ETAPALength(){
				    return null;
				}
				public Integer TIPO_ETAPAPrecision(){
				    return null;
				}
				public String TIPO_ETAPADefault(){
				
					return null;
				
				}
				public String TIPO_ETAPAComment(){
				
				    return "";
				
				}
				public String TIPO_ETAPAPattern(){
				
					return "";
				
				}
				public String TIPO_ETAPAOriginalDbColumnName(){
				
					return "TIPO_ETAPA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.RECEPCION_ID == null) ? 0 : this.RECEPCION_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row15Struct other = (row15Struct) obj;
		
						if (this.RECEPCION_ID == null) {
							if (other.RECEPCION_ID != null)
								return false;
						
						} else if (!this.RECEPCION_ID.equals(other.RECEPCION_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row15Struct other) {

		other.ID = this.ID;
	            other.AUDITORIAS_ID = this.AUDITORIAS_ID;
	            other.RECEPCION_ID = this.RECEPCION_ID;
	            other.USUARIOS_ID = this.USUARIOS_ID;
	            other.UORG_ID = this.UORG_ID;
	            other.ESTAUDITORIAS_ID = this.ESTAUDITORIAS_ID;
	            other.FECHA = this.FECHA;
	            other.CAMBIO_ETAPA = this.CAMBIO_ETAPA;
	            other.CODIGO_ETAPA = this.CODIGO_ETAPA;
	            other.RESPONSABLE = this.RESPONSABLE;
	            other.RESPONSABLE_CDP = this.RESPONSABLE_CDP;
	            other.TIPO_ETAPA = this.TIPO_ETAPA;
	            
	}

	public void copyKeysDataTo(row15Struct other) {

		other.RECEPCION_ID = this.RECEPCION_ID;
	            	
	}




	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
       			    	this.AUDITORIAS_ID = (BigDecimal) ois.readObject();
					
       			    	this.USUARIOS_ID = (BigDecimal) ois.readObject();
					
       			    	this.UORG_ID = (BigDecimal) ois.readObject();
					
       			    	this.ESTAUDITORIAS_ID = (BigDecimal) ois.readObject();
					
						this.FECHA = readDate(dis,ois);
					
       			    	this.CAMBIO_ETAPA = (BigDecimal) ois.readObject();
					
       			    	this.CODIGO_ETAPA = (BigDecimal) ois.readObject();
					
						this.RESPONSABLE = readString(dis,ois);
					
						this.RESPONSABLE_CDP = readString(dis,ois);
					
						this.TIPO_ETAPA = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
       			    	this.AUDITORIAS_ID = (BigDecimal) objectIn.readObject();
					
       			    	this.USUARIOS_ID = (BigDecimal) objectIn.readObject();
					
       			    	this.UORG_ID = (BigDecimal) objectIn.readObject();
					
       			    	this.ESTAUDITORIAS_ID = (BigDecimal) objectIn.readObject();
					
						this.FECHA = readDate(dis,objectIn);
					
       			    	this.CAMBIO_ETAPA = (BigDecimal) objectIn.readObject();
					
       			    	this.CODIGO_ETAPA = (BigDecimal) objectIn.readObject();
					
						this.RESPONSABLE = readString(dis,objectIn);
					
						this.RESPONSABLE_CDP = readString(dis,objectIn);
					
						this.TIPO_ETAPA = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
       			    	oos.writeObject(this.AUDITORIAS_ID);
					
       			    	oos.writeObject(this.USUARIOS_ID);
					
       			    	oos.writeObject(this.UORG_ID);
					
       			    	oos.writeObject(this.ESTAUDITORIAS_ID);
					
						writeDate(this.FECHA, dos, oos);
					
       			    	oos.writeObject(this.CAMBIO_ETAPA);
					
       			    	oos.writeObject(this.CODIGO_ETAPA);
					
						writeString(this.RESPONSABLE, dos, oos);
					
						writeString(this.RESPONSABLE_CDP, dos, oos);
					
						writeString(this.TIPO_ETAPA, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.AUDITORIAS_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.USUARIOS_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.UORG_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ESTAUDITORIAS_ID);
					
						writeDate(this.FECHA, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.CAMBIO_ETAPA);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.CODIGO_ETAPA);
					
						writeString(this.RESPONSABLE, dos, objectOut);
					
						writeString(this.RESPONSABLE_CDP, dos, objectOut);
					
						writeString(this.TIPO_ETAPA, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",AUDITORIAS_ID="+String.valueOf(AUDITORIAS_ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",ESTAUDITORIAS_ID="+String.valueOf(ESTAUDITORIAS_ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",CAMBIO_ETAPA="+String.valueOf(CAMBIO_ETAPA));
		sb.append(",CODIGO_ETAPA="+String.valueOf(CODIGO_ETAPA));
		sb.append(",RESPONSABLE="+RESPONSABLE);
		sb.append(",RESPONSABLE_CDP="+RESPONSABLE_CDP);
		sb.append(",TIPO_ETAPA="+TIPO_ETAPA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.RECEPCION_ID, other.RECEPCION_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row15Struct row15 = new row15Struct();




	
	/**
	 * [tAdvancedHash_row15 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row15", false);
		start_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row15";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row15");
					}
				
		int tos_count_tAdvancedHash_row15 = 0;
		

			   		// connection name:row15
			   		// source node:tHashInput_4 - inputs:(after_tOracleInput_6) outputs:(row15,row15) | target node:tAdvancedHash_row15 - inputs:(row15) outputs:()
			   		// linked node: tMap_5 - inputs:(row14,row15,row16) outputs:(InsHfacturas)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row15 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row15Struct>getLookup(matchingModeEnum_row15);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row15", tHash_Lookup_row15);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row15 begin ] stop
 */



	
	/**
	 * [tHashInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_4", false);
		start_Hash.put("tHashInput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_4";
	
	
		int tos_count_tHashInput_4 = 0;
		


int nb_line_tHashInput_4 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row11Struct> tHashFile_tHashInput_4 = mf_tHashInput_4.getAdvancedMemoryHashFile("tHashFile_Inicial_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_4==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row11Struct> iterator_tHashInput_4 = tHashFile_tHashInput_4.iterator();
while (iterator_tHashInput_4.hasNext()) {
    row11Struct next_tHashInput_4 = iterator_tHashInput_4.next();

	row15.ID = next_tHashInput_4.ID;
	row15.AUDITORIAS_ID = next_tHashInput_4.AUDITORIAS_ID;
	row15.RECEPCION_ID = next_tHashInput_4.RECEPCION_ID;
	row15.USUARIOS_ID = next_tHashInput_4.USUARIOS_ID;
	row15.UORG_ID = next_tHashInput_4.UORG_ID;
	row15.ESTAUDITORIAS_ID = next_tHashInput_4.ESTAUDITORIAS_ID;
	row15.FECHA = next_tHashInput_4.FECHA;
	row15.CAMBIO_ETAPA = next_tHashInput_4.CAMBIO_ETAPA;
	row15.CODIGO_ETAPA = next_tHashInput_4.CODIGO_ETAPA;
	row15.RESPONSABLE = next_tHashInput_4.RESPONSABLE;
	row15.RESPONSABLE_CDP = next_tHashInput_4.RESPONSABLE_CDP;
	row15.TIPO_ETAPA = next_tHashInput_4.TIPO_ETAPA;

 



/**
 * [tHashInput_4 begin ] stop
 */
	
	/**
	 * [tHashInput_4 main ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 


	tos_count_tHashInput_4++;

/**
 * [tHashInput_4 main ] stop
 */
	
	/**
	 * [tHashInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row15 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row15"
						
						);
					}
					


			   
			   

					row15Struct row15_HashRow = new row15Struct();
		   	   	   
				
				row15_HashRow.ID = row15.ID;
				
				row15_HashRow.AUDITORIAS_ID = row15.AUDITORIAS_ID;
				
				row15_HashRow.RECEPCION_ID = row15.RECEPCION_ID;
				
				row15_HashRow.USUARIOS_ID = row15.USUARIOS_ID;
				
				row15_HashRow.UORG_ID = row15.UORG_ID;
				
				row15_HashRow.ESTAUDITORIAS_ID = row15.ESTAUDITORIAS_ID;
				
				row15_HashRow.FECHA = row15.FECHA;
				
				row15_HashRow.CAMBIO_ETAPA = row15.CAMBIO_ETAPA;
				
				row15_HashRow.CODIGO_ETAPA = row15.CODIGO_ETAPA;
				
				row15_HashRow.RESPONSABLE = row15.RESPONSABLE;
				
				row15_HashRow.RESPONSABLE_CDP = row15.RESPONSABLE_CDP;
				
				row15_HashRow.TIPO_ETAPA = row15.TIPO_ETAPA;
				
			tHash_Lookup_row15.put(row15_HashRow);
			
            




 


	tos_count_tAdvancedHash_row15++;

/**
 * [tAdvancedHash_row15 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	

 



/**
 * [tAdvancedHash_row15 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row15 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	

 



/**
 * [tAdvancedHash_row15 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_4 end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	
    

		
			nb_line_tHashInput_4++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_Inicial_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_4_NB_LINE", nb_line_tHashInput_4);       

 

ok_Hash.put("tHashInput_4", true);
end_Hash.put("tHashInput_4", System.currentTimeMillis());




/**
 * [tHashInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row15 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	

tHash_Lookup_row15.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row15");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row15", true);
end_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());




/**
 * [tAdvancedHash_row15 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row15 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	

 



/**
 * [tAdvancedHash_row15 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row16Struct implements routines.system.IPersistableComparableLookupRow<row16Struct> {
    final static byte[] commonByteArrayLock_ACM_INICIAL_Inicial = new byte[0];
    static byte[] commonByteArray_ACM_INICIAL_Inicial = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal AUDITORIAS_ID;

				public BigDecimal getAUDITORIAS_ID () {
					return this.AUDITORIAS_ID;
				}

				public Boolean AUDITORIAS_IDIsNullable(){
				    return false;
				}
				public Boolean AUDITORIAS_IDIsKey(){
				    return false;
				}
				public Integer AUDITORIAS_IDLength(){
				    return 0;
				}
				public Integer AUDITORIAS_IDPrecision(){
				    return null;
				}
				public String AUDITORIAS_IDDefault(){
				
					return "";
				
				}
				public String AUDITORIAS_IDComment(){
				
				    return "";
				
				}
				public String AUDITORIAS_IDPattern(){
				
					return "";
				
				}
				public String AUDITORIAS_IDOriginalDbColumnName(){
				
					return "AUDITORIAS_ID";
				
				}

				
			    public BigDecimal ETAPASNORMATIVIDAD_ID;

				public BigDecimal getETAPASNORMATIVIDAD_ID () {
					return this.ETAPASNORMATIVIDAD_ID;
				}

				public Boolean ETAPASNORMATIVIDAD_IDIsNullable(){
				    return false;
				}
				public Boolean ETAPASNORMATIVIDAD_IDIsKey(){
				    return false;
				}
				public Integer ETAPASNORMATIVIDAD_IDLength(){
				    return 0;
				}
				public Integer ETAPASNORMATIVIDAD_IDPrecision(){
				    return null;
				}
				public String ETAPASNORMATIVIDAD_IDDefault(){
				
					return "";
				
				}
				public String ETAPASNORMATIVIDAD_IDComment(){
				
				    return "";
				
				}
				public String ETAPASNORMATIVIDAD_IDPattern(){
				
					return "";
				
				}
				public String ETAPASNORMATIVIDAD_IDOriginalDbColumnName(){
				
					return "ETAPASNORMATIVIDAD_ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return false;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return 0;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 0;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.RECEPCION_ID == null) ? 0 : this.RECEPCION_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row16Struct other = (row16Struct) obj;
		
						if (this.RECEPCION_ID == null) {
							if (other.RECEPCION_ID != null)
								return false;
						
						} else if (!this.RECEPCION_ID.equals(other.RECEPCION_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row16Struct other) {

		other.ID = this.ID;
	            other.AUDITORIAS_ID = this.AUDITORIAS_ID;
	            other.ETAPASNORMATIVIDAD_ID = this.ETAPASNORMATIVIDAD_ID;
	            other.RECEPCION_ID = this.RECEPCION_ID;
	            other.USUARIOS_ID = this.USUARIOS_ID;
	            other.UORG_ID = this.UORG_ID;
	            
	}

	public void copyKeysDataTo(row16Struct other) {

		other.RECEPCION_ID = this.RECEPCION_ID;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
       			    	this.AUDITORIAS_ID = (BigDecimal) ois.readObject();
					
       			    	this.ETAPASNORMATIVIDAD_ID = (BigDecimal) ois.readObject();
					
       			    	this.USUARIOS_ID = (BigDecimal) ois.readObject();
					
       			    	this.UORG_ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
       			    	this.AUDITORIAS_ID = (BigDecimal) objectIn.readObject();
					
       			    	this.ETAPASNORMATIVIDAD_ID = (BigDecimal) objectIn.readObject();
					
       			    	this.USUARIOS_ID = (BigDecimal) objectIn.readObject();
					
       			    	this.UORG_ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
       			    	oos.writeObject(this.AUDITORIAS_ID);
					
       			    	oos.writeObject(this.ETAPASNORMATIVIDAD_ID);
					
       			    	oos.writeObject(this.USUARIOS_ID);
					
       			    	oos.writeObject(this.UORG_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.AUDITORIAS_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ETAPASNORMATIVIDAD_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.USUARIOS_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.UORG_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",AUDITORIAS_ID="+String.valueOf(AUDITORIAS_ID));
		sb.append(",ETAPASNORMATIVIDAD_ID="+String.valueOf(ETAPASNORMATIVIDAD_ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.RECEPCION_ID, other.RECEPCION_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row16Struct row16 = new row16Struct();




	
	/**
	 * [tAdvancedHash_row16 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row16", false);
		start_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row16";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tAdvancedHash_row16 = 0;
		

			   		// connection name:row16
			   		// source node:tHashInput_3 - inputs:(after_tOracleInput_6) outputs:(row16,row16) | target node:tAdvancedHash_row16 - inputs:(row16) outputs:()
			   		// linked node: tMap_5 - inputs:(row14,row15,row16) outputs:(InsHfacturas)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row16 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row16Struct>getLookup(matchingModeEnum_row16);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row16", tHash_Lookup_row16);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row16 begin ] stop
 */



	
	/**
	 * [tHashInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_3", false);
		start_Hash.put("tHashInput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_3";
	
	
		int tos_count_tHashInput_3 = 0;
		


int nb_line_tHashInput_3 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row8Struct> tHashFile_tHashInput_3 = mf_tHashInput_3.getAdvancedMemoryHashFile("tHashFile_Inicial_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_3==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row8Struct> iterator_tHashInput_3 = tHashFile_tHashInput_3.iterator();
while (iterator_tHashInput_3.hasNext()) {
    row8Struct next_tHashInput_3 = iterator_tHashInput_3.next();

	row16.ID = next_tHashInput_3.ID;
	row16.AUDITORIAS_ID = next_tHashInput_3.AUDITORIAS_ID;
	row16.ETAPASNORMATIVIDAD_ID = next_tHashInput_3.ETAPASNORMATIVIDAD_ID;
	row16.RECEPCION_ID = next_tHashInput_3.RECEPCION_ID;
	row16.USUARIOS_ID = next_tHashInput_3.USUARIOS_ID;
	row16.UORG_ID = next_tHashInput_3.UORG_ID;

 



/**
 * [tHashInput_3 begin ] stop
 */
	
	/**
	 * [tHashInput_3 main ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 


	tos_count_tHashInput_3++;

/**
 * [tHashInput_3 main ] stop
 */
	
	/**
	 * [tHashInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row16 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row16"
						
						);
					}
					


			   
			   

					row16Struct row16_HashRow = new row16Struct();
		   	   	   
				
				row16_HashRow.ID = row16.ID;
				
				row16_HashRow.AUDITORIAS_ID = row16.AUDITORIAS_ID;
				
				row16_HashRow.ETAPASNORMATIVIDAD_ID = row16.ETAPASNORMATIVIDAD_ID;
				
				row16_HashRow.RECEPCION_ID = row16.RECEPCION_ID;
				
				row16_HashRow.USUARIOS_ID = row16.USUARIOS_ID;
				
				row16_HashRow.UORG_ID = row16.UORG_ID;
				
			tHash_Lookup_row16.put(row16_HashRow);
			
            




 


	tos_count_tAdvancedHash_row16++;

/**
 * [tAdvancedHash_row16 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";
	
	

 



/**
 * [tAdvancedHash_row16 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row16 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";
	
	

 



/**
 * [tAdvancedHash_row16 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_3 end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	
    

		
			nb_line_tHashInput_3++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_Inicial_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_3_NB_LINE", nb_line_tHashInput_3);       

 

ok_Hash.put("tHashInput_3", true);
end_Hash.put("tHashInput_3", System.currentTimeMillis());




/**
 * [tHashInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row16 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";
	
	

tHash_Lookup_row16.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row16", true);
end_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());




/**
 * [tAdvancedHash_row16 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row16 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";
	
	

 



/**
 * [tAdvancedHash_row16 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row12Struct implements routines.system.IPersistableComparableLookupRow<row12Struct> {
    final static byte[] commonByteArrayLock_ACM_INICIAL_Inicial = new byte[0];
    static byte[] commonByteArray_ACM_INICIAL_Inicial = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal AUDITORIAS_ID;

				public BigDecimal getAUDITORIAS_ID () {
					return this.AUDITORIAS_ID;
				}

				public Boolean AUDITORIAS_IDIsNullable(){
				    return false;
				}
				public Boolean AUDITORIAS_IDIsKey(){
				    return false;
				}
				public Integer AUDITORIAS_IDLength(){
				    return null;
				}
				public Integer AUDITORIAS_IDPrecision(){
				    return null;
				}
				public String AUDITORIAS_IDDefault(){
				
					return "";
				
				}
				public String AUDITORIAS_IDComment(){
				
				    return "";
				
				}
				public String AUDITORIAS_IDPattern(){
				
					return "";
				
				}
				public String AUDITORIAS_IDOriginalDbColumnName(){
				
					return "AUDITORIAS_ID";
				
				}

				
			    public BigDecimal ETAPASNORMATIVIDAD_ID;

				public BigDecimal getETAPASNORMATIVIDAD_ID () {
					return this.ETAPASNORMATIVIDAD_ID;
				}

				public Boolean ETAPASNORMATIVIDAD_IDIsNullable(){
				    return false;
				}
				public Boolean ETAPASNORMATIVIDAD_IDIsKey(){
				    return false;
				}
				public Integer ETAPASNORMATIVIDAD_IDLength(){
				    return null;
				}
				public Integer ETAPASNORMATIVIDAD_IDPrecision(){
				    return null;
				}
				public String ETAPASNORMATIVIDAD_IDDefault(){
				
					return "";
				
				}
				public String ETAPASNORMATIVIDAD_IDComment(){
				
				    return "";
				
				}
				public String ETAPASNORMATIVIDAD_IDPattern(){
				
					return "";
				
				}
				public String ETAPASNORMATIVIDAD_IDOriginalDbColumnName(){
				
					return "ETAPASNORMATIVIDAD_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.AUDITORIAS_ID == null) ? 0 : this.AUDITORIAS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row12Struct other = (row12Struct) obj;
		
						if (this.AUDITORIAS_ID == null) {
							if (other.AUDITORIAS_ID != null)
								return false;
						
						} else if (!this.AUDITORIAS_ID.equals(other.AUDITORIAS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row12Struct other) {

		other.ID = this.ID;
	            other.AUDITORIAS_ID = this.AUDITORIAS_ID;
	            other.ETAPASNORMATIVIDAD_ID = this.ETAPASNORMATIVIDAD_ID;
	            
	}

	public void copyKeysDataTo(row12Struct other) {

		other.AUDITORIAS_ID = this.AUDITORIAS_ID;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.AUDITORIAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
						this.AUDITORIAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.AUDITORIAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AUDITORIAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
       			    	this.ETAPASNORMATIVIDAD_ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
       			    	this.ETAPASNORMATIVIDAD_ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
       			    	oos.writeObject(this.ETAPASNORMATIVIDAD_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ETAPASNORMATIVIDAD_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",AUDITORIAS_ID="+String.valueOf(AUDITORIAS_ID));
		sb.append(",ETAPASNORMATIVIDAD_ID="+String.valueOf(ETAPASNORMATIVIDAD_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.AUDITORIAS_ID, other.AUDITORIAS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row12Struct row12 = new row12Struct();




	
	/**
	 * [tAdvancedHash_row12 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row12", false);
		start_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row12";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tAdvancedHash_row12 = 0;
		

			   		// connection name:row12
			   		// source node:tHashInput_6 - inputs:(after_tOracleInput_7) outputs:(row12,row12) | target node:tAdvancedHash_row12 - inputs:(row12) outputs:()
			   		// linked node: tMap_6 - inputs:(row17,row12) outputs:(UPDHauditoria)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row12 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row12Struct>getLookup(matchingModeEnum_row12);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row12", tHash_Lookup_row12);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row12 begin ] stop
 */



	
	/**
	 * [tHashInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_6", false);
		start_Hash.put("tHashInput_6", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_6";
	
	
		int tos_count_tHashInput_6 = 0;
		


int nb_line_tHashInput_6 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_6=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row8Struct> tHashFile_tHashInput_6 = mf_tHashInput_6.getAdvancedMemoryHashFile("tHashFile_Inicial_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_6==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row8Struct> iterator_tHashInput_6 = tHashFile_tHashInput_6.iterator();
while (iterator_tHashInput_6.hasNext()) {
    row8Struct next_tHashInput_6 = iterator_tHashInput_6.next();

	row12.ID = next_tHashInput_6.ID;
	row12.AUDITORIAS_ID = next_tHashInput_6.AUDITORIAS_ID;
	row12.ETAPASNORMATIVIDAD_ID = next_tHashInput_6.ETAPASNORMATIVIDAD_ID;

 



/**
 * [tHashInput_6 begin ] stop
 */
	
	/**
	 * [tHashInput_6 main ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 


	tos_count_tHashInput_6++;

/**
 * [tHashInput_6 main ] stop
 */
	
	/**
	 * [tHashInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row12"
						
						);
					}
					


			   
			   

					row12Struct row12_HashRow = new row12Struct();
		   	   	   
				
				row12_HashRow.ID = row12.ID;
				
				row12_HashRow.AUDITORIAS_ID = row12.AUDITORIAS_ID;
				
				row12_HashRow.ETAPASNORMATIVIDAD_ID = row12.ETAPASNORMATIVIDAD_ID;
				
			tHash_Lookup_row12.put(row12_HashRow);
			
            




 


	tos_count_tAdvancedHash_row12++;

/**
 * [tAdvancedHash_row12 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	

 



/**
 * [tAdvancedHash_row12 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row12 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	

 



/**
 * [tAdvancedHash_row12 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_6 end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	
    

		
			nb_line_tHashInput_6++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_Inicial_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_6_NB_LINE", nb_line_tHashInput_6);       

 

ok_Hash.put("tHashInput_6", true);
end_Hash.put("tHashInput_6", System.currentTimeMillis());




/**
 * [tHashInput_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	

tHash_Lookup_row12.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row12", true);
end_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());




/**
 * [tAdvancedHash_row12 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_6 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	

 



/**
 * [tAdvancedHash_row12 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_ACM_INICIAL_Inicial = new byte[0];
    static byte[] commonByteArray_ACM_INICIAL_Inicial = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_INICIAL_Inicial.length) {
				if(length < 1024 && commonByteArray_ACM_INICIAL_Inicial.length == 0) {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[1024];
				} else {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_INICIAL_Inicial, 0, length);
			strReturn = new String(commonByteArray_ACM_INICIAL_Inicial, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_INICIAL_Inicial.length) {
				if(length < 1024 && commonByteArray_ACM_INICIAL_Inicial.length == 0) {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[1024];
				} else {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_INICIAL_Inicial, 0, length);
			strReturn = new String(commonByteArray_ACM_INICIAL_Inicial, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_ACM_INICIAL_Inicial = new byte[0];
    static byte[] commonByteArray_ACM_INICIAL_Inicial = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_INICIAL_Inicial.length) {
				if(length < 1024 && commonByteArray_ACM_INICIAL_Inicial.length == 0) {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[1024];
				} else {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_INICIAL_Inicial, 0, length);
			strReturn = new String(commonByteArray_ACM_INICIAL_Inicial, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_INICIAL_Inicial.length) {
				if(length < 1024 && commonByteArray_ACM_INICIAL_Inicial.length == 0) {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[1024];
				} else {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_INICIAL_Inicial, 0, length);
			strReturn = new String(commonByteArray_ACM_INICIAL_Inicial, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();
row3Struct row5 = row3;





	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tRunJob_1 = 0;
		
class DealChildJobLibrary_tRunJob_1 {

	public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
		String classPathLine = "";
		String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
		if (isNeedAddLibsPath( crcMapPath)) {
			java.util.Map<String, String> crcMap = null;
			java.io.ObjectInputStream ois = new java.io.ObjectInputStream(new java.io.FileInputStream(crcMapPath)) {
				@Override
				public Class<?> resolveClass(java.io.ObjectStreamClass desc) throws java.io.IOException, ClassNotFoundException {
					if(!"java.util.HashMap".equals(desc.getName())) {
						throw new java.io.InvalidClassException("Unauthorized deserialization attempt : " + desc.getName());
					}
					return super.resolveClass(desc);
				}
			};
			crcMap = (java.util.Map<String, String>) ois.readObject();
			ois.close();
			classPathLine = addLibsPath(originalClassPathLine, crcMap);
		} else {
			classPathLine = originalClassPathLine;
		}
		return classPathLine;
	}
	
	private boolean isNeedAddLibsPath(String crcMapPath) {
		if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
			return false;
		}
		return true;
	}
	
	
	private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
		for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
			line = adaptLibPaths(line, entry);
		}
		return line;
	}
	
	private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
		String jarName = entry.getValue();
		String crc = entry.getKey();
		String libStringFinder = "../lib/" + jarName;
		if (line.contains(libStringFinder)) {
			line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
		} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
			line = line.replace(":$ROOT_PATH/" + jarName + ":", ":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
		} else if (line.contains(";" + jarName + ";")) {
			line = line.replace(";" + jarName + ";", ";../../../cache/lib/" + crc + "/" + jarName + ";");
		}
		return line;
	}
	
}
	DealChildJobLibrary_tRunJob_1 dealChildJobLibrary_tRunJob_1 = new DealChildJobLibrary_tRunJob_1();

	class JVMArgumentHelper_tRunJob_1 {
		
		
		
		private void addClasspath(java.util.List<String> target_argument_list, String job_origin_classpath) {
			
			String extra_classpath = null;
			String path_separator = System.getProperty("path.separator");
			if (path_separator != null && path_separator.length() > 1) {
				throw new RuntimeException("path separator should be single character");
			}
			
			if(extra_classpath!=null && !extra_classpath.isEmpty()) {
				if(extra_classpath.endsWith(path_separator)) {
					target_argument_list.add(extra_classpath+job_origin_classpath);
				} else if(extra_classpath.contains(path_separator)) {
					target_argument_list.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
				} else if(extra_classpath.endsWith(":")) {
					target_argument_list.add(extra_classpath.replace(":", path_separator)+job_origin_classpath);
				} else if(extra_classpath.endsWith(";")) {
					target_argument_list.add(extra_classpath.replace(";", path_separator)+job_origin_classpath);
				} else if(extra_classpath.contains(":")) {
					target_argument_list.add(concatStr(extra_classpath.replace(":", path_separator), path_separator, job_origin_classpath));
				} else if(extra_classpath.contains(";")) {
					target_argument_list.add(concatStr(extra_classpath.replace(";", path_separator), path_separator, job_origin_classpath));
				} else {
					target_argument_list.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
				}
				return;
			}
			
			target_argument_list.add(job_origin_classpath);
		}
		
		private String concatStr(String s1, String s2, String s3) {
			java.lang.StringBuilder strB = new java.lang.StringBuilder();
			strB.append(s1).append(s2).append(s3);
			return strB.toString();
		}
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child) {
			addArgumentsTo(target_argument_list, argument_from_child, false);
		}
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child, boolean isCP) {
			if(isCP) {
				addClasspath(target_argument_list, argument_from_child);
				return;
			}
		
			
			
			
			target_argument_list.add(argument_from_child);
			
		}
		
		
	}
	
	JVMArgumentHelper_tRunJob_1 jvm_argument_helper_tRunJob_1 = new JVMArgumentHelper_tRunJob_1();
	
	String audit_jar_path_tRunJob_1 = System.getProperty("classpath.extended");
	

 



/**
 * [tRunJob_1 begin ] stop
 */



	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.LOGS_ERROR)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
        if(filetFileOutputDelimited_1.exists()){
            isFileGenerated_tFileOutputDelimited_1 = false;
        }
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("moment");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("root_pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("father_pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("project");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("job");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("context");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("priority");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("type");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("origin");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("message");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("code");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }


resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";
	
	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row3.type = lcm.getType();
		row3.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row3.priority = lcm.getPriority();
		row3.message = lcm.getMessage();
		row3.code = lcm.getCode();
		
		row3.moment = java.util.Calendar.getInstance().getTime();
	
    	row3.pid = pid;
		row3.root_pid = rootPid;
		row3.father_pid = fatherPid;
	
    	row3.project = projectName;
    	row3.job = jobName;
    	row3.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row3.moment != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(row3.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.root_pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.root_pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.father_pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.father_pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.project != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.project
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.job != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.job
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.context != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.context
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.priority != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.priority
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.type != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.type
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.origin != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.origin
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.message != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.message
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.code != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.code
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 
     row5 = row3;


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */

	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
			
			String osName_tRunJob_1 = System.getProperty("os.name");
			if (osName_tRunJob_1 != null && osName_tRunJob_1.toLowerCase(java.util.Locale.US).startsWith("win")){
				
						paraList_tRunJob_1.add("java");
						String m2 = System.getProperty("talend.component.manager.m2.repository");
						if (m2 != null){
							paraList_tRunJob_1.add("-Dtalend.component.manager.m2.repository=" + m2);
						}
						
						if (Boolean.getBoolean("propagateLoggingConfiguration")) {
							String log4j1_config_tRunJob_1 = System.getProperty("log4j.configuration");
							if (log4j1_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_1);
							}
							String log4j2_config_tRunJob_1 = System.getProperty("log4j.configurationFile");
							if (log4j2_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_1);
							}
							if (log4j1_config_tRunJob_1 != null || log4j2_config_tRunJob_1 != null) {
								paraList_tRunJob_1.add("-DpropagateLoggingConfiguration=true");
							}
						}
						
						if(enableLogStash){
							System.getProperties().stringPropertyNames().stream()
								.filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
						}
							
						System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
					
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dtalend.component.manager.m2.repository=../lib");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");
		      				
              					String classpath_tRunJob_1_5 = ".;../lib/routines.jar;../lib/log4j-slf4j-impl-2.17.1.jar;../lib/log4j-api-2.17.1.jar;../lib/log4j-core-2.17.1.jar;../lib/activation-1.1.jar;../lib/jakarta.mail-1.6.7.jar;../lib/xercesImpl-2.12.2.jar;../lib/xml-apis-1.4.01.jar;../lib/slf4j-api-1.7.34.jar;../lib/crypto-utils-7.1.16.jar;../lib/TalendSAX.jar;../lib/jboss-marshalling-2.0.12.Final.jar;../lib/dom4j-2.1.3.jar;mail_0_1.jar;";
              					
              					if(audit_jar_path_tRunJob_1!=null && !audit_jar_path_tRunJob_1.isEmpty()) {
		      						classpath_tRunJob_1_5 += audit_jar_path_tRunJob_1;
		      					}
		      					
	        					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(classpath_tRunJob_1_5), true);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "acm_inicial.mail_0_1.Mail");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid="+pid);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid="+rootPid);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "%*");
		      				
			} else {
	      		
						paraList_tRunJob_1.add("java");
						String m2 = System.getProperty("talend.component.manager.m2.repository");
						if (m2 != null){
							paraList_tRunJob_1.add("-Dtalend.component.manager.m2.repository=" + m2);
						}
						
						if (Boolean.getBoolean("propagateLoggingConfiguration")) {
							String log4j1_config_tRunJob_1 = System.getProperty("log4j.configuration");
							if (log4j1_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_1);
							}
							String log4j2_config_tRunJob_1 = System.getProperty("log4j.configurationFile");
							if (log4j2_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_1);
							}
							if (log4j1_config_tRunJob_1 != null || log4j2_config_tRunJob_1 != null) {
								paraList_tRunJob_1.add("-DpropagateLoggingConfiguration=true");
							}
						}
						
						if(enableLogStash){
							System.getProperties().stringPropertyNames().stream()
								.filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
						}
							
						System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
					
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dtalend.component.manager.m2.repository=../lib");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");
		      				
		      					String classpath_tRunJob_1_5 = ".:$ROOT_PATH:$ROOT_PATH/../lib/routines.jar:$ROOT_PATH/../lib/log4j-slf4j-impl-2.17.1.jar:$ROOT_PATH/../lib/log4j-api-2.17.1.jar:$ROOT_PATH/../lib/log4j-core-2.17.1.jar:$ROOT_PATH/../lib/activation-1.1.jar:$ROOT_PATH/../lib/jakarta.mail-1.6.7.jar:$ROOT_PATH/../lib/xercesImpl-2.12.2.jar:$ROOT_PATH/../lib/xml-apis-1.4.01.jar:$ROOT_PATH/../lib/slf4j-api-1.7.34.jar:$ROOT_PATH/../lib/crypto-utils-7.1.16.jar:$ROOT_PATH/../lib/TalendSAX.jar:$ROOT_PATH/../lib/jboss-marshalling-2.0.12.Final.jar:$ROOT_PATH/../lib/dom4j-2.1.3.jar:$ROOT_PATH/mail_0_1.jar:";
		      					
		      					if(audit_jar_path_tRunJob_1!=null && !audit_jar_path_tRunJob_1.isEmpty()) {
		      						classpath_tRunJob_1_5 += audit_jar_path_tRunJob_1;
		      					}
		      					
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(classpath_tRunJob_1_5).replace("$ROOT_PATH",System.getProperty("user.dir")), true);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "acm_inicial.mail_0_1.Mail");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid="+pid);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid="+rootPid);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "$@");
		      				
			}

			
			
	  	
		if(enableLogStash){
			paraList_tRunJob_1.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + null);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_1 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_1.put("db_destino_AdditionalParams", context.db_destino_AdditionalParams);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_AdditionalParams" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_destino_Login", context.db_destino_Login);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_Login" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_destino_Password", context.db_destino_Password);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_Password" + "=" + "id_Password");
                    parentContextMap_tRunJob_1.put("db_destino_Port", context.db_destino_Port);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_Port" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_destino_Schema", context.db_destino_Schema);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_Schema" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_destino_Server", context.db_destino_Server);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_Server" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_destino_ServiceName", context.db_destino_ServiceName);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_ServiceName" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_AdditionalParams", context.db_origen_AdditionalParams);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_AdditionalParams" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_Login", context.db_origen_Login);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_Login" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_Password", context.db_origen_Password);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_Password" + "=" + "id_Password");
                    parentContextMap_tRunJob_1.put("db_origen_Port", context.db_origen_Port);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_Port" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_Schema", context.db_origen_Schema);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_Schema" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_Server", context.db_origen_Server);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_Server" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_ServiceName", context.db_origen_ServiceName);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_ServiceName" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("BODEGA", context.BODEGA);
                    paraList_tRunJob_1.add("--context_type " + "BODEGA" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("ESTADO_EXEC", context.ESTADO_EXEC);
                    paraList_tRunJob_1.add("--context_type " + "ESTADO_EXEC" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("FECHA_EJECUCION", context.FECHA_EJECUCION);
                    paraList_tRunJob_1.add("--context_type " + "FECHA_EJECUCION" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("HORA_FINAL", context.HORA_FINAL);
                    paraList_tRunJob_1.add("--context_type " + "HORA_FINAL" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("HORA_INICIO", context.HORA_INICIO);
                    paraList_tRunJob_1.add("--context_type " + "HORA_INICIO" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("JOB", context.JOB);
                    paraList_tRunJob_1.add("--context_type " + "JOB" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("LOGS_ERROR", context.LOGS_ERROR);
                    paraList_tRunJob_1.add("--context_type " + "LOGS_ERROR" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("LOGS_EXECUTION", context.LOGS_EXECUTION);
                    paraList_tRunJob_1.add("--context_type " + "LOGS_EXECUTION" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("ORIGEN", context.ORIGEN);
                    paraList_tRunJob_1.add("--context_type " + "ORIGEN" + "=" + "id_String");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_1().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_1 = context.propertyNames();
		while (propertyNames_tRunJob_1.hasMoreElements()) {
			String key_tRunJob_1 = (String) propertyNames_tRunJob_1.nextElement();
			Object value_tRunJob_1 = (Object) context.get(key_tRunJob_1);
			if(value_tRunJob_1!=null) {  
				
					paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + value_tRunJob_1);
					
			} else {
				paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_1 = null;

	
		obj_tRunJob_1 = row5.moment;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param moment=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param moment=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param moment=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("moment", obj_tRunJob_1);
	
		obj_tRunJob_1 = row5.project;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param Project=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param Project=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param Project=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("Project", obj_tRunJob_1);
	
		obj_tRunJob_1 = row5.job;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param job=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param job=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param job=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("job", obj_tRunJob_1);
	
		obj_tRunJob_1 = row5.context;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param context=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param context=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param context=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("context", obj_tRunJob_1);
	
		obj_tRunJob_1 = row5.origin;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = row5.message;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param message=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param message=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param message=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("message", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_Server;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param server_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param server_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param server_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("server_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_ServiceName;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param service_name_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param service_name_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param service_name_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("service_name_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_Login;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param user_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param user_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param user_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("user_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_destino_Server;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param server_destino=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param server_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param server_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("server_destino", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_destino_ServiceName;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param service_name_destino=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param service_name_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param service_name_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("service_name_destino", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_destino_Login;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param user_destino=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param user_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param user_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("user_destino", obj_tRunJob_1);
	
	
				class ConsoleHelper_tRunJob_1 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",ioe.getMessage());
						            
									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line)
													.append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",ioe.getMessage());
						            
									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_1 consoleHelper_tRunJob_1 = new ConsoleHelper_tRunJob_1();

		Runtime runtime_tRunJob_1 = Runtime.getRuntime();
		Process ps_tRunJob_1 = null;
		
		//0 indicates normal termination
        int result_tRunJob_1;
        StringBuffer errorMsg_tRunJob_1 = new StringBuffer();
        try {
            ps_tRunJob_1 = runtime_tRunJob_1.exec((String[])paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));

            Thread normal_tRunJob_1 = consoleHelper_tRunJob_1.getNormalThread(ps_tRunJob_1);
            normal_tRunJob_1.start();

            Thread error_tRunJob_1 = consoleHelper_tRunJob_1.getErrorThread(ps_tRunJob_1, errorMsg_tRunJob_1);
            error_tRunJob_1.start();

            result_tRunJob_1 = ps_tRunJob_1.waitFor();
            normal_tRunJob_1.join();
            error_tRunJob_1.join();
        } catch (ThreadDeath tde) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",tde.getMessage());
            ps_tRunJob_1.destroy();
            throw tde;
        }

		globalMap.put("tRunJob_1_CHILD_RETURN_CODE",result_tRunJob_1);
		if(result_tRunJob_1 != 0){
   			globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",errorMsg_tRunJob_1.toString());
			  
	    		throw new RuntimeException("Child job returns " + result_tRunJob_1 + ". It doesn't terminate normally.\n" + errorMsg_tRunJob_1.toString());
			
  		}

		

 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 



/**
 * [tRunJob_1 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 



/**
 * [tRunJob_1 process_data_end ] stop
 */



	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	
	}
} catch (Exception e_tLogCatcher_1) {
globalMap.put("tLogCatcher_1_ERROR_MESSAGE",e_tLogCatcher_1.getMessage());
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */

	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */

	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	
	
 



/**
 * [tRunJob_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";
	
	
		int tos_count_tJava_1 = 0;
		


//Guarda en variables de contexto la hora final de ejecución del etl, actualiza el estado a succes y los imprime en consola

context.HORA_FINAL = TalendDate.getDate("HH:mm:ss");
context.ESTADO_EXEC = "Succes";

System.out.println("- End: "+context.HORA_FINAL );
System.out.println("- Estado: "+context.ESTADO_EXEC );
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tOracleClose_1Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tFixedFlowInput_1Process(globalMap);



/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleClose_1", false);
		start_Hash.put("tOracleClose_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleClose_1";
	
	
		int tos_count_tOracleClose_1 = 0;
		

 



/**
 * [tOracleClose_1 begin ] stop
 */
	
	/**
	 * [tOracleClose_1 main ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

	java.sql.Connection conn_tOracleClose_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
	
	if(conn_tOracleClose_1 != null && !conn_tOracleClose_1.isClosed())
	{
		
			conn_tOracleClose_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tOracleConnection_1"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tOracleClose_1++;

/**
 * [tOracleClose_1 main ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleClose_1 end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 

ok_Hash.put("tOracleClose_1", true);
end_Hash.put("tOracleClose_1", System.currentTimeMillis());




/**
 * [tOracleClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleClose_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_ACM_INICIAL_Inicial = new byte[0];
    static byte[] commonByteArray_ACM_INICIAL_Inicial = new byte[0];

	
			    public String FECHA_EJECUCION;

				public String getFECHA_EJECUCION () {
					return this.FECHA_EJECUCION;
				}

				public Boolean FECHA_EJECUCIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_EJECUCIONIsKey(){
				    return false;
				}
				public Integer FECHA_EJECUCIONLength(){
				    return null;
				}
				public Integer FECHA_EJECUCIONPrecision(){
				    return null;
				}
				public String FECHA_EJECUCIONDefault(){
				
					return null;
				
				}
				public String FECHA_EJECUCIONComment(){
				
				    return "";
				
				}
				public String FECHA_EJECUCIONPattern(){
				
					return "";
				
				}
				public String FECHA_EJECUCIONOriginalDbColumnName(){
				
					return "FECHA_EJECUCION";
				
				}

				
			    public String HORA_INICIO;

				public String getHORA_INICIO () {
					return this.HORA_INICIO;
				}

				public Boolean HORA_INICIOIsNullable(){
				    return true;
				}
				public Boolean HORA_INICIOIsKey(){
				    return false;
				}
				public Integer HORA_INICIOLength(){
				    return null;
				}
				public Integer HORA_INICIOPrecision(){
				    return null;
				}
				public String HORA_INICIODefault(){
				
					return null;
				
				}
				public String HORA_INICIOComment(){
				
				    return "";
				
				}
				public String HORA_INICIOPattern(){
				
					return "";
				
				}
				public String HORA_INICIOOriginalDbColumnName(){
				
					return "HORA_INICIO";
				
				}

				
			    public String HORA_FINAL;

				public String getHORA_FINAL () {
					return this.HORA_FINAL;
				}

				public Boolean HORA_FINALIsNullable(){
				    return true;
				}
				public Boolean HORA_FINALIsKey(){
				    return false;
				}
				public Integer HORA_FINALLength(){
				    return null;
				}
				public Integer HORA_FINALPrecision(){
				    return null;
				}
				public String HORA_FINALDefault(){
				
					return null;
				
				}
				public String HORA_FINALComment(){
				
				    return "";
				
				}
				public String HORA_FINALPattern(){
				
					return "";
				
				}
				public String HORA_FINALOriginalDbColumnName(){
				
					return "HORA_FINAL";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String JOBS;

				public String getJOBS () {
					return this.JOBS;
				}

				public Boolean JOBSIsNullable(){
				    return true;
				}
				public Boolean JOBSIsKey(){
				    return false;
				}
				public Integer JOBSLength(){
				    return null;
				}
				public Integer JOBSPrecision(){
				    return null;
				}
				public String JOBSDefault(){
				
					return null;
				
				}
				public String JOBSComment(){
				
				    return "";
				
				}
				public String JOBSPattern(){
				
					return "";
				
				}
				public String JOBSOriginalDbColumnName(){
				
					return "JOBS";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_INICIAL_Inicial.length) {
				if(length < 1024 && commonByteArray_ACM_INICIAL_Inicial.length == 0) {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[1024];
				} else {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_INICIAL_Inicial, 0, length);
			strReturn = new String(commonByteArray_ACM_INICIAL_Inicial, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_INICIAL_Inicial.length) {
				if(length < 1024 && commonByteArray_ACM_INICIAL_Inicial.length == 0) {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[1024];
				} else {
   					commonByteArray_ACM_INICIAL_Inicial = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_INICIAL_Inicial, 0, length);
			strReturn = new String(commonByteArray_ACM_INICIAL_Inicial, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
					this.FECHA_EJECUCION = readString(dis);
					
					this.HORA_INICIO = readString(dis);
					
					this.HORA_FINAL = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.JOBS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_INICIAL_Inicial) {

        	try {

        		int length = 0;
		
					this.FECHA_EJECUCION = readString(dis);
					
					this.HORA_INICIO = readString(dis);
					
					this.HORA_FINAL = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.JOBS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FECHA_EJECUCION,dos);
					
					// String
				
						writeString(this.HORA_INICIO,dos);
					
					// String
				
						writeString(this.HORA_FINAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.JOBS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FECHA_EJECUCION,dos);
					
					// String
				
						writeString(this.HORA_INICIO,dos);
					
					// String
				
						writeString(this.HORA_FINAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.JOBS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FECHA_EJECUCION="+FECHA_EJECUCION);
		sb.append(",HORA_INICIO="+HORA_INICIO);
		sb.append(",HORA_FINAL="+HORA_FINAL);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",JOBS="+JOBS);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File(context.LOGS_EXECUTION)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
        if(filetFileOutputDelimited_2.exists()){
            isFileGenerated_tFileOutputDelimited_2 = false;
        }
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
                                    if(filetFileOutputDelimited_2.length()==0){
                                        outtFileOutputDelimited_2.write("FECHA_EJECUCION");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("HORA_INICIO");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("HORA_FINAL");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ESTADO");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("JOBS");
                                        outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.flush();
                                    }


resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_1", false);
		start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_1";
	
	
		int tos_count_tFixedFlowInput_1 = 0;
		

	    for (int i_tFixedFlowInput_1 = 0 ; i_tFixedFlowInput_1 < 1 ; i_tFixedFlowInput_1++) {
	                	            	
    	            		row4.FECHA_EJECUCION = context.FECHA_EJECUCION;
    	            	        	            	
    	            		row4.HORA_INICIO = context.HORA_INICIO;
    	            	        	            	
    	            		row4.HORA_FINAL = context.HORA_FINAL;
    	            	        	            	
    	            		row4.ESTADO = context.ESTADO_EXEC;
    	            	        	            	
    	            		row4.JOBS = context.JOB;
    	            	

 



/**
 * [tFixedFlowInput_1 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 


	tos_count_tFixedFlowInput_1++;

/**
 * [tFixedFlowInput_1 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(row4.FECHA_EJECUCION != null) {
                        sb_tFileOutputDelimited_2.append(
                            row4.FECHA_EJECUCION
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row4.HORA_INICIO != null) {
                        sb_tFileOutputDelimited_2.append(
                            row4.HORA_INICIO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row4.HORA_FINAL != null) {
                        sb_tFileOutputDelimited_2.append(
                            row4.HORA_FINAL
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row4.ESTADO != null) {
                        sb_tFileOutputDelimited_2.append(
                            row4.ESTADO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row4.JOBS != null) {
                        sb_tFileOutputDelimited_2.append(
                            row4.JOBS
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

        }
        globalMap.put("tFixedFlowInput_1_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_1", true);
end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());




/**
 * [tFixedFlowInput_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	



		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_1 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final Inicial InicialClass = new Inicial();

        int exitCode = InicialClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Inicial.class.getClassLoader().getResourceAsStream("acm_inicial/inicial_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Inicial.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }
            
            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("db_destino_AdditionalParams", "id_String");
                        if(context.getStringValue("db_destino_AdditionalParams") == null) {
                            context.db_destino_AdditionalParams = null;
                        } else {
                            context.db_destino_AdditionalParams=(String) context.getProperty("db_destino_AdditionalParams");
                        }
                        context.setContextType("db_destino_Login", "id_String");
                        if(context.getStringValue("db_destino_Login") == null) {
                            context.db_destino_Login = null;
                        } else {
                            context.db_destino_Login=(String) context.getProperty("db_destino_Login");
                        }
                        context.setContextType("db_destino_Password", "id_Password");
                        if(context.getStringValue("db_destino_Password") == null) {
                            context.db_destino_Password = null;
                        } else {
                            String pwd_db_destino_Password_value = context.getProperty("db_destino_Password");
                            context.db_destino_Password = null;
                            if(pwd_db_destino_Password_value!=null) {
                                if(context_param.containsKey("db_destino_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_destino_Password = pwd_db_destino_Password_value;
                                } else if (!pwd_db_destino_Password_value.isEmpty()) {
                                    try {
                                        context.db_destino_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_destino_Password_value);
                                        context.put("db_destino_Password",context.db_destino_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_destino_Port", "id_String");
                        if(context.getStringValue("db_destino_Port") == null) {
                            context.db_destino_Port = null;
                        } else {
                            context.db_destino_Port=(String) context.getProperty("db_destino_Port");
                        }
                        context.setContextType("db_destino_Schema", "id_String");
                        if(context.getStringValue("db_destino_Schema") == null) {
                            context.db_destino_Schema = null;
                        } else {
                            context.db_destino_Schema=(String) context.getProperty("db_destino_Schema");
                        }
                        context.setContextType("db_destino_Server", "id_String");
                        if(context.getStringValue("db_destino_Server") == null) {
                            context.db_destino_Server = null;
                        } else {
                            context.db_destino_Server=(String) context.getProperty("db_destino_Server");
                        }
                        context.setContextType("db_destino_ServiceName", "id_String");
                        if(context.getStringValue("db_destino_ServiceName") == null) {
                            context.db_destino_ServiceName = null;
                        } else {
                            context.db_destino_ServiceName=(String) context.getProperty("db_destino_ServiceName");
                        }
                        context.setContextType("db_origen_AdditionalParams", "id_String");
                        if(context.getStringValue("db_origen_AdditionalParams") == null) {
                            context.db_origen_AdditionalParams = null;
                        } else {
                            context.db_origen_AdditionalParams=(String) context.getProperty("db_origen_AdditionalParams");
                        }
                        context.setContextType("db_origen_Login", "id_String");
                        if(context.getStringValue("db_origen_Login") == null) {
                            context.db_origen_Login = null;
                        } else {
                            context.db_origen_Login=(String) context.getProperty("db_origen_Login");
                        }
                        context.setContextType("db_origen_Password", "id_Password");
                        if(context.getStringValue("db_origen_Password") == null) {
                            context.db_origen_Password = null;
                        } else {
                            String pwd_db_origen_Password_value = context.getProperty("db_origen_Password");
                            context.db_origen_Password = null;
                            if(pwd_db_origen_Password_value!=null) {
                                if(context_param.containsKey("db_origen_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_origen_Password = pwd_db_origen_Password_value;
                                } else if (!pwd_db_origen_Password_value.isEmpty()) {
                                    try {
                                        context.db_origen_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_origen_Password_value);
                                        context.put("db_origen_Password",context.db_origen_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_origen_Port", "id_String");
                        if(context.getStringValue("db_origen_Port") == null) {
                            context.db_origen_Port = null;
                        } else {
                            context.db_origen_Port=(String) context.getProperty("db_origen_Port");
                        }
                        context.setContextType("db_origen_Schema", "id_String");
                        if(context.getStringValue("db_origen_Schema") == null) {
                            context.db_origen_Schema = null;
                        } else {
                            context.db_origen_Schema=(String) context.getProperty("db_origen_Schema");
                        }
                        context.setContextType("db_origen_Server", "id_String");
                        if(context.getStringValue("db_origen_Server") == null) {
                            context.db_origen_Server = null;
                        } else {
                            context.db_origen_Server=(String) context.getProperty("db_origen_Server");
                        }
                        context.setContextType("db_origen_ServiceName", "id_String");
                        if(context.getStringValue("db_origen_ServiceName") == null) {
                            context.db_origen_ServiceName = null;
                        } else {
                            context.db_origen_ServiceName=(String) context.getProperty("db_origen_ServiceName");
                        }
                        context.setContextType("BODEGA", "id_String");
                        if(context.getStringValue("BODEGA") == null) {
                            context.BODEGA = null;
                        } else {
                            context.BODEGA=(String) context.getProperty("BODEGA");
                        }
                        context.setContextType("ESTADO_EXEC", "id_String");
                        if(context.getStringValue("ESTADO_EXEC") == null) {
                            context.ESTADO_EXEC = null;
                        } else {
                            context.ESTADO_EXEC=(String) context.getProperty("ESTADO_EXEC");
                        }
                        context.setContextType("FECHA_EJECUCION", "id_String");
                        if(context.getStringValue("FECHA_EJECUCION") == null) {
                            context.FECHA_EJECUCION = null;
                        } else {
                            context.FECHA_EJECUCION=(String) context.getProperty("FECHA_EJECUCION");
                        }
                        context.setContextType("HORA_FINAL", "id_String");
                        if(context.getStringValue("HORA_FINAL") == null) {
                            context.HORA_FINAL = null;
                        } else {
                            context.HORA_FINAL=(String) context.getProperty("HORA_FINAL");
                        }
                        context.setContextType("HORA_INICIO", "id_String");
                        if(context.getStringValue("HORA_INICIO") == null) {
                            context.HORA_INICIO = null;
                        } else {
                            context.HORA_INICIO=(String) context.getProperty("HORA_INICIO");
                        }
                        context.setContextType("JOB", "id_String");
                        if(context.getStringValue("JOB") == null) {
                            context.JOB = null;
                        } else {
                            context.JOB=(String) context.getProperty("JOB");
                        }
                        context.setContextType("LOGS_ERROR", "id_String");
                        if(context.getStringValue("LOGS_ERROR") == null) {
                            context.LOGS_ERROR = null;
                        } else {
                            context.LOGS_ERROR=(String) context.getProperty("LOGS_ERROR");
                        }
                        context.setContextType("LOGS_EXECUTION", "id_String");
                        if(context.getStringValue("LOGS_EXECUTION") == null) {
                            context.LOGS_EXECUTION = null;
                        } else {
                            context.LOGS_EXECUTION=(String) context.getProperty("LOGS_EXECUTION");
                        }
                        context.setContextType("ORIGEN", "id_String");
                        if(context.getStringValue("ORIGEN") == null) {
                            context.ORIGEN = null;
                        } else {
                            context.ORIGEN=(String) context.getProperty("ORIGEN");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("db_destino_AdditionalParams")) {
                context.db_destino_AdditionalParams = (String) parentContextMap.get("db_destino_AdditionalParams");
            }if (parentContextMap.containsKey("db_destino_Login")) {
                context.db_destino_Login = (String) parentContextMap.get("db_destino_Login");
            }if (parentContextMap.containsKey("db_destino_Password")) {
                context.db_destino_Password = (java.lang.String) parentContextMap.get("db_destino_Password");
            }if (parentContextMap.containsKey("db_destino_Port")) {
                context.db_destino_Port = (String) parentContextMap.get("db_destino_Port");
            }if (parentContextMap.containsKey("db_destino_Schema")) {
                context.db_destino_Schema = (String) parentContextMap.get("db_destino_Schema");
            }if (parentContextMap.containsKey("db_destino_Server")) {
                context.db_destino_Server = (String) parentContextMap.get("db_destino_Server");
            }if (parentContextMap.containsKey("db_destino_ServiceName")) {
                context.db_destino_ServiceName = (String) parentContextMap.get("db_destino_ServiceName");
            }if (parentContextMap.containsKey("db_origen_AdditionalParams")) {
                context.db_origen_AdditionalParams = (String) parentContextMap.get("db_origen_AdditionalParams");
            }if (parentContextMap.containsKey("db_origen_Login")) {
                context.db_origen_Login = (String) parentContextMap.get("db_origen_Login");
            }if (parentContextMap.containsKey("db_origen_Password")) {
                context.db_origen_Password = (java.lang.String) parentContextMap.get("db_origen_Password");
            }if (parentContextMap.containsKey("db_origen_Port")) {
                context.db_origen_Port = (String) parentContextMap.get("db_origen_Port");
            }if (parentContextMap.containsKey("db_origen_Schema")) {
                context.db_origen_Schema = (String) parentContextMap.get("db_origen_Schema");
            }if (parentContextMap.containsKey("db_origen_Server")) {
                context.db_origen_Server = (String) parentContextMap.get("db_origen_Server");
            }if (parentContextMap.containsKey("db_origen_ServiceName")) {
                context.db_origen_ServiceName = (String) parentContextMap.get("db_origen_ServiceName");
            }if (parentContextMap.containsKey("BODEGA")) {
                context.BODEGA = (String) parentContextMap.get("BODEGA");
            }if (parentContextMap.containsKey("ESTADO_EXEC")) {
                context.ESTADO_EXEC = (String) parentContextMap.get("ESTADO_EXEC");
            }if (parentContextMap.containsKey("FECHA_EJECUCION")) {
                context.FECHA_EJECUCION = (String) parentContextMap.get("FECHA_EJECUCION");
            }if (parentContextMap.containsKey("HORA_FINAL")) {
                context.HORA_FINAL = (String) parentContextMap.get("HORA_FINAL");
            }if (parentContextMap.containsKey("HORA_INICIO")) {
                context.HORA_INICIO = (String) parentContextMap.get("HORA_INICIO");
            }if (parentContextMap.containsKey("JOB")) {
                context.JOB = (String) parentContextMap.get("JOB");
            }if (parentContextMap.containsKey("LOGS_ERROR")) {
                context.LOGS_ERROR = (String) parentContextMap.get("LOGS_ERROR");
            }if (parentContextMap.containsKey("LOGS_EXECUTION")) {
                context.LOGS_EXECUTION = (String) parentContextMap.get("LOGS_EXECUTION");
            }if (parentContextMap.containsKey("ORIGEN")) {
                context.ORIGEN = (String) parentContextMap.get("ORIGEN");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("db_destino_Password");
			parametersToEncrypt.add("db_origen_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs


this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Inicial");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tOracleConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tOracleConnection_1", globalMap.get("conn_tOracleConnection_1"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--context_file")) {
        	String keyValue = arg.substring(15);
        	String filePath = new String(java.util.Base64.getDecoder().decode(keyValue));
        	java.nio.file.Path contextFile = java.nio.file.Paths.get(filePath);
            try (java.io.BufferedReader reader = java.nio.file.Files.newBufferedReader(contextFile)) {
                String line;
                while ((line = reader.readLine()) != null) {
                    int index = -1;
                    if ( (index = line.indexOf('=')) > -1) {
							if (line.startsWith("--context_param")) {
								if ("id_Password".equals(context_param.getContextType(line.substring(16, index)))) {
									context_param.put(line.substring(16, index), routines.system.PasswordEncryptUtil.decryptPassword(
											line.substring(index + 1)));
								} else {
									context_param.put(line.substring(16, index), line.substring(index + 1));
								}
							}else {//--context_type
								context_param.setContextType(line.substring(15, index), line.substring(index + 1));
							}
                    }
                }
            } catch (java.io.IOException e) {
            	System.err.println("Could not load the context file: " + filePath);
                e.printStackTrace();
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     1132224 characters generated by Talend Open Studio for ESB 
 *     on the November 1, 2024, 8:41:40 AM COT
 ************************************************************************************************/