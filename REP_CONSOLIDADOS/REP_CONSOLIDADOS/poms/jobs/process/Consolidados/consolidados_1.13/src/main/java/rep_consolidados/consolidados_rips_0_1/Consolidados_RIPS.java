// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package rep_consolidados.consolidados_rips_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.Utils;
import routines.StringHandling;
import routines.ArrayFromFile;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJavaRow_2
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJava_3
	//import java.util.List;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.FileOutputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;

	//the import part of tJavaRow_3
	//import java.util.List;

	//the import part of tJavaRow_4
	//import java.util.List;

	//the import part of tJava_4
	//import java.util.List;

	//the import part of tJavaRow_5
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: Consolidados_RIPS Purpose: <br>
 * Description:  <br>
 * @author jorgejlhc@gmail.com
 * @version 8.8.8.20240722_1936-SNAPSHOT
 * @status 
 */
public class Consolidados_RIPS implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(db_origen_Server != null){
				
					this.setProperty("db_origen_Server", db_origen_Server.toString());
				
			}
			
			if(db_origen_Password != null){
				
					this.setProperty("db_origen_Password", db_origen_Password.toString());
				
			}
			
			if(db_origen_Login != null){
				
					this.setProperty("db_origen_Login", db_origen_Login.toString());
				
			}
			
			if(db_origen_Schema != null){
				
					this.setProperty("db_origen_Schema", db_origen_Schema.toString());
				
			}
			
			if(db_origen_ServiceName != null){
				
					this.setProperty("db_origen_ServiceName", db_origen_ServiceName.toString());
				
			}
			
			if(db_origen_AdditionalParams != null){
				
					this.setProperty("db_origen_AdditionalParams", db_origen_AdditionalParams.toString());
				
			}
			
			if(db_origen_Port != null){
				
					this.setProperty("db_origen_Port", db_origen_Port.toString());
				
			}
			
			if(FECHA_TERMINACION != null){
				
					this.setProperty("FECHA_TERMINACION", FECHA_TERMINACION.toString());
				
			}
			
			if(FUERZA != null){
				
					this.setProperty("FUERZA", FUERZA.toString());
				
			}
			
			if(ESM_REMITE != null){
				
					this.setProperty("ESM_REMITE", ESM_REMITE.toString());
				
			}
			
			if(VINCULACION != null){
				
					this.setProperty("VINCULACION", VINCULACION.toString());
				
			}
			
			if(ESQUEMA != null){
				
					this.setProperty("ESQUEMA", ESQUEMA.toString());
				
			}
			
			if(ARCHIVOS_ID != null){
				
					this.setProperty("ARCHIVOS_ID", ARCHIVOS_ID.toString());
				
			}
			
			if(USUARIO != null){
				
					this.setProperty("USUARIO", USUARIO.toString());
				
			}
			
			if(EDAD_INICIAL != null){
				
					this.setProperty("EDAD_INICIAL", EDAD_INICIAL.toString());
				
			}
			
			if(CARPETA_TEMPORAL != null){
				
					this.setProperty("CARPETA_TEMPORAL", CARPETA_TEMPORAL.toString());
				
			}
			
			if(FECHA_FINAL != null){
				
					this.setProperty("FECHA_FINAL", FECHA_FINAL.toString());
				
			}
			
			if(CARPETA_SALIDA != null){
				
					this.setProperty("CARPETA_SALIDA", CARPETA_SALIDA.toString());
				
			}
			
			if(SIGLA != null){
				
					this.setProperty("SIGLA", SIGLA.toString());
				
			}
			
			if(NOMBRE_CONSOLIDADO != null){
				
					this.setProperty("NOMBRE_CONSOLIDADO", NOMBRE_CONSOLIDADO.toString());
				
			}
			
			if(DEPARTAMENTO != null){
				
					this.setProperty("DEPARTAMENTO", DEPARTAMENTO.toString());
				
			}
			
			if(CLASIFICACION != null){
				
					this.setProperty("CLASIFICACION", CLASIFICACION.toString());
				
			}
			
			if(CIUDAD != null){
				
					this.setProperty("CIUDAD", CIUDAD.toString());
				
			}
			
			if(FECHA_HORA_FINAL_EJECUCION != null){
				
					String pattern_FECHA_HORA_FINAL_EJECUCION = "yyyy-MM-dd HH:mm:ss";
					String value_FECHA_HORA_FINAL_EJECUCION = "";
					String[] parts_FECHA_HORA_FINAL_EJECUCION = value_FECHA_HORA_FINAL_EJECUCION.split(";");
					if(parts_FECHA_HORA_FINAL_EJECUCION.length > 1){
						pattern_FECHA_HORA_FINAL_EJECUCION = parts_FECHA_HORA_FINAL_EJECUCION[0];
						this.setProperty("FECHA_HORA_FINAL_EJECUCION", pattern_FECHA_HORA_FINAL_EJECUCION + ";" + FormatterUtils.format_Date(FECHA_HORA_FINAL_EJECUCION, pattern_FECHA_HORA_FINAL_EJECUCION));
					}else{
						this.setProperty("FECHA_HORA_FINAL_EJECUCION", FormatterUtils.format_Date(FECHA_HORA_FINAL_EJECUCION, pattern_FECHA_HORA_FINAL_EJECUCION));
					}
				
			}
			
			if(ID != null){
				
					this.setProperty("ID", ID.toString());
				
			}
			
			if(FECHA_HORA_INICIO_EJECUCION != null){
				
					String pattern_FECHA_HORA_INICIO_EJECUCION = "yyyy-MM-dd HH:mm:ss";
					String value_FECHA_HORA_INICIO_EJECUCION = "";
					String[] parts_FECHA_HORA_INICIO_EJECUCION = value_FECHA_HORA_INICIO_EJECUCION.split(";");
					if(parts_FECHA_HORA_INICIO_EJECUCION.length > 1){
						pattern_FECHA_HORA_INICIO_EJECUCION = parts_FECHA_HORA_INICIO_EJECUCION[0];
						this.setProperty("FECHA_HORA_INICIO_EJECUCION", pattern_FECHA_HORA_INICIO_EJECUCION + ";" + FormatterUtils.format_Date(FECHA_HORA_INICIO_EJECUCION, pattern_FECHA_HORA_INICIO_EJECUCION));
					}else{
						this.setProperty("FECHA_HORA_INICIO_EJECUCION", FormatterUtils.format_Date(FECHA_HORA_INICIO_EJECUCION, pattern_FECHA_HORA_INICIO_EJECUCION));
					}
				
			}
			
			if(FECHA_INICIAL != null){
				
					this.setProperty("FECHA_INICIAL", FECHA_INICIAL.toString());
				
			}
			
			if(REGIONAL != null){
				
					this.setProperty("REGIONAL", REGIONAL.toString());
				
			}
			
			if(EDAD_FINAL != null){
				
					this.setProperty("EDAD_FINAL", EDAD_FINAL.toString());
				
			}
			
			if(db_destino_ServiceName != null){
				
					this.setProperty("db_destino_ServiceName", db_destino_ServiceName.toString());
				
			}
			
			if(db_destino_AdditionalParams != null){
				
					this.setProperty("db_destino_AdditionalParams", db_destino_AdditionalParams.toString());
				
			}
			
			if(db_destino_Login != null){
				
					this.setProperty("db_destino_Login", db_destino_Login.toString());
				
			}
			
			if(db_destino_Port != null){
				
					this.setProperty("db_destino_Port", db_destino_Port.toString());
				
			}
			
			if(db_destino_Schema != null){
				
					this.setProperty("db_destino_Schema", db_destino_Schema.toString());
				
			}
			
			if(db_destino_Server != null){
				
					this.setProperty("db_destino_Server", db_destino_Server.toString());
				
			}
			
			if(db_destino_Password != null){
				
					this.setProperty("db_destino_Password", db_destino_Password.toString());
				
			}
			
			if(ESPECIALIDAD_ID != null){
				
					this.setProperty("ESPECIALIDAD_ID", ESPECIALIDAD_ID.toString());
				
			}
			
			if(TIPO_USUARIO != null){
				
					this.setProperty("TIPO_USUARIO", TIPO_USUARIO.toString());
				
			}
			
			if(FECHA_REALIZACION != null){
				
					this.setProperty("FECHA_REALIZACION", FECHA_REALIZACION.toString());
				
			}
			
			if(RAN_CONDICION_ODH != null){
				
					this.setProperty("RAN_CONDICION_ODH", RAN_CONDICION_ODH.toString());
				
			}
			
			if(NOMBRE_CSV != null){
				
					this.setProperty("NOMBRE_CSV", NOMBRE_CSV.toString());
				
			}
			
			if(ESPECIALIDAD != null){
				
					this.setProperty("ESPECIALIDAD", ESPECIALIDAD.toString());
				
			}
			
			if(TPLANAFILIACION != null){
				
					this.setProperty("TPLANAFILIACION", TPLANAFILIACION.toString());
				
			}
			
			if(GRADO != null){
				
					this.setProperty("GRADO", GRADO.toString());
				
			}
			
			if(GRUPO_EDAD != null){
				
					this.setProperty("GRUPO_EDAD", GRUPO_EDAD.toString());
				
			}
			
			if(TCOTIZACION != null){
				
					this.setProperty("TCOTIZACION", TCOTIZACION.toString());
				
			}
			
			if(ESM_NOMBRE != null){
				
					this.setProperty("ESM_NOMBRE", ESM_NOMBRE.toString());
				
			}
			
			if(FECHA_TITULO != null){
				
					this.setProperty("FECHA_TITULO", FECHA_TITULO.toString());
				
			}
			
			if(ESM_USUARIO != null){
				
					this.setProperty("ESM_USUARIO", ESM_USUARIO.toString());
				
			}
			
			if(FUERZA_NOMBRE != null){
				
					this.setProperty("FUERZA_NOMBRE", FUERZA_NOMBRE.toString());
				
			}
			
			if(PERIODO_FINAL != null){
				
					this.setProperty("PERIODO_FINAL", PERIODO_FINAL.toString());
				
			}
			
			if(TIPO_SOLICITUD != null){
				
					this.setProperty("TIPO_SOLICITUD", TIPO_SOLICITUD.toString());
				
			}
			
			if(GE_VALOR_MENOR != null){
				
					this.setProperty("GE_VALOR_MENOR", GE_VALOR_MENOR.toString());
				
			}
			
			if(RAN_CONDICION_AD != null){
				
					this.setProperty("RAN_CONDICION_AD", RAN_CONDICION_AD.toString());
				
			}
			
			if(EXISTE_REPORTE != null){
				
					this.setProperty("EXISTE_REPORTE", EXISTE_REPORTE.toString());
				
			}
			
			if(PERIODO_INICIAL != null){
				
					this.setProperty("PERIODO_INICIAL", PERIODO_INICIAL.toString());
				
			}
			
			if(RAN_CONDICION_PA != null){
				
					this.setProperty("RAN_CONDICION_PA", RAN_CONDICION_PA.toString());
				
			}
			
			if(ROLES_ID != null){
				
					this.setProperty("ROLES_ID", ROLES_ID.toString());
				
			}
			
			if(SEXO != null){
				
					this.setProperty("SEXO", SEXO.toString());
				
			}
			
			if(NOMBRE_ZIP != null){
				
					this.setProperty("NOMBRE_ZIP", NOMBRE_ZIP.toString());
				
			}
			
			if(TIPO_CITA != null){
				
					this.setProperty("TIPO_CITA", TIPO_CITA.toString());
				
			}
			
			if(ACTUALIZACION_TOTAL != null){
				
					this.setProperty("ACTUALIZACION_TOTAL", ACTUALIZACION_TOTAL.toString());
				
			}
			
			if(FECHA_EJECUCION != null){
				
					this.setProperty("FECHA_EJECUCION", FECHA_EJECUCION.toString());
				
			}
			
			if(LOGS_ERROR != null){
				
					this.setProperty("LOGS_ERROR", LOGS_ERROR.toString());
				
			}
			
			if(LOGS_EXECUTION != null){
				
					this.setProperty("LOGS_EXECUTION", LOGS_EXECUTION.toString());
				
			}
			
			if(FANTERIOR != null){
				
					this.setProperty("FANTERIOR", FANTERIOR.toString());
				
			}
			
			if(ESTADO_EXEC != null){
				
					this.setProperty("ESTADO_EXEC", ESTADO_EXEC.toString());
				
			}
			
			if(HORA_INICIO != null){
				
					this.setProperty("HORA_INICIO", HORA_INICIO.toString());
				
			}
			
			if(ESTADO != null){
				
					this.setProperty("ESTADO", ESTADO.toString());
				
			}
			
			if(BODEGA != null){
				
					this.setProperty("BODEGA", BODEGA.toString());
				
			}
			
			if(ID_SOLICITUD != null){
				
					this.setProperty("ID_SOLICITUD", ID_SOLICITUD.toString());
				
			}
			
			if(LAST_DAYS != null){
				
					this.setProperty("LAST_DAYS", LAST_DAYS.toString());
				
			}
			
			if(HORA_FINAL != null){
				
					this.setProperty("HORA_FINAL", HORA_FINAL.toString());
				
			}
			
			if(ERROR != null){
				
					this.setProperty("ERROR", ERROR.toString());
				
			}
			
			if(ORIGEN != null){
				
					this.setProperty("ORIGEN", ORIGEN.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String db_origen_Server;
public String getDb_origen_Server(){
	return this.db_origen_Server;
}
public java.lang.String db_origen_Password;
public java.lang.String getDb_origen_Password(){
	return this.db_origen_Password;
}
public String db_origen_Login;
public String getDb_origen_Login(){
	return this.db_origen_Login;
}
public String db_origen_Schema;
public String getDb_origen_Schema(){
	return this.db_origen_Schema;
}
public String db_origen_ServiceName;
public String getDb_origen_ServiceName(){
	return this.db_origen_ServiceName;
}
public String db_origen_AdditionalParams;
public String getDb_origen_AdditionalParams(){
	return this.db_origen_AdditionalParams;
}
public String db_origen_Port;
public String getDb_origen_Port(){
	return this.db_origen_Port;
}
public String FECHA_TERMINACION;
public String getFECHA_TERMINACION(){
	return this.FECHA_TERMINACION;
}
public String FUERZA;
public String getFUERZA(){
	return this.FUERZA;
}
public String ESM_REMITE;
public String getESM_REMITE(){
	return this.ESM_REMITE;
}
public String VINCULACION;
public String getVINCULACION(){
	return this.VINCULACION;
}
public String ESQUEMA;
public String getESQUEMA(){
	return this.ESQUEMA;
}
public BigDecimal ARCHIVOS_ID;
public BigDecimal getARCHIVOS_ID(){
	return this.ARCHIVOS_ID;
}
public String USUARIO;
public String getUSUARIO(){
	return this.USUARIO;
}
public String EDAD_INICIAL;
public String getEDAD_INICIAL(){
	return this.EDAD_INICIAL;
}
public String CARPETA_TEMPORAL;
public String getCARPETA_TEMPORAL(){
	return this.CARPETA_TEMPORAL;
}
public String FECHA_FINAL;
public String getFECHA_FINAL(){
	return this.FECHA_FINAL;
}
public String CARPETA_SALIDA;
public String getCARPETA_SALIDA(){
	return this.CARPETA_SALIDA;
}
public String SIGLA;
public String getSIGLA(){
	return this.SIGLA;
}
public String NOMBRE_CONSOLIDADO;
public String getNOMBRE_CONSOLIDADO(){
	return this.NOMBRE_CONSOLIDADO;
}
public String DEPARTAMENTO;
public String getDEPARTAMENTO(){
	return this.DEPARTAMENTO;
}
public String CLASIFICACION;
public String getCLASIFICACION(){
	return this.CLASIFICACION;
}
public String CIUDAD;
public String getCIUDAD(){
	return this.CIUDAD;
}
public java.util.Date FECHA_HORA_FINAL_EJECUCION;
public java.util.Date getFECHA_HORA_FINAL_EJECUCION(){
	return this.FECHA_HORA_FINAL_EJECUCION;
}
public BigDecimal ID;
public BigDecimal getID(){
	return this.ID;
}
public java.util.Date FECHA_HORA_INICIO_EJECUCION;
public java.util.Date getFECHA_HORA_INICIO_EJECUCION(){
	return this.FECHA_HORA_INICIO_EJECUCION;
}
public String FECHA_INICIAL;
public String getFECHA_INICIAL(){
	return this.FECHA_INICIAL;
}
public String REGIONAL;
public String getREGIONAL(){
	return this.REGIONAL;
}
public String EDAD_FINAL;
public String getEDAD_FINAL(){
	return this.EDAD_FINAL;
}
public String db_destino_ServiceName;
public String getDb_destino_ServiceName(){
	return this.db_destino_ServiceName;
}
public String db_destino_AdditionalParams;
public String getDb_destino_AdditionalParams(){
	return this.db_destino_AdditionalParams;
}
public String db_destino_Login;
public String getDb_destino_Login(){
	return this.db_destino_Login;
}
public String db_destino_Port;
public String getDb_destino_Port(){
	return this.db_destino_Port;
}
public String db_destino_Schema;
public String getDb_destino_Schema(){
	return this.db_destino_Schema;
}
public String db_destino_Server;
public String getDb_destino_Server(){
	return this.db_destino_Server;
}
public java.lang.String db_destino_Password;
public java.lang.String getDb_destino_Password(){
	return this.db_destino_Password;
}
public String ESPECIALIDAD_ID;
public String getESPECIALIDAD_ID(){
	return this.ESPECIALIDAD_ID;
}
public String TIPO_USUARIO;
public String getTIPO_USUARIO(){
	return this.TIPO_USUARIO;
}
public String FECHA_REALIZACION;
public String getFECHA_REALIZACION(){
	return this.FECHA_REALIZACION;
}
public String RAN_CONDICION_ODH;
public String getRAN_CONDICION_ODH(){
	return this.RAN_CONDICION_ODH;
}
public String NOMBRE_CSV;
public String getNOMBRE_CSV(){
	return this.NOMBRE_CSV;
}
public String ESPECIALIDAD;
public String getESPECIALIDAD(){
	return this.ESPECIALIDAD;
}
public String TPLANAFILIACION;
public String getTPLANAFILIACION(){
	return this.TPLANAFILIACION;
}
public String GRADO;
public String getGRADO(){
	return this.GRADO;
}
public String GRUPO_EDAD;
public String getGRUPO_EDAD(){
	return this.GRUPO_EDAD;
}
public String TCOTIZACION;
public String getTCOTIZACION(){
	return this.TCOTIZACION;
}
public String ESM_NOMBRE;
public String getESM_NOMBRE(){
	return this.ESM_NOMBRE;
}
public String FECHA_TITULO;
public String getFECHA_TITULO(){
	return this.FECHA_TITULO;
}
public String ESM_USUARIO;
public String getESM_USUARIO(){
	return this.ESM_USUARIO;
}
public String FUERZA_NOMBRE;
public String getFUERZA_NOMBRE(){
	return this.FUERZA_NOMBRE;
}
public String PERIODO_FINAL;
public String getPERIODO_FINAL(){
	return this.PERIODO_FINAL;
}
public String TIPO_SOLICITUD;
public String getTIPO_SOLICITUD(){
	return this.TIPO_SOLICITUD;
}
public String GE_VALOR_MENOR;
public String getGE_VALOR_MENOR(){
	return this.GE_VALOR_MENOR;
}
public String RAN_CONDICION_AD;
public String getRAN_CONDICION_AD(){
	return this.RAN_CONDICION_AD;
}
public Integer EXISTE_REPORTE;
public Integer getEXISTE_REPORTE(){
	return this.EXISTE_REPORTE;
}
public String PERIODO_INICIAL;
public String getPERIODO_INICIAL(){
	return this.PERIODO_INICIAL;
}
public String RAN_CONDICION_PA;
public String getRAN_CONDICION_PA(){
	return this.RAN_CONDICION_PA;
}
public String ROLES_ID;
public String getROLES_ID(){
	return this.ROLES_ID;
}
public String SEXO;
public String getSEXO(){
	return this.SEXO;
}
public String NOMBRE_ZIP;
public String getNOMBRE_ZIP(){
	return this.NOMBRE_ZIP;
}
public String TIPO_CITA;
public String getTIPO_CITA(){
	return this.TIPO_CITA;
}
public Boolean ACTUALIZACION_TOTAL;
public Boolean getACTUALIZACION_TOTAL(){
	return this.ACTUALIZACION_TOTAL;
}
public String FECHA_EJECUCION;
public String getFECHA_EJECUCION(){
	return this.FECHA_EJECUCION;
}
public String LOGS_ERROR;
public String getLOGS_ERROR(){
	return this.LOGS_ERROR;
}
public String LOGS_EXECUTION;
public String getLOGS_EXECUTION(){
	return this.LOGS_EXECUTION;
}
public String FANTERIOR;
public String getFANTERIOR(){
	return this.FANTERIOR;
}
public String ESTADO_EXEC;
public String getESTADO_EXEC(){
	return this.ESTADO_EXEC;
}
public String HORA_INICIO;
public String getHORA_INICIO(){
	return this.HORA_INICIO;
}
public String ESTADO;
public String getESTADO(){
	return this.ESTADO;
}
public String BODEGA;
public String getBODEGA(){
	return this.BODEGA;
}
public Integer ID_SOLICITUD;
public Integer getID_SOLICITUD(){
	return this.ID_SOLICITUD;
}
public Integer LAST_DAYS;
public Integer getLAST_DAYS(){
	return this.LAST_DAYS;
}
public String HORA_FINAL;
public String getHORA_FINAL(){
	return this.HORA_FINAL;
}
public String ERROR;
public String getERROR(){
	return this.ERROR;
}
public String ORIGEN;
public String getORIGEN(){
	return this.ORIGEN;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Consolidados_RIPS";
	private final String projectName = "REP_CONSOLIDADOS";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Consolidados_RIPS.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Consolidados_RIPS.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowToIterate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUnite_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileDelete_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBSP_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBSP_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row63_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row64_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileDelete_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	









public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tFileInputXML_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[0];
    static byte[] commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String Host;

				public String getHost () {
					return this.Host;
				}

				public Boolean HostIsNullable(){
				    return true;
				}
				public Boolean HostIsKey(){
				    return true;
				}
				public Integer HostLength(){
				    return 13;
				}
				public Integer HostPrecision(){
				    return 0;
				}
				public String HostDefault(){
				
					return null;
				
				}
				public String HostComment(){
				
				    return "";
				
				}
				public String HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HostOriginalDbColumnName(){
				
					return "Host";
				
				}

				
			    public String Port;

				public String getPort () {
					return this.Port;
				}

				public Boolean PortIsNullable(){
				    return true;
				}
				public Boolean PortIsKey(){
				    return true;
				}
				public Integer PortLength(){
				    return 4;
				}
				public Integer PortPrecision(){
				    return 0;
				}
				public String PortDefault(){
				
					return null;
				
				}
				public String PortComment(){
				
				    return "";
				
				}
				public String PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PortOriginalDbColumnName(){
				
					return "Port";
				
				}

				
			    public String Sid;

				public String getSid () {
					return this.Sid;
				}

				public Boolean SidIsNullable(){
				    return true;
				}
				public Boolean SidIsKey(){
				    return true;
				}
				public Integer SidLength(){
				    return 4;
				}
				public Integer SidPrecision(){
				    return 0;
				}
				public String SidDefault(){
				
					return null;
				
				}
				public String SidComment(){
				
				    return "";
				
				}
				public String SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SidOriginalDbColumnName(){
				
					return "Sid";
				
				}

				
			    public String ServiceName;

				public String getServiceName () {
					return this.ServiceName;
				}

				public Boolean ServiceNameIsNullable(){
				    return true;
				}
				public Boolean ServiceNameIsKey(){
				    return false;
				}
				public Integer ServiceNameLength(){
				    return 16;
				}
				public Integer ServiceNamePrecision(){
				    return 0;
				}
				public String ServiceNameDefault(){
				
					return null;
				
				}
				public String ServiceNameComment(){
				
				    return "";
				
				}
				public String ServiceNamePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ServiceNameOriginalDbColumnName(){
				
					return "ServiceName";
				
				}

				
			    public String Schema;

				public String getSchema () {
					return this.Schema;
				}

				public Boolean SchemaIsNullable(){
				    return true;
				}
				public Boolean SchemaIsKey(){
				    return false;
				}
				public Integer SchemaLength(){
				    return 8;
				}
				public Integer SchemaPrecision(){
				    return 0;
				}
				public String SchemaDefault(){
				
					return null;
				
				}
				public String SchemaComment(){
				
				    return "";
				
				}
				public String SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SchemaOriginalDbColumnName(){
				
					return "Schema";
				
				}

				
			    public String User;

				public String getUser () {
					return this.User;
				}

				public Boolean UserIsNullable(){
				    return true;
				}
				public Boolean UserIsKey(){
				    return false;
				}
				public Integer UserLength(){
				    return 12;
				}
				public Integer UserPrecision(){
				    return 0;
				}
				public String UserDefault(){
				
					return null;
				
				}
				public String UserComment(){
				
				    return "";
				
				}
				public String UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UserOriginalDbColumnName(){
				
					return "User";
				
				}

				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}

				public Boolean PasswordIsNullable(){
				    return true;
				}
				public Boolean PasswordIsKey(){
				    return false;
				}
				public Integer PasswordLength(){
				    return 12;
				}
				public Integer PasswordPrecision(){
				    return 0;
				}
				public String PasswordDefault(){
				
					return null;
				
				}
				public String PasswordComment(){
				
				    return "";
				
				}
				public String PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordOriginalDbColumnName(){
				
					return "Password";
				
				}

				
			    public String PathStorage;

				public String getPathStorage () {
					return this.PathStorage;
				}

				public Boolean PathStorageIsNullable(){
				    return true;
				}
				public Boolean PathStorageIsKey(){
				    return false;
				}
				public Integer PathStorageLength(){
				    return 48;
				}
				public Integer PathStoragePrecision(){
				    return 0;
				}
				public String PathStorageDefault(){
				
					return null;
				
				}
				public String PathStorageComment(){
				
				    return "";
				
				}
				public String PathStoragePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PathStorageOriginalDbColumnName(){
				
					return "PathStorage";
				
				}

				
			    public String SMTPHost;

				public String getSMTPHost () {
					return this.SMTPHost;
				}

				public Boolean SMTPHostIsNullable(){
				    return true;
				}
				public Boolean SMTPHostIsKey(){
				    return false;
				}
				public Integer SMTPHostLength(){
				    return 14;
				}
				public Integer SMTPHostPrecision(){
				    return 0;
				}
				public String SMTPHostDefault(){
				
					return null;
				
				}
				public String SMTPHostComment(){
				
				    return "";
				
				}
				public String SMTPHostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPHostOriginalDbColumnName(){
				
					return "SMTPHost";
				
				}

				
			    public String SMTPPort;

				public String getSMTPPort () {
					return this.SMTPPort;
				}

				public Boolean SMTPPortIsNullable(){
				    return true;
				}
				public Boolean SMTPPortIsKey(){
				    return false;
				}
				public Integer SMTPPortLength(){
				    return 3;
				}
				public Integer SMTPPortPrecision(){
				    return 0;
				}
				public String SMTPPortDefault(){
				
					return null;
				
				}
				public String SMTPPortComment(){
				
				    return "";
				
				}
				public String SMTPPortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPPortOriginalDbColumnName(){
				
					return "SMTPPort";
				
				}

				
			    public String UsernameMail;

				public String getUsernameMail () {
					return this.UsernameMail;
				}

				public Boolean UsernameMailIsNullable(){
				    return true;
				}
				public Boolean UsernameMailIsKey(){
				    return false;
				}
				public Integer UsernameMailLength(){
				    return 34;
				}
				public Integer UsernameMailPrecision(){
				    return 0;
				}
				public String UsernameMailDefault(){
				
					return null;
				
				}
				public String UsernameMailComment(){
				
				    return "";
				
				}
				public String UsernameMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UsernameMailOriginalDbColumnName(){
				
					return "UsernameMail";
				
				}

				
			    public String PasswordMail;

				public String getPasswordMail () {
					return this.PasswordMail;
				}

				public Boolean PasswordMailIsNullable(){
				    return true;
				}
				public Boolean PasswordMailIsKey(){
				    return false;
				}
				public Integer PasswordMailLength(){
				    return 13;
				}
				public Integer PasswordMailPrecision(){
				    return 0;
				}
				public String PasswordMailDefault(){
				
					return null;
				
				}
				public String PasswordMailComment(){
				
				    return "";
				
				}
				public String PasswordMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordMailOriginalDbColumnName(){
				
					return "PasswordMail";
				
				}

				
			    public String MailTo;

				public String getMailTo () {
					return this.MailTo;
				}

				public Boolean MailToIsNullable(){
				    return true;
				}
				public Boolean MailToIsKey(){
				    return false;
				}
				public Integer MailToLength(){
				    return 0;
				}
				public Integer MailToPrecision(){
				    return 0;
				}
				public String MailToDefault(){
				
					return null;
				
				}
				public String MailToComment(){
				
				    return "";
				
				}
				public String MailToPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String MailToOriginalDbColumnName(){
				
					return "MailTo";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.Host == null) ? 0 : this.Host.hashCode());
					
						result = prime * result + ((this.Port == null) ? 0 : this.Port.hashCode());
					
						result = prime * result + ((this.Sid == null) ? 0 : this.Sid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row8Struct other = (row8Struct) obj;
		
						if (this.Host == null) {
							if (other.Host != null)
								return false;
						
						} else if (!this.Host.equals(other.Host))
						
							return false;
					
						if (this.Port == null) {
							if (other.Port != null)
								return false;
						
						} else if (!this.Port.equals(other.Port))
						
							return false;
					
						if (this.Sid == null) {
							if (other.Sid != null)
								return false;
						
						} else if (!this.Sid.equals(other.Sid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row8Struct other) {

		other.Host = this.Host;
	            other.Port = this.Port;
	            other.Sid = this.Sid;
	            other.ServiceName = this.ServiceName;
	            other.Schema = this.Schema;
	            other.User = this.User;
	            other.Password = this.Password;
	            other.PathStorage = this.PathStorage;
	            other.SMTPHost = this.SMTPHost;
	            other.SMTPPort = this.SMTPPort;
	            other.UsernameMail = this.UsernameMail;
	            other.PasswordMail = this.PasswordMail;
	            other.MailTo = this.MailTo;
	            
	}

	public void copyKeysDataTo(row8Struct other) {

		other.Host = this.Host;
	            	other.Port = this.Port;
	            	other.Sid = this.Sid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length) {
				if(length < 1024 && commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length == 0) {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[1024];
				} else {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length);
			strReturn = new String(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length) {
				if(length < 1024 && commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length == 0) {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[1024];
				} else {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length);
			strReturn = new String(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.PathStorage = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
					this.MailTo = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.PathStorage = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
					this.MailTo = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.PathStorage,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
					// String
				
						writeString(this.MailTo,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.PathStorage,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
					// String
				
						writeString(this.MailTo,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Host="+Host);
		sb.append(",Port="+Port);
		sb.append(",Sid="+Sid);
		sb.append(",ServiceName="+ServiceName);
		sb.append(",Schema="+Schema);
		sb.append(",User="+User);
		sb.append(",Password="+Password);
		sb.append(",PathStorage="+PathStorage);
		sb.append(",SMTPHost="+SMTPHost);
		sb.append(",SMTPPort="+SMTPPort);
		sb.append(",UsernameMail="+UsernameMail);
		sb.append(",PasswordMail="+PasswordMail);
		sb.append(",MailTo="+MailTo);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Host, other.Host);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Port, other.Port);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Sid, other.Sid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tFileInputXML_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_1", false);
		start_Hash.put("tFileInputXML_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_1";
	
	
		int tos_count_tFileInputXML_1 = 0;
		

	

int nb_line_tFileInputXML_1 = 0;

	String os_tFileInputXML_1 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_1=false;
	if(os_tFileInputXML_1.indexOf("windows") > -1 || os_tFileInputXML_1.indexOf("nt") > -1){
		isWindows_tFileInputXML_1=true;
	}
class XML_API_tFileInputXML_1{
	public boolean isDefNull(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0] != null && node[1]!=null && ("true").equals(node[1])){
        	return true;
        }
        return false;
    }

    public boolean isMissing(String[] node) throws javax.xml.transform.TransformerException {
        return node[0] == null ? true : false;
    }

    public boolean isEmpty(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0]!=null ){
        	return node[0].length() == 0;
        }
        return false;
    }
}
XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();

String[] queryPaths_tFileInputXML_1 = new String[]{	
	"Host"		
	,"Host"+"/@xsi:nil"	
	,"Port"		
	,"Port"+"/@xsi:nil"	
	,"Sid"		
	,"Sid"+"/@xsi:nil"	
	,"ServiceName"		
	,"ServiceName"+"/@xsi:nil"	
	,"Schema"		
	,"Schema"+"/@xsi:nil"	
	,"User"		
	,"User"+"/@xsi:nil"	
	,"Password"		
	,"Password"+"/@xsi:nil"	
	,"PathStorage"		
	,"PathStorage"+"/@xsi:nil"	
	,"SMTPHost"		
	,"SMTPHost"+"/@xsi:nil"	
	,"SMTPPort"		
	,"SMTPPort"+"/@xsi:nil"	
	,"UsernameMail"		
	,"UsernameMail"+"/@xsi:nil"	
	,"PasswordMail"		
	,"PasswordMail"+"/@xsi:nil"	
	,"MailTo"		
	,"MailTo"+"/@xsi:nil"
};

boolean[] asXMLs_tFileInputXML_1 = new boolean[]{	
	false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false
};

String str_tFileInputXML_1 = "";
String[] node_tFileInputXML_1 = null;
org.talend.xml.sax.SAXLooper looper_tFileInputXML_1 = new org.talend.xml.sax.SAXLooper("/connectionStrings",queryPaths_tFileInputXML_1,asXMLs_tFileInputXML_1);
looper_tFileInputXML_1.setEncoding("UTF-8");
Object filename_tFileInputXML_1 = null;
try {
	filename_tFileInputXML_1 = context.ORIGEN;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	
	throw(e);
	
}
if(filename_tFileInputXML_1 != null && filename_tFileInputXML_1 instanceof String && filename_tFileInputXML_1.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_1){
		filename_tFileInputXML_1 = filename_tFileInputXML_1.toString().replaceFirst("//","/");
	}
}
if(filename_tFileInputXML_1 instanceof java.io.InputStream){
	looper_tFileInputXML_1.parse((java.io.InputStream)filename_tFileInputXML_1);
}else{
	looper_tFileInputXML_1.parse(String.valueOf(filename_tFileInputXML_1));
}
java.util.Iterator<java.util.Map<String, String>> it_tFileInputXML_1  = looper_tFileInputXML_1.iterator();
while (it_tFileInputXML_1.hasNext()) {
	java.util.Map<String, String> row_tFileInputXML_1 = it_tFileInputXML_1.next();
	if (nb_line_tFileInputXML_1>=50) {
	
			looper_tFileInputXML_1.stopRead();
	
		break;
	}
		nb_line_tFileInputXML_1++;
		
	row8 = null;			
	boolean whetherReject_tFileInputXML_1 = false;
	row8 = new row8Struct();
	try{
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Host");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Host"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row8.Host =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row8.Host ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row8.Host =null;
									}else{
		row8.Host = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Port");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Port"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row8.Port =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row8.Port ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row8.Port =null;
									}else{
		row8.Port = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Sid");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Sid"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row8.Sid =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row8.Sid ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row8.Sid =null;
									}else{
		row8.Sid = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("ServiceName");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("ServiceName"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row8.ServiceName =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row8.ServiceName ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row8.ServiceName =null;
									}else{
		row8.ServiceName = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Schema");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Schema"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row8.Schema =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row8.Schema ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row8.Schema =null;
									}else{
		row8.Schema = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("User");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("User"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row8.User =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row8.User ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row8.User =null;
									}else{
		row8.User = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Password");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Password"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row8.Password =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row8.Password ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row8.Password =null;
									}else{
		row8.Password = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("PathStorage");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("PathStorage"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row8.PathStorage =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row8.PathStorage ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row8.PathStorage =null;
									}else{
		row8.PathStorage = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("SMTPHost");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("SMTPHost"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row8.SMTPHost =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row8.SMTPHost ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row8.SMTPHost =null;
									}else{
		row8.SMTPHost = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("SMTPPort");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("SMTPPort"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row8.SMTPPort =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row8.SMTPPort ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row8.SMTPPort =null;
									}else{
		row8.SMTPPort = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("UsernameMail");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("UsernameMail"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row8.UsernameMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row8.UsernameMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row8.UsernameMail =null;
									}else{
		row8.UsernameMail = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("PasswordMail");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("PasswordMail"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row8.PasswordMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row8.PasswordMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row8.PasswordMail =null;
									}else{
		row8.PasswordMail = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("MailTo");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("MailTo"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row8.MailTo =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row8.MailTo ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row8.MailTo =null;
									}else{
		row8.MailTo = str_tFileInputXML_1;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_1 = true;
            throw(e);
    }
			
			

 



/**
 * [tFileInputXML_1 begin ] stop
 */
	
	/**
	 * [tFileInputXML_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 


	tos_count_tFileInputXML_1++;

/**
 * [tFileInputXML_1 main ] stop
 */
	
	/**
	 * [tFileInputXML_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_begin ] stop
 */
// Start of branch "row8"
if(row8 != null) { 



	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					

    context.db_origen_Server = row8.Host;
context.db_origen_Port = row8.Port;
/*context.db_origen_Sid = row8.Sid;*/
context.db_origen_Login = row8.User;
context.db_origen_Password = row8.Password;
context.db_origen_ServiceName = row8.ServiceName;
context.db_origen_Schema = row8.Schema;

context.FECHA_HORA_INICIO_EJECUCION = new Date();
context.ESTADO_EXEC = "Fail" ;
context.FECHA_EJECUCION = TalendDate.getDate("DD/MM/YYYY");
context.HORA_INICIO = TalendDate.getDate("HH:mm:ss");
    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */

} // End of branch "row8"




	
	/**
	 * [tFileInputXML_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	


	}
	try {
		looper_tFileInputXML_1.handleTaskResponse();
	} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
		if(!(e.getCause() instanceof org.talend.xml.sax.exception.EnoughDataException))
	
		throw(e);
	
	}
	globalMap.put("tFileInputXML_1_NB_LINE",nb_line_tFileInputXML_1);

	

 

ok_Hash.put("tFileInputXML_1", true);
end_Hash.put("tFileInputXML_1", System.currentTimeMillis());




/**
 * [tFileInputXML_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tDBConnection_1Process(globalMap);



/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputXML_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tFileInputXML_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";
	
	
		int tos_count_tDBConnection_1 = 0;
		
	

	
        String url_tDBConnection_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tDBConnection_1", "ORACLE_SERVICE_NAME");
	String dbUser_tDBConnection_1 = context.db_origen_Login;
	
	
		
	final String decryptedPassword_tDBConnection_1 = context.db_origen_Password; 
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
		
			String driverClass_tDBConnection_1 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			java.util.Properties atnParamsPrope_tDBConnection_1 = new java.util.Properties();
			    atnParamsPrope_tDBConnection_1.put("user",dbUser_tDBConnection_1);
			    atnParamsPrope_tDBConnection_1.put("password",dbPwd_tDBConnection_1);
			if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                atnParamsPrope_tDBConnection_1.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1, atnParamsPrope_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(true);
	}
        globalMap.put("host_" + "tDBConnection_1",context.db_origen_Server);
        globalMap.put("port_" + "tDBConnection_1",context.db_origen_Port);
        globalMap.put("dbname_" + "tDBConnection_1",context.db_origen_ServiceName);

	globalMap.put("dbschema_" + "tDBConnection_1", context.db_origen_Schema);
	globalMap.put("username_" + "tDBConnection_1",context.db_origen_Login);
	globalMap.put("password_" + "tDBConnection_1",dbPwd_tDBConnection_1);

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[0];
    static byte[] commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String Host;

				public String getHost () {
					return this.Host;
				}

				public Boolean HostIsNullable(){
				    return true;
				}
				public Boolean HostIsKey(){
				    return true;
				}
				public Integer HostLength(){
				    return 13;
				}
				public Integer HostPrecision(){
				    return 0;
				}
				public String HostDefault(){
				
					return null;
				
				}
				public String HostComment(){
				
				    return "";
				
				}
				public String HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HostOriginalDbColumnName(){
				
					return "Host";
				
				}

				
			    public String Port;

				public String getPort () {
					return this.Port;
				}

				public Boolean PortIsNullable(){
				    return true;
				}
				public Boolean PortIsKey(){
				    return true;
				}
				public Integer PortLength(){
				    return 4;
				}
				public Integer PortPrecision(){
				    return 0;
				}
				public String PortDefault(){
				
					return null;
				
				}
				public String PortComment(){
				
				    return "";
				
				}
				public String PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PortOriginalDbColumnName(){
				
					return "Port";
				
				}

				
			    public String Sid;

				public String getSid () {
					return this.Sid;
				}

				public Boolean SidIsNullable(){
				    return true;
				}
				public Boolean SidIsKey(){
				    return true;
				}
				public Integer SidLength(){
				    return 4;
				}
				public Integer SidPrecision(){
				    return 0;
				}
				public String SidDefault(){
				
					return null;
				
				}
				public String SidComment(){
				
				    return "";
				
				}
				public String SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SidOriginalDbColumnName(){
				
					return "Sid";
				
				}

				
			    public String ServiceName;

				public String getServiceName () {
					return this.ServiceName;
				}

				public Boolean ServiceNameIsNullable(){
				    return true;
				}
				public Boolean ServiceNameIsKey(){
				    return false;
				}
				public Integer ServiceNameLength(){
				    return 16;
				}
				public Integer ServiceNamePrecision(){
				    return 0;
				}
				public String ServiceNameDefault(){
				
					return null;
				
				}
				public String ServiceNameComment(){
				
				    return "";
				
				}
				public String ServiceNamePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ServiceNameOriginalDbColumnName(){
				
					return "ServiceName";
				
				}

				
			    public String Schema;

				public String getSchema () {
					return this.Schema;
				}

				public Boolean SchemaIsNullable(){
				    return true;
				}
				public Boolean SchemaIsKey(){
				    return false;
				}
				public Integer SchemaLength(){
				    return 12;
				}
				public Integer SchemaPrecision(){
				    return 0;
				}
				public String SchemaDefault(){
				
					return null;
				
				}
				public String SchemaComment(){
				
				    return "";
				
				}
				public String SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SchemaOriginalDbColumnName(){
				
					return "Schema";
				
				}

				
			    public String User;

				public String getUser () {
					return this.User;
				}

				public Boolean UserIsNullable(){
				    return true;
				}
				public Boolean UserIsKey(){
				    return false;
				}
				public Integer UserLength(){
				    return 12;
				}
				public Integer UserPrecision(){
				    return 0;
				}
				public String UserDefault(){
				
					return null;
				
				}
				public String UserComment(){
				
				    return "";
				
				}
				public String UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UserOriginalDbColumnName(){
				
					return "User";
				
				}

				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}

				public Boolean PasswordIsNullable(){
				    return true;
				}
				public Boolean PasswordIsKey(){
				    return false;
				}
				public Integer PasswordLength(){
				    return 12;
				}
				public Integer PasswordPrecision(){
				    return 0;
				}
				public String PasswordDefault(){
				
					return null;
				
				}
				public String PasswordComment(){
				
				    return "";
				
				}
				public String PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordOriginalDbColumnName(){
				
					return "Password";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.Host == null) ? 0 : this.Host.hashCode());
					
						result = prime * result + ((this.Port == null) ? 0 : this.Port.hashCode());
					
						result = prime * result + ((this.Sid == null) ? 0 : this.Sid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row9Struct other = (row9Struct) obj;
		
						if (this.Host == null) {
							if (other.Host != null)
								return false;
						
						} else if (!this.Host.equals(other.Host))
						
							return false;
					
						if (this.Port == null) {
							if (other.Port != null)
								return false;
						
						} else if (!this.Port.equals(other.Port))
						
							return false;
					
						if (this.Sid == null) {
							if (other.Sid != null)
								return false;
						
						} else if (!this.Sid.equals(other.Sid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row9Struct other) {

		other.Host = this.Host;
	            other.Port = this.Port;
	            other.Sid = this.Sid;
	            other.ServiceName = this.ServiceName;
	            other.Schema = this.Schema;
	            other.User = this.User;
	            other.Password = this.Password;
	            
	}

	public void copyKeysDataTo(row9Struct other) {

		other.Host = this.Host;
	            	other.Port = this.Port;
	            	other.Sid = this.Sid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length) {
				if(length < 1024 && commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length == 0) {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[1024];
				} else {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length);
			strReturn = new String(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length) {
				if(length < 1024 && commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length == 0) {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[1024];
				} else {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length);
			strReturn = new String(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Host="+Host);
		sb.append(",Port="+Port);
		sb.append(",Sid="+Sid);
		sb.append(",ServiceName="+ServiceName);
		sb.append(",Schema="+Schema);
		sb.append(",User="+User);
		sb.append(",Password="+Password);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Host, other.Host);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Port, other.Port);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Sid, other.Sid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();




	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tJavaRow_2 = 0;
		

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tFileInputXML_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_2", false);
		start_Hash.put("tFileInputXML_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_2";
	
	
		int tos_count_tFileInputXML_2 = 0;
		

	

int nb_line_tFileInputXML_2 = 0;

	String os_tFileInputXML_2 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_2=false;
	if(os_tFileInputXML_2.indexOf("windows") > -1 || os_tFileInputXML_2.indexOf("nt") > -1){
		isWindows_tFileInputXML_2=true;
	}
class XML_API_tFileInputXML_2{
	public boolean isDefNull(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0] != null && node[1]!=null && ("true").equals(node[1])){
        	return true;
        }
        return false;
    }

    public boolean isMissing(String[] node) throws javax.xml.transform.TransformerException {
        return node[0] == null ? true : false;
    }

    public boolean isEmpty(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0]!=null ){
        	return node[0].length() == 0;
        }
        return false;
    }
}
XML_API_tFileInputXML_2 xml_api_tFileInputXML_2 = new XML_API_tFileInputXML_2();

String[] queryPaths_tFileInputXML_2 = new String[]{	
	"Host"		
	,"Host"+"/@xsi:nil"	
	,"Port"		
	,"Port"+"/@xsi:nil"	
	,"Sid"		
	,"Sid"+"/@xsi:nil"	
	,"ServiceName"		
	,"ServiceName"+"/@xsi:nil"	
	,"Schema"		
	,"Schema"+"/@xsi:nil"	
	,"User"		
	,"User"+"/@xsi:nil"	
	,"Password"		
	,"Password"+"/@xsi:nil"
};

boolean[] asXMLs_tFileInputXML_2 = new boolean[]{	
	false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false
};

String str_tFileInputXML_2 = "";
String[] node_tFileInputXML_2 = null;
org.talend.xml.sax.SAXLooper looper_tFileInputXML_2 = new org.talend.xml.sax.SAXLooper("/connectionStrings",queryPaths_tFileInputXML_2,asXMLs_tFileInputXML_2);
looper_tFileInputXML_2.setEncoding("UTF-8");
Object filename_tFileInputXML_2 = null;
try {
	filename_tFileInputXML_2 = context.BODEGA;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
	
	throw(e);
	
}
if(filename_tFileInputXML_2 != null && filename_tFileInputXML_2 instanceof String && filename_tFileInputXML_2.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_2){
		filename_tFileInputXML_2 = filename_tFileInputXML_2.toString().replaceFirst("//","/");
	}
}
if(filename_tFileInputXML_2 instanceof java.io.InputStream){
	looper_tFileInputXML_2.parse((java.io.InputStream)filename_tFileInputXML_2);
}else{
	looper_tFileInputXML_2.parse(String.valueOf(filename_tFileInputXML_2));
}
java.util.Iterator<java.util.Map<String, String>> it_tFileInputXML_2  = looper_tFileInputXML_2.iterator();
while (it_tFileInputXML_2.hasNext()) {
	java.util.Map<String, String> row_tFileInputXML_2 = it_tFileInputXML_2.next();
	if (nb_line_tFileInputXML_2>=50) {
	
			looper_tFileInputXML_2.stopRead();
	
		break;
	}
		nb_line_tFileInputXML_2++;
		
	row9 = null;			
	boolean whetherReject_tFileInputXML_2 = false;
	row9 = new row9Struct();
	try{
	str_tFileInputXML_2 = row_tFileInputXML_2.get("Host");
	node_tFileInputXML_2 = new String[]{str_tFileInputXML_2,row_tFileInputXML_2.get("Host"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row9.Host =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row9.Host ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row9.Host =null;
									}else{
		row9.Host = str_tFileInputXML_2;
	}
	str_tFileInputXML_2 = row_tFileInputXML_2.get("Port");
	node_tFileInputXML_2 = new String[]{str_tFileInputXML_2,row_tFileInputXML_2.get("Port"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row9.Port =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row9.Port ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row9.Port =null;
									}else{
		row9.Port = str_tFileInputXML_2;
	}
	str_tFileInputXML_2 = row_tFileInputXML_2.get("Sid");
	node_tFileInputXML_2 = new String[]{str_tFileInputXML_2,row_tFileInputXML_2.get("Sid"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row9.Sid =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row9.Sid ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row9.Sid =null;
									}else{
		row9.Sid = str_tFileInputXML_2;
	}
	str_tFileInputXML_2 = row_tFileInputXML_2.get("ServiceName");
	node_tFileInputXML_2 = new String[]{str_tFileInputXML_2,row_tFileInputXML_2.get("ServiceName"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row9.ServiceName =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row9.ServiceName ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row9.ServiceName =null;
									}else{
		row9.ServiceName = str_tFileInputXML_2;
	}
	str_tFileInputXML_2 = row_tFileInputXML_2.get("Schema");
	node_tFileInputXML_2 = new String[]{str_tFileInputXML_2,row_tFileInputXML_2.get("Schema"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row9.Schema =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row9.Schema ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row9.Schema =null;
									}else{
		row9.Schema = str_tFileInputXML_2;
	}
	str_tFileInputXML_2 = row_tFileInputXML_2.get("User");
	node_tFileInputXML_2 = new String[]{str_tFileInputXML_2,row_tFileInputXML_2.get("User"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row9.User =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row9.User ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row9.User =null;
									}else{
		row9.User = str_tFileInputXML_2;
	}
	str_tFileInputXML_2 = row_tFileInputXML_2.get("Password");
	node_tFileInputXML_2 = new String[]{str_tFileInputXML_2,row_tFileInputXML_2.get("Password"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row9.Password =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row9.Password ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row9.Password =null;
									}else{
		row9.Password = str_tFileInputXML_2;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_2 = true;
            throw(e);
    }
			
			

 



/**
 * [tFileInputXML_2 begin ] stop
 */
	
	/**
	 * [tFileInputXML_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 


	tos_count_tFileInputXML_2++;

/**
 * [tFileInputXML_2 main ] stop
 */
	
	/**
	 * [tFileInputXML_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 process_data_begin ] stop
 */
// Start of branch "row9"
if(row9 != null) { 



	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					

    context.db_destino_Server = row9.Host;
context.db_destino_Port = row9.Port;
/*context.db_destino_Sid = row9.Sid;*/
context.db_destino_Login = row9.User;
context.db_destino_Password = row9.Password;
context.db_destino_ServiceName = row9.ServiceName;
context.db_destino_Schema = row9.Schema;

context.CARPETA_SALIDA = context.CARPETA_SALIDA+"/RIPS";

    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_end ] stop
 */

} // End of branch "row9"




	
	/**
	 * [tFileInputXML_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	


	}
	try {
		looper_tFileInputXML_2.handleTaskResponse();
	} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
		if(!(e.getCause() instanceof org.talend.xml.sax.exception.EnoughDataException))
	
		throw(e);
	
	}
	globalMap.put("tFileInputXML_2_NB_LINE",nb_line_tFileInputXML_2);

	

 

ok_Hash.put("tFileInputXML_2", true);
end_Hash.put("tFileInputXML_2", System.currentTimeMillis());




/**
 * [tFileInputXML_2 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tDBConnection_2Process(globalMap);



/**
 * [tJavaRow_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_2_SUBPROCESS_STATE", 1);
	}
	


public void tDBConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_2", false);
		start_Hash.put("tDBConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_2";
	
	
		int tos_count_tDBConnection_2 = 0;
		
	

	
        String url_tDBConnection_2 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tDBConnection_2", "ORACLE_SERVICE_NAME");
	String dbUser_tDBConnection_2 = context.db_destino_Login;
	
	
		
	final String decryptedPassword_tDBConnection_2 = context.db_destino_Password; 
		String dbPwd_tDBConnection_2 = decryptedPassword_tDBConnection_2;
	
	
	java.sql.Connection conn_tDBConnection_2 = null;
	
		
			String driverClass_tDBConnection_2 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tDBConnection_2 = java.lang.Class.forName(driverClass_tDBConnection_2);
			globalMap.put("driverClass_tDBConnection_2", driverClass_tDBConnection_2);
		
			java.util.Properties atnParamsPrope_tDBConnection_2 = new java.util.Properties();
			    atnParamsPrope_tDBConnection_2.put("user",dbUser_tDBConnection_2);
			    atnParamsPrope_tDBConnection_2.put("password",dbPwd_tDBConnection_2);
			if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                atnParamsPrope_tDBConnection_2.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tDBConnection_2 = java.sql.DriverManager.getConnection(url_tDBConnection_2, atnParamsPrope_tDBConnection_2);

		globalMap.put("conn_tDBConnection_2", conn_tDBConnection_2);
	if (null != conn_tDBConnection_2) {
		
			conn_tDBConnection_2.setAutoCommit(false);
	}
        globalMap.put("host_" + "tDBConnection_2",context.db_destino_Server);
        globalMap.put("port_" + "tDBConnection_2",context.db_destino_Port);
        globalMap.put("dbname_" + "tDBConnection_2",context.db_destino_ServiceName);

	globalMap.put("dbschema_" + "tDBConnection_2", context.db_destino_Schema);
	globalMap.put("username_" + "tDBConnection_2",context.db_destino_Login);
	globalMap.put("password_" + "tDBConnection_2",dbPwd_tDBConnection_2);

 



/**
 * [tDBConnection_2 begin ] stop
 */
	
	/**
	 * [tDBConnection_2 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 


	tos_count_tDBConnection_2++;

/**
 * [tDBConnection_2 main ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_2 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 

ok_Hash.put("tDBConnection_2", true);
end_Hash.put("tDBConnection_2", System.currentTimeMillis());




/**
 * [tDBConnection_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 1);
	}
	


public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[0];
    static byte[] commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length) {
				if(length < 1024 && commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length == 0) {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[1024];
				} else {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length);
			strReturn = new String(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length) {
				if(length < 1024 && commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length == 0) {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[1024];
				} else {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length);
			strReturn = new String(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row14Struct row14 = new row14Struct();




	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.LOGS_ERROR)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
        if(filetFileOutputDelimited_1.exists()){
            isFileGenerated_tFileOutputDelimited_1 = false;
        }
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("moment");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("project");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("job");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("context");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("origin");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("message");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }


resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";
	
	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row14.type = lcm.getType();
		row14.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row14.priority = lcm.getPriority();
		row14.message = lcm.getMessage();
		row14.code = lcm.getCode();
		
		row14.moment = java.util.Calendar.getInstance().getTime();
	
    	row14.pid = pid;
		row14.root_pid = rootPid;
		row14.father_pid = fatherPid;
	
    	row14.project = projectName;
    	row14.job = jobName;
    	row14.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row14"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row14.moment != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(row14.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row14.project != null) {
                        sb_tFileOutputDelimited_1.append(
                            row14.project
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row14.job != null) {
                        sb_tFileOutputDelimited_1.append(
                            row14.job
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row14.context != null) {
                        sb_tFileOutputDelimited_1.append(
                            row14.context
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row14.origin != null) {
                        sb_tFileOutputDelimited_1.append(
                            row14.origin
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row14.message != null) {
                        sb_tFileOutputDelimited_1.append(
                            row14.message
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	
	}
} catch (Exception e_tLogCatcher_1) {
globalMap.put("tLogCatcher_1_ERROR_MESSAGE",e_tLogCatcher_1.getMessage());
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";
	
	
		int tos_count_tJava_1 = 0;
		


context.FECHA_EJECUCION = TalendDate.getDate("DD/MM/YYYY");
context.ESTADO_EXEC = "Interrumpido";
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[0];
    static byte[] commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return 0;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal USUARIO_ID;

				public BigDecimal getUSUARIO_ID () {
					return this.USUARIO_ID;
				}

				public Boolean USUARIO_IDIsNullable(){
				    return true;
				}
				public Boolean USUARIO_IDIsKey(){
				    return false;
				}
				public Integer USUARIO_IDLength(){
				    return 0;
				}
				public Integer USUARIO_IDPrecision(){
				    return 0;
				}
				public String USUARIO_IDDefault(){
				
					return "";
				
				}
				public String USUARIO_IDComment(){
				
				    return "";
				
				}
				public String USUARIO_IDPattern(){
				
					return "";
				
				}
				public String USUARIO_IDOriginalDbColumnName(){
				
					return "USUARIO_ID";
				
				}

				
			    public String PARAMETTROS;

				public String getPARAMETTROS () {
					return this.PARAMETTROS;
				}

				public Boolean PARAMETTROSIsNullable(){
				    return true;
				}
				public Boolean PARAMETTROSIsKey(){
				    return false;
				}
				public Integer PARAMETTROSLength(){
				    return 250;
				}
				public Integer PARAMETTROSPrecision(){
				    return 0;
				}
				public String PARAMETTROSDefault(){
				
					return null;
				
				}
				public String PARAMETTROSComment(){
				
				    return "";
				
				}
				public String PARAMETTROSPattern(){
				
					return "";
				
				}
				public String PARAMETTROSOriginalDbColumnName(){
				
					return "PARAMETTROS";
				
				}

				
			    public String TIPO_ARCHIVO;

				public String getTIPO_ARCHIVO () {
					return this.TIPO_ARCHIVO;
				}

				public Boolean TIPO_ARCHIVOIsNullable(){
				    return true;
				}
				public Boolean TIPO_ARCHIVOIsKey(){
				    return false;
				}
				public Integer TIPO_ARCHIVOLength(){
				    return 50;
				}
				public Integer TIPO_ARCHIVOPrecision(){
				    return 0;
				}
				public String TIPO_ARCHIVODefault(){
				
					return null;
				
				}
				public String TIPO_ARCHIVOComment(){
				
				    return "";
				
				}
				public String TIPO_ARCHIVOPattern(){
				
					return "";
				
				}
				public String TIPO_ARCHIVOOriginalDbColumnName(){
				
					return "TIPO_ARCHIVO";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 10;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 25;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length) {
				if(length < 1024 && commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length == 0) {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[1024];
				} else {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length);
			strReturn = new String(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length) {
				if(length < 1024 && commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length == 0) {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[1024];
				} else {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length);
			strReturn = new String(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.USUARIO_ID = (BigDecimal) dis.readObject();
					
					this.PARAMETTROS = readString(dis);
					
					this.TIPO_ARCHIVO = readString(dis);
					
					this.SIGLA = readString(dis);
					
					this.ESTADO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.USUARIO_ID = (BigDecimal) dis.readObject();
					
					this.PARAMETTROS = readString(dis);
					
					this.TIPO_ARCHIVO = readString(dis);
					
					this.SIGLA = readString(dis);
					
					this.ESTADO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIO_ID);
					
					// String
				
						writeString(this.PARAMETTROS,dos);
					
					// String
				
						writeString(this.TIPO_ARCHIVO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIO_ID);
					
					// String
				
						writeString(this.PARAMETTROS,dos);
					
					// String
				
						writeString(this.TIPO_ARCHIVO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",USUARIO_ID="+String.valueOf(USUARIO_ID));
		sb.append(",PARAMETTROS="+PARAMETTROS);
		sb.append(",TIPO_ARCHIVO="+TIPO_ARCHIVO);
		sb.append(",SIGLA="+SIGLA);
		sb.append(",ESTADO="+ESTADO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tFlowToIterate_1 begin ] start
	 */

				
			int NB_ITERATE_tJava_3 = 0; //for statistics
			

	
		
		ok_Hash.put("tFlowToIterate_1", false);
		start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());
		
	
	currentComponent="tFlowToIterate_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tFlowToIterate_1 = 0;
		

int nb_line_tFlowToIterate_1 = 0;
int counter_tFlowToIterate_1 = 0;

 



/**
 * [tFlowToIterate_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";
	
	
		int tos_count_tDBInput_1 = 0;
		
	


	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
                boolean isTimeZoneNull_tDBInput_1 = false;
				boolean isConnectionWrapped_tDBInput_1 = !(conn_tDBInput_1 instanceof oracle.jdbc.OracleConnection) && conn_tDBInput_1.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tDBInput_1 = null;
                if (isConnectionWrapped_tDBInput_1) {
					unwrappedOraConn_tDBInput_1 = conn_tDBInput_1.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tDBInput_1 != null) {
                        isTimeZoneNull_tDBInput_1 = (unwrappedOraConn_tDBInput_1.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tDBInput_1 = (((oracle.jdbc.OracleConnection)conn_tDBInput_1).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tDBInput_1) {
					java.sql.Statement stmtGetTZ_tDBInput_1 = conn_tDBInput_1.createStatement();
					java.sql.ResultSet rsGetTZ_tDBInput_1 = stmtGetTZ_tDBInput_1.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tDBInput_1 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tDBInput_1.next()) {
						sessionTimezone_tDBInput_1 = rsGetTZ_tDBInput_1.getString(1);
					}
					if (isConnectionWrapped_tDBInput_1 && unwrappedOraConn_tDBInput_1 != null) {
                        unwrappedOraConn_tDBInput_1.setSessionTimeZone(sessionTimezone_tDBInput_1);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tDBInput_1).setSessionTimeZone(sessionTimezone_tDBInput_1);
                    }
				}
			
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "\nSELECT RSA.ID,\n       RSA.UORG_ID,\n       RSA.USUARIO_ID,\n       RSA.PARAMETTROS,\n       RTSA.NOMBRE AS TIPO_ARCH"
+"IVO,\n       RTSA.SIGLA,\n       RSA.ESTADO\nFROM   SALUDSIS.REP_SARCHIVO RSA\nINNER  JOIN SALUDSIS.REP_TSARCHIVO RTSA O"
+"N RTSA.ID = RSA.TSARCHIVO_ID\nWHERE \nRSA.ESTADO = 'Sin procesar' AND \nRSA.ESTREGISTRO_ID = 1\nAND RTSA.SIGLA = 'CRIPSD"
+"'\n--AND RSA.ID = 152554\nORDER  BY RSA.ID DESC\n";
		    

		    globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);

		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row3.ID = null;
							} else {
		                          
					if(rs_tDBInput_1.getObject(1) != null) {
						row3.ID = rs_tDBInput_1.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row3.UORG_ID = null;
							} else {
		                          
					if(rs_tDBInput_1.getObject(2) != null) {
						row3.UORG_ID = rs_tDBInput_1.getBigDecimal(2);
					} else {
				
						row3.UORG_ID = null;
					}
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row3.USUARIO_ID = null;
							} else {
		                          
					if(rs_tDBInput_1.getObject(3) != null) {
						row3.USUARIO_ID = rs_tDBInput_1.getBigDecimal(3);
					} else {
				
						row3.USUARIO_ID = null;
					}
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row3.PARAMETTROS = null;
							} else {
	                         		
        	row3.PARAMETTROS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row3.TIPO_ARCHIVO = null;
							} else {
	                         		
        	row3.TIPO_ARCHIVO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row3.SIGLA = null;
							} else {
	                         		
        	row3.SIGLA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row3.ESTADO = null;
							} else {
	                         		
        	row3.ESTADO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, false);
		                    }
					




 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tFlowToIterate_1 main ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					


    	            
            globalMap.put("row3.ID", row3.ID);
    	            
            globalMap.put("row3.UORG_ID", row3.UORG_ID);
    	            
            globalMap.put("row3.USUARIO_ID", row3.USUARIO_ID);
    	            
            globalMap.put("row3.PARAMETTROS", row3.PARAMETTROS);
    	            
            globalMap.put("row3.TIPO_ARCHIVO", row3.TIPO_ARCHIVO);
    	            
            globalMap.put("row3.SIGLA", row3.SIGLA);
    	            
            globalMap.put("row3.ESTADO", row3.ESTADO);
    	
 
	   nb_line_tFlowToIterate_1++;  
       counter_tFlowToIterate_1++;
       globalMap.put("tFlowToIterate_1_CURRENT_ITERATION", counter_tFlowToIterate_1);
 


	tos_count_tFlowToIterate_1++;

/**
 * [tFlowToIterate_1 main ] stop
 */
	
	/**
	 * [tFlowToIterate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 process_data_begin ] stop
 */
	NB_ITERATE_tJava_3++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("If1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row101", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row103", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("iterate2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk6", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row7", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk7", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If4", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk4", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row64", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("iterate3", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row63", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("outSolicitudArchivo", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If3", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tDBInput_3", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("out11", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row4", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tDBInput_3", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row30", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row6", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row64", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row63", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tJava_3);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";
	
	
		int tos_count_tJava_3 = 0;
		


//////////////Obtiene los parametros de los consolidados en un objeto JSON /////////////////////
JSONObject data = new JSONObject(row3.PARAMETTROS);


System.out.println(row3.PARAMETTROS);

///////////////////////Variables generales del consolidado ////////////////////////
context.ID = row3.ID; // ID 
context.SIGLA = row3.SIGLA; //SIGLA
context.NOMBRE_CONSOLIDADO = row3.TIPO_ARCHIVO; //Nombre del consolidado
context.EXISTE_REPORTE = 1;
System.out.println("Se inicia proceso de reporte: " + context.EXISTE_REPORTE);


/////////////////////////Filtros generales ////////////////////////////////////////
try 
{

	context.FECHA_INICIAL = data.getString("FECHA_INICIAL"); // fecha inicial
	context.FECHA_FINAL = data.getString("FECHA_FINAL"); // fecha final
} catch (Exception e) {
	System.err.println("Error parámetro no encontrado: "+e.getMessage()+context.NOMBRE_CONSOLIDADO);
}

try 
{

	context.ESM_REMITE = data.getString("UORG_ID") ; // esm
	/*if (Utils.empty(context.ESM_REMITE) == true ) {
		context.ESM_REMITE = data.getString("UORG_INGRESO");
	}*/
	
} catch (Exception e) {
	System.err.println("Error parámetro no encontrado: "+e.getMessage()+context.NOMBRE_CONSOLIDADO);
	//context.ESM_REMITE = 200;
}
////////////////////Parámetro especial para RTEU/////////////////////////
if(context.SIGLA.equals("RTEU")){
	try 
	{
		context.USUARIO = data.getString("USUARIO");
	}
	 catch (Exception e) 
	{
		System.err.println("Error parámetro no encontrado: "+e.getMessage());
	}
}
////////////////////Parámetro especial para APS/////////////////////////
if(context.SIGLA.equals("SOLAPS")){
	try 
	{
		//System.out.println("-----------------entra----------");
		context.PERIODO_INICIAL = data.getString("PERIODO_INICIAL");
		context.PERIODO_FINAL = data.getString("PERIODO_FINAL");
		context.ESM_USUARIO = data.getString("UORG_INGRESO");
		context.ESM_REMITE = data.getString("UORG_ID") ;
		context.FUERZA = data.getString("FUERZA_ID") ;
		//System.out.println(context.ESM_USUARIO+context.ESM_REMITE+context.FUERZA);
	}
	 catch (Exception e) 
	{
		System.err.println("Error parámetro no encontrado: "+e.getMessage());
	}
}


///////////////////Parámetro especial para VAC ///////////////////////////
if(context.SIGLA.equals("VAC"))
{	
	try 
	{
		context.FUERZA = data.getString("FUERZA");
		context.ESQUEMA = data.getString("ESQUEMA");
		context.ESM_REMITE = data.getString("ESM") ; // esm
		if(context.ESM_REMITE.equals("200"))
		{
			context.ESM_REMITE = null ;	
		}	 
	}
	catch (Exception e) 
	{
		System.err.println("Error parámetro no encontrado: "+e.getMessage());
	}
}
////////////////PARAMETRO ESPECIAL PARA RDAM///////////////////////////////
if(context.SIGLA.equals("RDAM"))
{
	System.err.println("Entre a la validación de RDAM");
	try 
	{
		context.FUERZA = data.getString("FUERZA");
		
			System.err.println("FUERZA :" + context.FUERZA);
			System.err.println("ESM" + context.ESM_REMITE);				
		if(context.ESM_REMITE.equals("200"))
		{
			context.ESM_REMITE = "" ;
		}	 
	}
	catch (Exception e) 
	{
		System.err.println("Error parámetro no encontrado: "+e.getMessage());
	}
}

/////PARÁMETROS PARA LOS REPORTES DE POBLACION SSR: PLANIFICACION FAMILIAR, NO EVALUADO RIESGO ITS Y VIH /////////////
///////////////////////////PACIENTES CON FACTORES DE RIESGO DE ITS Y VIH ////////////////////////////////////////////
if( context.SIGLA.equals("PNOPF")|| context.SIGLA.equals("PNOEVITS") ||  row3.SIGLA.equals("PFACITS") )
{
	try 
	{		
		context.ESM_REMITE = data.getString("UORG_ID") ;
		context.FUERZA = data.getString("FUERZA") ;
		context.CIUDAD = data.getString("CIUDAD") ;
		context.DEPARTAMENTO = data.getString("DEPARTAMENTO") ;
		context.REGIONAL = data.getString("REGIONAL") ;	
	} 
	catch (Exception e) 
	{
		System.err.println("Error parámetro no encontrado: "+e.getMessage());
	}
} 
///////PARÁMETROS POBLACIÓN NO TAMIZAJE CITOLOGICO, NO EXAMEN CLINICO DE SENO, NO MAMOGRAFIA, NO PSA//////////////////////////////////////////// 
else if ( context.SIGLA.equals("PNOCIT") || context.SIGLA.equals("PNOEXSEN") || context.SIGLA.equals("PNOMAM") || row3.SIGLA.equals("PNOPSA") )
{
	try 
	{		
		context.ESM_REMITE = data.getString("UORG_ID") ;
		context.FUERZA = data.getString("FUERZA") ;
		context.CIUDAD = data.getString("CIUDAD") ;
		context.DEPARTAMENTO = data.getString("DEPARTAMENTO") ;
		context.REGIONAL = data.getString("REGIONAL") ;	
		context.EDAD_INICIAL = data.getString("EDAD_INICIAL") ;
		context.EDAD_FINAL = data.getString("EDAD_FINAL") ;				
	} 
	catch (Exception e) 
	{
		System.err.println("Error parámetro no encontrado: "+e.getMessage());
	}
} 
//////////////POBLACION MASCULINA SIN CONSULTA CON UROLOGIA//////////////////
else if (  context.SIGLA.equals("PNOURO") )
{
	try 
	{
		context.FECHA_INICIAL = data.getString("FECHA_INICIAL"); 
		context.FECHA_FINAL = data.getString("FECHA_FINAL");
		context.ESM_REMITE = data.getString("UORG_ID") ;
		context.FUERZA = data.getString("FUERZA") ;
		context.CIUDAD = data.getString("CIUDAD") ;
		context.DEPARTAMENTO = data.getString("DEPARTAMENTO") ;
		context.REGIONAL = data.getString("REGIONAL") ;	
		context.EDAD_INICIAL = data.getString("EDAD_INICIAL") ;
		context.EDAD_FINAL = data.getString("EDAD_FINAL") ;
				
	} 
	catch (Exception e) 
	{
		System.err.println("Error parámetro no encontrado: "+e.getMessage());
	}
}
/////////////////////POBLACION SIN REGISTRAR FICHA FAMILIAR //////////////////////////////// 
else if ( row3.SIGLA.equals("FFA1") )
{
	try 
	{
		context.FECHA_INICIAL = data.getString("FECHA_INICIAL"); 
		context.FECHA_FINAL = data.getString("FECHA_FINAL");
		context.ESM_REMITE = data.getString("UORG_ID") ;
		context.FUERZA = data.getString("FUERZA") ;			
	} 
	catch (Exception e) 
	{
		System.err.println("Error parámetro no encontrado: "+e.getMessage());
	}
} 
/////////////////////FICHA EPIDEMIOLOGICA//////////////////////////////// 
else if ( row3.SIGLA.equals("FEPI") )
{
	try 
	{
		context.FECHA_INICIAL = data.getString("FECHA_INICIAL"); 
		context.FECHA_FINAL = data.getString("FECHA_FINAL");
		context.ESM_REMITE = data.getString("UORG_ID") ;
		context.ESM_USUARIO = data.getString("ESM_USUARIO");
		context.FUERZA = data.getString("FUERZA_SIGLA") ;	
		
		if(context.ESM_REMITE.equals("200") || context.ESM_REMITE.equals("201") || context.ESM_REMITE.equals("202") || context.ESM_REMITE.equals("203"))
		{
			context.ESM_REMITE = "";	
		}
		else if (context.ESM_USUARIO.equals("200") || context.ESM_USUARIO.equals("201") || context.ESM_USUARIO.equals("202") || context.ESM_USUARIO.equals("203"))
		{
			context.ESM_USUARIO = "";
		}	 
				
	} 
	catch (Exception e) 
	{
		System.err.println("Error parámetro no encontrado: "+e.getMessage());
	}
} 
/////////////////////MORBILIDAD ODONTOLÓGICA//////////////////////////////// 
else if ( row3.SIGLA.equals("SOLMO") )
{
	try 
	{
		context.FECHA_INICIAL = data.getString("FECHA_INICIAL"); 
		context.FECHA_FINAL = data.getString("FECHA_FINAL");
		context.ESM_REMITE = data.getString("UORG_ID") ;
		context.ESM_USUARIO = data.getString("UORG_INGRESO");
		context.FUERZA = data.getString("FUERZA_ID") ;			
		context.TIPO_USUARIO = data.getString("TIPO_USUARIO");
		context.GRUPO_EDAD = data.getString("GRUPO_EDAD");
		context.GRADO = data.getString("GRADO_ID");
				
	} 
	catch (Exception e) 
	{
		System.err.println("Error parámetro no encontrado: "+e.getMessage());
	}
} 

///////////////////////INDICES DE SALUD ORAL /////////////////////////////////////
else if ( row3.SIGLA.equals("SOLISO") )
{
	try 
	{
		context.FECHA_INICIAL = data.getString("FECHA_INICIAL"); 
		context.FECHA_FINAL = data.getString("FECHA_FINAL");
		context.ESM_REMITE = data.getString("UORG_ID") ;
		context.ESM_USUARIO = data.getString("UORG_INGRESO");
		context.FUERZA = data.getString("FUERZA_ID") ;							
	} 
	catch (Exception e) 
	{
		System.err.println("Error parámetro no encontrado: "+e.getMessage());
	}
} 

///////////////////////PACIENTES RIESGO ODONTOLOGICO /////////////////////////////////////
else if ( row3.SIGLA.equals("PCRODO") )
{
	try 
	{
		context.FECHA_INICIAL = data.getString("FECHA_INICIAL"); 
		context.FECHA_FINAL = data.getString("FECHA_FINAL");
		context.ESM_REMITE = data.getString("UORG_ID") ;
		context.ESM_USUARIO = data.getString("UORG_INGRESO");
		context.FUERZA = data.getString("FUERZA_ID") ;							
	} 
	catch (Exception e) 
	{
		System.err.println("Error parámetro no encontrado: "+e.getMessage());
	}
} 

/////////////////////VACUNACIÓN REI F4//////////////////////////////// 
else if ( row3.SIGLA.equals("REGVAC") )
{
	try 
	{
		context.FECHA_INICIAL = data.getString("FECHA_INICIAL"); 
		context.FECHA_FINAL = data.getString("FECHA_FINAL");
		context.ESM_REMITE = data.getString("UORG_ID") ;
		context.ESM_USUARIO = data.getString("UORG_INGRESO");
		context.FUERZA = data.getString("FUERZA_ID") ;			
		

				
	} 
	catch (Exception e) 
	{
		System.err.println("Error parámetro no encontrado: "+e.getMessage());
	}
} 
/////////////////////RIPS DIRECTIVA//////////////////////////////// 
else if ( row3.SIGLA.equals("NRIPSD") ||row3.SIGLA.equals("PRIPSD")||row3.SIGLA.equals("CRIPSD")||row3.SIGLA.equals("URIPSD"))
{
	try 
	{
		context.FECHA_INICIAL = data.getString("FECHA_INICIAL"); 
		context.FECHA_FINAL = data.getString("FECHA_FINAL");
		context.ESM_REMITE = data.getString("UORG_ID") ;
		context.ESM_USUARIO = data.getString("UORG_INGRESO");
		context.FUERZA = data.getString("FUERZA_ID") ;			
		

				
	} 
	catch (Exception e) 
	{
		System.err.println("Error parámetro no encontrado: "+e.getMessage());
	}
} 
/////////////////////RIPS URGENCIAS  && RIPS HOSPITALIZACIÓN//////////////////////////////// 
else if (row3.SIGLA.equals("URG")  ||row3.SIGLA.equals("HOSPT"))
{
	try 
	{
		context.FECHA_INICIAL = data.getString("FECHA_INICIAL"); 
		context.FECHA_FINAL = data.getString("FECHA_FINAL");
		context.ESM_REMITE = data.getString("UORG_ID") ;
		context.ESM_USUARIO = data.getString("UORG_INGRESO");
		context.FUERZA = data.getString("FUERZA_ID") ;			
		

				
	} 
	catch (Exception e) 
	{
		System.err.println("Error parámetro no encontrado: "+e.getMessage());
	}
} 

/////SOLCITUDES AUTORIZACIONES REI FASE 4

else if ( row3.SIGLA.equals("AUTESM") ||row3.SIGLA.equals("AUTIPS")||row3.SIGLA.equals("LISTAUT")  )
{
	try 
	{
		context.FECHA_INICIAL = data.getString("FECHA_INICIAL"); 
		context.FECHA_FINAL = data.getString("FECHA_FINAL");
		context.ESM_REMITE = data.getString("UORG_ID") ;
		context.ESM_USUARIO = data.getString("UORG_INGRESO");
		context.FUERZA = data.getString("FUERZA_ID") ;			
		
				
	} 
	catch (Exception e) 
	{
		System.err.println("Error parámetro no encontrado: "+e.getMessage());
	}
} 



/////SOLCITUDES REGISTRO CLÍNICO

else if ( row3.SIGLA.equals("RCLI")   )
{
	try 
	{
		context.FECHA_INICIAL = data.getString("FECHA_INICIAL"); 
		context.FECHA_FINAL = data.getString("FECHA_FINAL");
		context.ESM_REMITE = data.getString("UORG_ID") ;
		context.ESM_USUARIO = data.getString("UORG_INGRESO");
		context.FUERZA = data.getString("FUERZA_ID") ;			
		
				
	} 
	catch (Exception e) 
	{
		System.err.println("Error parámetro no encontrado: "+e.getMessage());
	}
} 


///// CANTIDAD DE CONSULTAS - SOLCC

else if ( row3.SIGLA.equals("SOLCC")  )
{
	try 
	{				
		context.TIPO_USUARIO = data.getString("TIPO_USUARIO");
		context.FUERZA = data.getString("FUERZA_ID");
		context.FUERZA_NOMBRE = data.getString("FUERZA");
		context.SEXO = data.getString("SEXO");
		context.ESPECIALIDAD_ID = data.getString("ESPECIALIDAD_ID");
		context.ESPECIALIDAD = data.getString("ESPECIALIDAD");
		context.GRUPO_EDAD = data.getString("GRUPO_EDAD");
		context.GE_VALOR_MENOR = data.getString("GRUPO_EDAD_ID");
				
	} 
	catch (Exception e) 
	{
		System.err.println("Error parámetro no encontrado: "+e.getMessage());
	}
} 

///// CONSOLIDADOS DE CITAS - RCCAGE

else if ( row3.SIGLA.equals("RCCAGE")  )
{
	try 
	{				
		context.ESPECIALIDAD_ID = data.getString("ESPECIALIDAD_ID");
		context.TIPO_SOLICITUD = data.getString("TIPO_SOLICITUD");
		context.TIPO_CITA = data.getString("TIPO_CITA");
				
	} 
	catch (Exception e) 
	{
		System.err.println("Error parámetro no encontrado: "+e.getMessage());
	}
} 

///// REPORTE HISTORICO DE ROLES/PERMISOS - RHRP
else if ( row3.SIGLA.equals("RHRP")  )
{
	try 
	{				
		context.FECHA_INICIAL = data.getString("FECHA_INICIAL"); 
		context.FECHA_FINAL = data.getString("FECHA_FINAL");
		context.ESM_REMITE = data.getString("UORG_ID") ;
		context.ESM_USUARIO = data.getString("UORG_INGRESO");
		context.FUERZA = data.getString("FUERZA_ID");						
		context.ROLES_ID = data.getString("ROLES");	
	} 
	catch (Exception e) 
	{
		System.err.println("Error parámetro no encontrado: "+e.getMessage());
	}
} 

///// REPORTE HISTORICO DE ROLES/PERMISOS ASIGNADOS A USUARIOS - RHRPU
else if ( row3.SIGLA.equals("RHRPU")  )
{
	try 
	{				
		context.FECHA_INICIAL = data.getString("FECHA_INICIAL"); 
		context.FECHA_FINAL = data.getString("FECHA_FINAL");
		context.ESM_REMITE = data.getString("UORG_ID") ;
		context.ESM_USUARIO = data.getString("UORG_INGRESO");
		context.FUERZA = data.getString("FUERZA_ID");						
		context.USUARIO = data.getString("USUARIO");	
	} 
	catch (Exception e) 
	{
		System.err.println("Error parámetro no encontrado: "+e.getMessage());
	}
} 

///// REPORTE CONSOLIDADO ENCUESTA DE SALUD AFILIADOS - AFIENC
else if ( row3.SIGLA.equals("AFIENC")  )
{
	try 
	{				
		context.FECHA_INICIAL = data.getString("FECHA_INICIAL"); 
		context.FECHA_FINAL = data.getString("FECHA_FINAL");
		context.FUERZA = data.getString("FUERZA_ID");
	} 
	catch (Exception e) 
	{
		System.err.println("Error parámetro no encontrado: "+e.getMessage());
	}
} 

////////////////IMPRIME EN CONSOLA LOS PARÁMETROS DE LOS CONSOLIDADOS /////////////////////

///////////////////////CONDICION PARA UORG_ID////////////////////////////////

if (context.ESM_REMITE.equals("0")) {
	context.ESM_REMITE = "200";
	System.out.println("UORG_ID con valor = 0 :"+context.ESM_REMITE);
} else {
System.out.println("UORG_ID con valor <> 0 :"+context.ESM_REMITE);
}

System.out.println("---------------------------------------------------------------------");
System.out.println("Consolidado Solicitado: "+context.NOMBRE_CONSOLIDADO);
System.out.println("context.FECHA_INICIAL: "+context.FECHA_INICIAL);
System.out.println("context.FECHA_FINAL: "+context.FECHA_FINAL);
System.out.println("context.FUERZA: "+context.FUERZA);
System.out.println("context.ESM_REMITE: "+context.ESM_REMITE);
System.out.println("context.ESM_USUARIO: "+context.ESM_USUARIO);
System.out.println("context.SIGLA: "+context.SIGLA);
System.out.println("context.USUARIO: "+context.USUARIO);
System.out.println("context.CIUDAD: "+context.CIUDAD);
System.out.println("context.DEPARTAMENTO: "+context.DEPARTAMENTO);
System.out.println("context.REGIONAL: "+context.REGIONAL);
System.out.println("context.EDAD_INICIAL: "+context.EDAD_INICIAL);
System.out.println("context.EDAD_FINAL: "+context.EDAD_FINAL);
System.out.println("context.ESQUEMA: "+context.ESQUEMA);
System.out.println("context.PERIODO_INICIAL: "+context.PERIODO_INICIAL);
System.out.println("context.PERIODO_FINAL: "+context.PERIODO_FINAL);
System.out.println("context.TIPO_USUARIO: "+context.TIPO_USUARIO);
System.out.println("context.GRUPO_EDAD: "+context.GRUPO_EDAD);
System.out.println("context.GRADO: "+context.GRADO);
System.out.println("context.SEXO: "+context.SEXO);
System.out.println("context.ESPECIALIDAD_ID: "+context.ESPECIALIDAD_ID);
System.out.println("context.TIPO_SOLICITUD: "+context.TIPO_SOLICITUD);
System.out.println("context.TIPO_CITA: "+context.TIPO_CITA);
System.out.println("context.ROLES_ID: "+context.ROLES_ID);
 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());

   			if (row3.SIGLA.equals("CRIPSD")) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If2", 0, "true");
					}
				tDBInput_2Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "false");
					}   	 
   				}
   			if (true) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If1", 0, "true");
					}
				tJava_2Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "false");
					}   	 
   				}



/**
 * [tJava_3 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tJava_3);
						}				
					




	
	/**
	 * [tFlowToIterate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
}

globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tFlowToIterate_1 end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

globalMap.put("tFlowToIterate_1_NB_LINE",nb_line_tFlowToIterate_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tFlowToIterate_1", true);
end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());




/**
 * [tFlowToIterate_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tFlowToIterate_1 finally ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 finally ] stop
 */

	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row30Struct implements routines.system.IPersistableRow<row30Struct> {
    final static byte[] commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[0];
    static byte[] commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[0];

	
			    public String ESM;

				public String getESM () {
					return this.ESM;
				}

				public Boolean ESMIsNullable(){
				    return true;
				}
				public Boolean ESMIsKey(){
				    return false;
				}
				public Integer ESMLength(){
				    return 2000;
				}
				public Integer ESMPrecision(){
				    return 0;
				}
				public String ESMDefault(){
				
					return null;
				
				}
				public String ESMComment(){
				
				    return "";
				
				}
				public String ESMPattern(){
				
					return "";
				
				}
				public String ESMOriginalDbColumnName(){
				
					return "ESM";
				
				}

				
			    public String DISAN;

				public String getDISAN () {
					return this.DISAN;
				}

				public Boolean DISANIsNullable(){
				    return true;
				}
				public Boolean DISANIsKey(){
				    return false;
				}
				public Integer DISANLength(){
				    return 2000;
				}
				public Integer DISANPrecision(){
				    return 0;
				}
				public String DISANDefault(){
				
					return null;
				
				}
				public String DISANComment(){
				
				    return "";
				
				}
				public String DISANPattern(){
				
					return "";
				
				}
				public String DISANOriginalDbColumnName(){
				
					return "DISAN";
				
				}

				
			    public String GRADO;

				public String getGRADO () {
					return this.GRADO;
				}

				public Boolean GRADOIsNullable(){
				    return true;
				}
				public Boolean GRADOIsKey(){
				    return false;
				}
				public Integer GRADOLength(){
				    return 100;
				}
				public Integer GRADOPrecision(){
				    return 0;
				}
				public String GRADODefault(){
				
					return null;
				
				}
				public String GRADOComment(){
				
				    return "";
				
				}
				public String GRADOPattern(){
				
					return "";
				
				}
				public String GRADOOriginalDbColumnName(){
				
					return "GRADO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length) {
				if(length < 1024 && commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length == 0) {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[1024];
				} else {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length);
			strReturn = new String(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length) {
				if(length < 1024 && commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length == 0) {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[1024];
				} else {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length);
			strReturn = new String(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS) {

        	try {

        		int length = 0;
		
					this.ESM = readString(dis);
					
					this.DISAN = readString(dis);
					
					this.GRADO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS) {

        	try {

        		int length = 0;
		
					this.ESM = readString(dis);
					
					this.DISAN = readString(dis);
					
					this.GRADO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ESM,dos);
					
					// String
				
						writeString(this.DISAN,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ESM,dos);
					
					// String
				
						writeString(this.DISAN,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ESM="+ESM);
		sb.append(",DISAN="+DISAN);
		sb.append(",GRADO="+GRADO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row30Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row30Struct row30 = new row30Struct();




	
	/**
	 * [tJavaRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_3", false);
		start_Hash.put("tJavaRow_3", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row30");
					}
				
		int tos_count_tJavaRow_3 = 0;
		

int nb_line_tJavaRow_3 = 0;

 



/**
 * [tJavaRow_3 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";
	
	
		int tos_count_tDBInput_2 = 0;
		
	


	
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
                boolean isTimeZoneNull_tDBInput_2 = false;
				boolean isConnectionWrapped_tDBInput_2 = !(conn_tDBInput_2 instanceof oracle.jdbc.OracleConnection) && conn_tDBInput_2.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tDBInput_2 = null;
                if (isConnectionWrapped_tDBInput_2) {
					unwrappedOraConn_tDBInput_2 = conn_tDBInput_2.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tDBInput_2 != null) {
                        isTimeZoneNull_tDBInput_2 = (unwrappedOraConn_tDBInput_2.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tDBInput_2 = (((oracle.jdbc.OracleConnection)conn_tDBInput_2).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tDBInput_2) {
					java.sql.Statement stmtGetTZ_tDBInput_2 = conn_tDBInput_2.createStatement();
					java.sql.ResultSet rsGetTZ_tDBInput_2 = stmtGetTZ_tDBInput_2.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tDBInput_2 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tDBInput_2.next()) {
						sessionTimezone_tDBInput_2 = rsGetTZ_tDBInput_2.getString(1);
					}
					if (isConnectionWrapped_tDBInput_2 && unwrappedOraConn_tDBInput_2 != null) {
                        unwrappedOraConn_tDBInput_2.setSessionTimeZone(sessionTimezone_tDBInput_2);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tDBInput_2).setSessionTimeZone(sessionTimezone_tDBInput_2);
                    }
				}
			
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT \nNVL((SELECT NOMBRE FROM GEN_UORG WHERE ID = COALESCE ('"+context.ESM_REMITE+"', '"+context.ESM_USUARIO+"')), '- - -') AS ESM,\nNVL((SELECT GF.NOMBRE FROM GEN_UORG GU INNER JOIN GEN_FUERZAS GF ON GF.ID = GU.FUERZA_ID WHERE t"
+"o_char(GU.ID)=  '"+context.FUERZA+"'), '- - -') AS DISAN\nFROM DUAL \n";
		    

		    globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);

		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row30.ESM = null;
							} else {
	                         		
        	row30.ESM = routines.system.JDBCUtil.getString(rs_tDBInput_2, 1, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row30.DISAN = null;
							} else {
	                         		
        	row30.DISAN = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row30.GRADO = null;
							} else {
	                         		
        	row30.GRADO = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
		                    }
					




 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_3 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row30"
						
						);
					}
					

    ///Fecha de realización:
context.FECHA_REALIZACION = TalendDate.getDate("DD-MM-YYYY HH:mm:ss" );
context.FECHA_TITULO = TalendDate.getDate("DD-MM-YYYY");

File theDirSalida = new File(context.CARPETA_SALIDA);

// if the directory does not exist, create it
if (!theDirSalida.exists()) {
    System.out.println("creating directory: " + theDirSalida.getName());
    boolean result = false;
    
    try{
        theDirSalida.mkdir();
        result = true;
    } 
    catch(SecurityException se){
        //handle it
    }        
    if(result) {    
        System.out.println("DIR created");  
    }
}

context.NOMBRE_CSV = context.ID +"-"+"AC-Directiva"+"-"+context.FECHA_TITULO +".csv";
context.NOMBRE_ZIP = context.ID +"-"+"AC-Directiva"+"-"+ context.FECHA_TITULO+".zip";

/*Agrega los titulos y nombre*/	
File archivo = new File(context.CARPETA_SALIDA+"/"+context.NOMBRE_CSV);	
OutputStreamWriter bw = new OutputStreamWriter(new FileOutputStream(archivo), "ISO-8859-15");	
bw.write("Archivo de consultas");
bw.write("\n\n");	
bw.write("Fecha de generación: " +context.FECHA_REALIZACION);
bw.write("\n\n");
bw.write("Filtros: ");
bw.write("\n");
bw.write("Fuerza: "+row30.DISAN);
bw.write("\n");
bw.write("ESM: " +row30.ESM);
bw.write("\n");
bw.write("Fecha inicial: " +context.FECHA_INICIAL);
bw.write("\n");
bw.write("Fecha final: "+context.FECHA_FINAL);
bw.write("\n\n");
bw.write("Fuerza a la que pertenece el paciente;Fuerza de adscripción del paciente;Código ESM de adscripción del paciente;Sigla del ESM de adscripción del paciente;Nombre del ESM de adscripción del paciente;Fuerza del ESM de atención;Código ESM de atención;Sigla del ESM de atención;Nombre del ESM de atención; Departamento de atención; Municipio de atención;Tipo de documento del profesional;Número documento del profesional;Especialidad;Tipo de identificación del paciente;Número de identificación del paciente;Primer nombre del paciente;Segundo nombre del paciente;Primer apellido del paciente;Segundo apellido del paciente;Sexo del paciente;Fecha de nacimiento;Peso del paciente;Talla del paciente;Años de edad;Meses de edad;Clasificación del grado del paciente;Grado del paciente;Tipo de paciente;Fecha y hora de la consulta;Código de la consulta CUPS;Finalidad de la consulta;Causa externa;Ambito;Diagnóstico principal;Diagnóstico relacionado N°1;Diagnóstico relacionado N°2;Diagnóstico relacionado N°3;Tipo de diagnóstico principal;Cumplimiento de la cita;Fuente del dato;ICM; Perímetro abdominal");
bw.write("\n");
bw.close();
    nb_line_tJavaRow_3++;   

 


	tos_count_tJavaRow_3++;

/**
 * [tJavaRow_3 main ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
}

globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tJavaRow_3 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

globalMap.put("tJavaRow_3_NB_LINE",nb_line_tJavaRow_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row30");
			  	}
			  	
 

ok_Hash.put("tJavaRow_3", true);
end_Hash.put("tJavaRow_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tDBInput_3Process(globalMap);



/**
 * [tJavaRow_3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_3 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class out11Struct implements routines.system.IPersistableRow<out11Struct> {
    final static byte[] commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[0];
    static byte[] commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[0];

	
			    public String FUERZA_PACIENTE;

				public String getFUERZA_PACIENTE () {
					return this.FUERZA_PACIENTE;
				}

				public Boolean FUERZA_PACIENTEIsNullable(){
				    return true;
				}
				public Boolean FUERZA_PACIENTEIsKey(){
				    return false;
				}
				public Integer FUERZA_PACIENTELength(){
				    return null;
				}
				public Integer FUERZA_PACIENTEPrecision(){
				    return null;
				}
				public String FUERZA_PACIENTEDefault(){
				
					return null;
				
				}
				public String FUERZA_PACIENTEComment(){
				
				    return "";
				
				}
				public String FUERZA_PACIENTEPattern(){
				
					return "";
				
				}
				public String FUERZA_PACIENTEOriginalDbColumnName(){
				
					return "FUERZA_PACIENTE";
				
				}

				
			    public String FUERZA_ADS_PACIENTE;

				public String getFUERZA_ADS_PACIENTE () {
					return this.FUERZA_ADS_PACIENTE;
				}

				public Boolean FUERZA_ADS_PACIENTEIsNullable(){
				    return true;
				}
				public Boolean FUERZA_ADS_PACIENTEIsKey(){
				    return false;
				}
				public Integer FUERZA_ADS_PACIENTELength(){
				    return null;
				}
				public Integer FUERZA_ADS_PACIENTEPrecision(){
				    return null;
				}
				public String FUERZA_ADS_PACIENTEDefault(){
				
					return null;
				
				}
				public String FUERZA_ADS_PACIENTEComment(){
				
				    return "";
				
				}
				public String FUERZA_ADS_PACIENTEPattern(){
				
					return "";
				
				}
				public String FUERZA_ADS_PACIENTEOriginalDbColumnName(){
				
					return "FUERZA_ADS_PACIENTE";
				
				}

				
			    public String CODIGO_ESM_ADS_PACIENTE;

				public String getCODIGO_ESM_ADS_PACIENTE () {
					return this.CODIGO_ESM_ADS_PACIENTE;
				}

				public Boolean CODIGO_ESM_ADS_PACIENTEIsNullable(){
				    return true;
				}
				public Boolean CODIGO_ESM_ADS_PACIENTEIsKey(){
				    return false;
				}
				public Integer CODIGO_ESM_ADS_PACIENTELength(){
				    return null;
				}
				public Integer CODIGO_ESM_ADS_PACIENTEPrecision(){
				    return null;
				}
				public String CODIGO_ESM_ADS_PACIENTEDefault(){
				
					return null;
				
				}
				public String CODIGO_ESM_ADS_PACIENTEComment(){
				
				    return "";
				
				}
				public String CODIGO_ESM_ADS_PACIENTEPattern(){
				
					return "";
				
				}
				public String CODIGO_ESM_ADS_PACIENTEOriginalDbColumnName(){
				
					return "CODIGO_ESM_ADS_PACIENTE";
				
				}

				
			    public String SIGLA_ESM_ADS_PACIENTE;

				public String getSIGLA_ESM_ADS_PACIENTE () {
					return this.SIGLA_ESM_ADS_PACIENTE;
				}

				public Boolean SIGLA_ESM_ADS_PACIENTEIsNullable(){
				    return true;
				}
				public Boolean SIGLA_ESM_ADS_PACIENTEIsKey(){
				    return false;
				}
				public Integer SIGLA_ESM_ADS_PACIENTELength(){
				    return null;
				}
				public Integer SIGLA_ESM_ADS_PACIENTEPrecision(){
				    return null;
				}
				public String SIGLA_ESM_ADS_PACIENTEDefault(){
				
					return null;
				
				}
				public String SIGLA_ESM_ADS_PACIENTEComment(){
				
				    return "";
				
				}
				public String SIGLA_ESM_ADS_PACIENTEPattern(){
				
					return "";
				
				}
				public String SIGLA_ESM_ADS_PACIENTEOriginalDbColumnName(){
				
					return "SIGLA_ESM_ADS_PACIENTE";
				
				}

				
			    public String NOMBRE_ESM_ADS_PACIENTE;

				public String getNOMBRE_ESM_ADS_PACIENTE () {
					return this.NOMBRE_ESM_ADS_PACIENTE;
				}

				public Boolean NOMBRE_ESM_ADS_PACIENTEIsNullable(){
				    return true;
				}
				public Boolean NOMBRE_ESM_ADS_PACIENTEIsKey(){
				    return false;
				}
				public Integer NOMBRE_ESM_ADS_PACIENTELength(){
				    return null;
				}
				public Integer NOMBRE_ESM_ADS_PACIENTEPrecision(){
				    return null;
				}
				public String NOMBRE_ESM_ADS_PACIENTEDefault(){
				
					return null;
				
				}
				public String NOMBRE_ESM_ADS_PACIENTEComment(){
				
				    return "";
				
				}
				public String NOMBRE_ESM_ADS_PACIENTEPattern(){
				
					return "";
				
				}
				public String NOMBRE_ESM_ADS_PACIENTEOriginalDbColumnName(){
				
					return "NOMBRE_ESM_ADS_PACIENTE";
				
				}

				
			    public String FUERZA_ESM_ATENCION;

				public String getFUERZA_ESM_ATENCION () {
					return this.FUERZA_ESM_ATENCION;
				}

				public Boolean FUERZA_ESM_ATENCIONIsNullable(){
				    return true;
				}
				public Boolean FUERZA_ESM_ATENCIONIsKey(){
				    return false;
				}
				public Integer FUERZA_ESM_ATENCIONLength(){
				    return null;
				}
				public Integer FUERZA_ESM_ATENCIONPrecision(){
				    return null;
				}
				public String FUERZA_ESM_ATENCIONDefault(){
				
					return null;
				
				}
				public String FUERZA_ESM_ATENCIONComment(){
				
				    return "";
				
				}
				public String FUERZA_ESM_ATENCIONPattern(){
				
					return "";
				
				}
				public String FUERZA_ESM_ATENCIONOriginalDbColumnName(){
				
					return "FUERZA_ESM_ATENCION";
				
				}

				
			    public String CODIGO_DEL_PRESTADOR;

				public String getCODIGO_DEL_PRESTADOR () {
					return this.CODIGO_DEL_PRESTADOR;
				}

				public Boolean CODIGO_DEL_PRESTADORIsNullable(){
				    return true;
				}
				public Boolean CODIGO_DEL_PRESTADORIsKey(){
				    return false;
				}
				public Integer CODIGO_DEL_PRESTADORLength(){
				    return null;
				}
				public Integer CODIGO_DEL_PRESTADORPrecision(){
				    return null;
				}
				public String CODIGO_DEL_PRESTADORDefault(){
				
					return null;
				
				}
				public String CODIGO_DEL_PRESTADORComment(){
				
				    return "";
				
				}
				public String CODIGO_DEL_PRESTADORPattern(){
				
					return "";
				
				}
				public String CODIGO_DEL_PRESTADOROriginalDbColumnName(){
				
					return "CODIGO_DEL_PRESTADOR";
				
				}

				
			    public String SIGLA_ESM;

				public String getSIGLA_ESM () {
					return this.SIGLA_ESM;
				}

				public Boolean SIGLA_ESMIsNullable(){
				    return true;
				}
				public Boolean SIGLA_ESMIsKey(){
				    return false;
				}
				public Integer SIGLA_ESMLength(){
				    return null;
				}
				public Integer SIGLA_ESMPrecision(){
				    return null;
				}
				public String SIGLA_ESMDefault(){
				
					return null;
				
				}
				public String SIGLA_ESMComment(){
				
				    return "";
				
				}
				public String SIGLA_ESMPattern(){
				
					return "";
				
				}
				public String SIGLA_ESMOriginalDbColumnName(){
				
					return "SIGLA_ESM";
				
				}

				
			    public String FUERZA;

				public String getFUERZA () {
					return this.FUERZA;
				}

				public Boolean FUERZAIsNullable(){
				    return true;
				}
				public Boolean FUERZAIsKey(){
				    return false;
				}
				public Integer FUERZALength(){
				    return null;
				}
				public Integer FUERZAPrecision(){
				    return null;
				}
				public String FUERZADefault(){
				
					return null;
				
				}
				public String FUERZAComment(){
				
				    return "";
				
				}
				public String FUERZAPattern(){
				
					return "";
				
				}
				public String FUERZAOriginalDbColumnName(){
				
					return "FUERZA";
				
				}

				
			    public String DEPARTAMENTO;

				public String getDEPARTAMENTO () {
					return this.DEPARTAMENTO;
				}

				public Boolean DEPARTAMENTOIsNullable(){
				    return true;
				}
				public Boolean DEPARTAMENTOIsKey(){
				    return false;
				}
				public Integer DEPARTAMENTOLength(){
				    return 100;
				}
				public Integer DEPARTAMENTOPrecision(){
				    return 0;
				}
				public String DEPARTAMENTODefault(){
				
					return null;
				
				}
				public String DEPARTAMENTOComment(){
				
				    return "";
				
				}
				public String DEPARTAMENTOPattern(){
				
					return "";
				
				}
				public String DEPARTAMENTOOriginalDbColumnName(){
				
					return "DEPARTAMENTO";
				
				}

				
			    public String MUNICIPIO;

				public String getMUNICIPIO () {
					return this.MUNICIPIO;
				}

				public Boolean MUNICIPIOIsNullable(){
				    return true;
				}
				public Boolean MUNICIPIOIsKey(){
				    return false;
				}
				public Integer MUNICIPIOLength(){
				    return 100;
				}
				public Integer MUNICIPIOPrecision(){
				    return 0;
				}
				public String MUNICIPIODefault(){
				
					return null;
				
				}
				public String MUNICIPIOComment(){
				
				    return "";
				
				}
				public String MUNICIPIOPattern(){
				
					return "";
				
				}
				public String MUNICIPIOOriginalDbColumnName(){
				
					return "MUNICIPIO";
				
				}

				
			    public String TDOCUMENTO_PROFESIONAL;

				public String getTDOCUMENTO_PROFESIONAL () {
					return this.TDOCUMENTO_PROFESIONAL;
				}

				public Boolean TDOCUMENTO_PROFESIONALIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_PROFESIONALLength(){
				    return null;
				}
				public Integer TDOCUMENTO_PROFESIONALPrecision(){
				    return null;
				}
				public String TDOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_PROFESIONALComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "TDOCUMENTO_PROFESIONAL";
				
				}

				
			    public String DOCUMENTO_PROFESIONAL;

				public String getDOCUMENTO_PROFESIONAL () {
					return this.DOCUMENTO_PROFESIONAL;
				}

				public Boolean DOCUMENTO_PROFESIONALIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_PROFESIONALLength(){
				    return null;
				}
				public Integer DOCUMENTO_PROFESIONALPrecision(){
				    return null;
				}
				public String DOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_PROFESIONALComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "DOCUMENTO_PROFESIONAL";
				
				}

				
			    public String ESPECIALIDAD;

				public String getESPECIALIDAD () {
					return this.ESPECIALIDAD;
				}

				public Boolean ESPECIALIDADIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADLength(){
				    return null;
				}
				public Integer ESPECIALIDADPrecision(){
				    return null;
				}
				public String ESPECIALIDADDefault(){
				
					return null;
				
				}
				public String ESPECIALIDADComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADOriginalDbColumnName(){
				
					return "ESPECIALIDAD";
				
				}

				
			    public String TDOCUMENTO_PACIENTE;

				public String getTDOCUMENTO_PACIENTE () {
					return this.TDOCUMENTO_PACIENTE;
				}

				public Boolean TDOCUMENTO_PACIENTEIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_PACIENTEIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_PACIENTELength(){
				    return null;
				}
				public Integer TDOCUMENTO_PACIENTEPrecision(){
				    return null;
				}
				public String TDOCUMENTO_PACIENTEDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_PACIENTEComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_PACIENTEPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_PACIENTEOriginalDbColumnName(){
				
					return "TDOCUMENTO_PACIENTE";
				
				}

				
			    public String DOCUMENTO_PACIENTE;

				public String getDOCUMENTO_PACIENTE () {
					return this.DOCUMENTO_PACIENTE;
				}

				public Boolean DOCUMENTO_PACIENTEIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_PACIENTEIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_PACIENTELength(){
				    return null;
				}
				public Integer DOCUMENTO_PACIENTEPrecision(){
				    return null;
				}
				public String DOCUMENTO_PACIENTEDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_PACIENTEComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_PACIENTEPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_PACIENTEOriginalDbColumnName(){
				
					return "DOCUMENTO_PACIENTE";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return null;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return null;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return null;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return null;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return null;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return null;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return null;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return null;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String GENERO;

				public String getGENERO () {
					return this.GENERO;
				}

				public Boolean GENEROIsNullable(){
				    return true;
				}
				public Boolean GENEROIsKey(){
				    return false;
				}
				public Integer GENEROLength(){
				    return null;
				}
				public Integer GENEROPrecision(){
				    return null;
				}
				public String GENERODefault(){
				
					return null;
				
				}
				public String GENEROComment(){
				
				    return "";
				
				}
				public String GENEROPattern(){
				
					return "";
				
				}
				public String GENEROOriginalDbColumnName(){
				
					return "GENERO";
				
				}

				
			    public String FECHA_NACIMIENTO;

				public String getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return null;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return null;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public String PESO;

				public String getPESO () {
					return this.PESO;
				}

				public Boolean PESOIsNullable(){
				    return true;
				}
				public Boolean PESOIsKey(){
				    return false;
				}
				public Integer PESOLength(){
				    return null;
				}
				public Integer PESOPrecision(){
				    return null;
				}
				public String PESODefault(){
				
					return null;
				
				}
				public String PESOComment(){
				
				    return "";
				
				}
				public String PESOPattern(){
				
					return "";
				
				}
				public String PESOOriginalDbColumnName(){
				
					return "PESO";
				
				}

				
			    public String TALLA;

				public String getTALLA () {
					return this.TALLA;
				}

				public Boolean TALLAIsNullable(){
				    return true;
				}
				public Boolean TALLAIsKey(){
				    return false;
				}
				public Integer TALLALength(){
				    return null;
				}
				public Integer TALLAPrecision(){
				    return null;
				}
				public String TALLADefault(){
				
					return null;
				
				}
				public String TALLAComment(){
				
				    return "";
				
				}
				public String TALLAPattern(){
				
					return "";
				
				}
				public String TALLAOriginalDbColumnName(){
				
					return "TALLA";
				
				}

				
			    public BigDecimal EDAD_A_OS;

				public BigDecimal getEDAD_A_OS () {
					return this.EDAD_A_OS;
				}

				public Boolean EDAD_A_OSIsNullable(){
				    return true;
				}
				public Boolean EDAD_A_OSIsKey(){
				    return false;
				}
				public Integer EDAD_A_OSLength(){
				    return null;
				}
				public Integer EDAD_A_OSPrecision(){
				    return null;
				}
				public String EDAD_A_OSDefault(){
				
					return "";
				
				}
				public String EDAD_A_OSComment(){
				
				    return "";
				
				}
				public String EDAD_A_OSPattern(){
				
					return "";
				
				}
				public String EDAD_A_OSOriginalDbColumnName(){
				
					return "EDAD_A?OS";
				
				}

				
			    public BigDecimal EDAD_MESES;

				public BigDecimal getEDAD_MESES () {
					return this.EDAD_MESES;
				}

				public Boolean EDAD_MESESIsNullable(){
				    return true;
				}
				public Boolean EDAD_MESESIsKey(){
				    return false;
				}
				public Integer EDAD_MESESLength(){
				    return null;
				}
				public Integer EDAD_MESESPrecision(){
				    return null;
				}
				public String EDAD_MESESDefault(){
				
					return "";
				
				}
				public String EDAD_MESESComment(){
				
				    return "";
				
				}
				public String EDAD_MESESPattern(){
				
					return "";
				
				}
				public String EDAD_MESESOriginalDbColumnName(){
				
					return "EDAD_MESES";
				
				}

				
			    public String CLASEGRD;

				public String getCLASEGRD () {
					return this.CLASEGRD;
				}

				public Boolean CLASEGRDIsNullable(){
				    return true;
				}
				public Boolean CLASEGRDIsKey(){
				    return false;
				}
				public Integer CLASEGRDLength(){
				    return null;
				}
				public Integer CLASEGRDPrecision(){
				    return null;
				}
				public String CLASEGRDDefault(){
				
					return null;
				
				}
				public String CLASEGRDComment(){
				
				    return "";
				
				}
				public String CLASEGRDPattern(){
				
					return "";
				
				}
				public String CLASEGRDOriginalDbColumnName(){
				
					return "CLASEGRD";
				
				}

				
			    public String GRADO;

				public String getGRADO () {
					return this.GRADO;
				}

				public Boolean GRADOIsNullable(){
				    return true;
				}
				public Boolean GRADOIsKey(){
				    return false;
				}
				public Integer GRADOLength(){
				    return null;
				}
				public Integer GRADOPrecision(){
				    return null;
				}
				public String GRADODefault(){
				
					return null;
				
				}
				public String GRADOComment(){
				
				    return "";
				
				}
				public String GRADOPattern(){
				
					return "";
				
				}
				public String GRADOOriginalDbColumnName(){
				
					return "GRADO";
				
				}

				
			    public String TIPO_USUARIO;

				public String getTIPO_USUARIO () {
					return this.TIPO_USUARIO;
				}

				public Boolean TIPO_USUARIOIsNullable(){
				    return true;
				}
				public Boolean TIPO_USUARIOIsKey(){
				    return false;
				}
				public Integer TIPO_USUARIOLength(){
				    return null;
				}
				public Integer TIPO_USUARIOPrecision(){
				    return null;
				}
				public String TIPO_USUARIODefault(){
				
					return null;
				
				}
				public String TIPO_USUARIOComment(){
				
				    return "";
				
				}
				public String TIPO_USUARIOPattern(){
				
					return "";
				
				}
				public String TIPO_USUARIOOriginalDbColumnName(){
				
					return "TIPO_USUARIO";
				
				}

				
			    public String FECHA_CONSULTA;

				public String getFECHA_CONSULTA () {
					return this.FECHA_CONSULTA;
				}

				public Boolean FECHA_CONSULTAIsNullable(){
				    return true;
				}
				public Boolean FECHA_CONSULTAIsKey(){
				    return false;
				}
				public Integer FECHA_CONSULTALength(){
				    return null;
				}
				public Integer FECHA_CONSULTAPrecision(){
				    return null;
				}
				public String FECHA_CONSULTADefault(){
				
					return null;
				
				}
				public String FECHA_CONSULTAComment(){
				
				    return "";
				
				}
				public String FECHA_CONSULTAPattern(){
				
					return "";
				
				}
				public String FECHA_CONSULTAOriginalDbColumnName(){
				
					return "FECHA_CONSULTA";
				
				}

				
			    public String CUPS;

				public String getCUPS () {
					return this.CUPS;
				}

				public Boolean CUPSIsNullable(){
				    return true;
				}
				public Boolean CUPSIsKey(){
				    return false;
				}
				public Integer CUPSLength(){
				    return null;
				}
				public Integer CUPSPrecision(){
				    return null;
				}
				public String CUPSDefault(){
				
					return null;
				
				}
				public String CUPSComment(){
				
				    return "";
				
				}
				public String CUPSPattern(){
				
					return "";
				
				}
				public String CUPSOriginalDbColumnName(){
				
					return "CUPS";
				
				}

				
			    public String FINALIDAD_CONSULTA;

				public String getFINALIDAD_CONSULTA () {
					return this.FINALIDAD_CONSULTA;
				}

				public Boolean FINALIDAD_CONSULTAIsNullable(){
				    return true;
				}
				public Boolean FINALIDAD_CONSULTAIsKey(){
				    return false;
				}
				public Integer FINALIDAD_CONSULTALength(){
				    return null;
				}
				public Integer FINALIDAD_CONSULTAPrecision(){
				    return null;
				}
				public String FINALIDAD_CONSULTADefault(){
				
					return null;
				
				}
				public String FINALIDAD_CONSULTAComment(){
				
				    return "";
				
				}
				public String FINALIDAD_CONSULTAPattern(){
				
					return "";
				
				}
				public String FINALIDAD_CONSULTAOriginalDbColumnName(){
				
					return "FINALIDAD_CONSULTA";
				
				}

				
			    public String CAUSA_EXTERNA;

				public String getCAUSA_EXTERNA () {
					return this.CAUSA_EXTERNA;
				}

				public Boolean CAUSA_EXTERNAIsNullable(){
				    return true;
				}
				public Boolean CAUSA_EXTERNAIsKey(){
				    return false;
				}
				public Integer CAUSA_EXTERNALength(){
				    return null;
				}
				public Integer CAUSA_EXTERNAPrecision(){
				    return null;
				}
				public String CAUSA_EXTERNADefault(){
				
					return null;
				
				}
				public String CAUSA_EXTERNAComment(){
				
				    return "";
				
				}
				public String CAUSA_EXTERNAPattern(){
				
					return "";
				
				}
				public String CAUSA_EXTERNAOriginalDbColumnName(){
				
					return "CAUSA_EXTERNA";
				
				}

				
			    public String AMBITO;

				public String getAMBITO () {
					return this.AMBITO;
				}

				public Boolean AMBITOIsNullable(){
				    return true;
				}
				public Boolean AMBITOIsKey(){
				    return false;
				}
				public Integer AMBITOLength(){
				    return null;
				}
				public Integer AMBITOPrecision(){
				    return null;
				}
				public String AMBITODefault(){
				
					return null;
				
				}
				public String AMBITOComment(){
				
				    return "";
				
				}
				public String AMBITOPattern(){
				
					return "";
				
				}
				public String AMBITOOriginalDbColumnName(){
				
					return "AMBITO";
				
				}

				
			    public String DIAG_PRINCIPAL;

				public String getDIAG_PRINCIPAL () {
					return this.DIAG_PRINCIPAL;
				}

				public Boolean DIAG_PRINCIPALIsNullable(){
				    return true;
				}
				public Boolean DIAG_PRINCIPALIsKey(){
				    return false;
				}
				public Integer DIAG_PRINCIPALLength(){
				    return null;
				}
				public Integer DIAG_PRINCIPALPrecision(){
				    return null;
				}
				public String DIAG_PRINCIPALDefault(){
				
					return null;
				
				}
				public String DIAG_PRINCIPALComment(){
				
				    return "";
				
				}
				public String DIAG_PRINCIPALPattern(){
				
					return "";
				
				}
				public String DIAG_PRINCIPALOriginalDbColumnName(){
				
					return "DIAG_PRINCIPAL";
				
				}

				
			    public String CODDIAGNOSTICO1;

				public String getCODDIAGNOSTICO1 () {
					return this.CODDIAGNOSTICO1;
				}

				public Boolean CODDIAGNOSTICO1IsNullable(){
				    return true;
				}
				public Boolean CODDIAGNOSTICO1IsKey(){
				    return false;
				}
				public Integer CODDIAGNOSTICO1Length(){
				    return null;
				}
				public Integer CODDIAGNOSTICO1Precision(){
				    return null;
				}
				public String CODDIAGNOSTICO1Default(){
				
					return null;
				
				}
				public String CODDIAGNOSTICO1Comment(){
				
				    return "";
				
				}
				public String CODDIAGNOSTICO1Pattern(){
				
					return "";
				
				}
				public String CODDIAGNOSTICO1OriginalDbColumnName(){
				
					return "CODDIAGNOSTICO1";
				
				}

				
			    public String CODDIAGNOSTICO2;

				public String getCODDIAGNOSTICO2 () {
					return this.CODDIAGNOSTICO2;
				}

				public Boolean CODDIAGNOSTICO2IsNullable(){
				    return true;
				}
				public Boolean CODDIAGNOSTICO2IsKey(){
				    return false;
				}
				public Integer CODDIAGNOSTICO2Length(){
				    return null;
				}
				public Integer CODDIAGNOSTICO2Precision(){
				    return null;
				}
				public String CODDIAGNOSTICO2Default(){
				
					return null;
				
				}
				public String CODDIAGNOSTICO2Comment(){
				
				    return "";
				
				}
				public String CODDIAGNOSTICO2Pattern(){
				
					return "";
				
				}
				public String CODDIAGNOSTICO2OriginalDbColumnName(){
				
					return "CODDIAGNOSTICO2";
				
				}

				
			    public String CODDIAGNOSTICO3;

				public String getCODDIAGNOSTICO3 () {
					return this.CODDIAGNOSTICO3;
				}

				public Boolean CODDIAGNOSTICO3IsNullable(){
				    return true;
				}
				public Boolean CODDIAGNOSTICO3IsKey(){
				    return false;
				}
				public Integer CODDIAGNOSTICO3Length(){
				    return null;
				}
				public Integer CODDIAGNOSTICO3Precision(){
				    return null;
				}
				public String CODDIAGNOSTICO3Default(){
				
					return null;
				
				}
				public String CODDIAGNOSTICO3Comment(){
				
				    return "";
				
				}
				public String CODDIAGNOSTICO3Pattern(){
				
					return "";
				
				}
				public String CODDIAGNOSTICO3OriginalDbColumnName(){
				
					return "CODDIAGNOSTICO3";
				
				}

				
			    public String TIPO_DIAGNOSTICO_PPAL;

				public String getTIPO_DIAGNOSTICO_PPAL () {
					return this.TIPO_DIAGNOSTICO_PPAL;
				}

				public Boolean TIPO_DIAGNOSTICO_PPALIsNullable(){
				    return true;
				}
				public Boolean TIPO_DIAGNOSTICO_PPALIsKey(){
				    return false;
				}
				public Integer TIPO_DIAGNOSTICO_PPALLength(){
				    return null;
				}
				public Integer TIPO_DIAGNOSTICO_PPALPrecision(){
				    return null;
				}
				public String TIPO_DIAGNOSTICO_PPALDefault(){
				
					return null;
				
				}
				public String TIPO_DIAGNOSTICO_PPALComment(){
				
				    return "";
				
				}
				public String TIPO_DIAGNOSTICO_PPALPattern(){
				
					return "";
				
				}
				public String TIPO_DIAGNOSTICO_PPALOriginalDbColumnName(){
				
					return "TIPO_DIAGNOSTICO_PPAL";
				
				}

				
			    public String CUMPLIMIENTO_CITA;

				public String getCUMPLIMIENTO_CITA () {
					return this.CUMPLIMIENTO_CITA;
				}

				public Boolean CUMPLIMIENTO_CITAIsNullable(){
				    return true;
				}
				public Boolean CUMPLIMIENTO_CITAIsKey(){
				    return false;
				}
				public Integer CUMPLIMIENTO_CITALength(){
				    return null;
				}
				public Integer CUMPLIMIENTO_CITAPrecision(){
				    return null;
				}
				public String CUMPLIMIENTO_CITADefault(){
				
					return null;
				
				}
				public String CUMPLIMIENTO_CITAComment(){
				
				    return "";
				
				}
				public String CUMPLIMIENTO_CITAPattern(){
				
					return "";
				
				}
				public String CUMPLIMIENTO_CITAOriginalDbColumnName(){
				
					return "CUMPLIMIENTO_CITA";
				
				}

				
			    public String TIPO_GENERACION;

				public String getTIPO_GENERACION () {
					return this.TIPO_GENERACION;
				}

				public Boolean TIPO_GENERACIONIsNullable(){
				    return true;
				}
				public Boolean TIPO_GENERACIONIsKey(){
				    return false;
				}
				public Integer TIPO_GENERACIONLength(){
				    return null;
				}
				public Integer TIPO_GENERACIONPrecision(){
				    return null;
				}
				public String TIPO_GENERACIONDefault(){
				
					return null;
				
				}
				public String TIPO_GENERACIONComment(){
				
				    return "";
				
				}
				public String TIPO_GENERACIONPattern(){
				
					return "";
				
				}
				public String TIPO_GENERACIONOriginalDbColumnName(){
				
					return "TIPO_GENERACION";
				
				}

				
			    public String IMC_VALOR;

				public String getIMC_VALOR () {
					return this.IMC_VALOR;
				}

				public Boolean IMC_VALORIsNullable(){
				    return true;
				}
				public Boolean IMC_VALORIsKey(){
				    return false;
				}
				public Integer IMC_VALORLength(){
				    return 10;
				}
				public Integer IMC_VALORPrecision(){
				    return 0;
				}
				public String IMC_VALORDefault(){
				
					return null;
				
				}
				public String IMC_VALORComment(){
				
				    return "";
				
				}
				public String IMC_VALORPattern(){
				
					return "";
				
				}
				public String IMC_VALOROriginalDbColumnName(){
				
					return "IMC_VALOR";
				
				}

				
			    public String PABDOMINAL_VALOR;

				public String getPABDOMINAL_VALOR () {
					return this.PABDOMINAL_VALOR;
				}

				public Boolean PABDOMINAL_VALORIsNullable(){
				    return true;
				}
				public Boolean PABDOMINAL_VALORIsKey(){
				    return false;
				}
				public Integer PABDOMINAL_VALORLength(){
				    return 10;
				}
				public Integer PABDOMINAL_VALORPrecision(){
				    return 0;
				}
				public String PABDOMINAL_VALORDefault(){
				
					return null;
				
				}
				public String PABDOMINAL_VALORComment(){
				
				    return "";
				
				}
				public String PABDOMINAL_VALORPattern(){
				
					return "";
				
				}
				public String PABDOMINAL_VALOROriginalDbColumnName(){
				
					return "PABDOMINAL_VALOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length) {
				if(length < 1024 && commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length == 0) {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[1024];
				} else {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length);
			strReturn = new String(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length) {
				if(length < 1024 && commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length == 0) {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[1024];
				} else {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length);
			strReturn = new String(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS) {

        	try {

        		int length = 0;
		
					this.FUERZA_PACIENTE = readString(dis);
					
					this.FUERZA_ADS_PACIENTE = readString(dis);
					
					this.CODIGO_ESM_ADS_PACIENTE = readString(dis);
					
					this.SIGLA_ESM_ADS_PACIENTE = readString(dis);
					
					this.NOMBRE_ESM_ADS_PACIENTE = readString(dis);
					
					this.FUERZA_ESM_ATENCION = readString(dis);
					
					this.CODIGO_DEL_PRESTADOR = readString(dis);
					
					this.SIGLA_ESM = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.DEPARTAMENTO = readString(dis);
					
					this.MUNICIPIO = readString(dis);
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
					this.ESPECIALIDAD = readString(dis);
					
					this.TDOCUMENTO_PACIENTE = readString(dis);
					
					this.DOCUMENTO_PACIENTE = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.GENERO = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.PESO = readString(dis);
					
					this.TALLA = readString(dis);
					
						this.EDAD_A_OS = (BigDecimal) dis.readObject();
					
						this.EDAD_MESES = (BigDecimal) dis.readObject();
					
					this.CLASEGRD = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
					this.FECHA_CONSULTA = readString(dis);
					
					this.CUPS = readString(dis);
					
					this.FINALIDAD_CONSULTA = readString(dis);
					
					this.CAUSA_EXTERNA = readString(dis);
					
					this.AMBITO = readString(dis);
					
					this.DIAG_PRINCIPAL = readString(dis);
					
					this.CODDIAGNOSTICO1 = readString(dis);
					
					this.CODDIAGNOSTICO2 = readString(dis);
					
					this.CODDIAGNOSTICO3 = readString(dis);
					
					this.TIPO_DIAGNOSTICO_PPAL = readString(dis);
					
					this.CUMPLIMIENTO_CITA = readString(dis);
					
					this.TIPO_GENERACION = readString(dis);
					
					this.IMC_VALOR = readString(dis);
					
					this.PABDOMINAL_VALOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS) {

        	try {

        		int length = 0;
		
					this.FUERZA_PACIENTE = readString(dis);
					
					this.FUERZA_ADS_PACIENTE = readString(dis);
					
					this.CODIGO_ESM_ADS_PACIENTE = readString(dis);
					
					this.SIGLA_ESM_ADS_PACIENTE = readString(dis);
					
					this.NOMBRE_ESM_ADS_PACIENTE = readString(dis);
					
					this.FUERZA_ESM_ATENCION = readString(dis);
					
					this.CODIGO_DEL_PRESTADOR = readString(dis);
					
					this.SIGLA_ESM = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.DEPARTAMENTO = readString(dis);
					
					this.MUNICIPIO = readString(dis);
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
					this.ESPECIALIDAD = readString(dis);
					
					this.TDOCUMENTO_PACIENTE = readString(dis);
					
					this.DOCUMENTO_PACIENTE = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.GENERO = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.PESO = readString(dis);
					
					this.TALLA = readString(dis);
					
						this.EDAD_A_OS = (BigDecimal) dis.readObject();
					
						this.EDAD_MESES = (BigDecimal) dis.readObject();
					
					this.CLASEGRD = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
					this.FECHA_CONSULTA = readString(dis);
					
					this.CUPS = readString(dis);
					
					this.FINALIDAD_CONSULTA = readString(dis);
					
					this.CAUSA_EXTERNA = readString(dis);
					
					this.AMBITO = readString(dis);
					
					this.DIAG_PRINCIPAL = readString(dis);
					
					this.CODDIAGNOSTICO1 = readString(dis);
					
					this.CODDIAGNOSTICO2 = readString(dis);
					
					this.CODDIAGNOSTICO3 = readString(dis);
					
					this.TIPO_DIAGNOSTICO_PPAL = readString(dis);
					
					this.CUMPLIMIENTO_CITA = readString(dis);
					
					this.TIPO_GENERACION = readString(dis);
					
					this.IMC_VALOR = readString(dis);
					
					this.PABDOMINAL_VALOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FUERZA_PACIENTE,dos);
					
					// String
				
						writeString(this.FUERZA_ADS_PACIENTE,dos);
					
					// String
				
						writeString(this.CODIGO_ESM_ADS_PACIENTE,dos);
					
					// String
				
						writeString(this.SIGLA_ESM_ADS_PACIENTE,dos);
					
					// String
				
						writeString(this.NOMBRE_ESM_ADS_PACIENTE,dos);
					
					// String
				
						writeString(this.FUERZA_ESM_ATENCION,dos);
					
					// String
				
						writeString(this.CODIGO_DEL_PRESTADOR,dos);
					
					// String
				
						writeString(this.SIGLA_ESM,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.DEPARTAMENTO,dos);
					
					// String
				
						writeString(this.MUNICIPIO,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_PACIENTE,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PACIENTE,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.GENERO,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.PESO,dos);
					
					// String
				
						writeString(this.TALLA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD_A_OS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD_MESES);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// String
				
						writeString(this.FECHA_CONSULTA,dos);
					
					// String
				
						writeString(this.CUPS,dos);
					
					// String
				
						writeString(this.FINALIDAD_CONSULTA,dos);
					
					// String
				
						writeString(this.CAUSA_EXTERNA,dos);
					
					// String
				
						writeString(this.AMBITO,dos);
					
					// String
				
						writeString(this.DIAG_PRINCIPAL,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO1,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO2,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO3,dos);
					
					// String
				
						writeString(this.TIPO_DIAGNOSTICO_PPAL,dos);
					
					// String
				
						writeString(this.CUMPLIMIENTO_CITA,dos);
					
					// String
				
						writeString(this.TIPO_GENERACION,dos);
					
					// String
				
						writeString(this.IMC_VALOR,dos);
					
					// String
				
						writeString(this.PABDOMINAL_VALOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FUERZA_PACIENTE,dos);
					
					// String
				
						writeString(this.FUERZA_ADS_PACIENTE,dos);
					
					// String
				
						writeString(this.CODIGO_ESM_ADS_PACIENTE,dos);
					
					// String
				
						writeString(this.SIGLA_ESM_ADS_PACIENTE,dos);
					
					// String
				
						writeString(this.NOMBRE_ESM_ADS_PACIENTE,dos);
					
					// String
				
						writeString(this.FUERZA_ESM_ATENCION,dos);
					
					// String
				
						writeString(this.CODIGO_DEL_PRESTADOR,dos);
					
					// String
				
						writeString(this.SIGLA_ESM,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.DEPARTAMENTO,dos);
					
					// String
				
						writeString(this.MUNICIPIO,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_PACIENTE,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PACIENTE,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.GENERO,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.PESO,dos);
					
					// String
				
						writeString(this.TALLA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD_A_OS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD_MESES);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// String
				
						writeString(this.FECHA_CONSULTA,dos);
					
					// String
				
						writeString(this.CUPS,dos);
					
					// String
				
						writeString(this.FINALIDAD_CONSULTA,dos);
					
					// String
				
						writeString(this.CAUSA_EXTERNA,dos);
					
					// String
				
						writeString(this.AMBITO,dos);
					
					// String
				
						writeString(this.DIAG_PRINCIPAL,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO1,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO2,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO3,dos);
					
					// String
				
						writeString(this.TIPO_DIAGNOSTICO_PPAL,dos);
					
					// String
				
						writeString(this.CUMPLIMIENTO_CITA,dos);
					
					// String
				
						writeString(this.TIPO_GENERACION,dos);
					
					// String
				
						writeString(this.IMC_VALOR,dos);
					
					// String
				
						writeString(this.PABDOMINAL_VALOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FUERZA_PACIENTE="+FUERZA_PACIENTE);
		sb.append(",FUERZA_ADS_PACIENTE="+FUERZA_ADS_PACIENTE);
		sb.append(",CODIGO_ESM_ADS_PACIENTE="+CODIGO_ESM_ADS_PACIENTE);
		sb.append(",SIGLA_ESM_ADS_PACIENTE="+SIGLA_ESM_ADS_PACIENTE);
		sb.append(",NOMBRE_ESM_ADS_PACIENTE="+NOMBRE_ESM_ADS_PACIENTE);
		sb.append(",FUERZA_ESM_ATENCION="+FUERZA_ESM_ATENCION);
		sb.append(",CODIGO_DEL_PRESTADOR="+CODIGO_DEL_PRESTADOR);
		sb.append(",SIGLA_ESM="+SIGLA_ESM);
		sb.append(",FUERZA="+FUERZA);
		sb.append(",DEPARTAMENTO="+DEPARTAMENTO);
		sb.append(",MUNICIPIO="+MUNICIPIO);
		sb.append(",TDOCUMENTO_PROFESIONAL="+TDOCUMENTO_PROFESIONAL);
		sb.append(",DOCUMENTO_PROFESIONAL="+DOCUMENTO_PROFESIONAL);
		sb.append(",ESPECIALIDAD="+ESPECIALIDAD);
		sb.append(",TDOCUMENTO_PACIENTE="+TDOCUMENTO_PACIENTE);
		sb.append(",DOCUMENTO_PACIENTE="+DOCUMENTO_PACIENTE);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",GENERO="+GENERO);
		sb.append(",FECHA_NACIMIENTO="+FECHA_NACIMIENTO);
		sb.append(",PESO="+PESO);
		sb.append(",TALLA="+TALLA);
		sb.append(",EDAD_A_OS="+String.valueOf(EDAD_A_OS));
		sb.append(",EDAD_MESES="+String.valueOf(EDAD_MESES));
		sb.append(",CLASEGRD="+CLASEGRD);
		sb.append(",GRADO="+GRADO);
		sb.append(",TIPO_USUARIO="+TIPO_USUARIO);
		sb.append(",FECHA_CONSULTA="+FECHA_CONSULTA);
		sb.append(",CUPS="+CUPS);
		sb.append(",FINALIDAD_CONSULTA="+FINALIDAD_CONSULTA);
		sb.append(",CAUSA_EXTERNA="+CAUSA_EXTERNA);
		sb.append(",AMBITO="+AMBITO);
		sb.append(",DIAG_PRINCIPAL="+DIAG_PRINCIPAL);
		sb.append(",CODDIAGNOSTICO1="+CODDIAGNOSTICO1);
		sb.append(",CODDIAGNOSTICO2="+CODDIAGNOSTICO2);
		sb.append(",CODDIAGNOSTICO3="+CODDIAGNOSTICO3);
		sb.append(",TIPO_DIAGNOSTICO_PPAL="+TIPO_DIAGNOSTICO_PPAL);
		sb.append(",CUMPLIMIENTO_CITA="+CUMPLIMIENTO_CITA);
		sb.append(",TIPO_GENERACION="+TIPO_GENERACION);
		sb.append(",IMC_VALOR="+IMC_VALOR);
		sb.append(",PABDOMINAL_VALOR="+PABDOMINAL_VALOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row101Struct implements routines.system.IPersistableRow<row101Struct> {
    final static byte[] commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[0];
    static byte[] commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[0];

	
			    public String FUERZA_PACIENTE;

				public String getFUERZA_PACIENTE () {
					return this.FUERZA_PACIENTE;
				}

				public Boolean FUERZA_PACIENTEIsNullable(){
				    return true;
				}
				public Boolean FUERZA_PACIENTEIsKey(){
				    return false;
				}
				public Integer FUERZA_PACIENTELength(){
				    return 50;
				}
				public Integer FUERZA_PACIENTEPrecision(){
				    return 0;
				}
				public String FUERZA_PACIENTEDefault(){
				
					return null;
				
				}
				public String FUERZA_PACIENTEComment(){
				
				    return "";
				
				}
				public String FUERZA_PACIENTEPattern(){
				
					return "";
				
				}
				public String FUERZA_PACIENTEOriginalDbColumnName(){
				
					return "FUERZA_PACIENTE";
				
				}

				
			    public String FUERZA_ADS_PACIENTE;

				public String getFUERZA_ADS_PACIENTE () {
					return this.FUERZA_ADS_PACIENTE;
				}

				public Boolean FUERZA_ADS_PACIENTEIsNullable(){
				    return true;
				}
				public Boolean FUERZA_ADS_PACIENTEIsKey(){
				    return false;
				}
				public Integer FUERZA_ADS_PACIENTELength(){
				    return 50;
				}
				public Integer FUERZA_ADS_PACIENTEPrecision(){
				    return 0;
				}
				public String FUERZA_ADS_PACIENTEDefault(){
				
					return null;
				
				}
				public String FUERZA_ADS_PACIENTEComment(){
				
				    return "";
				
				}
				public String FUERZA_ADS_PACIENTEPattern(){
				
					return "";
				
				}
				public String FUERZA_ADS_PACIENTEOriginalDbColumnName(){
				
					return "FUERZA_ADS_PACIENTE";
				
				}

				
			    public String CODIGO_ESM_ADS_PACIENTE;

				public String getCODIGO_ESM_ADS_PACIENTE () {
					return this.CODIGO_ESM_ADS_PACIENTE;
				}

				public Boolean CODIGO_ESM_ADS_PACIENTEIsNullable(){
				    return true;
				}
				public Boolean CODIGO_ESM_ADS_PACIENTEIsKey(){
				    return false;
				}
				public Integer CODIGO_ESM_ADS_PACIENTELength(){
				    return 100;
				}
				public Integer CODIGO_ESM_ADS_PACIENTEPrecision(){
				    return 0;
				}
				public String CODIGO_ESM_ADS_PACIENTEDefault(){
				
					return null;
				
				}
				public String CODIGO_ESM_ADS_PACIENTEComment(){
				
				    return "";
				
				}
				public String CODIGO_ESM_ADS_PACIENTEPattern(){
				
					return "";
				
				}
				public String CODIGO_ESM_ADS_PACIENTEOriginalDbColumnName(){
				
					return "CODIGO_ESM_ADS_PACIENTE";
				
				}

				
			    public String SIGLA_ESM_ADS_PACIENTE;

				public String getSIGLA_ESM_ADS_PACIENTE () {
					return this.SIGLA_ESM_ADS_PACIENTE;
				}

				public Boolean SIGLA_ESM_ADS_PACIENTEIsNullable(){
				    return true;
				}
				public Boolean SIGLA_ESM_ADS_PACIENTEIsKey(){
				    return false;
				}
				public Integer SIGLA_ESM_ADS_PACIENTELength(){
				    return 100;
				}
				public Integer SIGLA_ESM_ADS_PACIENTEPrecision(){
				    return 0;
				}
				public String SIGLA_ESM_ADS_PACIENTEDefault(){
				
					return null;
				
				}
				public String SIGLA_ESM_ADS_PACIENTEComment(){
				
				    return "";
				
				}
				public String SIGLA_ESM_ADS_PACIENTEPattern(){
				
					return "";
				
				}
				public String SIGLA_ESM_ADS_PACIENTEOriginalDbColumnName(){
				
					return "SIGLA_ESM_ADS_PACIENTE";
				
				}

				
			    public String NOMBRE_ESM_ADS_PACIENTE;

				public String getNOMBRE_ESM_ADS_PACIENTE () {
					return this.NOMBRE_ESM_ADS_PACIENTE;
				}

				public Boolean NOMBRE_ESM_ADS_PACIENTEIsNullable(){
				    return true;
				}
				public Boolean NOMBRE_ESM_ADS_PACIENTEIsKey(){
				    return false;
				}
				public Integer NOMBRE_ESM_ADS_PACIENTELength(){
				    return 2000;
				}
				public Integer NOMBRE_ESM_ADS_PACIENTEPrecision(){
				    return 0;
				}
				public String NOMBRE_ESM_ADS_PACIENTEDefault(){
				
					return null;
				
				}
				public String NOMBRE_ESM_ADS_PACIENTEComment(){
				
				    return "";
				
				}
				public String NOMBRE_ESM_ADS_PACIENTEPattern(){
				
					return "";
				
				}
				public String NOMBRE_ESM_ADS_PACIENTEOriginalDbColumnName(){
				
					return "NOMBRE_ESM_ADS_PACIENTE";
				
				}

				
			    public String FUERZA_ESM_ATENCION;

				public String getFUERZA_ESM_ATENCION () {
					return this.FUERZA_ESM_ATENCION;
				}

				public Boolean FUERZA_ESM_ATENCIONIsNullable(){
				    return true;
				}
				public Boolean FUERZA_ESM_ATENCIONIsKey(){
				    return false;
				}
				public Integer FUERZA_ESM_ATENCIONLength(){
				    return 50;
				}
				public Integer FUERZA_ESM_ATENCIONPrecision(){
				    return 0;
				}
				public String FUERZA_ESM_ATENCIONDefault(){
				
					return null;
				
				}
				public String FUERZA_ESM_ATENCIONComment(){
				
				    return "";
				
				}
				public String FUERZA_ESM_ATENCIONPattern(){
				
					return "";
				
				}
				public String FUERZA_ESM_ATENCIONOriginalDbColumnName(){
				
					return "FUERZA_ESM_ATENCION";
				
				}

				
			    public String CODIGO_DEL_PRESTADOR;

				public String getCODIGO_DEL_PRESTADOR () {
					return this.CODIGO_DEL_PRESTADOR;
				}

				public Boolean CODIGO_DEL_PRESTADORIsNullable(){
				    return true;
				}
				public Boolean CODIGO_DEL_PRESTADORIsKey(){
				    return false;
				}
				public Integer CODIGO_DEL_PRESTADORLength(){
				    return 100;
				}
				public Integer CODIGO_DEL_PRESTADORPrecision(){
				    return 0;
				}
				public String CODIGO_DEL_PRESTADORDefault(){
				
					return null;
				
				}
				public String CODIGO_DEL_PRESTADORComment(){
				
				    return "";
				
				}
				public String CODIGO_DEL_PRESTADORPattern(){
				
					return "";
				
				}
				public String CODIGO_DEL_PRESTADOROriginalDbColumnName(){
				
					return "CODIGO_DEL_PRESTADOR";
				
				}

				
			    public String SIGLA_ESM_ATENCION;

				public String getSIGLA_ESM_ATENCION () {
					return this.SIGLA_ESM_ATENCION;
				}

				public Boolean SIGLA_ESM_ATENCIONIsNullable(){
				    return true;
				}
				public Boolean SIGLA_ESM_ATENCIONIsKey(){
				    return false;
				}
				public Integer SIGLA_ESM_ATENCIONLength(){
				    return 100;
				}
				public Integer SIGLA_ESM_ATENCIONPrecision(){
				    return 0;
				}
				public String SIGLA_ESM_ATENCIONDefault(){
				
					return null;
				
				}
				public String SIGLA_ESM_ATENCIONComment(){
				
				    return "";
				
				}
				public String SIGLA_ESM_ATENCIONPattern(){
				
					return "";
				
				}
				public String SIGLA_ESM_ATENCIONOriginalDbColumnName(){
				
					return "SIGLA_ESM_ATENCION";
				
				}

				
			    public String NOMBRE_ESM_ATENCION;

				public String getNOMBRE_ESM_ATENCION () {
					return this.NOMBRE_ESM_ATENCION;
				}

				public Boolean NOMBRE_ESM_ATENCIONIsNullable(){
				    return true;
				}
				public Boolean NOMBRE_ESM_ATENCIONIsKey(){
				    return false;
				}
				public Integer NOMBRE_ESM_ATENCIONLength(){
				    return 2000;
				}
				public Integer NOMBRE_ESM_ATENCIONPrecision(){
				    return 0;
				}
				public String NOMBRE_ESM_ATENCIONDefault(){
				
					return null;
				
				}
				public String NOMBRE_ESM_ATENCIONComment(){
				
				    return "";
				
				}
				public String NOMBRE_ESM_ATENCIONPattern(){
				
					return "";
				
				}
				public String NOMBRE_ESM_ATENCIONOriginalDbColumnName(){
				
					return "NOMBRE_ESM_ATENCION";
				
				}

				
			    public String DEPARTAMENTO;

				public String getDEPARTAMENTO () {
					return this.DEPARTAMENTO;
				}

				public Boolean DEPARTAMENTOIsNullable(){
				    return true;
				}
				public Boolean DEPARTAMENTOIsKey(){
				    return false;
				}
				public Integer DEPARTAMENTOLength(){
				    return 100;
				}
				public Integer DEPARTAMENTOPrecision(){
				    return 0;
				}
				public String DEPARTAMENTODefault(){
				
					return null;
				
				}
				public String DEPARTAMENTOComment(){
				
				    return "";
				
				}
				public String DEPARTAMENTOPattern(){
				
					return "";
				
				}
				public String DEPARTAMENTOOriginalDbColumnName(){
				
					return "DEPARTAMENTO";
				
				}

				
			    public String MUNICIPIO;

				public String getMUNICIPIO () {
					return this.MUNICIPIO;
				}

				public Boolean MUNICIPIOIsNullable(){
				    return true;
				}
				public Boolean MUNICIPIOIsKey(){
				    return false;
				}
				public Integer MUNICIPIOLength(){
				    return 100;
				}
				public Integer MUNICIPIOPrecision(){
				    return 0;
				}
				public String MUNICIPIODefault(){
				
					return null;
				
				}
				public String MUNICIPIOComment(){
				
				    return "";
				
				}
				public String MUNICIPIOPattern(){
				
					return "";
				
				}
				public String MUNICIPIOOriginalDbColumnName(){
				
					return "MUNICIPIO";
				
				}

				
			    public String TDOCUMENTO_PROFESIONAL;

				public String getTDOCUMENTO_PROFESIONAL () {
					return this.TDOCUMENTO_PROFESIONAL;
				}

				public Boolean TDOCUMENTO_PROFESIONALIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_PROFESIONALLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_PROFESIONALComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "TDOCUMENTO_PROFESIONAL";
				
				}

				
			    public String DOCUMENTO_PROFESIONAL;

				public String getDOCUMENTO_PROFESIONAL () {
					return this.DOCUMENTO_PROFESIONAL;
				}

				public Boolean DOCUMENTO_PROFESIONALIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_PROFESIONALLength(){
				    return 40;
				}
				public Integer DOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String DOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_PROFESIONALComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "DOCUMENTO_PROFESIONAL";
				
				}

				
			    public String ESPECIALIDAD;

				public String getESPECIALIDAD () {
					return this.ESPECIALIDAD;
				}

				public Boolean ESPECIALIDADIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADLength(){
				    return 500;
				}
				public Integer ESPECIALIDADPrecision(){
				    return 0;
				}
				public String ESPECIALIDADDefault(){
				
					return null;
				
				}
				public String ESPECIALIDADComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADOriginalDbColumnName(){
				
					return "ESPECIALIDAD";
				
				}

				
			    public String TDOCUMENTO_PACIENTE;

				public String getTDOCUMENTO_PACIENTE () {
					return this.TDOCUMENTO_PACIENTE;
				}

				public Boolean TDOCUMENTO_PACIENTEIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_PACIENTEIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_PACIENTELength(){
				    return 5;
				}
				public Integer TDOCUMENTO_PACIENTEPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_PACIENTEDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_PACIENTEComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_PACIENTEPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_PACIENTEOriginalDbColumnName(){
				
					return "TDOCUMENTO_PACIENTE";
				
				}

				
			    public String DOCUMENTO_PACIENTE;

				public String getDOCUMENTO_PACIENTE () {
					return this.DOCUMENTO_PACIENTE;
				}

				public Boolean DOCUMENTO_PACIENTEIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_PACIENTEIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_PACIENTELength(){
				    return 40;
				}
				public Integer DOCUMENTO_PACIENTEPrecision(){
				    return 0;
				}
				public String DOCUMENTO_PACIENTEDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_PACIENTEComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_PACIENTEPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_PACIENTEOriginalDbColumnName(){
				
					return "DOCUMENTO_PACIENTE";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 100;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 100;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 100;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 100;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String GENERO;

				public String getGENERO () {
					return this.GENERO;
				}

				public Boolean GENEROIsNullable(){
				    return true;
				}
				public Boolean GENEROIsKey(){
				    return false;
				}
				public Integer GENEROLength(){
				    return 20;
				}
				public Integer GENEROPrecision(){
				    return 0;
				}
				public String GENERODefault(){
				
					return null;
				
				}
				public String GENEROComment(){
				
				    return "";
				
				}
				public String GENEROPattern(){
				
					return "";
				
				}
				public String GENEROOriginalDbColumnName(){
				
					return "GENERO";
				
				}

				
			    public String FECHA_NACIMIENTO;

				public String getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return 10;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return 0;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public String PESO;

				public String getPESO () {
					return this.PESO;
				}

				public Boolean PESOIsNullable(){
				    return true;
				}
				public Boolean PESOIsKey(){
				    return false;
				}
				public Integer PESOLength(){
				    return 0;
				}
				public Integer PESOPrecision(){
				    return 0;
				}
				public String PESODefault(){
				
					return null;
				
				}
				public String PESOComment(){
				
				    return "";
				
				}
				public String PESOPattern(){
				
					return "";
				
				}
				public String PESOOriginalDbColumnName(){
				
					return "PESO";
				
				}

				
			    public String TALLA;

				public String getTALLA () {
					return this.TALLA;
				}

				public Boolean TALLAIsNullable(){
				    return true;
				}
				public Boolean TALLAIsKey(){
				    return false;
				}
				public Integer TALLALength(){
				    return 0;
				}
				public Integer TALLAPrecision(){
				    return 0;
				}
				public String TALLADefault(){
				
					return null;
				
				}
				public String TALLAComment(){
				
				    return "";
				
				}
				public String TALLAPattern(){
				
					return "";
				
				}
				public String TALLAOriginalDbColumnName(){
				
					return "TALLA";
				
				}

				
			    public BigDecimal EDAD_A_OS;

				public BigDecimal getEDAD_A_OS () {
					return this.EDAD_A_OS;
				}

				public Boolean EDAD_A_OSIsNullable(){
				    return true;
				}
				public Boolean EDAD_A_OSIsKey(){
				    return false;
				}
				public Integer EDAD_A_OSLength(){
				    return 0;
				}
				public Integer EDAD_A_OSPrecision(){
				    return 0;
				}
				public String EDAD_A_OSDefault(){
				
					return "";
				
				}
				public String EDAD_A_OSComment(){
				
				    return "";
				
				}
				public String EDAD_A_OSPattern(){
				
					return "";
				
				}
				public String EDAD_A_OSOriginalDbColumnName(){
				
					return "EDAD_A?OS";
				
				}

				
			    public BigDecimal EDAD_MESES;

				public BigDecimal getEDAD_MESES () {
					return this.EDAD_MESES;
				}

				public Boolean EDAD_MESESIsNullable(){
				    return true;
				}
				public Boolean EDAD_MESESIsKey(){
				    return false;
				}
				public Integer EDAD_MESESLength(){
				    return 0;
				}
				public Integer EDAD_MESESPrecision(){
				    return 0;
				}
				public String EDAD_MESESDefault(){
				
					return "";
				
				}
				public String EDAD_MESESComment(){
				
				    return "";
				
				}
				public String EDAD_MESESPattern(){
				
					return "";
				
				}
				public String EDAD_MESESOriginalDbColumnName(){
				
					return "EDAD_MESES";
				
				}

				
			    public String GRADO;

				public String getGRADO () {
					return this.GRADO;
				}

				public Boolean GRADOIsNullable(){
				    return true;
				}
				public Boolean GRADOIsKey(){
				    return false;
				}
				public Integer GRADOLength(){
				    return 100;
				}
				public Integer GRADOPrecision(){
				    return 0;
				}
				public String GRADODefault(){
				
					return null;
				
				}
				public String GRADOComment(){
				
				    return "";
				
				}
				public String GRADOPattern(){
				
					return "";
				
				}
				public String GRADOOriginalDbColumnName(){
				
					return "GRADO";
				
				}

				
			    public String CLASEGRD;

				public String getCLASEGRD () {
					return this.CLASEGRD;
				}

				public Boolean CLASEGRDIsNullable(){
				    return true;
				}
				public Boolean CLASEGRDIsKey(){
				    return false;
				}
				public Integer CLASEGRDLength(){
				    return 50;
				}
				public Integer CLASEGRDPrecision(){
				    return 0;
				}
				public String CLASEGRDDefault(){
				
					return null;
				
				}
				public String CLASEGRDComment(){
				
				    return "";
				
				}
				public String CLASEGRDPattern(){
				
					return "";
				
				}
				public String CLASEGRDOriginalDbColumnName(){
				
					return "CLASEGRD";
				
				}

				
			    public String TIPO_USUARIO;

				public String getTIPO_USUARIO () {
					return this.TIPO_USUARIO;
				}

				public Boolean TIPO_USUARIOIsNullable(){
				    return true;
				}
				public Boolean TIPO_USUARIOIsKey(){
				    return false;
				}
				public Integer TIPO_USUARIOLength(){
				    return 100;
				}
				public Integer TIPO_USUARIOPrecision(){
				    return 0;
				}
				public String TIPO_USUARIODefault(){
				
					return null;
				
				}
				public String TIPO_USUARIOComment(){
				
				    return "";
				
				}
				public String TIPO_USUARIOPattern(){
				
					return "";
				
				}
				public String TIPO_USUARIOOriginalDbColumnName(){
				
					return "TIPO_USUARIO";
				
				}

				
			    public String FUERZA_ADSCRIPCION;

				public String getFUERZA_ADSCRIPCION () {
					return this.FUERZA_ADSCRIPCION;
				}

				public Boolean FUERZA_ADSCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean FUERZA_ADSCRIPCIONIsKey(){
				    return false;
				}
				public Integer FUERZA_ADSCRIPCIONLength(){
				    return 50;
				}
				public Integer FUERZA_ADSCRIPCIONPrecision(){
				    return 0;
				}
				public String FUERZA_ADSCRIPCIONDefault(){
				
					return null;
				
				}
				public String FUERZA_ADSCRIPCIONComment(){
				
				    return "";
				
				}
				public String FUERZA_ADSCRIPCIONPattern(){
				
					return "";
				
				}
				public String FUERZA_ADSCRIPCIONOriginalDbColumnName(){
				
					return "FUERZA_ADSCRIPCION";
				
				}

				
			    public String ESM_ADSCRIPCION;

				public String getESM_ADSCRIPCION () {
					return this.ESM_ADSCRIPCION;
				}

				public Boolean ESM_ADSCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean ESM_ADSCRIPCIONIsKey(){
				    return false;
				}
				public Integer ESM_ADSCRIPCIONLength(){
				    return 2000;
				}
				public Integer ESM_ADSCRIPCIONPrecision(){
				    return 0;
				}
				public String ESM_ADSCRIPCIONDefault(){
				
					return null;
				
				}
				public String ESM_ADSCRIPCIONComment(){
				
				    return "";
				
				}
				public String ESM_ADSCRIPCIONPattern(){
				
					return "";
				
				}
				public String ESM_ADSCRIPCIONOriginalDbColumnName(){
				
					return "ESM_ADSCRIPCION";
				
				}

				
			    public String FECHA_CONSULTA;

				public String getFECHA_CONSULTA () {
					return this.FECHA_CONSULTA;
				}

				public Boolean FECHA_CONSULTAIsNullable(){
				    return true;
				}
				public Boolean FECHA_CONSULTAIsKey(){
				    return false;
				}
				public Integer FECHA_CONSULTALength(){
				    return 19;
				}
				public Integer FECHA_CONSULTAPrecision(){
				    return 0;
				}
				public String FECHA_CONSULTADefault(){
				
					return null;
				
				}
				public String FECHA_CONSULTAComment(){
				
				    return "";
				
				}
				public String FECHA_CONSULTAPattern(){
				
					return "";
				
				}
				public String FECHA_CONSULTAOriginalDbColumnName(){
				
					return "FECHA_CONSULTA";
				
				}

				
			    public String CUPS;

				public String getCUPS () {
					return this.CUPS;
				}

				public Boolean CUPSIsNullable(){
				    return true;
				}
				public Boolean CUPSIsKey(){
				    return false;
				}
				public Integer CUPSLength(){
				    return 0;
				}
				public Integer CUPSPrecision(){
				    return 0;
				}
				public String CUPSDefault(){
				
					return null;
				
				}
				public String CUPSComment(){
				
				    return "";
				
				}
				public String CUPSPattern(){
				
					return "";
				
				}
				public String CUPSOriginalDbColumnName(){
				
					return "CUPS";
				
				}

				
			    public BigDecimal FINALIDAD_CONSULTA;

				public BigDecimal getFINALIDAD_CONSULTA () {
					return this.FINALIDAD_CONSULTA;
				}

				public Boolean FINALIDAD_CONSULTAIsNullable(){
				    return true;
				}
				public Boolean FINALIDAD_CONSULTAIsKey(){
				    return false;
				}
				public Integer FINALIDAD_CONSULTALength(){
				    return 0;
				}
				public Integer FINALIDAD_CONSULTAPrecision(){
				    return 0;
				}
				public String FINALIDAD_CONSULTADefault(){
				
					return null;
				
				}
				public String FINALIDAD_CONSULTAComment(){
				
				    return "";
				
				}
				public String FINALIDAD_CONSULTAPattern(){
				
					return "";
				
				}
				public String FINALIDAD_CONSULTAOriginalDbColumnName(){
				
					return "FINALIDAD_CONSULTA";
				
				}

				
			    public BigDecimal CAUSA_EXTERNA;

				public BigDecimal getCAUSA_EXTERNA () {
					return this.CAUSA_EXTERNA;
				}

				public Boolean CAUSA_EXTERNAIsNullable(){
				    return true;
				}
				public Boolean CAUSA_EXTERNAIsKey(){
				    return false;
				}
				public Integer CAUSA_EXTERNALength(){
				    return 0;
				}
				public Integer CAUSA_EXTERNAPrecision(){
				    return 0;
				}
				public String CAUSA_EXTERNADefault(){
				
					return null;
				
				}
				public String CAUSA_EXTERNAComment(){
				
				    return "";
				
				}
				public String CAUSA_EXTERNAPattern(){
				
					return "";
				
				}
				public String CAUSA_EXTERNAOriginalDbColumnName(){
				
					return "CAUSA_EXTERNA";
				
				}

				
			    public String AMBITO;

				public String getAMBITO () {
					return this.AMBITO;
				}

				public Boolean AMBITOIsNullable(){
				    return true;
				}
				public Boolean AMBITOIsKey(){
				    return false;
				}
				public Integer AMBITOLength(){
				    return 0;
				}
				public Integer AMBITOPrecision(){
				    return 0;
				}
				public String AMBITODefault(){
				
					return null;
				
				}
				public String AMBITOComment(){
				
				    return "";
				
				}
				public String AMBITOPattern(){
				
					return "";
				
				}
				public String AMBITOOriginalDbColumnName(){
				
					return "AMBITO";
				
				}

				
			    public String DIAG_PRINCIPAL;

				public String getDIAG_PRINCIPAL () {
					return this.DIAG_PRINCIPAL;
				}

				public Boolean DIAG_PRINCIPALIsNullable(){
				    return true;
				}
				public Boolean DIAG_PRINCIPALIsKey(){
				    return false;
				}
				public Integer DIAG_PRINCIPALLength(){
				    return 0;
				}
				public Integer DIAG_PRINCIPALPrecision(){
				    return 0;
				}
				public String DIAG_PRINCIPALDefault(){
				
					return null;
				
				}
				public String DIAG_PRINCIPALComment(){
				
				    return "";
				
				}
				public String DIAG_PRINCIPALPattern(){
				
					return "";
				
				}
				public String DIAG_PRINCIPALOriginalDbColumnName(){
				
					return "DIAG_PRINCIPAL";
				
				}

				
			    public String CODDIAGNOSTICO1;

				public String getCODDIAGNOSTICO1 () {
					return this.CODDIAGNOSTICO1;
				}

				public Boolean CODDIAGNOSTICO1IsNullable(){
				    return true;
				}
				public Boolean CODDIAGNOSTICO1IsKey(){
				    return false;
				}
				public Integer CODDIAGNOSTICO1Length(){
				    return 0;
				}
				public Integer CODDIAGNOSTICO1Precision(){
				    return 0;
				}
				public String CODDIAGNOSTICO1Default(){
				
					return null;
				
				}
				public String CODDIAGNOSTICO1Comment(){
				
				    return "";
				
				}
				public String CODDIAGNOSTICO1Pattern(){
				
					return "";
				
				}
				public String CODDIAGNOSTICO1OriginalDbColumnName(){
				
					return "CODDIAGNOSTICO1";
				
				}

				
			    public String CODDIAGNOSTICO2;

				public String getCODDIAGNOSTICO2 () {
					return this.CODDIAGNOSTICO2;
				}

				public Boolean CODDIAGNOSTICO2IsNullable(){
				    return true;
				}
				public Boolean CODDIAGNOSTICO2IsKey(){
				    return false;
				}
				public Integer CODDIAGNOSTICO2Length(){
				    return 0;
				}
				public Integer CODDIAGNOSTICO2Precision(){
				    return 0;
				}
				public String CODDIAGNOSTICO2Default(){
				
					return null;
				
				}
				public String CODDIAGNOSTICO2Comment(){
				
				    return "";
				
				}
				public String CODDIAGNOSTICO2Pattern(){
				
					return "";
				
				}
				public String CODDIAGNOSTICO2OriginalDbColumnName(){
				
					return "CODDIAGNOSTICO2";
				
				}

				
			    public String CODDIAGNOSTICO3;

				public String getCODDIAGNOSTICO3 () {
					return this.CODDIAGNOSTICO3;
				}

				public Boolean CODDIAGNOSTICO3IsNullable(){
				    return true;
				}
				public Boolean CODDIAGNOSTICO3IsKey(){
				    return false;
				}
				public Integer CODDIAGNOSTICO3Length(){
				    return 0;
				}
				public Integer CODDIAGNOSTICO3Precision(){
				    return 0;
				}
				public String CODDIAGNOSTICO3Default(){
				
					return null;
				
				}
				public String CODDIAGNOSTICO3Comment(){
				
				    return "";
				
				}
				public String CODDIAGNOSTICO3Pattern(){
				
					return "";
				
				}
				public String CODDIAGNOSTICO3OriginalDbColumnName(){
				
					return "CODDIAGNOSTICO3";
				
				}

				
			    public String TIPO_DIAGNOSTICO_PPAL;

				public String getTIPO_DIAGNOSTICO_PPAL () {
					return this.TIPO_DIAGNOSTICO_PPAL;
				}

				public Boolean TIPO_DIAGNOSTICO_PPALIsNullable(){
				    return true;
				}
				public Boolean TIPO_DIAGNOSTICO_PPALIsKey(){
				    return false;
				}
				public Integer TIPO_DIAGNOSTICO_PPALLength(){
				    return 0;
				}
				public Integer TIPO_DIAGNOSTICO_PPALPrecision(){
				    return 0;
				}
				public String TIPO_DIAGNOSTICO_PPALDefault(){
				
					return null;
				
				}
				public String TIPO_DIAGNOSTICO_PPALComment(){
				
				    return "";
				
				}
				public String TIPO_DIAGNOSTICO_PPALPattern(){
				
					return "";
				
				}
				public String TIPO_DIAGNOSTICO_PPALOriginalDbColumnName(){
				
					return "TIPO_DIAGNOSTICO_PPAL";
				
				}

				
			    public String CUMPLIMIENTO_CITA;

				public String getCUMPLIMIENTO_CITA () {
					return this.CUMPLIMIENTO_CITA;
				}

				public Boolean CUMPLIMIENTO_CITAIsNullable(){
				    return true;
				}
				public Boolean CUMPLIMIENTO_CITAIsKey(){
				    return false;
				}
				public Integer CUMPLIMIENTO_CITALength(){
				    return 2;
				}
				public Integer CUMPLIMIENTO_CITAPrecision(){
				    return 0;
				}
				public String CUMPLIMIENTO_CITADefault(){
				
					return null;
				
				}
				public String CUMPLIMIENTO_CITAComment(){
				
				    return "";
				
				}
				public String CUMPLIMIENTO_CITAPattern(){
				
					return "";
				
				}
				public String CUMPLIMIENTO_CITAOriginalDbColumnName(){
				
					return "CUMPLIMIENTO_CITA";
				
				}

				
			    public String TIPO_GENERACION;

				public String getTIPO_GENERACION () {
					return this.TIPO_GENERACION;
				}

				public Boolean TIPO_GENERACIONIsNullable(){
				    return true;
				}
				public Boolean TIPO_GENERACIONIsKey(){
				    return false;
				}
				public Integer TIPO_GENERACIONLength(){
				    return 30;
				}
				public Integer TIPO_GENERACIONPrecision(){
				    return 0;
				}
				public String TIPO_GENERACIONDefault(){
				
					return null;
				
				}
				public String TIPO_GENERACIONComment(){
				
				    return "";
				
				}
				public String TIPO_GENERACIONPattern(){
				
					return "";
				
				}
				public String TIPO_GENERACIONOriginalDbColumnName(){
				
					return "TIPO_GENERACION";
				
				}

				
			    public String TRIPS;

				public String getTRIPS () {
					return this.TRIPS;
				}

				public Boolean TRIPSIsNullable(){
				    return true;
				}
				public Boolean TRIPSIsKey(){
				    return false;
				}
				public Integer TRIPSLength(){
				    return 7;
				}
				public Integer TRIPSPrecision(){
				    return 0;
				}
				public String TRIPSDefault(){
				
					return null;
				
				}
				public String TRIPSComment(){
				
				    return "";
				
				}
				public String TRIPSPattern(){
				
					return "";
				
				}
				public String TRIPSOriginalDbColumnName(){
				
					return "TRIPS";
				
				}

				
			    public String IMC_VALOR;

				public String getIMC_VALOR () {
					return this.IMC_VALOR;
				}

				public Boolean IMC_VALORIsNullable(){
				    return true;
				}
				public Boolean IMC_VALORIsKey(){
				    return false;
				}
				public Integer IMC_VALORLength(){
				    return 0;
				}
				public Integer IMC_VALORPrecision(){
				    return 0;
				}
				public String IMC_VALORDefault(){
				
					return null;
				
				}
				public String IMC_VALORComment(){
				
				    return "";
				
				}
				public String IMC_VALORPattern(){
				
					return "";
				
				}
				public String IMC_VALOROriginalDbColumnName(){
				
					return "IMC_VALOR";
				
				}

				
			    public String PABDOMINAL_VALOR;

				public String getPABDOMINAL_VALOR () {
					return this.PABDOMINAL_VALOR;
				}

				public Boolean PABDOMINAL_VALORIsNullable(){
				    return true;
				}
				public Boolean PABDOMINAL_VALORIsKey(){
				    return false;
				}
				public Integer PABDOMINAL_VALORLength(){
				    return 0;
				}
				public Integer PABDOMINAL_VALORPrecision(){
				    return 0;
				}
				public String PABDOMINAL_VALORDefault(){
				
					return null;
				
				}
				public String PABDOMINAL_VALORComment(){
				
				    return "";
				
				}
				public String PABDOMINAL_VALORPattern(){
				
					return "";
				
				}
				public String PABDOMINAL_VALOROriginalDbColumnName(){
				
					return "PABDOMINAL_VALOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length) {
				if(length < 1024 && commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length == 0) {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[1024];
				} else {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length);
			strReturn = new String(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length) {
				if(length < 1024 && commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length == 0) {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[1024];
				} else {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length);
			strReturn = new String(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS) {

        	try {

        		int length = 0;
		
					this.FUERZA_PACIENTE = readString(dis);
					
					this.FUERZA_ADS_PACIENTE = readString(dis);
					
					this.CODIGO_ESM_ADS_PACIENTE = readString(dis);
					
					this.SIGLA_ESM_ADS_PACIENTE = readString(dis);
					
					this.NOMBRE_ESM_ADS_PACIENTE = readString(dis);
					
					this.FUERZA_ESM_ATENCION = readString(dis);
					
					this.CODIGO_DEL_PRESTADOR = readString(dis);
					
					this.SIGLA_ESM_ATENCION = readString(dis);
					
					this.NOMBRE_ESM_ATENCION = readString(dis);
					
					this.DEPARTAMENTO = readString(dis);
					
					this.MUNICIPIO = readString(dis);
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
					this.ESPECIALIDAD = readString(dis);
					
					this.TDOCUMENTO_PACIENTE = readString(dis);
					
					this.DOCUMENTO_PACIENTE = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.GENERO = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.PESO = readString(dis);
					
					this.TALLA = readString(dis);
					
						this.EDAD_A_OS = (BigDecimal) dis.readObject();
					
						this.EDAD_MESES = (BigDecimal) dis.readObject();
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
					this.FUERZA_ADSCRIPCION = readString(dis);
					
					this.ESM_ADSCRIPCION = readString(dis);
					
					this.FECHA_CONSULTA = readString(dis);
					
					this.CUPS = readString(dis);
					
						this.FINALIDAD_CONSULTA = (BigDecimal) dis.readObject();
					
						this.CAUSA_EXTERNA = (BigDecimal) dis.readObject();
					
					this.AMBITO = readString(dis);
					
					this.DIAG_PRINCIPAL = readString(dis);
					
					this.CODDIAGNOSTICO1 = readString(dis);
					
					this.CODDIAGNOSTICO2 = readString(dis);
					
					this.CODDIAGNOSTICO3 = readString(dis);
					
					this.TIPO_DIAGNOSTICO_PPAL = readString(dis);
					
					this.CUMPLIMIENTO_CITA = readString(dis);
					
					this.TIPO_GENERACION = readString(dis);
					
					this.TRIPS = readString(dis);
					
					this.IMC_VALOR = readString(dis);
					
					this.PABDOMINAL_VALOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS) {

        	try {

        		int length = 0;
		
					this.FUERZA_PACIENTE = readString(dis);
					
					this.FUERZA_ADS_PACIENTE = readString(dis);
					
					this.CODIGO_ESM_ADS_PACIENTE = readString(dis);
					
					this.SIGLA_ESM_ADS_PACIENTE = readString(dis);
					
					this.NOMBRE_ESM_ADS_PACIENTE = readString(dis);
					
					this.FUERZA_ESM_ATENCION = readString(dis);
					
					this.CODIGO_DEL_PRESTADOR = readString(dis);
					
					this.SIGLA_ESM_ATENCION = readString(dis);
					
					this.NOMBRE_ESM_ATENCION = readString(dis);
					
					this.DEPARTAMENTO = readString(dis);
					
					this.MUNICIPIO = readString(dis);
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
					this.ESPECIALIDAD = readString(dis);
					
					this.TDOCUMENTO_PACIENTE = readString(dis);
					
					this.DOCUMENTO_PACIENTE = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.GENERO = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.PESO = readString(dis);
					
					this.TALLA = readString(dis);
					
						this.EDAD_A_OS = (BigDecimal) dis.readObject();
					
						this.EDAD_MESES = (BigDecimal) dis.readObject();
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
					this.FUERZA_ADSCRIPCION = readString(dis);
					
					this.ESM_ADSCRIPCION = readString(dis);
					
					this.FECHA_CONSULTA = readString(dis);
					
					this.CUPS = readString(dis);
					
						this.FINALIDAD_CONSULTA = (BigDecimal) dis.readObject();
					
						this.CAUSA_EXTERNA = (BigDecimal) dis.readObject();
					
					this.AMBITO = readString(dis);
					
					this.DIAG_PRINCIPAL = readString(dis);
					
					this.CODDIAGNOSTICO1 = readString(dis);
					
					this.CODDIAGNOSTICO2 = readString(dis);
					
					this.CODDIAGNOSTICO3 = readString(dis);
					
					this.TIPO_DIAGNOSTICO_PPAL = readString(dis);
					
					this.CUMPLIMIENTO_CITA = readString(dis);
					
					this.TIPO_GENERACION = readString(dis);
					
					this.TRIPS = readString(dis);
					
					this.IMC_VALOR = readString(dis);
					
					this.PABDOMINAL_VALOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FUERZA_PACIENTE,dos);
					
					// String
				
						writeString(this.FUERZA_ADS_PACIENTE,dos);
					
					// String
				
						writeString(this.CODIGO_ESM_ADS_PACIENTE,dos);
					
					// String
				
						writeString(this.SIGLA_ESM_ADS_PACIENTE,dos);
					
					// String
				
						writeString(this.NOMBRE_ESM_ADS_PACIENTE,dos);
					
					// String
				
						writeString(this.FUERZA_ESM_ATENCION,dos);
					
					// String
				
						writeString(this.CODIGO_DEL_PRESTADOR,dos);
					
					// String
				
						writeString(this.SIGLA_ESM_ATENCION,dos);
					
					// String
				
						writeString(this.NOMBRE_ESM_ATENCION,dos);
					
					// String
				
						writeString(this.DEPARTAMENTO,dos);
					
					// String
				
						writeString(this.MUNICIPIO,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_PACIENTE,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PACIENTE,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.GENERO,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.PESO,dos);
					
					// String
				
						writeString(this.TALLA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD_A_OS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD_MESES);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// String
				
						writeString(this.FUERZA_ADSCRIPCION,dos);
					
					// String
				
						writeString(this.ESM_ADSCRIPCION,dos);
					
					// String
				
						writeString(this.FECHA_CONSULTA,dos);
					
					// String
				
						writeString(this.CUPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FINALIDAD_CONSULTA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CAUSA_EXTERNA);
					
					// String
				
						writeString(this.AMBITO,dos);
					
					// String
				
						writeString(this.DIAG_PRINCIPAL,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO1,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO2,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO3,dos);
					
					// String
				
						writeString(this.TIPO_DIAGNOSTICO_PPAL,dos);
					
					// String
				
						writeString(this.CUMPLIMIENTO_CITA,dos);
					
					// String
				
						writeString(this.TIPO_GENERACION,dos);
					
					// String
				
						writeString(this.TRIPS,dos);
					
					// String
				
						writeString(this.IMC_VALOR,dos);
					
					// String
				
						writeString(this.PABDOMINAL_VALOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FUERZA_PACIENTE,dos);
					
					// String
				
						writeString(this.FUERZA_ADS_PACIENTE,dos);
					
					// String
				
						writeString(this.CODIGO_ESM_ADS_PACIENTE,dos);
					
					// String
				
						writeString(this.SIGLA_ESM_ADS_PACIENTE,dos);
					
					// String
				
						writeString(this.NOMBRE_ESM_ADS_PACIENTE,dos);
					
					// String
				
						writeString(this.FUERZA_ESM_ATENCION,dos);
					
					// String
				
						writeString(this.CODIGO_DEL_PRESTADOR,dos);
					
					// String
				
						writeString(this.SIGLA_ESM_ATENCION,dos);
					
					// String
				
						writeString(this.NOMBRE_ESM_ATENCION,dos);
					
					// String
				
						writeString(this.DEPARTAMENTO,dos);
					
					// String
				
						writeString(this.MUNICIPIO,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_PACIENTE,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PACIENTE,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.GENERO,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.PESO,dos);
					
					// String
				
						writeString(this.TALLA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD_A_OS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD_MESES);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// String
				
						writeString(this.FUERZA_ADSCRIPCION,dos);
					
					// String
				
						writeString(this.ESM_ADSCRIPCION,dos);
					
					// String
				
						writeString(this.FECHA_CONSULTA,dos);
					
					// String
				
						writeString(this.CUPS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FINALIDAD_CONSULTA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CAUSA_EXTERNA);
					
					// String
				
						writeString(this.AMBITO,dos);
					
					// String
				
						writeString(this.DIAG_PRINCIPAL,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO1,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO2,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO3,dos);
					
					// String
				
						writeString(this.TIPO_DIAGNOSTICO_PPAL,dos);
					
					// String
				
						writeString(this.CUMPLIMIENTO_CITA,dos);
					
					// String
				
						writeString(this.TIPO_GENERACION,dos);
					
					// String
				
						writeString(this.TRIPS,dos);
					
					// String
				
						writeString(this.IMC_VALOR,dos);
					
					// String
				
						writeString(this.PABDOMINAL_VALOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FUERZA_PACIENTE="+FUERZA_PACIENTE);
		sb.append(",FUERZA_ADS_PACIENTE="+FUERZA_ADS_PACIENTE);
		sb.append(",CODIGO_ESM_ADS_PACIENTE="+CODIGO_ESM_ADS_PACIENTE);
		sb.append(",SIGLA_ESM_ADS_PACIENTE="+SIGLA_ESM_ADS_PACIENTE);
		sb.append(",NOMBRE_ESM_ADS_PACIENTE="+NOMBRE_ESM_ADS_PACIENTE);
		sb.append(",FUERZA_ESM_ATENCION="+FUERZA_ESM_ATENCION);
		sb.append(",CODIGO_DEL_PRESTADOR="+CODIGO_DEL_PRESTADOR);
		sb.append(",SIGLA_ESM_ATENCION="+SIGLA_ESM_ATENCION);
		sb.append(",NOMBRE_ESM_ATENCION="+NOMBRE_ESM_ATENCION);
		sb.append(",DEPARTAMENTO="+DEPARTAMENTO);
		sb.append(",MUNICIPIO="+MUNICIPIO);
		sb.append(",TDOCUMENTO_PROFESIONAL="+TDOCUMENTO_PROFESIONAL);
		sb.append(",DOCUMENTO_PROFESIONAL="+DOCUMENTO_PROFESIONAL);
		sb.append(",ESPECIALIDAD="+ESPECIALIDAD);
		sb.append(",TDOCUMENTO_PACIENTE="+TDOCUMENTO_PACIENTE);
		sb.append(",DOCUMENTO_PACIENTE="+DOCUMENTO_PACIENTE);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",GENERO="+GENERO);
		sb.append(",FECHA_NACIMIENTO="+FECHA_NACIMIENTO);
		sb.append(",PESO="+PESO);
		sb.append(",TALLA="+TALLA);
		sb.append(",EDAD_A_OS="+String.valueOf(EDAD_A_OS));
		sb.append(",EDAD_MESES="+String.valueOf(EDAD_MESES));
		sb.append(",GRADO="+GRADO);
		sb.append(",CLASEGRD="+CLASEGRD);
		sb.append(",TIPO_USUARIO="+TIPO_USUARIO);
		sb.append(",FUERZA_ADSCRIPCION="+FUERZA_ADSCRIPCION);
		sb.append(",ESM_ADSCRIPCION="+ESM_ADSCRIPCION);
		sb.append(",FECHA_CONSULTA="+FECHA_CONSULTA);
		sb.append(",CUPS="+CUPS);
		sb.append(",FINALIDAD_CONSULTA="+String.valueOf(FINALIDAD_CONSULTA));
		sb.append(",CAUSA_EXTERNA="+String.valueOf(CAUSA_EXTERNA));
		sb.append(",AMBITO="+AMBITO);
		sb.append(",DIAG_PRINCIPAL="+DIAG_PRINCIPAL);
		sb.append(",CODDIAGNOSTICO1="+CODDIAGNOSTICO1);
		sb.append(",CODDIAGNOSTICO2="+CODDIAGNOSTICO2);
		sb.append(",CODDIAGNOSTICO3="+CODDIAGNOSTICO3);
		sb.append(",TIPO_DIAGNOSTICO_PPAL="+TIPO_DIAGNOSTICO_PPAL);
		sb.append(",CUMPLIMIENTO_CITA="+CUMPLIMIENTO_CITA);
		sb.append(",TIPO_GENERACION="+TIPO_GENERACION);
		sb.append(",TRIPS="+TRIPS);
		sb.append(",IMC_VALOR="+IMC_VALOR);
		sb.append(",PABDOMINAL_VALOR="+PABDOMINAL_VALOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row101Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[0];
    static byte[] commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[0];

	
			    public String FUERZA_PACIENTE;

				public String getFUERZA_PACIENTE () {
					return this.FUERZA_PACIENTE;
				}

				public Boolean FUERZA_PACIENTEIsNullable(){
				    return true;
				}
				public Boolean FUERZA_PACIENTEIsKey(){
				    return false;
				}
				public Integer FUERZA_PACIENTELength(){
				    return 50;
				}
				public Integer FUERZA_PACIENTEPrecision(){
				    return 0;
				}
				public String FUERZA_PACIENTEDefault(){
				
					return null;
				
				}
				public String FUERZA_PACIENTEComment(){
				
				    return "";
				
				}
				public String FUERZA_PACIENTEPattern(){
				
					return "";
				
				}
				public String FUERZA_PACIENTEOriginalDbColumnName(){
				
					return "FUERZA_PACIENTE";
				
				}

				
			    public String FUERZA_ADS_PACIENTE;

				public String getFUERZA_ADS_PACIENTE () {
					return this.FUERZA_ADS_PACIENTE;
				}

				public Boolean FUERZA_ADS_PACIENTEIsNullable(){
				    return true;
				}
				public Boolean FUERZA_ADS_PACIENTEIsKey(){
				    return false;
				}
				public Integer FUERZA_ADS_PACIENTELength(){
				    return 50;
				}
				public Integer FUERZA_ADS_PACIENTEPrecision(){
				    return 0;
				}
				public String FUERZA_ADS_PACIENTEDefault(){
				
					return null;
				
				}
				public String FUERZA_ADS_PACIENTEComment(){
				
				    return "";
				
				}
				public String FUERZA_ADS_PACIENTEPattern(){
				
					return "";
				
				}
				public String FUERZA_ADS_PACIENTEOriginalDbColumnName(){
				
					return "FUERZA_ADS_PACIENTE";
				
				}

				
			    public String CODIGO_ESM_ADS_PACIENTE;

				public String getCODIGO_ESM_ADS_PACIENTE () {
					return this.CODIGO_ESM_ADS_PACIENTE;
				}

				public Boolean CODIGO_ESM_ADS_PACIENTEIsNullable(){
				    return true;
				}
				public Boolean CODIGO_ESM_ADS_PACIENTEIsKey(){
				    return false;
				}
				public Integer CODIGO_ESM_ADS_PACIENTELength(){
				    return 100;
				}
				public Integer CODIGO_ESM_ADS_PACIENTEPrecision(){
				    return 0;
				}
				public String CODIGO_ESM_ADS_PACIENTEDefault(){
				
					return null;
				
				}
				public String CODIGO_ESM_ADS_PACIENTEComment(){
				
				    return "";
				
				}
				public String CODIGO_ESM_ADS_PACIENTEPattern(){
				
					return "";
				
				}
				public String CODIGO_ESM_ADS_PACIENTEOriginalDbColumnName(){
				
					return "CODIGO_ESM_ADS_PACIENTE";
				
				}

				
			    public String SIGLA_ESM_ADS_PACIENTE;

				public String getSIGLA_ESM_ADS_PACIENTE () {
					return this.SIGLA_ESM_ADS_PACIENTE;
				}

				public Boolean SIGLA_ESM_ADS_PACIENTEIsNullable(){
				    return true;
				}
				public Boolean SIGLA_ESM_ADS_PACIENTEIsKey(){
				    return false;
				}
				public Integer SIGLA_ESM_ADS_PACIENTELength(){
				    return 100;
				}
				public Integer SIGLA_ESM_ADS_PACIENTEPrecision(){
				    return 0;
				}
				public String SIGLA_ESM_ADS_PACIENTEDefault(){
				
					return null;
				
				}
				public String SIGLA_ESM_ADS_PACIENTEComment(){
				
				    return "";
				
				}
				public String SIGLA_ESM_ADS_PACIENTEPattern(){
				
					return "";
				
				}
				public String SIGLA_ESM_ADS_PACIENTEOriginalDbColumnName(){
				
					return "SIGLA_ESM_ADS_PACIENTE";
				
				}

				
			    public String NOMBRE_ESM_ADS_PACIENTE;

				public String getNOMBRE_ESM_ADS_PACIENTE () {
					return this.NOMBRE_ESM_ADS_PACIENTE;
				}

				public Boolean NOMBRE_ESM_ADS_PACIENTEIsNullable(){
				    return true;
				}
				public Boolean NOMBRE_ESM_ADS_PACIENTEIsKey(){
				    return false;
				}
				public Integer NOMBRE_ESM_ADS_PACIENTELength(){
				    return 2000;
				}
				public Integer NOMBRE_ESM_ADS_PACIENTEPrecision(){
				    return 0;
				}
				public String NOMBRE_ESM_ADS_PACIENTEDefault(){
				
					return null;
				
				}
				public String NOMBRE_ESM_ADS_PACIENTEComment(){
				
				    return "";
				
				}
				public String NOMBRE_ESM_ADS_PACIENTEPattern(){
				
					return "";
				
				}
				public String NOMBRE_ESM_ADS_PACIENTEOriginalDbColumnName(){
				
					return "NOMBRE_ESM_ADS_PACIENTE";
				
				}

				
			    public String FUERZA_ESM_ATENCION;

				public String getFUERZA_ESM_ATENCION () {
					return this.FUERZA_ESM_ATENCION;
				}

				public Boolean FUERZA_ESM_ATENCIONIsNullable(){
				    return true;
				}
				public Boolean FUERZA_ESM_ATENCIONIsKey(){
				    return false;
				}
				public Integer FUERZA_ESM_ATENCIONLength(){
				    return 50;
				}
				public Integer FUERZA_ESM_ATENCIONPrecision(){
				    return 0;
				}
				public String FUERZA_ESM_ATENCIONDefault(){
				
					return null;
				
				}
				public String FUERZA_ESM_ATENCIONComment(){
				
				    return "";
				
				}
				public String FUERZA_ESM_ATENCIONPattern(){
				
					return "";
				
				}
				public String FUERZA_ESM_ATENCIONOriginalDbColumnName(){
				
					return "FUERZA_ESM_ATENCION";
				
				}

				
			    public String CODIGO_DEL_PRESTADOR;

				public String getCODIGO_DEL_PRESTADOR () {
					return this.CODIGO_DEL_PRESTADOR;
				}

				public Boolean CODIGO_DEL_PRESTADORIsNullable(){
				    return true;
				}
				public Boolean CODIGO_DEL_PRESTADORIsKey(){
				    return false;
				}
				public Integer CODIGO_DEL_PRESTADORLength(){
				    return 100;
				}
				public Integer CODIGO_DEL_PRESTADORPrecision(){
				    return 0;
				}
				public String CODIGO_DEL_PRESTADORDefault(){
				
					return null;
				
				}
				public String CODIGO_DEL_PRESTADORComment(){
				
				    return "";
				
				}
				public String CODIGO_DEL_PRESTADORPattern(){
				
					return "";
				
				}
				public String CODIGO_DEL_PRESTADOROriginalDbColumnName(){
				
					return "CODIGO_DEL_PRESTADOR";
				
				}

				
			    public String SIGLA_ESM_ATENCION;

				public String getSIGLA_ESM_ATENCION () {
					return this.SIGLA_ESM_ATENCION;
				}

				public Boolean SIGLA_ESM_ATENCIONIsNullable(){
				    return true;
				}
				public Boolean SIGLA_ESM_ATENCIONIsKey(){
				    return false;
				}
				public Integer SIGLA_ESM_ATENCIONLength(){
				    return 100;
				}
				public Integer SIGLA_ESM_ATENCIONPrecision(){
				    return 0;
				}
				public String SIGLA_ESM_ATENCIONDefault(){
				
					return null;
				
				}
				public String SIGLA_ESM_ATENCIONComment(){
				
				    return "";
				
				}
				public String SIGLA_ESM_ATENCIONPattern(){
				
					return "";
				
				}
				public String SIGLA_ESM_ATENCIONOriginalDbColumnName(){
				
					return "SIGLA_ESM_ATENCION";
				
				}

				
			    public String NOMBRE_ESM_ATENCION;

				public String getNOMBRE_ESM_ATENCION () {
					return this.NOMBRE_ESM_ATENCION;
				}

				public Boolean NOMBRE_ESM_ATENCIONIsNullable(){
				    return true;
				}
				public Boolean NOMBRE_ESM_ATENCIONIsKey(){
				    return false;
				}
				public Integer NOMBRE_ESM_ATENCIONLength(){
				    return 2000;
				}
				public Integer NOMBRE_ESM_ATENCIONPrecision(){
				    return 0;
				}
				public String NOMBRE_ESM_ATENCIONDefault(){
				
					return null;
				
				}
				public String NOMBRE_ESM_ATENCIONComment(){
				
				    return "";
				
				}
				public String NOMBRE_ESM_ATENCIONPattern(){
				
					return "";
				
				}
				public String NOMBRE_ESM_ATENCIONOriginalDbColumnName(){
				
					return "NOMBRE_ESM_ATENCION";
				
				}

				
			    public String DEPARTAMENTO;

				public String getDEPARTAMENTO () {
					return this.DEPARTAMENTO;
				}

				public Boolean DEPARTAMENTOIsNullable(){
				    return true;
				}
				public Boolean DEPARTAMENTOIsKey(){
				    return false;
				}
				public Integer DEPARTAMENTOLength(){
				    return 100;
				}
				public Integer DEPARTAMENTOPrecision(){
				    return 0;
				}
				public String DEPARTAMENTODefault(){
				
					return null;
				
				}
				public String DEPARTAMENTOComment(){
				
				    return "";
				
				}
				public String DEPARTAMENTOPattern(){
				
					return "";
				
				}
				public String DEPARTAMENTOOriginalDbColumnName(){
				
					return "DEPARTAMENTO";
				
				}

				
			    public String MUNICIPIO;

				public String getMUNICIPIO () {
					return this.MUNICIPIO;
				}

				public Boolean MUNICIPIOIsNullable(){
				    return true;
				}
				public Boolean MUNICIPIOIsKey(){
				    return false;
				}
				public Integer MUNICIPIOLength(){
				    return 100;
				}
				public Integer MUNICIPIOPrecision(){
				    return 0;
				}
				public String MUNICIPIODefault(){
				
					return null;
				
				}
				public String MUNICIPIOComment(){
				
				    return "";
				
				}
				public String MUNICIPIOPattern(){
				
					return "";
				
				}
				public String MUNICIPIOOriginalDbColumnName(){
				
					return "MUNICIPIO";
				
				}

				
			    public String TDOCUMENTO_PROFESIONAL;

				public String getTDOCUMENTO_PROFESIONAL () {
					return this.TDOCUMENTO_PROFESIONAL;
				}

				public Boolean TDOCUMENTO_PROFESIONALIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_PROFESIONALLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_PROFESIONALComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "TDOCUMENTO_PROFESIONAL";
				
				}

				
			    public String DOCUMENTO_PROFESIONAL;

				public String getDOCUMENTO_PROFESIONAL () {
					return this.DOCUMENTO_PROFESIONAL;
				}

				public Boolean DOCUMENTO_PROFESIONALIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_PROFESIONALLength(){
				    return 40;
				}
				public Integer DOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String DOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_PROFESIONALComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "DOCUMENTO_PROFESIONAL";
				
				}

				
			    public String ESPECIALIDAD;

				public String getESPECIALIDAD () {
					return this.ESPECIALIDAD;
				}

				public Boolean ESPECIALIDADIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADLength(){
				    return 500;
				}
				public Integer ESPECIALIDADPrecision(){
				    return 0;
				}
				public String ESPECIALIDADDefault(){
				
					return null;
				
				}
				public String ESPECIALIDADComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADOriginalDbColumnName(){
				
					return "ESPECIALIDAD";
				
				}

				
			    public String TDOCUMENTO_PACIENTE;

				public String getTDOCUMENTO_PACIENTE () {
					return this.TDOCUMENTO_PACIENTE;
				}

				public Boolean TDOCUMENTO_PACIENTEIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_PACIENTEIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_PACIENTELength(){
				    return 5;
				}
				public Integer TDOCUMENTO_PACIENTEPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_PACIENTEDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_PACIENTEComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_PACIENTEPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_PACIENTEOriginalDbColumnName(){
				
					return "TDOCUMENTO_PACIENTE";
				
				}

				
			    public String DOCUMENTO_PACIENTE;

				public String getDOCUMENTO_PACIENTE () {
					return this.DOCUMENTO_PACIENTE;
				}

				public Boolean DOCUMENTO_PACIENTEIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_PACIENTEIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_PACIENTELength(){
				    return 40;
				}
				public Integer DOCUMENTO_PACIENTEPrecision(){
				    return 0;
				}
				public String DOCUMENTO_PACIENTEDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_PACIENTEComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_PACIENTEPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_PACIENTEOriginalDbColumnName(){
				
					return "DOCUMENTO_PACIENTE";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 100;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 100;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 100;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 100;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String GENERO;

				public String getGENERO () {
					return this.GENERO;
				}

				public Boolean GENEROIsNullable(){
				    return true;
				}
				public Boolean GENEROIsKey(){
				    return false;
				}
				public Integer GENEROLength(){
				    return 20;
				}
				public Integer GENEROPrecision(){
				    return 0;
				}
				public String GENERODefault(){
				
					return null;
				
				}
				public String GENEROComment(){
				
				    return "";
				
				}
				public String GENEROPattern(){
				
					return "";
				
				}
				public String GENEROOriginalDbColumnName(){
				
					return "GENERO";
				
				}

				
			    public String FECHA_NACIMIENTO;

				public String getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return 10;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return 0;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public String PESO;

				public String getPESO () {
					return this.PESO;
				}

				public Boolean PESOIsNullable(){
				    return true;
				}
				public Boolean PESOIsKey(){
				    return false;
				}
				public Integer PESOLength(){
				    return 0;
				}
				public Integer PESOPrecision(){
				    return 0;
				}
				public String PESODefault(){
				
					return null;
				
				}
				public String PESOComment(){
				
				    return "";
				
				}
				public String PESOPattern(){
				
					return "";
				
				}
				public String PESOOriginalDbColumnName(){
				
					return "PESO";
				
				}

				
			    public String TALLA;

				public String getTALLA () {
					return this.TALLA;
				}

				public Boolean TALLAIsNullable(){
				    return true;
				}
				public Boolean TALLAIsKey(){
				    return false;
				}
				public Integer TALLALength(){
				    return 0;
				}
				public Integer TALLAPrecision(){
				    return 0;
				}
				public String TALLADefault(){
				
					return null;
				
				}
				public String TALLAComment(){
				
				    return "";
				
				}
				public String TALLAPattern(){
				
					return "";
				
				}
				public String TALLAOriginalDbColumnName(){
				
					return "TALLA";
				
				}

				
			    public BigDecimal EDAD_A_OS;

				public BigDecimal getEDAD_A_OS () {
					return this.EDAD_A_OS;
				}

				public Boolean EDAD_A_OSIsNullable(){
				    return true;
				}
				public Boolean EDAD_A_OSIsKey(){
				    return false;
				}
				public Integer EDAD_A_OSLength(){
				    return 0;
				}
				public Integer EDAD_A_OSPrecision(){
				    return 0;
				}
				public String EDAD_A_OSDefault(){
				
					return "";
				
				}
				public String EDAD_A_OSComment(){
				
				    return "";
				
				}
				public String EDAD_A_OSPattern(){
				
					return "";
				
				}
				public String EDAD_A_OSOriginalDbColumnName(){
				
					return "EDAD_A?OS";
				
				}

				
			    public BigDecimal EDAD_MESES;

				public BigDecimal getEDAD_MESES () {
					return this.EDAD_MESES;
				}

				public Boolean EDAD_MESESIsNullable(){
				    return true;
				}
				public Boolean EDAD_MESESIsKey(){
				    return false;
				}
				public Integer EDAD_MESESLength(){
				    return 0;
				}
				public Integer EDAD_MESESPrecision(){
				    return 0;
				}
				public String EDAD_MESESDefault(){
				
					return "";
				
				}
				public String EDAD_MESESComment(){
				
				    return "";
				
				}
				public String EDAD_MESESPattern(){
				
					return "";
				
				}
				public String EDAD_MESESOriginalDbColumnName(){
				
					return "EDAD_MESES";
				
				}

				
			    public String GRADO;

				public String getGRADO () {
					return this.GRADO;
				}

				public Boolean GRADOIsNullable(){
				    return true;
				}
				public Boolean GRADOIsKey(){
				    return false;
				}
				public Integer GRADOLength(){
				    return 100;
				}
				public Integer GRADOPrecision(){
				    return 0;
				}
				public String GRADODefault(){
				
					return null;
				
				}
				public String GRADOComment(){
				
				    return "";
				
				}
				public String GRADOPattern(){
				
					return "";
				
				}
				public String GRADOOriginalDbColumnName(){
				
					return "GRADO";
				
				}

				
			    public String CLASEGRD;

				public String getCLASEGRD () {
					return this.CLASEGRD;
				}

				public Boolean CLASEGRDIsNullable(){
				    return true;
				}
				public Boolean CLASEGRDIsKey(){
				    return false;
				}
				public Integer CLASEGRDLength(){
				    return 50;
				}
				public Integer CLASEGRDPrecision(){
				    return 0;
				}
				public String CLASEGRDDefault(){
				
					return null;
				
				}
				public String CLASEGRDComment(){
				
				    return "";
				
				}
				public String CLASEGRDPattern(){
				
					return "";
				
				}
				public String CLASEGRDOriginalDbColumnName(){
				
					return "CLASEGRD";
				
				}

				
			    public String TIPO_USUARIO;

				public String getTIPO_USUARIO () {
					return this.TIPO_USUARIO;
				}

				public Boolean TIPO_USUARIOIsNullable(){
				    return true;
				}
				public Boolean TIPO_USUARIOIsKey(){
				    return false;
				}
				public Integer TIPO_USUARIOLength(){
				    return 100;
				}
				public Integer TIPO_USUARIOPrecision(){
				    return 0;
				}
				public String TIPO_USUARIODefault(){
				
					return null;
				
				}
				public String TIPO_USUARIOComment(){
				
				    return "";
				
				}
				public String TIPO_USUARIOPattern(){
				
					return "";
				
				}
				public String TIPO_USUARIOOriginalDbColumnName(){
				
					return "TIPO_USUARIO";
				
				}

				
			    public String FUERZA_ADSCRIPCION;

				public String getFUERZA_ADSCRIPCION () {
					return this.FUERZA_ADSCRIPCION;
				}

				public Boolean FUERZA_ADSCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean FUERZA_ADSCRIPCIONIsKey(){
				    return false;
				}
				public Integer FUERZA_ADSCRIPCIONLength(){
				    return 50;
				}
				public Integer FUERZA_ADSCRIPCIONPrecision(){
				    return 0;
				}
				public String FUERZA_ADSCRIPCIONDefault(){
				
					return null;
				
				}
				public String FUERZA_ADSCRIPCIONComment(){
				
				    return "";
				
				}
				public String FUERZA_ADSCRIPCIONPattern(){
				
					return "";
				
				}
				public String FUERZA_ADSCRIPCIONOriginalDbColumnName(){
				
					return "FUERZA_ADSCRIPCION";
				
				}

				
			    public String ESM_ADSCRIPCION;

				public String getESM_ADSCRIPCION () {
					return this.ESM_ADSCRIPCION;
				}

				public Boolean ESM_ADSCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean ESM_ADSCRIPCIONIsKey(){
				    return false;
				}
				public Integer ESM_ADSCRIPCIONLength(){
				    return 2000;
				}
				public Integer ESM_ADSCRIPCIONPrecision(){
				    return 0;
				}
				public String ESM_ADSCRIPCIONDefault(){
				
					return null;
				
				}
				public String ESM_ADSCRIPCIONComment(){
				
				    return "";
				
				}
				public String ESM_ADSCRIPCIONPattern(){
				
					return "";
				
				}
				public String ESM_ADSCRIPCIONOriginalDbColumnName(){
				
					return "ESM_ADSCRIPCION";
				
				}

				
			    public String FECHA_CONSULTA;

				public String getFECHA_CONSULTA () {
					return this.FECHA_CONSULTA;
				}

				public Boolean FECHA_CONSULTAIsNullable(){
				    return true;
				}
				public Boolean FECHA_CONSULTAIsKey(){
				    return false;
				}
				public Integer FECHA_CONSULTALength(){
				    return 19;
				}
				public Integer FECHA_CONSULTAPrecision(){
				    return 0;
				}
				public String FECHA_CONSULTADefault(){
				
					return null;
				
				}
				public String FECHA_CONSULTAComment(){
				
				    return "";
				
				}
				public String FECHA_CONSULTAPattern(){
				
					return "";
				
				}
				public String FECHA_CONSULTAOriginalDbColumnName(){
				
					return "FECHA_CONSULTA";
				
				}

				
			    public String CUPS;

				public String getCUPS () {
					return this.CUPS;
				}

				public Boolean CUPSIsNullable(){
				    return true;
				}
				public Boolean CUPSIsKey(){
				    return false;
				}
				public Integer CUPSLength(){
				    return 0;
				}
				public Integer CUPSPrecision(){
				    return 0;
				}
				public String CUPSDefault(){
				
					return null;
				
				}
				public String CUPSComment(){
				
				    return "";
				
				}
				public String CUPSPattern(){
				
					return "";
				
				}
				public String CUPSOriginalDbColumnName(){
				
					return "CUPS";
				
				}

				
			    public BigDecimal FINALIDAD_CONSULTA;

				public BigDecimal getFINALIDAD_CONSULTA () {
					return this.FINALIDAD_CONSULTA;
				}

				public Boolean FINALIDAD_CONSULTAIsNullable(){
				    return true;
				}
				public Boolean FINALIDAD_CONSULTAIsKey(){
				    return false;
				}
				public Integer FINALIDAD_CONSULTALength(){
				    return 0;
				}
				public Integer FINALIDAD_CONSULTAPrecision(){
				    return 0;
				}
				public String FINALIDAD_CONSULTADefault(){
				
					return null;
				
				}
				public String FINALIDAD_CONSULTAComment(){
				
				    return "";
				
				}
				public String FINALIDAD_CONSULTAPattern(){
				
					return "";
				
				}
				public String FINALIDAD_CONSULTAOriginalDbColumnName(){
				
					return "FINALIDAD_CONSULTA";
				
				}

				
			    public BigDecimal CAUSA_EXTERNA;

				public BigDecimal getCAUSA_EXTERNA () {
					return this.CAUSA_EXTERNA;
				}

				public Boolean CAUSA_EXTERNAIsNullable(){
				    return true;
				}
				public Boolean CAUSA_EXTERNAIsKey(){
				    return false;
				}
				public Integer CAUSA_EXTERNALength(){
				    return 0;
				}
				public Integer CAUSA_EXTERNAPrecision(){
				    return 0;
				}
				public String CAUSA_EXTERNADefault(){
				
					return null;
				
				}
				public String CAUSA_EXTERNAComment(){
				
				    return "";
				
				}
				public String CAUSA_EXTERNAPattern(){
				
					return "";
				
				}
				public String CAUSA_EXTERNAOriginalDbColumnName(){
				
					return "CAUSA_EXTERNA";
				
				}

				
			    public String AMBITO;

				public String getAMBITO () {
					return this.AMBITO;
				}

				public Boolean AMBITOIsNullable(){
				    return true;
				}
				public Boolean AMBITOIsKey(){
				    return false;
				}
				public Integer AMBITOLength(){
				    return 0;
				}
				public Integer AMBITOPrecision(){
				    return 0;
				}
				public String AMBITODefault(){
				
					return null;
				
				}
				public String AMBITOComment(){
				
				    return "";
				
				}
				public String AMBITOPattern(){
				
					return "";
				
				}
				public String AMBITOOriginalDbColumnName(){
				
					return "AMBITO";
				
				}

				
			    public String DIAG_PRINCIPAL;

				public String getDIAG_PRINCIPAL () {
					return this.DIAG_PRINCIPAL;
				}

				public Boolean DIAG_PRINCIPALIsNullable(){
				    return true;
				}
				public Boolean DIAG_PRINCIPALIsKey(){
				    return false;
				}
				public Integer DIAG_PRINCIPALLength(){
				    return 0;
				}
				public Integer DIAG_PRINCIPALPrecision(){
				    return 0;
				}
				public String DIAG_PRINCIPALDefault(){
				
					return null;
				
				}
				public String DIAG_PRINCIPALComment(){
				
				    return "";
				
				}
				public String DIAG_PRINCIPALPattern(){
				
					return "";
				
				}
				public String DIAG_PRINCIPALOriginalDbColumnName(){
				
					return "DIAG_PRINCIPAL";
				
				}

				
			    public String CODDIAGNOSTICO1;

				public String getCODDIAGNOSTICO1 () {
					return this.CODDIAGNOSTICO1;
				}

				public Boolean CODDIAGNOSTICO1IsNullable(){
				    return true;
				}
				public Boolean CODDIAGNOSTICO1IsKey(){
				    return false;
				}
				public Integer CODDIAGNOSTICO1Length(){
				    return 0;
				}
				public Integer CODDIAGNOSTICO1Precision(){
				    return 0;
				}
				public String CODDIAGNOSTICO1Default(){
				
					return null;
				
				}
				public String CODDIAGNOSTICO1Comment(){
				
				    return "";
				
				}
				public String CODDIAGNOSTICO1Pattern(){
				
					return "";
				
				}
				public String CODDIAGNOSTICO1OriginalDbColumnName(){
				
					return "CODDIAGNOSTICO1";
				
				}

				
			    public String CODDIAGNOSTICO2;

				public String getCODDIAGNOSTICO2 () {
					return this.CODDIAGNOSTICO2;
				}

				public Boolean CODDIAGNOSTICO2IsNullable(){
				    return true;
				}
				public Boolean CODDIAGNOSTICO2IsKey(){
				    return false;
				}
				public Integer CODDIAGNOSTICO2Length(){
				    return 0;
				}
				public Integer CODDIAGNOSTICO2Precision(){
				    return 0;
				}
				public String CODDIAGNOSTICO2Default(){
				
					return null;
				
				}
				public String CODDIAGNOSTICO2Comment(){
				
				    return "";
				
				}
				public String CODDIAGNOSTICO2Pattern(){
				
					return "";
				
				}
				public String CODDIAGNOSTICO2OriginalDbColumnName(){
				
					return "CODDIAGNOSTICO2";
				
				}

				
			    public String CODDIAGNOSTICO3;

				public String getCODDIAGNOSTICO3 () {
					return this.CODDIAGNOSTICO3;
				}

				public Boolean CODDIAGNOSTICO3IsNullable(){
				    return true;
				}
				public Boolean CODDIAGNOSTICO3IsKey(){
				    return false;
				}
				public Integer CODDIAGNOSTICO3Length(){
				    return 0;
				}
				public Integer CODDIAGNOSTICO3Precision(){
				    return 0;
				}
				public String CODDIAGNOSTICO3Default(){
				
					return null;
				
				}
				public String CODDIAGNOSTICO3Comment(){
				
				    return "";
				
				}
				public String CODDIAGNOSTICO3Pattern(){
				
					return "";
				
				}
				public String CODDIAGNOSTICO3OriginalDbColumnName(){
				
					return "CODDIAGNOSTICO3";
				
				}

				
			    public String TIPO_DIAGNOSTICO_PPAL;

				public String getTIPO_DIAGNOSTICO_PPAL () {
					return this.TIPO_DIAGNOSTICO_PPAL;
				}

				public Boolean TIPO_DIAGNOSTICO_PPALIsNullable(){
				    return true;
				}
				public Boolean TIPO_DIAGNOSTICO_PPALIsKey(){
				    return false;
				}
				public Integer TIPO_DIAGNOSTICO_PPALLength(){
				    return 0;
				}
				public Integer TIPO_DIAGNOSTICO_PPALPrecision(){
				    return 0;
				}
				public String TIPO_DIAGNOSTICO_PPALDefault(){
				
					return null;
				
				}
				public String TIPO_DIAGNOSTICO_PPALComment(){
				
				    return "";
				
				}
				public String TIPO_DIAGNOSTICO_PPALPattern(){
				
					return "";
				
				}
				public String TIPO_DIAGNOSTICO_PPALOriginalDbColumnName(){
				
					return "TIPO_DIAGNOSTICO_PPAL";
				
				}

				
			    public String CUMPLIMIENTO_CITA;

				public String getCUMPLIMIENTO_CITA () {
					return this.CUMPLIMIENTO_CITA;
				}

				public Boolean CUMPLIMIENTO_CITAIsNullable(){
				    return true;
				}
				public Boolean CUMPLIMIENTO_CITAIsKey(){
				    return false;
				}
				public Integer CUMPLIMIENTO_CITALength(){
				    return 2;
				}
				public Integer CUMPLIMIENTO_CITAPrecision(){
				    return 0;
				}
				public String CUMPLIMIENTO_CITADefault(){
				
					return null;
				
				}
				public String CUMPLIMIENTO_CITAComment(){
				
				    return "";
				
				}
				public String CUMPLIMIENTO_CITAPattern(){
				
					return "";
				
				}
				public String CUMPLIMIENTO_CITAOriginalDbColumnName(){
				
					return "CUMPLIMIENTO_CITA";
				
				}

				
			    public String TIPO_GENERACION;

				public String getTIPO_GENERACION () {
					return this.TIPO_GENERACION;
				}

				public Boolean TIPO_GENERACIONIsNullable(){
				    return true;
				}
				public Boolean TIPO_GENERACIONIsKey(){
				    return false;
				}
				public Integer TIPO_GENERACIONLength(){
				    return 30;
				}
				public Integer TIPO_GENERACIONPrecision(){
				    return 0;
				}
				public String TIPO_GENERACIONDefault(){
				
					return null;
				
				}
				public String TIPO_GENERACIONComment(){
				
				    return "";
				
				}
				public String TIPO_GENERACIONPattern(){
				
					return "";
				
				}
				public String TIPO_GENERACIONOriginalDbColumnName(){
				
					return "TIPO_GENERACION";
				
				}

				
			    public String TRIPS;

				public String getTRIPS () {
					return this.TRIPS;
				}

				public Boolean TRIPSIsNullable(){
				    return true;
				}
				public Boolean TRIPSIsKey(){
				    return false;
				}
				public Integer TRIPSLength(){
				    return 7;
				}
				public Integer TRIPSPrecision(){
				    return 0;
				}
				public String TRIPSDefault(){
				
					return null;
				
				}
				public String TRIPSComment(){
				
				    return "";
				
				}
				public String TRIPSPattern(){
				
					return "";
				
				}
				public String TRIPSOriginalDbColumnName(){
				
					return "TRIPS";
				
				}

				
			    public String IMC_VALOR;

				public String getIMC_VALOR () {
					return this.IMC_VALOR;
				}

				public Boolean IMC_VALORIsNullable(){
				    return true;
				}
				public Boolean IMC_VALORIsKey(){
				    return false;
				}
				public Integer IMC_VALORLength(){
				    return 0;
				}
				public Integer IMC_VALORPrecision(){
				    return 0;
				}
				public String IMC_VALORDefault(){
				
					return null;
				
				}
				public String IMC_VALORComment(){
				
				    return "";
				
				}
				public String IMC_VALORPattern(){
				
					return "";
				
				}
				public String IMC_VALOROriginalDbColumnName(){
				
					return "IMC_VALOR";
				
				}

				
			    public String PABDOMINAL_VALOR;

				public String getPABDOMINAL_VALOR () {
					return this.PABDOMINAL_VALOR;
				}

				public Boolean PABDOMINAL_VALORIsNullable(){
				    return true;
				}
				public Boolean PABDOMINAL_VALORIsKey(){
				    return false;
				}
				public Integer PABDOMINAL_VALORLength(){
				    return 0;
				}
				public Integer PABDOMINAL_VALORPrecision(){
				    return 0;
				}
				public String PABDOMINAL_VALORDefault(){
				
					return null;
				
				}
				public String PABDOMINAL_VALORComment(){
				
				    return "";
				
				}
				public String PABDOMINAL_VALORPattern(){
				
					return "";
				
				}
				public String PABDOMINAL_VALOROriginalDbColumnName(){
				
					return "PABDOMINAL_VALOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length) {
				if(length < 1024 && commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length == 0) {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[1024];
				} else {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length);
			strReturn = new String(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length) {
				if(length < 1024 && commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length == 0) {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[1024];
				} else {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length);
			strReturn = new String(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS) {

        	try {

        		int length = 0;
		
					this.FUERZA_PACIENTE = readString(dis);
					
					this.FUERZA_ADS_PACIENTE = readString(dis);
					
					this.CODIGO_ESM_ADS_PACIENTE = readString(dis);
					
					this.SIGLA_ESM_ADS_PACIENTE = readString(dis);
					
					this.NOMBRE_ESM_ADS_PACIENTE = readString(dis);
					
					this.FUERZA_ESM_ATENCION = readString(dis);
					
					this.CODIGO_DEL_PRESTADOR = readString(dis);
					
					this.SIGLA_ESM_ATENCION = readString(dis);
					
					this.NOMBRE_ESM_ATENCION = readString(dis);
					
					this.DEPARTAMENTO = readString(dis);
					
					this.MUNICIPIO = readString(dis);
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
					this.ESPECIALIDAD = readString(dis);
					
					this.TDOCUMENTO_PACIENTE = readString(dis);
					
					this.DOCUMENTO_PACIENTE = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.GENERO = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.PESO = readString(dis);
					
					this.TALLA = readString(dis);
					
						this.EDAD_A_OS = (BigDecimal) dis.readObject();
					
						this.EDAD_MESES = (BigDecimal) dis.readObject();
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
					this.FUERZA_ADSCRIPCION = readString(dis);
					
					this.ESM_ADSCRIPCION = readString(dis);
					
					this.FECHA_CONSULTA = readString(dis);
					
					this.CUPS = readString(dis);
					
						this.FINALIDAD_CONSULTA = (BigDecimal) dis.readObject();
					
						this.CAUSA_EXTERNA = (BigDecimal) dis.readObject();
					
					this.AMBITO = readString(dis);
					
					this.DIAG_PRINCIPAL = readString(dis);
					
					this.CODDIAGNOSTICO1 = readString(dis);
					
					this.CODDIAGNOSTICO2 = readString(dis);
					
					this.CODDIAGNOSTICO3 = readString(dis);
					
					this.TIPO_DIAGNOSTICO_PPAL = readString(dis);
					
					this.CUMPLIMIENTO_CITA = readString(dis);
					
					this.TIPO_GENERACION = readString(dis);
					
					this.TRIPS = readString(dis);
					
					this.IMC_VALOR = readString(dis);
					
					this.PABDOMINAL_VALOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS) {

        	try {

        		int length = 0;
		
					this.FUERZA_PACIENTE = readString(dis);
					
					this.FUERZA_ADS_PACIENTE = readString(dis);
					
					this.CODIGO_ESM_ADS_PACIENTE = readString(dis);
					
					this.SIGLA_ESM_ADS_PACIENTE = readString(dis);
					
					this.NOMBRE_ESM_ADS_PACIENTE = readString(dis);
					
					this.FUERZA_ESM_ATENCION = readString(dis);
					
					this.CODIGO_DEL_PRESTADOR = readString(dis);
					
					this.SIGLA_ESM_ATENCION = readString(dis);
					
					this.NOMBRE_ESM_ATENCION = readString(dis);
					
					this.DEPARTAMENTO = readString(dis);
					
					this.MUNICIPIO = readString(dis);
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
					this.ESPECIALIDAD = readString(dis);
					
					this.TDOCUMENTO_PACIENTE = readString(dis);
					
					this.DOCUMENTO_PACIENTE = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.GENERO = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.PESO = readString(dis);
					
					this.TALLA = readString(dis);
					
						this.EDAD_A_OS = (BigDecimal) dis.readObject();
					
						this.EDAD_MESES = (BigDecimal) dis.readObject();
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
					this.FUERZA_ADSCRIPCION = readString(dis);
					
					this.ESM_ADSCRIPCION = readString(dis);
					
					this.FECHA_CONSULTA = readString(dis);
					
					this.CUPS = readString(dis);
					
						this.FINALIDAD_CONSULTA = (BigDecimal) dis.readObject();
					
						this.CAUSA_EXTERNA = (BigDecimal) dis.readObject();
					
					this.AMBITO = readString(dis);
					
					this.DIAG_PRINCIPAL = readString(dis);
					
					this.CODDIAGNOSTICO1 = readString(dis);
					
					this.CODDIAGNOSTICO2 = readString(dis);
					
					this.CODDIAGNOSTICO3 = readString(dis);
					
					this.TIPO_DIAGNOSTICO_PPAL = readString(dis);
					
					this.CUMPLIMIENTO_CITA = readString(dis);
					
					this.TIPO_GENERACION = readString(dis);
					
					this.TRIPS = readString(dis);
					
					this.IMC_VALOR = readString(dis);
					
					this.PABDOMINAL_VALOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FUERZA_PACIENTE,dos);
					
					// String
				
						writeString(this.FUERZA_ADS_PACIENTE,dos);
					
					// String
				
						writeString(this.CODIGO_ESM_ADS_PACIENTE,dos);
					
					// String
				
						writeString(this.SIGLA_ESM_ADS_PACIENTE,dos);
					
					// String
				
						writeString(this.NOMBRE_ESM_ADS_PACIENTE,dos);
					
					// String
				
						writeString(this.FUERZA_ESM_ATENCION,dos);
					
					// String
				
						writeString(this.CODIGO_DEL_PRESTADOR,dos);
					
					// String
				
						writeString(this.SIGLA_ESM_ATENCION,dos);
					
					// String
				
						writeString(this.NOMBRE_ESM_ATENCION,dos);
					
					// String
				
						writeString(this.DEPARTAMENTO,dos);
					
					// String
				
						writeString(this.MUNICIPIO,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_PACIENTE,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PACIENTE,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.GENERO,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.PESO,dos);
					
					// String
				
						writeString(this.TALLA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD_A_OS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD_MESES);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// String
				
						writeString(this.FUERZA_ADSCRIPCION,dos);
					
					// String
				
						writeString(this.ESM_ADSCRIPCION,dos);
					
					// String
				
						writeString(this.FECHA_CONSULTA,dos);
					
					// String
				
						writeString(this.CUPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FINALIDAD_CONSULTA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CAUSA_EXTERNA);
					
					// String
				
						writeString(this.AMBITO,dos);
					
					// String
				
						writeString(this.DIAG_PRINCIPAL,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO1,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO2,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO3,dos);
					
					// String
				
						writeString(this.TIPO_DIAGNOSTICO_PPAL,dos);
					
					// String
				
						writeString(this.CUMPLIMIENTO_CITA,dos);
					
					// String
				
						writeString(this.TIPO_GENERACION,dos);
					
					// String
				
						writeString(this.TRIPS,dos);
					
					// String
				
						writeString(this.IMC_VALOR,dos);
					
					// String
				
						writeString(this.PABDOMINAL_VALOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FUERZA_PACIENTE,dos);
					
					// String
				
						writeString(this.FUERZA_ADS_PACIENTE,dos);
					
					// String
				
						writeString(this.CODIGO_ESM_ADS_PACIENTE,dos);
					
					// String
				
						writeString(this.SIGLA_ESM_ADS_PACIENTE,dos);
					
					// String
				
						writeString(this.NOMBRE_ESM_ADS_PACIENTE,dos);
					
					// String
				
						writeString(this.FUERZA_ESM_ATENCION,dos);
					
					// String
				
						writeString(this.CODIGO_DEL_PRESTADOR,dos);
					
					// String
				
						writeString(this.SIGLA_ESM_ATENCION,dos);
					
					// String
				
						writeString(this.NOMBRE_ESM_ATENCION,dos);
					
					// String
				
						writeString(this.DEPARTAMENTO,dos);
					
					// String
				
						writeString(this.MUNICIPIO,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_PACIENTE,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PACIENTE,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.GENERO,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.PESO,dos);
					
					// String
				
						writeString(this.TALLA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD_A_OS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD_MESES);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// String
				
						writeString(this.FUERZA_ADSCRIPCION,dos);
					
					// String
				
						writeString(this.ESM_ADSCRIPCION,dos);
					
					// String
				
						writeString(this.FECHA_CONSULTA,dos);
					
					// String
				
						writeString(this.CUPS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FINALIDAD_CONSULTA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CAUSA_EXTERNA);
					
					// String
				
						writeString(this.AMBITO,dos);
					
					// String
				
						writeString(this.DIAG_PRINCIPAL,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO1,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO2,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO3,dos);
					
					// String
				
						writeString(this.TIPO_DIAGNOSTICO_PPAL,dos);
					
					// String
				
						writeString(this.CUMPLIMIENTO_CITA,dos);
					
					// String
				
						writeString(this.TIPO_GENERACION,dos);
					
					// String
				
						writeString(this.TRIPS,dos);
					
					// String
				
						writeString(this.IMC_VALOR,dos);
					
					// String
				
						writeString(this.PABDOMINAL_VALOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FUERZA_PACIENTE="+FUERZA_PACIENTE);
		sb.append(",FUERZA_ADS_PACIENTE="+FUERZA_ADS_PACIENTE);
		sb.append(",CODIGO_ESM_ADS_PACIENTE="+CODIGO_ESM_ADS_PACIENTE);
		sb.append(",SIGLA_ESM_ADS_PACIENTE="+SIGLA_ESM_ADS_PACIENTE);
		sb.append(",NOMBRE_ESM_ADS_PACIENTE="+NOMBRE_ESM_ADS_PACIENTE);
		sb.append(",FUERZA_ESM_ATENCION="+FUERZA_ESM_ATENCION);
		sb.append(",CODIGO_DEL_PRESTADOR="+CODIGO_DEL_PRESTADOR);
		sb.append(",SIGLA_ESM_ATENCION="+SIGLA_ESM_ATENCION);
		sb.append(",NOMBRE_ESM_ATENCION="+NOMBRE_ESM_ATENCION);
		sb.append(",DEPARTAMENTO="+DEPARTAMENTO);
		sb.append(",MUNICIPIO="+MUNICIPIO);
		sb.append(",TDOCUMENTO_PROFESIONAL="+TDOCUMENTO_PROFESIONAL);
		sb.append(",DOCUMENTO_PROFESIONAL="+DOCUMENTO_PROFESIONAL);
		sb.append(",ESPECIALIDAD="+ESPECIALIDAD);
		sb.append(",TDOCUMENTO_PACIENTE="+TDOCUMENTO_PACIENTE);
		sb.append(",DOCUMENTO_PACIENTE="+DOCUMENTO_PACIENTE);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",GENERO="+GENERO);
		sb.append(",FECHA_NACIMIENTO="+FECHA_NACIMIENTO);
		sb.append(",PESO="+PESO);
		sb.append(",TALLA="+TALLA);
		sb.append(",EDAD_A_OS="+String.valueOf(EDAD_A_OS));
		sb.append(",EDAD_MESES="+String.valueOf(EDAD_MESES));
		sb.append(",GRADO="+GRADO);
		sb.append(",CLASEGRD="+CLASEGRD);
		sb.append(",TIPO_USUARIO="+TIPO_USUARIO);
		sb.append(",FUERZA_ADSCRIPCION="+FUERZA_ADSCRIPCION);
		sb.append(",ESM_ADSCRIPCION="+ESM_ADSCRIPCION);
		sb.append(",FECHA_CONSULTA="+FECHA_CONSULTA);
		sb.append(",CUPS="+CUPS);
		sb.append(",FINALIDAD_CONSULTA="+String.valueOf(FINALIDAD_CONSULTA));
		sb.append(",CAUSA_EXTERNA="+String.valueOf(CAUSA_EXTERNA));
		sb.append(",AMBITO="+AMBITO);
		sb.append(",DIAG_PRINCIPAL="+DIAG_PRINCIPAL);
		sb.append(",CODDIAGNOSTICO1="+CODDIAGNOSTICO1);
		sb.append(",CODDIAGNOSTICO2="+CODDIAGNOSTICO2);
		sb.append(",CODDIAGNOSTICO3="+CODDIAGNOSTICO3);
		sb.append(",TIPO_DIAGNOSTICO_PPAL="+TIPO_DIAGNOSTICO_PPAL);
		sb.append(",CUMPLIMIENTO_CITA="+CUMPLIMIENTO_CITA);
		sb.append(",TIPO_GENERACION="+TIPO_GENERACION);
		sb.append(",TRIPS="+TRIPS);
		sb.append(",IMC_VALOR="+IMC_VALOR);
		sb.append(",PABDOMINAL_VALOR="+PABDOMINAL_VALOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_3Struct implements routines.system.IPersistableRow<after_tDBInput_3Struct> {
    final static byte[] commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[0];
    static byte[] commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[0];

	
			    public String FUERZA_PACIENTE;

				public String getFUERZA_PACIENTE () {
					return this.FUERZA_PACIENTE;
				}

				public Boolean FUERZA_PACIENTEIsNullable(){
				    return true;
				}
				public Boolean FUERZA_PACIENTEIsKey(){
				    return false;
				}
				public Integer FUERZA_PACIENTELength(){
				    return 50;
				}
				public Integer FUERZA_PACIENTEPrecision(){
				    return 0;
				}
				public String FUERZA_PACIENTEDefault(){
				
					return null;
				
				}
				public String FUERZA_PACIENTEComment(){
				
				    return "";
				
				}
				public String FUERZA_PACIENTEPattern(){
				
					return "";
				
				}
				public String FUERZA_PACIENTEOriginalDbColumnName(){
				
					return "FUERZA_PACIENTE";
				
				}

				
			    public String FUERZA_ADS_PACIENTE;

				public String getFUERZA_ADS_PACIENTE () {
					return this.FUERZA_ADS_PACIENTE;
				}

				public Boolean FUERZA_ADS_PACIENTEIsNullable(){
				    return true;
				}
				public Boolean FUERZA_ADS_PACIENTEIsKey(){
				    return false;
				}
				public Integer FUERZA_ADS_PACIENTELength(){
				    return 50;
				}
				public Integer FUERZA_ADS_PACIENTEPrecision(){
				    return 0;
				}
				public String FUERZA_ADS_PACIENTEDefault(){
				
					return null;
				
				}
				public String FUERZA_ADS_PACIENTEComment(){
				
				    return "";
				
				}
				public String FUERZA_ADS_PACIENTEPattern(){
				
					return "";
				
				}
				public String FUERZA_ADS_PACIENTEOriginalDbColumnName(){
				
					return "FUERZA_ADS_PACIENTE";
				
				}

				
			    public String CODIGO_ESM_ADS_PACIENTE;

				public String getCODIGO_ESM_ADS_PACIENTE () {
					return this.CODIGO_ESM_ADS_PACIENTE;
				}

				public Boolean CODIGO_ESM_ADS_PACIENTEIsNullable(){
				    return true;
				}
				public Boolean CODIGO_ESM_ADS_PACIENTEIsKey(){
				    return false;
				}
				public Integer CODIGO_ESM_ADS_PACIENTELength(){
				    return 100;
				}
				public Integer CODIGO_ESM_ADS_PACIENTEPrecision(){
				    return 0;
				}
				public String CODIGO_ESM_ADS_PACIENTEDefault(){
				
					return null;
				
				}
				public String CODIGO_ESM_ADS_PACIENTEComment(){
				
				    return "";
				
				}
				public String CODIGO_ESM_ADS_PACIENTEPattern(){
				
					return "";
				
				}
				public String CODIGO_ESM_ADS_PACIENTEOriginalDbColumnName(){
				
					return "CODIGO_ESM_ADS_PACIENTE";
				
				}

				
			    public String SIGLA_ESM_ADS_PACIENTE;

				public String getSIGLA_ESM_ADS_PACIENTE () {
					return this.SIGLA_ESM_ADS_PACIENTE;
				}

				public Boolean SIGLA_ESM_ADS_PACIENTEIsNullable(){
				    return true;
				}
				public Boolean SIGLA_ESM_ADS_PACIENTEIsKey(){
				    return false;
				}
				public Integer SIGLA_ESM_ADS_PACIENTELength(){
				    return 100;
				}
				public Integer SIGLA_ESM_ADS_PACIENTEPrecision(){
				    return 0;
				}
				public String SIGLA_ESM_ADS_PACIENTEDefault(){
				
					return null;
				
				}
				public String SIGLA_ESM_ADS_PACIENTEComment(){
				
				    return "";
				
				}
				public String SIGLA_ESM_ADS_PACIENTEPattern(){
				
					return "";
				
				}
				public String SIGLA_ESM_ADS_PACIENTEOriginalDbColumnName(){
				
					return "SIGLA_ESM_ADS_PACIENTE";
				
				}

				
			    public String NOMBRE_ESM_ADS_PACIENTE;

				public String getNOMBRE_ESM_ADS_PACIENTE () {
					return this.NOMBRE_ESM_ADS_PACIENTE;
				}

				public Boolean NOMBRE_ESM_ADS_PACIENTEIsNullable(){
				    return true;
				}
				public Boolean NOMBRE_ESM_ADS_PACIENTEIsKey(){
				    return false;
				}
				public Integer NOMBRE_ESM_ADS_PACIENTELength(){
				    return 2000;
				}
				public Integer NOMBRE_ESM_ADS_PACIENTEPrecision(){
				    return 0;
				}
				public String NOMBRE_ESM_ADS_PACIENTEDefault(){
				
					return null;
				
				}
				public String NOMBRE_ESM_ADS_PACIENTEComment(){
				
				    return "";
				
				}
				public String NOMBRE_ESM_ADS_PACIENTEPattern(){
				
					return "";
				
				}
				public String NOMBRE_ESM_ADS_PACIENTEOriginalDbColumnName(){
				
					return "NOMBRE_ESM_ADS_PACIENTE";
				
				}

				
			    public String FUERZA_ESM_ATENCION;

				public String getFUERZA_ESM_ATENCION () {
					return this.FUERZA_ESM_ATENCION;
				}

				public Boolean FUERZA_ESM_ATENCIONIsNullable(){
				    return true;
				}
				public Boolean FUERZA_ESM_ATENCIONIsKey(){
				    return false;
				}
				public Integer FUERZA_ESM_ATENCIONLength(){
				    return 50;
				}
				public Integer FUERZA_ESM_ATENCIONPrecision(){
				    return 0;
				}
				public String FUERZA_ESM_ATENCIONDefault(){
				
					return null;
				
				}
				public String FUERZA_ESM_ATENCIONComment(){
				
				    return "";
				
				}
				public String FUERZA_ESM_ATENCIONPattern(){
				
					return "";
				
				}
				public String FUERZA_ESM_ATENCIONOriginalDbColumnName(){
				
					return "FUERZA_ESM_ATENCION";
				
				}

				
			    public String CODIGO_DEL_PRESTADOR;

				public String getCODIGO_DEL_PRESTADOR () {
					return this.CODIGO_DEL_PRESTADOR;
				}

				public Boolean CODIGO_DEL_PRESTADORIsNullable(){
				    return true;
				}
				public Boolean CODIGO_DEL_PRESTADORIsKey(){
				    return false;
				}
				public Integer CODIGO_DEL_PRESTADORLength(){
				    return 100;
				}
				public Integer CODIGO_DEL_PRESTADORPrecision(){
				    return 0;
				}
				public String CODIGO_DEL_PRESTADORDefault(){
				
					return null;
				
				}
				public String CODIGO_DEL_PRESTADORComment(){
				
				    return "";
				
				}
				public String CODIGO_DEL_PRESTADORPattern(){
				
					return "";
				
				}
				public String CODIGO_DEL_PRESTADOROriginalDbColumnName(){
				
					return "CODIGO_DEL_PRESTADOR";
				
				}

				
			    public String SIGLA_ESM_ATENCION;

				public String getSIGLA_ESM_ATENCION () {
					return this.SIGLA_ESM_ATENCION;
				}

				public Boolean SIGLA_ESM_ATENCIONIsNullable(){
				    return true;
				}
				public Boolean SIGLA_ESM_ATENCIONIsKey(){
				    return false;
				}
				public Integer SIGLA_ESM_ATENCIONLength(){
				    return 100;
				}
				public Integer SIGLA_ESM_ATENCIONPrecision(){
				    return 0;
				}
				public String SIGLA_ESM_ATENCIONDefault(){
				
					return null;
				
				}
				public String SIGLA_ESM_ATENCIONComment(){
				
				    return "";
				
				}
				public String SIGLA_ESM_ATENCIONPattern(){
				
					return "";
				
				}
				public String SIGLA_ESM_ATENCIONOriginalDbColumnName(){
				
					return "SIGLA_ESM_ATENCION";
				
				}

				
			    public String NOMBRE_ESM_ATENCION;

				public String getNOMBRE_ESM_ATENCION () {
					return this.NOMBRE_ESM_ATENCION;
				}

				public Boolean NOMBRE_ESM_ATENCIONIsNullable(){
				    return true;
				}
				public Boolean NOMBRE_ESM_ATENCIONIsKey(){
				    return false;
				}
				public Integer NOMBRE_ESM_ATENCIONLength(){
				    return 2000;
				}
				public Integer NOMBRE_ESM_ATENCIONPrecision(){
				    return 0;
				}
				public String NOMBRE_ESM_ATENCIONDefault(){
				
					return null;
				
				}
				public String NOMBRE_ESM_ATENCIONComment(){
				
				    return "";
				
				}
				public String NOMBRE_ESM_ATENCIONPattern(){
				
					return "";
				
				}
				public String NOMBRE_ESM_ATENCIONOriginalDbColumnName(){
				
					return "NOMBRE_ESM_ATENCION";
				
				}

				
			    public String DEPARTAMENTO;

				public String getDEPARTAMENTO () {
					return this.DEPARTAMENTO;
				}

				public Boolean DEPARTAMENTOIsNullable(){
				    return true;
				}
				public Boolean DEPARTAMENTOIsKey(){
				    return false;
				}
				public Integer DEPARTAMENTOLength(){
				    return 100;
				}
				public Integer DEPARTAMENTOPrecision(){
				    return 0;
				}
				public String DEPARTAMENTODefault(){
				
					return null;
				
				}
				public String DEPARTAMENTOComment(){
				
				    return "";
				
				}
				public String DEPARTAMENTOPattern(){
				
					return "";
				
				}
				public String DEPARTAMENTOOriginalDbColumnName(){
				
					return "DEPARTAMENTO";
				
				}

				
			    public String MUNICIPIO;

				public String getMUNICIPIO () {
					return this.MUNICIPIO;
				}

				public Boolean MUNICIPIOIsNullable(){
				    return true;
				}
				public Boolean MUNICIPIOIsKey(){
				    return false;
				}
				public Integer MUNICIPIOLength(){
				    return 100;
				}
				public Integer MUNICIPIOPrecision(){
				    return 0;
				}
				public String MUNICIPIODefault(){
				
					return null;
				
				}
				public String MUNICIPIOComment(){
				
				    return "";
				
				}
				public String MUNICIPIOPattern(){
				
					return "";
				
				}
				public String MUNICIPIOOriginalDbColumnName(){
				
					return "MUNICIPIO";
				
				}

				
			    public String TDOCUMENTO_PROFESIONAL;

				public String getTDOCUMENTO_PROFESIONAL () {
					return this.TDOCUMENTO_PROFESIONAL;
				}

				public Boolean TDOCUMENTO_PROFESIONALIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_PROFESIONALLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_PROFESIONALComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "TDOCUMENTO_PROFESIONAL";
				
				}

				
			    public String DOCUMENTO_PROFESIONAL;

				public String getDOCUMENTO_PROFESIONAL () {
					return this.DOCUMENTO_PROFESIONAL;
				}

				public Boolean DOCUMENTO_PROFESIONALIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_PROFESIONALLength(){
				    return 40;
				}
				public Integer DOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String DOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_PROFESIONALComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "DOCUMENTO_PROFESIONAL";
				
				}

				
			    public String ESPECIALIDAD;

				public String getESPECIALIDAD () {
					return this.ESPECIALIDAD;
				}

				public Boolean ESPECIALIDADIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADLength(){
				    return 500;
				}
				public Integer ESPECIALIDADPrecision(){
				    return 0;
				}
				public String ESPECIALIDADDefault(){
				
					return null;
				
				}
				public String ESPECIALIDADComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADOriginalDbColumnName(){
				
					return "ESPECIALIDAD";
				
				}

				
			    public String TDOCUMENTO_PACIENTE;

				public String getTDOCUMENTO_PACIENTE () {
					return this.TDOCUMENTO_PACIENTE;
				}

				public Boolean TDOCUMENTO_PACIENTEIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_PACIENTEIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_PACIENTELength(){
				    return 5;
				}
				public Integer TDOCUMENTO_PACIENTEPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_PACIENTEDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_PACIENTEComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_PACIENTEPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_PACIENTEOriginalDbColumnName(){
				
					return "TDOCUMENTO_PACIENTE";
				
				}

				
			    public String DOCUMENTO_PACIENTE;

				public String getDOCUMENTO_PACIENTE () {
					return this.DOCUMENTO_PACIENTE;
				}

				public Boolean DOCUMENTO_PACIENTEIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_PACIENTEIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_PACIENTELength(){
				    return 40;
				}
				public Integer DOCUMENTO_PACIENTEPrecision(){
				    return 0;
				}
				public String DOCUMENTO_PACIENTEDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_PACIENTEComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_PACIENTEPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_PACIENTEOriginalDbColumnName(){
				
					return "DOCUMENTO_PACIENTE";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 100;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 100;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 100;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 100;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String GENERO;

				public String getGENERO () {
					return this.GENERO;
				}

				public Boolean GENEROIsNullable(){
				    return true;
				}
				public Boolean GENEROIsKey(){
				    return false;
				}
				public Integer GENEROLength(){
				    return 20;
				}
				public Integer GENEROPrecision(){
				    return 0;
				}
				public String GENERODefault(){
				
					return null;
				
				}
				public String GENEROComment(){
				
				    return "";
				
				}
				public String GENEROPattern(){
				
					return "";
				
				}
				public String GENEROOriginalDbColumnName(){
				
					return "GENERO";
				
				}

				
			    public String FECHA_NACIMIENTO;

				public String getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return 10;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return 0;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public String PESO;

				public String getPESO () {
					return this.PESO;
				}

				public Boolean PESOIsNullable(){
				    return true;
				}
				public Boolean PESOIsKey(){
				    return false;
				}
				public Integer PESOLength(){
				    return 0;
				}
				public Integer PESOPrecision(){
				    return 0;
				}
				public String PESODefault(){
				
					return null;
				
				}
				public String PESOComment(){
				
				    return "";
				
				}
				public String PESOPattern(){
				
					return "";
				
				}
				public String PESOOriginalDbColumnName(){
				
					return "PESO";
				
				}

				
			    public String TALLA;

				public String getTALLA () {
					return this.TALLA;
				}

				public Boolean TALLAIsNullable(){
				    return true;
				}
				public Boolean TALLAIsKey(){
				    return false;
				}
				public Integer TALLALength(){
				    return 0;
				}
				public Integer TALLAPrecision(){
				    return 0;
				}
				public String TALLADefault(){
				
					return null;
				
				}
				public String TALLAComment(){
				
				    return "";
				
				}
				public String TALLAPattern(){
				
					return "";
				
				}
				public String TALLAOriginalDbColumnName(){
				
					return "TALLA";
				
				}

				
			    public BigDecimal EDAD_A_OS;

				public BigDecimal getEDAD_A_OS () {
					return this.EDAD_A_OS;
				}

				public Boolean EDAD_A_OSIsNullable(){
				    return true;
				}
				public Boolean EDAD_A_OSIsKey(){
				    return false;
				}
				public Integer EDAD_A_OSLength(){
				    return 0;
				}
				public Integer EDAD_A_OSPrecision(){
				    return 0;
				}
				public String EDAD_A_OSDefault(){
				
					return "";
				
				}
				public String EDAD_A_OSComment(){
				
				    return "";
				
				}
				public String EDAD_A_OSPattern(){
				
					return "";
				
				}
				public String EDAD_A_OSOriginalDbColumnName(){
				
					return "EDAD_A?OS";
				
				}

				
			    public BigDecimal EDAD_MESES;

				public BigDecimal getEDAD_MESES () {
					return this.EDAD_MESES;
				}

				public Boolean EDAD_MESESIsNullable(){
				    return true;
				}
				public Boolean EDAD_MESESIsKey(){
				    return false;
				}
				public Integer EDAD_MESESLength(){
				    return 0;
				}
				public Integer EDAD_MESESPrecision(){
				    return 0;
				}
				public String EDAD_MESESDefault(){
				
					return "";
				
				}
				public String EDAD_MESESComment(){
				
				    return "";
				
				}
				public String EDAD_MESESPattern(){
				
					return "";
				
				}
				public String EDAD_MESESOriginalDbColumnName(){
				
					return "EDAD_MESES";
				
				}

				
			    public String GRADO;

				public String getGRADO () {
					return this.GRADO;
				}

				public Boolean GRADOIsNullable(){
				    return true;
				}
				public Boolean GRADOIsKey(){
				    return false;
				}
				public Integer GRADOLength(){
				    return 100;
				}
				public Integer GRADOPrecision(){
				    return 0;
				}
				public String GRADODefault(){
				
					return null;
				
				}
				public String GRADOComment(){
				
				    return "";
				
				}
				public String GRADOPattern(){
				
					return "";
				
				}
				public String GRADOOriginalDbColumnName(){
				
					return "GRADO";
				
				}

				
			    public String CLASEGRD;

				public String getCLASEGRD () {
					return this.CLASEGRD;
				}

				public Boolean CLASEGRDIsNullable(){
				    return true;
				}
				public Boolean CLASEGRDIsKey(){
				    return false;
				}
				public Integer CLASEGRDLength(){
				    return 50;
				}
				public Integer CLASEGRDPrecision(){
				    return 0;
				}
				public String CLASEGRDDefault(){
				
					return null;
				
				}
				public String CLASEGRDComment(){
				
				    return "";
				
				}
				public String CLASEGRDPattern(){
				
					return "";
				
				}
				public String CLASEGRDOriginalDbColumnName(){
				
					return "CLASEGRD";
				
				}

				
			    public String TIPO_USUARIO;

				public String getTIPO_USUARIO () {
					return this.TIPO_USUARIO;
				}

				public Boolean TIPO_USUARIOIsNullable(){
				    return true;
				}
				public Boolean TIPO_USUARIOIsKey(){
				    return false;
				}
				public Integer TIPO_USUARIOLength(){
				    return 100;
				}
				public Integer TIPO_USUARIOPrecision(){
				    return 0;
				}
				public String TIPO_USUARIODefault(){
				
					return null;
				
				}
				public String TIPO_USUARIOComment(){
				
				    return "";
				
				}
				public String TIPO_USUARIOPattern(){
				
					return "";
				
				}
				public String TIPO_USUARIOOriginalDbColumnName(){
				
					return "TIPO_USUARIO";
				
				}

				
			    public String FUERZA_ADSCRIPCION;

				public String getFUERZA_ADSCRIPCION () {
					return this.FUERZA_ADSCRIPCION;
				}

				public Boolean FUERZA_ADSCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean FUERZA_ADSCRIPCIONIsKey(){
				    return false;
				}
				public Integer FUERZA_ADSCRIPCIONLength(){
				    return 50;
				}
				public Integer FUERZA_ADSCRIPCIONPrecision(){
				    return 0;
				}
				public String FUERZA_ADSCRIPCIONDefault(){
				
					return null;
				
				}
				public String FUERZA_ADSCRIPCIONComment(){
				
				    return "";
				
				}
				public String FUERZA_ADSCRIPCIONPattern(){
				
					return "";
				
				}
				public String FUERZA_ADSCRIPCIONOriginalDbColumnName(){
				
					return "FUERZA_ADSCRIPCION";
				
				}

				
			    public String ESM_ADSCRIPCION;

				public String getESM_ADSCRIPCION () {
					return this.ESM_ADSCRIPCION;
				}

				public Boolean ESM_ADSCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean ESM_ADSCRIPCIONIsKey(){
				    return false;
				}
				public Integer ESM_ADSCRIPCIONLength(){
				    return 2000;
				}
				public Integer ESM_ADSCRIPCIONPrecision(){
				    return 0;
				}
				public String ESM_ADSCRIPCIONDefault(){
				
					return null;
				
				}
				public String ESM_ADSCRIPCIONComment(){
				
				    return "";
				
				}
				public String ESM_ADSCRIPCIONPattern(){
				
					return "";
				
				}
				public String ESM_ADSCRIPCIONOriginalDbColumnName(){
				
					return "ESM_ADSCRIPCION";
				
				}

				
			    public String FECHA_CONSULTA;

				public String getFECHA_CONSULTA () {
					return this.FECHA_CONSULTA;
				}

				public Boolean FECHA_CONSULTAIsNullable(){
				    return true;
				}
				public Boolean FECHA_CONSULTAIsKey(){
				    return false;
				}
				public Integer FECHA_CONSULTALength(){
				    return 19;
				}
				public Integer FECHA_CONSULTAPrecision(){
				    return 0;
				}
				public String FECHA_CONSULTADefault(){
				
					return null;
				
				}
				public String FECHA_CONSULTAComment(){
				
				    return "";
				
				}
				public String FECHA_CONSULTAPattern(){
				
					return "";
				
				}
				public String FECHA_CONSULTAOriginalDbColumnName(){
				
					return "FECHA_CONSULTA";
				
				}

				
			    public String CUPS;

				public String getCUPS () {
					return this.CUPS;
				}

				public Boolean CUPSIsNullable(){
				    return true;
				}
				public Boolean CUPSIsKey(){
				    return false;
				}
				public Integer CUPSLength(){
				    return 0;
				}
				public Integer CUPSPrecision(){
				    return 0;
				}
				public String CUPSDefault(){
				
					return null;
				
				}
				public String CUPSComment(){
				
				    return "";
				
				}
				public String CUPSPattern(){
				
					return "";
				
				}
				public String CUPSOriginalDbColumnName(){
				
					return "CUPS";
				
				}

				
			    public BigDecimal FINALIDAD_CONSULTA;

				public BigDecimal getFINALIDAD_CONSULTA () {
					return this.FINALIDAD_CONSULTA;
				}

				public Boolean FINALIDAD_CONSULTAIsNullable(){
				    return true;
				}
				public Boolean FINALIDAD_CONSULTAIsKey(){
				    return false;
				}
				public Integer FINALIDAD_CONSULTALength(){
				    return 0;
				}
				public Integer FINALIDAD_CONSULTAPrecision(){
				    return 0;
				}
				public String FINALIDAD_CONSULTADefault(){
				
					return null;
				
				}
				public String FINALIDAD_CONSULTAComment(){
				
				    return "";
				
				}
				public String FINALIDAD_CONSULTAPattern(){
				
					return "";
				
				}
				public String FINALIDAD_CONSULTAOriginalDbColumnName(){
				
					return "FINALIDAD_CONSULTA";
				
				}

				
			    public BigDecimal CAUSA_EXTERNA;

				public BigDecimal getCAUSA_EXTERNA () {
					return this.CAUSA_EXTERNA;
				}

				public Boolean CAUSA_EXTERNAIsNullable(){
				    return true;
				}
				public Boolean CAUSA_EXTERNAIsKey(){
				    return false;
				}
				public Integer CAUSA_EXTERNALength(){
				    return 0;
				}
				public Integer CAUSA_EXTERNAPrecision(){
				    return 0;
				}
				public String CAUSA_EXTERNADefault(){
				
					return null;
				
				}
				public String CAUSA_EXTERNAComment(){
				
				    return "";
				
				}
				public String CAUSA_EXTERNAPattern(){
				
					return "";
				
				}
				public String CAUSA_EXTERNAOriginalDbColumnName(){
				
					return "CAUSA_EXTERNA";
				
				}

				
			    public String AMBITO;

				public String getAMBITO () {
					return this.AMBITO;
				}

				public Boolean AMBITOIsNullable(){
				    return true;
				}
				public Boolean AMBITOIsKey(){
				    return false;
				}
				public Integer AMBITOLength(){
				    return 0;
				}
				public Integer AMBITOPrecision(){
				    return 0;
				}
				public String AMBITODefault(){
				
					return null;
				
				}
				public String AMBITOComment(){
				
				    return "";
				
				}
				public String AMBITOPattern(){
				
					return "";
				
				}
				public String AMBITOOriginalDbColumnName(){
				
					return "AMBITO";
				
				}

				
			    public String DIAG_PRINCIPAL;

				public String getDIAG_PRINCIPAL () {
					return this.DIAG_PRINCIPAL;
				}

				public Boolean DIAG_PRINCIPALIsNullable(){
				    return true;
				}
				public Boolean DIAG_PRINCIPALIsKey(){
				    return false;
				}
				public Integer DIAG_PRINCIPALLength(){
				    return 0;
				}
				public Integer DIAG_PRINCIPALPrecision(){
				    return 0;
				}
				public String DIAG_PRINCIPALDefault(){
				
					return null;
				
				}
				public String DIAG_PRINCIPALComment(){
				
				    return "";
				
				}
				public String DIAG_PRINCIPALPattern(){
				
					return "";
				
				}
				public String DIAG_PRINCIPALOriginalDbColumnName(){
				
					return "DIAG_PRINCIPAL";
				
				}

				
			    public String CODDIAGNOSTICO1;

				public String getCODDIAGNOSTICO1 () {
					return this.CODDIAGNOSTICO1;
				}

				public Boolean CODDIAGNOSTICO1IsNullable(){
				    return true;
				}
				public Boolean CODDIAGNOSTICO1IsKey(){
				    return false;
				}
				public Integer CODDIAGNOSTICO1Length(){
				    return 0;
				}
				public Integer CODDIAGNOSTICO1Precision(){
				    return 0;
				}
				public String CODDIAGNOSTICO1Default(){
				
					return null;
				
				}
				public String CODDIAGNOSTICO1Comment(){
				
				    return "";
				
				}
				public String CODDIAGNOSTICO1Pattern(){
				
					return "";
				
				}
				public String CODDIAGNOSTICO1OriginalDbColumnName(){
				
					return "CODDIAGNOSTICO1";
				
				}

				
			    public String CODDIAGNOSTICO2;

				public String getCODDIAGNOSTICO2 () {
					return this.CODDIAGNOSTICO2;
				}

				public Boolean CODDIAGNOSTICO2IsNullable(){
				    return true;
				}
				public Boolean CODDIAGNOSTICO2IsKey(){
				    return false;
				}
				public Integer CODDIAGNOSTICO2Length(){
				    return 0;
				}
				public Integer CODDIAGNOSTICO2Precision(){
				    return 0;
				}
				public String CODDIAGNOSTICO2Default(){
				
					return null;
				
				}
				public String CODDIAGNOSTICO2Comment(){
				
				    return "";
				
				}
				public String CODDIAGNOSTICO2Pattern(){
				
					return "";
				
				}
				public String CODDIAGNOSTICO2OriginalDbColumnName(){
				
					return "CODDIAGNOSTICO2";
				
				}

				
			    public String CODDIAGNOSTICO3;

				public String getCODDIAGNOSTICO3 () {
					return this.CODDIAGNOSTICO3;
				}

				public Boolean CODDIAGNOSTICO3IsNullable(){
				    return true;
				}
				public Boolean CODDIAGNOSTICO3IsKey(){
				    return false;
				}
				public Integer CODDIAGNOSTICO3Length(){
				    return 0;
				}
				public Integer CODDIAGNOSTICO3Precision(){
				    return 0;
				}
				public String CODDIAGNOSTICO3Default(){
				
					return null;
				
				}
				public String CODDIAGNOSTICO3Comment(){
				
				    return "";
				
				}
				public String CODDIAGNOSTICO3Pattern(){
				
					return "";
				
				}
				public String CODDIAGNOSTICO3OriginalDbColumnName(){
				
					return "CODDIAGNOSTICO3";
				
				}

				
			    public String TIPO_DIAGNOSTICO_PPAL;

				public String getTIPO_DIAGNOSTICO_PPAL () {
					return this.TIPO_DIAGNOSTICO_PPAL;
				}

				public Boolean TIPO_DIAGNOSTICO_PPALIsNullable(){
				    return true;
				}
				public Boolean TIPO_DIAGNOSTICO_PPALIsKey(){
				    return false;
				}
				public Integer TIPO_DIAGNOSTICO_PPALLength(){
				    return 0;
				}
				public Integer TIPO_DIAGNOSTICO_PPALPrecision(){
				    return 0;
				}
				public String TIPO_DIAGNOSTICO_PPALDefault(){
				
					return null;
				
				}
				public String TIPO_DIAGNOSTICO_PPALComment(){
				
				    return "";
				
				}
				public String TIPO_DIAGNOSTICO_PPALPattern(){
				
					return "";
				
				}
				public String TIPO_DIAGNOSTICO_PPALOriginalDbColumnName(){
				
					return "TIPO_DIAGNOSTICO_PPAL";
				
				}

				
			    public String CUMPLIMIENTO_CITA;

				public String getCUMPLIMIENTO_CITA () {
					return this.CUMPLIMIENTO_CITA;
				}

				public Boolean CUMPLIMIENTO_CITAIsNullable(){
				    return true;
				}
				public Boolean CUMPLIMIENTO_CITAIsKey(){
				    return false;
				}
				public Integer CUMPLIMIENTO_CITALength(){
				    return 2;
				}
				public Integer CUMPLIMIENTO_CITAPrecision(){
				    return 0;
				}
				public String CUMPLIMIENTO_CITADefault(){
				
					return null;
				
				}
				public String CUMPLIMIENTO_CITAComment(){
				
				    return "";
				
				}
				public String CUMPLIMIENTO_CITAPattern(){
				
					return "";
				
				}
				public String CUMPLIMIENTO_CITAOriginalDbColumnName(){
				
					return "CUMPLIMIENTO_CITA";
				
				}

				
			    public String TIPO_GENERACION;

				public String getTIPO_GENERACION () {
					return this.TIPO_GENERACION;
				}

				public Boolean TIPO_GENERACIONIsNullable(){
				    return true;
				}
				public Boolean TIPO_GENERACIONIsKey(){
				    return false;
				}
				public Integer TIPO_GENERACIONLength(){
				    return 30;
				}
				public Integer TIPO_GENERACIONPrecision(){
				    return 0;
				}
				public String TIPO_GENERACIONDefault(){
				
					return null;
				
				}
				public String TIPO_GENERACIONComment(){
				
				    return "";
				
				}
				public String TIPO_GENERACIONPattern(){
				
					return "";
				
				}
				public String TIPO_GENERACIONOriginalDbColumnName(){
				
					return "TIPO_GENERACION";
				
				}

				
			    public String TRIPS;

				public String getTRIPS () {
					return this.TRIPS;
				}

				public Boolean TRIPSIsNullable(){
				    return true;
				}
				public Boolean TRIPSIsKey(){
				    return false;
				}
				public Integer TRIPSLength(){
				    return 7;
				}
				public Integer TRIPSPrecision(){
				    return 0;
				}
				public String TRIPSDefault(){
				
					return null;
				
				}
				public String TRIPSComment(){
				
				    return "";
				
				}
				public String TRIPSPattern(){
				
					return "";
				
				}
				public String TRIPSOriginalDbColumnName(){
				
					return "TRIPS";
				
				}

				
			    public String IMC_VALOR;

				public String getIMC_VALOR () {
					return this.IMC_VALOR;
				}

				public Boolean IMC_VALORIsNullable(){
				    return true;
				}
				public Boolean IMC_VALORIsKey(){
				    return false;
				}
				public Integer IMC_VALORLength(){
				    return 0;
				}
				public Integer IMC_VALORPrecision(){
				    return 0;
				}
				public String IMC_VALORDefault(){
				
					return null;
				
				}
				public String IMC_VALORComment(){
				
				    return "";
				
				}
				public String IMC_VALORPattern(){
				
					return "";
				
				}
				public String IMC_VALOROriginalDbColumnName(){
				
					return "IMC_VALOR";
				
				}

				
			    public String PABDOMINAL_VALOR;

				public String getPABDOMINAL_VALOR () {
					return this.PABDOMINAL_VALOR;
				}

				public Boolean PABDOMINAL_VALORIsNullable(){
				    return true;
				}
				public Boolean PABDOMINAL_VALORIsKey(){
				    return false;
				}
				public Integer PABDOMINAL_VALORLength(){
				    return 0;
				}
				public Integer PABDOMINAL_VALORPrecision(){
				    return 0;
				}
				public String PABDOMINAL_VALORDefault(){
				
					return null;
				
				}
				public String PABDOMINAL_VALORComment(){
				
				    return "";
				
				}
				public String PABDOMINAL_VALORPattern(){
				
					return "";
				
				}
				public String PABDOMINAL_VALOROriginalDbColumnName(){
				
					return "PABDOMINAL_VALOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length) {
				if(length < 1024 && commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length == 0) {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[1024];
				} else {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length);
			strReturn = new String(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length) {
				if(length < 1024 && commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length == 0) {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[1024];
				} else {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length);
			strReturn = new String(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS) {

        	try {

        		int length = 0;
		
					this.FUERZA_PACIENTE = readString(dis);
					
					this.FUERZA_ADS_PACIENTE = readString(dis);
					
					this.CODIGO_ESM_ADS_PACIENTE = readString(dis);
					
					this.SIGLA_ESM_ADS_PACIENTE = readString(dis);
					
					this.NOMBRE_ESM_ADS_PACIENTE = readString(dis);
					
					this.FUERZA_ESM_ATENCION = readString(dis);
					
					this.CODIGO_DEL_PRESTADOR = readString(dis);
					
					this.SIGLA_ESM_ATENCION = readString(dis);
					
					this.NOMBRE_ESM_ATENCION = readString(dis);
					
					this.DEPARTAMENTO = readString(dis);
					
					this.MUNICIPIO = readString(dis);
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
					this.ESPECIALIDAD = readString(dis);
					
					this.TDOCUMENTO_PACIENTE = readString(dis);
					
					this.DOCUMENTO_PACIENTE = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.GENERO = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.PESO = readString(dis);
					
					this.TALLA = readString(dis);
					
						this.EDAD_A_OS = (BigDecimal) dis.readObject();
					
						this.EDAD_MESES = (BigDecimal) dis.readObject();
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
					this.FUERZA_ADSCRIPCION = readString(dis);
					
					this.ESM_ADSCRIPCION = readString(dis);
					
					this.FECHA_CONSULTA = readString(dis);
					
					this.CUPS = readString(dis);
					
						this.FINALIDAD_CONSULTA = (BigDecimal) dis.readObject();
					
						this.CAUSA_EXTERNA = (BigDecimal) dis.readObject();
					
					this.AMBITO = readString(dis);
					
					this.DIAG_PRINCIPAL = readString(dis);
					
					this.CODDIAGNOSTICO1 = readString(dis);
					
					this.CODDIAGNOSTICO2 = readString(dis);
					
					this.CODDIAGNOSTICO3 = readString(dis);
					
					this.TIPO_DIAGNOSTICO_PPAL = readString(dis);
					
					this.CUMPLIMIENTO_CITA = readString(dis);
					
					this.TIPO_GENERACION = readString(dis);
					
					this.TRIPS = readString(dis);
					
					this.IMC_VALOR = readString(dis);
					
					this.PABDOMINAL_VALOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS) {

        	try {

        		int length = 0;
		
					this.FUERZA_PACIENTE = readString(dis);
					
					this.FUERZA_ADS_PACIENTE = readString(dis);
					
					this.CODIGO_ESM_ADS_PACIENTE = readString(dis);
					
					this.SIGLA_ESM_ADS_PACIENTE = readString(dis);
					
					this.NOMBRE_ESM_ADS_PACIENTE = readString(dis);
					
					this.FUERZA_ESM_ATENCION = readString(dis);
					
					this.CODIGO_DEL_PRESTADOR = readString(dis);
					
					this.SIGLA_ESM_ATENCION = readString(dis);
					
					this.NOMBRE_ESM_ATENCION = readString(dis);
					
					this.DEPARTAMENTO = readString(dis);
					
					this.MUNICIPIO = readString(dis);
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
					this.ESPECIALIDAD = readString(dis);
					
					this.TDOCUMENTO_PACIENTE = readString(dis);
					
					this.DOCUMENTO_PACIENTE = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.GENERO = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.PESO = readString(dis);
					
					this.TALLA = readString(dis);
					
						this.EDAD_A_OS = (BigDecimal) dis.readObject();
					
						this.EDAD_MESES = (BigDecimal) dis.readObject();
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
					this.FUERZA_ADSCRIPCION = readString(dis);
					
					this.ESM_ADSCRIPCION = readString(dis);
					
					this.FECHA_CONSULTA = readString(dis);
					
					this.CUPS = readString(dis);
					
						this.FINALIDAD_CONSULTA = (BigDecimal) dis.readObject();
					
						this.CAUSA_EXTERNA = (BigDecimal) dis.readObject();
					
					this.AMBITO = readString(dis);
					
					this.DIAG_PRINCIPAL = readString(dis);
					
					this.CODDIAGNOSTICO1 = readString(dis);
					
					this.CODDIAGNOSTICO2 = readString(dis);
					
					this.CODDIAGNOSTICO3 = readString(dis);
					
					this.TIPO_DIAGNOSTICO_PPAL = readString(dis);
					
					this.CUMPLIMIENTO_CITA = readString(dis);
					
					this.TIPO_GENERACION = readString(dis);
					
					this.TRIPS = readString(dis);
					
					this.IMC_VALOR = readString(dis);
					
					this.PABDOMINAL_VALOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FUERZA_PACIENTE,dos);
					
					// String
				
						writeString(this.FUERZA_ADS_PACIENTE,dos);
					
					// String
				
						writeString(this.CODIGO_ESM_ADS_PACIENTE,dos);
					
					// String
				
						writeString(this.SIGLA_ESM_ADS_PACIENTE,dos);
					
					// String
				
						writeString(this.NOMBRE_ESM_ADS_PACIENTE,dos);
					
					// String
				
						writeString(this.FUERZA_ESM_ATENCION,dos);
					
					// String
				
						writeString(this.CODIGO_DEL_PRESTADOR,dos);
					
					// String
				
						writeString(this.SIGLA_ESM_ATENCION,dos);
					
					// String
				
						writeString(this.NOMBRE_ESM_ATENCION,dos);
					
					// String
				
						writeString(this.DEPARTAMENTO,dos);
					
					// String
				
						writeString(this.MUNICIPIO,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_PACIENTE,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PACIENTE,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.GENERO,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.PESO,dos);
					
					// String
				
						writeString(this.TALLA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD_A_OS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD_MESES);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// String
				
						writeString(this.FUERZA_ADSCRIPCION,dos);
					
					// String
				
						writeString(this.ESM_ADSCRIPCION,dos);
					
					// String
				
						writeString(this.FECHA_CONSULTA,dos);
					
					// String
				
						writeString(this.CUPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FINALIDAD_CONSULTA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CAUSA_EXTERNA);
					
					// String
				
						writeString(this.AMBITO,dos);
					
					// String
				
						writeString(this.DIAG_PRINCIPAL,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO1,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO2,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO3,dos);
					
					// String
				
						writeString(this.TIPO_DIAGNOSTICO_PPAL,dos);
					
					// String
				
						writeString(this.CUMPLIMIENTO_CITA,dos);
					
					// String
				
						writeString(this.TIPO_GENERACION,dos);
					
					// String
				
						writeString(this.TRIPS,dos);
					
					// String
				
						writeString(this.IMC_VALOR,dos);
					
					// String
				
						writeString(this.PABDOMINAL_VALOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FUERZA_PACIENTE,dos);
					
					// String
				
						writeString(this.FUERZA_ADS_PACIENTE,dos);
					
					// String
				
						writeString(this.CODIGO_ESM_ADS_PACIENTE,dos);
					
					// String
				
						writeString(this.SIGLA_ESM_ADS_PACIENTE,dos);
					
					// String
				
						writeString(this.NOMBRE_ESM_ADS_PACIENTE,dos);
					
					// String
				
						writeString(this.FUERZA_ESM_ATENCION,dos);
					
					// String
				
						writeString(this.CODIGO_DEL_PRESTADOR,dos);
					
					// String
				
						writeString(this.SIGLA_ESM_ATENCION,dos);
					
					// String
				
						writeString(this.NOMBRE_ESM_ATENCION,dos);
					
					// String
				
						writeString(this.DEPARTAMENTO,dos);
					
					// String
				
						writeString(this.MUNICIPIO,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_PACIENTE,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PACIENTE,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.GENERO,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.PESO,dos);
					
					// String
				
						writeString(this.TALLA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD_A_OS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD_MESES);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// String
				
						writeString(this.FUERZA_ADSCRIPCION,dos);
					
					// String
				
						writeString(this.ESM_ADSCRIPCION,dos);
					
					// String
				
						writeString(this.FECHA_CONSULTA,dos);
					
					// String
				
						writeString(this.CUPS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FINALIDAD_CONSULTA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CAUSA_EXTERNA);
					
					// String
				
						writeString(this.AMBITO,dos);
					
					// String
				
						writeString(this.DIAG_PRINCIPAL,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO1,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO2,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO3,dos);
					
					// String
				
						writeString(this.TIPO_DIAGNOSTICO_PPAL,dos);
					
					// String
				
						writeString(this.CUMPLIMIENTO_CITA,dos);
					
					// String
				
						writeString(this.TIPO_GENERACION,dos);
					
					// String
				
						writeString(this.TRIPS,dos);
					
					// String
				
						writeString(this.IMC_VALOR,dos);
					
					// String
				
						writeString(this.PABDOMINAL_VALOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FUERZA_PACIENTE="+FUERZA_PACIENTE);
		sb.append(",FUERZA_ADS_PACIENTE="+FUERZA_ADS_PACIENTE);
		sb.append(",CODIGO_ESM_ADS_PACIENTE="+CODIGO_ESM_ADS_PACIENTE);
		sb.append(",SIGLA_ESM_ADS_PACIENTE="+SIGLA_ESM_ADS_PACIENTE);
		sb.append(",NOMBRE_ESM_ADS_PACIENTE="+NOMBRE_ESM_ADS_PACIENTE);
		sb.append(",FUERZA_ESM_ATENCION="+FUERZA_ESM_ATENCION);
		sb.append(",CODIGO_DEL_PRESTADOR="+CODIGO_DEL_PRESTADOR);
		sb.append(",SIGLA_ESM_ATENCION="+SIGLA_ESM_ATENCION);
		sb.append(",NOMBRE_ESM_ATENCION="+NOMBRE_ESM_ATENCION);
		sb.append(",DEPARTAMENTO="+DEPARTAMENTO);
		sb.append(",MUNICIPIO="+MUNICIPIO);
		sb.append(",TDOCUMENTO_PROFESIONAL="+TDOCUMENTO_PROFESIONAL);
		sb.append(",DOCUMENTO_PROFESIONAL="+DOCUMENTO_PROFESIONAL);
		sb.append(",ESPECIALIDAD="+ESPECIALIDAD);
		sb.append(",TDOCUMENTO_PACIENTE="+TDOCUMENTO_PACIENTE);
		sb.append(",DOCUMENTO_PACIENTE="+DOCUMENTO_PACIENTE);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",GENERO="+GENERO);
		sb.append(",FECHA_NACIMIENTO="+FECHA_NACIMIENTO);
		sb.append(",PESO="+PESO);
		sb.append(",TALLA="+TALLA);
		sb.append(",EDAD_A_OS="+String.valueOf(EDAD_A_OS));
		sb.append(",EDAD_MESES="+String.valueOf(EDAD_MESES));
		sb.append(",GRADO="+GRADO);
		sb.append(",CLASEGRD="+CLASEGRD);
		sb.append(",TIPO_USUARIO="+TIPO_USUARIO);
		sb.append(",FUERZA_ADSCRIPCION="+FUERZA_ADSCRIPCION);
		sb.append(",ESM_ADSCRIPCION="+ESM_ADSCRIPCION);
		sb.append(",FECHA_CONSULTA="+FECHA_CONSULTA);
		sb.append(",CUPS="+CUPS);
		sb.append(",FINALIDAD_CONSULTA="+String.valueOf(FINALIDAD_CONSULTA));
		sb.append(",CAUSA_EXTERNA="+String.valueOf(CAUSA_EXTERNA));
		sb.append(",AMBITO="+AMBITO);
		sb.append(",DIAG_PRINCIPAL="+DIAG_PRINCIPAL);
		sb.append(",CODDIAGNOSTICO1="+CODDIAGNOSTICO1);
		sb.append(",CODDIAGNOSTICO2="+CODDIAGNOSTICO2);
		sb.append(",CODDIAGNOSTICO3="+CODDIAGNOSTICO3);
		sb.append(",TIPO_DIAGNOSTICO_PPAL="+TIPO_DIAGNOSTICO_PPAL);
		sb.append(",CUMPLIMIENTO_CITA="+CUMPLIMIENTO_CITA);
		sb.append(",TIPO_GENERACION="+TIPO_GENERACION);
		sb.append(",TRIPS="+TRIPS);
		sb.append(",IMC_VALOR="+IMC_VALOR);
		sb.append(",PABDOMINAL_VALOR="+PABDOMINAL_VALOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row92Struct implements routines.system.IPersistableRow<row92Struct> {
    final static byte[] commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[0];
    static byte[] commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[0];

	
			    public String FUERZA_PACIENTE;

				public String getFUERZA_PACIENTE () {
					return this.FUERZA_PACIENTE;
				}

				public Boolean FUERZA_PACIENTEIsNullable(){
				    return true;
				}
				public Boolean FUERZA_PACIENTEIsKey(){
				    return false;
				}
				public Integer FUERZA_PACIENTELength(){
				    return 500;
				}
				public Integer FUERZA_PACIENTEPrecision(){
				    return 0;
				}
				public String FUERZA_PACIENTEDefault(){
				
					return null;
				
				}
				public String FUERZA_PACIENTEComment(){
				
				    return "";
				
				}
				public String FUERZA_PACIENTEPattern(){
				
					return "";
				
				}
				public String FUERZA_PACIENTEOriginalDbColumnName(){
				
					return "FUERZA_PACIENTE";
				
				}

				
			    public String FUERZA_ADS_PACIENTE;

				public String getFUERZA_ADS_PACIENTE () {
					return this.FUERZA_ADS_PACIENTE;
				}

				public Boolean FUERZA_ADS_PACIENTEIsNullable(){
				    return true;
				}
				public Boolean FUERZA_ADS_PACIENTEIsKey(){
				    return false;
				}
				public Integer FUERZA_ADS_PACIENTELength(){
				    return 50;
				}
				public Integer FUERZA_ADS_PACIENTEPrecision(){
				    return 0;
				}
				public String FUERZA_ADS_PACIENTEDefault(){
				
					return null;
				
				}
				public String FUERZA_ADS_PACIENTEComment(){
				
				    return "";
				
				}
				public String FUERZA_ADS_PACIENTEPattern(){
				
					return "";
				
				}
				public String FUERZA_ADS_PACIENTEOriginalDbColumnName(){
				
					return "FUERZA_ADS_PACIENTE";
				
				}

				
			    public String CODIGO_ESM_ADS_PACIENTE;

				public String getCODIGO_ESM_ADS_PACIENTE () {
					return this.CODIGO_ESM_ADS_PACIENTE;
				}

				public Boolean CODIGO_ESM_ADS_PACIENTEIsNullable(){
				    return true;
				}
				public Boolean CODIGO_ESM_ADS_PACIENTEIsKey(){
				    return false;
				}
				public Integer CODIGO_ESM_ADS_PACIENTELength(){
				    return 100;
				}
				public Integer CODIGO_ESM_ADS_PACIENTEPrecision(){
				    return 0;
				}
				public String CODIGO_ESM_ADS_PACIENTEDefault(){
				
					return null;
				
				}
				public String CODIGO_ESM_ADS_PACIENTEComment(){
				
				    return "";
				
				}
				public String CODIGO_ESM_ADS_PACIENTEPattern(){
				
					return "";
				
				}
				public String CODIGO_ESM_ADS_PACIENTEOriginalDbColumnName(){
				
					return "CODIGO_ESM_ADS_PACIENTE";
				
				}

				
			    public String SIGLA_ESM_ADS_PACIENTE;

				public String getSIGLA_ESM_ADS_PACIENTE () {
					return this.SIGLA_ESM_ADS_PACIENTE;
				}

				public Boolean SIGLA_ESM_ADS_PACIENTEIsNullable(){
				    return true;
				}
				public Boolean SIGLA_ESM_ADS_PACIENTEIsKey(){
				    return false;
				}
				public Integer SIGLA_ESM_ADS_PACIENTELength(){
				    return 100;
				}
				public Integer SIGLA_ESM_ADS_PACIENTEPrecision(){
				    return 0;
				}
				public String SIGLA_ESM_ADS_PACIENTEDefault(){
				
					return null;
				
				}
				public String SIGLA_ESM_ADS_PACIENTEComment(){
				
				    return "";
				
				}
				public String SIGLA_ESM_ADS_PACIENTEPattern(){
				
					return "";
				
				}
				public String SIGLA_ESM_ADS_PACIENTEOriginalDbColumnName(){
				
					return "SIGLA_ESM_ADS_PACIENTE";
				
				}

				
			    public String NOMBRE_ESM_ADS_PACIENTE;

				public String getNOMBRE_ESM_ADS_PACIENTE () {
					return this.NOMBRE_ESM_ADS_PACIENTE;
				}

				public Boolean NOMBRE_ESM_ADS_PACIENTEIsNullable(){
				    return true;
				}
				public Boolean NOMBRE_ESM_ADS_PACIENTEIsKey(){
				    return false;
				}
				public Integer NOMBRE_ESM_ADS_PACIENTELength(){
				    return 2000;
				}
				public Integer NOMBRE_ESM_ADS_PACIENTEPrecision(){
				    return 0;
				}
				public String NOMBRE_ESM_ADS_PACIENTEDefault(){
				
					return null;
				
				}
				public String NOMBRE_ESM_ADS_PACIENTEComment(){
				
				    return "";
				
				}
				public String NOMBRE_ESM_ADS_PACIENTEPattern(){
				
					return "";
				
				}
				public String NOMBRE_ESM_ADS_PACIENTEOriginalDbColumnName(){
				
					return "NOMBRE_ESM_ADS_PACIENTE";
				
				}

				
			    public String FUERZA_ESM_ATENCION;

				public String getFUERZA_ESM_ATENCION () {
					return this.FUERZA_ESM_ATENCION;
				}

				public Boolean FUERZA_ESM_ATENCIONIsNullable(){
				    return true;
				}
				public Boolean FUERZA_ESM_ATENCIONIsKey(){
				    return false;
				}
				public Integer FUERZA_ESM_ATENCIONLength(){
				    return 50;
				}
				public Integer FUERZA_ESM_ATENCIONPrecision(){
				    return 0;
				}
				public String FUERZA_ESM_ATENCIONDefault(){
				
					return null;
				
				}
				public String FUERZA_ESM_ATENCIONComment(){
				
				    return "";
				
				}
				public String FUERZA_ESM_ATENCIONPattern(){
				
					return "";
				
				}
				public String FUERZA_ESM_ATENCIONOriginalDbColumnName(){
				
					return "FUERZA_ESM_ATENCION";
				
				}

				
			    public String CODIGO_DEL_PRESTADOR;

				public String getCODIGO_DEL_PRESTADOR () {
					return this.CODIGO_DEL_PRESTADOR;
				}

				public Boolean CODIGO_DEL_PRESTADORIsNullable(){
				    return true;
				}
				public Boolean CODIGO_DEL_PRESTADORIsKey(){
				    return false;
				}
				public Integer CODIGO_DEL_PRESTADORLength(){
				    return 100;
				}
				public Integer CODIGO_DEL_PRESTADORPrecision(){
				    return 0;
				}
				public String CODIGO_DEL_PRESTADORDefault(){
				
					return null;
				
				}
				public String CODIGO_DEL_PRESTADORComment(){
				
				    return "";
				
				}
				public String CODIGO_DEL_PRESTADORPattern(){
				
					return "";
				
				}
				public String CODIGO_DEL_PRESTADOROriginalDbColumnName(){
				
					return "CODIGO_DEL_PRESTADOR";
				
				}

				
			    public String SIGLA_ESM_ATENCION;

				public String getSIGLA_ESM_ATENCION () {
					return this.SIGLA_ESM_ATENCION;
				}

				public Boolean SIGLA_ESM_ATENCIONIsNullable(){
				    return true;
				}
				public Boolean SIGLA_ESM_ATENCIONIsKey(){
				    return false;
				}
				public Integer SIGLA_ESM_ATENCIONLength(){
				    return 100;
				}
				public Integer SIGLA_ESM_ATENCIONPrecision(){
				    return 0;
				}
				public String SIGLA_ESM_ATENCIONDefault(){
				
					return null;
				
				}
				public String SIGLA_ESM_ATENCIONComment(){
				
				    return "";
				
				}
				public String SIGLA_ESM_ATENCIONPattern(){
				
					return "";
				
				}
				public String SIGLA_ESM_ATENCIONOriginalDbColumnName(){
				
					return "SIGLA_ESM_ATENCION";
				
				}

				
			    public String NOMBRE_ESM_ATENCION;

				public String getNOMBRE_ESM_ATENCION () {
					return this.NOMBRE_ESM_ATENCION;
				}

				public Boolean NOMBRE_ESM_ATENCIONIsNullable(){
				    return true;
				}
				public Boolean NOMBRE_ESM_ATENCIONIsKey(){
				    return false;
				}
				public Integer NOMBRE_ESM_ATENCIONLength(){
				    return 2000;
				}
				public Integer NOMBRE_ESM_ATENCIONPrecision(){
				    return 0;
				}
				public String NOMBRE_ESM_ATENCIONDefault(){
				
					return null;
				
				}
				public String NOMBRE_ESM_ATENCIONComment(){
				
				    return "";
				
				}
				public String NOMBRE_ESM_ATENCIONPattern(){
				
					return "";
				
				}
				public String NOMBRE_ESM_ATENCIONOriginalDbColumnName(){
				
					return "NOMBRE_ESM_ATENCION";
				
				}

				
			    public String DEPARTAMENTO;

				public String getDEPARTAMENTO () {
					return this.DEPARTAMENTO;
				}

				public Boolean DEPARTAMENTOIsNullable(){
				    return true;
				}
				public Boolean DEPARTAMENTOIsKey(){
				    return false;
				}
				public Integer DEPARTAMENTOLength(){
				    return 100;
				}
				public Integer DEPARTAMENTOPrecision(){
				    return 0;
				}
				public String DEPARTAMENTODefault(){
				
					return null;
				
				}
				public String DEPARTAMENTOComment(){
				
				    return "";
				
				}
				public String DEPARTAMENTOPattern(){
				
					return "";
				
				}
				public String DEPARTAMENTOOriginalDbColumnName(){
				
					return "DEPARTAMENTO";
				
				}

				
			    public String MUNICIPIO;

				public String getMUNICIPIO () {
					return this.MUNICIPIO;
				}

				public Boolean MUNICIPIOIsNullable(){
				    return true;
				}
				public Boolean MUNICIPIOIsKey(){
				    return false;
				}
				public Integer MUNICIPIOLength(){
				    return 100;
				}
				public Integer MUNICIPIOPrecision(){
				    return 0;
				}
				public String MUNICIPIODefault(){
				
					return null;
				
				}
				public String MUNICIPIOComment(){
				
				    return "";
				
				}
				public String MUNICIPIOPattern(){
				
					return "";
				
				}
				public String MUNICIPIOOriginalDbColumnName(){
				
					return "MUNICIPIO";
				
				}

				
			    public String TDOCUMENTO_PROFESIONAL;

				public String getTDOCUMENTO_PROFESIONAL () {
					return this.TDOCUMENTO_PROFESIONAL;
				}

				public Boolean TDOCUMENTO_PROFESIONALIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_PROFESIONALLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_PROFESIONALComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "TDOCUMENTO_PROFESIONAL";
				
				}

				
			    public String DOCUMENTO_PROFESIONAL;

				public String getDOCUMENTO_PROFESIONAL () {
					return this.DOCUMENTO_PROFESIONAL;
				}

				public Boolean DOCUMENTO_PROFESIONALIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_PROFESIONALLength(){
				    return 40;
				}
				public Integer DOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String DOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_PROFESIONALComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "DOCUMENTO_PROFESIONAL";
				
				}

				
			    public String ESPECIALIDAD;

				public String getESPECIALIDAD () {
					return this.ESPECIALIDAD;
				}

				public Boolean ESPECIALIDADIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADLength(){
				    return 500;
				}
				public Integer ESPECIALIDADPrecision(){
				    return 0;
				}
				public String ESPECIALIDADDefault(){
				
					return null;
				
				}
				public String ESPECIALIDADComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADOriginalDbColumnName(){
				
					return "ESPECIALIDAD";
				
				}

				
			    public String TDOCUMENTO_PACIENTE;

				public String getTDOCUMENTO_PACIENTE () {
					return this.TDOCUMENTO_PACIENTE;
				}

				public Boolean TDOCUMENTO_PACIENTEIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_PACIENTEIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_PACIENTELength(){
				    return 50;
				}
				public Integer TDOCUMENTO_PACIENTEPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_PACIENTEDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_PACIENTEComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_PACIENTEPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_PACIENTEOriginalDbColumnName(){
				
					return "TDOCUMENTO_PACIENTE";
				
				}

				
			    public String DOCUMENTO_PACIENTE;

				public String getDOCUMENTO_PACIENTE () {
					return this.DOCUMENTO_PACIENTE;
				}

				public Boolean DOCUMENTO_PACIENTEIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_PACIENTEIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_PACIENTELength(){
				    return 40;
				}
				public Integer DOCUMENTO_PACIENTEPrecision(){
				    return 0;
				}
				public String DOCUMENTO_PACIENTEDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_PACIENTEComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_PACIENTEPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_PACIENTEOriginalDbColumnName(){
				
					return "DOCUMENTO_PACIENTE";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 100;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 100;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 100;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 100;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String GENERO;

				public String getGENERO () {
					return this.GENERO;
				}

				public Boolean GENEROIsNullable(){
				    return true;
				}
				public Boolean GENEROIsKey(){
				    return false;
				}
				public Integer GENEROLength(){
				    return 20;
				}
				public Integer GENEROPrecision(){
				    return 0;
				}
				public String GENERODefault(){
				
					return null;
				
				}
				public String GENEROComment(){
				
				    return "";
				
				}
				public String GENEROPattern(){
				
					return "";
				
				}
				public String GENEROOriginalDbColumnName(){
				
					return "GENERO";
				
				}

				
			    public String FECHA_NACIMIENTO;

				public String getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return 10;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return 0;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public String PESO;

				public String getPESO () {
					return this.PESO;
				}

				public Boolean PESOIsNullable(){
				    return true;
				}
				public Boolean PESOIsKey(){
				    return false;
				}
				public Integer PESOLength(){
				    return 21;
				}
				public Integer PESOPrecision(){
				    return 0;
				}
				public String PESODefault(){
				
					return null;
				
				}
				public String PESOComment(){
				
				    return "";
				
				}
				public String PESOPattern(){
				
					return "";
				
				}
				public String PESOOriginalDbColumnName(){
				
					return "PESO";
				
				}

				
			    public String TALLA;

				public String getTALLA () {
					return this.TALLA;
				}

				public Boolean TALLAIsNullable(){
				    return true;
				}
				public Boolean TALLAIsKey(){
				    return false;
				}
				public Integer TALLALength(){
				    return 43;
				}
				public Integer TALLAPrecision(){
				    return 0;
				}
				public String TALLADefault(){
				
					return null;
				
				}
				public String TALLAComment(){
				
				    return "";
				
				}
				public String TALLAPattern(){
				
					return "";
				
				}
				public String TALLAOriginalDbColumnName(){
				
					return "TALLA";
				
				}

				
			    public BigDecimal EDAD_A_OS;

				public BigDecimal getEDAD_A_OS () {
					return this.EDAD_A_OS;
				}

				public Boolean EDAD_A_OSIsNullable(){
				    return true;
				}
				public Boolean EDAD_A_OSIsKey(){
				    return false;
				}
				public Integer EDAD_A_OSLength(){
				    return 0;
				}
				public Integer EDAD_A_OSPrecision(){
				    return 0;
				}
				public String EDAD_A_OSDefault(){
				
					return "";
				
				}
				public String EDAD_A_OSComment(){
				
				    return "";
				
				}
				public String EDAD_A_OSPattern(){
				
					return "";
				
				}
				public String EDAD_A_OSOriginalDbColumnName(){
				
					return "EDAD_A?OS";
				
				}

				
			    public BigDecimal EDAD_MESES;

				public BigDecimal getEDAD_MESES () {
					return this.EDAD_MESES;
				}

				public Boolean EDAD_MESESIsNullable(){
				    return true;
				}
				public Boolean EDAD_MESESIsKey(){
				    return false;
				}
				public Integer EDAD_MESESLength(){
				    return 0;
				}
				public Integer EDAD_MESESPrecision(){
				    return 0;
				}
				public String EDAD_MESESDefault(){
				
					return "";
				
				}
				public String EDAD_MESESComment(){
				
				    return "";
				
				}
				public String EDAD_MESESPattern(){
				
					return "";
				
				}
				public String EDAD_MESESOriginalDbColumnName(){
				
					return "EDAD_MESES";
				
				}

				
			    public String GRADO;

				public String getGRADO () {
					return this.GRADO;
				}

				public Boolean GRADOIsNullable(){
				    return true;
				}
				public Boolean GRADOIsKey(){
				    return false;
				}
				public Integer GRADOLength(){
				    return 100;
				}
				public Integer GRADOPrecision(){
				    return 0;
				}
				public String GRADODefault(){
				
					return null;
				
				}
				public String GRADOComment(){
				
				    return "";
				
				}
				public String GRADOPattern(){
				
					return "";
				
				}
				public String GRADOOriginalDbColumnName(){
				
					return "GRADO";
				
				}

				
			    public String CLASEGRD;

				public String getCLASEGRD () {
					return this.CLASEGRD;
				}

				public Boolean CLASEGRDIsNullable(){
				    return true;
				}
				public Boolean CLASEGRDIsKey(){
				    return false;
				}
				public Integer CLASEGRDLength(){
				    return 50;
				}
				public Integer CLASEGRDPrecision(){
				    return 0;
				}
				public String CLASEGRDDefault(){
				
					return null;
				
				}
				public String CLASEGRDComment(){
				
				    return "";
				
				}
				public String CLASEGRDPattern(){
				
					return "";
				
				}
				public String CLASEGRDOriginalDbColumnName(){
				
					return "CLASEGRD";
				
				}

				
			    public String TIPO_USUARIO;

				public String getTIPO_USUARIO () {
					return this.TIPO_USUARIO;
				}

				public Boolean TIPO_USUARIOIsNullable(){
				    return true;
				}
				public Boolean TIPO_USUARIOIsKey(){
				    return false;
				}
				public Integer TIPO_USUARIOLength(){
				    return 100;
				}
				public Integer TIPO_USUARIOPrecision(){
				    return 0;
				}
				public String TIPO_USUARIODefault(){
				
					return null;
				
				}
				public String TIPO_USUARIOComment(){
				
				    return "";
				
				}
				public String TIPO_USUARIOPattern(){
				
					return "";
				
				}
				public String TIPO_USUARIOOriginalDbColumnName(){
				
					return "TIPO_USUARIO";
				
				}

				
			    public String FUERZA_ADSCRIPCION;

				public String getFUERZA_ADSCRIPCION () {
					return this.FUERZA_ADSCRIPCION;
				}

				public Boolean FUERZA_ADSCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean FUERZA_ADSCRIPCIONIsKey(){
				    return false;
				}
				public Integer FUERZA_ADSCRIPCIONLength(){
				    return 50;
				}
				public Integer FUERZA_ADSCRIPCIONPrecision(){
				    return 0;
				}
				public String FUERZA_ADSCRIPCIONDefault(){
				
					return null;
				
				}
				public String FUERZA_ADSCRIPCIONComment(){
				
				    return "";
				
				}
				public String FUERZA_ADSCRIPCIONPattern(){
				
					return "";
				
				}
				public String FUERZA_ADSCRIPCIONOriginalDbColumnName(){
				
					return "FUERZA_ADSCRIPCION";
				
				}

				
			    public String ESM_ADSCRIPCION;

				public String getESM_ADSCRIPCION () {
					return this.ESM_ADSCRIPCION;
				}

				public Boolean ESM_ADSCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean ESM_ADSCRIPCIONIsKey(){
				    return false;
				}
				public Integer ESM_ADSCRIPCIONLength(){
				    return 2000;
				}
				public Integer ESM_ADSCRIPCIONPrecision(){
				    return 0;
				}
				public String ESM_ADSCRIPCIONDefault(){
				
					return null;
				
				}
				public String ESM_ADSCRIPCIONComment(){
				
				    return "";
				
				}
				public String ESM_ADSCRIPCIONPattern(){
				
					return "";
				
				}
				public String ESM_ADSCRIPCIONOriginalDbColumnName(){
				
					return "ESM_ADSCRIPCION";
				
				}

				
			    public String FECHA_CONSULTA;

				public String getFECHA_CONSULTA () {
					return this.FECHA_CONSULTA;
				}

				public Boolean FECHA_CONSULTAIsNullable(){
				    return true;
				}
				public Boolean FECHA_CONSULTAIsKey(){
				    return false;
				}
				public Integer FECHA_CONSULTALength(){
				    return 19;
				}
				public Integer FECHA_CONSULTAPrecision(){
				    return 0;
				}
				public String FECHA_CONSULTADefault(){
				
					return null;
				
				}
				public String FECHA_CONSULTAComment(){
				
				    return "";
				
				}
				public String FECHA_CONSULTAPattern(){
				
					return "";
				
				}
				public String FECHA_CONSULTAOriginalDbColumnName(){
				
					return "FECHA_CONSULTA";
				
				}

				
			    public String CUPS;

				public String getCUPS () {
					return this.CUPS;
				}

				public Boolean CUPSIsNullable(){
				    return true;
				}
				public Boolean CUPSIsKey(){
				    return false;
				}
				public Integer CUPSLength(){
				    return 100;
				}
				public Integer CUPSPrecision(){
				    return 0;
				}
				public String CUPSDefault(){
				
					return null;
				
				}
				public String CUPSComment(){
				
				    return "";
				
				}
				public String CUPSPattern(){
				
					return "";
				
				}
				public String CUPSOriginalDbColumnName(){
				
					return "CUPS";
				
				}

				
			    public BigDecimal FINALIDAD_CONSULTA;

				public BigDecimal getFINALIDAD_CONSULTA () {
					return this.FINALIDAD_CONSULTA;
				}

				public Boolean FINALIDAD_CONSULTAIsNullable(){
				    return true;
				}
				public Boolean FINALIDAD_CONSULTAIsKey(){
				    return false;
				}
				public Integer FINALIDAD_CONSULTALength(){
				    return 0;
				}
				public Integer FINALIDAD_CONSULTAPrecision(){
				    return null;
				}
				public String FINALIDAD_CONSULTADefault(){
				
					return "";
				
				}
				public String FINALIDAD_CONSULTAComment(){
				
				    return "";
				
				}
				public String FINALIDAD_CONSULTAPattern(){
				
					return "";
				
				}
				public String FINALIDAD_CONSULTAOriginalDbColumnName(){
				
					return "FINALIDAD_CONSULTA";
				
				}

				
			    public BigDecimal CAUSA_EXTERNA;

				public BigDecimal getCAUSA_EXTERNA () {
					return this.CAUSA_EXTERNA;
				}

				public Boolean CAUSA_EXTERNAIsNullable(){
				    return true;
				}
				public Boolean CAUSA_EXTERNAIsKey(){
				    return false;
				}
				public Integer CAUSA_EXTERNALength(){
				    return 0;
				}
				public Integer CAUSA_EXTERNAPrecision(){
				    return null;
				}
				public String CAUSA_EXTERNADefault(){
				
					return "";
				
				}
				public String CAUSA_EXTERNAComment(){
				
				    return "";
				
				}
				public String CAUSA_EXTERNAPattern(){
				
					return "";
				
				}
				public String CAUSA_EXTERNAOriginalDbColumnName(){
				
					return "CAUSA_EXTERNA";
				
				}

				
			    public String AMBITO;

				public String getAMBITO () {
					return this.AMBITO;
				}

				public Boolean AMBITOIsNullable(){
				    return true;
				}
				public Boolean AMBITOIsKey(){
				    return false;
				}
				public Integer AMBITOLength(){
				    return 15;
				}
				public Integer AMBITOPrecision(){
				    return 0;
				}
				public String AMBITODefault(){
				
					return null;
				
				}
				public String AMBITOComment(){
				
				    return "";
				
				}
				public String AMBITOPattern(){
				
					return "";
				
				}
				public String AMBITOOriginalDbColumnName(){
				
					return "AMBITO";
				
				}

				
			    public String DIAG_PRINCIPAL;

				public String getDIAG_PRINCIPAL () {
					return this.DIAG_PRINCIPAL;
				}

				public Boolean DIAG_PRINCIPALIsNullable(){
				    return true;
				}
				public Boolean DIAG_PRINCIPALIsKey(){
				    return false;
				}
				public Integer DIAG_PRINCIPALLength(){
				    return 10;
				}
				public Integer DIAG_PRINCIPALPrecision(){
				    return 0;
				}
				public String DIAG_PRINCIPALDefault(){
				
					return null;
				
				}
				public String DIAG_PRINCIPALComment(){
				
				    return "";
				
				}
				public String DIAG_PRINCIPALPattern(){
				
					return "";
				
				}
				public String DIAG_PRINCIPALOriginalDbColumnName(){
				
					return "DIAG_PRINCIPAL";
				
				}

				
			    public String CODDIAGNOSTICO1;

				public String getCODDIAGNOSTICO1 () {
					return this.CODDIAGNOSTICO1;
				}

				public Boolean CODDIAGNOSTICO1IsNullable(){
				    return true;
				}
				public Boolean CODDIAGNOSTICO1IsKey(){
				    return false;
				}
				public Integer CODDIAGNOSTICO1Length(){
				    return 10;
				}
				public Integer CODDIAGNOSTICO1Precision(){
				    return 0;
				}
				public String CODDIAGNOSTICO1Default(){
				
					return null;
				
				}
				public String CODDIAGNOSTICO1Comment(){
				
				    return "";
				
				}
				public String CODDIAGNOSTICO1Pattern(){
				
					return "";
				
				}
				public String CODDIAGNOSTICO1OriginalDbColumnName(){
				
					return "CODDIAGNOSTICO1";
				
				}

				
			    public String CODDIAGNOSTICO2;

				public String getCODDIAGNOSTICO2 () {
					return this.CODDIAGNOSTICO2;
				}

				public Boolean CODDIAGNOSTICO2IsNullable(){
				    return true;
				}
				public Boolean CODDIAGNOSTICO2IsKey(){
				    return false;
				}
				public Integer CODDIAGNOSTICO2Length(){
				    return 10;
				}
				public Integer CODDIAGNOSTICO2Precision(){
				    return 0;
				}
				public String CODDIAGNOSTICO2Default(){
				
					return null;
				
				}
				public String CODDIAGNOSTICO2Comment(){
				
				    return "";
				
				}
				public String CODDIAGNOSTICO2Pattern(){
				
					return "";
				
				}
				public String CODDIAGNOSTICO2OriginalDbColumnName(){
				
					return "CODDIAGNOSTICO2";
				
				}

				
			    public String CODDIAGNOSTICO3;

				public String getCODDIAGNOSTICO3 () {
					return this.CODDIAGNOSTICO3;
				}

				public Boolean CODDIAGNOSTICO3IsNullable(){
				    return true;
				}
				public Boolean CODDIAGNOSTICO3IsKey(){
				    return false;
				}
				public Integer CODDIAGNOSTICO3Length(){
				    return 10;
				}
				public Integer CODDIAGNOSTICO3Precision(){
				    return 0;
				}
				public String CODDIAGNOSTICO3Default(){
				
					return null;
				
				}
				public String CODDIAGNOSTICO3Comment(){
				
				    return "";
				
				}
				public String CODDIAGNOSTICO3Pattern(){
				
					return "";
				
				}
				public String CODDIAGNOSTICO3OriginalDbColumnName(){
				
					return "CODDIAGNOSTICO3";
				
				}

				
			    public String TIPO_DIAGNOSTICO_PPAL;

				public String getTIPO_DIAGNOSTICO_PPAL () {
					return this.TIPO_DIAGNOSTICO_PPAL;
				}

				public Boolean TIPO_DIAGNOSTICO_PPALIsNullable(){
				    return true;
				}
				public Boolean TIPO_DIAGNOSTICO_PPALIsKey(){
				    return false;
				}
				public Integer TIPO_DIAGNOSTICO_PPALLength(){
				    return 21;
				}
				public Integer TIPO_DIAGNOSTICO_PPALPrecision(){
				    return 0;
				}
				public String TIPO_DIAGNOSTICO_PPALDefault(){
				
					return null;
				
				}
				public String TIPO_DIAGNOSTICO_PPALComment(){
				
				    return "";
				
				}
				public String TIPO_DIAGNOSTICO_PPALPattern(){
				
					return "";
				
				}
				public String TIPO_DIAGNOSTICO_PPALOriginalDbColumnName(){
				
					return "TIPO_DIAGNOSTICO_PPAL";
				
				}

				
			    public String CUMPLIMIENTO_CITA;

				public String getCUMPLIMIENTO_CITA () {
					return this.CUMPLIMIENTO_CITA;
				}

				public Boolean CUMPLIMIENTO_CITAIsNullable(){
				    return true;
				}
				public Boolean CUMPLIMIENTO_CITAIsKey(){
				    return false;
				}
				public Integer CUMPLIMIENTO_CITALength(){
				    return 2;
				}
				public Integer CUMPLIMIENTO_CITAPrecision(){
				    return 0;
				}
				public String CUMPLIMIENTO_CITADefault(){
				
					return null;
				
				}
				public String CUMPLIMIENTO_CITAComment(){
				
				    return "";
				
				}
				public String CUMPLIMIENTO_CITAPattern(){
				
					return "";
				
				}
				public String CUMPLIMIENTO_CITAOriginalDbColumnName(){
				
					return "CUMPLIMIENTO_CITA";
				
				}

				
			    public String TIPO_GENERACION;

				public String getTIPO_GENERACION () {
					return this.TIPO_GENERACION;
				}

				public Boolean TIPO_GENERACIONIsNullable(){
				    return true;
				}
				public Boolean TIPO_GENERACIONIsKey(){
				    return false;
				}
				public Integer TIPO_GENERACIONLength(){
				    return 30;
				}
				public Integer TIPO_GENERACIONPrecision(){
				    return 0;
				}
				public String TIPO_GENERACIONDefault(){
				
					return null;
				
				}
				public String TIPO_GENERACIONComment(){
				
				    return "";
				
				}
				public String TIPO_GENERACIONPattern(){
				
					return "";
				
				}
				public String TIPO_GENERACIONOriginalDbColumnName(){
				
					return "TIPO_GENERACION";
				
				}

				
			    public String TRIPS;

				public String getTRIPS () {
					return this.TRIPS;
				}

				public Boolean TRIPSIsNullable(){
				    return true;
				}
				public Boolean TRIPSIsKey(){
				    return false;
				}
				public Integer TRIPSLength(){
				    return 10;
				}
				public Integer TRIPSPrecision(){
				    return 0;
				}
				public String TRIPSDefault(){
				
					return null;
				
				}
				public String TRIPSComment(){
				
				    return "";
				
				}
				public String TRIPSPattern(){
				
					return "";
				
				}
				public String TRIPSOriginalDbColumnName(){
				
					return "TRIPS";
				
				}

				
			    public String IMC_VALOR;

				public String getIMC_VALOR () {
					return this.IMC_VALOR;
				}

				public Boolean IMC_VALORIsNullable(){
				    return true;
				}
				public Boolean IMC_VALORIsKey(){
				    return false;
				}
				public Integer IMC_VALORLength(){
				    return 10;
				}
				public Integer IMC_VALORPrecision(){
				    return 0;
				}
				public String IMC_VALORDefault(){
				
					return null;
				
				}
				public String IMC_VALORComment(){
				
				    return "";
				
				}
				public String IMC_VALORPattern(){
				
					return "";
				
				}
				public String IMC_VALOROriginalDbColumnName(){
				
					return "IMC_VALOR";
				
				}

				
			    public String PABDOMINAL_VALOR;

				public String getPABDOMINAL_VALOR () {
					return this.PABDOMINAL_VALOR;
				}

				public Boolean PABDOMINAL_VALORIsNullable(){
				    return true;
				}
				public Boolean PABDOMINAL_VALORIsKey(){
				    return false;
				}
				public Integer PABDOMINAL_VALORLength(){
				    return 10;
				}
				public Integer PABDOMINAL_VALORPrecision(){
				    return 0;
				}
				public String PABDOMINAL_VALORDefault(){
				
					return null;
				
				}
				public String PABDOMINAL_VALORComment(){
				
				    return "";
				
				}
				public String PABDOMINAL_VALORPattern(){
				
					return "";
				
				}
				public String PABDOMINAL_VALOROriginalDbColumnName(){
				
					return "PABDOMINAL_VALOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length) {
				if(length < 1024 && commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length == 0) {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[1024];
				} else {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length);
			strReturn = new String(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length) {
				if(length < 1024 && commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length == 0) {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[1024];
				} else {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length);
			strReturn = new String(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS) {

        	try {

        		int length = 0;
		
					this.FUERZA_PACIENTE = readString(dis);
					
					this.FUERZA_ADS_PACIENTE = readString(dis);
					
					this.CODIGO_ESM_ADS_PACIENTE = readString(dis);
					
					this.SIGLA_ESM_ADS_PACIENTE = readString(dis);
					
					this.NOMBRE_ESM_ADS_PACIENTE = readString(dis);
					
					this.FUERZA_ESM_ATENCION = readString(dis);
					
					this.CODIGO_DEL_PRESTADOR = readString(dis);
					
					this.SIGLA_ESM_ATENCION = readString(dis);
					
					this.NOMBRE_ESM_ATENCION = readString(dis);
					
					this.DEPARTAMENTO = readString(dis);
					
					this.MUNICIPIO = readString(dis);
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
					this.ESPECIALIDAD = readString(dis);
					
					this.TDOCUMENTO_PACIENTE = readString(dis);
					
					this.DOCUMENTO_PACIENTE = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.GENERO = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.PESO = readString(dis);
					
					this.TALLA = readString(dis);
					
						this.EDAD_A_OS = (BigDecimal) dis.readObject();
					
						this.EDAD_MESES = (BigDecimal) dis.readObject();
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
					this.FUERZA_ADSCRIPCION = readString(dis);
					
					this.ESM_ADSCRIPCION = readString(dis);
					
					this.FECHA_CONSULTA = readString(dis);
					
					this.CUPS = readString(dis);
					
						this.FINALIDAD_CONSULTA = (BigDecimal) dis.readObject();
					
						this.CAUSA_EXTERNA = (BigDecimal) dis.readObject();
					
					this.AMBITO = readString(dis);
					
					this.DIAG_PRINCIPAL = readString(dis);
					
					this.CODDIAGNOSTICO1 = readString(dis);
					
					this.CODDIAGNOSTICO2 = readString(dis);
					
					this.CODDIAGNOSTICO3 = readString(dis);
					
					this.TIPO_DIAGNOSTICO_PPAL = readString(dis);
					
					this.CUMPLIMIENTO_CITA = readString(dis);
					
					this.TIPO_GENERACION = readString(dis);
					
					this.TRIPS = readString(dis);
					
					this.IMC_VALOR = readString(dis);
					
					this.PABDOMINAL_VALOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS) {

        	try {

        		int length = 0;
		
					this.FUERZA_PACIENTE = readString(dis);
					
					this.FUERZA_ADS_PACIENTE = readString(dis);
					
					this.CODIGO_ESM_ADS_PACIENTE = readString(dis);
					
					this.SIGLA_ESM_ADS_PACIENTE = readString(dis);
					
					this.NOMBRE_ESM_ADS_PACIENTE = readString(dis);
					
					this.FUERZA_ESM_ATENCION = readString(dis);
					
					this.CODIGO_DEL_PRESTADOR = readString(dis);
					
					this.SIGLA_ESM_ATENCION = readString(dis);
					
					this.NOMBRE_ESM_ATENCION = readString(dis);
					
					this.DEPARTAMENTO = readString(dis);
					
					this.MUNICIPIO = readString(dis);
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
					this.ESPECIALIDAD = readString(dis);
					
					this.TDOCUMENTO_PACIENTE = readString(dis);
					
					this.DOCUMENTO_PACIENTE = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.GENERO = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.PESO = readString(dis);
					
					this.TALLA = readString(dis);
					
						this.EDAD_A_OS = (BigDecimal) dis.readObject();
					
						this.EDAD_MESES = (BigDecimal) dis.readObject();
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
					this.FUERZA_ADSCRIPCION = readString(dis);
					
					this.ESM_ADSCRIPCION = readString(dis);
					
					this.FECHA_CONSULTA = readString(dis);
					
					this.CUPS = readString(dis);
					
						this.FINALIDAD_CONSULTA = (BigDecimal) dis.readObject();
					
						this.CAUSA_EXTERNA = (BigDecimal) dis.readObject();
					
					this.AMBITO = readString(dis);
					
					this.DIAG_PRINCIPAL = readString(dis);
					
					this.CODDIAGNOSTICO1 = readString(dis);
					
					this.CODDIAGNOSTICO2 = readString(dis);
					
					this.CODDIAGNOSTICO3 = readString(dis);
					
					this.TIPO_DIAGNOSTICO_PPAL = readString(dis);
					
					this.CUMPLIMIENTO_CITA = readString(dis);
					
					this.TIPO_GENERACION = readString(dis);
					
					this.TRIPS = readString(dis);
					
					this.IMC_VALOR = readString(dis);
					
					this.PABDOMINAL_VALOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FUERZA_PACIENTE,dos);
					
					// String
				
						writeString(this.FUERZA_ADS_PACIENTE,dos);
					
					// String
				
						writeString(this.CODIGO_ESM_ADS_PACIENTE,dos);
					
					// String
				
						writeString(this.SIGLA_ESM_ADS_PACIENTE,dos);
					
					// String
				
						writeString(this.NOMBRE_ESM_ADS_PACIENTE,dos);
					
					// String
				
						writeString(this.FUERZA_ESM_ATENCION,dos);
					
					// String
				
						writeString(this.CODIGO_DEL_PRESTADOR,dos);
					
					// String
				
						writeString(this.SIGLA_ESM_ATENCION,dos);
					
					// String
				
						writeString(this.NOMBRE_ESM_ATENCION,dos);
					
					// String
				
						writeString(this.DEPARTAMENTO,dos);
					
					// String
				
						writeString(this.MUNICIPIO,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_PACIENTE,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PACIENTE,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.GENERO,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.PESO,dos);
					
					// String
				
						writeString(this.TALLA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD_A_OS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD_MESES);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// String
				
						writeString(this.FUERZA_ADSCRIPCION,dos);
					
					// String
				
						writeString(this.ESM_ADSCRIPCION,dos);
					
					// String
				
						writeString(this.FECHA_CONSULTA,dos);
					
					// String
				
						writeString(this.CUPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FINALIDAD_CONSULTA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CAUSA_EXTERNA);
					
					// String
				
						writeString(this.AMBITO,dos);
					
					// String
				
						writeString(this.DIAG_PRINCIPAL,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO1,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO2,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO3,dos);
					
					// String
				
						writeString(this.TIPO_DIAGNOSTICO_PPAL,dos);
					
					// String
				
						writeString(this.CUMPLIMIENTO_CITA,dos);
					
					// String
				
						writeString(this.TIPO_GENERACION,dos);
					
					// String
				
						writeString(this.TRIPS,dos);
					
					// String
				
						writeString(this.IMC_VALOR,dos);
					
					// String
				
						writeString(this.PABDOMINAL_VALOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FUERZA_PACIENTE,dos);
					
					// String
				
						writeString(this.FUERZA_ADS_PACIENTE,dos);
					
					// String
				
						writeString(this.CODIGO_ESM_ADS_PACIENTE,dos);
					
					// String
				
						writeString(this.SIGLA_ESM_ADS_PACIENTE,dos);
					
					// String
				
						writeString(this.NOMBRE_ESM_ADS_PACIENTE,dos);
					
					// String
				
						writeString(this.FUERZA_ESM_ATENCION,dos);
					
					// String
				
						writeString(this.CODIGO_DEL_PRESTADOR,dos);
					
					// String
				
						writeString(this.SIGLA_ESM_ATENCION,dos);
					
					// String
				
						writeString(this.NOMBRE_ESM_ATENCION,dos);
					
					// String
				
						writeString(this.DEPARTAMENTO,dos);
					
					// String
				
						writeString(this.MUNICIPIO,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_PACIENTE,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PACIENTE,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.GENERO,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.PESO,dos);
					
					// String
				
						writeString(this.TALLA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD_A_OS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD_MESES);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// String
				
						writeString(this.FUERZA_ADSCRIPCION,dos);
					
					// String
				
						writeString(this.ESM_ADSCRIPCION,dos);
					
					// String
				
						writeString(this.FECHA_CONSULTA,dos);
					
					// String
				
						writeString(this.CUPS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FINALIDAD_CONSULTA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CAUSA_EXTERNA);
					
					// String
				
						writeString(this.AMBITO,dos);
					
					// String
				
						writeString(this.DIAG_PRINCIPAL,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO1,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO2,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO3,dos);
					
					// String
				
						writeString(this.TIPO_DIAGNOSTICO_PPAL,dos);
					
					// String
				
						writeString(this.CUMPLIMIENTO_CITA,dos);
					
					// String
				
						writeString(this.TIPO_GENERACION,dos);
					
					// String
				
						writeString(this.TRIPS,dos);
					
					// String
				
						writeString(this.IMC_VALOR,dos);
					
					// String
				
						writeString(this.PABDOMINAL_VALOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FUERZA_PACIENTE="+FUERZA_PACIENTE);
		sb.append(",FUERZA_ADS_PACIENTE="+FUERZA_ADS_PACIENTE);
		sb.append(",CODIGO_ESM_ADS_PACIENTE="+CODIGO_ESM_ADS_PACIENTE);
		sb.append(",SIGLA_ESM_ADS_PACIENTE="+SIGLA_ESM_ADS_PACIENTE);
		sb.append(",NOMBRE_ESM_ADS_PACIENTE="+NOMBRE_ESM_ADS_PACIENTE);
		sb.append(",FUERZA_ESM_ATENCION="+FUERZA_ESM_ATENCION);
		sb.append(",CODIGO_DEL_PRESTADOR="+CODIGO_DEL_PRESTADOR);
		sb.append(",SIGLA_ESM_ATENCION="+SIGLA_ESM_ATENCION);
		sb.append(",NOMBRE_ESM_ATENCION="+NOMBRE_ESM_ATENCION);
		sb.append(",DEPARTAMENTO="+DEPARTAMENTO);
		sb.append(",MUNICIPIO="+MUNICIPIO);
		sb.append(",TDOCUMENTO_PROFESIONAL="+TDOCUMENTO_PROFESIONAL);
		sb.append(",DOCUMENTO_PROFESIONAL="+DOCUMENTO_PROFESIONAL);
		sb.append(",ESPECIALIDAD="+ESPECIALIDAD);
		sb.append(",TDOCUMENTO_PACIENTE="+TDOCUMENTO_PACIENTE);
		sb.append(",DOCUMENTO_PACIENTE="+DOCUMENTO_PACIENTE);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",GENERO="+GENERO);
		sb.append(",FECHA_NACIMIENTO="+FECHA_NACIMIENTO);
		sb.append(",PESO="+PESO);
		sb.append(",TALLA="+TALLA);
		sb.append(",EDAD_A_OS="+String.valueOf(EDAD_A_OS));
		sb.append(",EDAD_MESES="+String.valueOf(EDAD_MESES));
		sb.append(",GRADO="+GRADO);
		sb.append(",CLASEGRD="+CLASEGRD);
		sb.append(",TIPO_USUARIO="+TIPO_USUARIO);
		sb.append(",FUERZA_ADSCRIPCION="+FUERZA_ADSCRIPCION);
		sb.append(",ESM_ADSCRIPCION="+ESM_ADSCRIPCION);
		sb.append(",FECHA_CONSULTA="+FECHA_CONSULTA);
		sb.append(",CUPS="+CUPS);
		sb.append(",FINALIDAD_CONSULTA="+String.valueOf(FINALIDAD_CONSULTA));
		sb.append(",CAUSA_EXTERNA="+String.valueOf(CAUSA_EXTERNA));
		sb.append(",AMBITO="+AMBITO);
		sb.append(",DIAG_PRINCIPAL="+DIAG_PRINCIPAL);
		sb.append(",CODDIAGNOSTICO1="+CODDIAGNOSTICO1);
		sb.append(",CODDIAGNOSTICO2="+CODDIAGNOSTICO2);
		sb.append(",CODDIAGNOSTICO3="+CODDIAGNOSTICO3);
		sb.append(",TIPO_DIAGNOSTICO_PPAL="+TIPO_DIAGNOSTICO_PPAL);
		sb.append(",CUMPLIMIENTO_CITA="+CUMPLIMIENTO_CITA);
		sb.append(",TIPO_GENERACION="+TIPO_GENERACION);
		sb.append(",TRIPS="+TRIPS);
		sb.append(",IMC_VALOR="+IMC_VALOR);
		sb.append(",PABDOMINAL_VALOR="+PABDOMINAL_VALOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row92Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_5Process(globalMap);
		tDBInput_6Process(globalMap);

		row5Struct row5 = new row5Struct();

		row92Struct row92 = new row92Struct();

			row101Struct row101 = new row101Struct();
out11Struct out11 = new out11Struct();





	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out11");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File(context.CARPETA_SALIDA+"/"+context.NOMBRE_CSV)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
        if(filetFileOutputDelimited_2.exists()){
            isFileGenerated_tFileOutputDelimited_2 = false;
        }
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);


resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row101");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row63Struct> tHash_Lookup_row63 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row63Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row63Struct>) 
					globalMap.get( "tHash_Lookup_row63" ))
					;					
					
	

row63Struct row63HashKey = new row63Struct();
row63Struct row63Default = new row63Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row64Struct> tHash_Lookup_row64 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row64Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row64Struct>) 
					globalMap.get( "tHash_Lookup_row64" ))
					;					
					
	

row64Struct row64HashKey = new row64Struct();
row64Struct row64Default = new row64Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out11Struct out11_tmp = new out11Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tUnite_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUnite_1", false);
		start_Hash.put("tUnite_1", System.currentTimeMillis());
		
	
	currentComponent="tUnite_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row92","row5");
					}
				
		int tos_count_tUnite_1 = 0;
		

int nb_line_tUnite_1 = 0;

 



/**
 * [tUnite_1 begin ] stop
 */
	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";
	
	
		int tos_count_tDBInput_3 = 0;
		
	


	
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				conn_tDBInput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
                boolean isTimeZoneNull_tDBInput_3 = false;
				boolean isConnectionWrapped_tDBInput_3 = !(conn_tDBInput_3 instanceof oracle.jdbc.OracleConnection) && conn_tDBInput_3.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tDBInput_3 = null;
                if (isConnectionWrapped_tDBInput_3) {
					unwrappedOraConn_tDBInput_3 = conn_tDBInput_3.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tDBInput_3 != null) {
                        isTimeZoneNull_tDBInput_3 = (unwrappedOraConn_tDBInput_3.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tDBInput_3 = (((oracle.jdbc.OracleConnection)conn_tDBInput_3).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tDBInput_3) {
					java.sql.Statement stmtGetTZ_tDBInput_3 = conn_tDBInput_3.createStatement();
					java.sql.ResultSet rsGetTZ_tDBInput_3 = stmtGetTZ_tDBInput_3.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tDBInput_3 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tDBInput_3.next()) {
						sessionTimezone_tDBInput_3 = rsGetTZ_tDBInput_3.getString(1);
					}
					if (isConnectionWrapped_tDBInput_3 && unwrappedOraConn_tDBInput_3 != null) {
                        unwrappedOraConn_tDBInput_3.setSessionTimeZone(sessionTimezone_tDBInput_3);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tDBInput_3).setSessionTimeZone(sessionTimezone_tDBInput_3);
                    }
				}
			
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tDBInput_3.setFetchSize(1000);


		    String dbquery_tDBInput_3 = "SELECT  BPER.FUERZA AS FUERZA_PACIENTE,\n        BPER.ESM_ADS_FUERZA AS FUERZA_ADS_PACIENTE ,\n        BPER.CODIGO_ESM_"
+"ADS AS CODIGO_ESM_ADS_PACIENTE ,\n        BPER.SIGLA_ESM_ADS AS SIGLA_ESM_ADS_PACIENTE,\n        BPER.NOMBRE_ESM_ADS AS "
+"NOMBRE_ESM_ADS_PACIENTE,\n        BGU.FUERZA_NOMBRE  AS FUERZA_ESM_ATENCION,\n        BGU.CODIGO AS CODIGO_DEL_PRESTADOR"
+",\n        BGU.SIGLA AS SIGLA_ESM_ATENCION,\n        BGU.NOMBRE AS NOMBRE_ESM_ATENCION,\n        BGU.DEPARTAMENTO AS DEP"
+"ARTAMENTO,\n        BGU.MUNICIPIO AS MUNICIPIO,\n        PRO.TDOCUMENTO_SIGLA AS TDOCUMENTO_PROFESIONAL,\n        PRO.DO"
+"CUMENTO AS DOCUMENTO_PROFESIONAL,\n        UPPER(ESP.NOMBRE) AS ESPECIALIDAD,         \n        BPER.TDOCUMENTO_SIGLA AS"
+" TDOCUMENTO_PACIENTE,\n        BPER.DOCUMENTO AS DOCUMENTO_PACIENTE,\n        BPER.PRIMER_NOMBRE AS PRIMER_NOMBRE,\n    "
+"    BPER.SEGUNDO_NOMBRE AS SEGUNDO_NOMBRE,\n        BPER.PRIMER_APELLIDO AS PRIMER_APELLIDO,\n        BPER.SEGUNDO_APELL"
+"IDO AS SEGUNDO_APELLIDO,\n        BPER.GENERO AS GENERO,\n        TO_CHAR(BPER.FECHA_NACIMIENTO,'DD/MM/YYYY') AS FECHA_N"
+"ACIMIENTO,\n        NULL AS PESO, \n        NULL AS TALLA,\n        trunc(months_between(TIM.FECHA,BPER.FECHA_NACIMIENTO"
+") / 12) AS EDAD_AÑOS,\n        trunc(months_between(TIM.FECHA,BPER.FECHA_NACIMIENTO)) AS EDAD_MESES,\n        BPER.GRADO"
+" AS GRADO,\n        BPER.CLASEGRD,\n        CI.TIPO_USUARIO AS TIPO_USUARIO,\n        BPER.FUERZA AS FUERZA_ADSCRIPCION,"
+"\n        BPER.NOMBRE_ESM_ADS AS ESM_ADSCRIPCION,        \n        TO_CHAR(CI.FECHAI_CITA, 'DD/MM/YYYY HH24:MI:SS' ) AS "
+"FECHA_CONSULTA,\n        NULL AS CUPS,\n        NULL AS FINALIDAD_CONSULTA,\n        NULL AS CAUSA_EXTERNA,\n        NUL"
+"L AS AMBITO,\n        NULL AS DIAG_PRINCIPAL,\n        NULL AS CODDIAGNOSTICO1,\n        NULL AS CODDIAGNOSTICO2,\n     "
+"   NULL AS CODDIAGNOSTICO3,\n        NULL AS TIPO_DIAGNOSTICO_PPAL,\n        'No' AS CUMPLIMIENTO_CITA,\n        'Inform"
+"ación generada SALUD.SIS' AS TIPO_GENERACION,\n        'Interna' AS TRIPS,\n        NULL AS IMC_VALOR,\n        NULL AS "
+"PABDOMINAL_VALOR     \nFROM BGEN_TIEMPOS TIM \nINNER JOIN BAGE_CITAS CI ON CI.TIEMPO_CITA = TIM.ID\nINNER JOIN BGEN_PERS"
+"ONAS BPER ON BPER.ID = CI.PERSONAS_ID \nINNER JOIN (   \n  SELECT ID, FUERZA_NOMBRE, SIGLA, \n         NOMBRE, CODIGO, D"
+"EPARTAMENTO, MUNICIPIO\n  FROM BGEN_UORG\n  START WITH ID = NVL ( COALESCE ('"+context.ESM_REMITE+"','"+context.FUERZA+"','"+context.ESM_USUARIO+"')\n                       ,( SELECT ID FROM BGEN_UORG WHERE TIPO_ORGANIZACION = 'DGSM' ) )\n  CONNECT BY PRIOR ID = pa"
+"dre_id\n) BGU ON BGU.ID = CI.ESM_ATENCION_ID\nLEFT JOIN BGEN_PERSONAS PRO ON PRO.ID = CI.PROFESIONALES_ID\nLEFT JOIN BGE"
+"N_ESPECIALIDADES ESP ON ESP.ID = CI.ESPECIALIDADES_ID\nWHERE CI.ESTADO_CITA = 'No asistió'\n  AND TIM.FECHA BETWEEN TO_D"
+"ATE('"+context.FECHA_INICIAL+"','DD/MM/YYYY')  \n  AND TO_DATE('"+context.FECHA_FINAL+"','DD/MM/YYYY')\nORDER BY TIM.FECHA ASC";
		    

		    globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);

		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row5.FUERZA_PACIENTE = null;
							} else {
	                         		
        	row5.FUERZA_PACIENTE = routines.system.JDBCUtil.getString(rs_tDBInput_3, 1, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row5.FUERZA_ADS_PACIENTE = null;
							} else {
	                         		
        	row5.FUERZA_ADS_PACIENTE = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								row5.CODIGO_ESM_ADS_PACIENTE = null;
							} else {
	                         		
        	row5.CODIGO_ESM_ADS_PACIENTE = routines.system.JDBCUtil.getString(rs_tDBInput_3, 3, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								row5.SIGLA_ESM_ADS_PACIENTE = null;
							} else {
	                         		
        	row5.SIGLA_ESM_ADS_PACIENTE = routines.system.JDBCUtil.getString(rs_tDBInput_3, 4, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 5) {
								row5.NOMBRE_ESM_ADS_PACIENTE = null;
							} else {
	                         		
        	row5.NOMBRE_ESM_ADS_PACIENTE = routines.system.JDBCUtil.getString(rs_tDBInput_3, 5, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 6) {
								row5.FUERZA_ESM_ATENCION = null;
							} else {
	                         		
        	row5.FUERZA_ESM_ATENCION = routines.system.JDBCUtil.getString(rs_tDBInput_3, 6, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 7) {
								row5.CODIGO_DEL_PRESTADOR = null;
							} else {
	                         		
        	row5.CODIGO_DEL_PRESTADOR = routines.system.JDBCUtil.getString(rs_tDBInput_3, 7, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 8) {
								row5.SIGLA_ESM_ATENCION = null;
							} else {
	                         		
        	row5.SIGLA_ESM_ATENCION = routines.system.JDBCUtil.getString(rs_tDBInput_3, 8, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 9) {
								row5.NOMBRE_ESM_ATENCION = null;
							} else {
	                         		
        	row5.NOMBRE_ESM_ATENCION = routines.system.JDBCUtil.getString(rs_tDBInput_3, 9, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 10) {
								row5.DEPARTAMENTO = null;
							} else {
	                         		
        	row5.DEPARTAMENTO = routines.system.JDBCUtil.getString(rs_tDBInput_3, 10, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 11) {
								row5.MUNICIPIO = null;
							} else {
	                         		
        	row5.MUNICIPIO = routines.system.JDBCUtil.getString(rs_tDBInput_3, 11, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 12) {
								row5.TDOCUMENTO_PROFESIONAL = null;
							} else {
	                         		
        	row5.TDOCUMENTO_PROFESIONAL = routines.system.JDBCUtil.getString(rs_tDBInput_3, 12, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 13) {
								row5.DOCUMENTO_PROFESIONAL = null;
							} else {
	                         		
        	row5.DOCUMENTO_PROFESIONAL = routines.system.JDBCUtil.getString(rs_tDBInput_3, 13, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 14) {
								row5.ESPECIALIDAD = null;
							} else {
	                         		
        	row5.ESPECIALIDAD = routines.system.JDBCUtil.getString(rs_tDBInput_3, 14, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 15) {
								row5.TDOCUMENTO_PACIENTE = null;
							} else {
	                         		
        	row5.TDOCUMENTO_PACIENTE = routines.system.JDBCUtil.getString(rs_tDBInput_3, 15, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 16) {
								row5.DOCUMENTO_PACIENTE = null;
							} else {
	                         		
        	row5.DOCUMENTO_PACIENTE = routines.system.JDBCUtil.getString(rs_tDBInput_3, 16, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 17) {
								row5.PRIMER_NOMBRE = null;
							} else {
	                         		
        	row5.PRIMER_NOMBRE = routines.system.JDBCUtil.getString(rs_tDBInput_3, 17, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 18) {
								row5.SEGUNDO_NOMBRE = null;
							} else {
	                         		
        	row5.SEGUNDO_NOMBRE = routines.system.JDBCUtil.getString(rs_tDBInput_3, 18, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 19) {
								row5.PRIMER_APELLIDO = null;
							} else {
	                         		
        	row5.PRIMER_APELLIDO = routines.system.JDBCUtil.getString(rs_tDBInput_3, 19, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 20) {
								row5.SEGUNDO_APELLIDO = null;
							} else {
	                         		
        	row5.SEGUNDO_APELLIDO = routines.system.JDBCUtil.getString(rs_tDBInput_3, 20, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 21) {
								row5.GENERO = null;
							} else {
	                         		
        	row5.GENERO = routines.system.JDBCUtil.getString(rs_tDBInput_3, 21, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 22) {
								row5.FECHA_NACIMIENTO = null;
							} else {
	                         		
        	row5.FECHA_NACIMIENTO = routines.system.JDBCUtil.getString(rs_tDBInput_3, 22, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 23) {
								row5.PESO = null;
							} else {
	                         		
        	row5.PESO = routines.system.JDBCUtil.getString(rs_tDBInput_3, 23, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 24) {
								row5.TALLA = null;
							} else {
	                         		
        	row5.TALLA = routines.system.JDBCUtil.getString(rs_tDBInput_3, 24, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 25) {
								row5.EDAD_A_OS = null;
							} else {
		                          
					if(rs_tDBInput_3.getObject(25) != null) {
						row5.EDAD_A_OS = rs_tDBInput_3.getBigDecimal(25);
					} else {
				
						row5.EDAD_A_OS = null;
					}
		                    }
							if(colQtyInRs_tDBInput_3 < 26) {
								row5.EDAD_MESES = null;
							} else {
		                          
					if(rs_tDBInput_3.getObject(26) != null) {
						row5.EDAD_MESES = rs_tDBInput_3.getBigDecimal(26);
					} else {
				
						row5.EDAD_MESES = null;
					}
		                    }
							if(colQtyInRs_tDBInput_3 < 27) {
								row5.GRADO = null;
							} else {
	                         		
        	row5.GRADO = routines.system.JDBCUtil.getString(rs_tDBInput_3, 27, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 28) {
								row5.CLASEGRD = null;
							} else {
	                         		
        	row5.CLASEGRD = routines.system.JDBCUtil.getString(rs_tDBInput_3, 28, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 29) {
								row5.TIPO_USUARIO = null;
							} else {
	                         		
        	row5.TIPO_USUARIO = routines.system.JDBCUtil.getString(rs_tDBInput_3, 29, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 30) {
								row5.FUERZA_ADSCRIPCION = null;
							} else {
	                         		
        	row5.FUERZA_ADSCRIPCION = routines.system.JDBCUtil.getString(rs_tDBInput_3, 30, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 31) {
								row5.ESM_ADSCRIPCION = null;
							} else {
	                         		
        	row5.ESM_ADSCRIPCION = routines.system.JDBCUtil.getString(rs_tDBInput_3, 31, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 32) {
								row5.FECHA_CONSULTA = null;
							} else {
	                         		
        	row5.FECHA_CONSULTA = routines.system.JDBCUtil.getString(rs_tDBInput_3, 32, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 33) {
								row5.CUPS = null;
							} else {
	                         		
        	row5.CUPS = routines.system.JDBCUtil.getString(rs_tDBInput_3, 33, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 34) {
								row5.FINALIDAD_CONSULTA = null;
							} else {
		                          
					if(rs_tDBInput_3.getObject(34) != null) {
						row5.FINALIDAD_CONSULTA = rs_tDBInput_3.getBigDecimal(34);
					} else {
				
						row5.FINALIDAD_CONSULTA = null;
					}
		                    }
							if(colQtyInRs_tDBInput_3 < 35) {
								row5.CAUSA_EXTERNA = null;
							} else {
		                          
					if(rs_tDBInput_3.getObject(35) != null) {
						row5.CAUSA_EXTERNA = rs_tDBInput_3.getBigDecimal(35);
					} else {
				
						row5.CAUSA_EXTERNA = null;
					}
		                    }
							if(colQtyInRs_tDBInput_3 < 36) {
								row5.AMBITO = null;
							} else {
	                         		
        	row5.AMBITO = routines.system.JDBCUtil.getString(rs_tDBInput_3, 36, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 37) {
								row5.DIAG_PRINCIPAL = null;
							} else {
	                         		
        	row5.DIAG_PRINCIPAL = routines.system.JDBCUtil.getString(rs_tDBInput_3, 37, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 38) {
								row5.CODDIAGNOSTICO1 = null;
							} else {
	                         		
        	row5.CODDIAGNOSTICO1 = routines.system.JDBCUtil.getString(rs_tDBInput_3, 38, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 39) {
								row5.CODDIAGNOSTICO2 = null;
							} else {
	                         		
        	row5.CODDIAGNOSTICO2 = routines.system.JDBCUtil.getString(rs_tDBInput_3, 39, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 40) {
								row5.CODDIAGNOSTICO3 = null;
							} else {
	                         		
        	row5.CODDIAGNOSTICO3 = routines.system.JDBCUtil.getString(rs_tDBInput_3, 40, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 41) {
								row5.TIPO_DIAGNOSTICO_PPAL = null;
							} else {
	                         		
        	row5.TIPO_DIAGNOSTICO_PPAL = routines.system.JDBCUtil.getString(rs_tDBInput_3, 41, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 42) {
								row5.CUMPLIMIENTO_CITA = null;
							} else {
	                         		
        	row5.CUMPLIMIENTO_CITA = routines.system.JDBCUtil.getString(rs_tDBInput_3, 42, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 43) {
								row5.TIPO_GENERACION = null;
							} else {
	                         		
        	row5.TIPO_GENERACION = routines.system.JDBCUtil.getString(rs_tDBInput_3, 43, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 44) {
								row5.TRIPS = null;
							} else {
	                         		
        	row5.TRIPS = routines.system.JDBCUtil.getString(rs_tDBInput_3, 44, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 45) {
								row5.IMC_VALOR = null;
							} else {
	                         		
        	row5.IMC_VALOR = routines.system.JDBCUtil.getString(rs_tDBInput_3, 45, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 46) {
								row5.PABDOMINAL_VALOR = null;
							} else {
	                         		
        	row5.PABDOMINAL_VALOR = routines.system.JDBCUtil.getString(rs_tDBInput_3, 46, false);
		                    }
					




 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"row5"
									
							);
						}
						
//////////
 

// for output
			row101 = new row101Struct();
								
			row101.FUERZA_PACIENTE = row5.FUERZA_PACIENTE;								
			row101.FUERZA_ADS_PACIENTE = row5.FUERZA_ADS_PACIENTE;								
			row101.CODIGO_ESM_ADS_PACIENTE = row5.CODIGO_ESM_ADS_PACIENTE;								
			row101.SIGLA_ESM_ADS_PACIENTE = row5.SIGLA_ESM_ADS_PACIENTE;								
			row101.NOMBRE_ESM_ADS_PACIENTE = row5.NOMBRE_ESM_ADS_PACIENTE;								
			row101.FUERZA_ESM_ATENCION = row5.FUERZA_ESM_ATENCION;								
			row101.CODIGO_DEL_PRESTADOR = row5.CODIGO_DEL_PRESTADOR;								
			row101.SIGLA_ESM_ATENCION = row5.SIGLA_ESM_ATENCION;								
			row101.NOMBRE_ESM_ATENCION = row5.NOMBRE_ESM_ATENCION;								
			row101.DEPARTAMENTO = row5.DEPARTAMENTO;								
			row101.MUNICIPIO = row5.MUNICIPIO;								
			row101.TDOCUMENTO_PROFESIONAL = row5.TDOCUMENTO_PROFESIONAL;								
			row101.DOCUMENTO_PROFESIONAL = row5.DOCUMENTO_PROFESIONAL;								
			row101.ESPECIALIDAD = row5.ESPECIALIDAD;								
			row101.TDOCUMENTO_PACIENTE = row5.TDOCUMENTO_PACIENTE;								
			row101.DOCUMENTO_PACIENTE = row5.DOCUMENTO_PACIENTE;								
			row101.PRIMER_NOMBRE = row5.PRIMER_NOMBRE;								
			row101.SEGUNDO_NOMBRE = row5.SEGUNDO_NOMBRE;								
			row101.PRIMER_APELLIDO = row5.PRIMER_APELLIDO;								
			row101.SEGUNDO_APELLIDO = row5.SEGUNDO_APELLIDO;								
			row101.GENERO = row5.GENERO;								
			row101.FECHA_NACIMIENTO = row5.FECHA_NACIMIENTO;								
			row101.PESO = row5.PESO;								
			row101.TALLA = row5.TALLA;								
			row101.EDAD_A_OS = row5.EDAD_A_OS;								
			row101.EDAD_MESES = row5.EDAD_MESES;								
			row101.GRADO = row5.GRADO;								
			row101.CLASEGRD = row5.CLASEGRD;								
			row101.TIPO_USUARIO = row5.TIPO_USUARIO;								
			row101.FUERZA_ADSCRIPCION = row5.FUERZA_ADSCRIPCION;								
			row101.ESM_ADSCRIPCION = row5.ESM_ADSCRIPCION;								
			row101.FECHA_CONSULTA = row5.FECHA_CONSULTA;								
			row101.CUPS = row5.CUPS;								
			row101.FINALIDAD_CONSULTA = row5.FINALIDAD_CONSULTA;								
			row101.CAUSA_EXTERNA = row5.CAUSA_EXTERNA;								
			row101.AMBITO = row5.AMBITO;								
			row101.DIAG_PRINCIPAL = row5.DIAG_PRINCIPAL;								
			row101.CODDIAGNOSTICO1 = row5.CODDIAGNOSTICO1;								
			row101.CODDIAGNOSTICO2 = row5.CODDIAGNOSTICO2;								
			row101.CODDIAGNOSTICO3 = row5.CODDIAGNOSTICO3;								
			row101.TIPO_DIAGNOSTICO_PPAL = row5.TIPO_DIAGNOSTICO_PPAL;								
			row101.CUMPLIMIENTO_CITA = row5.CUMPLIMIENTO_CITA;								
			row101.TIPO_GENERACION = row5.TIPO_GENERACION;								
			row101.TRIPS = row5.TRIPS;								
			row101.IMC_VALOR = row5.IMC_VALOR;								
			row101.PABDOMINAL_VALOR = row5.PABDOMINAL_VALOR;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row101"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
						row63Struct row63 = null;
					
						row64Struct row64 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row63" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow63 = false;
       		  	    	
       		  	    	
 							row63Struct row63ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row63HashKey.CODIGO = row101.CAUSA_EXTERNA ;
                        		    		

								
		                        	row63HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row63.lookup( row63HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row63 != null && tHash_Lookup_row63.getCount(row63HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row63' and it contains more one result from keys :  row63.CODIGO = '" + row63HashKey.CODIGO + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row63Struct fromLookup_row63 = null;
							row63 = row63Default;
										 
							
								 
							
							
								if (tHash_Lookup_row63 !=null && tHash_Lookup_row63.hasNext()) { // G 099
								
							
								
								fromLookup_row63 = tHash_Lookup_row63.next();

							
							
								} // G 099
							
							

							if(fromLookup_row63 != null) {
								row63 = fromLookup_row63;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row64" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow64 = false;
       		  	    	
       		  	    	
 							row64Struct row64ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row64HashKey.CODIGO = row101.FINALIDAD_CONSULTA ;
                        		    		

								
		                        	row64HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row64.lookup( row64HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row64 != null && tHash_Lookup_row64.getCount(row64HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row64' and it contains more one result from keys :  row64.CODIGO = '" + row64HashKey.CODIGO + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row64Struct fromLookup_row64 = null;
							row64 = row64Default;
										 
							
								 
							
							
								if (tHash_Lookup_row64 !=null && tHash_Lookup_row64.hasNext()) { // G 099
								
							
								
								fromLookup_row64 = tHash_Lookup_row64.next();

							
							
								} // G 099
							
							

							if(fromLookup_row64 != null) {
								row64 = fromLookup_row64;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out11 = null;


// # Output table : 'out11'
out11_tmp.FUERZA_PACIENTE = row101.FUERZA_PACIENTE;
out11_tmp.FUERZA_ADS_PACIENTE = row101.FUERZA_ADS_PACIENTE;
out11_tmp.CODIGO_ESM_ADS_PACIENTE = row101.CODIGO_ESM_ADS_PACIENTE;
out11_tmp.SIGLA_ESM_ADS_PACIENTE = row101.SIGLA_ESM_ADS_PACIENTE;
out11_tmp.NOMBRE_ESM_ADS_PACIENTE = row101.NOMBRE_ESM_ADS_PACIENTE;
out11_tmp.FUERZA_ESM_ATENCION = row101.FUERZA_ESM_ATENCION;
out11_tmp.CODIGO_DEL_PRESTADOR = row101.CODIGO_DEL_PRESTADOR;
out11_tmp.SIGLA_ESM = row101.SIGLA_ESM_ATENCION ;
out11_tmp.FUERZA = row101.FUERZA_ADSCRIPCION ;
out11_tmp.DEPARTAMENTO = row101.DEPARTAMENTO;
out11_tmp.MUNICIPIO = row101.MUNICIPIO;
out11_tmp.TDOCUMENTO_PROFESIONAL = row101.TDOCUMENTO_PROFESIONAL;
out11_tmp.DOCUMENTO_PROFESIONAL = row101.DOCUMENTO_PROFESIONAL;
out11_tmp.ESPECIALIDAD = row101.ESPECIALIDAD;
out11_tmp.TDOCUMENTO_PACIENTE = row101.TDOCUMENTO_PACIENTE;
out11_tmp.DOCUMENTO_PACIENTE = row101.DOCUMENTO_PACIENTE;
out11_tmp.PRIMER_NOMBRE = row101.PRIMER_NOMBRE;
out11_tmp.SEGUNDO_NOMBRE = row101.SEGUNDO_NOMBRE;
out11_tmp.PRIMER_APELLIDO = row101.PRIMER_APELLIDO;
out11_tmp.SEGUNDO_APELLIDO = row101.SEGUNDO_APELLIDO;
out11_tmp.GENERO = row101.GENERO;
out11_tmp.FECHA_NACIMIENTO = row101.FECHA_NACIMIENTO;
out11_tmp.PESO = row101.PESO;
out11_tmp.TALLA = row101.TALLA;
out11_tmp.EDAD_A_OS = row101.EDAD_A_OS;
out11_tmp.EDAD_MESES = row101.EDAD_MESES;
out11_tmp.CLASEGRD = row101.CLASEGRD;
out11_tmp.GRADO = row101.GRADO;
out11_tmp.TIPO_USUARIO = row101.TIPO_USUARIO;
out11_tmp.FECHA_CONSULTA = row101.FECHA_CONSULTA;
out11_tmp.CUPS = row101.CUPS;
out11_tmp.FINALIDAD_CONSULTA = row64.NOMBRE ;
out11_tmp.CAUSA_EXTERNA = row63.NOMBRE ;
out11_tmp.AMBITO = row101.AMBITO;
out11_tmp.DIAG_PRINCIPAL = row101.DIAG_PRINCIPAL;
out11_tmp.CODDIAGNOSTICO1 = row101.CODDIAGNOSTICO1;
out11_tmp.CODDIAGNOSTICO2 = row101.CODDIAGNOSTICO2;
out11_tmp.CODDIAGNOSTICO3 = row101.CODDIAGNOSTICO3;
out11_tmp.TIPO_DIAGNOSTICO_PPAL = row101.TIPO_DIAGNOSTICO_PPAL;
out11_tmp.CUMPLIMIENTO_CITA = row101.CUMPLIMIENTO_CITA;
out11_tmp.TIPO_GENERACION = row101.TIPO_GENERACION;
out11_tmp.IMC_VALOR = row101.IMC_VALOR;
out11_tmp.PABDOMINAL_VALOR = row101.PABDOMINAL_VALOR;
out11 = out11_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out11"
if(out11 != null) { 



	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out11"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(out11.FUERZA_PACIENTE != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.FUERZA_PACIENTE
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.FUERZA_ADS_PACIENTE != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.FUERZA_ADS_PACIENTE
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.CODIGO_ESM_ADS_PACIENTE != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.CODIGO_ESM_ADS_PACIENTE
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.SIGLA_ESM_ADS_PACIENTE != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.SIGLA_ESM_ADS_PACIENTE
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.NOMBRE_ESM_ADS_PACIENTE != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.NOMBRE_ESM_ADS_PACIENTE
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.FUERZA_ESM_ATENCION != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.FUERZA_ESM_ATENCION
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.CODIGO_DEL_PRESTADOR != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.CODIGO_DEL_PRESTADOR
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.SIGLA_ESM != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.SIGLA_ESM
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.FUERZA != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.FUERZA
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.DEPARTAMENTO != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.DEPARTAMENTO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.MUNICIPIO != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.MUNICIPIO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.TDOCUMENTO_PROFESIONAL != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.TDOCUMENTO_PROFESIONAL
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.DOCUMENTO_PROFESIONAL != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.DOCUMENTO_PROFESIONAL
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.ESPECIALIDAD != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.ESPECIALIDAD
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.TDOCUMENTO_PACIENTE != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.TDOCUMENTO_PACIENTE
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.DOCUMENTO_PACIENTE != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.DOCUMENTO_PACIENTE
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.PRIMER_NOMBRE != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.PRIMER_NOMBRE
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.SEGUNDO_NOMBRE != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.SEGUNDO_NOMBRE
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.PRIMER_APELLIDO != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.PRIMER_APELLIDO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.SEGUNDO_APELLIDO != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.SEGUNDO_APELLIDO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.GENERO != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.GENERO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.FECHA_NACIMIENTO != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.FECHA_NACIMIENTO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.PESO != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.PESO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.TALLA != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.TALLA
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.EDAD_A_OS != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.EDAD_A_OS.toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.EDAD_MESES != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.EDAD_MESES.toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.CLASEGRD != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.CLASEGRD
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.GRADO != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.GRADO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.TIPO_USUARIO != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.TIPO_USUARIO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.FECHA_CONSULTA != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.FECHA_CONSULTA
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.CUPS != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.CUPS
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.FINALIDAD_CONSULTA != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.FINALIDAD_CONSULTA
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.CAUSA_EXTERNA != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.CAUSA_EXTERNA
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.AMBITO != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.AMBITO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.DIAG_PRINCIPAL != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.DIAG_PRINCIPAL
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.CODDIAGNOSTICO1 != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.CODDIAGNOSTICO1
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.CODDIAGNOSTICO2 != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.CODDIAGNOSTICO2
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.CODDIAGNOSTICO3 != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.CODDIAGNOSTICO3
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.TIPO_DIAGNOSTICO_PPAL != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.TIPO_DIAGNOSTICO_PPAL
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.CUMPLIMIENTO_CITA != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.CUMPLIMIENTO_CITA
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.TIPO_GENERACION != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.TIPO_GENERACION
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.IMC_VALOR != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.IMC_VALOR
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.PABDOMINAL_VALOR != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.PABDOMINAL_VALOR
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */

} // End of branch "out11"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
}

globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);
 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */
	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";
	
	
		int tos_count_tDBInput_4 = 0;
		
	


	
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				conn_tDBInput_4 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
                boolean isTimeZoneNull_tDBInput_4 = false;
				boolean isConnectionWrapped_tDBInput_4 = !(conn_tDBInput_4 instanceof oracle.jdbc.OracleConnection) && conn_tDBInput_4.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tDBInput_4 = null;
                if (isConnectionWrapped_tDBInput_4) {
					unwrappedOraConn_tDBInput_4 = conn_tDBInput_4.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tDBInput_4 != null) {
                        isTimeZoneNull_tDBInput_4 = (unwrappedOraConn_tDBInput_4.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tDBInput_4 = (((oracle.jdbc.OracleConnection)conn_tDBInput_4).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tDBInput_4) {
					java.sql.Statement stmtGetTZ_tDBInput_4 = conn_tDBInput_4.createStatement();
					java.sql.ResultSet rsGetTZ_tDBInput_4 = stmtGetTZ_tDBInput_4.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tDBInput_4 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tDBInput_4.next()) {
						sessionTimezone_tDBInput_4 = rsGetTZ_tDBInput_4.getString(1);
					}
					if (isConnectionWrapped_tDBInput_4 && unwrappedOraConn_tDBInput_4 != null) {
                        unwrappedOraConn_tDBInput_4.setSessionTimeZone(sessionTimezone_tDBInput_4);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tDBInput_4).setSessionTimeZone(sessionTimezone_tDBInput_4);
                    }
				}
			
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tDBInput_4.setFetchSize(1000);


		    String dbquery_tDBInput_4 = "SELECT  BGF.NOMBRE AS FUERZA_PACIENTE,\n        BGP.ESM_ADS_FUERZA AS FUERZA_ADS_PACIENTE ,\n        BGP.CODIGO_ESM_ADS"
+" AS CODIGO_ESM_ADS_PACIENTE ,\n        BGP.SIGLA_ESM_ADS AS SIGLA_ESM_ADS_PACIENTE,\n        BGP.NOMBRE_ESM_ADS AS NOMBR"
+"E_ESM_ADS_PACIENTE,\n        BGU.FUERZA_NOMBRE  AS FUERZA_ESM_ATENCION,\n        RC.CODPRESTADOR AS CODIGO_DEL_PRESTADOR"
+",\n        BGU.SIGLA AS SIGLA_ESM_ATENCION,\n        BGU.NOMBRE AS NOMBRE_ESM_ATENCION,\n        BGU.DEPARTAMENTO AS DEP"
+"ARTAMENTO,\n        BGU.MUNICIPIO AS MUNICIPIO,\n        RC.TDOCUMENTO_PROFESIONAL AS TDOCUMENTO_PROFESIONAL,\n        R"
+"C.DOCUMENTO_PROFESIONAL AS DOCUMENTO_PROFESIONAL,\n        UPPER(RC.ESPECIALIDAD) AS ESPECIALIDAD,\n        RC.TDOCUMENT"
+"O AS TDOCUMENTO_PACIENTE,\n        RC.DOCUMENTO AS DOCUMENTO_PACIENTE,\n        BGP.PRIMER_NOMBRE AS PRIMER_NOMBRE,\n   "
+"     BGP.SEGUNDO_NOMBRE AS SEGUNDO_NOMBRE,\n        BGP.PRIMER_APELLIDO AS PRIMER_APELLIDO,\n        BGP.SEGUNDO_APELLID"
+"O AS SEGUNDO_APELLIDO,\n        BGP.GENERO AS GENERO,\n        TO_CHAR(BGP.FECHA_NACIMIENTO,'DD/MM/YYYY') AS FECHA_NACIM"
+"IENTO,\n        RC.PESO|| ' ' || RC.UMEDIDA_PESO AS PESO,\n        /*CASE \n         WHEN REGEXP_LIKE(REPLACE(RC.TALLA, "
+"',', '.'), '^[+-]?(\\d+|\\.\\d+|\\d+\\.\\d+)$') \n        THEN TO_NUMBER(REPLACE(RC.TALLA, ',', '.')) * 100 || ' cm'\n  "
+"      END AS TALLA,*/\n        '100 cm' AS TALLA,\n        trunc(months_between(RC.FECHA,BGP.FECHA_NACIMIENTO) / 12) AS "
+"EDAD_AÑOS,\n        trunc(months_between(RC.FECHA,BGP.FECHA_NACIMIENTO)) AS EDAD_MESES,\n        BGP.GRADO AS GRADO,\n  "
+"      BGP.CLASEGRD,\n        TIPO_USUARIO AS TIPO_USUARIO,\n        BGP.FUERZA AS FUERZA_ADSCRIPCION,\n        BGP.NOMBR"
+"E_ESM_ADS AS ESM_ADSCRIPCION,\n        TO_CHAR(RC.FECHA, 'DD/MM/YYYY HH24:MI:SS') AS FECHA_CONSULTA,\n        RC.CODCONS"
+"ULTA AS CUPS,\n        RC.FINALIDAD AS FINALIDAD_CONSULTA,\n        RC.CAUSA_EXTERNA AS CAUSA_EXTERNA,\n        CASE RC."
+"SERVICIO\n          WHEN 'U' THEN 'Urgencias'\n          WHEN 'HG' THEN 'Hospitalización'\n          WHEN 'A' THEN 'Ambu"
+"latorio'\n        END AS AMBITO,\n        RC.CODDIAGNOSTICOPPAL AS DIAG_PRINCIPAL,\n        RC.CODDIAGNOSTICO1 AS CODDIA"
+"GNOSTICO1,\n        RC.CODDIAGNOSTICO2 AS CODDIAGNOSTICO2,\n        RC.CODDIAGNOSTICO3 AS CODDIAGNOSTICO3,\n        CASE"
+" RC.TDIAGNOSTICO\n          WHEN 1 THEN 'Impresión diagnóstica' \n          WHEN 2 THEN 'Confirmado nuevo' \n          W"
+"HEN 3 THEN 'Confirmado repetido' \n        END AS TIPO_DIAGNOSTICO_PPAL,\n        NVL(RC.CUMPLIMIENTO_CITA, 'Si') AS CUM"
+"PLIMIENTO_CITA,\n        CASE \n          WHEN RC.TIPO_GENERACION  = 'Automatico' THEN 'Información generada SALUD.SIS'"
+"\n          WHEN RC.TIPO_GENERACION  = 'Cargue'  THEN 'Información cargada'\n          ELSE RC.TIPO_GENERACION\n        E"
+"ND AS TIPO_GENERACION,\n        RC.TRIPS,\n        RC.IMC_VALOR ||' '||RC.IMC_UMEDIDA AS IMC_VALOR,\n        RC.PABDOMIN"
+"AL_VALOR||' '||RC.PABDOMINAL_UMEDIDA AS PABDOMINAL_VALOR\nFROM BRIPS_CONSULTA RC \nINNER JOIN ( \n  SELECT ID FROM BGEN_"
+"UORG\n  START WITH ID = NVL ( COALESCE ('"+context.ESM_REMITE+"','"+context.FUERZA+"','"+context.ESM_USUARIO+"')\n                        ,( SELECT ID FROM BGEN_UORG WHERE TIPO_ORGANIZACION = 'DGSM' ) )\n  CONNECT BY PRIOR id = p"
+"adre_id\n) BGU1 ON BGU1.ID = RC.UORG_ID\nINNER JOIN BGEN_UORG BGU ON BGU.ID=BGU1.ID\nINNER JOIN BGEN_PERSONAS BGP ON BGP"
+".ID=RC.PERSONAS_ID\nINNER JOIN BGEN_FUERZAS BGF ON BGF.SIGLA = BGP.SIGLA_FUERZA\nWHERE RC.FECHA BETWEEN TO_DATE('"+context.FECHA_INICIAL+"','DD/MM/YYYY')  \n  AND TO_DATE('"+context.FECHA_FINAL+"','DD/MM/YYYY')+1\nORDER BY RC.FECHA ASC";
		    

		    globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);

		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								row92.FUERZA_PACIENTE = null;
							} else {
	                         		
        	row92.FUERZA_PACIENTE = routines.system.JDBCUtil.getString(rs_tDBInput_4, 1, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								row92.FUERZA_ADS_PACIENTE = null;
							} else {
	                         		
        	row92.FUERZA_ADS_PACIENTE = routines.system.JDBCUtil.getString(rs_tDBInput_4, 2, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								row92.CODIGO_ESM_ADS_PACIENTE = null;
							} else {
	                         		
        	row92.CODIGO_ESM_ADS_PACIENTE = routines.system.JDBCUtil.getString(rs_tDBInput_4, 3, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 4) {
								row92.SIGLA_ESM_ADS_PACIENTE = null;
							} else {
	                         		
        	row92.SIGLA_ESM_ADS_PACIENTE = routines.system.JDBCUtil.getString(rs_tDBInput_4, 4, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 5) {
								row92.NOMBRE_ESM_ADS_PACIENTE = null;
							} else {
	                         		
        	row92.NOMBRE_ESM_ADS_PACIENTE = routines.system.JDBCUtil.getString(rs_tDBInput_4, 5, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 6) {
								row92.FUERZA_ESM_ATENCION = null;
							} else {
	                         		
        	row92.FUERZA_ESM_ATENCION = routines.system.JDBCUtil.getString(rs_tDBInput_4, 6, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 7) {
								row92.CODIGO_DEL_PRESTADOR = null;
							} else {
	                         		
        	row92.CODIGO_DEL_PRESTADOR = routines.system.JDBCUtil.getString(rs_tDBInput_4, 7, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 8) {
								row92.SIGLA_ESM_ATENCION = null;
							} else {
	                         		
        	row92.SIGLA_ESM_ATENCION = routines.system.JDBCUtil.getString(rs_tDBInput_4, 8, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 9) {
								row92.NOMBRE_ESM_ATENCION = null;
							} else {
	                         		
        	row92.NOMBRE_ESM_ATENCION = routines.system.JDBCUtil.getString(rs_tDBInput_4, 9, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 10) {
								row92.DEPARTAMENTO = null;
							} else {
	                         		
        	row92.DEPARTAMENTO = routines.system.JDBCUtil.getString(rs_tDBInput_4, 10, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 11) {
								row92.MUNICIPIO = null;
							} else {
	                         		
        	row92.MUNICIPIO = routines.system.JDBCUtil.getString(rs_tDBInput_4, 11, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 12) {
								row92.TDOCUMENTO_PROFESIONAL = null;
							} else {
	                         		
        	row92.TDOCUMENTO_PROFESIONAL = routines.system.JDBCUtil.getString(rs_tDBInput_4, 12, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 13) {
								row92.DOCUMENTO_PROFESIONAL = null;
							} else {
	                         		
        	row92.DOCUMENTO_PROFESIONAL = routines.system.JDBCUtil.getString(rs_tDBInput_4, 13, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 14) {
								row92.ESPECIALIDAD = null;
							} else {
	                         		
        	row92.ESPECIALIDAD = routines.system.JDBCUtil.getString(rs_tDBInput_4, 14, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 15) {
								row92.TDOCUMENTO_PACIENTE = null;
							} else {
	                         		
        	row92.TDOCUMENTO_PACIENTE = routines.system.JDBCUtil.getString(rs_tDBInput_4, 15, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 16) {
								row92.DOCUMENTO_PACIENTE = null;
							} else {
	                         		
        	row92.DOCUMENTO_PACIENTE = routines.system.JDBCUtil.getString(rs_tDBInput_4, 16, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 17) {
								row92.PRIMER_NOMBRE = null;
							} else {
	                         		
        	row92.PRIMER_NOMBRE = routines.system.JDBCUtil.getString(rs_tDBInput_4, 17, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 18) {
								row92.SEGUNDO_NOMBRE = null;
							} else {
	                         		
        	row92.SEGUNDO_NOMBRE = routines.system.JDBCUtil.getString(rs_tDBInput_4, 18, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 19) {
								row92.PRIMER_APELLIDO = null;
							} else {
	                         		
        	row92.PRIMER_APELLIDO = routines.system.JDBCUtil.getString(rs_tDBInput_4, 19, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 20) {
								row92.SEGUNDO_APELLIDO = null;
							} else {
	                         		
        	row92.SEGUNDO_APELLIDO = routines.system.JDBCUtil.getString(rs_tDBInput_4, 20, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 21) {
								row92.GENERO = null;
							} else {
	                         		
        	row92.GENERO = routines.system.JDBCUtil.getString(rs_tDBInput_4, 21, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 22) {
								row92.FECHA_NACIMIENTO = null;
							} else {
	                         		
        	row92.FECHA_NACIMIENTO = routines.system.JDBCUtil.getString(rs_tDBInput_4, 22, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 23) {
								row92.PESO = null;
							} else {
	                         		
        	row92.PESO = routines.system.JDBCUtil.getString(rs_tDBInput_4, 23, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 24) {
								row92.TALLA = null;
							} else {
	                         		
        	row92.TALLA = routines.system.JDBCUtil.getString(rs_tDBInput_4, 24, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 25) {
								row92.EDAD_A_OS = null;
							} else {
		                          
					if(rs_tDBInput_4.getObject(25) != null) {
						row92.EDAD_A_OS = rs_tDBInput_4.getBigDecimal(25);
					} else {
				
						row92.EDAD_A_OS = null;
					}
		                    }
							if(colQtyInRs_tDBInput_4 < 26) {
								row92.EDAD_MESES = null;
							} else {
		                          
					if(rs_tDBInput_4.getObject(26) != null) {
						row92.EDAD_MESES = rs_tDBInput_4.getBigDecimal(26);
					} else {
				
						row92.EDAD_MESES = null;
					}
		                    }
							if(colQtyInRs_tDBInput_4 < 27) {
								row92.GRADO = null;
							} else {
	                         		
        	row92.GRADO = routines.system.JDBCUtil.getString(rs_tDBInput_4, 27, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 28) {
								row92.CLASEGRD = null;
							} else {
	                         		
        	row92.CLASEGRD = routines.system.JDBCUtil.getString(rs_tDBInput_4, 28, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 29) {
								row92.TIPO_USUARIO = null;
							} else {
	                         		
        	row92.TIPO_USUARIO = routines.system.JDBCUtil.getString(rs_tDBInput_4, 29, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 30) {
								row92.FUERZA_ADSCRIPCION = null;
							} else {
	                         		
        	row92.FUERZA_ADSCRIPCION = routines.system.JDBCUtil.getString(rs_tDBInput_4, 30, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 31) {
								row92.ESM_ADSCRIPCION = null;
							} else {
	                         		
        	row92.ESM_ADSCRIPCION = routines.system.JDBCUtil.getString(rs_tDBInput_4, 31, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 32) {
								row92.FECHA_CONSULTA = null;
							} else {
	                         		
        	row92.FECHA_CONSULTA = routines.system.JDBCUtil.getString(rs_tDBInput_4, 32, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 33) {
								row92.CUPS = null;
							} else {
	                         		
        	row92.CUPS = routines.system.JDBCUtil.getString(rs_tDBInput_4, 33, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 34) {
								row92.FINALIDAD_CONSULTA = null;
							} else {
		                          
					if(rs_tDBInput_4.getObject(34) != null) {
						row92.FINALIDAD_CONSULTA = rs_tDBInput_4.getBigDecimal(34);
					} else {
				
						row92.FINALIDAD_CONSULTA = null;
					}
		                    }
							if(colQtyInRs_tDBInput_4 < 35) {
								row92.CAUSA_EXTERNA = null;
							} else {
		                          
					if(rs_tDBInput_4.getObject(35) != null) {
						row92.CAUSA_EXTERNA = rs_tDBInput_4.getBigDecimal(35);
					} else {
				
						row92.CAUSA_EXTERNA = null;
					}
		                    }
							if(colQtyInRs_tDBInput_4 < 36) {
								row92.AMBITO = null;
							} else {
	                         		
        	row92.AMBITO = routines.system.JDBCUtil.getString(rs_tDBInput_4, 36, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 37) {
								row92.DIAG_PRINCIPAL = null;
							} else {
	                         		
        	row92.DIAG_PRINCIPAL = routines.system.JDBCUtil.getString(rs_tDBInput_4, 37, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 38) {
								row92.CODDIAGNOSTICO1 = null;
							} else {
	                         		
        	row92.CODDIAGNOSTICO1 = routines.system.JDBCUtil.getString(rs_tDBInput_4, 38, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 39) {
								row92.CODDIAGNOSTICO2 = null;
							} else {
	                         		
        	row92.CODDIAGNOSTICO2 = routines.system.JDBCUtil.getString(rs_tDBInput_4, 39, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 40) {
								row92.CODDIAGNOSTICO3 = null;
							} else {
	                         		
        	row92.CODDIAGNOSTICO3 = routines.system.JDBCUtil.getString(rs_tDBInput_4, 40, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 41) {
								row92.TIPO_DIAGNOSTICO_PPAL = null;
							} else {
	                         		
        	row92.TIPO_DIAGNOSTICO_PPAL = routines.system.JDBCUtil.getString(rs_tDBInput_4, 41, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 42) {
								row92.CUMPLIMIENTO_CITA = null;
							} else {
	                         		
        	row92.CUMPLIMIENTO_CITA = routines.system.JDBCUtil.getString(rs_tDBInput_4, 42, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 43) {
								row92.TIPO_GENERACION = null;
							} else {
	                         		
        	row92.TIPO_GENERACION = routines.system.JDBCUtil.getString(rs_tDBInput_4, 43, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 44) {
								row92.TRIPS = null;
							} else {
	                         		
        	row92.TRIPS = routines.system.JDBCUtil.getString(rs_tDBInput_4, 44, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 45) {
								row92.IMC_VALOR = null;
							} else {
	                         		
        	row92.IMC_VALOR = routines.system.JDBCUtil.getString(rs_tDBInput_4, 45, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 46) {
								row92.PABDOMINAL_VALOR = null;
							} else {
	                         		
        	row92.PABDOMINAL_VALOR = routines.system.JDBCUtil.getString(rs_tDBInput_4, 46, false);
		                    }
					




 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";
	
	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";
	
	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"row92"
									
							);
						}
						
//////////
 

// for output
			row101 = new row101Struct();
								
			row101.FUERZA_PACIENTE = row92.FUERZA_PACIENTE;								
			row101.FUERZA_ADS_PACIENTE = row92.FUERZA_ADS_PACIENTE;								
			row101.CODIGO_ESM_ADS_PACIENTE = row92.CODIGO_ESM_ADS_PACIENTE;								
			row101.SIGLA_ESM_ADS_PACIENTE = row92.SIGLA_ESM_ADS_PACIENTE;								
			row101.NOMBRE_ESM_ADS_PACIENTE = row92.NOMBRE_ESM_ADS_PACIENTE;								
			row101.FUERZA_ESM_ATENCION = row92.FUERZA_ESM_ATENCION;								
			row101.CODIGO_DEL_PRESTADOR = row92.CODIGO_DEL_PRESTADOR;								
			row101.SIGLA_ESM_ATENCION = row92.SIGLA_ESM_ATENCION;								
			row101.NOMBRE_ESM_ATENCION = row92.NOMBRE_ESM_ATENCION;								
			row101.DEPARTAMENTO = row92.DEPARTAMENTO;								
			row101.MUNICIPIO = row92.MUNICIPIO;								
			row101.TDOCUMENTO_PROFESIONAL = row92.TDOCUMENTO_PROFESIONAL;								
			row101.DOCUMENTO_PROFESIONAL = row92.DOCUMENTO_PROFESIONAL;								
			row101.ESPECIALIDAD = row92.ESPECIALIDAD;								
			row101.TDOCUMENTO_PACIENTE = row92.TDOCUMENTO_PACIENTE;								
			row101.DOCUMENTO_PACIENTE = row92.DOCUMENTO_PACIENTE;								
			row101.PRIMER_NOMBRE = row92.PRIMER_NOMBRE;								
			row101.SEGUNDO_NOMBRE = row92.SEGUNDO_NOMBRE;								
			row101.PRIMER_APELLIDO = row92.PRIMER_APELLIDO;								
			row101.SEGUNDO_APELLIDO = row92.SEGUNDO_APELLIDO;								
			row101.GENERO = row92.GENERO;								
			row101.FECHA_NACIMIENTO = row92.FECHA_NACIMIENTO;								
			row101.PESO = row92.PESO;								
			row101.TALLA = row92.TALLA;								
			row101.EDAD_A_OS = row92.EDAD_A_OS;								
			row101.EDAD_MESES = row92.EDAD_MESES;								
			row101.GRADO = row92.GRADO;								
			row101.CLASEGRD = row92.CLASEGRD;								
			row101.TIPO_USUARIO = row92.TIPO_USUARIO;								
			row101.FUERZA_ADSCRIPCION = row92.FUERZA_ADSCRIPCION;								
			row101.ESM_ADSCRIPCION = row92.ESM_ADSCRIPCION;								
			row101.FECHA_CONSULTA = row92.FECHA_CONSULTA;								
			row101.CUPS = row92.CUPS;								
			row101.FINALIDAD_CONSULTA = row92.FINALIDAD_CONSULTA;								
			row101.CAUSA_EXTERNA = row92.CAUSA_EXTERNA;								
			row101.AMBITO = row92.AMBITO;								
			row101.DIAG_PRINCIPAL = row92.DIAG_PRINCIPAL;								
			row101.CODDIAGNOSTICO1 = row92.CODDIAGNOSTICO1;								
			row101.CODDIAGNOSTICO2 = row92.CODDIAGNOSTICO2;								
			row101.CODDIAGNOSTICO3 = row92.CODDIAGNOSTICO3;								
			row101.TIPO_DIAGNOSTICO_PPAL = row92.TIPO_DIAGNOSTICO_PPAL;								
			row101.CUMPLIMIENTO_CITA = row92.CUMPLIMIENTO_CITA;								
			row101.TIPO_GENERACION = row92.TIPO_GENERACION;								
			row101.TRIPS = row92.TRIPS;								
			row101.IMC_VALOR = row92.IMC_VALOR;								
			row101.PABDOMINAL_VALOR = row92.PABDOMINAL_VALOR;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row101"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
						row63Struct row63 = null;
					
						row64Struct row64 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row63" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow63 = false;
       		  	    	
       		  	    	
 							row63Struct row63ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row63HashKey.CODIGO = row101.CAUSA_EXTERNA ;
                        		    		

								
		                        	row63HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row63.lookup( row63HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row63 != null && tHash_Lookup_row63.getCount(row63HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row63' and it contains more one result from keys :  row63.CODIGO = '" + row63HashKey.CODIGO + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row63Struct fromLookup_row63 = null;
							row63 = row63Default;
										 
							
								 
							
							
								if (tHash_Lookup_row63 !=null && tHash_Lookup_row63.hasNext()) { // G 099
								
							
								
								fromLookup_row63 = tHash_Lookup_row63.next();

							
							
								} // G 099
							
							

							if(fromLookup_row63 != null) {
								row63 = fromLookup_row63;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row64" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow64 = false;
       		  	    	
       		  	    	
 							row64Struct row64ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row64HashKey.CODIGO = row101.FINALIDAD_CONSULTA ;
                        		    		

								
		                        	row64HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row64.lookup( row64HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row64 != null && tHash_Lookup_row64.getCount(row64HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row64' and it contains more one result from keys :  row64.CODIGO = '" + row64HashKey.CODIGO + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row64Struct fromLookup_row64 = null;
							row64 = row64Default;
										 
							
								 
							
							
								if (tHash_Lookup_row64 !=null && tHash_Lookup_row64.hasNext()) { // G 099
								
							
								
								fromLookup_row64 = tHash_Lookup_row64.next();

							
							
								} // G 099
							
							

							if(fromLookup_row64 != null) {
								row64 = fromLookup_row64;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out11 = null;


// # Output table : 'out11'
out11_tmp.FUERZA_PACIENTE = row101.FUERZA_PACIENTE;
out11_tmp.FUERZA_ADS_PACIENTE = row101.FUERZA_ADS_PACIENTE;
out11_tmp.CODIGO_ESM_ADS_PACIENTE = row101.CODIGO_ESM_ADS_PACIENTE;
out11_tmp.SIGLA_ESM_ADS_PACIENTE = row101.SIGLA_ESM_ADS_PACIENTE;
out11_tmp.NOMBRE_ESM_ADS_PACIENTE = row101.NOMBRE_ESM_ADS_PACIENTE;
out11_tmp.FUERZA_ESM_ATENCION = row101.FUERZA_ESM_ATENCION;
out11_tmp.CODIGO_DEL_PRESTADOR = row101.CODIGO_DEL_PRESTADOR;
out11_tmp.SIGLA_ESM = row101.SIGLA_ESM_ATENCION ;
out11_tmp.FUERZA = row101.FUERZA_ADSCRIPCION ;
out11_tmp.DEPARTAMENTO = row101.DEPARTAMENTO;
out11_tmp.MUNICIPIO = row101.MUNICIPIO;
out11_tmp.TDOCUMENTO_PROFESIONAL = row101.TDOCUMENTO_PROFESIONAL;
out11_tmp.DOCUMENTO_PROFESIONAL = row101.DOCUMENTO_PROFESIONAL;
out11_tmp.ESPECIALIDAD = row101.ESPECIALIDAD;
out11_tmp.TDOCUMENTO_PACIENTE = row101.TDOCUMENTO_PACIENTE;
out11_tmp.DOCUMENTO_PACIENTE = row101.DOCUMENTO_PACIENTE;
out11_tmp.PRIMER_NOMBRE = row101.PRIMER_NOMBRE;
out11_tmp.SEGUNDO_NOMBRE = row101.SEGUNDO_NOMBRE;
out11_tmp.PRIMER_APELLIDO = row101.PRIMER_APELLIDO;
out11_tmp.SEGUNDO_APELLIDO = row101.SEGUNDO_APELLIDO;
out11_tmp.GENERO = row101.GENERO;
out11_tmp.FECHA_NACIMIENTO = row101.FECHA_NACIMIENTO;
out11_tmp.PESO = row101.PESO;
out11_tmp.TALLA = row101.TALLA;
out11_tmp.EDAD_A_OS = row101.EDAD_A_OS;
out11_tmp.EDAD_MESES = row101.EDAD_MESES;
out11_tmp.CLASEGRD = row101.CLASEGRD;
out11_tmp.GRADO = row101.GRADO;
out11_tmp.TIPO_USUARIO = row101.TIPO_USUARIO;
out11_tmp.FECHA_CONSULTA = row101.FECHA_CONSULTA;
out11_tmp.CUPS = row101.CUPS;
out11_tmp.FINALIDAD_CONSULTA = row64.NOMBRE ;
out11_tmp.CAUSA_EXTERNA = row63.NOMBRE ;
out11_tmp.AMBITO = row101.AMBITO;
out11_tmp.DIAG_PRINCIPAL = row101.DIAG_PRINCIPAL;
out11_tmp.CODDIAGNOSTICO1 = row101.CODDIAGNOSTICO1;
out11_tmp.CODDIAGNOSTICO2 = row101.CODDIAGNOSTICO2;
out11_tmp.CODDIAGNOSTICO3 = row101.CODDIAGNOSTICO3;
out11_tmp.TIPO_DIAGNOSTICO_PPAL = row101.TIPO_DIAGNOSTICO_PPAL;
out11_tmp.CUMPLIMIENTO_CITA = row101.CUMPLIMIENTO_CITA;
out11_tmp.TIPO_GENERACION = row101.TIPO_GENERACION;
out11_tmp.IMC_VALOR = row101.IMC_VALOR;
out11_tmp.PABDOMINAL_VALOR = row101.PABDOMINAL_VALOR;
out11 = out11_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out11"
if(out11 != null) { 



	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out11"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(out11.FUERZA_PACIENTE != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.FUERZA_PACIENTE
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.FUERZA_ADS_PACIENTE != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.FUERZA_ADS_PACIENTE
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.CODIGO_ESM_ADS_PACIENTE != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.CODIGO_ESM_ADS_PACIENTE
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.SIGLA_ESM_ADS_PACIENTE != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.SIGLA_ESM_ADS_PACIENTE
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.NOMBRE_ESM_ADS_PACIENTE != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.NOMBRE_ESM_ADS_PACIENTE
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.FUERZA_ESM_ATENCION != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.FUERZA_ESM_ATENCION
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.CODIGO_DEL_PRESTADOR != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.CODIGO_DEL_PRESTADOR
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.SIGLA_ESM != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.SIGLA_ESM
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.FUERZA != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.FUERZA
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.DEPARTAMENTO != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.DEPARTAMENTO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.MUNICIPIO != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.MUNICIPIO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.TDOCUMENTO_PROFESIONAL != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.TDOCUMENTO_PROFESIONAL
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.DOCUMENTO_PROFESIONAL != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.DOCUMENTO_PROFESIONAL
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.ESPECIALIDAD != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.ESPECIALIDAD
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.TDOCUMENTO_PACIENTE != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.TDOCUMENTO_PACIENTE
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.DOCUMENTO_PACIENTE != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.DOCUMENTO_PACIENTE
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.PRIMER_NOMBRE != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.PRIMER_NOMBRE
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.SEGUNDO_NOMBRE != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.SEGUNDO_NOMBRE
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.PRIMER_APELLIDO != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.PRIMER_APELLIDO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.SEGUNDO_APELLIDO != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.SEGUNDO_APELLIDO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.GENERO != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.GENERO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.FECHA_NACIMIENTO != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.FECHA_NACIMIENTO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.PESO != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.PESO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.TALLA != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.TALLA
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.EDAD_A_OS != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.EDAD_A_OS.toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.EDAD_MESES != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.EDAD_MESES.toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.CLASEGRD != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.CLASEGRD
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.GRADO != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.GRADO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.TIPO_USUARIO != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.TIPO_USUARIO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.FECHA_CONSULTA != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.FECHA_CONSULTA
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.CUPS != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.CUPS
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.FINALIDAD_CONSULTA != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.FINALIDAD_CONSULTA
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.CAUSA_EXTERNA != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.CAUSA_EXTERNA
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.AMBITO != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.AMBITO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.DIAG_PRINCIPAL != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.DIAG_PRINCIPAL
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.CODDIAGNOSTICO1 != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.CODDIAGNOSTICO1
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.CODDIAGNOSTICO2 != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.CODDIAGNOSTICO2
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.CODDIAGNOSTICO3 != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.CODDIAGNOSTICO3
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.TIPO_DIAGNOSTICO_PPAL != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.TIPO_DIAGNOSTICO_PPAL
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.CUMPLIMIENTO_CITA != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.CUMPLIMIENTO_CITA
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.TIPO_GENERACION != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.TIPO_GENERACION
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.IMC_VALOR != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.IMC_VALOR
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out11.PABDOMINAL_VALOR != null) {
                        sb_tFileOutputDelimited_2.append(
                            out11.PABDOMINAL_VALOR
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */

} // End of branch "out11"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";
	
	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";
	
	

}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
}

globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);
 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */
	
	/**
	 * [tUnite_1 end ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row92","row5");
			  	}
			  	
 

ok_Hash.put("tUnite_1", true);
end_Hash.put("tUnite_1", System.currentTimeMillis());




/**
 * [tUnite_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row63 != null) {
						tHash_Lookup_row63.endGet();
					}
					globalMap.remove( "tHash_Lookup_row63" );

					
					
				
					if(tHash_Lookup_row64 != null) {
						tHash_Lookup_row64.endGet();
					}
					globalMap.remove( "tHash_Lookup_row64" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row101");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	



		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out11");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tFileArchive_1Process(globalMap);



/**
 * [tFileOutputDelimited_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row63"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row64"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 



/**
 * [tDBInput_3 finally ] stop
 */
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";
	
	

 



/**
 * [tDBInput_4 finally ] stop
 */
	
	/**
	 * [tUnite_1 finally ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public void tFileArchive_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_1", false);
		start_Hash.put("tFileArchive_1", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_1";
	
	
		int tos_count_tFileArchive_1 = 0;
		

 



/**
 * [tFileArchive_1 begin ] stop
 */
	
	/**
	 * [tFileArchive_1 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";
	
	

	

		String sourceFile_tFileArchive_1 = context.CARPETA_SALIDA;
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_1), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_1 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_1 = context.CARPETA_SALIDA+"/"+context.NOMBRE_ZIP;
    
    com.talend.compress.zip.Zip zip_tFileArchive_1 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_1, zipFile_tFileArchive_1);
    zip_tFileArchive_1.setOverwriteExistTargetZip(true);
	zip_tFileArchive_1.setMakeTargetDir(false);
	zip_tFileArchive_1.setCompressLevel(4);
	zip_tFileArchive_1.setArchiveFormat("zip");
	zip_tFileArchive_1.setAllFiles(true);
	
	
	   zip_tFileArchive_1.setContainSubDir(true);
	   zip_tFileArchive_1.setEncoding("ISO-8859-15");
	   zip_tFileArchive_1.setZip64Mode("ASNEEDED");
	   zip_tFileArchive_1.setEncrypted(false);
		        
	   
	    
	    
	final String decryptedPassword_tFileArchive_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:ob2rzyaeDpD9HAXBH54MyVmtIb2RAF0OwvsAYQ==");
	    
	   zip_tFileArchive_1.setPassword(decryptedPassword_tFileArchive_1);
	   
	      zip_tFileArchive_1.setUseZip4jEncryption(true);

	      
	   	  zip_tFileArchive_1.setEncryptionMethod("ZIP_STANDARD");
	   	  
  
  
   globalMap.put("tFileArchive_1_ARCHIVE_FILEPATH",zipFile_tFileArchive_1);
   
   globalMap.put("tFileArchive_1_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_1).getName());

   zip_tFileArchive_1.doZip();


 


	tos_count_tFileArchive_1++;

/**
 * [tFileArchive_1 main ] stop
 */
	
	/**
	 * [tFileArchive_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";
	
	

 



/**
 * [tFileArchive_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";
	
	

 



/**
 * [tFileArchive_1 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_1 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";
	
	

 

ok_Hash.put("tFileArchive_1", true);
end_Hash.put("tFileArchive_1", System.currentTimeMillis());




/**
 * [tFileArchive_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileArchive_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tFileDelete_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_1 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";
	
	

 



/**
 * [tFileArchive_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_1_SUBPROCESS_STATE", 1);
	}
	


public void tFileDelete_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileDelete_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_1", false);
		start_Hash.put("tFileDelete_1", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_1";
	
	
		int tos_count_tFileDelete_1 = 0;
		

 



/**
 * [tFileDelete_1 begin ] stop
 */
	
	/**
	 * [tFileDelete_1 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	

 

class DeleteFoldertFileDelete_1{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
    java.io.File file_tFileDelete_1=new java.io.File(context.CARPETA_SALIDA+"/"+context.NOMBRE_CSV);
    if(file_tFileDelete_1.exists()&& file_tFileDelete_1.isFile()){
    	if(file_tFileDelete_1.delete()){
    		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File deleted.");
		}else{
			globalMap.put("tFileDelete_1_CURRENT_STATUS", "No file deleted.");
				throw new RuntimeException("File " + file_tFileDelete_1.getAbsolutePath() + " can not be deleted.");
		}
	}else{
		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File does not exist or is invalid.");
			throw new RuntimeException("File " + file_tFileDelete_1.getAbsolutePath() + " does not exist or is invalid or is not a file.");
	}
	globalMap.put("tFileDelete_1_DELETE_PATH",context.CARPETA_SALIDA+"/"+context.NOMBRE_CSV);
 


	tos_count_tFileDelete_1++;

/**
 * [tFileDelete_1 main ] stop
 */
	
	/**
	 * [tFileDelete_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	

 



/**
 * [tFileDelete_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileDelete_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	

 



/**
 * [tFileDelete_1 process_data_end ] stop
 */
	
	/**
	 * [tFileDelete_1 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	

 

ok_Hash.put("tFileDelete_1", true);
end_Hash.put("tFileDelete_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tFileList_1Process(globalMap);



/**
 * [tFileDelete_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileDelete_1 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	

 



/**
 * [tFileDelete_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 1);
	}
	


public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[0];
    static byte[] commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE_;

				public String getNOMBRE_ () {
					return this.NOMBRE_;
				}

				public Boolean NOMBRE_IsNullable(){
				    return true;
				}
				public Boolean NOMBRE_IsKey(){
				    return false;
				}
				public Integer NOMBRE_Length(){
				    return null;
				}
				public Integer NOMBRE_Precision(){
				    return null;
				}
				public String NOMBRE_Default(){
				
					return null;
				
				}
				public String NOMBRE_Comment(){
				
				    return "";
				
				}
				public String NOMBRE_Pattern(){
				
					return "";
				
				}
				public String NOMBRE_OriginalDbColumnName(){
				
					return "NOMBRE_";
				
				}

				
			    public Object CONTENIDO_;

				public Object getCONTENIDO_ () {
					return this.CONTENIDO_;
				}

				public Boolean CONTENIDO_IsNullable(){
				    return true;
				}
				public Boolean CONTENIDO_IsKey(){
				    return false;
				}
				public Integer CONTENIDO_Length(){
				    return null;
				}
				public Integer CONTENIDO_Precision(){
				    return null;
				}
				public String CONTENIDO_Default(){
				
					return null;
				
				}
				public String CONTENIDO_Comment(){
				
				    return "";
				
				}
				public String CONTENIDO_Pattern(){
				
					return "";
				
				}
				public String CONTENIDO_OriginalDbColumnName(){
				
					return "CONTENIDO_";
				
				}

				
			    public String TCONTENIDO_;

				public String getTCONTENIDO_ () {
					return this.TCONTENIDO_;
				}

				public Boolean TCONTENIDO_IsNullable(){
				    return true;
				}
				public Boolean TCONTENIDO_IsKey(){
				    return false;
				}
				public Integer TCONTENIDO_Length(){
				    return null;
				}
				public Integer TCONTENIDO_Precision(){
				    return null;
				}
				public String TCONTENIDO_Default(){
				
					return null;
				
				}
				public String TCONTENIDO_Comment(){
				
				    return "";
				
				}
				public String TCONTENIDO_Pattern(){
				
					return "";
				
				}
				public String TCONTENIDO_OriginalDbColumnName(){
				
					return "TCONTENIDO_";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length) {
				if(length < 1024 && commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length == 0) {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[1024];
				} else {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length);
			strReturn = new String(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length) {
				if(length < 1024 && commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length == 0) {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[1024];
				} else {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length);
			strReturn = new String(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE_ = readString(dis);
					
						this.CONTENIDO_ = (Object) dis.readObject();
					
					this.TCONTENIDO_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE_ = readString(dis);
					
						this.CONTENIDO_ = (Object) dis.readObject();
					
					this.TCONTENIDO_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE_,dos);
					
					// Object
				
       			    	dos.writeObject(this.CONTENIDO_);
					
					// String
				
						writeString(this.TCONTENIDO_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE_,dos);
					
					// Object
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTENIDO_);
					
					// String
				
						writeString(this.TCONTENIDO_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE_="+NOMBRE_);
		sb.append(",CONTENIDO_="+String.valueOf(CONTENIDO_));
		sb.append(",TCONTENIDO_="+TCONTENIDO_);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class outSolicitudArchivoStruct implements routines.system.IPersistableRow<outSolicitudArchivoStruct> {
    final static byte[] commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[0];
    static byte[] commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE_;

				public String getNOMBRE_ () {
					return this.NOMBRE_;
				}

				public Boolean NOMBRE_IsNullable(){
				    return true;
				}
				public Boolean NOMBRE_IsKey(){
				    return false;
				}
				public Integer NOMBRE_Length(){
				    return null;
				}
				public Integer NOMBRE_Precision(){
				    return null;
				}
				public String NOMBRE_Default(){
				
					return null;
				
				}
				public String NOMBRE_Comment(){
				
				    return "";
				
				}
				public String NOMBRE_Pattern(){
				
					return "";
				
				}
				public String NOMBRE_OriginalDbColumnName(){
				
					return "NOMBRE_";
				
				}

				
			    public byte[] CONTENIDO_;

				public byte[] getCONTENIDO_ () {
					return this.CONTENIDO_;
				}

				public Boolean CONTENIDO_IsNullable(){
				    return true;
				}
				public Boolean CONTENIDO_IsKey(){
				    return false;
				}
				public Integer CONTENIDO_Length(){
				    return null;
				}
				public Integer CONTENIDO_Precision(){
				    return null;
				}
				public String CONTENIDO_Default(){
				
					return null;
				
				}
				public String CONTENIDO_Comment(){
				
				    return "";
				
				}
				public String CONTENIDO_Pattern(){
				
					return "";
				
				}
				public String CONTENIDO_OriginalDbColumnName(){
				
					return "CONTENIDO_";
				
				}

				
			    public String TCONTENIDO_;

				public String getTCONTENIDO_ () {
					return this.TCONTENIDO_;
				}

				public Boolean TCONTENIDO_IsNullable(){
				    return true;
				}
				public Boolean TCONTENIDO_IsKey(){
				    return false;
				}
				public Integer TCONTENIDO_Length(){
				    return null;
				}
				public Integer TCONTENIDO_Precision(){
				    return null;
				}
				public String TCONTENIDO_Default(){
				
					return null;
				
				}
				public String TCONTENIDO_Comment(){
				
				    return "";
				
				}
				public String TCONTENIDO_Pattern(){
				
					return "";
				
				}
				public String TCONTENIDO_OriginalDbColumnName(){
				
					return "TCONTENIDO_";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length) {
				if(length < 1024 && commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length == 0) {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[1024];
				} else {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length);
			strReturn = new String(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length) {
				if(length < 1024 && commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length == 0) {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[1024];
				} else {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length);
			strReturn = new String(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private byte[] readByteArray(ObjectInputStream dis) throws IOException{
		byte[] byteArrayReturn;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			byteArrayReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.readFully(byteArray);
			byteArrayReturn = byteArray;
		}
		return byteArrayReturn;
	}
	
	private byte[] readByteArray(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		byte[] byteArrayReturn;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			byteArrayReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.readFully(byteArray);
			byteArrayReturn = byteArray;
		}
		return byteArrayReturn;
	}

    private void writeByteArray(byte[] byteArray, ObjectOutputStream dos) throws IOException{
		if(byteArray == null) {
            dos.writeInt(-1);
		} else {
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeByteArray(byte[] byteArray, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(byteArray == null) {
			marshaller.writeInt(-1);
		} else {
			marshaller.writeInt(byteArray.length);
			marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE_ = readString(dis);
					
					this.CONTENIDO_ = readByteArray(dis);
					
					this.TCONTENIDO_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE_ = readString(dis);
					
					this.CONTENIDO_ = readByteArray(dis);
					
					this.TCONTENIDO_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE_,dos);
					
					// byte[]
				
						writeByteArray(this.CONTENIDO_,dos);
					
					// String
				
						writeString(this.TCONTENIDO_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE_,dos);
					
					// byte[]
				
						writeByteArray(this.CONTENIDO_,dos);
					
					// String
				
						writeString(this.TCONTENIDO_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE_="+NOMBRE_);
		sb.append(",CONTENIDO_="+String.valueOf(CONTENIDO_));
		sb.append(",TCONTENIDO_="+TCONTENIDO_);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outSolicitudArchivoStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[0];
    static byte[] commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[0];

	
			    public String filepath;

				public String getFilepath () {
					return this.filepath;
				}

				public Boolean filepathIsNullable(){
				    return true;
				}
				public Boolean filepathIsKey(){
				    return false;
				}
				public Integer filepathLength(){
				    return 0;
				}
				public Integer filepathPrecision(){
				    return 0;
				}
				public String filepathDefault(){
				
					return null;
				
				}
				public String filepathComment(){
				
				    return "";
				
				}
				public String filepathPattern(){
				
					return "";
				
				}
				public String filepathOriginalDbColumnName(){
				
					return "filepath";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length) {
				if(length < 1024 && commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length == 0) {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[1024];
				} else {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length);
			strReturn = new String(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length) {
				if(length < 1024 && commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS.length == 0) {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[1024];
				} else {
   					commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length);
			strReturn = new String(commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS) {

        	try {

        		int length = 0;
		
					this.filepath = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS) {

        	try {

        		int length = 0;
		
					this.filepath = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.filepath,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.filepath,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("filepath="+filepath);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileList_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();
outSolicitudArchivoStruct outSolicitudArchivo = new outSolicitudArchivoStruct();
row7Struct row7 = new row7Struct();



	
	/**
	 * [tFileList_1 begin ] start
	 */

				
			int NB_ITERATE_tFixedFlowInput_1 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_1", false);
		start_Hash.put("tFileList_1", System.currentTimeMillis());
		
	
	currentComponent="tFileList_1";
	
	
		int tos_count_tFileList_1 = 0;
		
	
 
     
    
  String directory_tFileList_1 = context.CARPETA_SALIDA+"/";
  final java.util.List<String> maskList_tFileList_1 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_1 = new java.util.ArrayList<java.util.regex.Pattern>();
      maskList_tFileList_1.add("*");  
  for (final String filemask_tFileList_1 : maskList_tFileList_1) {
	String filemask_compile_tFileList_1 = filemask_tFileList_1;
	
		filemask_compile_tFileList_1 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_1.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_1 = java.util.regex.Pattern.compile(filemask_compile_tFileList_1);
	patternList_tFileList_1.add(fileNamePattern_tFileList_1);
  }
  int NB_FILEtFileList_1 = 0;

  final boolean case_sensitive_tFileList_1 = true;
	
	
	
    final java.util.List<java.io.File> list_tFileList_1 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_1 = new java.util.HashSet<String>();
	java.io.File file_tFileList_1 = new java.io.File(directory_tFileList_1);
     
		file_tFileList_1.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
                if (!file.isDirectory()) {
                	
    	String fileName_tFileList_1 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_1 : patternList_tFileList_1) {
          	if (fileNamePattern_tFileList_1.matcher(fileName_tFileList_1).matches()){
					if(!filePath_tFileList_1.contains(file.getAbsolutePath())) {
			          list_tFileList_1.add(file);
			          filePath_tFileList_1.add(file.getAbsolutePath());
			        }
			}
		}
                }
              return true;
            }
          }
      ); 
      java.util.Collections.sort(list_tFileList_1);
    
    for (int i_tFileList_1 = 0; i_tFileList_1 < list_tFileList_1.size(); i_tFileList_1++){
      java.io.File files_tFileList_1 = list_tFileList_1.get(i_tFileList_1);
      String fileName_tFileList_1 = files_tFileList_1.getName();
      
      String currentFileName_tFileList_1 = files_tFileList_1.getName(); 
      String currentFilePath_tFileList_1 = files_tFileList_1.getAbsolutePath();
      String currentFileDirectory_tFileList_1 = files_tFileList_1.getParent();
      String currentFileExtension_tFileList_1 = null;
      
      if (files_tFileList_1.getName().contains(".") && files_tFileList_1.isFile()){
        currentFileExtension_tFileList_1 = files_tFileList_1.getName().substring(files_tFileList_1.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_1 = "";
      }
      
      NB_FILEtFileList_1 ++;
      globalMap.put("tFileList_1_CURRENT_FILE", currentFileName_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEPATH", currentFilePath_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_1);
      globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);
      
 



/**
 * [tFileList_1 begin ] stop
 */
	
	/**
	 * [tFileList_1 main ] start
	 */

	

	
	
	currentComponent="tFileList_1";
	
	

 


	tos_count_tFileList_1++;

/**
 * [tFileList_1 main ] stop
 */
	
	/**
	 * [tFileList_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_1";
	
	

 



/**
 * [tFileList_1 process_data_begin ] stop
 */
	NB_ITERATE_tFixedFlowInput_1++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("row103", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If4", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("outSolicitudArchivo", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row6", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If3", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row7", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("iterate3", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row4", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If5", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate2", 1, "exec" + NB_ITERATE_tFixedFlowInput_1);
					//Thread.sleep(1000);
				}				
			




	
	/**
	 * [tJavaRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_4", false);
		start_Hash.put("tJavaRow_4", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tJavaRow_4 = 0;
		

int nb_line_tJavaRow_4 = 0;

 



/**
 * [tJavaRow_4 begin ] stop
 */



	
	/**
	 * [tDBSP_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBSP_1", false);
		start_Hash.put("tDBSP_1", System.currentTimeMillis());
		
	
	currentComponent="tDBSP_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"outSolicitudArchivo");
					}
				
		int tos_count_tDBSP_1 = 0;
		

	java.sql.Connection connection_tDBSP_1 = null;
	connection_tDBSP_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
	

java.sql.CallableStatement statement_tDBSP_1 = connection_tDBSP_1.prepareCall("{? = call " + "REP.InsSolicitudArchivo" + "(?,?,?)}");

java.sql.Timestamp tmpDate_tDBSP_1;
String tmpString_tDBSP_1;

 



/**
 * [tDBSP_1 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
outSolicitudArchivoStruct outSolicitudArchivo_tmp = new outSolicitudArchivoStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_1", false);
		start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_1";
	
	
		int tos_count_tFixedFlowInput_1 = 0;
		

	    for (int i_tFixedFlowInput_1 = 0 ; i_tFixedFlowInput_1 < 1 ; i_tFixedFlowInput_1++) {
	                	            	
    	            		row6.filepath = ((String) globalMap.get("tFileList_1_CURRENT_FILEPATH"));
    	            	

 



/**
 * [tFixedFlowInput_1 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 


	tos_count_tFixedFlowInput_1++;

/**
 * [tFixedFlowInput_1 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

outSolicitudArchivo = null;


// # Output table : 'outSolicitudArchivo'
// # Filter conditions 
if( 

context.EXISTE_REPORTE == 1

 ) {
outSolicitudArchivo_tmp.ID = null;
outSolicitudArchivo_tmp.NOMBRE_ = context.ID+"-"+context.SIGLA+"-"+TalendDate.getDate("DD/MM/YYYY") ;
outSolicitudArchivo_tmp.CONTENIDO_ = ArrayFromFile.ByteArrayFromFile(row6.filepath ) ;
outSolicitudArchivo_tmp.TCONTENIDO_ = "ZIP";
outSolicitudArchivo = outSolicitudArchivo_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "outSolicitudArchivo"
if(outSolicitudArchivo != null) { 



	
	/**
	 * [tDBSP_1 main ] start
	 */

	

	
	
	currentComponent="tDBSP_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"outSolicitudArchivo"
						
						);
					}
					

			// code for the argument 1 (ID) of type 'OUT NUMERIC'
					statement_tDBSP_1.registerOutParameter(1, java.sql.Types.NUMERIC);
			// code for the argument 2 (NOMBRE_) of type 'IN AUTOMAPPING'
    					if (outSolicitudArchivo.NOMBRE_ == null) {
    						statement_tDBSP_1.setNull(2, java.sql.Types.VARCHAR);
    					} else {
    					
                        statement_tDBSP_1.setString(2, outSolicitudArchivo.NOMBRE_);
    					}
    					
			// code for the argument 3 (CONTENIDO_) of type 'IN AUTOMAPPING'
    					if (outSolicitudArchivo.CONTENIDO_ == null) {
    						statement_tDBSP_1.setNull(3, java.sql.Types.OTHER);
    					} else {
    					
                        statement_tDBSP_1.setObject(3, outSolicitudArchivo.CONTENIDO_);
    					}
    					
			// code for the argument 4 (TCONTENIDO_) of type 'IN AUTOMAPPING'
    					if (outSolicitudArchivo.TCONTENIDO_ == null) {
    						statement_tDBSP_1.setNull(4, java.sql.Types.VARCHAR);
    					} else {
    					
                        statement_tDBSP_1.setString(4, outSolicitudArchivo.TCONTENIDO_);
    					}
    					
		statement_tDBSP_1.execute();
		
									row7.ID = statement_tDBSP_1.getBigDecimal(1);
									
									if (statement_tDBSP_1.wasNull()) {
										row7.ID = null;
									}
									
								row7.NOMBRE_ = outSolicitudArchivo.NOMBRE_;
								
								row7.CONTENIDO_ = outSolicitudArchivo.CONTENIDO_;
								
								row7.TCONTENIDO_ = outSolicitudArchivo.TCONTENIDO_;
								

 


	tos_count_tDBSP_1++;

/**
 * [tDBSP_1 main ] stop
 */
	
	/**
	 * [tDBSP_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBSP_1";
	
	

 



/**
 * [tDBSP_1 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_4 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					

    //Code generate according to input schema and output schema
context.ARCHIVOS_ID = row7.ID;


    nb_line_tJavaRow_4++;   

 


	tos_count_tJavaRow_4++;

/**
 * [tJavaRow_4 main ] stop
 */
	
	/**
	 * [tJavaRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 process_data_end ] stop
 */



	
	/**
	 * [tDBSP_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBSP_1";
	
	

 



/**
 * [tDBSP_1 process_data_end ] stop
 */

} // End of branch "outSolicitudArchivo"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

        }
        globalMap.put("tFixedFlowInput_1_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_1", true);
end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());




/**
 * [tFixedFlowInput_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tDBSP_1 end ] start
	 */

	

	
	
	currentComponent="tDBSP_1";
	
	


	statement_tDBSP_1.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"outSolicitudArchivo");
			  	}
			  	
 

ok_Hash.put("tDBSP_1", true);
end_Hash.put("tDBSP_1", System.currentTimeMillis());




/**
 * [tDBSP_1 end ] stop
 */

	
	/**
	 * [tJavaRow_4 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

globalMap.put("tJavaRow_4_NB_LINE",nb_line_tJavaRow_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tJavaRow_4", true);
end_Hash.put("tJavaRow_4", System.currentTimeMillis());

   			if (context.EXISTE_REPORTE == 1) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If4", 0, "true");
					}
				tFileList_2Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If4", 0, "false");
					}   	 
   				}



/**
 * [tJavaRow_4 end ] stop
 */









						if(execStat){
							runStat.updateStatOnConnection("iterate2", 2, "exec" + NB_ITERATE_tFixedFlowInput_1);
						}				
					




	
	/**
	 * [tFileList_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_1";
	
	

 



/**
 * [tFileList_1 process_data_end ] stop
 */
	
	/**
	 * [tFileList_1 end ] start
	 */

	

	
	
	currentComponent="tFileList_1";
	
	

  
    }
  globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);
  

  
 

 

ok_Hash.put("tFileList_1", true);
end_Hash.put("tFileList_1", System.currentTimeMillis());




/**
 * [tFileList_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_1 finally ] start
	 */

	

	
	
	currentComponent="tFileList_1";
	
	

 



/**
 * [tFileList_1 finally ] stop
 */

	
	/**
	 * [tFixedFlowInput_1 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tDBSP_1 finally ] start
	 */

	

	
	
	currentComponent="tDBSP_1";
	
	

 



/**
 * [tDBSP_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_4 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_1_SUBPROCESS_STATE", 1);
	}
	


public void tFileList_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileList_2 begin ] start
	 */

				
			int NB_ITERATE_tFileDelete_2 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_2", false);
		start_Hash.put("tFileList_2", System.currentTimeMillis());
		
	
	currentComponent="tFileList_2";
	
	
		int tos_count_tFileList_2 = 0;
		
	
 
     
    
  String directory_tFileList_2 = context.CARPETA_SALIDA;
  final java.util.List<String> maskList_tFileList_2 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_2 = new java.util.ArrayList<java.util.regex.Pattern>();
      maskList_tFileList_2.add("*");  
  for (final String filemask_tFileList_2 : maskList_tFileList_2) {
	String filemask_compile_tFileList_2 = filemask_tFileList_2;
	
		filemask_compile_tFileList_2 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_2.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_2 = java.util.regex.Pattern.compile(filemask_compile_tFileList_2);
	patternList_tFileList_2.add(fileNamePattern_tFileList_2);
  }
  int NB_FILEtFileList_2 = 0;

  final boolean case_sensitive_tFileList_2 = true;
	
	
	
    final java.util.List<java.io.File> list_tFileList_2 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_2 = new java.util.HashSet<String>();
	java.io.File file_tFileList_2 = new java.io.File(directory_tFileList_2);
    
		file_tFileList_2.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
				
	                if (!file.isDirectory()) {
						
    	String fileName_tFileList_2 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_2 : patternList_tFileList_2) {
          	if (fileNamePattern_tFileList_2.matcher(fileName_tFileList_2).matches()){
					if(!filePath_tFileList_2.contains(file.getAbsolutePath())) {
			          list_tFileList_2.add(file);
			          filePath_tFileList_2.add(file.getAbsolutePath());
			        }
			}
		}
	                	return true;
	                } else {
	                  file.listFiles(this);
	                }
				
				return false;
			}
		}
		); 
      java.util.Collections.sort(list_tFileList_2);
    
    for (int i_tFileList_2 = 0; i_tFileList_2 < list_tFileList_2.size(); i_tFileList_2++){
      java.io.File files_tFileList_2 = list_tFileList_2.get(i_tFileList_2);
      String fileName_tFileList_2 = files_tFileList_2.getName();
      
      String currentFileName_tFileList_2 = files_tFileList_2.getName(); 
      String currentFilePath_tFileList_2 = files_tFileList_2.getAbsolutePath();
      String currentFileDirectory_tFileList_2 = files_tFileList_2.getParent();
      String currentFileExtension_tFileList_2 = null;
      
      if (files_tFileList_2.getName().contains(".") && files_tFileList_2.isFile()){
        currentFileExtension_tFileList_2 = files_tFileList_2.getName().substring(files_tFileList_2.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_2 = "";
      }
      
      NB_FILEtFileList_2 ++;
      globalMap.put("tFileList_2_CURRENT_FILE", currentFileName_tFileList_2);
      globalMap.put("tFileList_2_CURRENT_FILEPATH", currentFilePath_tFileList_2);
      globalMap.put("tFileList_2_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_2);
      globalMap.put("tFileList_2_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_2);
      globalMap.put("tFileList_2_NB_FILE", NB_FILEtFileList_2);
      
 



/**
 * [tFileList_2 begin ] stop
 */
	
	/**
	 * [tFileList_2 main ] start
	 */

	

	
	
	currentComponent="tFileList_2";
	
	

 


	tos_count_tFileList_2++;

/**
 * [tFileList_2 main ] stop
 */
	
	/**
	 * [tFileList_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_2";
	
	

 



/**
 * [tFileList_2 process_data_begin ] stop
 */
	NB_ITERATE_tFileDelete_2++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("row103", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If3", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row4", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If5", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate3", 1, "exec" + NB_ITERATE_tFileDelete_2);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tFileDelete_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_2", false);
		start_Hash.put("tFileDelete_2", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_2";
	
	
		int tos_count_tFileDelete_2 = 0;
		

 



/**
 * [tFileDelete_2 begin ] stop
 */
	
	/**
	 * [tFileDelete_2 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";
	
	

 

class DeleteFoldertFileDelete_2{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
    java.io.File file_tFileDelete_2=new java.io.File(((String)globalMap.get("tFileList_2_CURRENT_FILEPATH")));
    if(file_tFileDelete_2.exists()&& file_tFileDelete_2.isFile()){
    	if(file_tFileDelete_2.delete()){
    		globalMap.put("tFileDelete_2_CURRENT_STATUS", "File deleted.");
		}else{
			globalMap.put("tFileDelete_2_CURRENT_STATUS", "No file deleted.");
				throw new RuntimeException("File " + file_tFileDelete_2.getAbsolutePath() + " can not be deleted.");
		}
	}else{
		globalMap.put("tFileDelete_2_CURRENT_STATUS", "File does not exist or is invalid.");
			throw new RuntimeException("File " + file_tFileDelete_2.getAbsolutePath() + " does not exist or is invalid or is not a file.");
	}
	globalMap.put("tFileDelete_2_DELETE_PATH",((String)globalMap.get("tFileList_2_CURRENT_FILEPATH")));
 


	tos_count_tFileDelete_2++;

/**
 * [tFileDelete_2 main ] stop
 */
	
	/**
	 * [tFileDelete_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";
	
	

 



/**
 * [tFileDelete_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileDelete_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";
	
	

 



/**
 * [tFileDelete_2 process_data_end ] stop
 */
	
	/**
	 * [tFileDelete_2 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";
	
	

 

ok_Hash.put("tFileDelete_2", true);
end_Hash.put("tFileDelete_2", System.currentTimeMillis());

   			if (context.EXISTE_REPORTE == 1) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If3", 0, "true");
					}
				tJava_4Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If3", 0, "false");
					}   	 
   				}



/**
 * [tFileDelete_2 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate3", 2, "exec" + NB_ITERATE_tFileDelete_2);
						}				
					




	
	/**
	 * [tFileList_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_2";
	
	

 



/**
 * [tFileList_2 process_data_end ] stop
 */
	
	/**
	 * [tFileList_2 end ] start
	 */

	

	
	
	currentComponent="tFileList_2";
	
	

  
    }
  globalMap.put("tFileList_2_NB_FILE", NB_FILEtFileList_2);
  

  
 

 

ok_Hash.put("tFileList_2", true);
end_Hash.put("tFileList_2", System.currentTimeMillis());




/**
 * [tFileList_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_2 finally ] start
	 */

	

	
	
	currentComponent="tFileList_2";
	
	

 



/**
 * [tFileList_2 finally ] stop
 */

	
	/**
	 * [tFileDelete_2 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";
	
	

 



/**
 * [tFileDelete_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_2_SUBPROCESS_STATE", 1);
	}
	


public void tJava_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_4", false);
		start_Hash.put("tJava_4", System.currentTimeMillis());
		
	
	currentComponent="tJava_4";
	
	
		int tos_count_tJava_4 = 0;
		


System.out.println( ((String)globalMap.get("tFileList_2_CURRENT_FILE")) + " has been deleted!" );
context.FECHA_HORA_FINAL_EJECUCION = new Date();

System.out.println("FECHA_HORA_INICIO_EJECUCION:"+context.FECHA_HORA_INICIO_EJECUCION);
System.out.println("FECHA_HORA_FINAL_EJECUCION: "+context.FECHA_HORA_FINAL_EJECUCION);


System.out.println("Contexto ID " + context.ID);
System.out.println("Contexto ARCHIVOS_ID " + context.ARCHIVOS_ID);

context.NOMBRE_CONSOLIDADO="";
context.FECHA_INICIAL="";
context.FECHA_FINAL="";
context.ESM_REMITE="";
context.SIGLA="";
context.USUARIO="";
context.FUERZA="";
context.CIUDAD="";
context.DEPARTAMENTO="";
context.REGIONAL="";
context.EDAD_INICIAL="";
context.EDAD_FINAL="";
context.ESQUEMA="";
 



/**
 * [tJava_4 begin ] stop
 */
	
	/**
	 * [tJava_4 main ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 


	tos_count_tJava_4++;

/**
 * [tJava_4 main ] stop
 */
	
	/**
	 * [tJava_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 process_data_begin ] stop
 */
	
	/**
	 * [tJava_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 process_data_end ] stop
 */
	
	/**
	 * [tJava_4 end ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 

ok_Hash.put("tJava_4", true);
end_Hash.put("tJava_4", System.currentTimeMillis());

   			if (context.EXISTE_REPORTE == 1) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If5", 0, "true");
					}
				tFixedFlowInput_2Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If5", 0, "false");
					}   	 
   				}



/**
 * [tJava_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_4 finally ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}
	


public static class row103Struct implements routines.system.IPersistableRow<row103Struct> {
    final static byte[] commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[0];
    static byte[] commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[0];

	
			    public BigDecimal Sarchivo_Id_;

				public BigDecimal getSarchivo_Id_ () {
					return this.Sarchivo_Id_;
				}

				public Boolean Sarchivo_Id_IsNullable(){
				    return true;
				}
				public Boolean Sarchivo_Id_IsKey(){
				    return false;
				}
				public Integer Sarchivo_Id_Length(){
				    return 0;
				}
				public Integer Sarchivo_Id_Precision(){
				    return 0;
				}
				public String Sarchivo_Id_Default(){
				
					return null;
				
				}
				public String Sarchivo_Id_Comment(){
				
				    return "";
				
				}
				public String Sarchivo_Id_Pattern(){
				
					return "";
				
				}
				public String Sarchivo_Id_OriginalDbColumnName(){
				
					return "Sarchivo_Id_";
				
				}

				
			    public BigDecimal ARCHIVOS_ID_;

				public BigDecimal getARCHIVOS_ID_ () {
					return this.ARCHIVOS_ID_;
				}

				public Boolean ARCHIVOS_ID_IsNullable(){
				    return true;
				}
				public Boolean ARCHIVOS_ID_IsKey(){
				    return false;
				}
				public Integer ARCHIVOS_ID_Length(){
				    return null;
				}
				public Integer ARCHIVOS_ID_Precision(){
				    return null;
				}
				public String ARCHIVOS_ID_Default(){
				
					return null;
				
				}
				public String ARCHIVOS_ID_Comment(){
				
				    return "";
				
				}
				public String ARCHIVOS_ID_Pattern(){
				
					return "";
				
				}
				public String ARCHIVOS_ID_OriginalDbColumnName(){
				
					return "ARCHIVOS_ID_";
				
				}

				
			    public java.util.Date FINICIAL_;

				public java.util.Date getFINICIAL_ () {
					return this.FINICIAL_;
				}

				public Boolean FINICIAL_IsNullable(){
				    return true;
				}
				public Boolean FINICIAL_IsKey(){
				    return false;
				}
				public Integer FINICIAL_Length(){
				    return 0;
				}
				public Integer FINICIAL_Precision(){
				    return 0;
				}
				public String FINICIAL_Default(){
				
					return null;
				
				}
				public String FINICIAL_Comment(){
				
				    return "";
				
				}
				public String FINICIAL_Pattern(){
				
					return "";
				
				}
				public String FINICIAL_OriginalDbColumnName(){
				
					return "FINICIAL_";
				
				}

				
			    public java.util.Date FFINAL_;

				public java.util.Date getFFINAL_ () {
					return this.FFINAL_;
				}

				public Boolean FFINAL_IsNullable(){
				    return true;
				}
				public Boolean FFINAL_IsKey(){
				    return false;
				}
				public Integer FFINAL_Length(){
				    return 0;
				}
				public Integer FFINAL_Precision(){
				    return 0;
				}
				public String FFINAL_Default(){
				
					return null;
				
				}
				public String FFINAL_Comment(){
				
				    return "";
				
				}
				public String FFINAL_Pattern(){
				
					return "";
				
				}
				public String FFINAL_OriginalDbColumnName(){
				
					return "FFINAL_";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS) {

        	try {

        		int length = 0;
		
						this.Sarchivo_Id_ = (BigDecimal) dis.readObject();
					
						this.ARCHIVOS_ID_ = (BigDecimal) dis.readObject();
					
					this.FINICIAL_ = readDate(dis);
					
					this.FFINAL_ = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS) {

        	try {

        		int length = 0;
		
						this.Sarchivo_Id_ = (BigDecimal) dis.readObject();
					
						this.ARCHIVOS_ID_ = (BigDecimal) dis.readObject();
					
					this.FINICIAL_ = readDate(dis);
					
					this.FFINAL_ = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.Sarchivo_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ARCHIVOS_ID_);
					
					// java.util.Date
				
						writeDate(this.FINICIAL_,dos);
					
					// java.util.Date
				
						writeDate(this.FFINAL_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Sarchivo_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ARCHIVOS_ID_);
					
					// java.util.Date
				
						writeDate(this.FINICIAL_,dos);
					
					// java.util.Date
				
						writeDate(this.FFINAL_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Sarchivo_Id_="+String.valueOf(Sarchivo_Id_));
		sb.append(",ARCHIVOS_ID_="+String.valueOf(ARCHIVOS_ID_));
		sb.append(",FINICIAL_="+String.valueOf(FINICIAL_));
		sb.append(",FFINAL_="+String.valueOf(FFINAL_));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row103Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[0];
    static byte[] commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[0];

	
			    public BigDecimal Sarchivo_Id_;

				public BigDecimal getSarchivo_Id_ () {
					return this.Sarchivo_Id_;
				}

				public Boolean Sarchivo_Id_IsNullable(){
				    return true;
				}
				public Boolean Sarchivo_Id_IsKey(){
				    return false;
				}
				public Integer Sarchivo_Id_Length(){
				    return 0;
				}
				public Integer Sarchivo_Id_Precision(){
				    return 0;
				}
				public String Sarchivo_Id_Default(){
				
					return null;
				
				}
				public String Sarchivo_Id_Comment(){
				
				    return "";
				
				}
				public String Sarchivo_Id_Pattern(){
				
					return "";
				
				}
				public String Sarchivo_Id_OriginalDbColumnName(){
				
					return "Sarchivo_Id_";
				
				}

				
			    public BigDecimal ARCHIVOS_ID_;

				public BigDecimal getARCHIVOS_ID_ () {
					return this.ARCHIVOS_ID_;
				}

				public Boolean ARCHIVOS_ID_IsNullable(){
				    return true;
				}
				public Boolean ARCHIVOS_ID_IsKey(){
				    return false;
				}
				public Integer ARCHIVOS_ID_Length(){
				    return null;
				}
				public Integer ARCHIVOS_ID_Precision(){
				    return null;
				}
				public String ARCHIVOS_ID_Default(){
				
					return null;
				
				}
				public String ARCHIVOS_ID_Comment(){
				
				    return "";
				
				}
				public String ARCHIVOS_ID_Pattern(){
				
					return "";
				
				}
				public String ARCHIVOS_ID_OriginalDbColumnName(){
				
					return "ARCHIVOS_ID_";
				
				}

				
			    public java.util.Date FINICIAL_;

				public java.util.Date getFINICIAL_ () {
					return this.FINICIAL_;
				}

				public Boolean FINICIAL_IsNullable(){
				    return true;
				}
				public Boolean FINICIAL_IsKey(){
				    return false;
				}
				public Integer FINICIAL_Length(){
				    return 0;
				}
				public Integer FINICIAL_Precision(){
				    return 0;
				}
				public String FINICIAL_Default(){
				
					return null;
				
				}
				public String FINICIAL_Comment(){
				
				    return "";
				
				}
				public String FINICIAL_Pattern(){
				
					return "";
				
				}
				public String FINICIAL_OriginalDbColumnName(){
				
					return "FINICIAL_";
				
				}

				
			    public java.util.Date FFINAL_;

				public java.util.Date getFFINAL_ () {
					return this.FFINAL_;
				}

				public Boolean FFINAL_IsNullable(){
				    return true;
				}
				public Boolean FFINAL_IsKey(){
				    return false;
				}
				public Integer FFINAL_Length(){
				    return 0;
				}
				public Integer FFINAL_Precision(){
				    return 0;
				}
				public String FFINAL_Default(){
				
					return null;
				
				}
				public String FFINAL_Comment(){
				
				    return "";
				
				}
				public String FFINAL_Pattern(){
				
					return "";
				
				}
				public String FFINAL_OriginalDbColumnName(){
				
					return "FFINAL_";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS) {

        	try {

        		int length = 0;
		
						this.Sarchivo_Id_ = (BigDecimal) dis.readObject();
					
						this.ARCHIVOS_ID_ = (BigDecimal) dis.readObject();
					
					this.FINICIAL_ = readDate(dis);
					
					this.FFINAL_ = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS) {

        	try {

        		int length = 0;
		
						this.Sarchivo_Id_ = (BigDecimal) dis.readObject();
					
						this.ARCHIVOS_ID_ = (BigDecimal) dis.readObject();
					
					this.FINICIAL_ = readDate(dis);
					
					this.FFINAL_ = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.Sarchivo_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ARCHIVOS_ID_);
					
					// java.util.Date
				
						writeDate(this.FINICIAL_,dos);
					
					// java.util.Date
				
						writeDate(this.FFINAL_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Sarchivo_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ARCHIVOS_ID_);
					
					// java.util.Date
				
						writeDate(this.FINICIAL_,dos);
					
					// java.util.Date
				
						writeDate(this.FFINAL_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Sarchivo_Id_="+String.valueOf(Sarchivo_Id_));
		sb.append(",ARCHIVOS_ID_="+String.valueOf(ARCHIVOS_ID_));
		sb.append(",FINICIAL_="+String.valueOf(FINICIAL_));
		sb.append(",FFINAL_="+String.valueOf(FFINAL_));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();
row103Struct row103 = new row103Struct();





	
	/**
	 * [tJavaRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_5", false);
		start_Hash.put("tJavaRow_5", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row103");
					}
				
		int tos_count_tJavaRow_5 = 0;
		

int nb_line_tJavaRow_5 = 0;

 



/**
 * [tJavaRow_5 begin ] stop
 */



	
	/**
	 * [tDBSP_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBSP_2", false);
		start_Hash.put("tDBSP_2", System.currentTimeMillis());
		
	
	currentComponent="tDBSP_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tDBSP_2 = 0;
		

	java.sql.Connection connection_tDBSP_2 = null;
	connection_tDBSP_2 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
	

java.sql.CallableStatement statement_tDBSP_2 = connection_tDBSP_2.prepareCall("{call " + "REP.UpdEstadoSolicitudArchivo" + "(?,?,?,?)}");

java.sql.Timestamp tmpDate_tDBSP_2;
String tmpString_tDBSP_2;

 



/**
 * [tDBSP_2 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_2", false);
		start_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_2";
	
	
		int tos_count_tFixedFlowInput_2 = 0;
		

	    for (int i_tFixedFlowInput_2 = 0 ; i_tFixedFlowInput_2 < 1 ; i_tFixedFlowInput_2++) {
	                	            	
    	            		row4.Sarchivo_Id_ = context.ID;
    	            	        	            	
    	            		row4.ARCHIVOS_ID_ = context.ARCHIVOS_ID;
    	            	        	            	
    	            		row4.FINICIAL_ = context.FECHA_HORA_INICIO_EJECUCION;
    	            	        	            	
    	            		row4.FFINAL_ = context.FECHA_HORA_FINAL_EJECUCION;
    	            	

 



/**
 * [tFixedFlowInput_2 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 


	tos_count_tFixedFlowInput_2++;

/**
 * [tFixedFlowInput_2 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tDBSP_2 main ] start
	 */

	

	
	
	currentComponent="tDBSP_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					

			// code for the argument 1 (Sarchivo_Id_) of type 'IN AUTOMAPPING'
    					if (row4.Sarchivo_Id_ == null) {
    						statement_tDBSP_2.setNull(1, java.sql.Types.OTHER);
    					} else {
    					
                        statement_tDBSP_2.setBigDecimal(1, row4.Sarchivo_Id_);
    					}
    					
			// code for the argument 2 (ARCHIVOS_ID_) of type 'IN AUTOMAPPING'
    					if (row4.ARCHIVOS_ID_ == null) {
    						statement_tDBSP_2.setNull(2, java.sql.Types.OTHER);
    					} else {
    					
                        statement_tDBSP_2.setBigDecimal(2, row4.ARCHIVOS_ID_);
    					}
    					
			// code for the argument 3 (FINICIAL_) of type 'IN TIMESTAMP'
    					if (row4.FINICIAL_ == null) {
    						statement_tDBSP_2.setNull(3, java.sql.Types.DATE);
    					} else {
    					
    					statement_tDBSP_2.setTimestamp(3, new java.sql.Timestamp(row4.FINICIAL_.getTime()));
    					
    					}
    					
			// code for the argument 4 (FFINAL_) of type 'IN TIMESTAMP'
    					if (row4.FFINAL_ == null) {
    						statement_tDBSP_2.setNull(4, java.sql.Types.DATE);
    					} else {
    					
    					statement_tDBSP_2.setTimestamp(4, new java.sql.Timestamp(row4.FFINAL_.getTime()));
    					
    					}
    					
		statement_tDBSP_2.execute();
		
								row103.Sarchivo_Id_ = row4.Sarchivo_Id_;
								
								row103.ARCHIVOS_ID_ = row4.ARCHIVOS_ID_;
								
								row103.FINICIAL_ = row4.FINICIAL_;
								
								row103.FFINAL_ = row4.FFINAL_;
								

 


	tos_count_tDBSP_2++;

/**
 * [tDBSP_2 main ] stop
 */
	
	/**
	 * [tDBSP_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBSP_2";
	
	

 



/**
 * [tDBSP_2 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_5 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row103"
						
						);
					}
					

    System.out.println("Bandera de proceso de reporte: " + context.EXISTE_REPORTE);
context.EXISTE_REPORTE = 0;
System.out.println("Bandera de proceso de reporte: " + context.EXISTE_REPORTE);

    nb_line_tJavaRow_5++;   

 


	tos_count_tJavaRow_5++;

/**
 * [tJavaRow_5 main ] stop
 */
	
	/**
	 * [tJavaRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_end ] stop
 */



	
	/**
	 * [tDBSP_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBSP_2";
	
	

 



/**
 * [tDBSP_2 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

        }
        globalMap.put("tFixedFlowInput_2_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_2", true);
end_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());




/**
 * [tFixedFlowInput_2 end ] stop
 */

	
	/**
	 * [tDBSP_2 end ] start
	 */

	

	
	
	currentComponent="tDBSP_2";
	
	


	statement_tDBSP_2.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tDBSP_2", true);
end_Hash.put("tDBSP_2", System.currentTimeMillis());




/**
 * [tDBSP_2 end ] stop
 */

	
	/**
	 * [tJavaRow_5 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

globalMap.put("tJavaRow_5_NB_LINE",nb_line_tJavaRow_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row103");
			  	}
			  	
 

ok_Hash.put("tJavaRow_5", true);
end_Hash.put("tJavaRow_5", System.currentTimeMillis());




/**
 * [tJavaRow_5 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_2 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 finally ] stop
 */

	
	/**
	 * [tDBSP_2 finally ] start
	 */

	

	
	
	currentComponent="tDBSP_2";
	
	

 



/**
 * [tDBSP_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_5 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 1);
	}
	


public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";
	
	
		int tos_count_tJava_2 = 0;
		


context.NOMBRE_CONSOLIDADO="";
context.FECHA_INICIAL="";
context.FECHA_FINAL="";
context.ESM_REMITE="";
context.SIGLA="";
context.USUARIO="";
context.FUERZA="";
context.CIUDAD="";
context.DEPARTAMENTO="";
context.REGIONAL="";
context.EDAD_INICIAL="";
context.EDAD_FINAL="";
context.ESQUEMA="";
context.PERIODO_INICIAL = "";
context.TIPO_USUARIO = "";
context.GRUPO_EDAD="";
context.GRADO= "";
context.ESM_USUARIO="";
context.ROLES_ID="";
 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());




/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	


public static class row63Struct implements routines.system.IPersistableComparableLookupRow<row63Struct> {
    final static byte[] commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[0];
    static byte[] commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal CODIGO;

				public BigDecimal getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 0;
				}
				public Integer CODIGOPrecision(){
				    return null;
				}
				public String CODIGODefault(){
				
					return "";
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 200;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CODIGO == null) ? 0 : this.CODIGO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row63Struct other = (row63Struct) obj;
		
						if (this.CODIGO == null) {
							if (other.CODIGO != null)
								return false;
						
						} else if (!this.CODIGO.equals(other.CODIGO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row63Struct other) {

		other.CODIGO = this.CODIGO;
	            other.NOMBRE = this.NOMBRE;
	            
	}

	public void copyKeysDataTo(row63Struct other) {

		other.CODIGO = this.CODIGO;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS) {

        	try {

        		int length = 0;
		
						this.CODIGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS) {

        	try {

        		int length = 0;
		
						this.CODIGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.CODIGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CODIGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.NOMBRE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.NOMBRE = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.NOMBRE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.NOMBRE, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CODIGO="+String.valueOf(CODIGO));
		sb.append(",NOMBRE="+NOMBRE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row63Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CODIGO, other.CODIGO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row63Struct row63 = new row63Struct();




	
	/**
	 * [tAdvancedHash_row63 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row63", false);
		start_Hash.put("tAdvancedHash_row63", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row63";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row63");
					}
				
		int tos_count_tAdvancedHash_row63 = 0;
		

			   		// connection name:row63
			   		// source node:tDBInput_5 - inputs:(after_tDBInput_3) outputs:(row63,row63) | target node:tAdvancedHash_row63 - inputs:(row63) outputs:()
			   		// linked node: tMap_1 - inputs:(row101,row63,row64) outputs:(out11)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row63 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row63Struct> tHash_Lookup_row63 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row63Struct>getLookup(matchingModeEnum_row63);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row63", tHash_Lookup_row63);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row63 begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_5";
	
	
		int tos_count_tDBInput_5 = 0;
		
	


	
		    int nb_line_tDBInput_5 = 0;
		    java.sql.Connection conn_tDBInput_5 = null;
				conn_tDBInput_5 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
                boolean isTimeZoneNull_tDBInput_5 = false;
				boolean isConnectionWrapped_tDBInput_5 = !(conn_tDBInput_5 instanceof oracle.jdbc.OracleConnection) && conn_tDBInput_5.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tDBInput_5 = null;
                if (isConnectionWrapped_tDBInput_5) {
					unwrappedOraConn_tDBInput_5 = conn_tDBInput_5.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tDBInput_5 != null) {
                        isTimeZoneNull_tDBInput_5 = (unwrappedOraConn_tDBInput_5.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tDBInput_5 = (((oracle.jdbc.OracleConnection)conn_tDBInput_5).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tDBInput_5) {
					java.sql.Statement stmtGetTZ_tDBInput_5 = conn_tDBInput_5.createStatement();
					java.sql.ResultSet rsGetTZ_tDBInput_5 = stmtGetTZ_tDBInput_5.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tDBInput_5 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tDBInput_5.next()) {
						sessionTimezone_tDBInput_5 = rsGetTZ_tDBInput_5.getString(1);
					}
					if (isConnectionWrapped_tDBInput_5 && unwrappedOraConn_tDBInput_5 != null) {
                        unwrappedOraConn_tDBInput_5.setSessionTimeZone(sessionTimezone_tDBInput_5);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tDBInput_5).setSessionTimeZone(sessionTimezone_tDBInput_5);
                    }
				}
			
		    
			java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tDBInput_5.setFetchSize(1000);


		    String dbquery_tDBInput_5 = "SELECT \n	CODIGO, \n	NOMBRE\nFROM GEN_CAUSAEXTERNA\nWHERE ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tDBInput_5_QUERY",dbquery_tDBInput_5);

		    java.sql.ResultSet rs_tDBInput_5 = null;

		    try {
		    	rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
		    	int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

		    String tmpContent_tDBInput_5 = null;
		    
		    
		    while (rs_tDBInput_5.next()) {
		        nb_line_tDBInput_5++;
		        
							if(colQtyInRs_tDBInput_5 < 1) {
								row63.CODIGO = null;
							} else {
		                          
					if(rs_tDBInput_5.getObject(1) != null) {
						row63.CODIGO = rs_tDBInput_5.getBigDecimal(1);
					} else {
				
						row63.CODIGO = null;
					}
		                    }
							if(colQtyInRs_tDBInput_5 < 2) {
								row63.NOMBRE = null;
							} else {
	                         		
        	row63.NOMBRE = routines.system.JDBCUtil.getString(rs_tDBInput_5, 2, false);
		                    }
					




 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";
	
	

 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";
	
	

 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row63 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row63";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row63"
						
						);
					}
					


			   
			   

					row63Struct row63_HashRow = new row63Struct();
		   	   	   
				
				row63_HashRow.CODIGO = row63.CODIGO;
				
				row63_HashRow.NOMBRE = row63.NOMBRE;
				
			tHash_Lookup_row63.put(row63_HashRow);
			
            




 


	tos_count_tAdvancedHash_row63++;

/**
 * [tAdvancedHash_row63 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row63 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row63";
	
	

 



/**
 * [tAdvancedHash_row63 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row63 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row63";
	
	

 



/**
 * [tAdvancedHash_row63 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";
	
	

 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";
	
	

}
}finally{
	if (rs_tDBInput_5 != null) {
		rs_tDBInput_5.close();
	}
	if (stmt_tDBInput_5 != null) {
		stmt_tDBInput_5.close();
	}
}

globalMap.put("tDBInput_5_NB_LINE",nb_line_tDBInput_5);
 

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());




/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row63 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row63";
	
	

tHash_Lookup_row63.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row63");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row63", true);
end_Hash.put("tAdvancedHash_row63", System.currentTimeMillis());




/**
 * [tAdvancedHash_row63 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";
	
	

 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row63 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row63";
	
	

 



/**
 * [tAdvancedHash_row63 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row64Struct implements routines.system.IPersistableComparableLookupRow<row64Struct> {
    final static byte[] commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[0];
    static byte[] commonByteArray_REP_CONSOLIDADOS_Consolidados_RIPS = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal CODIGO;

				public BigDecimal getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 0;
				}
				public Integer CODIGOPrecision(){
				    return null;
				}
				public String CODIGODefault(){
				
					return "";
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 200;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CODIGO == null) ? 0 : this.CODIGO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row64Struct other = (row64Struct) obj;
		
						if (this.CODIGO == null) {
							if (other.CODIGO != null)
								return false;
						
						} else if (!this.CODIGO.equals(other.CODIGO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row64Struct other) {

		other.CODIGO = this.CODIGO;
	            other.NOMBRE = this.NOMBRE;
	            
	}

	public void copyKeysDataTo(row64Struct other) {

		other.CODIGO = this.CODIGO;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS) {

        	try {

        		int length = 0;
		
						this.CODIGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_CONSOLIDADOS_Consolidados_RIPS) {

        	try {

        		int length = 0;
		
						this.CODIGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.CODIGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CODIGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.NOMBRE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.NOMBRE = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.NOMBRE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.NOMBRE, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CODIGO="+String.valueOf(CODIGO));
		sb.append(",NOMBRE="+NOMBRE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row64Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CODIGO, other.CODIGO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row64Struct row64 = new row64Struct();




	
	/**
	 * [tAdvancedHash_row64 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row64", false);
		start_Hash.put("tAdvancedHash_row64", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row64";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row64");
					}
				
		int tos_count_tAdvancedHash_row64 = 0;
		

			   		// connection name:row64
			   		// source node:tDBInput_6 - inputs:(after_tDBInput_3) outputs:(row64,row64) | target node:tAdvancedHash_row64 - inputs:(row64) outputs:()
			   		// linked node: tMap_1 - inputs:(row101,row63,row64) outputs:(out11)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row64 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row64Struct> tHash_Lookup_row64 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row64Struct>getLookup(matchingModeEnum_row64);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row64", tHash_Lookup_row64);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row64 begin ] stop
 */



	
	/**
	 * [tDBInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_6", false);
		start_Hash.put("tDBInput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_6";
	
	
		int tos_count_tDBInput_6 = 0;
		
	


	
		    int nb_line_tDBInput_6 = 0;
		    java.sql.Connection conn_tDBInput_6 = null;
				conn_tDBInput_6 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
                boolean isTimeZoneNull_tDBInput_6 = false;
				boolean isConnectionWrapped_tDBInput_6 = !(conn_tDBInput_6 instanceof oracle.jdbc.OracleConnection) && conn_tDBInput_6.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tDBInput_6 = null;
                if (isConnectionWrapped_tDBInput_6) {
					unwrappedOraConn_tDBInput_6 = conn_tDBInput_6.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tDBInput_6 != null) {
                        isTimeZoneNull_tDBInput_6 = (unwrappedOraConn_tDBInput_6.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tDBInput_6 = (((oracle.jdbc.OracleConnection)conn_tDBInput_6).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tDBInput_6) {
					java.sql.Statement stmtGetTZ_tDBInput_6 = conn_tDBInput_6.createStatement();
					java.sql.ResultSet rsGetTZ_tDBInput_6 = stmtGetTZ_tDBInput_6.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tDBInput_6 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tDBInput_6.next()) {
						sessionTimezone_tDBInput_6 = rsGetTZ_tDBInput_6.getString(1);
					}
					if (isConnectionWrapped_tDBInput_6 && unwrappedOraConn_tDBInput_6 != null) {
                        unwrappedOraConn_tDBInput_6.setSessionTimeZone(sessionTimezone_tDBInput_6);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tDBInput_6).setSessionTimeZone(sessionTimezone_tDBInput_6);
                    }
				}
			
		    
			java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tDBInput_6.setFetchSize(2000);


		    String dbquery_tDBInput_6 = "SELECT \n  CODIGO, \n  NOMBRE\nFROM GEN_FINALIDADCONSULTA\nWHERE ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tDBInput_6_QUERY",dbquery_tDBInput_6);

		    java.sql.ResultSet rs_tDBInput_6 = null;

		    try {
		    	rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
		    	int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

		    String tmpContent_tDBInput_6 = null;
		    
		    
		    while (rs_tDBInput_6.next()) {
		        nb_line_tDBInput_6++;
		        
							if(colQtyInRs_tDBInput_6 < 1) {
								row64.CODIGO = null;
							} else {
		                          
					if(rs_tDBInput_6.getObject(1) != null) {
						row64.CODIGO = rs_tDBInput_6.getBigDecimal(1);
					} else {
				
						row64.CODIGO = null;
					}
		                    }
							if(colQtyInRs_tDBInput_6 < 2) {
								row64.NOMBRE = null;
							} else {
	                         		
        	row64.NOMBRE = routines.system.JDBCUtil.getString(rs_tDBInput_6, 2, false);
		                    }
					




 



/**
 * [tDBInput_6 begin ] stop
 */
	
	/**
	 * [tDBInput_6 main ] start
	 */

	

	
	
	currentComponent="tDBInput_6";
	
	

 


	tos_count_tDBInput_6++;

/**
 * [tDBInput_6 main ] stop
 */
	
	/**
	 * [tDBInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_6";
	
	

 



/**
 * [tDBInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row64 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row64";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row64"
						
						);
					}
					


			   
			   

					row64Struct row64_HashRow = new row64Struct();
		   	   	   
				
				row64_HashRow.CODIGO = row64.CODIGO;
				
				row64_HashRow.NOMBRE = row64.NOMBRE;
				
			tHash_Lookup_row64.put(row64_HashRow);
			
            




 


	tos_count_tAdvancedHash_row64++;

/**
 * [tAdvancedHash_row64 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row64 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row64";
	
	

 



/**
 * [tAdvancedHash_row64 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row64 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row64";
	
	

 



/**
 * [tAdvancedHash_row64 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";
	
	

 



/**
 * [tDBInput_6 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_6 end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";
	
	

}
}finally{
	if (rs_tDBInput_6 != null) {
		rs_tDBInput_6.close();
	}
	if (stmt_tDBInput_6 != null) {
		stmt_tDBInput_6.close();
	}
}

globalMap.put("tDBInput_6_NB_LINE",nb_line_tDBInput_6);
 

ok_Hash.put("tDBInput_6", true);
end_Hash.put("tDBInput_6", System.currentTimeMillis());




/**
 * [tDBInput_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row64 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row64";
	
	

tHash_Lookup_row64.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row64");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row64", true);
end_Hash.put("tAdvancedHash_row64", System.currentTimeMillis());




/**
 * [tAdvancedHash_row64 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_6";
	
	

 



/**
 * [tDBInput_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row64 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row64";
	
	

 



/**
 * [tAdvancedHash_row64 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final Consolidados_RIPS Consolidados_RIPSClass = new Consolidados_RIPS();

        int exitCode = Consolidados_RIPSClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Consolidados_RIPS.class.getClassLoader().getResourceAsStream("rep_consolidados/consolidados_rips_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Consolidados_RIPS.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }
            
            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("db_origen_Server", "id_String");
                        if(context.getStringValue("db_origen_Server") == null) {
                            context.db_origen_Server = null;
                        } else {
                            context.db_origen_Server=(String) context.getProperty("db_origen_Server");
                        }
                        context.setContextType("db_origen_Password", "id_Password");
                        if(context.getStringValue("db_origen_Password") == null) {
                            context.db_origen_Password = null;
                        } else {
                            String pwd_db_origen_Password_value = context.getProperty("db_origen_Password");
                            context.db_origen_Password = null;
                            if(pwd_db_origen_Password_value!=null) {
                                if(context_param.containsKey("db_origen_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_origen_Password = pwd_db_origen_Password_value;
                                } else if (!pwd_db_origen_Password_value.isEmpty()) {
                                    try {
                                        context.db_origen_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_origen_Password_value);
                                        context.put("db_origen_Password",context.db_origen_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_origen_Login", "id_String");
                        if(context.getStringValue("db_origen_Login") == null) {
                            context.db_origen_Login = null;
                        } else {
                            context.db_origen_Login=(String) context.getProperty("db_origen_Login");
                        }
                        context.setContextType("db_origen_Schema", "id_String");
                        if(context.getStringValue("db_origen_Schema") == null) {
                            context.db_origen_Schema = null;
                        } else {
                            context.db_origen_Schema=(String) context.getProperty("db_origen_Schema");
                        }
                        context.setContextType("db_origen_ServiceName", "id_String");
                        if(context.getStringValue("db_origen_ServiceName") == null) {
                            context.db_origen_ServiceName = null;
                        } else {
                            context.db_origen_ServiceName=(String) context.getProperty("db_origen_ServiceName");
                        }
                        context.setContextType("db_origen_AdditionalParams", "id_String");
                        if(context.getStringValue("db_origen_AdditionalParams") == null) {
                            context.db_origen_AdditionalParams = null;
                        } else {
                            context.db_origen_AdditionalParams=(String) context.getProperty("db_origen_AdditionalParams");
                        }
                        context.setContextType("db_origen_Port", "id_String");
                        if(context.getStringValue("db_origen_Port") == null) {
                            context.db_origen_Port = null;
                        } else {
                            context.db_origen_Port=(String) context.getProperty("db_origen_Port");
                        }
                        context.setContextType("FECHA_TERMINACION", "id_String");
                        if(context.getStringValue("FECHA_TERMINACION") == null) {
                            context.FECHA_TERMINACION = null;
                        } else {
                            context.FECHA_TERMINACION=(String) context.getProperty("FECHA_TERMINACION");
                        }
                        context.setContextType("FUERZA", "id_String");
                        if(context.getStringValue("FUERZA") == null) {
                            context.FUERZA = null;
                        } else {
                            context.FUERZA=(String) context.getProperty("FUERZA");
                        }
                        context.setContextType("ESM_REMITE", "id_String");
                        if(context.getStringValue("ESM_REMITE") == null) {
                            context.ESM_REMITE = null;
                        } else {
                            context.ESM_REMITE=(String) context.getProperty("ESM_REMITE");
                        }
                        context.setContextType("VINCULACION", "id_String");
                        if(context.getStringValue("VINCULACION") == null) {
                            context.VINCULACION = null;
                        } else {
                            context.VINCULACION=(String) context.getProperty("VINCULACION");
                        }
                        context.setContextType("ESQUEMA", "id_String");
                        if(context.getStringValue("ESQUEMA") == null) {
                            context.ESQUEMA = null;
                        } else {
                            context.ESQUEMA=(String) context.getProperty("ESQUEMA");
                        }
                        context.setContextType("ARCHIVOS_ID", "id_BigDecimal");
                        if(context.getStringValue("ARCHIVOS_ID") == null) {
                            context.ARCHIVOS_ID = null;
                        } else {
                            try{
                                context.ARCHIVOS_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("ARCHIVOS_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ARCHIVOS_ID", e.getMessage()));
                                context.ARCHIVOS_ID=null;
                            }
                        }
                        context.setContextType("USUARIO", "id_String");
                        if(context.getStringValue("USUARIO") == null) {
                            context.USUARIO = null;
                        } else {
                            context.USUARIO=(String) context.getProperty("USUARIO");
                        }
                        context.setContextType("EDAD_INICIAL", "id_String");
                        if(context.getStringValue("EDAD_INICIAL") == null) {
                            context.EDAD_INICIAL = null;
                        } else {
                            context.EDAD_INICIAL=(String) context.getProperty("EDAD_INICIAL");
                        }
                        context.setContextType("CARPETA_TEMPORAL", "id_String");
                        if(context.getStringValue("CARPETA_TEMPORAL") == null) {
                            context.CARPETA_TEMPORAL = null;
                        } else {
                            context.CARPETA_TEMPORAL=(String) context.getProperty("CARPETA_TEMPORAL");
                        }
                        context.setContextType("FECHA_FINAL", "id_String");
                        if(context.getStringValue("FECHA_FINAL") == null) {
                            context.FECHA_FINAL = null;
                        } else {
                            context.FECHA_FINAL=(String) context.getProperty("FECHA_FINAL");
                        }
                        context.setContextType("CARPETA_SALIDA", "id_String");
                        if(context.getStringValue("CARPETA_SALIDA") == null) {
                            context.CARPETA_SALIDA = null;
                        } else {
                            context.CARPETA_SALIDA=(String) context.getProperty("CARPETA_SALIDA");
                        }
                        context.setContextType("SIGLA", "id_String");
                        if(context.getStringValue("SIGLA") == null) {
                            context.SIGLA = null;
                        } else {
                            context.SIGLA=(String) context.getProperty("SIGLA");
                        }
                        context.setContextType("NOMBRE_CONSOLIDADO", "id_String");
                        if(context.getStringValue("NOMBRE_CONSOLIDADO") == null) {
                            context.NOMBRE_CONSOLIDADO = null;
                        } else {
                            context.NOMBRE_CONSOLIDADO=(String) context.getProperty("NOMBRE_CONSOLIDADO");
                        }
                        context.setContextType("DEPARTAMENTO", "id_String");
                        if(context.getStringValue("DEPARTAMENTO") == null) {
                            context.DEPARTAMENTO = null;
                        } else {
                            context.DEPARTAMENTO=(String) context.getProperty("DEPARTAMENTO");
                        }
                        context.setContextType("CLASIFICACION", "id_String");
                        if(context.getStringValue("CLASIFICACION") == null) {
                            context.CLASIFICACION = null;
                        } else {
                            context.CLASIFICACION=(String) context.getProperty("CLASIFICACION");
                        }
                        context.setContextType("CIUDAD", "id_String");
                        if(context.getStringValue("CIUDAD") == null) {
                            context.CIUDAD = null;
                        } else {
                            context.CIUDAD=(String) context.getProperty("CIUDAD");
                        }
                        context.setContextType("FECHA_HORA_FINAL_EJECUCION", "id_Date");
                        if(context.getStringValue("FECHA_HORA_FINAL_EJECUCION") == null) {
                            context.FECHA_HORA_FINAL_EJECUCION = null;
                        } else {
                            String context_FECHA_HORA_FINAL_EJECUCION_value = context.getProperty("FECHA_HORA_FINAL_EJECUCION");
                            try{
                                if (context_FECHA_HORA_FINAL_EJECUCION_value == null){
                                    context_FECHA_HORA_FINAL_EJECUCION_value = "";
                                }
                                int context_FECHA_HORA_FINAL_EJECUCION_pos = context_FECHA_HORA_FINAL_EJECUCION_value.indexOf(";");
                                String context_FECHA_HORA_FINAL_EJECUCION_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_FECHA_HORA_FINAL_EJECUCION_pos > -1){
                                    context_FECHA_HORA_FINAL_EJECUCION_pattern = context_FECHA_HORA_FINAL_EJECUCION_value.substring(0, context_FECHA_HORA_FINAL_EJECUCION_pos);
                                    context_FECHA_HORA_FINAL_EJECUCION_value = context_FECHA_HORA_FINAL_EJECUCION_value.substring(context_FECHA_HORA_FINAL_EJECUCION_pos + 1);
                                }

                                context.FECHA_HORA_FINAL_EJECUCION=(java.util.Date)(new java.text.SimpleDateFormat(context_FECHA_HORA_FINAL_EJECUCION_pattern).parse(context_FECHA_HORA_FINAL_EJECUCION_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_FECHA_HORA_FINAL_EJECUCION_longValue = Long.valueOf(context_FECHA_HORA_FINAL_EJECUCION_value);
                                    context.FECHA_HORA_FINAL_EJECUCION = new java.util.Date(context_FECHA_HORA_FINAL_EJECUCION_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "FECHA_HORA_FINAL_EJECUCION", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.FECHA_HORA_FINAL_EJECUCION=null;
                                }
                            }
                        }
                        context.setContextType("ID", "id_BigDecimal");
                        if(context.getStringValue("ID") == null) {
                            context.ID = null;
                        } else {
                            try{
                                context.ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ID", e.getMessage()));
                                context.ID=null;
                            }
                        }
                        context.setContextType("FECHA_HORA_INICIO_EJECUCION", "id_Date");
                        if(context.getStringValue("FECHA_HORA_INICIO_EJECUCION") == null) {
                            context.FECHA_HORA_INICIO_EJECUCION = null;
                        } else {
                            String context_FECHA_HORA_INICIO_EJECUCION_value = context.getProperty("FECHA_HORA_INICIO_EJECUCION");
                            try{
                                if (context_FECHA_HORA_INICIO_EJECUCION_value == null){
                                    context_FECHA_HORA_INICIO_EJECUCION_value = "";
                                }
                                int context_FECHA_HORA_INICIO_EJECUCION_pos = context_FECHA_HORA_INICIO_EJECUCION_value.indexOf(";");
                                String context_FECHA_HORA_INICIO_EJECUCION_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_FECHA_HORA_INICIO_EJECUCION_pos > -1){
                                    context_FECHA_HORA_INICIO_EJECUCION_pattern = context_FECHA_HORA_INICIO_EJECUCION_value.substring(0, context_FECHA_HORA_INICIO_EJECUCION_pos);
                                    context_FECHA_HORA_INICIO_EJECUCION_value = context_FECHA_HORA_INICIO_EJECUCION_value.substring(context_FECHA_HORA_INICIO_EJECUCION_pos + 1);
                                }

                                context.FECHA_HORA_INICIO_EJECUCION=(java.util.Date)(new java.text.SimpleDateFormat(context_FECHA_HORA_INICIO_EJECUCION_pattern).parse(context_FECHA_HORA_INICIO_EJECUCION_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_FECHA_HORA_INICIO_EJECUCION_longValue = Long.valueOf(context_FECHA_HORA_INICIO_EJECUCION_value);
                                    context.FECHA_HORA_INICIO_EJECUCION = new java.util.Date(context_FECHA_HORA_INICIO_EJECUCION_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "FECHA_HORA_INICIO_EJECUCION", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.FECHA_HORA_INICIO_EJECUCION=null;
                                }
                            }
                        }
                        context.setContextType("FECHA_INICIAL", "id_String");
                        if(context.getStringValue("FECHA_INICIAL") == null) {
                            context.FECHA_INICIAL = null;
                        } else {
                            context.FECHA_INICIAL=(String) context.getProperty("FECHA_INICIAL");
                        }
                        context.setContextType("REGIONAL", "id_String");
                        if(context.getStringValue("REGIONAL") == null) {
                            context.REGIONAL = null;
                        } else {
                            context.REGIONAL=(String) context.getProperty("REGIONAL");
                        }
                        context.setContextType("EDAD_FINAL", "id_String");
                        if(context.getStringValue("EDAD_FINAL") == null) {
                            context.EDAD_FINAL = null;
                        } else {
                            context.EDAD_FINAL=(String) context.getProperty("EDAD_FINAL");
                        }
                        context.setContextType("db_destino_ServiceName", "id_String");
                        if(context.getStringValue("db_destino_ServiceName") == null) {
                            context.db_destino_ServiceName = null;
                        } else {
                            context.db_destino_ServiceName=(String) context.getProperty("db_destino_ServiceName");
                        }
                        context.setContextType("db_destino_AdditionalParams", "id_String");
                        if(context.getStringValue("db_destino_AdditionalParams") == null) {
                            context.db_destino_AdditionalParams = null;
                        } else {
                            context.db_destino_AdditionalParams=(String) context.getProperty("db_destino_AdditionalParams");
                        }
                        context.setContextType("db_destino_Login", "id_String");
                        if(context.getStringValue("db_destino_Login") == null) {
                            context.db_destino_Login = null;
                        } else {
                            context.db_destino_Login=(String) context.getProperty("db_destino_Login");
                        }
                        context.setContextType("db_destino_Port", "id_String");
                        if(context.getStringValue("db_destino_Port") == null) {
                            context.db_destino_Port = null;
                        } else {
                            context.db_destino_Port=(String) context.getProperty("db_destino_Port");
                        }
                        context.setContextType("db_destino_Schema", "id_String");
                        if(context.getStringValue("db_destino_Schema") == null) {
                            context.db_destino_Schema = null;
                        } else {
                            context.db_destino_Schema=(String) context.getProperty("db_destino_Schema");
                        }
                        context.setContextType("db_destino_Server", "id_String");
                        if(context.getStringValue("db_destino_Server") == null) {
                            context.db_destino_Server = null;
                        } else {
                            context.db_destino_Server=(String) context.getProperty("db_destino_Server");
                        }
                        context.setContextType("db_destino_Password", "id_Password");
                        if(context.getStringValue("db_destino_Password") == null) {
                            context.db_destino_Password = null;
                        } else {
                            String pwd_db_destino_Password_value = context.getProperty("db_destino_Password");
                            context.db_destino_Password = null;
                            if(pwd_db_destino_Password_value!=null) {
                                if(context_param.containsKey("db_destino_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_destino_Password = pwd_db_destino_Password_value;
                                } else if (!pwd_db_destino_Password_value.isEmpty()) {
                                    try {
                                        context.db_destino_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_destino_Password_value);
                                        context.put("db_destino_Password",context.db_destino_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("ESPECIALIDAD_ID", "id_String");
                        if(context.getStringValue("ESPECIALIDAD_ID") == null) {
                            context.ESPECIALIDAD_ID = null;
                        } else {
                            context.ESPECIALIDAD_ID=(String) context.getProperty("ESPECIALIDAD_ID");
                        }
                        context.setContextType("TIPO_USUARIO", "id_String");
                        if(context.getStringValue("TIPO_USUARIO") == null) {
                            context.TIPO_USUARIO = null;
                        } else {
                            context.TIPO_USUARIO=(String) context.getProperty("TIPO_USUARIO");
                        }
                        context.setContextType("FECHA_REALIZACION", "id_String");
                        if(context.getStringValue("FECHA_REALIZACION") == null) {
                            context.FECHA_REALIZACION = null;
                        } else {
                            context.FECHA_REALIZACION=(String) context.getProperty("FECHA_REALIZACION");
                        }
                        context.setContextType("RAN_CONDICION_ODH", "id_String");
                        if(context.getStringValue("RAN_CONDICION_ODH") == null) {
                            context.RAN_CONDICION_ODH = null;
                        } else {
                            context.RAN_CONDICION_ODH=(String) context.getProperty("RAN_CONDICION_ODH");
                        }
                        context.setContextType("NOMBRE_CSV", "id_String");
                        if(context.getStringValue("NOMBRE_CSV") == null) {
                            context.NOMBRE_CSV = null;
                        } else {
                            context.NOMBRE_CSV=(String) context.getProperty("NOMBRE_CSV");
                        }
                        context.setContextType("ESPECIALIDAD", "id_String");
                        if(context.getStringValue("ESPECIALIDAD") == null) {
                            context.ESPECIALIDAD = null;
                        } else {
                            context.ESPECIALIDAD=(String) context.getProperty("ESPECIALIDAD");
                        }
                        context.setContextType("TPLANAFILIACION", "id_String");
                        if(context.getStringValue("TPLANAFILIACION") == null) {
                            context.TPLANAFILIACION = null;
                        } else {
                            context.TPLANAFILIACION=(String) context.getProperty("TPLANAFILIACION");
                        }
                        context.setContextType("GRADO", "id_String");
                        if(context.getStringValue("GRADO") == null) {
                            context.GRADO = null;
                        } else {
                            context.GRADO=(String) context.getProperty("GRADO");
                        }
                        context.setContextType("GRUPO_EDAD", "id_String");
                        if(context.getStringValue("GRUPO_EDAD") == null) {
                            context.GRUPO_EDAD = null;
                        } else {
                            context.GRUPO_EDAD=(String) context.getProperty("GRUPO_EDAD");
                        }
                        context.setContextType("TCOTIZACION", "id_String");
                        if(context.getStringValue("TCOTIZACION") == null) {
                            context.TCOTIZACION = null;
                        } else {
                            context.TCOTIZACION=(String) context.getProperty("TCOTIZACION");
                        }
                        context.setContextType("ESM_NOMBRE", "id_String");
                        if(context.getStringValue("ESM_NOMBRE") == null) {
                            context.ESM_NOMBRE = null;
                        } else {
                            context.ESM_NOMBRE=(String) context.getProperty("ESM_NOMBRE");
                        }
                        context.setContextType("FECHA_TITULO", "id_String");
                        if(context.getStringValue("FECHA_TITULO") == null) {
                            context.FECHA_TITULO = null;
                        } else {
                            context.FECHA_TITULO=(String) context.getProperty("FECHA_TITULO");
                        }
                        context.setContextType("ESM_USUARIO", "id_String");
                        if(context.getStringValue("ESM_USUARIO") == null) {
                            context.ESM_USUARIO = null;
                        } else {
                            context.ESM_USUARIO=(String) context.getProperty("ESM_USUARIO");
                        }
                        context.setContextType("FUERZA_NOMBRE", "id_String");
                        if(context.getStringValue("FUERZA_NOMBRE") == null) {
                            context.FUERZA_NOMBRE = null;
                        } else {
                            context.FUERZA_NOMBRE=(String) context.getProperty("FUERZA_NOMBRE");
                        }
                        context.setContextType("PERIODO_FINAL", "id_String");
                        if(context.getStringValue("PERIODO_FINAL") == null) {
                            context.PERIODO_FINAL = null;
                        } else {
                            context.PERIODO_FINAL=(String) context.getProperty("PERIODO_FINAL");
                        }
                        context.setContextType("TIPO_SOLICITUD", "id_String");
                        if(context.getStringValue("TIPO_SOLICITUD") == null) {
                            context.TIPO_SOLICITUD = null;
                        } else {
                            context.TIPO_SOLICITUD=(String) context.getProperty("TIPO_SOLICITUD");
                        }
                        context.setContextType("GE_VALOR_MENOR", "id_String");
                        if(context.getStringValue("GE_VALOR_MENOR") == null) {
                            context.GE_VALOR_MENOR = null;
                        } else {
                            context.GE_VALOR_MENOR=(String) context.getProperty("GE_VALOR_MENOR");
                        }
                        context.setContextType("RAN_CONDICION_AD", "id_String");
                        if(context.getStringValue("RAN_CONDICION_AD") == null) {
                            context.RAN_CONDICION_AD = null;
                        } else {
                            context.RAN_CONDICION_AD=(String) context.getProperty("RAN_CONDICION_AD");
                        }
                        context.setContextType("EXISTE_REPORTE", "id_Integer");
                        if(context.getStringValue("EXISTE_REPORTE") == null) {
                            context.EXISTE_REPORTE = null;
                        } else {
                            try{
                                context.EXISTE_REPORTE=routines.system.ParserUtils.parseTo_Integer (context.getProperty("EXISTE_REPORTE"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "EXISTE_REPORTE", e.getMessage()));
                                context.EXISTE_REPORTE=null;
                            }
                        }
                        context.setContextType("PERIODO_INICIAL", "id_String");
                        if(context.getStringValue("PERIODO_INICIAL") == null) {
                            context.PERIODO_INICIAL = null;
                        } else {
                            context.PERIODO_INICIAL=(String) context.getProperty("PERIODO_INICIAL");
                        }
                        context.setContextType("RAN_CONDICION_PA", "id_String");
                        if(context.getStringValue("RAN_CONDICION_PA") == null) {
                            context.RAN_CONDICION_PA = null;
                        } else {
                            context.RAN_CONDICION_PA=(String) context.getProperty("RAN_CONDICION_PA");
                        }
                        context.setContextType("ROLES_ID", "id_String");
                        if(context.getStringValue("ROLES_ID") == null) {
                            context.ROLES_ID = null;
                        } else {
                            context.ROLES_ID=(String) context.getProperty("ROLES_ID");
                        }
                        context.setContextType("SEXO", "id_String");
                        if(context.getStringValue("SEXO") == null) {
                            context.SEXO = null;
                        } else {
                            context.SEXO=(String) context.getProperty("SEXO");
                        }
                        context.setContextType("NOMBRE_ZIP", "id_String");
                        if(context.getStringValue("NOMBRE_ZIP") == null) {
                            context.NOMBRE_ZIP = null;
                        } else {
                            context.NOMBRE_ZIP=(String) context.getProperty("NOMBRE_ZIP");
                        }
                        context.setContextType("TIPO_CITA", "id_String");
                        if(context.getStringValue("TIPO_CITA") == null) {
                            context.TIPO_CITA = null;
                        } else {
                            context.TIPO_CITA=(String) context.getProperty("TIPO_CITA");
                        }
                        context.setContextType("ACTUALIZACION_TOTAL", "id_Boolean");
                        if(context.getStringValue("ACTUALIZACION_TOTAL") == null) {
                            context.ACTUALIZACION_TOTAL = null;
                        } else {
                            try{
                                context.ACTUALIZACION_TOTAL=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("ACTUALIZACION_TOTAL"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ACTUALIZACION_TOTAL", e.getMessage()));
                                context.ACTUALIZACION_TOTAL=null;
                            }
                        }
                        context.setContextType("FECHA_EJECUCION", "id_String");
                        if(context.getStringValue("FECHA_EJECUCION") == null) {
                            context.FECHA_EJECUCION = null;
                        } else {
                            context.FECHA_EJECUCION=(String) context.getProperty("FECHA_EJECUCION");
                        }
                        context.setContextType("LOGS_ERROR", "id_String");
                        if(context.getStringValue("LOGS_ERROR") == null) {
                            context.LOGS_ERROR = null;
                        } else {
                            context.LOGS_ERROR=(String) context.getProperty("LOGS_ERROR");
                        }
                        context.setContextType("LOGS_EXECUTION", "id_String");
                        if(context.getStringValue("LOGS_EXECUTION") == null) {
                            context.LOGS_EXECUTION = null;
                        } else {
                            context.LOGS_EXECUTION=(String) context.getProperty("LOGS_EXECUTION");
                        }
                        context.setContextType("FANTERIOR", "id_String");
                        if(context.getStringValue("FANTERIOR") == null) {
                            context.FANTERIOR = null;
                        } else {
                            context.FANTERIOR=(String) context.getProperty("FANTERIOR");
                        }
                        context.setContextType("ESTADO_EXEC", "id_String");
                        if(context.getStringValue("ESTADO_EXEC") == null) {
                            context.ESTADO_EXEC = null;
                        } else {
                            context.ESTADO_EXEC=(String) context.getProperty("ESTADO_EXEC");
                        }
                        context.setContextType("HORA_INICIO", "id_String");
                        if(context.getStringValue("HORA_INICIO") == null) {
                            context.HORA_INICIO = null;
                        } else {
                            context.HORA_INICIO=(String) context.getProperty("HORA_INICIO");
                        }
                        context.setContextType("ESTADO", "id_String");
                        if(context.getStringValue("ESTADO") == null) {
                            context.ESTADO = null;
                        } else {
                            context.ESTADO=(String) context.getProperty("ESTADO");
                        }
                        context.setContextType("BODEGA", "id_String");
                        if(context.getStringValue("BODEGA") == null) {
                            context.BODEGA = null;
                        } else {
                            context.BODEGA=(String) context.getProperty("BODEGA");
                        }
                        context.setContextType("ID_SOLICITUD", "id_Integer");
                        if(context.getStringValue("ID_SOLICITUD") == null) {
                            context.ID_SOLICITUD = null;
                        } else {
                            try{
                                context.ID_SOLICITUD=routines.system.ParserUtils.parseTo_Integer (context.getProperty("ID_SOLICITUD"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ID_SOLICITUD", e.getMessage()));
                                context.ID_SOLICITUD=null;
                            }
                        }
                        context.setContextType("LAST_DAYS", "id_Integer");
                        if(context.getStringValue("LAST_DAYS") == null) {
                            context.LAST_DAYS = null;
                        } else {
                            try{
                                context.LAST_DAYS=routines.system.ParserUtils.parseTo_Integer (context.getProperty("LAST_DAYS"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "LAST_DAYS", e.getMessage()));
                                context.LAST_DAYS=null;
                            }
                        }
                        context.setContextType("HORA_FINAL", "id_String");
                        if(context.getStringValue("HORA_FINAL") == null) {
                            context.HORA_FINAL = null;
                        } else {
                            context.HORA_FINAL=(String) context.getProperty("HORA_FINAL");
                        }
                        context.setContextType("ERROR", "id_String");
                        if(context.getStringValue("ERROR") == null) {
                            context.ERROR = null;
                        } else {
                            context.ERROR=(String) context.getProperty("ERROR");
                        }
                        context.setContextType("ORIGEN", "id_String");
                        if(context.getStringValue("ORIGEN") == null) {
                            context.ORIGEN = null;
                        } else {
                            context.ORIGEN=(String) context.getProperty("ORIGEN");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("db_origen_Server")) {
                context.db_origen_Server = (String) parentContextMap.get("db_origen_Server");
            }if (parentContextMap.containsKey("db_origen_Password")) {
                context.db_origen_Password = (java.lang.String) parentContextMap.get("db_origen_Password");
            }if (parentContextMap.containsKey("db_origen_Login")) {
                context.db_origen_Login = (String) parentContextMap.get("db_origen_Login");
            }if (parentContextMap.containsKey("db_origen_Schema")) {
                context.db_origen_Schema = (String) parentContextMap.get("db_origen_Schema");
            }if (parentContextMap.containsKey("db_origen_ServiceName")) {
                context.db_origen_ServiceName = (String) parentContextMap.get("db_origen_ServiceName");
            }if (parentContextMap.containsKey("db_origen_AdditionalParams")) {
                context.db_origen_AdditionalParams = (String) parentContextMap.get("db_origen_AdditionalParams");
            }if (parentContextMap.containsKey("db_origen_Port")) {
                context.db_origen_Port = (String) parentContextMap.get("db_origen_Port");
            }if (parentContextMap.containsKey("FECHA_TERMINACION")) {
                context.FECHA_TERMINACION = (String) parentContextMap.get("FECHA_TERMINACION");
            }if (parentContextMap.containsKey("FUERZA")) {
                context.FUERZA = (String) parentContextMap.get("FUERZA");
            }if (parentContextMap.containsKey("ESM_REMITE")) {
                context.ESM_REMITE = (String) parentContextMap.get("ESM_REMITE");
            }if (parentContextMap.containsKey("VINCULACION")) {
                context.VINCULACION = (String) parentContextMap.get("VINCULACION");
            }if (parentContextMap.containsKey("ESQUEMA")) {
                context.ESQUEMA = (String) parentContextMap.get("ESQUEMA");
            }if (parentContextMap.containsKey("ARCHIVOS_ID")) {
                context.ARCHIVOS_ID = (BigDecimal) parentContextMap.get("ARCHIVOS_ID");
            }if (parentContextMap.containsKey("USUARIO")) {
                context.USUARIO = (String) parentContextMap.get("USUARIO");
            }if (parentContextMap.containsKey("EDAD_INICIAL")) {
                context.EDAD_INICIAL = (String) parentContextMap.get("EDAD_INICIAL");
            }if (parentContextMap.containsKey("CARPETA_TEMPORAL")) {
                context.CARPETA_TEMPORAL = (String) parentContextMap.get("CARPETA_TEMPORAL");
            }if (parentContextMap.containsKey("FECHA_FINAL")) {
                context.FECHA_FINAL = (String) parentContextMap.get("FECHA_FINAL");
            }if (parentContextMap.containsKey("CARPETA_SALIDA")) {
                context.CARPETA_SALIDA = (String) parentContextMap.get("CARPETA_SALIDA");
            }if (parentContextMap.containsKey("SIGLA")) {
                context.SIGLA = (String) parentContextMap.get("SIGLA");
            }if (parentContextMap.containsKey("NOMBRE_CONSOLIDADO")) {
                context.NOMBRE_CONSOLIDADO = (String) parentContextMap.get("NOMBRE_CONSOLIDADO");
            }if (parentContextMap.containsKey("DEPARTAMENTO")) {
                context.DEPARTAMENTO = (String) parentContextMap.get("DEPARTAMENTO");
            }if (parentContextMap.containsKey("CLASIFICACION")) {
                context.CLASIFICACION = (String) parentContextMap.get("CLASIFICACION");
            }if (parentContextMap.containsKey("CIUDAD")) {
                context.CIUDAD = (String) parentContextMap.get("CIUDAD");
            }if (parentContextMap.containsKey("FECHA_HORA_FINAL_EJECUCION")) {
                context.FECHA_HORA_FINAL_EJECUCION = (java.util.Date) parentContextMap.get("FECHA_HORA_FINAL_EJECUCION");
            }if (parentContextMap.containsKey("ID")) {
                context.ID = (BigDecimal) parentContextMap.get("ID");
            }if (parentContextMap.containsKey("FECHA_HORA_INICIO_EJECUCION")) {
                context.FECHA_HORA_INICIO_EJECUCION = (java.util.Date) parentContextMap.get("FECHA_HORA_INICIO_EJECUCION");
            }if (parentContextMap.containsKey("FECHA_INICIAL")) {
                context.FECHA_INICIAL = (String) parentContextMap.get("FECHA_INICIAL");
            }if (parentContextMap.containsKey("REGIONAL")) {
                context.REGIONAL = (String) parentContextMap.get("REGIONAL");
            }if (parentContextMap.containsKey("EDAD_FINAL")) {
                context.EDAD_FINAL = (String) parentContextMap.get("EDAD_FINAL");
            }if (parentContextMap.containsKey("db_destino_ServiceName")) {
                context.db_destino_ServiceName = (String) parentContextMap.get("db_destino_ServiceName");
            }if (parentContextMap.containsKey("db_destino_AdditionalParams")) {
                context.db_destino_AdditionalParams = (String) parentContextMap.get("db_destino_AdditionalParams");
            }if (parentContextMap.containsKey("db_destino_Login")) {
                context.db_destino_Login = (String) parentContextMap.get("db_destino_Login");
            }if (parentContextMap.containsKey("db_destino_Port")) {
                context.db_destino_Port = (String) parentContextMap.get("db_destino_Port");
            }if (parentContextMap.containsKey("db_destino_Schema")) {
                context.db_destino_Schema = (String) parentContextMap.get("db_destino_Schema");
            }if (parentContextMap.containsKey("db_destino_Server")) {
                context.db_destino_Server = (String) parentContextMap.get("db_destino_Server");
            }if (parentContextMap.containsKey("db_destino_Password")) {
                context.db_destino_Password = (java.lang.String) parentContextMap.get("db_destino_Password");
            }if (parentContextMap.containsKey("ESPECIALIDAD_ID")) {
                context.ESPECIALIDAD_ID = (String) parentContextMap.get("ESPECIALIDAD_ID");
            }if (parentContextMap.containsKey("TIPO_USUARIO")) {
                context.TIPO_USUARIO = (String) parentContextMap.get("TIPO_USUARIO");
            }if (parentContextMap.containsKey("FECHA_REALIZACION")) {
                context.FECHA_REALIZACION = (String) parentContextMap.get("FECHA_REALIZACION");
            }if (parentContextMap.containsKey("RAN_CONDICION_ODH")) {
                context.RAN_CONDICION_ODH = (String) parentContextMap.get("RAN_CONDICION_ODH");
            }if (parentContextMap.containsKey("NOMBRE_CSV")) {
                context.NOMBRE_CSV = (String) parentContextMap.get("NOMBRE_CSV");
            }if (parentContextMap.containsKey("ESPECIALIDAD")) {
                context.ESPECIALIDAD = (String) parentContextMap.get("ESPECIALIDAD");
            }if (parentContextMap.containsKey("TPLANAFILIACION")) {
                context.TPLANAFILIACION = (String) parentContextMap.get("TPLANAFILIACION");
            }if (parentContextMap.containsKey("GRADO")) {
                context.GRADO = (String) parentContextMap.get("GRADO");
            }if (parentContextMap.containsKey("GRUPO_EDAD")) {
                context.GRUPO_EDAD = (String) parentContextMap.get("GRUPO_EDAD");
            }if (parentContextMap.containsKey("TCOTIZACION")) {
                context.TCOTIZACION = (String) parentContextMap.get("TCOTIZACION");
            }if (parentContextMap.containsKey("ESM_NOMBRE")) {
                context.ESM_NOMBRE = (String) parentContextMap.get("ESM_NOMBRE");
            }if (parentContextMap.containsKey("FECHA_TITULO")) {
                context.FECHA_TITULO = (String) parentContextMap.get("FECHA_TITULO");
            }if (parentContextMap.containsKey("ESM_USUARIO")) {
                context.ESM_USUARIO = (String) parentContextMap.get("ESM_USUARIO");
            }if (parentContextMap.containsKey("FUERZA_NOMBRE")) {
                context.FUERZA_NOMBRE = (String) parentContextMap.get("FUERZA_NOMBRE");
            }if (parentContextMap.containsKey("PERIODO_FINAL")) {
                context.PERIODO_FINAL = (String) parentContextMap.get("PERIODO_FINAL");
            }if (parentContextMap.containsKey("TIPO_SOLICITUD")) {
                context.TIPO_SOLICITUD = (String) parentContextMap.get("TIPO_SOLICITUD");
            }if (parentContextMap.containsKey("GE_VALOR_MENOR")) {
                context.GE_VALOR_MENOR = (String) parentContextMap.get("GE_VALOR_MENOR");
            }if (parentContextMap.containsKey("RAN_CONDICION_AD")) {
                context.RAN_CONDICION_AD = (String) parentContextMap.get("RAN_CONDICION_AD");
            }if (parentContextMap.containsKey("EXISTE_REPORTE")) {
                context.EXISTE_REPORTE = (Integer) parentContextMap.get("EXISTE_REPORTE");
            }if (parentContextMap.containsKey("PERIODO_INICIAL")) {
                context.PERIODO_INICIAL = (String) parentContextMap.get("PERIODO_INICIAL");
            }if (parentContextMap.containsKey("RAN_CONDICION_PA")) {
                context.RAN_CONDICION_PA = (String) parentContextMap.get("RAN_CONDICION_PA");
            }if (parentContextMap.containsKey("ROLES_ID")) {
                context.ROLES_ID = (String) parentContextMap.get("ROLES_ID");
            }if (parentContextMap.containsKey("SEXO")) {
                context.SEXO = (String) parentContextMap.get("SEXO");
            }if (parentContextMap.containsKey("NOMBRE_ZIP")) {
                context.NOMBRE_ZIP = (String) parentContextMap.get("NOMBRE_ZIP");
            }if (parentContextMap.containsKey("TIPO_CITA")) {
                context.TIPO_CITA = (String) parentContextMap.get("TIPO_CITA");
            }if (parentContextMap.containsKey("ACTUALIZACION_TOTAL")) {
                context.ACTUALIZACION_TOTAL = (Boolean) parentContextMap.get("ACTUALIZACION_TOTAL");
            }if (parentContextMap.containsKey("FECHA_EJECUCION")) {
                context.FECHA_EJECUCION = (String) parentContextMap.get("FECHA_EJECUCION");
            }if (parentContextMap.containsKey("LOGS_ERROR")) {
                context.LOGS_ERROR = (String) parentContextMap.get("LOGS_ERROR");
            }if (parentContextMap.containsKey("LOGS_EXECUTION")) {
                context.LOGS_EXECUTION = (String) parentContextMap.get("LOGS_EXECUTION");
            }if (parentContextMap.containsKey("FANTERIOR")) {
                context.FANTERIOR = (String) parentContextMap.get("FANTERIOR");
            }if (parentContextMap.containsKey("ESTADO_EXEC")) {
                context.ESTADO_EXEC = (String) parentContextMap.get("ESTADO_EXEC");
            }if (parentContextMap.containsKey("HORA_INICIO")) {
                context.HORA_INICIO = (String) parentContextMap.get("HORA_INICIO");
            }if (parentContextMap.containsKey("ESTADO")) {
                context.ESTADO = (String) parentContextMap.get("ESTADO");
            }if (parentContextMap.containsKey("BODEGA")) {
                context.BODEGA = (String) parentContextMap.get("BODEGA");
            }if (parentContextMap.containsKey("ID_SOLICITUD")) {
                context.ID_SOLICITUD = (Integer) parentContextMap.get("ID_SOLICITUD");
            }if (parentContextMap.containsKey("LAST_DAYS")) {
                context.LAST_DAYS = (Integer) parentContextMap.get("LAST_DAYS");
            }if (parentContextMap.containsKey("HORA_FINAL")) {
                context.HORA_FINAL = (String) parentContextMap.get("HORA_FINAL");
            }if (parentContextMap.containsKey("ERROR")) {
                context.ERROR = (String) parentContextMap.get("ERROR");
            }if (parentContextMap.containsKey("ORIGEN")) {
                context.ORIGEN = (String) parentContextMap.get("ORIGEN");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("db_origen_Password");
			parametersToEncrypt.add("db_destino_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Consolidados_RIPS");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tDBConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));
            connections.put("conn_tDBConnection_2", globalMap.get("conn_tDBConnection_2"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--context_file")) {
        	String keyValue = arg.substring(15);
        	String filePath = new String(java.util.Base64.getDecoder().decode(keyValue));
        	java.nio.file.Path contextFile = java.nio.file.Paths.get(filePath);
            try (java.io.BufferedReader reader = java.nio.file.Files.newBufferedReader(contextFile)) {
                String line;
                while ((line = reader.readLine()) != null) {
                    int index = -1;
                    if ( (index = line.indexOf('=')) > -1) {
							if (line.startsWith("--context_param")) {
								if ("id_Password".equals(context_param.getContextType(line.substring(16, index)))) {
									context_param.put(line.substring(16, index), routines.system.PasswordEncryptUtil.decryptPassword(
											line.substring(index + 1)));
								} else {
									context_param.put(line.substring(16, index), line.substring(index + 1));
								}
							}else {//--context_type
								context_param.setContextType(line.substring(15, index), line.substring(index + 1));
							}
                    }
                }
            } catch (java.io.IOException e) {
            	System.err.println("Could not load the context file: " + filePath);
                e.printStackTrace();
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     786688 characters generated by Talend Open Studio for ESB 
 *     on the November 4, 2024, 3:42:05 PM COT
 ************************************************************************************************/