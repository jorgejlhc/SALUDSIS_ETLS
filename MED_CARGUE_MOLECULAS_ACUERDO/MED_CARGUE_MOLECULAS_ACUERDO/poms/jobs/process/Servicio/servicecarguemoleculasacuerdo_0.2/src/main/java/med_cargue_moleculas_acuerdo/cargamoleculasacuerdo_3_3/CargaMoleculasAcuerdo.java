// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package med_cargue_moleculas_acuerdo.cargamoleculasacuerdo_3_3;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.Utils;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_9
	//import java.util.List;

	//the import part of tJavaRow_4
	//import java.util.List;

	//the import part of tJavaRow_14
	//import java.util.List;

	//the import part of tJavaRow_15
	//import java.util.List;

	//the import part of tJavaRow_16
	//import java.util.List;

	//the import part of tJavaRow_17
	//import java.util.List;

	//the import part of tJavaRow_18
	//import java.util.List;

	//the import part of tJavaRow_19
	//import java.util.List;

	//the import part of tJavaRow_3
	//import java.util.List;

	//the import part of tJavaRow_20
	//import java.util.List;

	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJavaRow_6
	//import java.util.List;

	//the import part of tJavaRow_5
	//import java.util.List;

	//the import part of tJavaRow_7
	//import java.util.List;

	//the import part of tJava_4
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJavaRow_2
	//import java.util.List;

	//the import part of tJava_3
	//import java.util.List;

	//the import part of tJava_5
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: CargaMoleculasAcuerdo Purpose: <br>
 * Description:  <br>
 * @author jorgejlhc@gmail.com
 * @version 8.8.8.20240722_1936-SNAPSHOT
 * @status 
 */
public class CargaMoleculasAcuerdo implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(BODEGA != null){
				
					this.setProperty("BODEGA", BODEGA.toString());
				
			}
			
			if(acuerdo_id != null){
				
					this.setProperty("acuerdo_id", acuerdo_id.toString());
				
			}
			
			if(carga_id != null){
				
					this.setProperty("carga_id", carga_id.toString());
				
			}
			
			if(Contenido != null){
				
					this.setProperty("Contenido", Contenido.toString());
				
			}
			
			if(ErrorLog != null){
				
					this.setProperty("ErrorLog", ErrorLog.toString());
				
			}
			
			if(IsValid != null){
				
					this.setProperty("IsValid", IsValid.toString());
				
			}
			
			if(Linea != null){
				
					this.setProperty("Linea", Linea.toString());
				
			}
			
			if(MedGenerico_Id != null){
				
					this.setProperty("MedGenerico_Id", MedGenerico_Id.toString());
				
			}
			
			if(Mensaje_1 != null){
				
					this.setProperty("Mensaje_1", Mensaje_1.toString());
				
			}
			
			if(nombre != null){
				
					this.setProperty("nombre", nombre.toString());
				
			}
			
			if(NusoIndividual != null){
				
					this.setProperty("NusoIndividual", NusoIndividual.toString());
				
			}
			
			if(NusoRegistro != null){
				
					this.setProperty("NusoRegistro", NusoRegistro.toString());
				
			}
			
			if(result != null){
				
					this.setProperty("result", result.toString());
				
			}
			
			if(Salida != null){
				
					this.setProperty("Salida", Salida.toString());
				
			}
			
			if(TContenido != null){
				
					this.setProperty("TContenido", TContenido.toString());
				
			}
			
			if(Host != null){
				
					this.setProperty("Host", Host.toString());
				
			}
			
			if(Password != null){
				
					this.setProperty("Password", Password.toString());
				
			}
			
			if(Port != null){
				
					this.setProperty("Port", Port.toString());
				
			}
			
			if(Schema != null){
				
					this.setProperty("Schema", Schema.toString());
				
			}
			
			if(ServiceName != null){
				
					this.setProperty("ServiceName", ServiceName.toString());
				
			}
			
			if(Sid != null){
				
					this.setProperty("Sid", Sid.toString());
				
			}
			
			if(User != null){
				
					this.setProperty("User", User.toString());
				
			}
			
			if(ERROR != null){
				
					this.setProperty("ERROR", ERROR.toString());
				
			}
			
			if(ESTADO != null){
				
					this.setProperty("ESTADO", ESTADO.toString());
				
			}
			
			if(ESTADO_EXEC != null){
				
					this.setProperty("ESTADO_EXEC", ESTADO_EXEC.toString());
				
			}
			
			if(FECHA_EJECUCION != null){
				
					this.setProperty("FECHA_EJECUCION", FECHA_EJECUCION.toString());
				
			}
			
			if(HORA_FINAL != null){
				
					this.setProperty("HORA_FINAL", HORA_FINAL.toString());
				
			}
			
			if(HORA_INICIO != null){
				
					this.setProperty("HORA_INICIO", HORA_INICIO.toString());
				
			}
			
			if(LOGS_ERROR != null){
				
					this.setProperty("LOGS_ERROR", LOGS_ERROR.toString());
				
			}
			
			if(LOGS_EXECUTION != null){
				
					this.setProperty("LOGS_EXECUTION", LOGS_EXECUTION.toString());
				
			}
			
			if(ORIGEN != null){
				
					this.setProperty("ORIGEN", ORIGEN.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String BODEGA;
public String getBODEGA(){
	return this.BODEGA;
}
public BigDecimal acuerdo_id;
public BigDecimal getAcuerdo_id(){
	return this.acuerdo_id;
}
public BigDecimal carga_id;
public BigDecimal getCarga_id(){
	return this.carga_id;
}
public Object Contenido;
public Object getContenido(){
	return this.Contenido;
}
public Integer ErrorLog;
public Integer getErrorLog(){
	return this.ErrorLog;
}
public Boolean IsValid;
public Boolean getIsValid(){
	return this.IsValid;
}
public Integer Linea;
public Integer getLinea(){
	return this.Linea;
}
public BigDecimal MedGenerico_Id;
public BigDecimal getMedGenerico_Id(){
	return this.MedGenerico_Id;
}
public String Mensaje_1;
public String getMensaje_1(){
	return this.Mensaje_1;
}
public String nombre;
public String getNombre(){
	return this.nombre;
}
public String NusoIndividual;
public String getNusoIndividual(){
	return this.NusoIndividual;
}
public String NusoRegistro;
public String getNusoRegistro(){
	return this.NusoRegistro;
}
public String result;
public String getResult(){
	return this.result;
}
public Object Salida;
public Object getSalida(){
	return this.Salida;
}
public String TContenido;
public String getTContenido(){
	return this.TContenido;
}
public String Host;
public String getHost(){
	return this.Host;
}
public String Password;
public String getPassword(){
	return this.Password;
}
public String Port;
public String getPort(){
	return this.Port;
}
public String Schema;
public String getSchema(){
	return this.Schema;
}
public String ServiceName;
public String getServiceName(){
	return this.ServiceName;
}
public String Sid;
public String getSid(){
	return this.Sid;
}
public String User;
public String getUser(){
	return this.User;
}
public String ERROR;
public String getERROR(){
	return this.ERROR;
}
public String ESTADO;
public String getESTADO(){
	return this.ESTADO;
}
public String ESTADO_EXEC;
public String getESTADO_EXEC(){
	return this.ESTADO_EXEC;
}
public String FECHA_EJECUCION;
public String getFECHA_EJECUCION(){
	return this.FECHA_EJECUCION;
}
public String HORA_FINAL;
public String getHORA_FINAL(){
	return this.HORA_FINAL;
}
public String HORA_INICIO;
public String getHORA_INICIO(){
	return this.HORA_INICIO;
}
public String LOGS_ERROR;
public String getLOGS_ERROR(){
	return this.LOGS_ERROR;
}
public String LOGS_EXECUTION;
public String getLOGS_EXECUTION(){
	return this.LOGS_EXECUTION;
}
public String ORIGEN;
public String getORIGEN(){
	return this.ORIGEN;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "3.3";
	private final String jobName = "CargaMoleculasAcuerdo";
	private final String projectName = "MED_CARGUE_MOLECULAS_ACUERDO";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				CargaMoleculasAcuerdo.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(CargaMoleculasAcuerdo.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tOracleInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowToIterate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tReplicate_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tReplicate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tReplicate_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tReplicate_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tBufferOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError1", 0, "error");
								}
							
							
								errorCode = null;
								tDie_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tOracleConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleRow_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleRow_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleRow_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleRow_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleRow_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleRow_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleRow_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleRow_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleRow_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleRow_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_21_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_21_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tBufferOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_MED_ATENCIOn_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row54_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row55_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row57_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row59_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row61_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row26_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_3_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_3_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_3_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_2_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_2_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_2_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_4_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_4_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_4_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_5_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_5_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_5_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_6_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_6_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_6_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_7_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_7_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_7_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "ERROR", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

				try {
					
						if(this.execStat){
							runStat.updateStatOnConnection("OnSubjobError1", 0, "error");
						}
					
					errorCode = null;
					tFixedFlowInput_2Process(globalMap);
					if (!"failure".equals(status)) {
						status = "end";
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			public void tOracleInput_14_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_15_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_16_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_17_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_18_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleRow_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleRow_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleRow_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleRow_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleRow_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleRow_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleRow_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_21_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	









public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String DESCRIPCION;

				public String getDESCRIPCION () {
					return this.DESCRIPCION;
				}

				public Boolean DESCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean DESCRIPCIONIsKey(){
				    return false;
				}
				public Integer DESCRIPCIONLength(){
				    return null;
				}
				public Integer DESCRIPCIONPrecision(){
				    return null;
				}
				public String DESCRIPCIONDefault(){
				
					return null;
				
				}
				public String DESCRIPCIONComment(){
				
				    return "";
				
				}
				public String DESCRIPCIONPattern(){
				
					return "";
				
				}
				public String DESCRIPCIONOriginalDbColumnName(){
				
					return "DESCRIPCION";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return null;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.ID = this.ID;
	            other.DESCRIPCION = this.DESCRIPCION;
	            other.ESTADO = this.ESTADO;
	            other.ESTREGISTRO_ID = this.ESTREGISTRO_ID;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.DESCRIPCION = readString(dis);
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.DESCRIPCION = readString(dis);
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.DESCRIPCION,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.DESCRIPCION,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",DESCRIPCION="+DESCRIPCION);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tJavaRow_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_9", false);
		start_Hash.put("tJavaRow_9", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tJavaRow_9 = 0;
		

int nb_line_tJavaRow_9 = 0;

 



/**
 * [tJavaRow_9 begin ] stop
 */



	
	/**
	 * [tOracleInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_2", false);
		start_Hash.put("tOracleInput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_2";
	
	
		int tos_count_tOracleInput_2 = 0;
		
	


	
		    int nb_line_tOracleInput_2 = 0;
		    java.sql.Connection conn_tOracleInput_2 = null;
				conn_tOracleInput_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_2 = false;
				boolean isConnectionWrapped_tOracleInput_2 = !(conn_tOracleInput_2 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_2.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_2 = null;
                if (isConnectionWrapped_tOracleInput_2) {
					unwrappedOraConn_tOracleInput_2 = conn_tOracleInput_2.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_2 != null) {
                        isTimeZoneNull_tOracleInput_2 = (unwrappedOraConn_tOracleInput_2.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_2 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_2).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_2) {
					java.sql.Statement stmtGetTZ_tOracleInput_2 = conn_tOracleInput_2.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_2 = stmtGetTZ_tOracleInput_2.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_2 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_2.next()) {
						sessionTimezone_tOracleInput_2 = rsGetTZ_tOracleInput_2.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_2 && unwrappedOraConn_tOracleInput_2 != null) {
                        unwrappedOraConn_tOracleInput_2.setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_2).setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_2 = conn_tOracleInput_2.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_2.setFetchSize(1000);


		    String dbquery_tOracleInput_2 = "SELECT \n  acu.ID, \n  acu.DESCRIPCION, \n  acu.ESTADO, \n  acu.ESTREGISTRO_ID\nFROM MED_ACUERDOS acu\nWHERE acu.ESTADO"
+" = 'Activo' AND acu.ESTREGISTRO_ID = 1  AND ROWNUM = 1";
		    

		    globalMap.put("tOracleInput_2_QUERY",dbquery_tOracleInput_2);

		    java.sql.ResultSet rs_tOracleInput_2 = null;

		    try {
		    	rs_tOracleInput_2 = stmt_tOracleInput_2.executeQuery(dbquery_tOracleInput_2);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_2 = rs_tOracleInput_2.getMetaData();
		    	int colQtyInRs_tOracleInput_2 = rsmd_tOracleInput_2.getColumnCount();

		    String tmpContent_tOracleInput_2 = null;
		    
		    
		    while (rs_tOracleInput_2.next()) {
		        nb_line_tOracleInput_2++;
		        
							if(colQtyInRs_tOracleInput_2 < 1) {
								row2.ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(1) != null) {
						row2.ID = rs_tOracleInput_2.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 2) {
								row2.DESCRIPCION = null;
							} else {
	                         		
        	row2.DESCRIPCION = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 2, true);
		                    }
							if(colQtyInRs_tOracleInput_2 < 3) {
								row2.ESTADO = null;
							} else {
	                         		
        	row2.ESTADO = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 3, true);
		                    }
							if(colQtyInRs_tOracleInput_2 < 4) {
								row2.ESTREGISTRO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(4) != null) {
						row2.ESTREGISTRO_ID = rs_tOracleInput_2.getBigDecimal(4);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
					




 



/**
 * [tOracleInput_2 begin ] stop
 */
	
	/**
	 * [tOracleInput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 


	tos_count_tOracleInput_2++;

/**
 * [tOracleInput_2 main ] stop
 */
	
	/**
	 * [tOracleInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_9 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					

    
context.acuerdo_id = row2.ID;

//System.out.println(context.AcuerdoId);


    nb_line_tJavaRow_9++;   

 


	tos_count_tJavaRow_9++;

/**
 * [tJavaRow_9 main ] stop
 */
	
	/**
	 * [tJavaRow_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";
	
	

 



/**
 * [tJavaRow_9 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";
	
	

 



/**
 * [tJavaRow_9 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

}
}finally{
	if (rs_tOracleInput_2 != null) {
		rs_tOracleInput_2.close();
	}
	if (stmt_tOracleInput_2 != null) {
		stmt_tOracleInput_2.close();
	}
}

globalMap.put("tOracleInput_2_NB_LINE",nb_line_tOracleInput_2);
 

ok_Hash.put("tOracleInput_2", true);
end_Hash.put("tOracleInput_2", System.currentTimeMillis());




/**
 * [tOracleInput_2 end ] stop
 */

	
	/**
	 * [tJavaRow_9 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";
	
	

globalMap.put("tJavaRow_9_NB_LINE",nb_line_tJavaRow_9);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tJavaRow_9", true);
end_Hash.put("tJavaRow_9", System.currentTimeMillis());

   			if (context.acuerdo_id != null) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If2", 0, "true");
					}
				tOracleInput_4Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "false");
					}   	 
   				}
   			if (context.acuerdo_id == null) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If3", 0, "true");
					}
				tFixedFlowInput_2Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If3", 0, "false");
					}   	 
   				}



/**
 * [tJavaRow_9 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_9 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";
	
	

 



/**
 * [tJavaRow_9 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class next_2Struct implements routines.system.IPersistableRow<next_2Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String CodSsmp;

				public String getCodSsmp () {
					return this.CodSsmp;
				}

				public Boolean CodSsmpIsNullable(){
				    return true;
				}
				public Boolean CodSsmpIsKey(){
				    return false;
				}
				public Integer CodSsmpLength(){
				    return 15;
				}
				public Integer CodSsmpPrecision(){
				    return 0;
				}
				public String CodSsmpDefault(){
				
					return null;
				
				}
				public String CodSsmpComment(){
				
				    return "CODIGO SSMP";
				
				}
				public String CodSsmpPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CodSsmpOriginalDbColumnName(){
				
					return "CodSsmp";
				
				}

				
			    public String NGenerico;

				public String getNGenerico () {
					return this.NGenerico;
				}

				public Boolean NGenericoIsNullable(){
				    return true;
				}
				public Boolean NGenericoIsKey(){
				    return false;
				}
				public Integer NGenericoLength(){
				    return 350;
				}
				public Integer NGenericoPrecision(){
				    return 0;
				}
				public String NGenericoDefault(){
				
					return null;
				
				}
				public String NGenericoComment(){
				
				    return "NOMBRE GENERICO";
				
				}
				public String NGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NGenericoOriginalDbColumnName(){
				
					return "NGenerico";
				
				}

				
			    public String Concentracion;

				public String getConcentracion () {
					return this.Concentracion;
				}

				public Boolean ConcentracionIsNullable(){
				    return true;
				}
				public Boolean ConcentracionIsKey(){
				    return false;
				}
				public Integer ConcentracionLength(){
				    return 500;
				}
				public Integer ConcentracionPrecision(){
				    return 0;
				}
				public String ConcentracionDefault(){
				
					return null;
				
				}
				public String ConcentracionComment(){
				
				    return "CONCENTRACION";
				
				}
				public String ConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ConcentracionOriginalDbColumnName(){
				
					return "Concentracion";
				
				}

				
			    public String FFarmaceutica;

				public String getFFarmaceutica () {
					return this.FFarmaceutica;
				}

				public Boolean FFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean FFarmaceuticaIsKey(){
				    return false;
				}
				public Integer FFarmaceuticaLength(){
				    return 500;
				}
				public Integer FFarmaceuticaPrecision(){
				    return 0;
				}
				public String FFarmaceuticaDefault(){
				
					return null;
				
				}
				public String FFarmaceuticaComment(){
				
				    return "FORMA FARMACEUTICA";
				
				}
				public String FFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FFarmaceuticaOriginalDbColumnName(){
				
					return "FFarmaceutica";
				
				}

				
			    public String ViaAdmin;

				public String getViaAdmin () {
					return this.ViaAdmin;
				}

				public Boolean ViaAdminIsNullable(){
				    return true;
				}
				public Boolean ViaAdminIsKey(){
				    return false;
				}
				public Integer ViaAdminLength(){
				    return 200;
				}
				public Integer ViaAdminPrecision(){
				    return 0;
				}
				public String ViaAdminDefault(){
				
					return null;
				
				}
				public String ViaAdminComment(){
				
				    return "VIA ADMINISTRACION";
				
				}
				public String ViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ViaAdminOriginalDbColumnName(){
				
					return "ViaAdmin";
				
				}

				
			    public String NUso;

				public String getNUso () {
					return this.NUso;
				}

				public Boolean NUsoIsNullable(){
				    return true;
				}
				public Boolean NUsoIsKey(){
				    return false;
				}
				public Integer NUsoLength(){
				    return 50;
				}
				public Integer NUsoPrecision(){
				    return 0;
				}
				public String NUsoDefault(){
				
					return null;
				
				}
				public String NUsoComment(){
				
				    return "NIVEL USO";
				
				}
				public String NUsoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NUsoOriginalDbColumnName(){
				
					return "NUso";
				
				}

				
			    public String NAtencion;

				public String getNAtencion () {
					return this.NAtencion;
				}

				public Boolean NAtencionIsNullable(){
				    return true;
				}
				public Boolean NAtencionIsKey(){
				    return false;
				}
				public Integer NAtencionLength(){
				    return 50;
				}
				public Integer NAtencionPrecision(){
				    return 0;
				}
				public String NAtencionDefault(){
				
					return null;
				
				}
				public String NAtencionComment(){
				
				    return "NIVEL ATENCION";
				
				}
				public String NAtencionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NAtencionOriginalDbColumnName(){
				
					return "NAtencion";
				
				}

				
			    public String ObsNUso;

				public String getObsNUso () {
					return this.ObsNUso;
				}

				public Boolean ObsNUsoIsNullable(){
				    return true;
				}
				public Boolean ObsNUsoIsKey(){
				    return false;
				}
				public Integer ObsNUsoLength(){
				    return 500;
				}
				public Integer ObsNUsoPrecision(){
				    return 0;
				}
				public String ObsNUsoDefault(){
				
					return null;
				
				}
				public String ObsNUsoComment(){
				
				    return "OBSERVACION PARA EL NIVEL DE USO";
				
				}
				public String ObsNUsoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ObsNUsoOriginalDbColumnName(){
				
					return "ObsNUso";
				
				}

				
			    public String UsadoPre;

				public String getUsadoPre () {
					return this.UsadoPre;
				}

				public Boolean UsadoPreIsNullable(){
				    return true;
				}
				public Boolean UsadoPreIsKey(){
				    return false;
				}
				public Integer UsadoPreLength(){
				    return 2;
				}
				public Integer UsadoPrePrecision(){
				    return 0;
				}
				public String UsadoPreDefault(){
				
					return null;
				
				}
				public String UsadoPreComment(){
				
				    return "USADO PARA PREPARACIONES";
				
				}
				public String UsadoPrePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UsadoPreOriginalDbColumnName(){
				
					return "UsadoPre";
				
				}

				
			    public String CodigoUnico;

				public String getCodigoUnico () {
					return this.CodigoUnico;
				}

				public Boolean CodigoUnicoIsNullable(){
				    return true;
				}
				public Boolean CodigoUnicoIsKey(){
				    return false;
				}
				public Integer CodigoUnicoLength(){
				    return 150;
				}
				public Integer CodigoUnicoPrecision(){
				    return 0;
				}
				public String CodigoUnicoDefault(){
				
					return null;
				
				}
				public String CodigoUnicoComment(){
				
				    return "CODIGO UNICO";
				
				}
				public String CodigoUnicoPattern(){
				
					return "";
				
				}
				public String CodigoUnicoOriginalDbColumnName(){
				
					return "CodigoUnico";
				
				}

				
			    public String EspecialidadMedica;

				public String getEspecialidadMedica () {
					return this.EspecialidadMedica;
				}

				public Boolean EspecialidadMedicaIsNullable(){
				    return true;
				}
				public Boolean EspecialidadMedicaIsKey(){
				    return false;
				}
				public Integer EspecialidadMedicaLength(){
				    return 300;
				}
				public Integer EspecialidadMedicaPrecision(){
				    return 0;
				}
				public String EspecialidadMedicaDefault(){
				
					return null;
				
				}
				public String EspecialidadMedicaComment(){
				
				    return "ESPECIALIDAD MEDICA";
				
				}
				public String EspecialidadMedicaPattern(){
				
					return "";
				
				}
				public String EspecialidadMedicaOriginalDbColumnName(){
				
					return "EspecialidadMedica";
				
				}

				
			    public Integer linea;

				public Integer getLinea () {
					return this.linea;
				}

				public Boolean lineaIsNullable(){
				    return true;
				}
				public Boolean lineaIsKey(){
				    return false;
				}
				public Integer lineaLength(){
				    return null;
				}
				public Integer lineaPrecision(){
				    return null;
				}
				public String lineaDefault(){
				
					return "";
				
				}
				public String lineaComment(){
				
				    return "";
				
				}
				public String lineaPattern(){
				
					return "";
				
				}
				public String lineaOriginalDbColumnName(){
				
					return "linea";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CodSsmp = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.FFarmaceutica = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.NUso = readString(dis);
					
					this.NAtencion = readString(dis);
					
					this.ObsNUso = readString(dis);
					
					this.UsadoPre = readString(dis);
					
					this.CodigoUnico = readString(dis);
					
					this.EspecialidadMedica = readString(dis);
					
						this.linea = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CodSsmp = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.FFarmaceutica = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.NUso = readString(dis);
					
					this.NAtencion = readString(dis);
					
					this.ObsNUso = readString(dis);
					
					this.UsadoPre = readString(dis);
					
					this.CodigoUnico = readString(dis);
					
					this.EspecialidadMedica = readString(dis);
					
						this.linea = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CodSsmp,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.FFarmaceutica,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.NUso,dos);
					
					// String
				
						writeString(this.NAtencion,dos);
					
					// String
				
						writeString(this.ObsNUso,dos);
					
					// String
				
						writeString(this.UsadoPre,dos);
					
					// String
				
						writeString(this.CodigoUnico,dos);
					
					// String
				
						writeString(this.EspecialidadMedica,dos);
					
					// Integer
				
						writeInteger(this.linea,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CodSsmp,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.FFarmaceutica,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.NUso,dos);
					
					// String
				
						writeString(this.NAtencion,dos);
					
					// String
				
						writeString(this.ObsNUso,dos);
					
					// String
				
						writeString(this.UsadoPre,dos);
					
					// String
				
						writeString(this.CodigoUnico,dos);
					
					// String
				
						writeString(this.EspecialidadMedica,dos);
					
					// Integer
				
						writeInteger(this.linea,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CodSsmp="+CodSsmp);
		sb.append(",NGenerico="+NGenerico);
		sb.append(",Concentracion="+Concentracion);
		sb.append(",FFarmaceutica="+FFarmaceutica);
		sb.append(",ViaAdmin="+ViaAdmin);
		sb.append(",NUso="+NUso);
		sb.append(",NAtencion="+NAtencion);
		sb.append(",ObsNUso="+ObsNUso);
		sb.append(",UsadoPre="+UsadoPre);
		sb.append(",CodigoUnico="+CodigoUnico);
		sb.append(",EspecialidadMedica="+EspecialidadMedica);
		sb.append(",linea="+String.valueOf(linea));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(next_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String CODSSMP;

				public String getCODSSMP () {
					return this.CODSSMP;
				}

				public Boolean CODSSMPIsNullable(){
				    return true;
				}
				public Boolean CODSSMPIsKey(){
				    return false;
				}
				public Integer CODSSMPLength(){
				    return 15;
				}
				public Integer CODSSMPPrecision(){
				    return 0;
				}
				public String CODSSMPDefault(){
				
					return null;
				
				}
				public String CODSSMPComment(){
				
				    return "CODIGO SSMP";
				
				}
				public String CODSSMPPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CODSSMPOriginalDbColumnName(){
				
					return "CODSSMP";
				
				}

				
			    public String NGENERICO;

				public String getNGENERICO () {
					return this.NGENERICO;
				}

				public Boolean NGENERICOIsNullable(){
				    return true;
				}
				public Boolean NGENERICOIsKey(){
				    return false;
				}
				public Integer NGENERICOLength(){
				    return 350;
				}
				public Integer NGENERICOPrecision(){
				    return 0;
				}
				public String NGENERICODefault(){
				
					return null;
				
				}
				public String NGENERICOComment(){
				
				    return "NOMBRE GENERICO";
				
				}
				public String NGENERICOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NGENERICOOriginalDbColumnName(){
				
					return "NGENERICO";
				
				}

				
			    public String CONCENTRACION;

				public String getCONCENTRACION () {
					return this.CONCENTRACION;
				}

				public Boolean CONCENTRACIONIsNullable(){
				    return true;
				}
				public Boolean CONCENTRACIONIsKey(){
				    return false;
				}
				public Integer CONCENTRACIONLength(){
				    return 500;
				}
				public Integer CONCENTRACIONPrecision(){
				    return 0;
				}
				public String CONCENTRACIONDefault(){
				
					return null;
				
				}
				public String CONCENTRACIONComment(){
				
				    return "CONCENTRACION";
				
				}
				public String CONCENTRACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CONCENTRACIONOriginalDbColumnName(){
				
					return "CONCENTRACION";
				
				}

				
			    public String FFARMACEUTICA;

				public String getFFARMACEUTICA () {
					return this.FFARMACEUTICA;
				}

				public Boolean FFARMACEUTICAIsNullable(){
				    return true;
				}
				public Boolean FFARMACEUTICAIsKey(){
				    return false;
				}
				public Integer FFARMACEUTICALength(){
				    return 500;
				}
				public Integer FFARMACEUTICAPrecision(){
				    return 0;
				}
				public String FFARMACEUTICADefault(){
				
					return null;
				
				}
				public String FFARMACEUTICAComment(){
				
				    return "FORMA FARMACEUTICA";
				
				}
				public String FFARMACEUTICAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FFARMACEUTICAOriginalDbColumnName(){
				
					return "FFARMACEUTICA";
				
				}

				
			    public String VIAADMIN;

				public String getVIAADMIN () {
					return this.VIAADMIN;
				}

				public Boolean VIAADMINIsNullable(){
				    return true;
				}
				public Boolean VIAADMINIsKey(){
				    return false;
				}
				public Integer VIAADMINLength(){
				    return 200;
				}
				public Integer VIAADMINPrecision(){
				    return 0;
				}
				public String VIAADMINDefault(){
				
					return null;
				
				}
				public String VIAADMINComment(){
				
				    return "VIA ADMINISTRACION";
				
				}
				public String VIAADMINPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String VIAADMINOriginalDbColumnName(){
				
					return "VIAADMIN";
				
				}

				
			    public String NUSO;

				public String getNUSO () {
					return this.NUSO;
				}

				public Boolean NUSOIsNullable(){
				    return true;
				}
				public Boolean NUSOIsKey(){
				    return false;
				}
				public Integer NUSOLength(){
				    return 50;
				}
				public Integer NUSOPrecision(){
				    return 0;
				}
				public String NUSODefault(){
				
					return null;
				
				}
				public String NUSOComment(){
				
				    return "NIVEL USO";
				
				}
				public String NUSOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NUSOOriginalDbColumnName(){
				
					return "NUSO";
				
				}

				
			    public String NATENCION;

				public String getNATENCION () {
					return this.NATENCION;
				}

				public Boolean NATENCIONIsNullable(){
				    return true;
				}
				public Boolean NATENCIONIsKey(){
				    return false;
				}
				public Integer NATENCIONLength(){
				    return 50;
				}
				public Integer NATENCIONPrecision(){
				    return 0;
				}
				public String NATENCIONDefault(){
				
					return null;
				
				}
				public String NATENCIONComment(){
				
				    return "NIVEL ATENCION";
				
				}
				public String NATENCIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NATENCIONOriginalDbColumnName(){
				
					return "NATENCION";
				
				}

				
			    public String OBSNUSO;

				public String getOBSNUSO () {
					return this.OBSNUSO;
				}

				public Boolean OBSNUSOIsNullable(){
				    return true;
				}
				public Boolean OBSNUSOIsKey(){
				    return false;
				}
				public Integer OBSNUSOLength(){
				    return 500;
				}
				public Integer OBSNUSOPrecision(){
				    return 0;
				}
				public String OBSNUSODefault(){
				
					return null;
				
				}
				public String OBSNUSOComment(){
				
				    return "OBSERVACION PARA EL NIVEL DE USO";
				
				}
				public String OBSNUSOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String OBSNUSOOriginalDbColumnName(){
				
					return "OBSNUSO";
				
				}

				
			    public String USADOPRE;

				public String getUSADOPRE () {
					return this.USADOPRE;
				}

				public Boolean USADOPREIsNullable(){
				    return true;
				}
				public Boolean USADOPREIsKey(){
				    return false;
				}
				public Integer USADOPRELength(){
				    return 2;
				}
				public Integer USADOPREPrecision(){
				    return 0;
				}
				public String USADOPREDefault(){
				
					return null;
				
				}
				public String USADOPREComment(){
				
				    return "USADO PARA PREPARACIONES";
				
				}
				public String USADOPREPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String USADOPREOriginalDbColumnName(){
				
					return "USADOPRE";
				
				}

				
			    public String CODIGOUNICO;

				public String getCODIGOUNICO () {
					return this.CODIGOUNICO;
				}

				public Boolean CODIGOUNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGOUNICOIsKey(){
				    return false;
				}
				public Integer CODIGOUNICOLength(){
				    return 150;
				}
				public Integer CODIGOUNICOPrecision(){
				    return 0;
				}
				public String CODIGOUNICODefault(){
				
					return null;
				
				}
				public String CODIGOUNICOComment(){
				
				    return "CODIGO UNICO";
				
				}
				public String CODIGOUNICOPattern(){
				
					return "";
				
				}
				public String CODIGOUNICOOriginalDbColumnName(){
				
					return "CODIGOUNICO";
				
				}

				
			    public String ESPECIALIDADMEDICA;

				public String getESPECIALIDADMEDICA () {
					return this.ESPECIALIDADMEDICA;
				}

				public Boolean ESPECIALIDADMEDICAIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADMEDICAIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADMEDICALength(){
				    return 300;
				}
				public Integer ESPECIALIDADMEDICAPrecision(){
				    return 0;
				}
				public String ESPECIALIDADMEDICADefault(){
				
					return null;
				
				}
				public String ESPECIALIDADMEDICAComment(){
				
				    return "ESPECIALIDAD MEDICA";
				
				}
				public String ESPECIALIDADMEDICAPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADMEDICAOriginalDbColumnName(){
				
					return "ESPECIALIDADMEDICA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CODSSMP = readString(dis);
					
					this.NGENERICO = readString(dis);
					
					this.CONCENTRACION = readString(dis);
					
					this.FFARMACEUTICA = readString(dis);
					
					this.VIAADMIN = readString(dis);
					
					this.NUSO = readString(dis);
					
					this.NATENCION = readString(dis);
					
					this.OBSNUSO = readString(dis);
					
					this.USADOPRE = readString(dis);
					
					this.CODIGOUNICO = readString(dis);
					
					this.ESPECIALIDADMEDICA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CODSSMP = readString(dis);
					
					this.NGENERICO = readString(dis);
					
					this.CONCENTRACION = readString(dis);
					
					this.FFARMACEUTICA = readString(dis);
					
					this.VIAADMIN = readString(dis);
					
					this.NUSO = readString(dis);
					
					this.NATENCION = readString(dis);
					
					this.OBSNUSO = readString(dis);
					
					this.USADOPRE = readString(dis);
					
					this.CODIGOUNICO = readString(dis);
					
					this.ESPECIALIDADMEDICA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODSSMP,dos);
					
					// String
				
						writeString(this.NGENERICO,dos);
					
					// String
				
						writeString(this.CONCENTRACION,dos);
					
					// String
				
						writeString(this.FFARMACEUTICA,dos);
					
					// String
				
						writeString(this.VIAADMIN,dos);
					
					// String
				
						writeString(this.NUSO,dos);
					
					// String
				
						writeString(this.NATENCION,dos);
					
					// String
				
						writeString(this.OBSNUSO,dos);
					
					// String
				
						writeString(this.USADOPRE,dos);
					
					// String
				
						writeString(this.CODIGOUNICO,dos);
					
					// String
				
						writeString(this.ESPECIALIDADMEDICA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODSSMP,dos);
					
					// String
				
						writeString(this.NGENERICO,dos);
					
					// String
				
						writeString(this.CONCENTRACION,dos);
					
					// String
				
						writeString(this.FFARMACEUTICA,dos);
					
					// String
				
						writeString(this.VIAADMIN,dos);
					
					// String
				
						writeString(this.NUSO,dos);
					
					// String
				
						writeString(this.NATENCION,dos);
					
					// String
				
						writeString(this.OBSNUSO,dos);
					
					// String
				
						writeString(this.USADOPRE,dos);
					
					// String
				
						writeString(this.CODIGOUNICO,dos);
					
					// String
				
						writeString(this.ESPECIALIDADMEDICA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CODSSMP="+CODSSMP);
		sb.append(",NGENERICO="+NGENERICO);
		sb.append(",CONCENTRACION="+CONCENTRACION);
		sb.append(",FFARMACEUTICA="+FFARMACEUTICA);
		sb.append(",VIAADMIN="+VIAADMIN);
		sb.append(",NUSO="+NUSO);
		sb.append(",NATENCION="+NATENCION);
		sb.append(",OBSNUSO="+OBSNUSO);
		sb.append(",USADOPRE="+USADOPRE);
		sb.append(",CODIGOUNICO="+CODIGOUNICO);
		sb.append(",ESPECIALIDADMEDICA="+ESPECIALIDADMEDICA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String CODSSMP;

				public String getCODSSMP () {
					return this.CODSSMP;
				}

				public Boolean CODSSMPIsNullable(){
				    return true;
				}
				public Boolean CODSSMPIsKey(){
				    return false;
				}
				public Integer CODSSMPLength(){
				    return 15;
				}
				public Integer CODSSMPPrecision(){
				    return 0;
				}
				public String CODSSMPDefault(){
				
					return null;
				
				}
				public String CODSSMPComment(){
				
				    return "CODIGO SSMP";
				
				}
				public String CODSSMPPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CODSSMPOriginalDbColumnName(){
				
					return "CODSSMP";
				
				}

				
			    public String NGENERICO;

				public String getNGENERICO () {
					return this.NGENERICO;
				}

				public Boolean NGENERICOIsNullable(){
				    return true;
				}
				public Boolean NGENERICOIsKey(){
				    return false;
				}
				public Integer NGENERICOLength(){
				    return 200;
				}
				public Integer NGENERICOPrecision(){
				    return 0;
				}
				public String NGENERICODefault(){
				
					return null;
				
				}
				public String NGENERICOComment(){
				
				    return "NOMBRE GENERICO";
				
				}
				public String NGENERICOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NGENERICOOriginalDbColumnName(){
				
					return "NGENERICO";
				
				}

				
			    public String CONCENTRACION;

				public String getCONCENTRACION () {
					return this.CONCENTRACION;
				}

				public Boolean CONCENTRACIONIsNullable(){
				    return true;
				}
				public Boolean CONCENTRACIONIsKey(){
				    return false;
				}
				public Integer CONCENTRACIONLength(){
				    return 50;
				}
				public Integer CONCENTRACIONPrecision(){
				    return 0;
				}
				public String CONCENTRACIONDefault(){
				
					return null;
				
				}
				public String CONCENTRACIONComment(){
				
				    return "CONCENTRACION";
				
				}
				public String CONCENTRACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CONCENTRACIONOriginalDbColumnName(){
				
					return "CONCENTRACION";
				
				}

				
			    public String FFARMACEUTICA;

				public String getFFARMACEUTICA () {
					return this.FFARMACEUTICA;
				}

				public Boolean FFARMACEUTICAIsNullable(){
				    return true;
				}
				public Boolean FFARMACEUTICAIsKey(){
				    return false;
				}
				public Integer FFARMACEUTICALength(){
				    return 500;
				}
				public Integer FFARMACEUTICAPrecision(){
				    return 0;
				}
				public String FFARMACEUTICADefault(){
				
					return null;
				
				}
				public String FFARMACEUTICAComment(){
				
				    return "FORMA FARMACEUTICA";
				
				}
				public String FFARMACEUTICAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FFARMACEUTICAOriginalDbColumnName(){
				
					return "FFARMACEUTICA";
				
				}

				
			    public String VIAADMIN;

				public String getVIAADMIN () {
					return this.VIAADMIN;
				}

				public Boolean VIAADMINIsNullable(){
				    return true;
				}
				public Boolean VIAADMINIsKey(){
				    return false;
				}
				public Integer VIAADMINLength(){
				    return 200;
				}
				public Integer VIAADMINPrecision(){
				    return 0;
				}
				public String VIAADMINDefault(){
				
					return null;
				
				}
				public String VIAADMINComment(){
				
				    return "VIA ADMINISTRACION";
				
				}
				public String VIAADMINPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String VIAADMINOriginalDbColumnName(){
				
					return "VIAADMIN";
				
				}

				
			    public String NUSO;

				public String getNUSO () {
					return this.NUSO;
				}

				public Boolean NUSOIsNullable(){
				    return true;
				}
				public Boolean NUSOIsKey(){
				    return false;
				}
				public Integer NUSOLength(){
				    return 50;
				}
				public Integer NUSOPrecision(){
				    return 0;
				}
				public String NUSODefault(){
				
					return null;
				
				}
				public String NUSOComment(){
				
				    return "NIVEL USO";
				
				}
				public String NUSOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NUSOOriginalDbColumnName(){
				
					return "NUSO";
				
				}

				
			    public String NATENCION;

				public String getNATENCION () {
					return this.NATENCION;
				}

				public Boolean NATENCIONIsNullable(){
				    return true;
				}
				public Boolean NATENCIONIsKey(){
				    return false;
				}
				public Integer NATENCIONLength(){
				    return 50;
				}
				public Integer NATENCIONPrecision(){
				    return 0;
				}
				public String NATENCIONDefault(){
				
					return null;
				
				}
				public String NATENCIONComment(){
				
				    return "NIVEL ATENCION";
				
				}
				public String NATENCIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NATENCIONOriginalDbColumnName(){
				
					return "NATENCION";
				
				}

				
			    public String OBSNUSO;

				public String getOBSNUSO () {
					return this.OBSNUSO;
				}

				public Boolean OBSNUSOIsNullable(){
				    return true;
				}
				public Boolean OBSNUSOIsKey(){
				    return false;
				}
				public Integer OBSNUSOLength(){
				    return 500;
				}
				public Integer OBSNUSOPrecision(){
				    return 0;
				}
				public String OBSNUSODefault(){
				
					return null;
				
				}
				public String OBSNUSOComment(){
				
				    return "OBSERVACION PARA EL NIVEL DE USO";
				
				}
				public String OBSNUSOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String OBSNUSOOriginalDbColumnName(){
				
					return "OBSNUSO";
				
				}

				
			    public String USADOPRE;

				public String getUSADOPRE () {
					return this.USADOPRE;
				}

				public Boolean USADOPREIsNullable(){
				    return true;
				}
				public Boolean USADOPREIsKey(){
				    return false;
				}
				public Integer USADOPRELength(){
				    return 2;
				}
				public Integer USADOPREPrecision(){
				    return 0;
				}
				public String USADOPREDefault(){
				
					return null;
				
				}
				public String USADOPREComment(){
				
				    return "USADO PARA PREPARACIONES";
				
				}
				public String USADOPREPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String USADOPREOriginalDbColumnName(){
				
					return "USADOPRE";
				
				}

				
			    public String CODIGOUNICO;

				public String getCODIGOUNICO () {
					return this.CODIGOUNICO;
				}

				public Boolean CODIGOUNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGOUNICOIsKey(){
				    return false;
				}
				public Integer CODIGOUNICOLength(){
				    return 150;
				}
				public Integer CODIGOUNICOPrecision(){
				    return 0;
				}
				public String CODIGOUNICODefault(){
				
					return null;
				
				}
				public String CODIGOUNICOComment(){
				
				    return "CODIGO UNICO";
				
				}
				public String CODIGOUNICOPattern(){
				
					return "";
				
				}
				public String CODIGOUNICOOriginalDbColumnName(){
				
					return "CODIGOUNICO";
				
				}

				
			    public String ESPECIALIDADMEDICA;

				public String getESPECIALIDADMEDICA () {
					return this.ESPECIALIDADMEDICA;
				}

				public Boolean ESPECIALIDADMEDICAIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADMEDICAIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADMEDICALength(){
				    return 150;
				}
				public Integer ESPECIALIDADMEDICAPrecision(){
				    return 0;
				}
				public String ESPECIALIDADMEDICADefault(){
				
					return null;
				
				}
				public String ESPECIALIDADMEDICAComment(){
				
				    return "ESPECIALIDAD MEDICA";
				
				}
				public String ESPECIALIDADMEDICAPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADMEDICAOriginalDbColumnName(){
				
					return "ESPECIALIDADMEDICA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CODSSMP = readString(dis);
					
					this.NGENERICO = readString(dis);
					
					this.CONCENTRACION = readString(dis);
					
					this.FFARMACEUTICA = readString(dis);
					
					this.VIAADMIN = readString(dis);
					
					this.NUSO = readString(dis);
					
					this.NATENCION = readString(dis);
					
					this.OBSNUSO = readString(dis);
					
					this.USADOPRE = readString(dis);
					
					this.CODIGOUNICO = readString(dis);
					
					this.ESPECIALIDADMEDICA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CODSSMP = readString(dis);
					
					this.NGENERICO = readString(dis);
					
					this.CONCENTRACION = readString(dis);
					
					this.FFARMACEUTICA = readString(dis);
					
					this.VIAADMIN = readString(dis);
					
					this.NUSO = readString(dis);
					
					this.NATENCION = readString(dis);
					
					this.OBSNUSO = readString(dis);
					
					this.USADOPRE = readString(dis);
					
					this.CODIGOUNICO = readString(dis);
					
					this.ESPECIALIDADMEDICA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODSSMP,dos);
					
					// String
				
						writeString(this.NGENERICO,dos);
					
					// String
				
						writeString(this.CONCENTRACION,dos);
					
					// String
				
						writeString(this.FFARMACEUTICA,dos);
					
					// String
				
						writeString(this.VIAADMIN,dos);
					
					// String
				
						writeString(this.NUSO,dos);
					
					// String
				
						writeString(this.NATENCION,dos);
					
					// String
				
						writeString(this.OBSNUSO,dos);
					
					// String
				
						writeString(this.USADOPRE,dos);
					
					// String
				
						writeString(this.CODIGOUNICO,dos);
					
					// String
				
						writeString(this.ESPECIALIDADMEDICA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODSSMP,dos);
					
					// String
				
						writeString(this.NGENERICO,dos);
					
					// String
				
						writeString(this.CONCENTRACION,dos);
					
					// String
				
						writeString(this.FFARMACEUTICA,dos);
					
					// String
				
						writeString(this.VIAADMIN,dos);
					
					// String
				
						writeString(this.NUSO,dos);
					
					// String
				
						writeString(this.NATENCION,dos);
					
					// String
				
						writeString(this.OBSNUSO,dos);
					
					// String
				
						writeString(this.USADOPRE,dos);
					
					// String
				
						writeString(this.CODIGOUNICO,dos);
					
					// String
				
						writeString(this.ESPECIALIDADMEDICA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CODSSMP="+CODSSMP);
		sb.append(",NGENERICO="+NGENERICO);
		sb.append(",CONCENTRACION="+CONCENTRACION);
		sb.append(",FFARMACEUTICA="+FFARMACEUTICA);
		sb.append(",VIAADMIN="+VIAADMIN);
		sb.append(",NUSO="+NUSO);
		sb.append(",NATENCION="+NATENCION);
		sb.append(",OBSNUSO="+OBSNUSO);
		sb.append(",USADOPRE="+USADOPRE);
		sb.append(",CODIGOUNICO="+CODIGOUNICO);
		sb.append(",ESPECIALIDADMEDICA="+ESPECIALIDADMEDICA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public Object CONTENIDO;

				public Object getCONTENIDO () {
					return this.CONTENIDO;
				}

				public Boolean CONTENIDOIsNullable(){
				    return false;
				}
				public Boolean CONTENIDOIsKey(){
				    return false;
				}
				public Integer CONTENIDOLength(){
				    return null;
				}
				public Integer CONTENIDOPrecision(){
				    return 0;
				}
				public String CONTENIDODefault(){
				
					return "";
				
				}
				public String CONTENIDOComment(){
				
				    return "";
				
				}
				public String CONTENIDOPattern(){
				
					return "";
				
				}
				public String CONTENIDOOriginalDbColumnName(){
				
					return "CONTENIDO";
				
				}

				
			    public String TCONTENIDO;

				public String getTCONTENIDO () {
					return this.TCONTENIDO;
				}

				public Boolean TCONTENIDOIsNullable(){
				    return false;
				}
				public Boolean TCONTENIDOIsKey(){
				    return false;
				}
				public Integer TCONTENIDOLength(){
				    return 300;
				}
				public Integer TCONTENIDOPrecision(){
				    return 0;
				}
				public String TCONTENIDODefault(){
				
					return null;
				
				}
				public String TCONTENIDOComment(){
				
				    return "";
				
				}
				public String TCONTENIDOPattern(){
				
					return "";
				
				}
				public String TCONTENIDOOriginalDbColumnName(){
				
					return "TCONTENIDO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row6Struct other = (row6Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row6Struct other) {

		other.ID = this.ID;
	            other.CONTENIDO = this.CONTENIDO;
	            other.TCONTENIDO = this.TCONTENIDO;
	            
	}

	public void copyKeysDataTo(row6Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.CONTENIDO = (Object) dis.readObject();
					
					this.TCONTENIDO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.CONTENIDO = (Object) dis.readObject();
					
					this.TCONTENIDO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// Object
				
       			    	dos.writeObject(this.CONTENIDO);
					
					// String
				
						writeString(this.TCONTENIDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// Object
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTENIDO);
					
					// String
				
						writeString(this.TCONTENIDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CONTENIDO="+String.valueOf(CONTENIDO));
		sb.append(",TCONTENIDO="+TCONTENIDO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class update_estadoStruct implements routines.system.IPersistableRow<update_estadoStruct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public BigDecimal Id_;

				public BigDecimal getId_ () {
					return this.Id_;
				}

				public Boolean Id_IsNullable(){
				    return true;
				}
				public Boolean Id_IsKey(){
				    return false;
				}
				public Integer Id_Length(){
				    return null;
				}
				public Integer Id_Precision(){
				    return null;
				}
				public String Id_Default(){
				
					return null;
				
				}
				public String Id_Comment(){
				
				    return "";
				
				}
				public String Id_Pattern(){
				
					return "";
				
				}
				public String Id_OriginalDbColumnName(){
				
					return "Id_";
				
				}

				
			    public String Estado_;

				public String getEstado_ () {
					return this.Estado_;
				}

				public Boolean Estado_IsNullable(){
				    return true;
				}
				public Boolean Estado_IsKey(){
				    return false;
				}
				public Integer Estado_Length(){
				    return null;
				}
				public Integer Estado_Precision(){
				    return null;
				}
				public String Estado_Default(){
				
					return null;
				
				}
				public String Estado_Comment(){
				
				    return "";
				
				}
				public String Estado_Pattern(){
				
					return "";
				
				}
				public String Estado_OriginalDbColumnName(){
				
					return "Estado_";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.Id_ = (BigDecimal) dis.readObject();
					
					this.Estado_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.Id_ = (BigDecimal) dis.readObject();
					
					this.Estado_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.Id_);
					
					// String
				
						writeString(this.Estado_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Id_);
					
					// String
				
						writeString(this.Estado_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id_="+String.valueOf(Id_));
		sb.append(",Estado_="+Estado_);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(update_estadoStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class next_1Struct implements routines.system.IPersistableRow<next_1Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public Object CONTENIDO;

				public Object getCONTENIDO () {
					return this.CONTENIDO;
				}

				public Boolean CONTENIDOIsNullable(){
				    return false;
				}
				public Boolean CONTENIDOIsKey(){
				    return false;
				}
				public Integer CONTENIDOLength(){
				    return null;
				}
				public Integer CONTENIDOPrecision(){
				    return 0;
				}
				public String CONTENIDODefault(){
				
					return "";
				
				}
				public String CONTENIDOComment(){
				
				    return "";
				
				}
				public String CONTENIDOPattern(){
				
					return "";
				
				}
				public String CONTENIDOOriginalDbColumnName(){
				
					return "CONTENIDO";
				
				}

				
			    public String TCONTENIDO;

				public String getTCONTENIDO () {
					return this.TCONTENIDO;
				}

				public Boolean TCONTENIDOIsNullable(){
				    return false;
				}
				public Boolean TCONTENIDOIsKey(){
				    return false;
				}
				public Integer TCONTENIDOLength(){
				    return 300;
				}
				public Integer TCONTENIDOPrecision(){
				    return 0;
				}
				public String TCONTENIDODefault(){
				
					return null;
				
				}
				public String TCONTENIDOComment(){
				
				    return "";
				
				}
				public String TCONTENIDOPattern(){
				
					return "";
				
				}
				public String TCONTENIDOOriginalDbColumnName(){
				
					return "TCONTENIDO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final next_1Struct other = (next_1Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(next_1Struct other) {

		other.ID = this.ID;
	            other.CONTENIDO = this.CONTENIDO;
	            other.TCONTENIDO = this.TCONTENIDO;
	            
	}

	public void copyKeysDataTo(next_1Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.CONTENIDO = (Object) dis.readObject();
					
					this.TCONTENIDO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.CONTENIDO = (Object) dis.readObject();
					
					this.TCONTENIDO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// Object
				
       			    	dos.writeObject(this.CONTENIDO);
					
					// String
				
						writeString(this.TCONTENIDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// Object
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTENIDO);
					
					// String
				
						writeString(this.TCONTENIDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CONTENIDO="+String.valueOf(CONTENIDO));
		sb.append(",TCONTENIDO="+TCONTENIDO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(next_1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public Object CONTENIDO;

				public Object getCONTENIDO () {
					return this.CONTENIDO;
				}

				public Boolean CONTENIDOIsNullable(){
				    return false;
				}
				public Boolean CONTENIDOIsKey(){
				    return false;
				}
				public Integer CONTENIDOLength(){
				    return null;
				}
				public Integer CONTENIDOPrecision(){
				    return 0;
				}
				public String CONTENIDODefault(){
				
					return "";
				
				}
				public String CONTENIDOComment(){
				
				    return "";
				
				}
				public String CONTENIDOPattern(){
				
					return "";
				
				}
				public String CONTENIDOOriginalDbColumnName(){
				
					return "CONTENIDO";
				
				}

				
			    public String TCONTENIDO;

				public String getTCONTENIDO () {
					return this.TCONTENIDO;
				}

				public Boolean TCONTENIDOIsNullable(){
				    return false;
				}
				public Boolean TCONTENIDOIsKey(){
				    return false;
				}
				public Integer TCONTENIDOLength(){
				    return 300;
				}
				public Integer TCONTENIDOPrecision(){
				    return 0;
				}
				public String TCONTENIDODefault(){
				
					return null;
				
				}
				public String TCONTENIDOComment(){
				
				    return "";
				
				}
				public String TCONTENIDOPattern(){
				
					return "";
				
				}
				public String TCONTENIDOOriginalDbColumnName(){
				
					return "TCONTENIDO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.CONTENIDO = (Object) dis.readObject();
					
					this.TCONTENIDO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.CONTENIDO = (Object) dis.readObject();
					
					this.TCONTENIDO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// Object
				
       			    	dos.writeObject(this.CONTENIDO);
					
					// String
				
						writeString(this.TCONTENIDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// Object
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTENIDO);
					
					// String
				
						writeString(this.TCONTENIDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CONTENIDO="+String.valueOf(CONTENIDO));
		sb.append(",TCONTENIDO="+TCONTENIDO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();
update_estadoStruct update_estado = new update_estadoStruct();
next_1Struct next_1 = new next_1Struct();
row6Struct row6 = new row6Struct();
row4Struct row4 = new row4Struct();
row5Struct row5 = new row5Struct();
next_2Struct next_2 = new next_2Struct();





	
	/**
	 * [tOracleSP_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_1", false);
		start_Hash.put("tOracleSP_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"update_estado");
					}
				
		int tos_count_tOracleSP_1 = 0;
		

	java.sql.Connection connection_tOracleSP_1 = null;
	connection_tOracleSP_1 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_2");
	

java.sql.CallableStatement statement_tOracleSP_1 = connection_tOracleSP_1.prepareCall("{call " + "MED.UpdEstadoCargaMasiva" + "(?,?)}");

java.sql.Timestamp tmpDate_tOracleSP_1;
String tmpString_tOracleSP_1;

 



/**
 * [tOracleSP_1 begin ] stop
 */





	
	/**
	 * [tFlowToIterate_1 begin ] start
	 */

				
			int NB_ITERATE_tFileInputDelimited_1 = 0; //for statistics
			

	
		
		ok_Hash.put("tFlowToIterate_1", false);
		start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());
		
	
	currentComponent="tFlowToIterate_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tFlowToIterate_1 = 0;
		

int nb_line_tFlowToIterate_1 = 0;
int counter_tFlowToIterate_1 = 0;

 



/**
 * [tFlowToIterate_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_4", false);
		start_Hash.put("tJavaRow_4", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"next_1");
					}
				
		int tos_count_tJavaRow_4 = 0;
		

int nb_line_tJavaRow_4 = 0;

 



/**
 * [tJavaRow_4 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
update_estadoStruct update_estado_tmp = new update_estadoStruct();
next_1Struct next_1_tmp = new next_1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tOracleInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_4", false);
		start_Hash.put("tOracleInput_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_4";
	
	
		int tos_count_tOracleInput_4 = 0;
		
	


	
		    int nb_line_tOracleInput_4 = 0;
		    java.sql.Connection conn_tOracleInput_4 = null;
				conn_tOracleInput_4 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_4 = false;
				boolean isConnectionWrapped_tOracleInput_4 = !(conn_tOracleInput_4 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_4.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_4 = null;
                if (isConnectionWrapped_tOracleInput_4) {
					unwrappedOraConn_tOracleInput_4 = conn_tOracleInput_4.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_4 != null) {
                        isTimeZoneNull_tOracleInput_4 = (unwrappedOraConn_tOracleInput_4.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_4 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_4).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_4) {
					java.sql.Statement stmtGetTZ_tOracleInput_4 = conn_tOracleInput_4.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_4 = stmtGetTZ_tOracleInput_4.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_4 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_4.next()) {
						sessionTimezone_tOracleInput_4 = rsGetTZ_tOracleInput_4.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_4 && unwrappedOraConn_tOracleInput_4 != null) {
                        unwrappedOraConn_tOracleInput_4.setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_4).setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_4 = conn_tOracleInput_4.createStatement();

		    String dbquery_tOracleInput_4 = "select \n	carga.id,\n	anex.contenido,\n	anex.tcontenido\nfrom med_cargasmasivas carga\ninner join med_anexos anex on an"
+"ex.id=carga.anexos_id\nwhere carga.ESTREGISTRO_ID=1 and estado = 'Inicial' and carga.id ="  + context.carga_id;
		    

		    globalMap.put("tOracleInput_4_QUERY",dbquery_tOracleInput_4);

		    java.sql.ResultSet rs_tOracleInput_4 = null;

		    try {
		    	rs_tOracleInput_4 = stmt_tOracleInput_4.executeQuery(dbquery_tOracleInput_4);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_4 = rs_tOracleInput_4.getMetaData();
		    	int colQtyInRs_tOracleInput_4 = rsmd_tOracleInput_4.getColumnCount();

		    String tmpContent_tOracleInput_4 = null;
		    
		    
		    while (rs_tOracleInput_4.next()) {
		        nb_line_tOracleInput_4++;
		        
							if(colQtyInRs_tOracleInput_4 < 1) {
								row3.ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(1) != null) {
						row3.ID = rs_tOracleInput_4.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 2) {
								row3.CONTENIDO = null;
							} else {
		                          
				Object tmpObj_2_tOracleInput_4 = rs_tOracleInput_4.getObject(2);
				if(tmpObj_2_tOracleInput_4 != null) {
					row3.CONTENIDO = tmpObj_2_tOracleInput_4;
				} else {
						throw new RuntimeException("Null value in non-Nullable column");
				}
		                    }
							if(colQtyInRs_tOracleInput_4 < 3) {
								row3.TCONTENIDO = null;
							} else {
	                         		
        	row3.TCONTENIDO = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 3, false);
		                    }
					




 



/**
 * [tOracleInput_4 begin ] stop
 */
	
	/**
	 * [tOracleInput_4 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 


	tos_count_tOracleInput_4++;

/**
 * [tOracleInput_4 main ] stop
 */
	
	/**
	 * [tOracleInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

update_estado = null;
next_1 = null;


// # Output table : 'update_estado'
update_estado_tmp.Id_ = context.carga_id;
update_estado_tmp.Estado_ = "En proceso" ;
update_estado = update_estado_tmp;

// # Output table : 'next_1'
next_1_tmp.ID = row3.ID ;
next_1_tmp.CONTENIDO = row3.CONTENIDO ;
next_1_tmp.TCONTENIDO = row3.TCONTENIDO ;
next_1 = next_1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "update_estado"
if(update_estado != null) { 



	
	/**
	 * [tOracleSP_1 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"update_estado"
						
						);
					}
					

			// code for the argument 1 (Id_) of type 'IN AUTOMAPPING'
    					if (update_estado.Id_ == null) {
    						statement_tOracleSP_1.setNull(1, java.sql.Types.OTHER);
    					} else {
    					
                        statement_tOracleSP_1.setBigDecimal(1, update_estado.Id_);
    					}
    					
			// code for the argument 2 (Estado_) of type 'IN AUTOMAPPING'
    					if (update_estado.Estado_ == null) {
    						statement_tOracleSP_1.setNull(2, java.sql.Types.VARCHAR);
    					} else {
    					
                        statement_tOracleSP_1.setString(2, update_estado.Estado_);
    					}
    					
		statement_tOracleSP_1.execute();
		

 


	tos_count_tOracleSP_1++;

/**
 * [tOracleSP_1 main ] stop
 */
	
	/**
	 * [tOracleSP_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	

 



/**
 * [tOracleSP_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleSP_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	

 



/**
 * [tOracleSP_1 process_data_end ] stop
 */

} // End of branch "update_estado"




// Start of branch "next_1"
if(next_1 != null) { 



	
	/**
	 * [tJavaRow_4 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"next_1"
						
						);
					}
					

    
//context.Id = next_1.id;
context.Contenido = ((java.sql.Blob)next_1.CONTENIDO).getBinaryStream();
context.TContenido =  next_1.TCONTENIDO;




    nb_line_tJavaRow_4++;   

 


	tos_count_tJavaRow_4++;

/**
 * [tJavaRow_4 main ] stop
 */
	
	/**
	 * [tJavaRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 process_data_begin ] stop
 */

	
	/**
	 * [tFlowToIterate_1 main ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					


    	            
            globalMap.put("row6.ID", row6.ID);
    	            
            globalMap.put("row6.CONTENIDO", row6.CONTENIDO);
    	            
            globalMap.put("row6.TCONTENIDO", row6.TCONTENIDO);
    	
 
	   nb_line_tFlowToIterate_1++;  
       counter_tFlowToIterate_1++;
       globalMap.put("tFlowToIterate_1_CURRENT_ITERATION", counter_tFlowToIterate_1);
 


	tos_count_tFlowToIterate_1++;

/**
 * [tFlowToIterate_1 main ] stop
 */
	
	/**
	 * [tFlowToIterate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 process_data_begin ] stop
 */
	NB_ITERATE_tFileInputDelimited_1++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("rgduplicados", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tHashInput_3", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("validacionGenerico", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row34", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("error_duplicados", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row16", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row26", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("identificadorValido", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("registrosCorrectos", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("MED_ATENCIOn", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row12", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row65", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row10", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row68", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("next_2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row64", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row9", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row30", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row58", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row17", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row11", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row69", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row39", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk14", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row14", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row49", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk13", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row24", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk23", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row61", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk11", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row50", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row63", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row15", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk8", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("validacionNAtencion", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tHashInput_4", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row66", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row60", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row56", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row70", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row48", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row57", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("validacionEspecialidades", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk18", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row59", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row20", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk7", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk7", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row18", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row59", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row54", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row29", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk16", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk12", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk17", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk21", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("identificadoresValidos", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row20", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row67", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row35", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("parametrizacion", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("MED_ATENCIOn", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row52", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row13", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tHashInput_7", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row42", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("validacionViaAdmin", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row53", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("DatosValidos", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row61", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row26", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk10", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tHashInput_8", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row8", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row4", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row51", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row57", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk4", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row19", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("errorLogFormas", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row71", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row55", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row28", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tHashInput_1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("validacionTnivelUso", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("validacionFormaFarmaceutica", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tHashInput_6", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row55", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tHashInput_2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row22", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk22", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tHashInput_5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk9", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row54", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tFileInputDelimited_1);
					//Thread.sleep(1000);
				}				
			




	
	/**
	 * [tOracleOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_1", false);
		start_Hash.put("tOracleOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"next_2");
					}
				
		int tos_count_tOracleOutput_1 = 0;
		






    
    int nb_line_tOracleOutput_1 = 0;
    int nb_line_update_tOracleOutput_1 = 0;
    int nb_line_inserted_tOracleOutput_1 = 0;
    int nb_line_deleted_tOracleOutput_1 = 0;
    int nb_line_rejected_tOracleOutput_1 = 0;

    int tmp_batchUpdateCount_tOracleOutput_1 = 0;

    int deletedCount_tOracleOutput_1=0;
    int updatedCount_tOracleOutput_1=0;
    int insertedCount_tOracleOutput_1=0;
    int rowsToCommitCount_tOracleOutput_1=0;
    int rejectedCount_tOracleOutput_1=0;

    boolean whetherReject_tOracleOutput_1 = false;

    java.sql.Connection conn_tOracleOutput_1 = null;

    //optional table
    String dbschema_tOracleOutput_1 = null;
    String tableName_tOracleOutput_1 = null;
        dbschema_tOracleOutput_1 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_1=0;

        if(dbschema_tOracleOutput_1 == null || dbschema_tOracleOutput_1.trim().length() == 0) {
            tableName_tOracleOutput_1 = ("MED_NUSOREGISTRO_TEMP");
        } else {
            tableName_tOracleOutput_1 = dbschema_tOracleOutput_1 + "." + ("MED_NUSOREGISTRO_TEMP");
        }
                                String tableNameForSearch_tOracleOutput_1= "" + ((String)"MED_NUSOREGISTRO_TEMP") + "";
String dbschemaForSearch_tOracleOutput_1= null;
if(dbschema_tOracleOutput_1== null || dbschema_tOracleOutput_1.trim().length() == 0) {
dbschemaForSearch_tOracleOutput_1= ((String)globalMap.get("username_tOracleConnection_2")).toUpperCase();
} else {
dbschemaForSearch_tOracleOutput_1= dbschema_tOracleOutput_1.toUpperCase();
}

                                java.sql.DatabaseMetaData dbMetaData_tOracleOutput_1 = conn_tOracleOutput_1.getMetaData();
                                if(tableNameForSearch_tOracleOutput_1.indexOf("\"")==-1){
                                    tableNameForSearch_tOracleOutput_1 = tableNameForSearch_tOracleOutput_1.toUpperCase();
                                }else{
                                    tableNameForSearch_tOracleOutput_1 = tableNameForSearch_tOracleOutput_1.replaceAll("\"","");
                                }
                                boolean whetherExist_tOracleOutput_1 = false;
                                try (java.sql.ResultSet rsTable_tOracleOutput_1 = dbMetaData_tOracleOutput_1.getTables(null, dbschemaForSearch_tOracleOutput_1, tableNameForSearch_tOracleOutput_1, new String[]{"TABLE"})) {
                                    if(rsTable_tOracleOutput_1.next()) {
                                        whetherExist_tOracleOutput_1 = true;
                                    }
                                }

                                if(!whetherExist_tOracleOutput_1) {
                                    try (java.sql.Statement stmtCreate_tOracleOutput_1 = conn_tOracleOutput_1.createStatement()) {
                                        stmtCreate_tOracleOutput_1.execute("CREATE TABLE " + tableName_tOracleOutput_1 + "(CodSsmp VARCHAR2(15)  ,NGenerico VARCHAR2(350)  ,Concentracion VARCHAR2(500)  ,FFarmaceutica VARCHAR2(500)  ,ViaAdmin VARCHAR2(200)  ,NUso VARCHAR2(50)  ,NAtencion VARCHAR2(50)  ,ObsNUso VARCHAR2(500)  ,UsadoPre VARCHAR2(2)  ,CodigoUnico VARCHAR2(150)  ,EspecialidadMedica VARCHAR2(300)  ,linea INT )");
                                    }
                                }
                String insert_tOracleOutput_1 = "INSERT INTO " + tableName_tOracleOutput_1 + " (CodSsmp,NGenerico,Concentracion,FFarmaceutica,ViaAdmin,NUso,NAtencion,ObsNUso,UsadoPre,CodigoUnico,EspecialidadMedica,linea) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_1 = conn_tOracleOutput_1.prepareStatement(insert_tOracleOutput_1);
                        resourceMap.put("pstmt_tOracleOutput_1", pstmt_tOracleOutput_1);





 



/**
 * [tOracleOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
next_2Struct next_2_tmp = new next_2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFilterRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_1", false);
		start_Hash.put("tFilterRow_1", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tFilterRow_1 = 0;
		
    int nb_line_tFilterRow_1 = 0;
    int nb_line_ok_tFilterRow_1 = 0;
    int nb_line_reject_tFilterRow_1 = 0;

    class Operator_tFilterRow_1 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_1(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";
	
	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try{
					
						Object filename_tFileInputDelimited_1 = 

(java.io.InputStream)context.Contenido;
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(

(java.io.InputStream)context.Contenido, "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_1
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						row4 = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									row4 = new row4Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
							row4.CODSSMP = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
							row4.NGENERICO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 2;
					
							row4.CONCENTRACION = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 3;
					
							row4.FFARMACEUTICA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 4;
					
							row4.VIAADMIN = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 5;
					
							row4.NUSO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 6;
					
							row4.NATENCION = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 7;
					
							row4.OBSNUSO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 8;
					
							row4.USADOPRE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 9;
					
							row4.CODIGOUNICO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 10;
					
							row4.ESPECIALIDADMEDICA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row4 = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tFilterRow_1 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					

          row5 = null;
    Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("||");
            ope_tFilterRow_1.matches((row4.CODSSMP == null? false : row4.CODSSMP.compareTo("") != 0)
                           , "CODSSMP.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row4.NGENERICO == null? false : row4.NGENERICO.compareTo("") != 0)
                           , "NGENERICO.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row4.CONCENTRACION == null? false : row4.CONCENTRACION.compareTo("") != 0)
                           , "CONCENTRACION.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row4.FFARMACEUTICA == null? false : row4.FFARMACEUTICA.compareTo("") != 0)
                           , "FFARMACEUTICA.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row4.VIAADMIN == null? false : row4.VIAADMIN.compareTo("") != 0)
                           , "VIAADMIN.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row4.NUSO == null? false : row4.NUSO.compareTo("") != 0)
                           , "NUSO.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row4.NATENCION == null? false : row4.NATENCION.compareTo("") != 0)
                           , "NATENCION.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row4.OBSNUSO == null? false : row4.OBSNUSO.compareTo("") != 0)
                           , "OBSNUSO.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row4.USADOPRE == null? false : row4.USADOPRE.compareTo("") != 0)
                           , "USADOPRE.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row4.CODIGOUNICO == null? false : row4.CODIGOUNICO.compareTo("") != 0)
                           , "CODIGOUNICO.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row4.ESPECIALIDADMEDICA == null? false : row4.ESPECIALIDADMEDICA.compareTo("") != 0)
                           , "ESPECIALIDADMEDICA.compareTo(\"\") != 0 failed");
    
    if (ope_tFilterRow_1.getMatchFlag()) {
              if(row5 == null){ 
                row5 = new row5Struct();
              }
               row5.CODSSMP = row4.CODSSMP;
               row5.NGENERICO = row4.NGENERICO;
               row5.CONCENTRACION = row4.CONCENTRACION;
               row5.FFARMACEUTICA = row4.FFARMACEUTICA;
               row5.VIAADMIN = row4.VIAADMIN;
               row5.NUSO = row4.NUSO;
               row5.NATENCION = row4.NATENCION;
               row5.OBSNUSO = row4.OBSNUSO;
               row5.USADOPRE = row4.USADOPRE;
               row5.CODIGOUNICO = row4.CODIGOUNICO;
               row5.ESPECIALIDADMEDICA = row4.ESPECIALIDADMEDICA;    
      nb_line_ok_tFilterRow_1++;
    } else {
      nb_line_reject_tFilterRow_1++;
    }

nb_line_tFilterRow_1++;

 


	tos_count_tFilterRow_1++;

/**
 * [tFilterRow_1 main ] stop
 */
	
	/**
	 * [tFilterRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";
	
	

 



/**
 * [tFilterRow_1 process_data_begin ] stop
 */
// Start of branch "row5"
if(row5 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

next_2 = null;

boolean rejected_tMap_1 = true;
// ###### START REJECTS ##### 

// # Output reject table : 'next_2'
// # Filter conditions 
if( rejected_tMap_1 ) {
next_2_tmp.CodSsmp = Utils.mayusculasSinAcentos(row5.CODSSMP) ;
next_2_tmp.NGenerico = Utils.mayusculasSinAcentos(row5.NGENERICO) ;
next_2_tmp.Concentracion = Utils.mayusculasSinAcentos(row5.CONCENTRACION);
next_2_tmp.FFarmaceutica = Utils.mayusculasSinAcentos(row5.FFARMACEUTICA);
next_2_tmp.ViaAdmin = Utils.mayusculasSinAcentos(row5.VIAADMIN);
next_2_tmp.NUso = Utils.mayusculasSinAcentos(row5.NUSO);
next_2_tmp.NAtencion = Utils.mayusculasSinAcentos(row5.NATENCION) ;
next_2_tmp.ObsNUso = row5.OBSNUSO ;
next_2_tmp.UsadoPre = Utils.mayusculasSinAcentos(row5.USADOPRE);
next_2_tmp.CodigoUnico = row5.CODIGOUNICO;
next_2_tmp.EspecialidadMedica = Utils.mayusculasSinAcentos(row5.ESPECIALIDADMEDICA);
next_2_tmp.linea = Numeric.sequence("s1", 2, 1) ;
next_2 = next_2_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "next_2"
if(next_2 != null) { 



	
	/**
	 * [tOracleOutput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"next_2"
						
						);
					}
					



        whetherReject_tOracleOutput_1 = false;
                        if(next_2.CodSsmp == null) {
pstmt_tOracleOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(1, next_2.CodSsmp);
}

                        if(next_2.NGenerico == null) {
pstmt_tOracleOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(2, next_2.NGenerico);
}

                        if(next_2.Concentracion == null) {
pstmt_tOracleOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(3, next_2.Concentracion);
}

                        if(next_2.FFarmaceutica == null) {
pstmt_tOracleOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(4, next_2.FFarmaceutica);
}

                        if(next_2.ViaAdmin == null) {
pstmt_tOracleOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(5, next_2.ViaAdmin);
}

                        if(next_2.NUso == null) {
pstmt_tOracleOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(6, next_2.NUso);
}

                        if(next_2.NAtencion == null) {
pstmt_tOracleOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(7, next_2.NAtencion);
}

                        if(next_2.ObsNUso == null) {
pstmt_tOracleOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(8, next_2.ObsNUso);
}

                        if(next_2.UsadoPre == null) {
pstmt_tOracleOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(9, next_2.UsadoPre);
}

                        if(next_2.CodigoUnico == null) {
pstmt_tOracleOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(10, next_2.CodigoUnico);
}

                        if(next_2.EspecialidadMedica == null) {
pstmt_tOracleOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(11, next_2.EspecialidadMedica);
}

                        if(next_2.linea == null) {
pstmt_tOracleOutput_1.setNull(12, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_1.setInt(12, next_2.linea);
}

                try {
                    nb_line_tOracleOutput_1++;
                    int processedCount_tOracleOutput_1 = pstmt_tOracleOutput_1.executeUpdate();
                    insertedCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                    rowsToCommitCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                } catch(java.lang.Exception e_tOracleOutput_1) {
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
                    whetherReject_tOracleOutput_1 = true;
                            System.err.print(e_tOracleOutput_1.getMessage());
                }
            if(!whetherReject_tOracleOutput_1) {
            }

 


	tos_count_tOracleOutput_1++;

/**
 * [tOracleOutput_1 main ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_end ] stop
 */

} // End of branch "next_2"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row5"




	
	/**
	 * [tFilterRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";
	
	

 



/**
 * [tFilterRow_1 process_data_end ] stop
 */

} // End of branch "row4"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	



            }
            }finally{
                if(!((Object)(

(java.io.InputStream)context.Contenido) instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tFilterRow_1 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";
	
	
    globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tFilterRow_1", true);
end_Hash.put("tFilterRow_1", System.currentTimeMillis());




/**
 * [tFilterRow_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tOracleOutput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
	



	
        if(pstmt_tOracleOutput_1 != null) {
			
				pstmt_tOracleOutput_1.close();
				resourceMap.remove("pstmt_tOracleOutput_1");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_1", true);

	
	nb_line_deleted_tOracleOutput_1=nb_line_deleted_tOracleOutput_1+ deletedCount_tOracleOutput_1;
	nb_line_update_tOracleOutput_1=nb_line_update_tOracleOutput_1 + updatedCount_tOracleOutput_1;
	nb_line_inserted_tOracleOutput_1=nb_line_inserted_tOracleOutput_1 + insertedCount_tOracleOutput_1;
	nb_line_rejected_tOracleOutput_1=nb_line_rejected_tOracleOutput_1 + rejectedCount_tOracleOutput_1;
	
        globalMap.put("tOracleOutput_1_NB_LINE",nb_line_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_UPDATED",nb_line_update_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_1);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"next_2");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_1", true);
end_Hash.put("tOracleOutput_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tOracleInput_14Process(globalMap);



/**
 * [tOracleOutput_1 end ] stop
 */









						if(execStat){
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tFileInputDelimited_1);
						}				
					




	
	/**
	 * [tFlowToIterate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 process_data_end ] stop
 */

} // End of branch "next_1"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_4 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

}
}finally{
	if (rs_tOracleInput_4 != null) {
		rs_tOracleInput_4.close();
	}
	if (stmt_tOracleInput_4 != null) {
		stmt_tOracleInput_4.close();
	}
}

globalMap.put("tOracleInput_4_NB_LINE",nb_line_tOracleInput_4);
 

ok_Hash.put("tOracleInput_4", true);
end_Hash.put("tOracleInput_4", System.currentTimeMillis());




/**
 * [tOracleInput_4 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tOracleSP_1 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	


	statement_tOracleSP_1.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"update_estado");
			  	}
			  	
 

ok_Hash.put("tOracleSP_1", true);
end_Hash.put("tOracleSP_1", System.currentTimeMillis());




/**
 * [tOracleSP_1 end ] stop
 */




	
	/**
	 * [tJavaRow_4 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

globalMap.put("tJavaRow_4_NB_LINE",nb_line_tJavaRow_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"next_1");
			  	}
			  	
 

ok_Hash.put("tJavaRow_4", true);
end_Hash.put("tJavaRow_4", System.currentTimeMillis());




/**
 * [tJavaRow_4 end ] stop
 */

	
	/**
	 * [tFlowToIterate_1 end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

globalMap.put("tFlowToIterate_1_NB_LINE",nb_line_tFlowToIterate_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tFlowToIterate_1", true);
end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());




/**
 * [tFlowToIterate_1 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tOracleSP_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	

 



/**
 * [tOracleSP_1 finally ] stop
 */




	
	/**
	 * [tJavaRow_4 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 finally ] stop
 */

	
	/**
	 * [tFlowToIterate_1 finally ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 finally ] stop
 */

	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tFilterRow_1 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";
	
	

 



/**
 * [tFilterRow_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tOracleOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_1 = null;
                if ((pstmtToClose_tOracleOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_1")) != null) {
                    pstmtToClose_tOracleOutput_1.close();
                }
    }
 



/**
 * [tOracleOutput_1 finally ] stop
 */





















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row48Struct implements routines.system.IPersistableRow<row48Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return 20;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				
			    public String SIGLA_USO;

				public String getSIGLA_USO () {
					return this.SIGLA_USO;
				}

				public Boolean SIGLA_USOIsNullable(){
				    return true;
				}
				public Boolean SIGLA_USOIsKey(){
				    return false;
				}
				public Integer SIGLA_USOLength(){
				    return 200;
				}
				public Integer SIGLA_USOPrecision(){
				    return null;
				}
				public String SIGLA_USODefault(){
				
					return null;
				
				}
				public String SIGLA_USOComment(){
				
				    return "";
				
				}
				public String SIGLA_USOPattern(){
				
					return "";
				
				}
				public String SIGLA_USOOriginalDbColumnName(){
				
					return "SIGLA_USO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CODIGO_UNICO = readString(dis);
					
					this.SIGLA_USO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CODIGO_UNICO = readString(dis);
					
					this.SIGLA_USO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
					// String
				
						writeString(this.SIGLA_USO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
					// String
				
						writeString(this.SIGLA_USO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CODIGO_UNICO="+CODIGO_UNICO);
		sb.append(",SIGLA_USO="+SIGLA_USO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row48Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row48Struct row48 = new row48Struct();




	
	/**
	 * [tOracleOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_2", false);
		start_Hash.put("tOracleOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row48");
					}
				
		int tos_count_tOracleOutput_2 = 0;
		






    
    int nb_line_tOracleOutput_2 = 0;
    int nb_line_update_tOracleOutput_2 = 0;
    int nb_line_inserted_tOracleOutput_2 = 0;
    int nb_line_deleted_tOracleOutput_2 = 0;
    int nb_line_rejected_tOracleOutput_2 = 0;

    int tmp_batchUpdateCount_tOracleOutput_2 = 0;

    int deletedCount_tOracleOutput_2=0;
    int updatedCount_tOracleOutput_2=0;
    int insertedCount_tOracleOutput_2=0;
    int rowsToCommitCount_tOracleOutput_2=0;
    int rejectedCount_tOracleOutput_2=0;

    boolean whetherReject_tOracleOutput_2 = false;

    java.sql.Connection conn_tOracleOutput_2 = null;

    //optional table
    String dbschema_tOracleOutput_2 = null;
    String tableName_tOracleOutput_2 = null;
        dbschema_tOracleOutput_2 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_2=0;

        if(dbschema_tOracleOutput_2 == null || dbschema_tOracleOutput_2.trim().length() == 0) {
            tableName_tOracleOutput_2 = ("MED_SIGLA_USO_TEMP");
        } else {
            tableName_tOracleOutput_2 = dbschema_tOracleOutput_2 + "." + ("MED_SIGLA_USO_TEMP");
        }
                                String tableNameForSearch_tOracleOutput_2= "" + ((String)"MED_SIGLA_USO_TEMP") + "";
String dbschemaForSearch_tOracleOutput_2= null;
if(dbschema_tOracleOutput_2== null || dbschema_tOracleOutput_2.trim().length() == 0) {
dbschemaForSearch_tOracleOutput_2= ((String)globalMap.get("username_tOracleConnection_2")).toUpperCase();
} else {
dbschemaForSearch_tOracleOutput_2= dbschema_tOracleOutput_2.toUpperCase();
}

                                java.sql.DatabaseMetaData dbMetaData_tOracleOutput_2 = conn_tOracleOutput_2.getMetaData();
                                if(tableNameForSearch_tOracleOutput_2.indexOf("\"")==-1){
                                    tableNameForSearch_tOracleOutput_2 = tableNameForSearch_tOracleOutput_2.toUpperCase();
                                }else{
                                    tableNameForSearch_tOracleOutput_2 = tableNameForSearch_tOracleOutput_2.replaceAll("\"","");
                                }
                                boolean whetherExist_tOracleOutput_2 = false;
                                try (java.sql.ResultSet rsTable_tOracleOutput_2 = dbMetaData_tOracleOutput_2.getTables(null, dbschemaForSearch_tOracleOutput_2, tableNameForSearch_tOracleOutput_2, new String[]{"TABLE"})) {
                                    if(rsTable_tOracleOutput_2.next()) {
                                        whetherExist_tOracleOutput_2 = true;
                                    }
                                }

                                if(!whetherExist_tOracleOutput_2) {
                                    try (java.sql.Statement stmtCreate_tOracleOutput_2 = conn_tOracleOutput_2.createStatement()) {
                                        stmtCreate_tOracleOutput_2.execute("CREATE TABLE " + tableName_tOracleOutput_2 + "(CODIGO_UNICO VARCHAR2(20)  ,SIGLA_USO VARCHAR2(200)  )");
                                    }
                                }
                String insert_tOracleOutput_2 = "INSERT INTO " + tableName_tOracleOutput_2 + " (CODIGO_UNICO,SIGLA_USO) VALUES (?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_2 = conn_tOracleOutput_2.prepareStatement(insert_tOracleOutput_2);
                        resourceMap.put("pstmt_tOracleOutput_2", pstmt_tOracleOutput_2);





 



/**
 * [tOracleOutput_2 begin ] stop
 */



	
	/**
	 * [tOracleInput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_14", false);
		start_Hash.put("tOracleInput_14", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_14";
	
	
		int tos_count_tOracleInput_14 = 0;
		
	


	
		    int nb_line_tOracleInput_14 = 0;
		    java.sql.Connection conn_tOracleInput_14 = null;
				conn_tOracleInput_14 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_14 = false;
				boolean isConnectionWrapped_tOracleInput_14 = !(conn_tOracleInput_14 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_14.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_14 = null;
                if (isConnectionWrapped_tOracleInput_14) {
					unwrappedOraConn_tOracleInput_14 = conn_tOracleInput_14.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_14 != null) {
                        isTimeZoneNull_tOracleInput_14 = (unwrappedOraConn_tOracleInput_14.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_14 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_14).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_14) {
					java.sql.Statement stmtGetTZ_tOracleInput_14 = conn_tOracleInput_14.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_14 = stmtGetTZ_tOracleInput_14.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_14 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_14.next()) {
						sessionTimezone_tOracleInput_14 = rsGetTZ_tOracleInput_14.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_14 && unwrappedOraConn_tOracleInput_14 != null) {
                        unwrappedOraConn_tOracleInput_14.setSessionTimeZone(sessionTimezone_tOracleInput_14);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_14).setSessionTimeZone(sessionTimezone_tOracleInput_14);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_14 = conn_tOracleInput_14.createStatement();

		    String dbquery_tOracleInput_14 = "SELECT codigounico AS Codigo_Unico, REGEXP_SUBSTR(NUSO, '[^,]+', 1, LEVEL) AS Sigla_uso\n  FROM MED_NUSOREGISTRO_TEMP\n"
+"  CONNECT BY codigounico = PRIOR codigounico AND PRIOR SYS_GUID() IS NOT NULL\n  AND LEVEL <= REGEXP_COUNT(NUSO, ',') + "
+"1  and   REGEXP_SUBSTR(NUSO, '[^,]+', 1, LEVEL) is not null";
		    

		    globalMap.put("tOracleInput_14_QUERY",dbquery_tOracleInput_14);

		    java.sql.ResultSet rs_tOracleInput_14 = null;

		    try {
		    	rs_tOracleInput_14 = stmt_tOracleInput_14.executeQuery(dbquery_tOracleInput_14);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_14 = rs_tOracleInput_14.getMetaData();
		    	int colQtyInRs_tOracleInput_14 = rsmd_tOracleInput_14.getColumnCount();

		    String tmpContent_tOracleInput_14 = null;
		    
		    
		    while (rs_tOracleInput_14.next()) {
		        nb_line_tOracleInput_14++;
		        
							if(colQtyInRs_tOracleInput_14 < 1) {
								row48.CODIGO_UNICO = null;
							} else {
	                         		
        	row48.CODIGO_UNICO = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_14 < 2) {
								row48.SIGLA_USO = null;
							} else {
	                         		
        	row48.SIGLA_USO = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 2, false);
		                    }
					




 



/**
 * [tOracleInput_14 begin ] stop
 */
	
	/**
	 * [tOracleInput_14 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 


	tos_count_tOracleInput_14++;

/**
 * [tOracleInput_14 main ] stop
 */
	
	/**
	 * [tOracleInput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 



/**
 * [tOracleInput_14 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row48"
						
						);
					}
					



        whetherReject_tOracleOutput_2 = false;
                        if(row48.CODIGO_UNICO == null) {
pstmt_tOracleOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_2.setString(1, row48.CODIGO_UNICO);
}

                        if(row48.SIGLA_USO == null) {
pstmt_tOracleOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_2.setString(2, row48.SIGLA_USO);
}

                try {
                    nb_line_tOracleOutput_2++;
                    int processedCount_tOracleOutput_2 = pstmt_tOracleOutput_2.executeUpdate();
                    insertedCount_tOracleOutput_2 += processedCount_tOracleOutput_2;
                    rowsToCommitCount_tOracleOutput_2 += processedCount_tOracleOutput_2;
                } catch(java.lang.Exception e_tOracleOutput_2) {
globalMap.put("tOracleOutput_2_ERROR_MESSAGE",e_tOracleOutput_2.getMessage());
                    whetherReject_tOracleOutput_2 = true;
                            System.err.print(e_tOracleOutput_2.getMessage());
                }

 


	tos_count_tOracleOutput_2++;

/**
 * [tOracleOutput_2 main ] stop
 */
	
	/**
	 * [tOracleOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	

 



/**
 * [tOracleOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	

 



/**
 * [tOracleOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 



/**
 * [tOracleInput_14 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_14 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

}
}finally{
	if (rs_tOracleInput_14 != null) {
		rs_tOracleInput_14.close();
	}
	if (stmt_tOracleInput_14 != null) {
		stmt_tOracleInput_14.close();
	}
}

globalMap.put("tOracleInput_14_NB_LINE",nb_line_tOracleInput_14);
 

ok_Hash.put("tOracleInput_14", true);
end_Hash.put("tOracleInput_14", System.currentTimeMillis());




/**
 * [tOracleInput_14 end ] stop
 */

	
	/**
	 * [tOracleOutput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	
	



	
        if(pstmt_tOracleOutput_2 != null) {
			
				pstmt_tOracleOutput_2.close();
				resourceMap.remove("pstmt_tOracleOutput_2");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_2", true);

	
	nb_line_deleted_tOracleOutput_2=nb_line_deleted_tOracleOutput_2+ deletedCount_tOracleOutput_2;
	nb_line_update_tOracleOutput_2=nb_line_update_tOracleOutput_2 + updatedCount_tOracleOutput_2;
	nb_line_inserted_tOracleOutput_2=nb_line_inserted_tOracleOutput_2 + insertedCount_tOracleOutput_2;
	nb_line_rejected_tOracleOutput_2=nb_line_rejected_tOracleOutput_2 + rejectedCount_tOracleOutput_2;
	
        globalMap.put("tOracleOutput_2_NB_LINE",nb_line_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_UPDATED",nb_line_update_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_2);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row48");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_2", true);
end_Hash.put("tOracleOutput_2", System.currentTimeMillis());




/**
 * [tOracleOutput_2 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_14:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tOracleInput_15Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_14 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 



/**
 * [tOracleInput_14 finally ] stop
 */

	
	/**
	 * [tOracleOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_2 = null;
                if ((pstmtToClose_tOracleOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_2")) != null) {
                    pstmtToClose_tOracleOutput_2.close();
                }
    }
 



/**
 * [tOracleOutput_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_14_SUBPROCESS_STATE", 1);
	}
	


public static class row50Struct implements routines.system.IPersistableRow<row50Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return 20;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				
			    public String SIGLA_ESPECIALIDAD;

				public String getSIGLA_ESPECIALIDAD () {
					return this.SIGLA_ESPECIALIDAD;
				}

				public Boolean SIGLA_ESPECIALIDADIsNullable(){
				    return true;
				}
				public Boolean SIGLA_ESPECIALIDADIsKey(){
				    return false;
				}
				public Integer SIGLA_ESPECIALIDADLength(){
				    return 200;
				}
				public Integer SIGLA_ESPECIALIDADPrecision(){
				    return null;
				}
				public String SIGLA_ESPECIALIDADDefault(){
				
					return null;
				
				}
				public String SIGLA_ESPECIALIDADComment(){
				
				    return "";
				
				}
				public String SIGLA_ESPECIALIDADPattern(){
				
					return "";
				
				}
				public String SIGLA_ESPECIALIDADOriginalDbColumnName(){
				
					return "SIGLA_ESPECIALIDAD";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CODIGO_UNICO = readString(dis);
					
					this.SIGLA_ESPECIALIDAD = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CODIGO_UNICO = readString(dis);
					
					this.SIGLA_ESPECIALIDAD = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
					// String
				
						writeString(this.SIGLA_ESPECIALIDAD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
					// String
				
						writeString(this.SIGLA_ESPECIALIDAD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CODIGO_UNICO="+CODIGO_UNICO);
		sb.append(",SIGLA_ESPECIALIDAD="+SIGLA_ESPECIALIDAD);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row50Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row50Struct row50 = new row50Struct();




	
	/**
	 * [tOracleOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_3", false);
		start_Hash.put("tOracleOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row50");
					}
				
		int tos_count_tOracleOutput_3 = 0;
		






    
    int nb_line_tOracleOutput_3 = 0;
    int nb_line_update_tOracleOutput_3 = 0;
    int nb_line_inserted_tOracleOutput_3 = 0;
    int nb_line_deleted_tOracleOutput_3 = 0;
    int nb_line_rejected_tOracleOutput_3 = 0;

    int tmp_batchUpdateCount_tOracleOutput_3 = 0;

    int deletedCount_tOracleOutput_3=0;
    int updatedCount_tOracleOutput_3=0;
    int insertedCount_tOracleOutput_3=0;
    int rowsToCommitCount_tOracleOutput_3=0;
    int rejectedCount_tOracleOutput_3=0;

    boolean whetherReject_tOracleOutput_3 = false;

    java.sql.Connection conn_tOracleOutput_3 = null;

    //optional table
    String dbschema_tOracleOutput_3 = null;
    String tableName_tOracleOutput_3 = null;
        dbschema_tOracleOutput_3 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_3 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_3=0;

        if(dbschema_tOracleOutput_3 == null || dbschema_tOracleOutput_3.trim().length() == 0) {
            tableName_tOracleOutput_3 = ("MED_SIGLA_ESPECIALIDAD_TEMP");
        } else {
            tableName_tOracleOutput_3 = dbschema_tOracleOutput_3 + "." + ("MED_SIGLA_ESPECIALIDAD_TEMP");
        }
                                String tableNameForSearch_tOracleOutput_3= "" + ((String)"MED_SIGLA_ESPECIALIDAD_TEMP") + "";
String dbschemaForSearch_tOracleOutput_3= null;
if(dbschema_tOracleOutput_3== null || dbschema_tOracleOutput_3.trim().length() == 0) {
dbschemaForSearch_tOracleOutput_3= ((String)globalMap.get("username_tOracleConnection_2")).toUpperCase();
} else {
dbschemaForSearch_tOracleOutput_3= dbschema_tOracleOutput_3.toUpperCase();
}

                                java.sql.DatabaseMetaData dbMetaData_tOracleOutput_3 = conn_tOracleOutput_3.getMetaData();
                                if(tableNameForSearch_tOracleOutput_3.indexOf("\"")==-1){
                                    tableNameForSearch_tOracleOutput_3 = tableNameForSearch_tOracleOutput_3.toUpperCase();
                                }else{
                                    tableNameForSearch_tOracleOutput_3 = tableNameForSearch_tOracleOutput_3.replaceAll("\"","");
                                }
                                boolean whetherExist_tOracleOutput_3 = false;
                                try (java.sql.ResultSet rsTable_tOracleOutput_3 = dbMetaData_tOracleOutput_3.getTables(null, dbschemaForSearch_tOracleOutput_3, tableNameForSearch_tOracleOutput_3, new String[]{"TABLE"})) {
                                    if(rsTable_tOracleOutput_3.next()) {
                                        whetherExist_tOracleOutput_3 = true;
                                    }
                                }

                                if(!whetherExist_tOracleOutput_3) {
                                    try (java.sql.Statement stmtCreate_tOracleOutput_3 = conn_tOracleOutput_3.createStatement()) {
                                        stmtCreate_tOracleOutput_3.execute("CREATE TABLE " + tableName_tOracleOutput_3 + "(CODIGO_UNICO VARCHAR2(20)  ,SIGLA_ESPECIALIDAD VARCHAR2(200)  )");
                                    }
                                }
                String insert_tOracleOutput_3 = "INSERT INTO " + tableName_tOracleOutput_3 + " (CODIGO_UNICO,SIGLA_ESPECIALIDAD) VALUES (?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_3 = conn_tOracleOutput_3.prepareStatement(insert_tOracleOutput_3);
                        resourceMap.put("pstmt_tOracleOutput_3", pstmt_tOracleOutput_3);





 



/**
 * [tOracleOutput_3 begin ] stop
 */



	
	/**
	 * [tOracleInput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_15", false);
		start_Hash.put("tOracleInput_15", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_15";
	
	
		int tos_count_tOracleInput_15 = 0;
		
	


	
		    int nb_line_tOracleInput_15 = 0;
		    java.sql.Connection conn_tOracleInput_15 = null;
				conn_tOracleInput_15 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_15 = false;
				boolean isConnectionWrapped_tOracleInput_15 = !(conn_tOracleInput_15 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_15.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_15 = null;
                if (isConnectionWrapped_tOracleInput_15) {
					unwrappedOraConn_tOracleInput_15 = conn_tOracleInput_15.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_15 != null) {
                        isTimeZoneNull_tOracleInput_15 = (unwrappedOraConn_tOracleInput_15.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_15 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_15).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_15) {
					java.sql.Statement stmtGetTZ_tOracleInput_15 = conn_tOracleInput_15.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_15 = stmtGetTZ_tOracleInput_15.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_15 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_15.next()) {
						sessionTimezone_tOracleInput_15 = rsGetTZ_tOracleInput_15.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_15 && unwrappedOraConn_tOracleInput_15 != null) {
                        unwrappedOraConn_tOracleInput_15.setSessionTimeZone(sessionTimezone_tOracleInput_15);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_15).setSessionTimeZone(sessionTimezone_tOracleInput_15);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_15 = conn_tOracleInput_15.createStatement();

		    String dbquery_tOracleInput_15 = " SELECT codigounico AS Codigo_Unico, REGEXP_SUBSTR(ESPECIALIDADMEDICA, '[^,]+', 1, LEVEL) AS  sigla_especialidad\n  FRO"
+"M MED_NUSOREGISTRO_TEMP\n  CONNECT BY codigounico = PRIOR codigounico AND PRIOR SYS_GUID() IS NOT NULL\n  AND LEVEL <= R"
+"EGEXP_COUNT(ESPECIALIDADMEDICA, ',') + 1  and   REGEXP_SUBSTR(ESPECIALIDADMEDICA, '[^,]+', 1, LEVEL) is not null";
		    

		    globalMap.put("tOracleInput_15_QUERY",dbquery_tOracleInput_15);

		    java.sql.ResultSet rs_tOracleInput_15 = null;

		    try {
		    	rs_tOracleInput_15 = stmt_tOracleInput_15.executeQuery(dbquery_tOracleInput_15);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_15 = rs_tOracleInput_15.getMetaData();
		    	int colQtyInRs_tOracleInput_15 = rsmd_tOracleInput_15.getColumnCount();

		    String tmpContent_tOracleInput_15 = null;
		    
		    
		    while (rs_tOracleInput_15.next()) {
		        nb_line_tOracleInput_15++;
		        
							if(colQtyInRs_tOracleInput_15 < 1) {
								row50.CODIGO_UNICO = null;
							} else {
	                         		
        	row50.CODIGO_UNICO = routines.system.JDBCUtil.getString(rs_tOracleInput_15, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_15 < 2) {
								row50.SIGLA_ESPECIALIDAD = null;
							} else {
	                         		
        	row50.SIGLA_ESPECIALIDAD = routines.system.JDBCUtil.getString(rs_tOracleInput_15, 2, false);
		                    }
					




 



/**
 * [tOracleInput_15 begin ] stop
 */
	
	/**
	 * [tOracleInput_15 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

 


	tos_count_tOracleInput_15++;

/**
 * [tOracleInput_15 main ] stop
 */
	
	/**
	 * [tOracleInput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

 



/**
 * [tOracleInput_15 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_3 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row50"
						
						);
					}
					



        whetherReject_tOracleOutput_3 = false;
                        if(row50.CODIGO_UNICO == null) {
pstmt_tOracleOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_3.setString(1, row50.CODIGO_UNICO);
}

                        if(row50.SIGLA_ESPECIALIDAD == null) {
pstmt_tOracleOutput_3.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_3.setString(2, row50.SIGLA_ESPECIALIDAD);
}

                try {
                    nb_line_tOracleOutput_3++;
                    int processedCount_tOracleOutput_3 = pstmt_tOracleOutput_3.executeUpdate();
                    insertedCount_tOracleOutput_3 += processedCount_tOracleOutput_3;
                    rowsToCommitCount_tOracleOutput_3 += processedCount_tOracleOutput_3;
                } catch(java.lang.Exception e_tOracleOutput_3) {
globalMap.put("tOracleOutput_3_ERROR_MESSAGE",e_tOracleOutput_3.getMessage());
                    whetherReject_tOracleOutput_3 = true;
                            System.err.print(e_tOracleOutput_3.getMessage());
                }

 


	tos_count_tOracleOutput_3++;

/**
 * [tOracleOutput_3 main ] stop
 */
	
	/**
	 * [tOracleOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	

 



/**
 * [tOracleOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	

 



/**
 * [tOracleOutput_3 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

 



/**
 * [tOracleInput_15 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_15 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

}
}finally{
	if (rs_tOracleInput_15 != null) {
		rs_tOracleInput_15.close();
	}
	if (stmt_tOracleInput_15 != null) {
		stmt_tOracleInput_15.close();
	}
}

globalMap.put("tOracleInput_15_NB_LINE",nb_line_tOracleInput_15);
 

ok_Hash.put("tOracleInput_15", true);
end_Hash.put("tOracleInput_15", System.currentTimeMillis());




/**
 * [tOracleInput_15 end ] stop
 */

	
	/**
	 * [tOracleOutput_3 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	
	



	
        if(pstmt_tOracleOutput_3 != null) {
			
				pstmt_tOracleOutput_3.close();
				resourceMap.remove("pstmt_tOracleOutput_3");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_3", true);

	
	nb_line_deleted_tOracleOutput_3=nb_line_deleted_tOracleOutput_3+ deletedCount_tOracleOutput_3;
	nb_line_update_tOracleOutput_3=nb_line_update_tOracleOutput_3 + updatedCount_tOracleOutput_3;
	nb_line_inserted_tOracleOutput_3=nb_line_inserted_tOracleOutput_3 + insertedCount_tOracleOutput_3;
	nb_line_rejected_tOracleOutput_3=nb_line_rejected_tOracleOutput_3 + rejectedCount_tOracleOutput_3;
	
        globalMap.put("tOracleOutput_3_NB_LINE",nb_line_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_UPDATED",nb_line_update_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_3);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row50");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_3", true);
end_Hash.put("tOracleOutput_3", System.currentTimeMillis());




/**
 * [tOracleOutput_3 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_15:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tOracleInput_16Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_15 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

 



/**
 * [tOracleInput_15 finally ] stop
 */

	
	/**
	 * [tOracleOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_3 = null;
                if ((pstmtToClose_tOracleOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_3")) != null) {
                    pstmtToClose_tOracleOutput_3.close();
                }
    }
 



/**
 * [tOracleOutput_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_15_SUBPROCESS_STATE", 1);
	}
	


public static class row51Struct implements routines.system.IPersistableRow<row51Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return 20;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				
			    public String SIGLA_ADMIN;

				public String getSIGLA_ADMIN () {
					return this.SIGLA_ADMIN;
				}

				public Boolean SIGLA_ADMINIsNullable(){
				    return true;
				}
				public Boolean SIGLA_ADMINIsKey(){
				    return false;
				}
				public Integer SIGLA_ADMINLength(){
				    return 200;
				}
				public Integer SIGLA_ADMINPrecision(){
				    return null;
				}
				public String SIGLA_ADMINDefault(){
				
					return null;
				
				}
				public String SIGLA_ADMINComment(){
				
				    return "";
				
				}
				public String SIGLA_ADMINPattern(){
				
					return "";
				
				}
				public String SIGLA_ADMINOriginalDbColumnName(){
				
					return "SIGLA_ADMIN";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CODIGO_UNICO = readString(dis);
					
					this.SIGLA_ADMIN = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CODIGO_UNICO = readString(dis);
					
					this.SIGLA_ADMIN = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
					// String
				
						writeString(this.SIGLA_ADMIN,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
					// String
				
						writeString(this.SIGLA_ADMIN,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CODIGO_UNICO="+CODIGO_UNICO);
		sb.append(",SIGLA_ADMIN="+SIGLA_ADMIN);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row51Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_16_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row51Struct row51 = new row51Struct();




	
	/**
	 * [tOracleOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_4", false);
		start_Hash.put("tOracleOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row51");
					}
				
		int tos_count_tOracleOutput_4 = 0;
		






    
    int nb_line_tOracleOutput_4 = 0;
    int nb_line_update_tOracleOutput_4 = 0;
    int nb_line_inserted_tOracleOutput_4 = 0;
    int nb_line_deleted_tOracleOutput_4 = 0;
    int nb_line_rejected_tOracleOutput_4 = 0;

    int tmp_batchUpdateCount_tOracleOutput_4 = 0;

    int deletedCount_tOracleOutput_4=0;
    int updatedCount_tOracleOutput_4=0;
    int insertedCount_tOracleOutput_4=0;
    int rowsToCommitCount_tOracleOutput_4=0;
    int rejectedCount_tOracleOutput_4=0;

    boolean whetherReject_tOracleOutput_4 = false;

    java.sql.Connection conn_tOracleOutput_4 = null;

    //optional table
    String dbschema_tOracleOutput_4 = null;
    String tableName_tOracleOutput_4 = null;
        dbschema_tOracleOutput_4 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_4 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_4=0;

        if(dbschema_tOracleOutput_4 == null || dbschema_tOracleOutput_4.trim().length() == 0) {
            tableName_tOracleOutput_4 = ("MED_SIGLA_ADMIN_TEMP");
        } else {
            tableName_tOracleOutput_4 = dbschema_tOracleOutput_4 + "." + ("MED_SIGLA_ADMIN_TEMP");
        }
                                String tableNameForSearch_tOracleOutput_4= "" + ((String)"MED_SIGLA_ADMIN_TEMP") + "";
String dbschemaForSearch_tOracleOutput_4= null;
if(dbschema_tOracleOutput_4== null || dbschema_tOracleOutput_4.trim().length() == 0) {
dbschemaForSearch_tOracleOutput_4= ((String)globalMap.get("username_tOracleConnection_2")).toUpperCase();
} else {
dbschemaForSearch_tOracleOutput_4= dbschema_tOracleOutput_4.toUpperCase();
}

                                java.sql.DatabaseMetaData dbMetaData_tOracleOutput_4 = conn_tOracleOutput_4.getMetaData();
                                if(tableNameForSearch_tOracleOutput_4.indexOf("\"")==-1){
                                    tableNameForSearch_tOracleOutput_4 = tableNameForSearch_tOracleOutput_4.toUpperCase();
                                }else{
                                    tableNameForSearch_tOracleOutput_4 = tableNameForSearch_tOracleOutput_4.replaceAll("\"","");
                                }
                                boolean whetherExist_tOracleOutput_4 = false;
                                try (java.sql.ResultSet rsTable_tOracleOutput_4 = dbMetaData_tOracleOutput_4.getTables(null, dbschemaForSearch_tOracleOutput_4, tableNameForSearch_tOracleOutput_4, new String[]{"TABLE"})) {
                                    if(rsTable_tOracleOutput_4.next()) {
                                        whetherExist_tOracleOutput_4 = true;
                                    }
                                }

                                if(!whetherExist_tOracleOutput_4) {
                                    try (java.sql.Statement stmtCreate_tOracleOutput_4 = conn_tOracleOutput_4.createStatement()) {
                                        stmtCreate_tOracleOutput_4.execute("CREATE TABLE " + tableName_tOracleOutput_4 + "(CODIGO_UNICO VARCHAR2(20)  ,SIGLA_ADMIN VARCHAR2(200)  )");
                                    }
                                }
                String insert_tOracleOutput_4 = "INSERT INTO " + tableName_tOracleOutput_4 + " (CODIGO_UNICO,SIGLA_ADMIN) VALUES (?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_4 = conn_tOracleOutput_4.prepareStatement(insert_tOracleOutput_4);
                        resourceMap.put("pstmt_tOracleOutput_4", pstmt_tOracleOutput_4);





 



/**
 * [tOracleOutput_4 begin ] stop
 */



	
	/**
	 * [tOracleInput_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_16", false);
		start_Hash.put("tOracleInput_16", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_16";
	
	
		int tos_count_tOracleInput_16 = 0;
		
	


	
		    int nb_line_tOracleInput_16 = 0;
		    java.sql.Connection conn_tOracleInput_16 = null;
				conn_tOracleInput_16 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_16 = false;
				boolean isConnectionWrapped_tOracleInput_16 = !(conn_tOracleInput_16 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_16.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_16 = null;
                if (isConnectionWrapped_tOracleInput_16) {
					unwrappedOraConn_tOracleInput_16 = conn_tOracleInput_16.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_16 != null) {
                        isTimeZoneNull_tOracleInput_16 = (unwrappedOraConn_tOracleInput_16.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_16 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_16).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_16) {
					java.sql.Statement stmtGetTZ_tOracleInput_16 = conn_tOracleInput_16.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_16 = stmtGetTZ_tOracleInput_16.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_16 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_16.next()) {
						sessionTimezone_tOracleInput_16 = rsGetTZ_tOracleInput_16.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_16 && unwrappedOraConn_tOracleInput_16 != null) {
                        unwrappedOraConn_tOracleInput_16.setSessionTimeZone(sessionTimezone_tOracleInput_16);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_16).setSessionTimeZone(sessionTimezone_tOracleInput_16);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_16 = conn_tOracleInput_16.createStatement();

		    String dbquery_tOracleInput_16 = "SELECT codigounico AS Codigo_Unico, REGEXP_SUBSTR(VIAADMIN, '[^,]+', 1, LEVEL) AS  Sigla_Admin\n  FROM MED_NUSOREGISTRO"
+"_TEMP\n  CONNECT BY codigounico = PRIOR codigounico AND PRIOR SYS_GUID() IS NOT NULL\n  AND LEVEL <= REGEXP_COUNT(VIAADM"
+"IN, ',') + 1  and   REGEXP_SUBSTR(VIAADMIN, '[^,]+', 1, LEVEL) is not null";
		    

		    globalMap.put("tOracleInput_16_QUERY",dbquery_tOracleInput_16);

		    java.sql.ResultSet rs_tOracleInput_16 = null;

		    try {
		    	rs_tOracleInput_16 = stmt_tOracleInput_16.executeQuery(dbquery_tOracleInput_16);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_16 = rs_tOracleInput_16.getMetaData();
		    	int colQtyInRs_tOracleInput_16 = rsmd_tOracleInput_16.getColumnCount();

		    String tmpContent_tOracleInput_16 = null;
		    
		    
		    while (rs_tOracleInput_16.next()) {
		        nb_line_tOracleInput_16++;
		        
							if(colQtyInRs_tOracleInput_16 < 1) {
								row51.CODIGO_UNICO = null;
							} else {
	                         		
        	row51.CODIGO_UNICO = routines.system.JDBCUtil.getString(rs_tOracleInput_16, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_16 < 2) {
								row51.SIGLA_ADMIN = null;
							} else {
	                         		
        	row51.SIGLA_ADMIN = routines.system.JDBCUtil.getString(rs_tOracleInput_16, 2, false);
		                    }
					




 



/**
 * [tOracleInput_16 begin ] stop
 */
	
	/**
	 * [tOracleInput_16 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

 


	tos_count_tOracleInput_16++;

/**
 * [tOracleInput_16 main ] stop
 */
	
	/**
	 * [tOracleInput_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

 



/**
 * [tOracleInput_16 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_4 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row51"
						
						);
					}
					



        whetherReject_tOracleOutput_4 = false;
                        if(row51.CODIGO_UNICO == null) {
pstmt_tOracleOutput_4.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_4.setString(1, row51.CODIGO_UNICO);
}

                        if(row51.SIGLA_ADMIN == null) {
pstmt_tOracleOutput_4.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_4.setString(2, row51.SIGLA_ADMIN);
}

                try {
                    nb_line_tOracleOutput_4++;
                    int processedCount_tOracleOutput_4 = pstmt_tOracleOutput_4.executeUpdate();
                    insertedCount_tOracleOutput_4 += processedCount_tOracleOutput_4;
                    rowsToCommitCount_tOracleOutput_4 += processedCount_tOracleOutput_4;
                } catch(java.lang.Exception e_tOracleOutput_4) {
globalMap.put("tOracleOutput_4_ERROR_MESSAGE",e_tOracleOutput_4.getMessage());
                    whetherReject_tOracleOutput_4 = true;
                            System.err.print(e_tOracleOutput_4.getMessage());
                }

 


	tos_count_tOracleOutput_4++;

/**
 * [tOracleOutput_4 main ] stop
 */
	
	/**
	 * [tOracleOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	

 



/**
 * [tOracleOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	

 



/**
 * [tOracleOutput_4 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

 



/**
 * [tOracleInput_16 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_16 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

}
}finally{
	if (rs_tOracleInput_16 != null) {
		rs_tOracleInput_16.close();
	}
	if (stmt_tOracleInput_16 != null) {
		stmt_tOracleInput_16.close();
	}
}

globalMap.put("tOracleInput_16_NB_LINE",nb_line_tOracleInput_16);
 

ok_Hash.put("tOracleInput_16", true);
end_Hash.put("tOracleInput_16", System.currentTimeMillis());




/**
 * [tOracleInput_16 end ] stop
 */

	
	/**
	 * [tOracleOutput_4 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	
	



	
        if(pstmt_tOracleOutput_4 != null) {
			
				pstmt_tOracleOutput_4.close();
				resourceMap.remove("pstmt_tOracleOutput_4");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_4", true);

	
	nb_line_deleted_tOracleOutput_4=nb_line_deleted_tOracleOutput_4+ deletedCount_tOracleOutput_4;
	nb_line_update_tOracleOutput_4=nb_line_update_tOracleOutput_4 + updatedCount_tOracleOutput_4;
	nb_line_inserted_tOracleOutput_4=nb_line_inserted_tOracleOutput_4 + insertedCount_tOracleOutput_4;
	nb_line_rejected_tOracleOutput_4=nb_line_rejected_tOracleOutput_4 + rejectedCount_tOracleOutput_4;
	
        globalMap.put("tOracleOutput_4_NB_LINE",nb_line_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_UPDATED",nb_line_update_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_4);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row51");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_4", true);
end_Hash.put("tOracleOutput_4", System.currentTimeMillis());




/**
 * [tOracleOutput_4 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_16:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tOracleInput_17Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_16 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

 



/**
 * [tOracleInput_16 finally ] stop
 */

	
	/**
	 * [tOracleOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_4") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_4 = null;
                if ((pstmtToClose_tOracleOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_4")) != null) {
                    pstmtToClose_tOracleOutput_4.close();
                }
    }
 



/**
 * [tOracleOutput_4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_16_SUBPROCESS_STATE", 1);
	}
	


public static class row52Struct implements routines.system.IPersistableRow<row52Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return 20;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				
			    public String SIGLA_FORMA;

				public String getSIGLA_FORMA () {
					return this.SIGLA_FORMA;
				}

				public Boolean SIGLA_FORMAIsNullable(){
				    return true;
				}
				public Boolean SIGLA_FORMAIsKey(){
				    return false;
				}
				public Integer SIGLA_FORMALength(){
				    return 200;
				}
				public Integer SIGLA_FORMAPrecision(){
				    return null;
				}
				public String SIGLA_FORMADefault(){
				
					return null;
				
				}
				public String SIGLA_FORMAComment(){
				
				    return "";
				
				}
				public String SIGLA_FORMAPattern(){
				
					return "";
				
				}
				public String SIGLA_FORMAOriginalDbColumnName(){
				
					return "SIGLA_FORMA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CODIGO_UNICO = readString(dis);
					
					this.SIGLA_FORMA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CODIGO_UNICO = readString(dis);
					
					this.SIGLA_FORMA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
					// String
				
						writeString(this.SIGLA_FORMA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
					// String
				
						writeString(this.SIGLA_FORMA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CODIGO_UNICO="+CODIGO_UNICO);
		sb.append(",SIGLA_FORMA="+SIGLA_FORMA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row52Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_17_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row52Struct row52 = new row52Struct();




	
	/**
	 * [tOracleOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_5", false);
		start_Hash.put("tOracleOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row52");
					}
				
		int tos_count_tOracleOutput_5 = 0;
		






    
    int nb_line_tOracleOutput_5 = 0;
    int nb_line_update_tOracleOutput_5 = 0;
    int nb_line_inserted_tOracleOutput_5 = 0;
    int nb_line_deleted_tOracleOutput_5 = 0;
    int nb_line_rejected_tOracleOutput_5 = 0;

    int tmp_batchUpdateCount_tOracleOutput_5 = 0;

    int deletedCount_tOracleOutput_5=0;
    int updatedCount_tOracleOutput_5=0;
    int insertedCount_tOracleOutput_5=0;
    int rowsToCommitCount_tOracleOutput_5=0;
    int rejectedCount_tOracleOutput_5=0;

    boolean whetherReject_tOracleOutput_5 = false;

    java.sql.Connection conn_tOracleOutput_5 = null;

    //optional table
    String dbschema_tOracleOutput_5 = null;
    String tableName_tOracleOutput_5 = null;
        dbschema_tOracleOutput_5 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_5 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_5=0;

        if(dbschema_tOracleOutput_5 == null || dbschema_tOracleOutput_5.trim().length() == 0) {
            tableName_tOracleOutput_5 = ("MED_SIGLA_FORMA_TEMP");
        } else {
            tableName_tOracleOutput_5 = dbschema_tOracleOutput_5 + "." + ("MED_SIGLA_FORMA_TEMP");
        }
                                String tableNameForSearch_tOracleOutput_5= "" + ((String)"MED_SIGLA_FORMA_TEMP") + "";
String dbschemaForSearch_tOracleOutput_5= null;
if(dbschema_tOracleOutput_5== null || dbschema_tOracleOutput_5.trim().length() == 0) {
dbschemaForSearch_tOracleOutput_5= ((String)globalMap.get("username_tOracleConnection_2")).toUpperCase();
} else {
dbschemaForSearch_tOracleOutput_5= dbschema_tOracleOutput_5.toUpperCase();
}

                                java.sql.DatabaseMetaData dbMetaData_tOracleOutput_5 = conn_tOracleOutput_5.getMetaData();
                                if(tableNameForSearch_tOracleOutput_5.indexOf("\"")==-1){
                                    tableNameForSearch_tOracleOutput_5 = tableNameForSearch_tOracleOutput_5.toUpperCase();
                                }else{
                                    tableNameForSearch_tOracleOutput_5 = tableNameForSearch_tOracleOutput_5.replaceAll("\"","");
                                }
                                boolean whetherExist_tOracleOutput_5 = false;
                                try (java.sql.ResultSet rsTable_tOracleOutput_5 = dbMetaData_tOracleOutput_5.getTables(null, dbschemaForSearch_tOracleOutput_5, tableNameForSearch_tOracleOutput_5, new String[]{"TABLE"})) {
                                    if(rsTable_tOracleOutput_5.next()) {
                                        whetherExist_tOracleOutput_5 = true;
                                    }
                                }

                                if(!whetherExist_tOracleOutput_5) {
                                    try (java.sql.Statement stmtCreate_tOracleOutput_5 = conn_tOracleOutput_5.createStatement()) {
                                        stmtCreate_tOracleOutput_5.execute("CREATE TABLE " + tableName_tOracleOutput_5 + "(CODIGO_UNICO VARCHAR2(20)  ,SIGLA_FORMA VARCHAR2(200)  )");
                                    }
                                }
                String insert_tOracleOutput_5 = "INSERT INTO " + tableName_tOracleOutput_5 + " (CODIGO_UNICO,SIGLA_FORMA) VALUES (?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_5 = conn_tOracleOutput_5.prepareStatement(insert_tOracleOutput_5);
                        resourceMap.put("pstmt_tOracleOutput_5", pstmt_tOracleOutput_5);





 



/**
 * [tOracleOutput_5 begin ] stop
 */



	
	/**
	 * [tOracleInput_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_17", false);
		start_Hash.put("tOracleInput_17", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_17";
	
	
		int tos_count_tOracleInput_17 = 0;
		
	


	
		    int nb_line_tOracleInput_17 = 0;
		    java.sql.Connection conn_tOracleInput_17 = null;
				conn_tOracleInput_17 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_17 = false;
				boolean isConnectionWrapped_tOracleInput_17 = !(conn_tOracleInput_17 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_17.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_17 = null;
                if (isConnectionWrapped_tOracleInput_17) {
					unwrappedOraConn_tOracleInput_17 = conn_tOracleInput_17.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_17 != null) {
                        isTimeZoneNull_tOracleInput_17 = (unwrappedOraConn_tOracleInput_17.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_17 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_17).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_17) {
					java.sql.Statement stmtGetTZ_tOracleInput_17 = conn_tOracleInput_17.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_17 = stmtGetTZ_tOracleInput_17.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_17 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_17.next()) {
						sessionTimezone_tOracleInput_17 = rsGetTZ_tOracleInput_17.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_17 && unwrappedOraConn_tOracleInput_17 != null) {
                        unwrappedOraConn_tOracleInput_17.setSessionTimeZone(sessionTimezone_tOracleInput_17);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_17).setSessionTimeZone(sessionTimezone_tOracleInput_17);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_17 = conn_tOracleInput_17.createStatement();

		    String dbquery_tOracleInput_17 = " SELECT codigounico AS Codigo_Unico, REGEXP_SUBSTR(FFARMACEUTICA, '[^,]+', 1, LEVEL) AS sigla_forma\n  FROM MED_NUSOREG"
+"ISTRO_TEMP\n  CONNECT BY codigounico = PRIOR codigounico AND PRIOR SYS_GUID() IS NOT NULL\n  AND LEVEL <= REGEXP_COUNT(F"
+"FARMACEUTICA, ',') + 1  and   REGEXP_SUBSTR(FFARMACEUTICA, '[^,]+', 1, LEVEL) is not null";
		    

		    globalMap.put("tOracleInput_17_QUERY",dbquery_tOracleInput_17);

		    java.sql.ResultSet rs_tOracleInput_17 = null;

		    try {
		    	rs_tOracleInput_17 = stmt_tOracleInput_17.executeQuery(dbquery_tOracleInput_17);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_17 = rs_tOracleInput_17.getMetaData();
		    	int colQtyInRs_tOracleInput_17 = rsmd_tOracleInput_17.getColumnCount();

		    String tmpContent_tOracleInput_17 = null;
		    
		    
		    while (rs_tOracleInput_17.next()) {
		        nb_line_tOracleInput_17++;
		        
							if(colQtyInRs_tOracleInput_17 < 1) {
								row52.CODIGO_UNICO = null;
							} else {
	                         		
        	row52.CODIGO_UNICO = routines.system.JDBCUtil.getString(rs_tOracleInput_17, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_17 < 2) {
								row52.SIGLA_FORMA = null;
							} else {
	                         		
        	row52.SIGLA_FORMA = routines.system.JDBCUtil.getString(rs_tOracleInput_17, 2, false);
		                    }
					




 



/**
 * [tOracleInput_17 begin ] stop
 */
	
	/**
	 * [tOracleInput_17 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

 


	tos_count_tOracleInput_17++;

/**
 * [tOracleInput_17 main ] stop
 */
	
	/**
	 * [tOracleInput_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

 



/**
 * [tOracleInput_17 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_5 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row52"
						
						);
					}
					



        whetherReject_tOracleOutput_5 = false;
                        if(row52.CODIGO_UNICO == null) {
pstmt_tOracleOutput_5.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_5.setString(1, row52.CODIGO_UNICO);
}

                        if(row52.SIGLA_FORMA == null) {
pstmt_tOracleOutput_5.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_5.setString(2, row52.SIGLA_FORMA);
}

                try {
                    nb_line_tOracleOutput_5++;
                    int processedCount_tOracleOutput_5 = pstmt_tOracleOutput_5.executeUpdate();
                    insertedCount_tOracleOutput_5 += processedCount_tOracleOutput_5;
                    rowsToCommitCount_tOracleOutput_5 += processedCount_tOracleOutput_5;
                } catch(java.lang.Exception e_tOracleOutput_5) {
globalMap.put("tOracleOutput_5_ERROR_MESSAGE",e_tOracleOutput_5.getMessage());
                    whetherReject_tOracleOutput_5 = true;
                            System.err.print(e_tOracleOutput_5.getMessage());
                }

 


	tos_count_tOracleOutput_5++;

/**
 * [tOracleOutput_5 main ] stop
 */
	
	/**
	 * [tOracleOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	

 



/**
 * [tOracleOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	

 



/**
 * [tOracleOutput_5 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

 



/**
 * [tOracleInput_17 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_17 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

}
}finally{
	if (rs_tOracleInput_17 != null) {
		rs_tOracleInput_17.close();
	}
	if (stmt_tOracleInput_17 != null) {
		stmt_tOracleInput_17.close();
	}
}

globalMap.put("tOracleInput_17_NB_LINE",nb_line_tOracleInput_17);
 

ok_Hash.put("tOracleInput_17", true);
end_Hash.put("tOracleInput_17", System.currentTimeMillis());




/**
 * [tOracleInput_17 end ] stop
 */

	
	/**
	 * [tOracleOutput_5 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	
	



	
        if(pstmt_tOracleOutput_5 != null) {
			
				pstmt_tOracleOutput_5.close();
				resourceMap.remove("pstmt_tOracleOutput_5");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_5", true);

	
	nb_line_deleted_tOracleOutput_5=nb_line_deleted_tOracleOutput_5+ deletedCount_tOracleOutput_5;
	nb_line_update_tOracleOutput_5=nb_line_update_tOracleOutput_5 + updatedCount_tOracleOutput_5;
	nb_line_inserted_tOracleOutput_5=nb_line_inserted_tOracleOutput_5 + insertedCount_tOracleOutput_5;
	nb_line_rejected_tOracleOutput_5=nb_line_rejected_tOracleOutput_5 + rejectedCount_tOracleOutput_5;
	
        globalMap.put("tOracleOutput_5_NB_LINE",nb_line_tOracleOutput_5);
        globalMap.put("tOracleOutput_5_NB_LINE_UPDATED",nb_line_update_tOracleOutput_5);
        globalMap.put("tOracleOutput_5_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_5);
        globalMap.put("tOracleOutput_5_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_5);
        globalMap.put("tOracleOutput_5_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_5);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row52");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_5", true);
end_Hash.put("tOracleOutput_5", System.currentTimeMillis());




/**
 * [tOracleOutput_5 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_17:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tOracleInput_18Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_17 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

 



/**
 * [tOracleInput_17 finally ] stop
 */

	
	/**
	 * [tOracleOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_5") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_5 = null;
                if ((pstmtToClose_tOracleOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_5")) != null) {
                    pstmtToClose_tOracleOutput_5.close();
                }
    }
 



/**
 * [tOracleOutput_5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_17_SUBPROCESS_STATE", 1);
	}
	


public static class error_duplicadosStruct implements routines.system.IPersistableRow<error_duplicadosStruct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String Mensaje;

				public String getMensaje () {
					return this.Mensaje;
				}

				public Boolean MensajeIsNullable(){
				    return true;
				}
				public Boolean MensajeIsKey(){
				    return false;
				}
				public Integer MensajeLength(){
				    return 500;
				}
				public Integer MensajePrecision(){
				    return null;
				}
				public String MensajeDefault(){
				
					return null;
				
				}
				public String MensajeComment(){
				
				    return "";
				
				}
				public String MensajePattern(){
				
					return "";
				
				}
				public String MensajeOriginalDbColumnName(){
				
					return "Mensaje";
				
				}

				
			    public Long Linea;

				public Long getLinea () {
					return this.Linea;
				}

				public Boolean LineaIsNullable(){
				    return true;
				}
				public Boolean LineaIsKey(){
				    return false;
				}
				public Integer LineaLength(){
				    return null;
				}
				public Integer LineaPrecision(){
				    return null;
				}
				public String LineaDefault(){
				
					return null;
				
				}
				public String LineaComment(){
				
				    return "";
				
				}
				public String LineaPattern(){
				
					return "";
				
				}
				public String LineaOriginalDbColumnName(){
				
					return "Linea";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return 150;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Mensaje="+Mensaje);
		sb.append(",Linea="+String.valueOf(Linea));
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(error_duplicadosStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row49Struct implements routines.system.IPersistableRow<row49Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String CODSSMP;

				public String getCODSSMP () {
					return this.CODSSMP;
				}

				public Boolean CODSSMPIsNullable(){
				    return true;
				}
				public Boolean CODSSMPIsKey(){
				    return false;
				}
				public Integer CODSSMPLength(){
				    return 15;
				}
				public Integer CODSSMPPrecision(){
				    return 0;
				}
				public String CODSSMPDefault(){
				
					return null;
				
				}
				public String CODSSMPComment(){
				
				    return "CODIGO SSMP";
				
				}
				public String CODSSMPPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CODSSMPOriginalDbColumnName(){
				
					return "CODSSMP";
				
				}

				
			    public String GENERICO;

				public String getGENERICO () {
					return this.GENERICO;
				}

				public Boolean GENERICOIsNullable(){
				    return true;
				}
				public Boolean GENERICOIsKey(){
				    return false;
				}
				public Integer GENERICOLength(){
				    return 200;
				}
				public Integer GENERICOPrecision(){
				    return 0;
				}
				public String GENERICODefault(){
				
					return null;
				
				}
				public String GENERICOComment(){
				
				    return "NOMBRE GENERICO";
				
				}
				public String GENERICOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String GENERICOOriginalDbColumnName(){
				
					return "GENERICO";
				
				}

				
			    public String CONCENTRACION;

				public String getCONCENTRACION () {
					return this.CONCENTRACION;
				}

				public Boolean CONCENTRACIONIsNullable(){
				    return true;
				}
				public Boolean CONCENTRACIONIsKey(){
				    return false;
				}
				public Integer CONCENTRACIONLength(){
				    return 50;
				}
				public Integer CONCENTRACIONPrecision(){
				    return 0;
				}
				public String CONCENTRACIONDefault(){
				
					return null;
				
				}
				public String CONCENTRACIONComment(){
				
				    return "CONCENTRACION";
				
				}
				public String CONCENTRACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CONCENTRACIONOriginalDbColumnName(){
				
					return "CONCENTRACION";
				
				}

				
			    public String FORMA_FARMACEUTICA;

				public String getFORMA_FARMACEUTICA () {
					return this.FORMA_FARMACEUTICA;
				}

				public Boolean FORMA_FARMACEUTICAIsNullable(){
				    return true;
				}
				public Boolean FORMA_FARMACEUTICAIsKey(){
				    return false;
				}
				public Integer FORMA_FARMACEUTICALength(){
				    return 500;
				}
				public Integer FORMA_FARMACEUTICAPrecision(){
				    return 0;
				}
				public String FORMA_FARMACEUTICADefault(){
				
					return null;
				
				}
				public String FORMA_FARMACEUTICAComment(){
				
				    return "FORMA FARMACEUTICA";
				
				}
				public String FORMA_FARMACEUTICAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FORMA_FARMACEUTICAOriginalDbColumnName(){
				
					return "FORMA_FARMACEUTICA";
				
				}

				
			    public String VIAADMIN;

				public String getVIAADMIN () {
					return this.VIAADMIN;
				}

				public Boolean VIAADMINIsNullable(){
				    return true;
				}
				public Boolean VIAADMINIsKey(){
				    return false;
				}
				public Integer VIAADMINLength(){
				    return 200;
				}
				public Integer VIAADMINPrecision(){
				    return 0;
				}
				public String VIAADMINDefault(){
				
					return null;
				
				}
				public String VIAADMINComment(){
				
				    return "VIA ADMINISTRACION";
				
				}
				public String VIAADMINPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String VIAADMINOriginalDbColumnName(){
				
					return "VIAADMIN";
				
				}

				
			    public String NIVEL_USO;

				public String getNIVEL_USO () {
					return this.NIVEL_USO;
				}

				public Boolean NIVEL_USOIsNullable(){
				    return true;
				}
				public Boolean NIVEL_USOIsKey(){
				    return false;
				}
				public Integer NIVEL_USOLength(){
				    return 50;
				}
				public Integer NIVEL_USOPrecision(){
				    return 0;
				}
				public String NIVEL_USODefault(){
				
					return null;
				
				}
				public String NIVEL_USOComment(){
				
				    return "NIVEL USO";
				
				}
				public String NIVEL_USOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NIVEL_USOOriginalDbColumnName(){
				
					return "NIVEL_USO";
				
				}

				
			    public String NATENCION;

				public String getNATENCION () {
					return this.NATENCION;
				}

				public Boolean NATENCIONIsNullable(){
				    return true;
				}
				public Boolean NATENCIONIsKey(){
				    return false;
				}
				public Integer NATENCIONLength(){
				    return 50;
				}
				public Integer NATENCIONPrecision(){
				    return 0;
				}
				public String NATENCIONDefault(){
				
					return null;
				
				}
				public String NATENCIONComment(){
				
				    return "NIVEL ATENCION";
				
				}
				public String NATENCIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NATENCIONOriginalDbColumnName(){
				
					return "NATENCION";
				
				}

				
			    public String OBSERVACION;

				public String getOBSERVACION () {
					return this.OBSERVACION;
				}

				public Boolean OBSERVACIONIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONIsKey(){
				    return false;
				}
				public Integer OBSERVACIONLength(){
				    return 500;
				}
				public Integer OBSERVACIONPrecision(){
				    return 0;
				}
				public String OBSERVACIONDefault(){
				
					return null;
				
				}
				public String OBSERVACIONComment(){
				
				    return "OBSERVACION PARA EL NIVEL DE USO";
				
				}
				public String OBSERVACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String OBSERVACIONOriginalDbColumnName(){
				
					return "OBSERVACION";
				
				}

				
			    public String USADOPRE;

				public String getUSADOPRE () {
					return this.USADOPRE;
				}

				public Boolean USADOPREIsNullable(){
				    return true;
				}
				public Boolean USADOPREIsKey(){
				    return false;
				}
				public Integer USADOPRELength(){
				    return 2;
				}
				public Integer USADOPREPrecision(){
				    return 0;
				}
				public String USADOPREDefault(){
				
					return null;
				
				}
				public String USADOPREComment(){
				
				    return "USADO PARA PREPARACIONES";
				
				}
				public String USADOPREPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String USADOPREOriginalDbColumnName(){
				
					return "USADOPRE";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return 150;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return 0;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "CODIGO UNICO";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				
			    public String ESPECIALIDAD;

				public String getESPECIALIDAD () {
					return this.ESPECIALIDAD;
				}

				public Boolean ESPECIALIDADIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADLength(){
				    return 150;
				}
				public Integer ESPECIALIDADPrecision(){
				    return 0;
				}
				public String ESPECIALIDADDefault(){
				
					return null;
				
				}
				public String ESPECIALIDADComment(){
				
				    return "ESPECIALIDAD MEDICA";
				
				}
				public String ESPECIALIDADPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADOriginalDbColumnName(){
				
					return "ESPECIALIDAD";
				
				}

				
			    public Long LINEA;

				public Long getLINEA () {
					return this.LINEA;
				}

				public Boolean LINEAIsNullable(){
				    return true;
				}
				public Boolean LINEAIsKey(){
				    return false;
				}
				public Integer LINEALength(){
				    return 38;
				}
				public Integer LINEAPrecision(){
				    return 0;
				}
				public String LINEADefault(){
				
					return "";
				
				}
				public String LINEAComment(){
				
				    return "";
				
				}
				public String LINEAPattern(){
				
					return "";
				
				}
				public String LINEAOriginalDbColumnName(){
				
					return "LINEA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CODSSMP = readString(dis);
					
					this.GENERICO = readString(dis);
					
					this.CONCENTRACION = readString(dis);
					
					this.FORMA_FARMACEUTICA = readString(dis);
					
					this.VIAADMIN = readString(dis);
					
					this.NIVEL_USO = readString(dis);
					
					this.NATENCION = readString(dis);
					
					this.OBSERVACION = readString(dis);
					
					this.USADOPRE = readString(dis);
					
					this.CODIGO_UNICO = readString(dis);
					
					this.ESPECIALIDAD = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LINEA = null;
           				} else {
           			    	this.LINEA = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CODSSMP = readString(dis);
					
					this.GENERICO = readString(dis);
					
					this.CONCENTRACION = readString(dis);
					
					this.FORMA_FARMACEUTICA = readString(dis);
					
					this.VIAADMIN = readString(dis);
					
					this.NIVEL_USO = readString(dis);
					
					this.NATENCION = readString(dis);
					
					this.OBSERVACION = readString(dis);
					
					this.USADOPRE = readString(dis);
					
					this.CODIGO_UNICO = readString(dis);
					
					this.ESPECIALIDAD = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LINEA = null;
           				} else {
           			    	this.LINEA = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODSSMP,dos);
					
					// String
				
						writeString(this.GENERICO,dos);
					
					// String
				
						writeString(this.CONCENTRACION,dos);
					
					// String
				
						writeString(this.FORMA_FARMACEUTICA,dos);
					
					// String
				
						writeString(this.VIAADMIN,dos);
					
					// String
				
						writeString(this.NIVEL_USO,dos);
					
					// String
				
						writeString(this.NATENCION,dos);
					
					// String
				
						writeString(this.OBSERVACION,dos);
					
					// String
				
						writeString(this.USADOPRE,dos);
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// Long
				
						if(this.LINEA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LINEA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODSSMP,dos);
					
					// String
				
						writeString(this.GENERICO,dos);
					
					// String
				
						writeString(this.CONCENTRACION,dos);
					
					// String
				
						writeString(this.FORMA_FARMACEUTICA,dos);
					
					// String
				
						writeString(this.VIAADMIN,dos);
					
					// String
				
						writeString(this.NIVEL_USO,dos);
					
					// String
				
						writeString(this.NATENCION,dos);
					
					// String
				
						writeString(this.OBSERVACION,dos);
					
					// String
				
						writeString(this.USADOPRE,dos);
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// Long
				
						if(this.LINEA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LINEA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CODSSMP="+CODSSMP);
		sb.append(",GENERICO="+GENERICO);
		sb.append(",CONCENTRACION="+CONCENTRACION);
		sb.append(",FORMA_FARMACEUTICA="+FORMA_FARMACEUTICA);
		sb.append(",VIAADMIN="+VIAADMIN);
		sb.append(",NIVEL_USO="+NIVEL_USO);
		sb.append(",NATENCION="+NATENCION);
		sb.append(",OBSERVACION="+OBSERVACION);
		sb.append(",USADOPRE="+USADOPRE);
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
		sb.append(",ESPECIALIDAD="+ESPECIALIDAD);
		sb.append(",LINEA="+String.valueOf(LINEA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row49Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class rgduplicadosStruct implements routines.system.IPersistableRow<rgduplicadosStruct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String CODSSMP;

				public String getCODSSMP () {
					return this.CODSSMP;
				}

				public Boolean CODSSMPIsNullable(){
				    return true;
				}
				public Boolean CODSSMPIsKey(){
				    return false;
				}
				public Integer CODSSMPLength(){
				    return 15;
				}
				public Integer CODSSMPPrecision(){
				    return 0;
				}
				public String CODSSMPDefault(){
				
					return null;
				
				}
				public String CODSSMPComment(){
				
				    return "CODIGO SSMP";
				
				}
				public String CODSSMPPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CODSSMPOriginalDbColumnName(){
				
					return "CODSSMP";
				
				}

				
			    public String GENERICO;

				public String getGENERICO () {
					return this.GENERICO;
				}

				public Boolean GENERICOIsNullable(){
				    return true;
				}
				public Boolean GENERICOIsKey(){
				    return false;
				}
				public Integer GENERICOLength(){
				    return 200;
				}
				public Integer GENERICOPrecision(){
				    return 0;
				}
				public String GENERICODefault(){
				
					return null;
				
				}
				public String GENERICOComment(){
				
				    return "NOMBRE GENERICO";
				
				}
				public String GENERICOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String GENERICOOriginalDbColumnName(){
				
					return "GENERICO";
				
				}

				
			    public String CONCENTRACION;

				public String getCONCENTRACION () {
					return this.CONCENTRACION;
				}

				public Boolean CONCENTRACIONIsNullable(){
				    return true;
				}
				public Boolean CONCENTRACIONIsKey(){
				    return false;
				}
				public Integer CONCENTRACIONLength(){
				    return 50;
				}
				public Integer CONCENTRACIONPrecision(){
				    return 0;
				}
				public String CONCENTRACIONDefault(){
				
					return null;
				
				}
				public String CONCENTRACIONComment(){
				
				    return "CONCENTRACION";
				
				}
				public String CONCENTRACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CONCENTRACIONOriginalDbColumnName(){
				
					return "CONCENTRACION";
				
				}

				
			    public String FORMA_FARMACEUTICA;

				public String getFORMA_FARMACEUTICA () {
					return this.FORMA_FARMACEUTICA;
				}

				public Boolean FORMA_FARMACEUTICAIsNullable(){
				    return true;
				}
				public Boolean FORMA_FARMACEUTICAIsKey(){
				    return false;
				}
				public Integer FORMA_FARMACEUTICALength(){
				    return 500;
				}
				public Integer FORMA_FARMACEUTICAPrecision(){
				    return 0;
				}
				public String FORMA_FARMACEUTICADefault(){
				
					return null;
				
				}
				public String FORMA_FARMACEUTICAComment(){
				
				    return "FORMA FARMACEUTICA";
				
				}
				public String FORMA_FARMACEUTICAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FORMA_FARMACEUTICAOriginalDbColumnName(){
				
					return "FORMA_FARMACEUTICA";
				
				}

				
			    public String VIAADMIN;

				public String getVIAADMIN () {
					return this.VIAADMIN;
				}

				public Boolean VIAADMINIsNullable(){
				    return true;
				}
				public Boolean VIAADMINIsKey(){
				    return false;
				}
				public Integer VIAADMINLength(){
				    return 200;
				}
				public Integer VIAADMINPrecision(){
				    return 0;
				}
				public String VIAADMINDefault(){
				
					return null;
				
				}
				public String VIAADMINComment(){
				
				    return "VIA ADMINISTRACION";
				
				}
				public String VIAADMINPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String VIAADMINOriginalDbColumnName(){
				
					return "VIAADMIN";
				
				}

				
			    public String NIVEL_USO;

				public String getNIVEL_USO () {
					return this.NIVEL_USO;
				}

				public Boolean NIVEL_USOIsNullable(){
				    return true;
				}
				public Boolean NIVEL_USOIsKey(){
				    return false;
				}
				public Integer NIVEL_USOLength(){
				    return 50;
				}
				public Integer NIVEL_USOPrecision(){
				    return 0;
				}
				public String NIVEL_USODefault(){
				
					return null;
				
				}
				public String NIVEL_USOComment(){
				
				    return "NIVEL USO";
				
				}
				public String NIVEL_USOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NIVEL_USOOriginalDbColumnName(){
				
					return "NIVEL_USO";
				
				}

				
			    public String NATENCION;

				public String getNATENCION () {
					return this.NATENCION;
				}

				public Boolean NATENCIONIsNullable(){
				    return true;
				}
				public Boolean NATENCIONIsKey(){
				    return false;
				}
				public Integer NATENCIONLength(){
				    return 50;
				}
				public Integer NATENCIONPrecision(){
				    return 0;
				}
				public String NATENCIONDefault(){
				
					return null;
				
				}
				public String NATENCIONComment(){
				
				    return "NIVEL ATENCION";
				
				}
				public String NATENCIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NATENCIONOriginalDbColumnName(){
				
					return "NATENCION";
				
				}

				
			    public String OBSERVACION;

				public String getOBSERVACION () {
					return this.OBSERVACION;
				}

				public Boolean OBSERVACIONIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONIsKey(){
				    return false;
				}
				public Integer OBSERVACIONLength(){
				    return 500;
				}
				public Integer OBSERVACIONPrecision(){
				    return 0;
				}
				public String OBSERVACIONDefault(){
				
					return null;
				
				}
				public String OBSERVACIONComment(){
				
				    return "OBSERVACION PARA EL NIVEL DE USO";
				
				}
				public String OBSERVACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String OBSERVACIONOriginalDbColumnName(){
				
					return "OBSERVACION";
				
				}

				
			    public String USADOPRE;

				public String getUSADOPRE () {
					return this.USADOPRE;
				}

				public Boolean USADOPREIsNullable(){
				    return true;
				}
				public Boolean USADOPREIsKey(){
				    return false;
				}
				public Integer USADOPRELength(){
				    return 2;
				}
				public Integer USADOPREPrecision(){
				    return 0;
				}
				public String USADOPREDefault(){
				
					return null;
				
				}
				public String USADOPREComment(){
				
				    return "USADO PARA PREPARACIONES";
				
				}
				public String USADOPREPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String USADOPREOriginalDbColumnName(){
				
					return "USADOPRE";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return 150;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return 0;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "CODIGO UNICO";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				
			    public String ESPECIALIDAD;

				public String getESPECIALIDAD () {
					return this.ESPECIALIDAD;
				}

				public Boolean ESPECIALIDADIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADLength(){
				    return 150;
				}
				public Integer ESPECIALIDADPrecision(){
				    return 0;
				}
				public String ESPECIALIDADDefault(){
				
					return null;
				
				}
				public String ESPECIALIDADComment(){
				
				    return "ESPECIALIDAD MEDICA";
				
				}
				public String ESPECIALIDADPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADOriginalDbColumnName(){
				
					return "ESPECIALIDAD";
				
				}

				
			    public Long LINEA;

				public Long getLINEA () {
					return this.LINEA;
				}

				public Boolean LINEAIsNullable(){
				    return true;
				}
				public Boolean LINEAIsKey(){
				    return false;
				}
				public Integer LINEALength(){
				    return 38;
				}
				public Integer LINEAPrecision(){
				    return 0;
				}
				public String LINEADefault(){
				
					return "";
				
				}
				public String LINEAComment(){
				
				    return "";
				
				}
				public String LINEAPattern(){
				
					return "";
				
				}
				public String LINEAOriginalDbColumnName(){
				
					return "LINEA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CODSSMP = readString(dis);
					
					this.GENERICO = readString(dis);
					
					this.CONCENTRACION = readString(dis);
					
					this.FORMA_FARMACEUTICA = readString(dis);
					
					this.VIAADMIN = readString(dis);
					
					this.NIVEL_USO = readString(dis);
					
					this.NATENCION = readString(dis);
					
					this.OBSERVACION = readString(dis);
					
					this.USADOPRE = readString(dis);
					
					this.CODIGO_UNICO = readString(dis);
					
					this.ESPECIALIDAD = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LINEA = null;
           				} else {
           			    	this.LINEA = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CODSSMP = readString(dis);
					
					this.GENERICO = readString(dis);
					
					this.CONCENTRACION = readString(dis);
					
					this.FORMA_FARMACEUTICA = readString(dis);
					
					this.VIAADMIN = readString(dis);
					
					this.NIVEL_USO = readString(dis);
					
					this.NATENCION = readString(dis);
					
					this.OBSERVACION = readString(dis);
					
					this.USADOPRE = readString(dis);
					
					this.CODIGO_UNICO = readString(dis);
					
					this.ESPECIALIDAD = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LINEA = null;
           				} else {
           			    	this.LINEA = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODSSMP,dos);
					
					// String
				
						writeString(this.GENERICO,dos);
					
					// String
				
						writeString(this.CONCENTRACION,dos);
					
					// String
				
						writeString(this.FORMA_FARMACEUTICA,dos);
					
					// String
				
						writeString(this.VIAADMIN,dos);
					
					// String
				
						writeString(this.NIVEL_USO,dos);
					
					// String
				
						writeString(this.NATENCION,dos);
					
					// String
				
						writeString(this.OBSERVACION,dos);
					
					// String
				
						writeString(this.USADOPRE,dos);
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// Long
				
						if(this.LINEA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LINEA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODSSMP,dos);
					
					// String
				
						writeString(this.GENERICO,dos);
					
					// String
				
						writeString(this.CONCENTRACION,dos);
					
					// String
				
						writeString(this.FORMA_FARMACEUTICA,dos);
					
					// String
				
						writeString(this.VIAADMIN,dos);
					
					// String
				
						writeString(this.NIVEL_USO,dos);
					
					// String
				
						writeString(this.NATENCION,dos);
					
					// String
				
						writeString(this.OBSERVACION,dos);
					
					// String
				
						writeString(this.USADOPRE,dos);
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// Long
				
						if(this.LINEA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LINEA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CODSSMP="+CODSSMP);
		sb.append(",GENERICO="+GENERICO);
		sb.append(",CONCENTRACION="+CONCENTRACION);
		sb.append(",FORMA_FARMACEUTICA="+FORMA_FARMACEUTICA);
		sb.append(",VIAADMIN="+VIAADMIN);
		sb.append(",NIVEL_USO="+NIVEL_USO);
		sb.append(",NATENCION="+NATENCION);
		sb.append(",OBSERVACION="+OBSERVACION);
		sb.append(",USADOPRE="+USADOPRE);
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
		sb.append(",ESPECIALIDAD="+ESPECIALIDAD);
		sb.append(",LINEA="+String.valueOf(LINEA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(rgduplicadosStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row42Struct implements routines.system.IPersistableRow<row42Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String CodSsmp;

				public String getCodSsmp () {
					return this.CodSsmp;
				}

				public Boolean CodSsmpIsNullable(){
				    return true;
				}
				public Boolean CodSsmpIsKey(){
				    return false;
				}
				public Integer CodSsmpLength(){
				    return 15;
				}
				public Integer CodSsmpPrecision(){
				    return 0;
				}
				public String CodSsmpDefault(){
				
					return null;
				
				}
				public String CodSsmpComment(){
				
				    return "CODIGO SSMP";
				
				}
				public String CodSsmpPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CodSsmpOriginalDbColumnName(){
				
					return "CodSsmp";
				
				}

				
			    public String NGenerico;

				public String getNGenerico () {
					return this.NGenerico;
				}

				public Boolean NGenericoIsNullable(){
				    return true;
				}
				public Boolean NGenericoIsKey(){
				    return false;
				}
				public Integer NGenericoLength(){
				    return 200;
				}
				public Integer NGenericoPrecision(){
				    return 0;
				}
				public String NGenericoDefault(){
				
					return null;
				
				}
				public String NGenericoComment(){
				
				    return "NOMBRE GENERICO";
				
				}
				public String NGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NGenericoOriginalDbColumnName(){
				
					return "NGenerico";
				
				}

				
			    public String Concentracion;

				public String getConcentracion () {
					return this.Concentracion;
				}

				public Boolean ConcentracionIsNullable(){
				    return true;
				}
				public Boolean ConcentracionIsKey(){
				    return false;
				}
				public Integer ConcentracionLength(){
				    return 50;
				}
				public Integer ConcentracionPrecision(){
				    return 0;
				}
				public String ConcentracionDefault(){
				
					return null;
				
				}
				public String ConcentracionComment(){
				
				    return "CONCENTRACION";
				
				}
				public String ConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ConcentracionOriginalDbColumnName(){
				
					return "Concentracion";
				
				}

				
			    public String FFarmaceutica;

				public String getFFarmaceutica () {
					return this.FFarmaceutica;
				}

				public Boolean FFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean FFarmaceuticaIsKey(){
				    return false;
				}
				public Integer FFarmaceuticaLength(){
				    return 500;
				}
				public Integer FFarmaceuticaPrecision(){
				    return 0;
				}
				public String FFarmaceuticaDefault(){
				
					return null;
				
				}
				public String FFarmaceuticaComment(){
				
				    return "FORMA FARMACEUTICA";
				
				}
				public String FFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FFarmaceuticaOriginalDbColumnName(){
				
					return "FFarmaceutica";
				
				}

				
			    public String ViaAdmin;

				public String getViaAdmin () {
					return this.ViaAdmin;
				}

				public Boolean ViaAdminIsNullable(){
				    return true;
				}
				public Boolean ViaAdminIsKey(){
				    return false;
				}
				public Integer ViaAdminLength(){
				    return 200;
				}
				public Integer ViaAdminPrecision(){
				    return 0;
				}
				public String ViaAdminDefault(){
				
					return null;
				
				}
				public String ViaAdminComment(){
				
				    return "VIA ADMINISTRACION";
				
				}
				public String ViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ViaAdminOriginalDbColumnName(){
				
					return "ViaAdmin";
				
				}

				
			    public String NUso;

				public String getNUso () {
					return this.NUso;
				}

				public Boolean NUsoIsNullable(){
				    return true;
				}
				public Boolean NUsoIsKey(){
				    return false;
				}
				public Integer NUsoLength(){
				    return 50;
				}
				public Integer NUsoPrecision(){
				    return 0;
				}
				public String NUsoDefault(){
				
					return null;
				
				}
				public String NUsoComment(){
				
				    return "NIVEL USO";
				
				}
				public String NUsoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NUsoOriginalDbColumnName(){
				
					return "NUso";
				
				}

				
			    public String NAtencion;

				public String getNAtencion () {
					return this.NAtencion;
				}

				public Boolean NAtencionIsNullable(){
				    return true;
				}
				public Boolean NAtencionIsKey(){
				    return false;
				}
				public Integer NAtencionLength(){
				    return 50;
				}
				public Integer NAtencionPrecision(){
				    return 0;
				}
				public String NAtencionDefault(){
				
					return null;
				
				}
				public String NAtencionComment(){
				
				    return "NIVEL ATENCION";
				
				}
				public String NAtencionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NAtencionOriginalDbColumnName(){
				
					return "NAtencion";
				
				}

				
			    public String ObsNUso;

				public String getObsNUso () {
					return this.ObsNUso;
				}

				public Boolean ObsNUsoIsNullable(){
				    return true;
				}
				public Boolean ObsNUsoIsKey(){
				    return false;
				}
				public Integer ObsNUsoLength(){
				    return 500;
				}
				public Integer ObsNUsoPrecision(){
				    return 0;
				}
				public String ObsNUsoDefault(){
				
					return null;
				
				}
				public String ObsNUsoComment(){
				
				    return "OBSERVACION PARA EL NIVEL DE USO";
				
				}
				public String ObsNUsoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ObsNUsoOriginalDbColumnName(){
				
					return "ObsNUso";
				
				}

				
			    public String UsadoPre;

				public String getUsadoPre () {
					return this.UsadoPre;
				}

				public Boolean UsadoPreIsNullable(){
				    return true;
				}
				public Boolean UsadoPreIsKey(){
				    return false;
				}
				public Integer UsadoPreLength(){
				    return 2;
				}
				public Integer UsadoPrePrecision(){
				    return 0;
				}
				public String UsadoPreDefault(){
				
					return null;
				
				}
				public String UsadoPreComment(){
				
				    return "USADO PARA PREPARACIONES";
				
				}
				public String UsadoPrePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UsadoPreOriginalDbColumnName(){
				
					return "UsadoPre";
				
				}

				
			    public String CodigoUnico;

				public String getCodigoUnico () {
					return this.CodigoUnico;
				}

				public Boolean CodigoUnicoIsNullable(){
				    return true;
				}
				public Boolean CodigoUnicoIsKey(){
				    return false;
				}
				public Integer CodigoUnicoLength(){
				    return 150;
				}
				public Integer CodigoUnicoPrecision(){
				    return 0;
				}
				public String CodigoUnicoDefault(){
				
					return null;
				
				}
				public String CodigoUnicoComment(){
				
				    return "CODIGO UNICO";
				
				}
				public String CodigoUnicoPattern(){
				
					return "";
				
				}
				public String CodigoUnicoOriginalDbColumnName(){
				
					return "CodigoUnico";
				
				}

				
			    public String EspecialidadMedica;

				public String getEspecialidadMedica () {
					return this.EspecialidadMedica;
				}

				public Boolean EspecialidadMedicaIsNullable(){
				    return true;
				}
				public Boolean EspecialidadMedicaIsKey(){
				    return false;
				}
				public Integer EspecialidadMedicaLength(){
				    return 150;
				}
				public Integer EspecialidadMedicaPrecision(){
				    return 0;
				}
				public String EspecialidadMedicaDefault(){
				
					return null;
				
				}
				public String EspecialidadMedicaComment(){
				
				    return "ESPECIALIDAD MEDICA";
				
				}
				public String EspecialidadMedicaPattern(){
				
					return "";
				
				}
				public String EspecialidadMedicaOriginalDbColumnName(){
				
					return "EspecialidadMedica";
				
				}

				
			    public Long linea;

				public Long getLinea () {
					return this.linea;
				}

				public Boolean lineaIsNullable(){
				    return true;
				}
				public Boolean lineaIsKey(){
				    return false;
				}
				public Integer lineaLength(){
				    return 38;
				}
				public Integer lineaPrecision(){
				    return 0;
				}
				public String lineaDefault(){
				
					return "0";
				
				}
				public String lineaComment(){
				
				    return "";
				
				}
				public String lineaPattern(){
				
					return "";
				
				}
				public String lineaOriginalDbColumnName(){
				
					return "linea";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CodSsmp = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.FFarmaceutica = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.NUso = readString(dis);
					
					this.NAtencion = readString(dis);
					
					this.ObsNUso = readString(dis);
					
					this.UsadoPre = readString(dis);
					
					this.CodigoUnico = readString(dis);
					
					this.EspecialidadMedica = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.linea = null;
           				} else {
           			    	this.linea = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CodSsmp = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.FFarmaceutica = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.NUso = readString(dis);
					
					this.NAtencion = readString(dis);
					
					this.ObsNUso = readString(dis);
					
					this.UsadoPre = readString(dis);
					
					this.CodigoUnico = readString(dis);
					
					this.EspecialidadMedica = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.linea = null;
           				} else {
           			    	this.linea = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CodSsmp,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.FFarmaceutica,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.NUso,dos);
					
					// String
				
						writeString(this.NAtencion,dos);
					
					// String
				
						writeString(this.ObsNUso,dos);
					
					// String
				
						writeString(this.UsadoPre,dos);
					
					// String
				
						writeString(this.CodigoUnico,dos);
					
					// String
				
						writeString(this.EspecialidadMedica,dos);
					
					// Long
				
						if(this.linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.linea);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CodSsmp,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.FFarmaceutica,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.NUso,dos);
					
					// String
				
						writeString(this.NAtencion,dos);
					
					// String
				
						writeString(this.ObsNUso,dos);
					
					// String
				
						writeString(this.UsadoPre,dos);
					
					// String
				
						writeString(this.CodigoUnico,dos);
					
					// String
				
						writeString(this.EspecialidadMedica,dos);
					
					// Long
				
						if(this.linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.linea);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CodSsmp="+CodSsmp);
		sb.append(",NGenerico="+NGenerico);
		sb.append(",Concentracion="+Concentracion);
		sb.append(",FFarmaceutica="+FFarmaceutica);
		sb.append(",ViaAdmin="+ViaAdmin);
		sb.append(",NUso="+NUso);
		sb.append(",NAtencion="+NAtencion);
		sb.append(",ObsNUso="+ObsNUso);
		sb.append(",UsadoPre="+UsadoPre);
		sb.append(",CodigoUnico="+CodigoUnico);
		sb.append(",EspecialidadMedica="+EspecialidadMedica);
		sb.append(",linea="+String.valueOf(linea));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row42Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_18Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_18_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row42Struct row42 = new row42Struct();
rgduplicadosStruct rgduplicados = new rgduplicadosStruct();
row49Struct row49 = new row49Struct();
error_duplicadosStruct error_duplicados = new error_duplicadosStruct();







	
	/**
	 * [tOracleOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_7", false);
		start_Hash.put("tOracleOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"error_duplicados");
					}
				
		int tos_count_tOracleOutput_7 = 0;
		






    
    int nb_line_tOracleOutput_7 = 0;
    int nb_line_update_tOracleOutput_7 = 0;
    int nb_line_inserted_tOracleOutput_7 = 0;
    int nb_line_deleted_tOracleOutput_7 = 0;
    int nb_line_rejected_tOracleOutput_7 = 0;

    int tmp_batchUpdateCount_tOracleOutput_7 = 0;

    int deletedCount_tOracleOutput_7=0;
    int updatedCount_tOracleOutput_7=0;
    int insertedCount_tOracleOutput_7=0;
    int rowsToCommitCount_tOracleOutput_7=0;
    int rejectedCount_tOracleOutput_7=0;

    boolean whetherReject_tOracleOutput_7 = false;

    java.sql.Connection conn_tOracleOutput_7 = null;

    //optional table
    String dbschema_tOracleOutput_7 = null;
    String tableName_tOracleOutput_7 = null;
        dbschema_tOracleOutput_7 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_7 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_7=0;

        if(dbschema_tOracleOutput_7 == null || dbschema_tOracleOutput_7.trim().length() == 0) {
            tableName_tOracleOutput_7 = ("ERRORLOG_TEMP");
        } else {
            tableName_tOracleOutput_7 = dbschema_tOracleOutput_7 + "." + ("ERRORLOG_TEMP");
        }
                                String tableNameForSearch_tOracleOutput_7= "" + ((String)"ERRORLOG_TEMP") + "";
String dbschemaForSearch_tOracleOutput_7= null;
if(dbschema_tOracleOutput_7== null || dbschema_tOracleOutput_7.trim().length() == 0) {
dbschemaForSearch_tOracleOutput_7= ((String)globalMap.get("username_tOracleConnection_2")).toUpperCase();
} else {
dbschemaForSearch_tOracleOutput_7= dbschema_tOracleOutput_7.toUpperCase();
}

                                java.sql.DatabaseMetaData dbMetaData_tOracleOutput_7 = conn_tOracleOutput_7.getMetaData();
                                if(tableNameForSearch_tOracleOutput_7.indexOf("\"")==-1){
                                    tableNameForSearch_tOracleOutput_7 = tableNameForSearch_tOracleOutput_7.toUpperCase();
                                }else{
                                    tableNameForSearch_tOracleOutput_7 = tableNameForSearch_tOracleOutput_7.replaceAll("\"","");
                                }
                                boolean whetherExist_tOracleOutput_7 = false;
                                try (java.sql.ResultSet rsTable_tOracleOutput_7 = dbMetaData_tOracleOutput_7.getTables(null, dbschemaForSearch_tOracleOutput_7, tableNameForSearch_tOracleOutput_7, new String[]{"TABLE"})) {
                                    if(rsTable_tOracleOutput_7.next()) {
                                        whetherExist_tOracleOutput_7 = true;
                                    }
                                }

                                if(!whetherExist_tOracleOutput_7) {
                                    try (java.sql.Statement stmtCreate_tOracleOutput_7 = conn_tOracleOutput_7.createStatement()) {
                                        stmtCreate_tOracleOutput_7.execute("CREATE TABLE " + tableName_tOracleOutput_7 + "(Mensaje VARCHAR2(500)  ,Linea NUMBER ,CODIGO_UNICO VARCHAR2(150)  )");
                                    }
                                }
                String insert_tOracleOutput_7 = "INSERT INTO " + tableName_tOracleOutput_7 + " (Mensaje,Linea,CODIGO_UNICO) VALUES (?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_7 = conn_tOracleOutput_7.prepareStatement(insert_tOracleOutput_7);
                        resourceMap.put("pstmt_tOracleOutput_7", pstmt_tOracleOutput_7);





 



/**
 * [tOracleOutput_7 begin ] stop
 */



	
	/**
	 * [tMap_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_13", false);
		start_Hash.put("tMap_13", System.currentTimeMillis());
		
	
	currentComponent="tMap_13";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row49");
					}
				
		int tos_count_tMap_13 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_13__Struct  {
}
Var__tMap_13__Struct Var__tMap_13 = new Var__tMap_13__Struct();
// ###############################

// ###############################
// # Outputs initialization
error_duplicadosStruct error_duplicados_tmp = new error_duplicadosStruct();
// ###############################

        
        



        









 



/**
 * [tMap_13 begin ] stop
 */



	
	/**
	 * [tJavaRow_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_14", false);
		start_Hash.put("tJavaRow_14", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_14";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"rgduplicados");
					}
				
		int tos_count_tJavaRow_14 = 0;
		

int nb_line_tJavaRow_14 = 0;

 



/**
 * [tJavaRow_14 begin ] stop
 */



	
	/**
	 * [tMap_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_15", false);
		start_Hash.put("tMap_15", System.currentTimeMillis());
		
	
	currentComponent="tMap_15";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row42");
					}
				
		int tos_count_tMap_15 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_15__Struct  {
}
Var__tMap_15__Struct Var__tMap_15 = new Var__tMap_15__Struct();
// ###############################

// ###############################
// # Outputs initialization
rgduplicadosStruct rgduplicados_tmp = new rgduplicadosStruct();
// ###############################

        
        



        









 



/**
 * [tMap_15 begin ] stop
 */



	
	/**
	 * [tOracleInput_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_18", false);
		start_Hash.put("tOracleInput_18", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_18";
	
	
		int tos_count_tOracleInput_18 = 0;
		
	


	
		    int nb_line_tOracleInput_18 = 0;
		    java.sql.Connection conn_tOracleInput_18 = null;
				conn_tOracleInput_18 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_18 = false;
				boolean isConnectionWrapped_tOracleInput_18 = !(conn_tOracleInput_18 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_18.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_18 = null;
                if (isConnectionWrapped_tOracleInput_18) {
					unwrappedOraConn_tOracleInput_18 = conn_tOracleInput_18.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_18 != null) {
                        isTimeZoneNull_tOracleInput_18 = (unwrappedOraConn_tOracleInput_18.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_18 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_18).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_18) {
					java.sql.Statement stmtGetTZ_tOracleInput_18 = conn_tOracleInput_18.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_18 = stmtGetTZ_tOracleInput_18.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_18 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_18.next()) {
						sessionTimezone_tOracleInput_18 = rsGetTZ_tOracleInput_18.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_18 && unwrappedOraConn_tOracleInput_18 != null) {
                        unwrappedOraConn_tOracleInput_18.setSessionTimeZone(sessionTimezone_tOracleInput_18);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_18).setSessionTimeZone(sessionTimezone_tOracleInput_18);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_18 = conn_tOracleInput_18.createStatement();

		    String dbquery_tOracleInput_18 = "SELECT \na.CodSsmp,\na.NGenerico,\na.Concentracion,\na.FFarmaceutica,\na.ViaAdmin,\na.NUso,\na.NAtencion,\na.ObsNUso,\n"
+"a.UsadoPre,\na.CodigoUnico,\na.EspecialidadMedica,\na.linea\nFROM MED_NUSOREGISTRO_TEMP a \nWHERE (NGENERICO, CONCENTRAC"
+"ION,FFarmaceutica,ViaAdmin) IN (\n    SELECT NGENERICO, CONCENTRACION,FFarmaceutica,ViaAdmin\n    FROM MED_NUSOREGISTRO_"
+"TEMP\n    GROUP BY  NGENERICO, CONCENTRACION,FFarmaceutica,ViaAdmin\n    HAVING COUNT(*) > 1\n)"
;
		    

		    globalMap.put("tOracleInput_18_QUERY",dbquery_tOracleInput_18);

		    java.sql.ResultSet rs_tOracleInput_18 = null;

		    try {
		    	rs_tOracleInput_18 = stmt_tOracleInput_18.executeQuery(dbquery_tOracleInput_18);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_18 = rs_tOracleInput_18.getMetaData();
		    	int colQtyInRs_tOracleInput_18 = rsmd_tOracleInput_18.getColumnCount();

		    String tmpContent_tOracleInput_18 = null;
		    
		    
		    while (rs_tOracleInput_18.next()) {
		        nb_line_tOracleInput_18++;
		        
							if(colQtyInRs_tOracleInput_18 < 1) {
								row42.CodSsmp = null;
							} else {
	                         		
        	row42.CodSsmp = routines.system.JDBCUtil.getString(rs_tOracleInput_18, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_18 < 2) {
								row42.NGenerico = null;
							} else {
	                         		
        	row42.NGenerico = routines.system.JDBCUtil.getString(rs_tOracleInput_18, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_18 < 3) {
								row42.Concentracion = null;
							} else {
	                         		
        	row42.Concentracion = routines.system.JDBCUtil.getString(rs_tOracleInput_18, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_18 < 4) {
								row42.FFarmaceutica = null;
							} else {
	                         		
        	row42.FFarmaceutica = routines.system.JDBCUtil.getString(rs_tOracleInput_18, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_18 < 5) {
								row42.ViaAdmin = null;
							} else {
	                         		
        	row42.ViaAdmin = routines.system.JDBCUtil.getString(rs_tOracleInput_18, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_18 < 6) {
								row42.NUso = null;
							} else {
	                         		
        	row42.NUso = routines.system.JDBCUtil.getString(rs_tOracleInput_18, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_18 < 7) {
								row42.NAtencion = null;
							} else {
	                         		
        	row42.NAtencion = routines.system.JDBCUtil.getString(rs_tOracleInput_18, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_18 < 8) {
								row42.ObsNUso = null;
							} else {
	                         		
        	row42.ObsNUso = routines.system.JDBCUtil.getString(rs_tOracleInput_18, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_18 < 9) {
								row42.UsadoPre = null;
							} else {
	                         		
        	row42.UsadoPre = routines.system.JDBCUtil.getString(rs_tOracleInput_18, 9, false);
		                    }
							if(colQtyInRs_tOracleInput_18 < 10) {
								row42.CodigoUnico = null;
							} else {
	                         		
        	row42.CodigoUnico = routines.system.JDBCUtil.getString(rs_tOracleInput_18, 10, false);
		                    }
							if(colQtyInRs_tOracleInput_18 < 11) {
								row42.EspecialidadMedica = null;
							} else {
	                         		
        	row42.EspecialidadMedica = routines.system.JDBCUtil.getString(rs_tOracleInput_18, 11, false);
		                    }
							if(colQtyInRs_tOracleInput_18 < 12) {
								row42.linea = null;
							} else {
		                          
					if(rs_tOracleInput_18.getObject(12) != null) {
						row42.linea = rs_tOracleInput_18.getLong(12);
					} else {
				
						row42.linea = null;
					}
		                    }
					




 



/**
 * [tOracleInput_18 begin ] stop
 */
	
	/**
	 * [tOracleInput_18 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

 


	tos_count_tOracleInput_18++;

/**
 * [tOracleInput_18 main ] stop
 */
	
	/**
	 * [tOracleInput_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

 



/**
 * [tOracleInput_18 process_data_begin ] stop
 */

	
	/**
	 * [tMap_15 main ] start
	 */

	

	
	
	currentComponent="tMap_15";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row42"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_15 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_15 = false;
		boolean mainRowRejected_tMap_15 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_15__Struct Var = Var__tMap_15;// ###############################
        // ###############################
        // # Output tables

rgduplicados = null;


// # Output table : 'rgduplicados'
rgduplicados_tmp.CODSSMP = row42.CodSsmp ;
rgduplicados_tmp.GENERICO = row42.NGenerico ;
rgduplicados_tmp.CONCENTRACION = row42.Concentracion ;
rgduplicados_tmp.FORMA_FARMACEUTICA = row42.FFarmaceutica ;
rgduplicados_tmp.VIAADMIN = row42.ViaAdmin ;
rgduplicados_tmp.NIVEL_USO = row42.NUso ;
rgduplicados_tmp.NATENCION = row42.NAtencion ;
rgduplicados_tmp.OBSERVACION = row42.ObsNUso ;
rgduplicados_tmp.USADOPRE = row42.UsadoPre ;
rgduplicados_tmp.CODIGO_UNICO = row42.CodigoUnico ;
rgduplicados_tmp.ESPECIALIDAD = row42.EspecialidadMedica;
rgduplicados_tmp.LINEA = row42.linea;
rgduplicados = rgduplicados_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_15 = false;










 


	tos_count_tMap_15++;

/**
 * [tMap_15 main ] stop
 */
	
	/**
	 * [tMap_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_15";
	
	

 



/**
 * [tMap_15 process_data_begin ] stop
 */
// Start of branch "rgduplicados"
if(rgduplicados != null) { 



	
	/**
	 * [tJavaRow_14 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_14";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"rgduplicados"
						
						);
					}
					

    //Code generate according to input schema and output schema
row49.CODSSMP = rgduplicados.CODSSMP;
row49.GENERICO = rgduplicados.GENERICO;
row49.CONCENTRACION = rgduplicados.CONCENTRACION;
row49.FORMA_FARMACEUTICA = rgduplicados.FORMA_FARMACEUTICA;
row49.VIAADMIN = rgduplicados.VIAADMIN;
row49.NIVEL_USO = rgduplicados.NIVEL_USO;
row49.NATENCION = rgduplicados.NATENCION;
row49.OBSERVACION = rgduplicados.OBSERVACION;
row49.USADOPRE = rgduplicados.USADOPRE;
row49.CODIGO_UNICO = rgduplicados.CODIGO_UNICO;
row49.ESPECIALIDAD = rgduplicados.ESPECIALIDAD;
row49.LINEA = rgduplicados.LINEA;


System.out.println("Registros duplicados");
System.out.println(rgduplicados.LINEA);
context.ErrorLog +=1;

    nb_line_tJavaRow_14++;   

 


	tos_count_tJavaRow_14++;

/**
 * [tJavaRow_14 main ] stop
 */
	
	/**
	 * [tJavaRow_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_14";
	
	

 



/**
 * [tJavaRow_14 process_data_begin ] stop
 */

	
	/**
	 * [tMap_13 main ] start
	 */

	

	
	
	currentComponent="tMap_13";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row49"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_13 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_13 = false;
		boolean mainRowRejected_tMap_13 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_13__Struct Var = Var__tMap_13;// ###############################
        // ###############################
        // # Output tables

error_duplicados = null;


// # Output table : 'error_duplicados'
error_duplicados_tmp.Mensaje = "El campo del medicamento con concentración, forma farmaceutica y via de administración se encuentra duplicado" ;
error_duplicados_tmp.Linea =  row49.LINEA;
error_duplicados_tmp.CODIGO_UNICO = row49.CODIGO_UNICO ;
error_duplicados = error_duplicados_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_13 = false;










 


	tos_count_tMap_13++;

/**
 * [tMap_13 main ] stop
 */
	
	/**
	 * [tMap_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_13";
	
	

 



/**
 * [tMap_13 process_data_begin ] stop
 */
// Start of branch "error_duplicados"
if(error_duplicados != null) { 



	
	/**
	 * [tOracleOutput_7 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"error_duplicados"
						
						);
					}
					



        whetherReject_tOracleOutput_7 = false;
                        if(error_duplicados.Mensaje == null) {
pstmt_tOracleOutput_7.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_7.setString(1, error_duplicados.Mensaje);
}

                        if(error_duplicados.Linea == null) {
pstmt_tOracleOutput_7.setNull(2, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_7.setLong(2, error_duplicados.Linea);
}

                        if(error_duplicados.CODIGO_UNICO == null) {
pstmt_tOracleOutput_7.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_7.setString(3, error_duplicados.CODIGO_UNICO);
}

                try {
                    nb_line_tOracleOutput_7++;
                    int processedCount_tOracleOutput_7 = pstmt_tOracleOutput_7.executeUpdate();
                    insertedCount_tOracleOutput_7 += processedCount_tOracleOutput_7;
                    rowsToCommitCount_tOracleOutput_7 += processedCount_tOracleOutput_7;
                } catch(java.lang.Exception e_tOracleOutput_7) {
globalMap.put("tOracleOutput_7_ERROR_MESSAGE",e_tOracleOutput_7.getMessage());
                    whetherReject_tOracleOutput_7 = true;
                            System.err.print(e_tOracleOutput_7.getMessage());
                }

 


	tos_count_tOracleOutput_7++;

/**
 * [tOracleOutput_7 main ] stop
 */
	
	/**
	 * [tOracleOutput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_7";
	
	

 



/**
 * [tOracleOutput_7 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_7";
	
	

 



/**
 * [tOracleOutput_7 process_data_end ] stop
 */

} // End of branch "error_duplicados"




	
	/**
	 * [tMap_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_13";
	
	

 



/**
 * [tMap_13 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_14";
	
	

 



/**
 * [tJavaRow_14 process_data_end ] stop
 */

} // End of branch "rgduplicados"




	
	/**
	 * [tMap_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_15";
	
	

 



/**
 * [tMap_15 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

 



/**
 * [tOracleInput_18 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_18 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

}
}finally{
	if (rs_tOracleInput_18 != null) {
		rs_tOracleInput_18.close();
	}
	if (stmt_tOracleInput_18 != null) {
		stmt_tOracleInput_18.close();
	}
}

globalMap.put("tOracleInput_18_NB_LINE",nb_line_tOracleInput_18);
 

ok_Hash.put("tOracleInput_18", true);
end_Hash.put("tOracleInput_18", System.currentTimeMillis());




/**
 * [tOracleInput_18 end ] stop
 */

	
	/**
	 * [tMap_15 end ] start
	 */

	

	
	
	currentComponent="tMap_15";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row42");
			  	}
			  	
 

ok_Hash.put("tMap_15", true);
end_Hash.put("tMap_15", System.currentTimeMillis());




/**
 * [tMap_15 end ] stop
 */

	
	/**
	 * [tJavaRow_14 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_14";
	
	

globalMap.put("tJavaRow_14_NB_LINE",nb_line_tJavaRow_14);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"rgduplicados");
			  	}
			  	
 

ok_Hash.put("tJavaRow_14", true);
end_Hash.put("tJavaRow_14", System.currentTimeMillis());




/**
 * [tJavaRow_14 end ] stop
 */

	
	/**
	 * [tMap_13 end ] start
	 */

	

	
	
	currentComponent="tMap_13";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row49");
			  	}
			  	
 

ok_Hash.put("tMap_13", true);
end_Hash.put("tMap_13", System.currentTimeMillis());




/**
 * [tMap_13 end ] stop
 */

	
	/**
	 * [tOracleOutput_7 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_7";
	
	
	



	
        if(pstmt_tOracleOutput_7 != null) {
			
				pstmt_tOracleOutput_7.close();
				resourceMap.remove("pstmt_tOracleOutput_7");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_7", true);

	
	nb_line_deleted_tOracleOutput_7=nb_line_deleted_tOracleOutput_7+ deletedCount_tOracleOutput_7;
	nb_line_update_tOracleOutput_7=nb_line_update_tOracleOutput_7 + updatedCount_tOracleOutput_7;
	nb_line_inserted_tOracleOutput_7=nb_line_inserted_tOracleOutput_7 + insertedCount_tOracleOutput_7;
	nb_line_rejected_tOracleOutput_7=nb_line_rejected_tOracleOutput_7 + rejectedCount_tOracleOutput_7;
	
        globalMap.put("tOracleOutput_7_NB_LINE",nb_line_tOracleOutput_7);
        globalMap.put("tOracleOutput_7_NB_LINE_UPDATED",nb_line_update_tOracleOutput_7);
        globalMap.put("tOracleOutput_7_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_7);
        globalMap.put("tOracleOutput_7_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_7);
        globalMap.put("tOracleOutput_7_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_7);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"error_duplicados");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_7", true);
end_Hash.put("tOracleOutput_7", System.currentTimeMillis());




/**
 * [tOracleOutput_7 end ] stop
 */












				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_18:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk11", 0, "ok");
								} 
							
							tOracleInput_13Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_18 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

 



/**
 * [tOracleInput_18 finally ] stop
 */

	
	/**
	 * [tMap_15 finally ] start
	 */

	

	
	
	currentComponent="tMap_15";
	
	

 



/**
 * [tMap_15 finally ] stop
 */

	
	/**
	 * [tJavaRow_14 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_14";
	
	

 



/**
 * [tJavaRow_14 finally ] stop
 */

	
	/**
	 * [tMap_13 finally ] start
	 */

	

	
	
	currentComponent="tMap_13";
	
	

 



/**
 * [tMap_13 finally ] stop
 */

	
	/**
	 * [tOracleOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_7";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_7") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_7 = null;
                if ((pstmtToClose_tOracleOutput_7 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_7")) != null) {
                    pstmtToClose_tOracleOutput_7.close();
                }
    }
 



/**
 * [tOracleOutput_7 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_18_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String CodSsmp;

				public String getCodSsmp () {
					return this.CodSsmp;
				}

				public Boolean CodSsmpIsNullable(){
				    return true;
				}
				public Boolean CodSsmpIsKey(){
				    return false;
				}
				public Integer CodSsmpLength(){
				    return 15;
				}
				public Integer CodSsmpPrecision(){
				    return 0;
				}
				public String CodSsmpDefault(){
				
					return null;
				
				}
				public String CodSsmpComment(){
				
				    return "CODIGO SSMP";
				
				}
				public String CodSsmpPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CodSsmpOriginalDbColumnName(){
				
					return "CodSsmp";
				
				}

				
			    public String NGenerico;

				public String getNGenerico () {
					return this.NGenerico;
				}

				public Boolean NGenericoIsNullable(){
				    return true;
				}
				public Boolean NGenericoIsKey(){
				    return false;
				}
				public Integer NGenericoLength(){
				    return 200;
				}
				public Integer NGenericoPrecision(){
				    return 0;
				}
				public String NGenericoDefault(){
				
					return null;
				
				}
				public String NGenericoComment(){
				
				    return "NOMBRE GENERICO";
				
				}
				public String NGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NGenericoOriginalDbColumnName(){
				
					return "NGenerico";
				
				}

				
			    public String Concentracion;

				public String getConcentracion () {
					return this.Concentracion;
				}

				public Boolean ConcentracionIsNullable(){
				    return true;
				}
				public Boolean ConcentracionIsKey(){
				    return false;
				}
				public Integer ConcentracionLength(){
				    return 50;
				}
				public Integer ConcentracionPrecision(){
				    return 0;
				}
				public String ConcentracionDefault(){
				
					return null;
				
				}
				public String ConcentracionComment(){
				
				    return "CONCENTRACION";
				
				}
				public String ConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ConcentracionOriginalDbColumnName(){
				
					return "Concentracion";
				
				}

				
			    public String FFarmaceutica;

				public String getFFarmaceutica () {
					return this.FFarmaceutica;
				}

				public Boolean FFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean FFarmaceuticaIsKey(){
				    return false;
				}
				public Integer FFarmaceuticaLength(){
				    return 500;
				}
				public Integer FFarmaceuticaPrecision(){
				    return 0;
				}
				public String FFarmaceuticaDefault(){
				
					return null;
				
				}
				public String FFarmaceuticaComment(){
				
				    return "FORMA FARMACEUTICA";
				
				}
				public String FFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FFarmaceuticaOriginalDbColumnName(){
				
					return "FFarmaceutica";
				
				}

				
			    public String ViaAdmin;

				public String getViaAdmin () {
					return this.ViaAdmin;
				}

				public Boolean ViaAdminIsNullable(){
				    return true;
				}
				public Boolean ViaAdminIsKey(){
				    return false;
				}
				public Integer ViaAdminLength(){
				    return 200;
				}
				public Integer ViaAdminPrecision(){
				    return 0;
				}
				public String ViaAdminDefault(){
				
					return null;
				
				}
				public String ViaAdminComment(){
				
				    return "VIA ADMINISTRACION";
				
				}
				public String ViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ViaAdminOriginalDbColumnName(){
				
					return "ViaAdmin";
				
				}

				
			    public String NUso;

				public String getNUso () {
					return this.NUso;
				}

				public Boolean NUsoIsNullable(){
				    return true;
				}
				public Boolean NUsoIsKey(){
				    return false;
				}
				public Integer NUsoLength(){
				    return 50;
				}
				public Integer NUsoPrecision(){
				    return 0;
				}
				public String NUsoDefault(){
				
					return null;
				
				}
				public String NUsoComment(){
				
				    return "NIVEL USO";
				
				}
				public String NUsoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NUsoOriginalDbColumnName(){
				
					return "NUso";
				
				}

				
			    public String NAtencion;

				public String getNAtencion () {
					return this.NAtencion;
				}

				public Boolean NAtencionIsNullable(){
				    return true;
				}
				public Boolean NAtencionIsKey(){
				    return false;
				}
				public Integer NAtencionLength(){
				    return 50;
				}
				public Integer NAtencionPrecision(){
				    return 0;
				}
				public String NAtencionDefault(){
				
					return null;
				
				}
				public String NAtencionComment(){
				
				    return "NIVEL ATENCION";
				
				}
				public String NAtencionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NAtencionOriginalDbColumnName(){
				
					return "NAtencion";
				
				}

				
			    public String ObsNUso;

				public String getObsNUso () {
					return this.ObsNUso;
				}

				public Boolean ObsNUsoIsNullable(){
				    return true;
				}
				public Boolean ObsNUsoIsKey(){
				    return false;
				}
				public Integer ObsNUsoLength(){
				    return 500;
				}
				public Integer ObsNUsoPrecision(){
				    return 0;
				}
				public String ObsNUsoDefault(){
				
					return null;
				
				}
				public String ObsNUsoComment(){
				
				    return "OBSERVACION PARA EL NIVEL DE USO";
				
				}
				public String ObsNUsoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ObsNUsoOriginalDbColumnName(){
				
					return "ObsNUso";
				
				}

				
			    public String UsadoPre;

				public String getUsadoPre () {
					return this.UsadoPre;
				}

				public Boolean UsadoPreIsNullable(){
				    return true;
				}
				public Boolean UsadoPreIsKey(){
				    return false;
				}
				public Integer UsadoPreLength(){
				    return 2;
				}
				public Integer UsadoPrePrecision(){
				    return 0;
				}
				public String UsadoPreDefault(){
				
					return null;
				
				}
				public String UsadoPreComment(){
				
				    return "USADO PARA PREPARACIONES";
				
				}
				public String UsadoPrePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UsadoPreOriginalDbColumnName(){
				
					return "UsadoPre";
				
				}

				
			    public String CodigoUnico;

				public String getCodigoUnico () {
					return this.CodigoUnico;
				}

				public Boolean CodigoUnicoIsNullable(){
				    return true;
				}
				public Boolean CodigoUnicoIsKey(){
				    return false;
				}
				public Integer CodigoUnicoLength(){
				    return 150;
				}
				public Integer CodigoUnicoPrecision(){
				    return 0;
				}
				public String CodigoUnicoDefault(){
				
					return null;
				
				}
				public String CodigoUnicoComment(){
				
				    return "CODIGO UNICO";
				
				}
				public String CodigoUnicoPattern(){
				
					return "";
				
				}
				public String CodigoUnicoOriginalDbColumnName(){
				
					return "CodigoUnico";
				
				}

				
			    public String EspecialidadMedica;

				public String getEspecialidadMedica () {
					return this.EspecialidadMedica;
				}

				public Boolean EspecialidadMedicaIsNullable(){
				    return true;
				}
				public Boolean EspecialidadMedicaIsKey(){
				    return false;
				}
				public Integer EspecialidadMedicaLength(){
				    return 150;
				}
				public Integer EspecialidadMedicaPrecision(){
				    return 0;
				}
				public String EspecialidadMedicaDefault(){
				
					return null;
				
				}
				public String EspecialidadMedicaComment(){
				
				    return "ESPECIALIDAD MEDICA";
				
				}
				public String EspecialidadMedicaPattern(){
				
					return "";
				
				}
				public String EspecialidadMedicaOriginalDbColumnName(){
				
					return "EspecialidadMedica";
				
				}

				
			    public String nuevoNuso;

				public String getNuevoNuso () {
					return this.nuevoNuso;
				}

				public Boolean nuevoNusoIsNullable(){
				    return true;
				}
				public Boolean nuevoNusoIsKey(){
				    return false;
				}
				public Integer nuevoNusoLength(){
				    return 20;
				}
				public Integer nuevoNusoPrecision(){
				    return null;
				}
				public String nuevoNusoDefault(){
				
					return null;
				
				}
				public String nuevoNusoComment(){
				
				    return "";
				
				}
				public String nuevoNusoPattern(){
				
					return "";
				
				}
				public String nuevoNusoOriginalDbColumnName(){
				
					return "nuevoNuso";
				
				}

				
			    public String nuevaEspecialidad;

				public String getNuevaEspecialidad () {
					return this.nuevaEspecialidad;
				}

				public Boolean nuevaEspecialidadIsNullable(){
				    return true;
				}
				public Boolean nuevaEspecialidadIsKey(){
				    return false;
				}
				public Integer nuevaEspecialidadLength(){
				    return 150;
				}
				public Integer nuevaEspecialidadPrecision(){
				    return null;
				}
				public String nuevaEspecialidadDefault(){
				
					return null;
				
				}
				public String nuevaEspecialidadComment(){
				
				    return "";
				
				}
				public String nuevaEspecialidadPattern(){
				
					return "";
				
				}
				public String nuevaEspecialidadOriginalDbColumnName(){
				
					return "nuevaEspecialidad";
				
				}

				
			    public String nuevaAdmin;

				public String getNuevaAdmin () {
					return this.nuevaAdmin;
				}

				public Boolean nuevaAdminIsNullable(){
				    return true;
				}
				public Boolean nuevaAdminIsKey(){
				    return false;
				}
				public Integer nuevaAdminLength(){
				    return 100;
				}
				public Integer nuevaAdminPrecision(){
				    return null;
				}
				public String nuevaAdminDefault(){
				
					return null;
				
				}
				public String nuevaAdminComment(){
				
				    return "";
				
				}
				public String nuevaAdminPattern(){
				
					return "";
				
				}
				public String nuevaAdminOriginalDbColumnName(){
				
					return "nuevaAdmin";
				
				}

				
			    public String nuevaForma;

				public String getNuevaForma () {
					return this.nuevaForma;
				}

				public Boolean nuevaFormaIsNullable(){
				    return true;
				}
				public Boolean nuevaFormaIsKey(){
				    return false;
				}
				public Integer nuevaFormaLength(){
				    return 200;
				}
				public Integer nuevaFormaPrecision(){
				    return null;
				}
				public String nuevaFormaDefault(){
				
					return null;
				
				}
				public String nuevaFormaComment(){
				
				    return "";
				
				}
				public String nuevaFormaPattern(){
				
					return "";
				
				}
				public String nuevaFormaOriginalDbColumnName(){
				
					return "nuevaForma";
				
				}

				
			    public Long linea;

				public Long getLinea () {
					return this.linea;
				}

				public Boolean lineaIsNullable(){
				    return true;
				}
				public Boolean lineaIsKey(){
				    return false;
				}
				public Integer lineaLength(){
				    return null;
				}
				public Integer lineaPrecision(){
				    return null;
				}
				public String lineaDefault(){
				
					return null;
				
				}
				public String lineaComment(){
				
				    return "";
				
				}
				public String lineaPattern(){
				
					return "";
				
				}
				public String lineaOriginalDbColumnName(){
				
					return "linea";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CodSsmp = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.FFarmaceutica = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.NUso = readString(dis);
					
					this.NAtencion = readString(dis);
					
					this.ObsNUso = readString(dis);
					
					this.UsadoPre = readString(dis);
					
					this.CodigoUnico = readString(dis);
					
					this.EspecialidadMedica = readString(dis);
					
					this.nuevoNuso = readString(dis);
					
					this.nuevaEspecialidad = readString(dis);
					
					this.nuevaAdmin = readString(dis);
					
					this.nuevaForma = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.linea = null;
           				} else {
           			    	this.linea = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CodSsmp = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.FFarmaceutica = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.NUso = readString(dis);
					
					this.NAtencion = readString(dis);
					
					this.ObsNUso = readString(dis);
					
					this.UsadoPre = readString(dis);
					
					this.CodigoUnico = readString(dis);
					
					this.EspecialidadMedica = readString(dis);
					
					this.nuevoNuso = readString(dis);
					
					this.nuevaEspecialidad = readString(dis);
					
					this.nuevaAdmin = readString(dis);
					
					this.nuevaForma = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.linea = null;
           				} else {
           			    	this.linea = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CodSsmp,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.FFarmaceutica,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.NUso,dos);
					
					// String
				
						writeString(this.NAtencion,dos);
					
					// String
				
						writeString(this.ObsNUso,dos);
					
					// String
				
						writeString(this.UsadoPre,dos);
					
					// String
				
						writeString(this.CodigoUnico,dos);
					
					// String
				
						writeString(this.EspecialidadMedica,dos);
					
					// String
				
						writeString(this.nuevoNuso,dos);
					
					// String
				
						writeString(this.nuevaEspecialidad,dos);
					
					// String
				
						writeString(this.nuevaAdmin,dos);
					
					// String
				
						writeString(this.nuevaForma,dos);
					
					// Long
				
						if(this.linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.linea);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CodSsmp,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.FFarmaceutica,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.NUso,dos);
					
					// String
				
						writeString(this.NAtencion,dos);
					
					// String
				
						writeString(this.ObsNUso,dos);
					
					// String
				
						writeString(this.UsadoPre,dos);
					
					// String
				
						writeString(this.CodigoUnico,dos);
					
					// String
				
						writeString(this.EspecialidadMedica,dos);
					
					// String
				
						writeString(this.nuevoNuso,dos);
					
					// String
				
						writeString(this.nuevaEspecialidad,dos);
					
					// String
				
						writeString(this.nuevaAdmin,dos);
					
					// String
				
						writeString(this.nuevaForma,dos);
					
					// Long
				
						if(this.linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.linea);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CodSsmp="+CodSsmp);
		sb.append(",NGenerico="+NGenerico);
		sb.append(",Concentracion="+Concentracion);
		sb.append(",FFarmaceutica="+FFarmaceutica);
		sb.append(",ViaAdmin="+ViaAdmin);
		sb.append(",NUso="+NUso);
		sb.append(",NAtencion="+NAtencion);
		sb.append(",ObsNUso="+ObsNUso);
		sb.append(",UsadoPre="+UsadoPre);
		sb.append(",CodigoUnico="+CodigoUnico);
		sb.append(",EspecialidadMedica="+EspecialidadMedica);
		sb.append(",nuevoNuso="+nuevoNuso);
		sb.append(",nuevaEspecialidad="+nuevaEspecialidad);
		sb.append(",nuevaAdmin="+nuevaAdmin);
		sb.append(",nuevaForma="+nuevaForma);
		sb.append(",linea="+String.valueOf(linea));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();




	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tHashOutput_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row8Struct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_CargaMoleculasAcuerdo_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
			    if(mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null){
	      		    mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row8Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }else{
			    	tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }
			}
        int nb_line_tHashOutput_1 = 0;

 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_13", false);
		start_Hash.put("tOracleInput_13", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_13";
	
	
		int tos_count_tOracleInput_13 = 0;
		
	


	
		    int nb_line_tOracleInput_13 = 0;
		    java.sql.Connection conn_tOracleInput_13 = null;
				conn_tOracleInput_13 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_13 = false;
				boolean isConnectionWrapped_tOracleInput_13 = !(conn_tOracleInput_13 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_13.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_13 = null;
                if (isConnectionWrapped_tOracleInput_13) {
					unwrappedOraConn_tOracleInput_13 = conn_tOracleInput_13.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_13 != null) {
                        isTimeZoneNull_tOracleInput_13 = (unwrappedOraConn_tOracleInput_13.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_13 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_13).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_13) {
					java.sql.Statement stmtGetTZ_tOracleInput_13 = conn_tOracleInput_13.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_13 = stmtGetTZ_tOracleInput_13.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_13 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_13.next()) {
						sessionTimezone_tOracleInput_13 = rsGetTZ_tOracleInput_13.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_13 && unwrappedOraConn_tOracleInput_13 != null) {
                        unwrappedOraConn_tOracleInput_13.setSessionTimeZone(sessionTimezone_tOracleInput_13);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_13).setSessionTimeZone(sessionTimezone_tOracleInput_13);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_13 = conn_tOracleInput_13.createStatement();

		    String dbquery_tOracleInput_13 = "SELECT \na.CodSsmp,\nUPPER(TRIM(MED.MayusculasSinAcentos(a.NGenerico))),\nUPPER(TRIM(MED.MayusculasSinAcentos(a.Concent"
+"racion))),\na.FFarmaceutica,\na.ViaAdmin,\na.NUso,\na.NAtencion,\na.ObsNUso,\na.UsadoPre,\na.CodigoUnico,\na.Especialida"
+"dMedica,\nUPPER(TRIM(MED.MayusculasSinAcentos(b.SIGLA_USO))) AS nuevoNuso,\nUPPER(TRIM(MED.MayusculasSinAcentos(c.SIGLA_"
+"ESPECIALIDAD))) AS nuevaEspecialidad, \n UPPER(TRIM(MED.MayusculasSinAcentos(d.SIGLA_ADMIN))) as nuevaAdmin, \n UPPER(TR"
+"IM(MED.MayusculasSinAcentos(e.SIGLA_FORMA))) AS nuevaForma,\na.linea\nFROM MED_NUSOREGISTRO_TEMP a \nINNER JOIN MED_SIGL"
+"A_USO_TEMP b on b.CODIGO_UNICO = a.codigounico\nINNER JOIN MED_SIGLA_ESPECIALIDAD_TEMP c on c.CODIGO_UNICO = a.codigouni"
+"co\nINNER JOIN MED_SIGLA_ADMIN_TEMP d on d.CODIGO_UNICO = a.codigounico\nINNER JOIN MED_SIGLA_FORMA_TEMP e on e.CODIGO_U"
+"NICO = a.codigounico\nWHERE (NGENERICO, CONCENTRACION,FFarmaceutica,ViaAdmin) NOT IN (\n    SELECT  NGENERICO, CONCENTRA"
+"CION,FFarmaceutica,ViaAdmin\n    FROM MED_NUSOREGISTRO_TEMP\n    GROUP BY  NGENERICO, CONCENTRACION,FFarmaceutica,ViaAdm"
+"in\n    HAVING COUNT(*) > 1)"
;
		    

		    globalMap.put("tOracleInput_13_QUERY",dbquery_tOracleInput_13);

		    java.sql.ResultSet rs_tOracleInput_13 = null;

		    try {
		    	rs_tOracleInput_13 = stmt_tOracleInput_13.executeQuery(dbquery_tOracleInput_13);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_13 = rs_tOracleInput_13.getMetaData();
		    	int colQtyInRs_tOracleInput_13 = rsmd_tOracleInput_13.getColumnCount();

		    String tmpContent_tOracleInput_13 = null;
		    
		    
		    while (rs_tOracleInput_13.next()) {
		        nb_line_tOracleInput_13++;
		        
							if(colQtyInRs_tOracleInput_13 < 1) {
								row8.CodSsmp = null;
							} else {
	                         		
        	row8.CodSsmp = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 2) {
								row8.NGenerico = null;
							} else {
	                         		
        	row8.NGenerico = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 3) {
								row8.Concentracion = null;
							} else {
	                         		
        	row8.Concentracion = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 4) {
								row8.FFarmaceutica = null;
							} else {
	                         		
        	row8.FFarmaceutica = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 5) {
								row8.ViaAdmin = null;
							} else {
	                         		
        	row8.ViaAdmin = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 6) {
								row8.NUso = null;
							} else {
	                         		
        	row8.NUso = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 7) {
								row8.NAtencion = null;
							} else {
	                         		
        	row8.NAtencion = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 8) {
								row8.ObsNUso = null;
							} else {
	                         		
        	row8.ObsNUso = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 9) {
								row8.UsadoPre = null;
							} else {
	                         		
        	row8.UsadoPre = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 9, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 10) {
								row8.CodigoUnico = null;
							} else {
	                         		
        	row8.CodigoUnico = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 10, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 11) {
								row8.EspecialidadMedica = null;
							} else {
	                         		
        	row8.EspecialidadMedica = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 11, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 12) {
								row8.nuevoNuso = null;
							} else {
	                         		
        	row8.nuevoNuso = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 12, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 13) {
								row8.nuevaEspecialidad = null;
							} else {
	                         		
        	row8.nuevaEspecialidad = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 13, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 14) {
								row8.nuevaAdmin = null;
							} else {
	                         		
        	row8.nuevaAdmin = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 14, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 15) {
								row8.nuevaForma = null;
							} else {
	                         		
        	row8.nuevaForma = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 15, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 16) {
								row8.linea = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(16) != null) {
						row8.linea = rs_tOracleInput_13.getLong(16);
					} else {
				
						row8.linea = null;
					}
		                    }
					




 



/**
 * [tOracleInput_13 begin ] stop
 */
	
	/**
	 * [tOracleInput_13 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 


	tos_count_tOracleInput_13++;

/**
 * [tOracleInput_13 main ] stop
 */
	
	/**
	 * [tOracleInput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					



    
		row8Struct oneRow_tHashOutput_1 = new row8Struct();
				
					oneRow_tHashOutput_1.CodSsmp = row8.CodSsmp;
					oneRow_tHashOutput_1.NGenerico = row8.NGenerico;
					oneRow_tHashOutput_1.Concentracion = row8.Concentracion;
					oneRow_tHashOutput_1.FFarmaceutica = row8.FFarmaceutica;
					oneRow_tHashOutput_1.ViaAdmin = row8.ViaAdmin;
					oneRow_tHashOutput_1.NUso = row8.NUso;
					oneRow_tHashOutput_1.NAtencion = row8.NAtencion;
					oneRow_tHashOutput_1.ObsNUso = row8.ObsNUso;
					oneRow_tHashOutput_1.UsadoPre = row8.UsadoPre;
					oneRow_tHashOutput_1.CodigoUnico = row8.CodigoUnico;
					oneRow_tHashOutput_1.EspecialidadMedica = row8.EspecialidadMedica;
					oneRow_tHashOutput_1.nuevoNuso = row8.nuevoNuso;
					oneRow_tHashOutput_1.nuevaEspecialidad = row8.nuevaEspecialidad;
					oneRow_tHashOutput_1.nuevaAdmin = row8.nuevaAdmin;
					oneRow_tHashOutput_1.nuevaForma = row8.nuevaForma;
					oneRow_tHashOutput_1.linea = row8.linea;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;

 


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_13 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

}
}finally{
	if (rs_tOracleInput_13 != null) {
		rs_tOracleInput_13.close();
	}
	if (stmt_tOracleInput_13 != null) {
		stmt_tOracleInput_13.close();
	}
}

globalMap.put("tOracleInput_13_NB_LINE",nb_line_tOracleInput_13);
 

ok_Hash.put("tOracleInput_13", true);
end_Hash.put("tOracleInput_13", System.currentTimeMillis());




/**
 * [tOracleInput_13 end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());




/**
 * [tHashOutput_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_13:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk12", 0, "ok");
								} 
							
							tHashInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_13 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_13_SUBPROCESS_STATE", 1);
	}
	


public static class row64Struct implements routines.system.IPersistableRow<row64Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String Mensaje;

				public String getMensaje () {
					return this.Mensaje;
				}

				public Boolean MensajeIsNullable(){
				    return true;
				}
				public Boolean MensajeIsKey(){
				    return false;
				}
				public Integer MensajeLength(){
				    return null;
				}
				public Integer MensajePrecision(){
				    return null;
				}
				public String MensajeDefault(){
				
					return null;
				
				}
				public String MensajeComment(){
				
				    return "";
				
				}
				public String MensajePattern(){
				
					return "";
				
				}
				public String MensajeOriginalDbColumnName(){
				
					return "Mensaje";
				
				}

				
			    public Long Linea;

				public Long getLinea () {
					return this.Linea;
				}

				public Boolean LineaIsNullable(){
				    return true;
				}
				public Boolean LineaIsKey(){
				    return false;
				}
				public Integer LineaLength(){
				    return null;
				}
				public Integer LineaPrecision(){
				    return null;
				}
				public String LineaDefault(){
				
					return null;
				
				}
				public String LineaComment(){
				
				    return "";
				
				}
				public String LineaPattern(){
				
					return "";
				
				}
				public String LineaOriginalDbColumnName(){
				
					return "Linea";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return null;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Mensaje="+Mensaje);
		sb.append(",Linea="+String.valueOf(Linea));
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row64Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row63Struct implements routines.system.IPersistableRow<row63Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String Mensaje;

				public String getMensaje () {
					return this.Mensaje;
				}

				public Boolean MensajeIsNullable(){
				    return true;
				}
				public Boolean MensajeIsKey(){
				    return false;
				}
				public Integer MensajeLength(){
				    return null;
				}
				public Integer MensajePrecision(){
				    return null;
				}
				public String MensajeDefault(){
				
					return null;
				
				}
				public String MensajeComment(){
				
				    return "";
				
				}
				public String MensajePattern(){
				
					return "";
				
				}
				public String MensajeOriginalDbColumnName(){
				
					return "Mensaje";
				
				}

				
			    public Long Linea;

				public Long getLinea () {
					return this.Linea;
				}

				public Boolean LineaIsNullable(){
				    return true;
				}
				public Boolean LineaIsKey(){
				    return false;
				}
				public Integer LineaLength(){
				    return null;
				}
				public Integer LineaPrecision(){
				    return null;
				}
				public String LineaDefault(){
				
					return null;
				
				}
				public String LineaComment(){
				
				    return "";
				
				}
				public String LineaPattern(){
				
					return "";
				
				}
				public String LineaOriginalDbColumnName(){
				
					return "Linea";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return null;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Mensaje="+Mensaje);
		sb.append(",Linea="+String.valueOf(Linea));
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row63Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String Mensaje;

				public String getMensaje () {
					return this.Mensaje;
				}

				public Boolean MensajeIsNullable(){
				    return true;
				}
				public Boolean MensajeIsKey(){
				    return false;
				}
				public Integer MensajeLength(){
				    return null;
				}
				public Integer MensajePrecision(){
				    return null;
				}
				public String MensajeDefault(){
				
					return null;
				
				}
				public String MensajeComment(){
				
				    return "";
				
				}
				public String MensajePattern(){
				
					return "";
				
				}
				public String MensajeOriginalDbColumnName(){
				
					return "Mensaje";
				
				}

				
			    public Long Linea;

				public Long getLinea () {
					return this.Linea;
				}

				public Boolean LineaIsNullable(){
				    return true;
				}
				public Boolean LineaIsKey(){
				    return false;
				}
				public Integer LineaLength(){
				    return null;
				}
				public Integer LineaPrecision(){
				    return null;
				}
				public String LineaDefault(){
				
					return null;
				
				}
				public String LineaComment(){
				
				    return "";
				
				}
				public String LineaPattern(){
				
					return "";
				
				}
				public String LineaOriginalDbColumnName(){
				
					return "Linea";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return null;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Mensaje="+Mensaje);
		sb.append(",Linea="+String.valueOf(Linea));
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class validacionNAtencionStruct implements routines.system.IPersistableRow<validacionNAtencionStruct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String Mensaje;

				public String getMensaje () {
					return this.Mensaje;
				}

				public Boolean MensajeIsNullable(){
				    return true;
				}
				public Boolean MensajeIsKey(){
				    return false;
				}
				public Integer MensajeLength(){
				    return 500;
				}
				public Integer MensajePrecision(){
				    return null;
				}
				public String MensajeDefault(){
				
					return null;
				
				}
				public String MensajeComment(){
				
				    return "";
				
				}
				public String MensajePattern(){
				
					return "";
				
				}
				public String MensajeOriginalDbColumnName(){
				
					return "Mensaje";
				
				}

				
			    public Long Linea;

				public Long getLinea () {
					return this.Linea;
				}

				public Boolean LineaIsNullable(){
				    return true;
				}
				public Boolean LineaIsKey(){
				    return false;
				}
				public Integer LineaLength(){
				    return null;
				}
				public Integer LineaPrecision(){
				    return null;
				}
				public String LineaDefault(){
				
					return null;
				
				}
				public String LineaComment(){
				
				    return "";
				
				}
				public String LineaPattern(){
				
					return "";
				
				}
				public String LineaOriginalDbColumnName(){
				
					return "Linea";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return null;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Mensaje="+Mensaje);
		sb.append(",Linea="+String.valueOf(Linea));
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(validacionNAtencionStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row53Struct implements routines.system.IPersistableRow<row53Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String CodSsmp;

				public String getCodSsmp () {
					return this.CodSsmp;
				}

				public Boolean CodSsmpIsNullable(){
				    return true;
				}
				public Boolean CodSsmpIsKey(){
				    return false;
				}
				public Integer CodSsmpLength(){
				    return 15;
				}
				public Integer CodSsmpPrecision(){
				    return 0;
				}
				public String CodSsmpDefault(){
				
					return null;
				
				}
				public String CodSsmpComment(){
				
				    return "CODIGO SSMP";
				
				}
				public String CodSsmpPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CodSsmpOriginalDbColumnName(){
				
					return "CodSsmp";
				
				}

				
			    public String NGenerico;

				public String getNGenerico () {
					return this.NGenerico;
				}

				public Boolean NGenericoIsNullable(){
				    return true;
				}
				public Boolean NGenericoIsKey(){
				    return false;
				}
				public Integer NGenericoLength(){
				    return 200;
				}
				public Integer NGenericoPrecision(){
				    return 0;
				}
				public String NGenericoDefault(){
				
					return null;
				
				}
				public String NGenericoComment(){
				
				    return "NOMBRE GENERICO";
				
				}
				public String NGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NGenericoOriginalDbColumnName(){
				
					return "NGenerico";
				
				}

				
			    public String Concentracion;

				public String getConcentracion () {
					return this.Concentracion;
				}

				public Boolean ConcentracionIsNullable(){
				    return true;
				}
				public Boolean ConcentracionIsKey(){
				    return false;
				}
				public Integer ConcentracionLength(){
				    return 50;
				}
				public Integer ConcentracionPrecision(){
				    return 0;
				}
				public String ConcentracionDefault(){
				
					return null;
				
				}
				public String ConcentracionComment(){
				
				    return "CONCENTRACION";
				
				}
				public String ConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ConcentracionOriginalDbColumnName(){
				
					return "Concentracion";
				
				}

				
			    public String FFarmaceutica;

				public String getFFarmaceutica () {
					return this.FFarmaceutica;
				}

				public Boolean FFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean FFarmaceuticaIsKey(){
				    return false;
				}
				public Integer FFarmaceuticaLength(){
				    return 500;
				}
				public Integer FFarmaceuticaPrecision(){
				    return 0;
				}
				public String FFarmaceuticaDefault(){
				
					return null;
				
				}
				public String FFarmaceuticaComment(){
				
				    return "FORMA FARMACEUTICA";
				
				}
				public String FFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FFarmaceuticaOriginalDbColumnName(){
				
					return "FFarmaceutica";
				
				}

				
			    public String ViaAdmin;

				public String getViaAdmin () {
					return this.ViaAdmin;
				}

				public Boolean ViaAdminIsNullable(){
				    return true;
				}
				public Boolean ViaAdminIsKey(){
				    return false;
				}
				public Integer ViaAdminLength(){
				    return 200;
				}
				public Integer ViaAdminPrecision(){
				    return 0;
				}
				public String ViaAdminDefault(){
				
					return null;
				
				}
				public String ViaAdminComment(){
				
				    return "VIA ADMINISTRACION";
				
				}
				public String ViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ViaAdminOriginalDbColumnName(){
				
					return "ViaAdmin";
				
				}

				
			    public String NUso;

				public String getNUso () {
					return this.NUso;
				}

				public Boolean NUsoIsNullable(){
				    return true;
				}
				public Boolean NUsoIsKey(){
				    return false;
				}
				public Integer NUsoLength(){
				    return 50;
				}
				public Integer NUsoPrecision(){
				    return 0;
				}
				public String NUsoDefault(){
				
					return null;
				
				}
				public String NUsoComment(){
				
				    return "NIVEL USO";
				
				}
				public String NUsoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NUsoOriginalDbColumnName(){
				
					return "NUso";
				
				}

				
			    public String NAtencion;

				public String getNAtencion () {
					return this.NAtencion;
				}

				public Boolean NAtencionIsNullable(){
				    return true;
				}
				public Boolean NAtencionIsKey(){
				    return false;
				}
				public Integer NAtencionLength(){
				    return 50;
				}
				public Integer NAtencionPrecision(){
				    return 0;
				}
				public String NAtencionDefault(){
				
					return null;
				
				}
				public String NAtencionComment(){
				
				    return "NIVEL ATENCION";
				
				}
				public String NAtencionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NAtencionOriginalDbColumnName(){
				
					return "NAtencion";
				
				}

				
			    public String ObsNUso;

				public String getObsNUso () {
					return this.ObsNUso;
				}

				public Boolean ObsNUsoIsNullable(){
				    return true;
				}
				public Boolean ObsNUsoIsKey(){
				    return false;
				}
				public Integer ObsNUsoLength(){
				    return 500;
				}
				public Integer ObsNUsoPrecision(){
				    return 0;
				}
				public String ObsNUsoDefault(){
				
					return null;
				
				}
				public String ObsNUsoComment(){
				
				    return "OBSERVACION PARA EL NIVEL DE USO";
				
				}
				public String ObsNUsoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ObsNUsoOriginalDbColumnName(){
				
					return "ObsNUso";
				
				}

				
			    public String UsadoPre;

				public String getUsadoPre () {
					return this.UsadoPre;
				}

				public Boolean UsadoPreIsNullable(){
				    return true;
				}
				public Boolean UsadoPreIsKey(){
				    return false;
				}
				public Integer UsadoPreLength(){
				    return 2;
				}
				public Integer UsadoPrePrecision(){
				    return 0;
				}
				public String UsadoPreDefault(){
				
					return null;
				
				}
				public String UsadoPreComment(){
				
				    return "USADO PARA PREPARACIONES";
				
				}
				public String UsadoPrePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UsadoPreOriginalDbColumnName(){
				
					return "UsadoPre";
				
				}

				
			    public String CodigoUnico;

				public String getCodigoUnico () {
					return this.CodigoUnico;
				}

				public Boolean CodigoUnicoIsNullable(){
				    return true;
				}
				public Boolean CodigoUnicoIsKey(){
				    return false;
				}
				public Integer CodigoUnicoLength(){
				    return 150;
				}
				public Integer CodigoUnicoPrecision(){
				    return 0;
				}
				public String CodigoUnicoDefault(){
				
					return null;
				
				}
				public String CodigoUnicoComment(){
				
				    return "CODIGO UNICO";
				
				}
				public String CodigoUnicoPattern(){
				
					return "";
				
				}
				public String CodigoUnicoOriginalDbColumnName(){
				
					return "CodigoUnico";
				
				}

				
			    public String EspecialidadMedica;

				public String getEspecialidadMedica () {
					return this.EspecialidadMedica;
				}

				public Boolean EspecialidadMedicaIsNullable(){
				    return true;
				}
				public Boolean EspecialidadMedicaIsKey(){
				    return false;
				}
				public Integer EspecialidadMedicaLength(){
				    return 150;
				}
				public Integer EspecialidadMedicaPrecision(){
				    return 0;
				}
				public String EspecialidadMedicaDefault(){
				
					return null;
				
				}
				public String EspecialidadMedicaComment(){
				
				    return "ESPECIALIDAD MEDICA";
				
				}
				public String EspecialidadMedicaPattern(){
				
					return "";
				
				}
				public String EspecialidadMedicaOriginalDbColumnName(){
				
					return "EspecialidadMedica";
				
				}

				
			    public String nuevoNuso;

				public String getNuevoNuso () {
					return this.nuevoNuso;
				}

				public Boolean nuevoNusoIsNullable(){
				    return true;
				}
				public Boolean nuevoNusoIsKey(){
				    return false;
				}
				public Integer nuevoNusoLength(){
				    return 20;
				}
				public Integer nuevoNusoPrecision(){
				    return null;
				}
				public String nuevoNusoDefault(){
				
					return null;
				
				}
				public String nuevoNusoComment(){
				
				    return "";
				
				}
				public String nuevoNusoPattern(){
				
					return "";
				
				}
				public String nuevoNusoOriginalDbColumnName(){
				
					return "nuevoNuso";
				
				}

				
			    public String nuevaEspecialidad;

				public String getNuevaEspecialidad () {
					return this.nuevaEspecialidad;
				}

				public Boolean nuevaEspecialidadIsNullable(){
				    return true;
				}
				public Boolean nuevaEspecialidadIsKey(){
				    return false;
				}
				public Integer nuevaEspecialidadLength(){
				    return 150;
				}
				public Integer nuevaEspecialidadPrecision(){
				    return null;
				}
				public String nuevaEspecialidadDefault(){
				
					return null;
				
				}
				public String nuevaEspecialidadComment(){
				
				    return "";
				
				}
				public String nuevaEspecialidadPattern(){
				
					return "";
				
				}
				public String nuevaEspecialidadOriginalDbColumnName(){
				
					return "nuevaEspecialidad";
				
				}

				
			    public String nuevaAdmin;

				public String getNuevaAdmin () {
					return this.nuevaAdmin;
				}

				public Boolean nuevaAdminIsNullable(){
				    return true;
				}
				public Boolean nuevaAdminIsKey(){
				    return false;
				}
				public Integer nuevaAdminLength(){
				    return 100;
				}
				public Integer nuevaAdminPrecision(){
				    return null;
				}
				public String nuevaAdminDefault(){
				
					return null;
				
				}
				public String nuevaAdminComment(){
				
				    return "";
				
				}
				public String nuevaAdminPattern(){
				
					return "";
				
				}
				public String nuevaAdminOriginalDbColumnName(){
				
					return "nuevaAdmin";
				
				}

				
			    public String nuevaForma;

				public String getNuevaForma () {
					return this.nuevaForma;
				}

				public Boolean nuevaFormaIsNullable(){
				    return true;
				}
				public Boolean nuevaFormaIsKey(){
				    return false;
				}
				public Integer nuevaFormaLength(){
				    return 200;
				}
				public Integer nuevaFormaPrecision(){
				    return null;
				}
				public String nuevaFormaDefault(){
				
					return null;
				
				}
				public String nuevaFormaComment(){
				
				    return "";
				
				}
				public String nuevaFormaPattern(){
				
					return "";
				
				}
				public String nuevaFormaOriginalDbColumnName(){
				
					return "nuevaForma";
				
				}

				
			    public Long linea;

				public Long getLinea () {
					return this.linea;
				}

				public Boolean lineaIsNullable(){
				    return true;
				}
				public Boolean lineaIsKey(){
				    return false;
				}
				public Integer lineaLength(){
				    return null;
				}
				public Integer lineaPrecision(){
				    return null;
				}
				public String lineaDefault(){
				
					return "";
				
				}
				public String lineaComment(){
				
				    return "";
				
				}
				public String lineaPattern(){
				
					return "";
				
				}
				public String lineaOriginalDbColumnName(){
				
					return "linea";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CodSsmp = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.FFarmaceutica = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.NUso = readString(dis);
					
					this.NAtencion = readString(dis);
					
					this.ObsNUso = readString(dis);
					
					this.UsadoPre = readString(dis);
					
					this.CodigoUnico = readString(dis);
					
					this.EspecialidadMedica = readString(dis);
					
					this.nuevoNuso = readString(dis);
					
					this.nuevaEspecialidad = readString(dis);
					
					this.nuevaAdmin = readString(dis);
					
					this.nuevaForma = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.linea = null;
           				} else {
           			    	this.linea = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CodSsmp = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.FFarmaceutica = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.NUso = readString(dis);
					
					this.NAtencion = readString(dis);
					
					this.ObsNUso = readString(dis);
					
					this.UsadoPre = readString(dis);
					
					this.CodigoUnico = readString(dis);
					
					this.EspecialidadMedica = readString(dis);
					
					this.nuevoNuso = readString(dis);
					
					this.nuevaEspecialidad = readString(dis);
					
					this.nuevaAdmin = readString(dis);
					
					this.nuevaForma = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.linea = null;
           				} else {
           			    	this.linea = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CodSsmp,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.FFarmaceutica,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.NUso,dos);
					
					// String
				
						writeString(this.NAtencion,dos);
					
					// String
				
						writeString(this.ObsNUso,dos);
					
					// String
				
						writeString(this.UsadoPre,dos);
					
					// String
				
						writeString(this.CodigoUnico,dos);
					
					// String
				
						writeString(this.EspecialidadMedica,dos);
					
					// String
				
						writeString(this.nuevoNuso,dos);
					
					// String
				
						writeString(this.nuevaEspecialidad,dos);
					
					// String
				
						writeString(this.nuevaAdmin,dos);
					
					// String
				
						writeString(this.nuevaForma,dos);
					
					// Long
				
						if(this.linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.linea);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CodSsmp,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.FFarmaceutica,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.NUso,dos);
					
					// String
				
						writeString(this.NAtencion,dos);
					
					// String
				
						writeString(this.ObsNUso,dos);
					
					// String
				
						writeString(this.UsadoPre,dos);
					
					// String
				
						writeString(this.CodigoUnico,dos);
					
					// String
				
						writeString(this.EspecialidadMedica,dos);
					
					// String
				
						writeString(this.nuevoNuso,dos);
					
					// String
				
						writeString(this.nuevaEspecialidad,dos);
					
					// String
				
						writeString(this.nuevaAdmin,dos);
					
					// String
				
						writeString(this.nuevaForma,dos);
					
					// Long
				
						if(this.linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.linea);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CodSsmp="+CodSsmp);
		sb.append(",NGenerico="+NGenerico);
		sb.append(",Concentracion="+Concentracion);
		sb.append(",FFarmaceutica="+FFarmaceutica);
		sb.append(",ViaAdmin="+ViaAdmin);
		sb.append(",NUso="+NUso);
		sb.append(",NAtencion="+NAtencion);
		sb.append(",ObsNUso="+ObsNUso);
		sb.append(",UsadoPre="+UsadoPre);
		sb.append(",CodigoUnico="+CodigoUnico);
		sb.append(",EspecialidadMedica="+EspecialidadMedica);
		sb.append(",nuevoNuso="+nuevoNuso);
		sb.append(",nuevaEspecialidad="+nuevaEspecialidad);
		sb.append(",nuevaAdmin="+nuevaAdmin);
		sb.append(",nuevaForma="+nuevaForma);
		sb.append(",linea="+String.valueOf(linea));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row53Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_2Struct implements routines.system.IPersistableRow<after_tHashInput_2Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String CodSsmp;

				public String getCodSsmp () {
					return this.CodSsmp;
				}

				public Boolean CodSsmpIsNullable(){
				    return true;
				}
				public Boolean CodSsmpIsKey(){
				    return false;
				}
				public Integer CodSsmpLength(){
				    return 15;
				}
				public Integer CodSsmpPrecision(){
				    return 0;
				}
				public String CodSsmpDefault(){
				
					return null;
				
				}
				public String CodSsmpComment(){
				
				    return "CODIGO SSMP";
				
				}
				public String CodSsmpPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CodSsmpOriginalDbColumnName(){
				
					return "CodSsmp";
				
				}

				
			    public String NGenerico;

				public String getNGenerico () {
					return this.NGenerico;
				}

				public Boolean NGenericoIsNullable(){
				    return true;
				}
				public Boolean NGenericoIsKey(){
				    return false;
				}
				public Integer NGenericoLength(){
				    return 200;
				}
				public Integer NGenericoPrecision(){
				    return 0;
				}
				public String NGenericoDefault(){
				
					return null;
				
				}
				public String NGenericoComment(){
				
				    return "NOMBRE GENERICO";
				
				}
				public String NGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NGenericoOriginalDbColumnName(){
				
					return "NGenerico";
				
				}

				
			    public String Concentracion;

				public String getConcentracion () {
					return this.Concentracion;
				}

				public Boolean ConcentracionIsNullable(){
				    return true;
				}
				public Boolean ConcentracionIsKey(){
				    return false;
				}
				public Integer ConcentracionLength(){
				    return 50;
				}
				public Integer ConcentracionPrecision(){
				    return 0;
				}
				public String ConcentracionDefault(){
				
					return null;
				
				}
				public String ConcentracionComment(){
				
				    return "CONCENTRACION";
				
				}
				public String ConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ConcentracionOriginalDbColumnName(){
				
					return "Concentracion";
				
				}

				
			    public String FFarmaceutica;

				public String getFFarmaceutica () {
					return this.FFarmaceutica;
				}

				public Boolean FFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean FFarmaceuticaIsKey(){
				    return false;
				}
				public Integer FFarmaceuticaLength(){
				    return 500;
				}
				public Integer FFarmaceuticaPrecision(){
				    return 0;
				}
				public String FFarmaceuticaDefault(){
				
					return null;
				
				}
				public String FFarmaceuticaComment(){
				
				    return "FORMA FARMACEUTICA";
				
				}
				public String FFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FFarmaceuticaOriginalDbColumnName(){
				
					return "FFarmaceutica";
				
				}

				
			    public String ViaAdmin;

				public String getViaAdmin () {
					return this.ViaAdmin;
				}

				public Boolean ViaAdminIsNullable(){
				    return true;
				}
				public Boolean ViaAdminIsKey(){
				    return false;
				}
				public Integer ViaAdminLength(){
				    return 200;
				}
				public Integer ViaAdminPrecision(){
				    return 0;
				}
				public String ViaAdminDefault(){
				
					return null;
				
				}
				public String ViaAdminComment(){
				
				    return "VIA ADMINISTRACION";
				
				}
				public String ViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ViaAdminOriginalDbColumnName(){
				
					return "ViaAdmin";
				
				}

				
			    public String NUso;

				public String getNUso () {
					return this.NUso;
				}

				public Boolean NUsoIsNullable(){
				    return true;
				}
				public Boolean NUsoIsKey(){
				    return false;
				}
				public Integer NUsoLength(){
				    return 50;
				}
				public Integer NUsoPrecision(){
				    return 0;
				}
				public String NUsoDefault(){
				
					return null;
				
				}
				public String NUsoComment(){
				
				    return "NIVEL USO";
				
				}
				public String NUsoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NUsoOriginalDbColumnName(){
				
					return "NUso";
				
				}

				
			    public String NAtencion;

				public String getNAtencion () {
					return this.NAtencion;
				}

				public Boolean NAtencionIsNullable(){
				    return true;
				}
				public Boolean NAtencionIsKey(){
				    return false;
				}
				public Integer NAtencionLength(){
				    return 50;
				}
				public Integer NAtencionPrecision(){
				    return 0;
				}
				public String NAtencionDefault(){
				
					return null;
				
				}
				public String NAtencionComment(){
				
				    return "NIVEL ATENCION";
				
				}
				public String NAtencionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NAtencionOriginalDbColumnName(){
				
					return "NAtencion";
				
				}

				
			    public String ObsNUso;

				public String getObsNUso () {
					return this.ObsNUso;
				}

				public Boolean ObsNUsoIsNullable(){
				    return true;
				}
				public Boolean ObsNUsoIsKey(){
				    return false;
				}
				public Integer ObsNUsoLength(){
				    return 500;
				}
				public Integer ObsNUsoPrecision(){
				    return 0;
				}
				public String ObsNUsoDefault(){
				
					return null;
				
				}
				public String ObsNUsoComment(){
				
				    return "OBSERVACION PARA EL NIVEL DE USO";
				
				}
				public String ObsNUsoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ObsNUsoOriginalDbColumnName(){
				
					return "ObsNUso";
				
				}

				
			    public String UsadoPre;

				public String getUsadoPre () {
					return this.UsadoPre;
				}

				public Boolean UsadoPreIsNullable(){
				    return true;
				}
				public Boolean UsadoPreIsKey(){
				    return false;
				}
				public Integer UsadoPreLength(){
				    return 2;
				}
				public Integer UsadoPrePrecision(){
				    return 0;
				}
				public String UsadoPreDefault(){
				
					return null;
				
				}
				public String UsadoPreComment(){
				
				    return "USADO PARA PREPARACIONES";
				
				}
				public String UsadoPrePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UsadoPreOriginalDbColumnName(){
				
					return "UsadoPre";
				
				}

				
			    public String CodigoUnico;

				public String getCodigoUnico () {
					return this.CodigoUnico;
				}

				public Boolean CodigoUnicoIsNullable(){
				    return true;
				}
				public Boolean CodigoUnicoIsKey(){
				    return false;
				}
				public Integer CodigoUnicoLength(){
				    return 150;
				}
				public Integer CodigoUnicoPrecision(){
				    return 0;
				}
				public String CodigoUnicoDefault(){
				
					return null;
				
				}
				public String CodigoUnicoComment(){
				
				    return "CODIGO UNICO";
				
				}
				public String CodigoUnicoPattern(){
				
					return "";
				
				}
				public String CodigoUnicoOriginalDbColumnName(){
				
					return "CodigoUnico";
				
				}

				
			    public String EspecialidadMedica;

				public String getEspecialidadMedica () {
					return this.EspecialidadMedica;
				}

				public Boolean EspecialidadMedicaIsNullable(){
				    return true;
				}
				public Boolean EspecialidadMedicaIsKey(){
				    return false;
				}
				public Integer EspecialidadMedicaLength(){
				    return 150;
				}
				public Integer EspecialidadMedicaPrecision(){
				    return 0;
				}
				public String EspecialidadMedicaDefault(){
				
					return null;
				
				}
				public String EspecialidadMedicaComment(){
				
				    return "ESPECIALIDAD MEDICA";
				
				}
				public String EspecialidadMedicaPattern(){
				
					return "";
				
				}
				public String EspecialidadMedicaOriginalDbColumnName(){
				
					return "EspecialidadMedica";
				
				}

				
			    public String nuevoNuso;

				public String getNuevoNuso () {
					return this.nuevoNuso;
				}

				public Boolean nuevoNusoIsNullable(){
				    return true;
				}
				public Boolean nuevoNusoIsKey(){
				    return false;
				}
				public Integer nuevoNusoLength(){
				    return 20;
				}
				public Integer nuevoNusoPrecision(){
				    return null;
				}
				public String nuevoNusoDefault(){
				
					return null;
				
				}
				public String nuevoNusoComment(){
				
				    return "";
				
				}
				public String nuevoNusoPattern(){
				
					return "";
				
				}
				public String nuevoNusoOriginalDbColumnName(){
				
					return "nuevoNuso";
				
				}

				
			    public String nuevaEspecialidad;

				public String getNuevaEspecialidad () {
					return this.nuevaEspecialidad;
				}

				public Boolean nuevaEspecialidadIsNullable(){
				    return true;
				}
				public Boolean nuevaEspecialidadIsKey(){
				    return false;
				}
				public Integer nuevaEspecialidadLength(){
				    return 150;
				}
				public Integer nuevaEspecialidadPrecision(){
				    return null;
				}
				public String nuevaEspecialidadDefault(){
				
					return null;
				
				}
				public String nuevaEspecialidadComment(){
				
				    return "";
				
				}
				public String nuevaEspecialidadPattern(){
				
					return "";
				
				}
				public String nuevaEspecialidadOriginalDbColumnName(){
				
					return "nuevaEspecialidad";
				
				}

				
			    public String nuevaAdmin;

				public String getNuevaAdmin () {
					return this.nuevaAdmin;
				}

				public Boolean nuevaAdminIsNullable(){
				    return true;
				}
				public Boolean nuevaAdminIsKey(){
				    return false;
				}
				public Integer nuevaAdminLength(){
				    return 100;
				}
				public Integer nuevaAdminPrecision(){
				    return null;
				}
				public String nuevaAdminDefault(){
				
					return null;
				
				}
				public String nuevaAdminComment(){
				
				    return "";
				
				}
				public String nuevaAdminPattern(){
				
					return "";
				
				}
				public String nuevaAdminOriginalDbColumnName(){
				
					return "nuevaAdmin";
				
				}

				
			    public String nuevaForma;

				public String getNuevaForma () {
					return this.nuevaForma;
				}

				public Boolean nuevaFormaIsNullable(){
				    return true;
				}
				public Boolean nuevaFormaIsKey(){
				    return false;
				}
				public Integer nuevaFormaLength(){
				    return 200;
				}
				public Integer nuevaFormaPrecision(){
				    return null;
				}
				public String nuevaFormaDefault(){
				
					return null;
				
				}
				public String nuevaFormaComment(){
				
				    return "";
				
				}
				public String nuevaFormaPattern(){
				
					return "";
				
				}
				public String nuevaFormaOriginalDbColumnName(){
				
					return "nuevaForma";
				
				}

				
			    public Long linea;

				public Long getLinea () {
					return this.linea;
				}

				public Boolean lineaIsNullable(){
				    return true;
				}
				public Boolean lineaIsKey(){
				    return false;
				}
				public Integer lineaLength(){
				    return null;
				}
				public Integer lineaPrecision(){
				    return null;
				}
				public String lineaDefault(){
				
					return "";
				
				}
				public String lineaComment(){
				
				    return "";
				
				}
				public String lineaPattern(){
				
					return "";
				
				}
				public String lineaOriginalDbColumnName(){
				
					return "linea";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CodSsmp = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.FFarmaceutica = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.NUso = readString(dis);
					
					this.NAtencion = readString(dis);
					
					this.ObsNUso = readString(dis);
					
					this.UsadoPre = readString(dis);
					
					this.CodigoUnico = readString(dis);
					
					this.EspecialidadMedica = readString(dis);
					
					this.nuevoNuso = readString(dis);
					
					this.nuevaEspecialidad = readString(dis);
					
					this.nuevaAdmin = readString(dis);
					
					this.nuevaForma = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.linea = null;
           				} else {
           			    	this.linea = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CodSsmp = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.FFarmaceutica = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.NUso = readString(dis);
					
					this.NAtencion = readString(dis);
					
					this.ObsNUso = readString(dis);
					
					this.UsadoPre = readString(dis);
					
					this.CodigoUnico = readString(dis);
					
					this.EspecialidadMedica = readString(dis);
					
					this.nuevoNuso = readString(dis);
					
					this.nuevaEspecialidad = readString(dis);
					
					this.nuevaAdmin = readString(dis);
					
					this.nuevaForma = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.linea = null;
           				} else {
           			    	this.linea = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CodSsmp,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.FFarmaceutica,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.NUso,dos);
					
					// String
				
						writeString(this.NAtencion,dos);
					
					// String
				
						writeString(this.ObsNUso,dos);
					
					// String
				
						writeString(this.UsadoPre,dos);
					
					// String
				
						writeString(this.CodigoUnico,dos);
					
					// String
				
						writeString(this.EspecialidadMedica,dos);
					
					// String
				
						writeString(this.nuevoNuso,dos);
					
					// String
				
						writeString(this.nuevaEspecialidad,dos);
					
					// String
				
						writeString(this.nuevaAdmin,dos);
					
					// String
				
						writeString(this.nuevaForma,dos);
					
					// Long
				
						if(this.linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.linea);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CodSsmp,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.FFarmaceutica,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.NUso,dos);
					
					// String
				
						writeString(this.NAtencion,dos);
					
					// String
				
						writeString(this.ObsNUso,dos);
					
					// String
				
						writeString(this.UsadoPre,dos);
					
					// String
				
						writeString(this.CodigoUnico,dos);
					
					// String
				
						writeString(this.EspecialidadMedica,dos);
					
					// String
				
						writeString(this.nuevoNuso,dos);
					
					// String
				
						writeString(this.nuevaEspecialidad,dos);
					
					// String
				
						writeString(this.nuevaAdmin,dos);
					
					// String
				
						writeString(this.nuevaForma,dos);
					
					// Long
				
						if(this.linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.linea);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CodSsmp="+CodSsmp);
		sb.append(",NGenerico="+NGenerico);
		sb.append(",Concentracion="+Concentracion);
		sb.append(",FFarmaceutica="+FFarmaceutica);
		sb.append(",ViaAdmin="+ViaAdmin);
		sb.append(",NUso="+NUso);
		sb.append(",NAtencion="+NAtencion);
		sb.append(",ObsNUso="+ObsNUso);
		sb.append(",UsadoPre="+UsadoPre);
		sb.append(",CodigoUnico="+CodigoUnico);
		sb.append(",EspecialidadMedica="+EspecialidadMedica);
		sb.append(",nuevoNuso="+nuevoNuso);
		sb.append(",nuevaEspecialidad="+nuevaEspecialidad);
		sb.append(",nuevaAdmin="+nuevaAdmin);
		sb.append(",nuevaForma="+nuevaForma);
		sb.append(",linea="+String.valueOf(linea));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tOracleInput_3Process(globalMap);

		row53Struct row53 = new row53Struct();
validacionNAtencionStruct validacionNAtencion = new validacionNAtencionStruct();
row63Struct row63 = new row63Struct();
row64Struct row64 = new row64Struct();





	
	/**
	 * [tAggregateRow_1_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGOUT", false);
		start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"validacionNAtencion");
					}
				
		int tos_count_tAggregateRow_1_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap(); 

// ------------
	class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				String Mensaje;
    				Long Linea;
    				String CODIGO_UNICO;
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.Mensaje == null) ? 0 : this.Mensaje.hashCode());
							
							result = prime * result + ((this.Linea == null) ? 0 : this.Linea.hashCode());
							
							result = prime * result + ((this.CODIGO_UNICO == null) ? 0 : this.CODIGO_UNICO.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;
			
							if (this.Mensaje == null) {
								if (other.Mensaje != null) 
									return false;
							} else if (!this.Mensaje.equals(other.Mensaje)) 
								return false;
						
							if (this.Linea == null) {
								if (other.Linea != null) 
									return false;
							} else if (!this.Linea.equals(other.Linea)) 
								return false;
						
							if (this.CODIGO_UNICO == null) {
								if (other.CODIGO_UNICO != null) 
									return false;
							} else if (!this.CODIGO_UNICO.equals(other.CODIGO_UNICO)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
	AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
	java.util.Map<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1>();
	

 



/**
 * [tAggregateRow_1_AGGOUT begin ] stop
 */



	
	/**
	 * [tMap_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_14", false);
		start_Hash.put("tMap_14", System.currentTimeMillis());
		
	
	currentComponent="tMap_14";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row53");
					}
				
		int tos_count_tMap_14 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<MED_ATENCIOnStruct> tHash_Lookup_MED_ATENCIOn = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<MED_ATENCIOnStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<MED_ATENCIOnStruct>) 
					globalMap.get( "tHash_Lookup_MED_ATENCIOn" ))
					;					
					
	

MED_ATENCIOnStruct MED_ATENCIOnHashKey = new MED_ATENCIOnStruct();
MED_ATENCIOnStruct MED_ATENCIOnDefault = new MED_ATENCIOnStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_14__Struct  {
}
Var__tMap_14__Struct Var__tMap_14 = new Var__tMap_14__Struct();
// ###############################

// ###############################
// # Outputs initialization
validacionNAtencionStruct validacionNAtencion_tmp = new validacionNAtencionStruct();
// ###############################

        
        



        









 



/**
 * [tMap_14 begin ] stop
 */



	
	/**
	 * [tHashInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_2", false);
		start_Hash.put("tHashInput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_2";
	
	
		int tos_count_tHashInput_2 = 0;
		


int nb_line_tHashInput_2 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row8Struct> tHashFile_tHashInput_2 = mf_tHashInput_2.getAdvancedMemoryHashFile("tHashFile_CargaMoleculasAcuerdo_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_2==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row8Struct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
while (iterator_tHashInput_2.hasNext()) {
    row8Struct next_tHashInput_2 = iterator_tHashInput_2.next();

	row53.CodSsmp = next_tHashInput_2.CodSsmp;
	row53.NGenerico = next_tHashInput_2.NGenerico;
	row53.Concentracion = next_tHashInput_2.Concentracion;
	row53.FFarmaceutica = next_tHashInput_2.FFarmaceutica;
	row53.ViaAdmin = next_tHashInput_2.ViaAdmin;
	row53.NUso = next_tHashInput_2.NUso;
	row53.NAtencion = next_tHashInput_2.NAtencion;
	row53.ObsNUso = next_tHashInput_2.ObsNUso;
	row53.UsadoPre = next_tHashInput_2.UsadoPre;
	row53.CodigoUnico = next_tHashInput_2.CodigoUnico;
	row53.EspecialidadMedica = next_tHashInput_2.EspecialidadMedica;
	row53.nuevoNuso = next_tHashInput_2.nuevoNuso;
	row53.nuevaEspecialidad = next_tHashInput_2.nuevaEspecialidad;
	row53.nuevaAdmin = next_tHashInput_2.nuevaAdmin;
	row53.nuevaForma = next_tHashInput_2.nuevaForma;
	row53.linea = next_tHashInput_2.linea;

 



/**
 * [tHashInput_2 begin ] stop
 */
	
	/**
	 * [tHashInput_2 main ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 


	tos_count_tHashInput_2++;

/**
 * [tHashInput_2 main ] stop
 */
	
	/**
	 * [tHashInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_14 main ] start
	 */

	

	
	
	currentComponent="tMap_14";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row53"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_14 = false;
		
						MED_ATENCIOnStruct MED_ATENCIOn = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_14 = false;
		boolean mainRowRejected_tMap_14 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "MED_ATENCIOn" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopMED_ATENCIOn = false;
       		  	    	
       		  	    	
 							MED_ATENCIOnStruct MED_ATENCIOnObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_14) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_14 = false;
								
                        		    		    MED_ATENCIOnHashKey.NOMBRE = row53.NAtencion ;
                        		    		

								
		                        	MED_ATENCIOnHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_MED_ATENCIOn.lookup( MED_ATENCIOnHashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_MED_ATENCIOn.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_14 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	MED_ATENCIOnStruct fromLookup_MED_ATENCIOn = null;
							MED_ATENCIOn = MED_ATENCIOnDefault;
										 
							
								 
							
							
								if (tHash_Lookup_MED_ATENCIOn !=null && tHash_Lookup_MED_ATENCIOn.hasNext()) { // G 099
								
							
								
								fromLookup_MED_ATENCIOn = tHash_Lookup_MED_ATENCIOn.next();

							
							
								} // G 099
							
							

							if(fromLookup_MED_ATENCIOn != null) {
								MED_ATENCIOn = fromLookup_MED_ATENCIOn;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_14__Struct Var = Var__tMap_14;// ###############################
        // ###############################
        // # Output tables

validacionNAtencion = null;

if(!rejectedInnerJoin_tMap_14 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'validacionNAtencion'
// # Filter conditions 
if( rejectedInnerJoin_tMap_14 ) {
validacionNAtencion_tmp.Mensaje = "No se encuentra parametrizado el nivel de atención: ( "+row53.NAtencion + " ) para el producto con el codigo único "+row53.CodigoUnico+"  en el sistema" ;
validacionNAtencion_tmp.Linea = row53.linea;
validacionNAtencion_tmp.CODIGO_UNICO = row53.CodigoUnico ;
validacionNAtencion = validacionNAtencion_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_14 = false;










 


	tos_count_tMap_14++;

/**
 * [tMap_14 main ] stop
 */
	
	/**
	 * [tMap_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_14";
	
	

 



/**
 * [tMap_14 process_data_begin ] stop
 */
// Start of branch "validacionNAtencion"
if(validacionNAtencion != null) { 



	
	/**
	 * [tAggregateRow_1_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"validacionNAtencion"
						
						);
					}
					
	
operation_finder_tAggregateRow_1.Mensaje = validacionNAtencion.Mensaje;
			operation_finder_tAggregateRow_1.Linea = validacionNAtencion.Linea;
			operation_finder_tAggregateRow_1.CODIGO_UNICO = validacionNAtencion.CODIGO_UNICO;
			

	operation_finder_tAggregateRow_1.hashCodeDirty = true;
	
	operation_result_tAggregateRow_1 = hash_tAggregateRow_1.get(operation_finder_tAggregateRow_1);

	

	if(operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

		operation_result_tAggregateRow_1.Mensaje = operation_finder_tAggregateRow_1.Mensaje;
				operation_result_tAggregateRow_1.Linea = operation_finder_tAggregateRow_1.Linea;
				operation_result_tAggregateRow_1.CODIGO_UNICO = operation_finder_tAggregateRow_1.CODIGO_UNICO;
				
		
		

		hash_tAggregateRow_1.put(operation_result_tAggregateRow_1, operation_result_tAggregateRow_1);
	
	} // G_OutMain_AggR_001


	


 


	tos_count_tAggregateRow_1_AGGOUT++;

/**
 * [tAggregateRow_1_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_end ] stop
 */

} // End of branch "validacionNAtencion"




	
	/**
	 * [tMap_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_14";
	
	

 



/**
 * [tMap_14 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_2 end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	
    

		
			nb_line_tHashInput_2++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_CargaMoleculasAcuerdo_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);       

 

ok_Hash.put("tHashInput_2", true);
end_Hash.put("tHashInput_2", System.currentTimeMillis());




/**
 * [tHashInput_2 end ] stop
 */

	
	/**
	 * [tMap_14 end ] start
	 */

	

	
	
	currentComponent="tMap_14";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_MED_ATENCIOn != null) {
						tHash_Lookup_MED_ATENCIOn.endGet();
					}
					globalMap.remove( "tHash_Lookup_MED_ATENCIOn" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row53");
			  	}
			  	
 

ok_Hash.put("tMap_14", true);
end_Hash.put("tMap_14", System.currentTimeMillis());




/**
 * [tMap_14 end ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"validacionNAtencion");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_1_AGGOUT", true);
end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGOUT end ] stop
 */



	
	/**
	 * [tOracleOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_6", false);
		start_Hash.put("tOracleOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row64");
					}
				
		int tos_count_tOracleOutput_6 = 0;
		






    
    int nb_line_tOracleOutput_6 = 0;
    int nb_line_update_tOracleOutput_6 = 0;
    int nb_line_inserted_tOracleOutput_6 = 0;
    int nb_line_deleted_tOracleOutput_6 = 0;
    int nb_line_rejected_tOracleOutput_6 = 0;

    int tmp_batchUpdateCount_tOracleOutput_6 = 0;

    int deletedCount_tOracleOutput_6=0;
    int updatedCount_tOracleOutput_6=0;
    int insertedCount_tOracleOutput_6=0;
    int rowsToCommitCount_tOracleOutput_6=0;
    int rejectedCount_tOracleOutput_6=0;

    boolean whetherReject_tOracleOutput_6 = false;

    java.sql.Connection conn_tOracleOutput_6 = null;

    //optional table
    String dbschema_tOracleOutput_6 = null;
    String tableName_tOracleOutput_6 = null;
        dbschema_tOracleOutput_6 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_6 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_6=0;

        if(dbschema_tOracleOutput_6 == null || dbschema_tOracleOutput_6.trim().length() == 0) {
            tableName_tOracleOutput_6 = ("ERRORLOG_TEMP");
        } else {
            tableName_tOracleOutput_6 = dbschema_tOracleOutput_6 + "." + ("ERRORLOG_TEMP");
        }
                String insert_tOracleOutput_6 = "INSERT INTO " + tableName_tOracleOutput_6 + " (Mensaje,Linea,CODIGO_UNICO) VALUES (?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_6 = conn_tOracleOutput_6.prepareStatement(insert_tOracleOutput_6);
                        resourceMap.put("pstmt_tOracleOutput_6", pstmt_tOracleOutput_6);





 



/**
 * [tOracleOutput_6 begin ] stop
 */



	
	/**
	 * [tJavaRow_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_15", false);
		start_Hash.put("tJavaRow_15", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_15";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row63");
					}
				
		int tos_count_tJavaRow_15 = 0;
		

int nb_line_tJavaRow_15 = 0;

 



/**
 * [tJavaRow_15 begin ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGIN", false);
		start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	
		int tos_count_tAggregateRow_1_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1.values();

globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

for(AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600



 



/**
 * [tAggregateRow_1_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	

            				    row63.Mensaje = aggregated_row_tAggregateRow_1.Mensaje;
            				    
            				    row63.Linea = aggregated_row_tAggregateRow_1.Linea;
            				    
            				    row63.CODIGO_UNICO = aggregated_row_tAggregateRow_1.CODIGO_UNICO;
            				    

 


	tos_count_tAggregateRow_1_AGGIN++;

/**
 * [tAggregateRow_1_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	

 



/**
 * [tAggregateRow_1_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_15 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_15";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row63"
						
						);
					}
					

    //Code generate according to input schema and output schema
row64.Mensaje = row63.Mensaje;
row64.Linea = row63.Linea;
row64.CODIGO_UNICO = row63.CODIGO_UNICO;


context.ErrorLog +=1;
    nb_line_tJavaRow_15++;   

 


	tos_count_tJavaRow_15++;

/**
 * [tJavaRow_15 main ] stop
 */
	
	/**
	 * [tJavaRow_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_15";
	
	

 



/**
 * [tJavaRow_15 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_6 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row64"
						
						);
					}
					



        whetherReject_tOracleOutput_6 = false;
                        if(row64.Mensaje == null) {
pstmt_tOracleOutput_6.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_6.setString(1, row64.Mensaje);
}

                        if(row64.Linea == null) {
pstmt_tOracleOutput_6.setNull(2, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_6.setLong(2, row64.Linea);
}

                        if(row64.CODIGO_UNICO == null) {
pstmt_tOracleOutput_6.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_6.setString(3, row64.CODIGO_UNICO);
}

                try {
                    nb_line_tOracleOutput_6++;
                    int processedCount_tOracleOutput_6 = pstmt_tOracleOutput_6.executeUpdate();
                    insertedCount_tOracleOutput_6 += processedCount_tOracleOutput_6;
                    rowsToCommitCount_tOracleOutput_6 += processedCount_tOracleOutput_6;
                } catch(java.lang.Exception e_tOracleOutput_6) {
globalMap.put("tOracleOutput_6_ERROR_MESSAGE",e_tOracleOutput_6.getMessage());
                    whetherReject_tOracleOutput_6 = true;
                            System.err.print(e_tOracleOutput_6.getMessage());
                }

 


	tos_count_tOracleOutput_6++;

/**
 * [tOracleOutput_6 main ] stop
 */
	
	/**
	 * [tOracleOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	

 



/**
 * [tOracleOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	

 



/**
 * [tOracleOutput_6 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_15";
	
	

 



/**
 * [tJavaRow_15 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	

 



/**
 * [tAggregateRow_1_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_1_AGGIN", true);
end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGIN end ] stop
 */

	
	/**
	 * [tJavaRow_15 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_15";
	
	

globalMap.put("tJavaRow_15_NB_LINE",nb_line_tJavaRow_15);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row63");
			  	}
			  	
 

ok_Hash.put("tJavaRow_15", true);
end_Hash.put("tJavaRow_15", System.currentTimeMillis());




/**
 * [tJavaRow_15 end ] stop
 */

	
	/**
	 * [tOracleOutput_6 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	
	



	
        if(pstmt_tOracleOutput_6 != null) {
			
				pstmt_tOracleOutput_6.close();
				resourceMap.remove("pstmt_tOracleOutput_6");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_6", true);

	
	nb_line_deleted_tOracleOutput_6=nb_line_deleted_tOracleOutput_6+ deletedCount_tOracleOutput_6;
	nb_line_update_tOracleOutput_6=nb_line_update_tOracleOutput_6 + updatedCount_tOracleOutput_6;
	nb_line_inserted_tOracleOutput_6=nb_line_inserted_tOracleOutput_6 + insertedCount_tOracleOutput_6;
	nb_line_rejected_tOracleOutput_6=nb_line_rejected_tOracleOutput_6 + rejectedCount_tOracleOutput_6;
	
        globalMap.put("tOracleOutput_6_NB_LINE",nb_line_tOracleOutput_6);
        globalMap.put("tOracleOutput_6_NB_LINE_UPDATED",nb_line_update_tOracleOutput_6);
        globalMap.put("tOracleOutput_6_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_6);
        globalMap.put("tOracleOutput_6_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_6);
        globalMap.put("tOracleOutput_6_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_6);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row64");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_6", true);
end_Hash.put("tOracleOutput_6", System.currentTimeMillis());




/**
 * [tOracleOutput_6 end ] stop
 */















				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk13", 0, "ok");
								} 
							
							tHashInput_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_1_AGGIN"
							globalMap.remove("tAggregateRow_1");
						
					     			//free memory for "tMap_14"
					     			globalMap.remove("tHash_Lookup_MED_ATENCIOn"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 finally ] stop
 */

	
	/**
	 * [tMap_14 finally ] start
	 */

	

	
	
	currentComponent="tMap_14";
	
	

 



/**
 * [tMap_14 finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	

 



/**
 * [tAggregateRow_1_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	

 



/**
 * [tAggregateRow_1_AGGIN finally ] stop
 */

	
	/**
	 * [tJavaRow_15 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_15";
	
	

 



/**
 * [tJavaRow_15 finally ] stop
 */

	
	/**
	 * [tOracleOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_6") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_6 = null;
                if ((pstmtToClose_tOracleOutput_6 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_6")) != null) {
                    pstmtToClose_tOracleOutput_6.close();
                }
    }
 



/**
 * [tOracleOutput_6 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row66Struct implements routines.system.IPersistableRow<row66Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String Mensaje;

				public String getMensaje () {
					return this.Mensaje;
				}

				public Boolean MensajeIsNullable(){
				    return true;
				}
				public Boolean MensajeIsKey(){
				    return false;
				}
				public Integer MensajeLength(){
				    return null;
				}
				public Integer MensajePrecision(){
				    return null;
				}
				public String MensajeDefault(){
				
					return null;
				
				}
				public String MensajeComment(){
				
				    return "";
				
				}
				public String MensajePattern(){
				
					return "";
				
				}
				public String MensajeOriginalDbColumnName(){
				
					return "Mensaje";
				
				}

				
			    public Long Linea;

				public Long getLinea () {
					return this.Linea;
				}

				public Boolean LineaIsNullable(){
				    return true;
				}
				public Boolean LineaIsKey(){
				    return false;
				}
				public Integer LineaLength(){
				    return null;
				}
				public Integer LineaPrecision(){
				    return null;
				}
				public String LineaDefault(){
				
					return null;
				
				}
				public String LineaComment(){
				
				    return "";
				
				}
				public String LineaPattern(){
				
					return "";
				
				}
				public String LineaOriginalDbColumnName(){
				
					return "Linea";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return null;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Mensaje="+Mensaje);
		sb.append(",Linea="+String.valueOf(Linea));
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row66Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row65Struct implements routines.system.IPersistableRow<row65Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String Mensaje;

				public String getMensaje () {
					return this.Mensaje;
				}

				public Boolean MensajeIsNullable(){
				    return true;
				}
				public Boolean MensajeIsKey(){
				    return false;
				}
				public Integer MensajeLength(){
				    return null;
				}
				public Integer MensajePrecision(){
				    return null;
				}
				public String MensajeDefault(){
				
					return null;
				
				}
				public String MensajeComment(){
				
				    return "";
				
				}
				public String MensajePattern(){
				
					return "";
				
				}
				public String MensajeOriginalDbColumnName(){
				
					return "Mensaje";
				
				}

				
			    public Long Linea;

				public Long getLinea () {
					return this.Linea;
				}

				public Boolean LineaIsNullable(){
				    return true;
				}
				public Boolean LineaIsKey(){
				    return false;
				}
				public Integer LineaLength(){
				    return null;
				}
				public Integer LineaPrecision(){
				    return null;
				}
				public String LineaDefault(){
				
					return null;
				
				}
				public String LineaComment(){
				
				    return "";
				
				}
				public String LineaPattern(){
				
					return "";
				
				}
				public String LineaOriginalDbColumnName(){
				
					return "Linea";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return null;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Mensaje="+Mensaje);
		sb.append(",Linea="+String.valueOf(Linea));
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row65Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_3 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_3> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String Mensaje;

				public String getMensaje () {
					return this.Mensaje;
				}

				public Boolean MensajeIsNullable(){
				    return true;
				}
				public Boolean MensajeIsKey(){
				    return false;
				}
				public Integer MensajeLength(){
				    return null;
				}
				public Integer MensajePrecision(){
				    return null;
				}
				public String MensajeDefault(){
				
					return null;
				
				}
				public String MensajeComment(){
				
				    return "";
				
				}
				public String MensajePattern(){
				
					return "";
				
				}
				public String MensajeOriginalDbColumnName(){
				
					return "Mensaje";
				
				}

				
			    public Long Linea;

				public Long getLinea () {
					return this.Linea;
				}

				public Boolean LineaIsNullable(){
				    return true;
				}
				public Boolean LineaIsKey(){
				    return false;
				}
				public Integer LineaLength(){
				    return null;
				}
				public Integer LineaPrecision(){
				    return null;
				}
				public String LineaDefault(){
				
					return null;
				
				}
				public String LineaComment(){
				
				    return "";
				
				}
				public String LineaPattern(){
				
					return "";
				
				}
				public String LineaOriginalDbColumnName(){
				
					return "Linea";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return null;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Mensaje="+Mensaje);
		sb.append(",Linea="+String.valueOf(Linea));
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_3 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class validacionEspecialidadesStruct implements routines.system.IPersistableRow<validacionEspecialidadesStruct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String Mensaje;

				public String getMensaje () {
					return this.Mensaje;
				}

				public Boolean MensajeIsNullable(){
				    return true;
				}
				public Boolean MensajeIsKey(){
				    return false;
				}
				public Integer MensajeLength(){
				    return 500;
				}
				public Integer MensajePrecision(){
				    return null;
				}
				public String MensajeDefault(){
				
					return null;
				
				}
				public String MensajeComment(){
				
				    return "";
				
				}
				public String MensajePattern(){
				
					return "";
				
				}
				public String MensajeOriginalDbColumnName(){
				
					return "Mensaje";
				
				}

				
			    public Long Linea;

				public Long getLinea () {
					return this.Linea;
				}

				public Boolean LineaIsNullable(){
				    return true;
				}
				public Boolean LineaIsKey(){
				    return false;
				}
				public Integer LineaLength(){
				    return null;
				}
				public Integer LineaPrecision(){
				    return null;
				}
				public String LineaDefault(){
				
					return null;
				
				}
				public String LineaComment(){
				
				    return "";
				
				}
				public String LineaPattern(){
				
					return "";
				
				}
				public String LineaOriginalDbColumnName(){
				
					return "Linea";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return null;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Mensaje="+Mensaje);
		sb.append(",Linea="+String.valueOf(Linea));
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(validacionEspecialidadesStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row39Struct implements routines.system.IPersistableRow<row39Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String CodSsmp;

				public String getCodSsmp () {
					return this.CodSsmp;
				}

				public Boolean CodSsmpIsNullable(){
				    return true;
				}
				public Boolean CodSsmpIsKey(){
				    return false;
				}
				public Integer CodSsmpLength(){
				    return 15;
				}
				public Integer CodSsmpPrecision(){
				    return 0;
				}
				public String CodSsmpDefault(){
				
					return null;
				
				}
				public String CodSsmpComment(){
				
				    return "CODIGO SSMP";
				
				}
				public String CodSsmpPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CodSsmpOriginalDbColumnName(){
				
					return "CodSsmp";
				
				}

				
			    public String NGenerico;

				public String getNGenerico () {
					return this.NGenerico;
				}

				public Boolean NGenericoIsNullable(){
				    return true;
				}
				public Boolean NGenericoIsKey(){
				    return false;
				}
				public Integer NGenericoLength(){
				    return 200;
				}
				public Integer NGenericoPrecision(){
				    return 0;
				}
				public String NGenericoDefault(){
				
					return null;
				
				}
				public String NGenericoComment(){
				
				    return "NOMBRE GENERICO";
				
				}
				public String NGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NGenericoOriginalDbColumnName(){
				
					return "NGenerico";
				
				}

				
			    public String Concentracion;

				public String getConcentracion () {
					return this.Concentracion;
				}

				public Boolean ConcentracionIsNullable(){
				    return true;
				}
				public Boolean ConcentracionIsKey(){
				    return false;
				}
				public Integer ConcentracionLength(){
				    return 50;
				}
				public Integer ConcentracionPrecision(){
				    return 0;
				}
				public String ConcentracionDefault(){
				
					return null;
				
				}
				public String ConcentracionComment(){
				
				    return "CONCENTRACION";
				
				}
				public String ConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ConcentracionOriginalDbColumnName(){
				
					return "Concentracion";
				
				}

				
			    public String FFarmaceutica;

				public String getFFarmaceutica () {
					return this.FFarmaceutica;
				}

				public Boolean FFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean FFarmaceuticaIsKey(){
				    return false;
				}
				public Integer FFarmaceuticaLength(){
				    return 500;
				}
				public Integer FFarmaceuticaPrecision(){
				    return 0;
				}
				public String FFarmaceuticaDefault(){
				
					return null;
				
				}
				public String FFarmaceuticaComment(){
				
				    return "FORMA FARMACEUTICA";
				
				}
				public String FFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FFarmaceuticaOriginalDbColumnName(){
				
					return "FFarmaceutica";
				
				}

				
			    public String ViaAdmin;

				public String getViaAdmin () {
					return this.ViaAdmin;
				}

				public Boolean ViaAdminIsNullable(){
				    return true;
				}
				public Boolean ViaAdminIsKey(){
				    return false;
				}
				public Integer ViaAdminLength(){
				    return 200;
				}
				public Integer ViaAdminPrecision(){
				    return 0;
				}
				public String ViaAdminDefault(){
				
					return null;
				
				}
				public String ViaAdminComment(){
				
				    return "VIA ADMINISTRACION";
				
				}
				public String ViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ViaAdminOriginalDbColumnName(){
				
					return "ViaAdmin";
				
				}

				
			    public String NUso;

				public String getNUso () {
					return this.NUso;
				}

				public Boolean NUsoIsNullable(){
				    return true;
				}
				public Boolean NUsoIsKey(){
				    return false;
				}
				public Integer NUsoLength(){
				    return 50;
				}
				public Integer NUsoPrecision(){
				    return 0;
				}
				public String NUsoDefault(){
				
					return null;
				
				}
				public String NUsoComment(){
				
				    return "NIVEL USO";
				
				}
				public String NUsoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NUsoOriginalDbColumnName(){
				
					return "NUso";
				
				}

				
			    public String NAtencion;

				public String getNAtencion () {
					return this.NAtencion;
				}

				public Boolean NAtencionIsNullable(){
				    return true;
				}
				public Boolean NAtencionIsKey(){
				    return false;
				}
				public Integer NAtencionLength(){
				    return 50;
				}
				public Integer NAtencionPrecision(){
				    return 0;
				}
				public String NAtencionDefault(){
				
					return null;
				
				}
				public String NAtencionComment(){
				
				    return "NIVEL ATENCION";
				
				}
				public String NAtencionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NAtencionOriginalDbColumnName(){
				
					return "NAtencion";
				
				}

				
			    public String ObsNUso;

				public String getObsNUso () {
					return this.ObsNUso;
				}

				public Boolean ObsNUsoIsNullable(){
				    return true;
				}
				public Boolean ObsNUsoIsKey(){
				    return false;
				}
				public Integer ObsNUsoLength(){
				    return 500;
				}
				public Integer ObsNUsoPrecision(){
				    return 0;
				}
				public String ObsNUsoDefault(){
				
					return null;
				
				}
				public String ObsNUsoComment(){
				
				    return "OBSERVACION PARA EL NIVEL DE USO";
				
				}
				public String ObsNUsoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ObsNUsoOriginalDbColumnName(){
				
					return "ObsNUso";
				
				}

				
			    public String UsadoPre;

				public String getUsadoPre () {
					return this.UsadoPre;
				}

				public Boolean UsadoPreIsNullable(){
				    return true;
				}
				public Boolean UsadoPreIsKey(){
				    return false;
				}
				public Integer UsadoPreLength(){
				    return 2;
				}
				public Integer UsadoPrePrecision(){
				    return 0;
				}
				public String UsadoPreDefault(){
				
					return null;
				
				}
				public String UsadoPreComment(){
				
				    return "USADO PARA PREPARACIONES";
				
				}
				public String UsadoPrePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UsadoPreOriginalDbColumnName(){
				
					return "UsadoPre";
				
				}

				
			    public String CodigoUnico;

				public String getCodigoUnico () {
					return this.CodigoUnico;
				}

				public Boolean CodigoUnicoIsNullable(){
				    return true;
				}
				public Boolean CodigoUnicoIsKey(){
				    return false;
				}
				public Integer CodigoUnicoLength(){
				    return 150;
				}
				public Integer CodigoUnicoPrecision(){
				    return 0;
				}
				public String CodigoUnicoDefault(){
				
					return null;
				
				}
				public String CodigoUnicoComment(){
				
				    return "CODIGO UNICO";
				
				}
				public String CodigoUnicoPattern(){
				
					return "";
				
				}
				public String CodigoUnicoOriginalDbColumnName(){
				
					return "CodigoUnico";
				
				}

				
			    public String EspecialidadMedica;

				public String getEspecialidadMedica () {
					return this.EspecialidadMedica;
				}

				public Boolean EspecialidadMedicaIsNullable(){
				    return true;
				}
				public Boolean EspecialidadMedicaIsKey(){
				    return false;
				}
				public Integer EspecialidadMedicaLength(){
				    return 150;
				}
				public Integer EspecialidadMedicaPrecision(){
				    return 0;
				}
				public String EspecialidadMedicaDefault(){
				
					return null;
				
				}
				public String EspecialidadMedicaComment(){
				
				    return "ESPECIALIDAD MEDICA";
				
				}
				public String EspecialidadMedicaPattern(){
				
					return "";
				
				}
				public String EspecialidadMedicaOriginalDbColumnName(){
				
					return "EspecialidadMedica";
				
				}

				
			    public String nuevoNuso;

				public String getNuevoNuso () {
					return this.nuevoNuso;
				}

				public Boolean nuevoNusoIsNullable(){
				    return true;
				}
				public Boolean nuevoNusoIsKey(){
				    return false;
				}
				public Integer nuevoNusoLength(){
				    return 20;
				}
				public Integer nuevoNusoPrecision(){
				    return null;
				}
				public String nuevoNusoDefault(){
				
					return null;
				
				}
				public String nuevoNusoComment(){
				
				    return "";
				
				}
				public String nuevoNusoPattern(){
				
					return "";
				
				}
				public String nuevoNusoOriginalDbColumnName(){
				
					return "nuevoNuso";
				
				}

				
			    public String nuevaEspecialidad;

				public String getNuevaEspecialidad () {
					return this.nuevaEspecialidad;
				}

				public Boolean nuevaEspecialidadIsNullable(){
				    return true;
				}
				public Boolean nuevaEspecialidadIsKey(){
				    return false;
				}
				public Integer nuevaEspecialidadLength(){
				    return 150;
				}
				public Integer nuevaEspecialidadPrecision(){
				    return null;
				}
				public String nuevaEspecialidadDefault(){
				
					return null;
				
				}
				public String nuevaEspecialidadComment(){
				
				    return "";
				
				}
				public String nuevaEspecialidadPattern(){
				
					return "";
				
				}
				public String nuevaEspecialidadOriginalDbColumnName(){
				
					return "nuevaEspecialidad";
				
				}

				
			    public String nuevaAdmin;

				public String getNuevaAdmin () {
					return this.nuevaAdmin;
				}

				public Boolean nuevaAdminIsNullable(){
				    return true;
				}
				public Boolean nuevaAdminIsKey(){
				    return false;
				}
				public Integer nuevaAdminLength(){
				    return 100;
				}
				public Integer nuevaAdminPrecision(){
				    return null;
				}
				public String nuevaAdminDefault(){
				
					return null;
				
				}
				public String nuevaAdminComment(){
				
				    return "";
				
				}
				public String nuevaAdminPattern(){
				
					return "";
				
				}
				public String nuevaAdminOriginalDbColumnName(){
				
					return "nuevaAdmin";
				
				}

				
			    public String nuevaForma;

				public String getNuevaForma () {
					return this.nuevaForma;
				}

				public Boolean nuevaFormaIsNullable(){
				    return true;
				}
				public Boolean nuevaFormaIsKey(){
				    return false;
				}
				public Integer nuevaFormaLength(){
				    return 200;
				}
				public Integer nuevaFormaPrecision(){
				    return null;
				}
				public String nuevaFormaDefault(){
				
					return null;
				
				}
				public String nuevaFormaComment(){
				
				    return "";
				
				}
				public String nuevaFormaPattern(){
				
					return "";
				
				}
				public String nuevaFormaOriginalDbColumnName(){
				
					return "nuevaForma";
				
				}

				
			    public Long linea;

				public Long getLinea () {
					return this.linea;
				}

				public Boolean lineaIsNullable(){
				    return true;
				}
				public Boolean lineaIsKey(){
				    return false;
				}
				public Integer lineaLength(){
				    return null;
				}
				public Integer lineaPrecision(){
				    return null;
				}
				public String lineaDefault(){
				
					return "";
				
				}
				public String lineaComment(){
				
				    return "";
				
				}
				public String lineaPattern(){
				
					return "";
				
				}
				public String lineaOriginalDbColumnName(){
				
					return "linea";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CodSsmp = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.FFarmaceutica = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.NUso = readString(dis);
					
					this.NAtencion = readString(dis);
					
					this.ObsNUso = readString(dis);
					
					this.UsadoPre = readString(dis);
					
					this.CodigoUnico = readString(dis);
					
					this.EspecialidadMedica = readString(dis);
					
					this.nuevoNuso = readString(dis);
					
					this.nuevaEspecialidad = readString(dis);
					
					this.nuevaAdmin = readString(dis);
					
					this.nuevaForma = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.linea = null;
           				} else {
           			    	this.linea = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CodSsmp = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.FFarmaceutica = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.NUso = readString(dis);
					
					this.NAtencion = readString(dis);
					
					this.ObsNUso = readString(dis);
					
					this.UsadoPre = readString(dis);
					
					this.CodigoUnico = readString(dis);
					
					this.EspecialidadMedica = readString(dis);
					
					this.nuevoNuso = readString(dis);
					
					this.nuevaEspecialidad = readString(dis);
					
					this.nuevaAdmin = readString(dis);
					
					this.nuevaForma = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.linea = null;
           				} else {
           			    	this.linea = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CodSsmp,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.FFarmaceutica,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.NUso,dos);
					
					// String
				
						writeString(this.NAtencion,dos);
					
					// String
				
						writeString(this.ObsNUso,dos);
					
					// String
				
						writeString(this.UsadoPre,dos);
					
					// String
				
						writeString(this.CodigoUnico,dos);
					
					// String
				
						writeString(this.EspecialidadMedica,dos);
					
					// String
				
						writeString(this.nuevoNuso,dos);
					
					// String
				
						writeString(this.nuevaEspecialidad,dos);
					
					// String
				
						writeString(this.nuevaAdmin,dos);
					
					// String
				
						writeString(this.nuevaForma,dos);
					
					// Long
				
						if(this.linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.linea);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CodSsmp,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.FFarmaceutica,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.NUso,dos);
					
					// String
				
						writeString(this.NAtencion,dos);
					
					// String
				
						writeString(this.ObsNUso,dos);
					
					// String
				
						writeString(this.UsadoPre,dos);
					
					// String
				
						writeString(this.CodigoUnico,dos);
					
					// String
				
						writeString(this.EspecialidadMedica,dos);
					
					// String
				
						writeString(this.nuevoNuso,dos);
					
					// String
				
						writeString(this.nuevaEspecialidad,dos);
					
					// String
				
						writeString(this.nuevaAdmin,dos);
					
					// String
				
						writeString(this.nuevaForma,dos);
					
					// Long
				
						if(this.linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.linea);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CodSsmp="+CodSsmp);
		sb.append(",NGenerico="+NGenerico);
		sb.append(",Concentracion="+Concentracion);
		sb.append(",FFarmaceutica="+FFarmaceutica);
		sb.append(",ViaAdmin="+ViaAdmin);
		sb.append(",NUso="+NUso);
		sb.append(",NAtencion="+NAtencion);
		sb.append(",ObsNUso="+ObsNUso);
		sb.append(",UsadoPre="+UsadoPre);
		sb.append(",CodigoUnico="+CodigoUnico);
		sb.append(",EspecialidadMedica="+EspecialidadMedica);
		sb.append(",nuevoNuso="+nuevoNuso);
		sb.append(",nuevaEspecialidad="+nuevaEspecialidad);
		sb.append(",nuevaAdmin="+nuevaAdmin);
		sb.append(",nuevaForma="+nuevaForma);
		sb.append(",linea="+String.valueOf(linea));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row39Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_3Struct implements routines.system.IPersistableRow<after_tHashInput_3Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String CodSsmp;

				public String getCodSsmp () {
					return this.CodSsmp;
				}

				public Boolean CodSsmpIsNullable(){
				    return true;
				}
				public Boolean CodSsmpIsKey(){
				    return false;
				}
				public Integer CodSsmpLength(){
				    return 15;
				}
				public Integer CodSsmpPrecision(){
				    return 0;
				}
				public String CodSsmpDefault(){
				
					return null;
				
				}
				public String CodSsmpComment(){
				
				    return "CODIGO SSMP";
				
				}
				public String CodSsmpPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CodSsmpOriginalDbColumnName(){
				
					return "CodSsmp";
				
				}

				
			    public String NGenerico;

				public String getNGenerico () {
					return this.NGenerico;
				}

				public Boolean NGenericoIsNullable(){
				    return true;
				}
				public Boolean NGenericoIsKey(){
				    return false;
				}
				public Integer NGenericoLength(){
				    return 200;
				}
				public Integer NGenericoPrecision(){
				    return 0;
				}
				public String NGenericoDefault(){
				
					return null;
				
				}
				public String NGenericoComment(){
				
				    return "NOMBRE GENERICO";
				
				}
				public String NGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NGenericoOriginalDbColumnName(){
				
					return "NGenerico";
				
				}

				
			    public String Concentracion;

				public String getConcentracion () {
					return this.Concentracion;
				}

				public Boolean ConcentracionIsNullable(){
				    return true;
				}
				public Boolean ConcentracionIsKey(){
				    return false;
				}
				public Integer ConcentracionLength(){
				    return 50;
				}
				public Integer ConcentracionPrecision(){
				    return 0;
				}
				public String ConcentracionDefault(){
				
					return null;
				
				}
				public String ConcentracionComment(){
				
				    return "CONCENTRACION";
				
				}
				public String ConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ConcentracionOriginalDbColumnName(){
				
					return "Concentracion";
				
				}

				
			    public String FFarmaceutica;

				public String getFFarmaceutica () {
					return this.FFarmaceutica;
				}

				public Boolean FFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean FFarmaceuticaIsKey(){
				    return false;
				}
				public Integer FFarmaceuticaLength(){
				    return 500;
				}
				public Integer FFarmaceuticaPrecision(){
				    return 0;
				}
				public String FFarmaceuticaDefault(){
				
					return null;
				
				}
				public String FFarmaceuticaComment(){
				
				    return "FORMA FARMACEUTICA";
				
				}
				public String FFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FFarmaceuticaOriginalDbColumnName(){
				
					return "FFarmaceutica";
				
				}

				
			    public String ViaAdmin;

				public String getViaAdmin () {
					return this.ViaAdmin;
				}

				public Boolean ViaAdminIsNullable(){
				    return true;
				}
				public Boolean ViaAdminIsKey(){
				    return false;
				}
				public Integer ViaAdminLength(){
				    return 200;
				}
				public Integer ViaAdminPrecision(){
				    return 0;
				}
				public String ViaAdminDefault(){
				
					return null;
				
				}
				public String ViaAdminComment(){
				
				    return "VIA ADMINISTRACION";
				
				}
				public String ViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ViaAdminOriginalDbColumnName(){
				
					return "ViaAdmin";
				
				}

				
			    public String NUso;

				public String getNUso () {
					return this.NUso;
				}

				public Boolean NUsoIsNullable(){
				    return true;
				}
				public Boolean NUsoIsKey(){
				    return false;
				}
				public Integer NUsoLength(){
				    return 50;
				}
				public Integer NUsoPrecision(){
				    return 0;
				}
				public String NUsoDefault(){
				
					return null;
				
				}
				public String NUsoComment(){
				
				    return "NIVEL USO";
				
				}
				public String NUsoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NUsoOriginalDbColumnName(){
				
					return "NUso";
				
				}

				
			    public String NAtencion;

				public String getNAtencion () {
					return this.NAtencion;
				}

				public Boolean NAtencionIsNullable(){
				    return true;
				}
				public Boolean NAtencionIsKey(){
				    return false;
				}
				public Integer NAtencionLength(){
				    return 50;
				}
				public Integer NAtencionPrecision(){
				    return 0;
				}
				public String NAtencionDefault(){
				
					return null;
				
				}
				public String NAtencionComment(){
				
				    return "NIVEL ATENCION";
				
				}
				public String NAtencionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NAtencionOriginalDbColumnName(){
				
					return "NAtencion";
				
				}

				
			    public String ObsNUso;

				public String getObsNUso () {
					return this.ObsNUso;
				}

				public Boolean ObsNUsoIsNullable(){
				    return true;
				}
				public Boolean ObsNUsoIsKey(){
				    return false;
				}
				public Integer ObsNUsoLength(){
				    return 500;
				}
				public Integer ObsNUsoPrecision(){
				    return 0;
				}
				public String ObsNUsoDefault(){
				
					return null;
				
				}
				public String ObsNUsoComment(){
				
				    return "OBSERVACION PARA EL NIVEL DE USO";
				
				}
				public String ObsNUsoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ObsNUsoOriginalDbColumnName(){
				
					return "ObsNUso";
				
				}

				
			    public String UsadoPre;

				public String getUsadoPre () {
					return this.UsadoPre;
				}

				public Boolean UsadoPreIsNullable(){
				    return true;
				}
				public Boolean UsadoPreIsKey(){
				    return false;
				}
				public Integer UsadoPreLength(){
				    return 2;
				}
				public Integer UsadoPrePrecision(){
				    return 0;
				}
				public String UsadoPreDefault(){
				
					return null;
				
				}
				public String UsadoPreComment(){
				
				    return "USADO PARA PREPARACIONES";
				
				}
				public String UsadoPrePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UsadoPreOriginalDbColumnName(){
				
					return "UsadoPre";
				
				}

				
			    public String CodigoUnico;

				public String getCodigoUnico () {
					return this.CodigoUnico;
				}

				public Boolean CodigoUnicoIsNullable(){
				    return true;
				}
				public Boolean CodigoUnicoIsKey(){
				    return false;
				}
				public Integer CodigoUnicoLength(){
				    return 150;
				}
				public Integer CodigoUnicoPrecision(){
				    return 0;
				}
				public String CodigoUnicoDefault(){
				
					return null;
				
				}
				public String CodigoUnicoComment(){
				
				    return "CODIGO UNICO";
				
				}
				public String CodigoUnicoPattern(){
				
					return "";
				
				}
				public String CodigoUnicoOriginalDbColumnName(){
				
					return "CodigoUnico";
				
				}

				
			    public String EspecialidadMedica;

				public String getEspecialidadMedica () {
					return this.EspecialidadMedica;
				}

				public Boolean EspecialidadMedicaIsNullable(){
				    return true;
				}
				public Boolean EspecialidadMedicaIsKey(){
				    return false;
				}
				public Integer EspecialidadMedicaLength(){
				    return 150;
				}
				public Integer EspecialidadMedicaPrecision(){
				    return 0;
				}
				public String EspecialidadMedicaDefault(){
				
					return null;
				
				}
				public String EspecialidadMedicaComment(){
				
				    return "ESPECIALIDAD MEDICA";
				
				}
				public String EspecialidadMedicaPattern(){
				
					return "";
				
				}
				public String EspecialidadMedicaOriginalDbColumnName(){
				
					return "EspecialidadMedica";
				
				}

				
			    public String nuevoNuso;

				public String getNuevoNuso () {
					return this.nuevoNuso;
				}

				public Boolean nuevoNusoIsNullable(){
				    return true;
				}
				public Boolean nuevoNusoIsKey(){
				    return false;
				}
				public Integer nuevoNusoLength(){
				    return 20;
				}
				public Integer nuevoNusoPrecision(){
				    return null;
				}
				public String nuevoNusoDefault(){
				
					return null;
				
				}
				public String nuevoNusoComment(){
				
				    return "";
				
				}
				public String nuevoNusoPattern(){
				
					return "";
				
				}
				public String nuevoNusoOriginalDbColumnName(){
				
					return "nuevoNuso";
				
				}

				
			    public String nuevaEspecialidad;

				public String getNuevaEspecialidad () {
					return this.nuevaEspecialidad;
				}

				public Boolean nuevaEspecialidadIsNullable(){
				    return true;
				}
				public Boolean nuevaEspecialidadIsKey(){
				    return false;
				}
				public Integer nuevaEspecialidadLength(){
				    return 150;
				}
				public Integer nuevaEspecialidadPrecision(){
				    return null;
				}
				public String nuevaEspecialidadDefault(){
				
					return null;
				
				}
				public String nuevaEspecialidadComment(){
				
				    return "";
				
				}
				public String nuevaEspecialidadPattern(){
				
					return "";
				
				}
				public String nuevaEspecialidadOriginalDbColumnName(){
				
					return "nuevaEspecialidad";
				
				}

				
			    public String nuevaAdmin;

				public String getNuevaAdmin () {
					return this.nuevaAdmin;
				}

				public Boolean nuevaAdminIsNullable(){
				    return true;
				}
				public Boolean nuevaAdminIsKey(){
				    return false;
				}
				public Integer nuevaAdminLength(){
				    return 100;
				}
				public Integer nuevaAdminPrecision(){
				    return null;
				}
				public String nuevaAdminDefault(){
				
					return null;
				
				}
				public String nuevaAdminComment(){
				
				    return "";
				
				}
				public String nuevaAdminPattern(){
				
					return "";
				
				}
				public String nuevaAdminOriginalDbColumnName(){
				
					return "nuevaAdmin";
				
				}

				
			    public String nuevaForma;

				public String getNuevaForma () {
					return this.nuevaForma;
				}

				public Boolean nuevaFormaIsNullable(){
				    return true;
				}
				public Boolean nuevaFormaIsKey(){
				    return false;
				}
				public Integer nuevaFormaLength(){
				    return 200;
				}
				public Integer nuevaFormaPrecision(){
				    return null;
				}
				public String nuevaFormaDefault(){
				
					return null;
				
				}
				public String nuevaFormaComment(){
				
				    return "";
				
				}
				public String nuevaFormaPattern(){
				
					return "";
				
				}
				public String nuevaFormaOriginalDbColumnName(){
				
					return "nuevaForma";
				
				}

				
			    public Long linea;

				public Long getLinea () {
					return this.linea;
				}

				public Boolean lineaIsNullable(){
				    return true;
				}
				public Boolean lineaIsKey(){
				    return false;
				}
				public Integer lineaLength(){
				    return null;
				}
				public Integer lineaPrecision(){
				    return null;
				}
				public String lineaDefault(){
				
					return "";
				
				}
				public String lineaComment(){
				
				    return "";
				
				}
				public String lineaPattern(){
				
					return "";
				
				}
				public String lineaOriginalDbColumnName(){
				
					return "linea";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CodSsmp = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.FFarmaceutica = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.NUso = readString(dis);
					
					this.NAtencion = readString(dis);
					
					this.ObsNUso = readString(dis);
					
					this.UsadoPre = readString(dis);
					
					this.CodigoUnico = readString(dis);
					
					this.EspecialidadMedica = readString(dis);
					
					this.nuevoNuso = readString(dis);
					
					this.nuevaEspecialidad = readString(dis);
					
					this.nuevaAdmin = readString(dis);
					
					this.nuevaForma = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.linea = null;
           				} else {
           			    	this.linea = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CodSsmp = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.FFarmaceutica = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.NUso = readString(dis);
					
					this.NAtencion = readString(dis);
					
					this.ObsNUso = readString(dis);
					
					this.UsadoPre = readString(dis);
					
					this.CodigoUnico = readString(dis);
					
					this.EspecialidadMedica = readString(dis);
					
					this.nuevoNuso = readString(dis);
					
					this.nuevaEspecialidad = readString(dis);
					
					this.nuevaAdmin = readString(dis);
					
					this.nuevaForma = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.linea = null;
           				} else {
           			    	this.linea = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CodSsmp,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.FFarmaceutica,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.NUso,dos);
					
					// String
				
						writeString(this.NAtencion,dos);
					
					// String
				
						writeString(this.ObsNUso,dos);
					
					// String
				
						writeString(this.UsadoPre,dos);
					
					// String
				
						writeString(this.CodigoUnico,dos);
					
					// String
				
						writeString(this.EspecialidadMedica,dos);
					
					// String
				
						writeString(this.nuevoNuso,dos);
					
					// String
				
						writeString(this.nuevaEspecialidad,dos);
					
					// String
				
						writeString(this.nuevaAdmin,dos);
					
					// String
				
						writeString(this.nuevaForma,dos);
					
					// Long
				
						if(this.linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.linea);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CodSsmp,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.FFarmaceutica,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.NUso,dos);
					
					// String
				
						writeString(this.NAtencion,dos);
					
					// String
				
						writeString(this.ObsNUso,dos);
					
					// String
				
						writeString(this.UsadoPre,dos);
					
					// String
				
						writeString(this.CodigoUnico,dos);
					
					// String
				
						writeString(this.EspecialidadMedica,dos);
					
					// String
				
						writeString(this.nuevoNuso,dos);
					
					// String
				
						writeString(this.nuevaEspecialidad,dos);
					
					// String
				
						writeString(this.nuevaAdmin,dos);
					
					// String
				
						writeString(this.nuevaForma,dos);
					
					// Long
				
						if(this.linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.linea);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CodSsmp="+CodSsmp);
		sb.append(",NGenerico="+NGenerico);
		sb.append(",Concentracion="+Concentracion);
		sb.append(",FFarmaceutica="+FFarmaceutica);
		sb.append(",ViaAdmin="+ViaAdmin);
		sb.append(",NUso="+NUso);
		sb.append(",NAtencion="+NAtencion);
		sb.append(",ObsNUso="+ObsNUso);
		sb.append(",UsadoPre="+UsadoPre);
		sb.append(",CodigoUnico="+CodigoUnico);
		sb.append(",EspecialidadMedica="+EspecialidadMedica);
		sb.append(",nuevoNuso="+nuevoNuso);
		sb.append(",nuevaEspecialidad="+nuevaEspecialidad);
		sb.append(",nuevaAdmin="+nuevaAdmin);
		sb.append(",nuevaForma="+nuevaForma);
		sb.append(",linea="+String.valueOf(linea));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tOracleInput_12Process(globalMap);

		row39Struct row39 = new row39Struct();
validacionEspecialidadesStruct validacionEspecialidades = new validacionEspecialidadesStruct();
row65Struct row65 = new row65Struct();
row66Struct row66 = new row66Struct();





	
	/**
	 * [tAggregateRow_3_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_3_AGGOUT", false);
		start_Hash.put("tAggregateRow_3_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"validacionEspecialidades");
					}
				
		int tos_count_tAggregateRow_3_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_3 = new java.util.HashMap(); 

// ------------
	class AggOperationStruct_tAggregateRow_3 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				String Mensaje;
    				Long Linea;
    				String CODIGO_UNICO;
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.Mensaje == null) ? 0 : this.Mensaje.hashCode());
							
							result = prime * result + ((this.Linea == null) ? 0 : this.Linea.hashCode());
							
							result = prime * result + ((this.CODIGO_UNICO == null) ? 0 : this.CODIGO_UNICO.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_3 other = (AggOperationStruct_tAggregateRow_3) obj;
			
							if (this.Mensaje == null) {
								if (other.Mensaje != null) 
									return false;
							} else if (!this.Mensaje.equals(other.Mensaje)) 
								return false;
						
							if (this.Linea == null) {
								if (other.Linea != null) 
									return false;
							} else if (!this.Linea.equals(other.Linea)) 
								return false;
						
							if (this.CODIGO_UNICO == null) {
								if (other.CODIGO_UNICO != null) 
									return false;
							} else if (!this.CODIGO_UNICO.equals(other.CODIGO_UNICO)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_3 operation_result_tAggregateRow_3 = null;
	AggOperationStruct_tAggregateRow_3 operation_finder_tAggregateRow_3 = new AggOperationStruct_tAggregateRow_3();
	java.util.Map<AggOperationStruct_tAggregateRow_3,AggOperationStruct_tAggregateRow_3> hash_tAggregateRow_3 = new java.util.HashMap<AggOperationStruct_tAggregateRow_3,AggOperationStruct_tAggregateRow_3>();
	

 



/**
 * [tAggregateRow_3_AGGOUT begin ] stop
 */



	
	/**
	 * [tMap_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_17", false);
		start_Hash.put("tMap_17", System.currentTimeMillis());
		
	
	currentComponent="tMap_17";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row39");
					}
				
		int tos_count_tMap_17 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row54Struct> tHash_Lookup_row54 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row54Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row54Struct>) 
					globalMap.get( "tHash_Lookup_row54" ))
					;					
					
	

row54Struct row54HashKey = new row54Struct();
row54Struct row54Default = new row54Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_17__Struct  {
}
Var__tMap_17__Struct Var__tMap_17 = new Var__tMap_17__Struct();
// ###############################

// ###############################
// # Outputs initialization
validacionEspecialidadesStruct validacionEspecialidades_tmp = new validacionEspecialidadesStruct();
// ###############################

        
        



        









 



/**
 * [tMap_17 begin ] stop
 */



	
	/**
	 * [tHashInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_3", false);
		start_Hash.put("tHashInput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_3";
	
	
		int tos_count_tHashInput_3 = 0;
		


int nb_line_tHashInput_3 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row8Struct> tHashFile_tHashInput_3 = mf_tHashInput_3.getAdvancedMemoryHashFile("tHashFile_CargaMoleculasAcuerdo_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_3==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row8Struct> iterator_tHashInput_3 = tHashFile_tHashInput_3.iterator();
while (iterator_tHashInput_3.hasNext()) {
    row8Struct next_tHashInput_3 = iterator_tHashInput_3.next();

	row39.CodSsmp = next_tHashInput_3.CodSsmp;
	row39.NGenerico = next_tHashInput_3.NGenerico;
	row39.Concentracion = next_tHashInput_3.Concentracion;
	row39.FFarmaceutica = next_tHashInput_3.FFarmaceutica;
	row39.ViaAdmin = next_tHashInput_3.ViaAdmin;
	row39.NUso = next_tHashInput_3.NUso;
	row39.NAtencion = next_tHashInput_3.NAtencion;
	row39.ObsNUso = next_tHashInput_3.ObsNUso;
	row39.UsadoPre = next_tHashInput_3.UsadoPre;
	row39.CodigoUnico = next_tHashInput_3.CodigoUnico;
	row39.EspecialidadMedica = next_tHashInput_3.EspecialidadMedica;
	row39.nuevoNuso = next_tHashInput_3.nuevoNuso;
	row39.nuevaEspecialidad = next_tHashInput_3.nuevaEspecialidad;
	row39.nuevaAdmin = next_tHashInput_3.nuevaAdmin;
	row39.nuevaForma = next_tHashInput_3.nuevaForma;
	row39.linea = next_tHashInput_3.linea;

 



/**
 * [tHashInput_3 begin ] stop
 */
	
	/**
	 * [tHashInput_3 main ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 


	tos_count_tHashInput_3++;

/**
 * [tHashInput_3 main ] stop
 */
	
	/**
	 * [tHashInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_17 main ] start
	 */

	

	
	
	currentComponent="tMap_17";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row39"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_17 = false;
		
						row54Struct row54 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_17 = false;
		boolean mainRowRejected_tMap_17 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row54" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow54 = false;
       		  	    	
       		  	    	
 							row54Struct row54ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_17) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_17 = false;
								
                        		    		    row54HashKey.SIGLA = row39.nuevaEspecialidad;
                        		    		

								
		                        	row54HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row54.lookup( row54HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row54.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_17 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row54Struct fromLookup_row54 = null;
							row54 = row54Default;
										 
							
								 
							
							
								if (tHash_Lookup_row54 !=null && tHash_Lookup_row54.hasNext()) { // G 099
								
							
								
								fromLookup_row54 = tHash_Lookup_row54.next();

							
							
								} // G 099
							
							

							if(fromLookup_row54 != null) {
								row54 = fromLookup_row54;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_17__Struct Var = Var__tMap_17;// ###############################
        // ###############################
        // # Output tables

validacionEspecialidades = null;

if(!rejectedInnerJoin_tMap_17 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'validacionEspecialidades'
// # Filter conditions 
if( rejectedInnerJoin_tMap_17 ) {
validacionEspecialidades_tmp.Mensaje = "No se encuentra la especialidad: ( "+row39.nuevaEspecialidad + " ) para el producto con el codigo único "+row39.CodigoUnico+"  en el sistema" ;
validacionEspecialidades_tmp.Linea = row39.linea;
validacionEspecialidades_tmp.CODIGO_UNICO = row39.CodigoUnico ;
validacionEspecialidades = validacionEspecialidades_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_17 = false;










 


	tos_count_tMap_17++;

/**
 * [tMap_17 main ] stop
 */
	
	/**
	 * [tMap_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_17";
	
	

 



/**
 * [tMap_17 process_data_begin ] stop
 */
// Start of branch "validacionEspecialidades"
if(validacionEspecialidades != null) { 



	
	/**
	 * [tAggregateRow_3_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"validacionEspecialidades"
						
						);
					}
					
	
operation_finder_tAggregateRow_3.Mensaje = validacionEspecialidades.Mensaje;
			operation_finder_tAggregateRow_3.Linea = validacionEspecialidades.Linea;
			operation_finder_tAggregateRow_3.CODIGO_UNICO = validacionEspecialidades.CODIGO_UNICO;
			

	operation_finder_tAggregateRow_3.hashCodeDirty = true;
	
	operation_result_tAggregateRow_3 = hash_tAggregateRow_3.get(operation_finder_tAggregateRow_3);

	

	if(operation_result_tAggregateRow_3 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_3 = new AggOperationStruct_tAggregateRow_3();

		operation_result_tAggregateRow_3.Mensaje = operation_finder_tAggregateRow_3.Mensaje;
				operation_result_tAggregateRow_3.Linea = operation_finder_tAggregateRow_3.Linea;
				operation_result_tAggregateRow_3.CODIGO_UNICO = operation_finder_tAggregateRow_3.CODIGO_UNICO;
				
		
		

		hash_tAggregateRow_3.put(operation_result_tAggregateRow_3, operation_result_tAggregateRow_3);
	
	} // G_OutMain_AggR_001


	


 


	tos_count_tAggregateRow_3_AGGOUT++;

/**
 * [tAggregateRow_3_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_3_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";
	
	

 



/**
 * [tAggregateRow_3_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_3_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";
	
	

 



/**
 * [tAggregateRow_3_AGGOUT process_data_end ] stop
 */

} // End of branch "validacionEspecialidades"




	
	/**
	 * [tMap_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_17";
	
	

 



/**
 * [tMap_17 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_3 end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	
    

		
			nb_line_tHashInput_3++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_CargaMoleculasAcuerdo_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_3_NB_LINE", nb_line_tHashInput_3);       

 

ok_Hash.put("tHashInput_3", true);
end_Hash.put("tHashInput_3", System.currentTimeMillis());




/**
 * [tHashInput_3 end ] stop
 */

	
	/**
	 * [tMap_17 end ] start
	 */

	

	
	
	currentComponent="tMap_17";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row54 != null) {
						tHash_Lookup_row54.endGet();
					}
					globalMap.remove( "tHash_Lookup_row54" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row39");
			  	}
			  	
 

ok_Hash.put("tMap_17", true);
end_Hash.put("tMap_17", System.currentTimeMillis());




/**
 * [tMap_17 end ] stop
 */

	
	/**
	 * [tAggregateRow_3_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"validacionEspecialidades");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_3_AGGOUT", true);
end_Hash.put("tAggregateRow_3_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_3_AGGOUT end ] stop
 */



	
	/**
	 * [tOracleOutput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_8", false);
		start_Hash.put("tOracleOutput_8", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row66");
					}
				
		int tos_count_tOracleOutput_8 = 0;
		






    
    int nb_line_tOracleOutput_8 = 0;
    int nb_line_update_tOracleOutput_8 = 0;
    int nb_line_inserted_tOracleOutput_8 = 0;
    int nb_line_deleted_tOracleOutput_8 = 0;
    int nb_line_rejected_tOracleOutput_8 = 0;

    int tmp_batchUpdateCount_tOracleOutput_8 = 0;

    int deletedCount_tOracleOutput_8=0;
    int updatedCount_tOracleOutput_8=0;
    int insertedCount_tOracleOutput_8=0;
    int rowsToCommitCount_tOracleOutput_8=0;
    int rejectedCount_tOracleOutput_8=0;

    boolean whetherReject_tOracleOutput_8 = false;

    java.sql.Connection conn_tOracleOutput_8 = null;

    //optional table
    String dbschema_tOracleOutput_8 = null;
    String tableName_tOracleOutput_8 = null;
        dbschema_tOracleOutput_8 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_8 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_8=0;

        if(dbschema_tOracleOutput_8 == null || dbschema_tOracleOutput_8.trim().length() == 0) {
            tableName_tOracleOutput_8 = ("ERRORLOG_TEMP");
        } else {
            tableName_tOracleOutput_8 = dbschema_tOracleOutput_8 + "." + ("ERRORLOG_TEMP");
        }
                String insert_tOracleOutput_8 = "INSERT INTO " + tableName_tOracleOutput_8 + " (Mensaje,Linea,CODIGO_UNICO) VALUES (?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_8 = conn_tOracleOutput_8.prepareStatement(insert_tOracleOutput_8);
                        resourceMap.put("pstmt_tOracleOutput_8", pstmt_tOracleOutput_8);





 



/**
 * [tOracleOutput_8 begin ] stop
 */



	
	/**
	 * [tJavaRow_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_16", false);
		start_Hash.put("tJavaRow_16", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_16";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row65");
					}
				
		int tos_count_tJavaRow_16 = 0;
		

int nb_line_tJavaRow_16 = 0;

 



/**
 * [tJavaRow_16 begin ] stop
 */



	
	/**
	 * [tAggregateRow_3_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_3_AGGIN", false);
		start_Hash.put("tAggregateRow_3_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";
	
	
		int tos_count_tAggregateRow_3_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_3> values_tAggregateRow_3 = hash_tAggregateRow_3.values();

globalMap.put("tAggregateRow_3_NB_LINE", values_tAggregateRow_3.size());

for(AggOperationStruct_tAggregateRow_3 aggregated_row_tAggregateRow_3 : values_tAggregateRow_3) { // G_AggR_600



 



/**
 * [tAggregateRow_3_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_3_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";
	
	

            				    row65.Mensaje = aggregated_row_tAggregateRow_3.Mensaje;
            				    
            				    row65.Linea = aggregated_row_tAggregateRow_3.Linea;
            				    
            				    row65.CODIGO_UNICO = aggregated_row_tAggregateRow_3.CODIGO_UNICO;
            				    

 


	tos_count_tAggregateRow_3_AGGIN++;

/**
 * [tAggregateRow_3_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_3_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";
	
	

 



/**
 * [tAggregateRow_3_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_16 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_16";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row65"
						
						);
					}
					

    //Code generate according to input schema and output schema
row66.Mensaje = row65.Mensaje;
row66.Linea = row65.Linea;
row66.CODIGO_UNICO = row65.CODIGO_UNICO;


context.ErrorLog +=1;
    nb_line_tJavaRow_16++;   

 


	tos_count_tJavaRow_16++;

/**
 * [tJavaRow_16 main ] stop
 */
	
	/**
	 * [tJavaRow_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_16";
	
	

 



/**
 * [tJavaRow_16 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_8 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row66"
						
						);
					}
					



        whetherReject_tOracleOutput_8 = false;
                        if(row66.Mensaje == null) {
pstmt_tOracleOutput_8.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_8.setString(1, row66.Mensaje);
}

                        if(row66.Linea == null) {
pstmt_tOracleOutput_8.setNull(2, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_8.setLong(2, row66.Linea);
}

                        if(row66.CODIGO_UNICO == null) {
pstmt_tOracleOutput_8.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_8.setString(3, row66.CODIGO_UNICO);
}

                try {
                    nb_line_tOracleOutput_8++;
                    int processedCount_tOracleOutput_8 = pstmt_tOracleOutput_8.executeUpdate();
                    insertedCount_tOracleOutput_8 += processedCount_tOracleOutput_8;
                    rowsToCommitCount_tOracleOutput_8 += processedCount_tOracleOutput_8;
                } catch(java.lang.Exception e_tOracleOutput_8) {
globalMap.put("tOracleOutput_8_ERROR_MESSAGE",e_tOracleOutput_8.getMessage());
                    whetherReject_tOracleOutput_8 = true;
                            System.err.print(e_tOracleOutput_8.getMessage());
                }

 


	tos_count_tOracleOutput_8++;

/**
 * [tOracleOutput_8 main ] stop
 */
	
	/**
	 * [tOracleOutput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_8";
	
	

 



/**
 * [tOracleOutput_8 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_8";
	
	

 



/**
 * [tOracleOutput_8 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_16";
	
	

 



/**
 * [tJavaRow_16 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_3_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";
	
	

 



/**
 * [tAggregateRow_3_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_3_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";
	
	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_3_AGGIN", true);
end_Hash.put("tAggregateRow_3_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_3_AGGIN end ] stop
 */

	
	/**
	 * [tJavaRow_16 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_16";
	
	

globalMap.put("tJavaRow_16_NB_LINE",nb_line_tJavaRow_16);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row65");
			  	}
			  	
 

ok_Hash.put("tJavaRow_16", true);
end_Hash.put("tJavaRow_16", System.currentTimeMillis());




/**
 * [tJavaRow_16 end ] stop
 */

	
	/**
	 * [tOracleOutput_8 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_8";
	
	
	



	
        if(pstmt_tOracleOutput_8 != null) {
			
				pstmt_tOracleOutput_8.close();
				resourceMap.remove("pstmt_tOracleOutput_8");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_8", true);

	
	nb_line_deleted_tOracleOutput_8=nb_line_deleted_tOracleOutput_8+ deletedCount_tOracleOutput_8;
	nb_line_update_tOracleOutput_8=nb_line_update_tOracleOutput_8 + updatedCount_tOracleOutput_8;
	nb_line_inserted_tOracleOutput_8=nb_line_inserted_tOracleOutput_8 + insertedCount_tOracleOutput_8;
	nb_line_rejected_tOracleOutput_8=nb_line_rejected_tOracleOutput_8 + rejectedCount_tOracleOutput_8;
	
        globalMap.put("tOracleOutput_8_NB_LINE",nb_line_tOracleOutput_8);
        globalMap.put("tOracleOutput_8_NB_LINE_UPDATED",nb_line_update_tOracleOutput_8);
        globalMap.put("tOracleOutput_8_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_8);
        globalMap.put("tOracleOutput_8_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_8);
        globalMap.put("tOracleOutput_8_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_8);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row66");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_8", true);
end_Hash.put("tOracleOutput_8", System.currentTimeMillis());




/**
 * [tOracleOutput_8 end ] stop
 */















				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk14", 0, "ok");
								} 
							
							tHashInput_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_3_AGGIN"
							globalMap.remove("tAggregateRow_3");
						
					     			//free memory for "tMap_17"
					     			globalMap.remove("tHash_Lookup_row54"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 finally ] stop
 */

	
	/**
	 * [tMap_17 finally ] start
	 */

	

	
	
	currentComponent="tMap_17";
	
	

 



/**
 * [tMap_17 finally ] stop
 */

	
	/**
	 * [tAggregateRow_3_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";
	
	

 



/**
 * [tAggregateRow_3_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_3_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";
	
	

 



/**
 * [tAggregateRow_3_AGGIN finally ] stop
 */

	
	/**
	 * [tJavaRow_16 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_16";
	
	

 



/**
 * [tJavaRow_16 finally ] stop
 */

	
	/**
	 * [tOracleOutput_8 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_8";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_8") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_8 = null;
                if ((pstmtToClose_tOracleOutput_8 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_8")) != null) {
                    pstmtToClose_tOracleOutput_8.close();
                }
    }
 



/**
 * [tOracleOutput_8 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row68Struct implements routines.system.IPersistableRow<row68Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String Mensaje;

				public String getMensaje () {
					return this.Mensaje;
				}

				public Boolean MensajeIsNullable(){
				    return true;
				}
				public Boolean MensajeIsKey(){
				    return false;
				}
				public Integer MensajeLength(){
				    return null;
				}
				public Integer MensajePrecision(){
				    return null;
				}
				public String MensajeDefault(){
				
					return null;
				
				}
				public String MensajeComment(){
				
				    return "";
				
				}
				public String MensajePattern(){
				
					return "";
				
				}
				public String MensajeOriginalDbColumnName(){
				
					return "Mensaje";
				
				}

				
			    public Long Linea;

				public Long getLinea () {
					return this.Linea;
				}

				public Boolean LineaIsNullable(){
				    return true;
				}
				public Boolean LineaIsKey(){
				    return false;
				}
				public Integer LineaLength(){
				    return null;
				}
				public Integer LineaPrecision(){
				    return null;
				}
				public String LineaDefault(){
				
					return null;
				
				}
				public String LineaComment(){
				
				    return "";
				
				}
				public String LineaPattern(){
				
					return "";
				
				}
				public String LineaOriginalDbColumnName(){
				
					return "Linea";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return null;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Mensaje="+Mensaje);
		sb.append(",Linea="+String.valueOf(Linea));
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row68Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row67Struct implements routines.system.IPersistableRow<row67Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String Mensaje;

				public String getMensaje () {
					return this.Mensaje;
				}

				public Boolean MensajeIsNullable(){
				    return true;
				}
				public Boolean MensajeIsKey(){
				    return false;
				}
				public Integer MensajeLength(){
				    return null;
				}
				public Integer MensajePrecision(){
				    return null;
				}
				public String MensajeDefault(){
				
					return null;
				
				}
				public String MensajeComment(){
				
				    return "";
				
				}
				public String MensajePattern(){
				
					return "";
				
				}
				public String MensajeOriginalDbColumnName(){
				
					return "Mensaje";
				
				}

				
			    public Long Linea;

				public Long getLinea () {
					return this.Linea;
				}

				public Boolean LineaIsNullable(){
				    return true;
				}
				public Boolean LineaIsKey(){
				    return false;
				}
				public Integer LineaLength(){
				    return null;
				}
				public Integer LineaPrecision(){
				    return null;
				}
				public String LineaDefault(){
				
					return null;
				
				}
				public String LineaComment(){
				
				    return "";
				
				}
				public String LineaPattern(){
				
					return "";
				
				}
				public String LineaOriginalDbColumnName(){
				
					return "Linea";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return null;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Mensaje="+Mensaje);
		sb.append(",Linea="+String.valueOf(Linea));
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row67Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_2 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_2> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String Mensaje;

				public String getMensaje () {
					return this.Mensaje;
				}

				public Boolean MensajeIsNullable(){
				    return true;
				}
				public Boolean MensajeIsKey(){
				    return false;
				}
				public Integer MensajeLength(){
				    return null;
				}
				public Integer MensajePrecision(){
				    return null;
				}
				public String MensajeDefault(){
				
					return null;
				
				}
				public String MensajeComment(){
				
				    return "";
				
				}
				public String MensajePattern(){
				
					return "";
				
				}
				public String MensajeOriginalDbColumnName(){
				
					return "Mensaje";
				
				}

				
			    public Long Linea;

				public Long getLinea () {
					return this.Linea;
				}

				public Boolean LineaIsNullable(){
				    return true;
				}
				public Boolean LineaIsKey(){
				    return false;
				}
				public Integer LineaLength(){
				    return null;
				}
				public Integer LineaPrecision(){
				    return null;
				}
				public String LineaDefault(){
				
					return null;
				
				}
				public String LineaComment(){
				
				    return "";
				
				}
				public String LineaPattern(){
				
					return "";
				
				}
				public String LineaOriginalDbColumnName(){
				
					return "Linea";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return null;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Mensaje="+Mensaje);
		sb.append(",Linea="+String.valueOf(Linea));
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_2 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class validacionTnivelUsoStruct implements routines.system.IPersistableRow<validacionTnivelUsoStruct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String Mensaje;

				public String getMensaje () {
					return this.Mensaje;
				}

				public Boolean MensajeIsNullable(){
				    return true;
				}
				public Boolean MensajeIsKey(){
				    return false;
				}
				public Integer MensajeLength(){
				    return 500;
				}
				public Integer MensajePrecision(){
				    return null;
				}
				public String MensajeDefault(){
				
					return null;
				
				}
				public String MensajeComment(){
				
				    return "";
				
				}
				public String MensajePattern(){
				
					return "";
				
				}
				public String MensajeOriginalDbColumnName(){
				
					return "Mensaje";
				
				}

				
			    public Long Linea;

				public Long getLinea () {
					return this.Linea;
				}

				public Boolean LineaIsNullable(){
				    return true;
				}
				public Boolean LineaIsKey(){
				    return false;
				}
				public Integer LineaLength(){
				    return null;
				}
				public Integer LineaPrecision(){
				    return null;
				}
				public String LineaDefault(){
				
					return null;
				
				}
				public String LineaComment(){
				
				    return "";
				
				}
				public String LineaPattern(){
				
					return "";
				
				}
				public String LineaOriginalDbColumnName(){
				
					return "Linea";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return null;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Mensaje="+Mensaje);
		sb.append(",Linea="+String.valueOf(Linea));
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(validacionTnivelUsoStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row29Struct implements routines.system.IPersistableRow<row29Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String CodSsmp;

				public String getCodSsmp () {
					return this.CodSsmp;
				}

				public Boolean CodSsmpIsNullable(){
				    return true;
				}
				public Boolean CodSsmpIsKey(){
				    return false;
				}
				public Integer CodSsmpLength(){
				    return 15;
				}
				public Integer CodSsmpPrecision(){
				    return 0;
				}
				public String CodSsmpDefault(){
				
					return null;
				
				}
				public String CodSsmpComment(){
				
				    return "CODIGO SSMP";
				
				}
				public String CodSsmpPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CodSsmpOriginalDbColumnName(){
				
					return "CodSsmp";
				
				}

				
			    public String NGenerico;

				public String getNGenerico () {
					return this.NGenerico;
				}

				public Boolean NGenericoIsNullable(){
				    return true;
				}
				public Boolean NGenericoIsKey(){
				    return false;
				}
				public Integer NGenericoLength(){
				    return 200;
				}
				public Integer NGenericoPrecision(){
				    return 0;
				}
				public String NGenericoDefault(){
				
					return null;
				
				}
				public String NGenericoComment(){
				
				    return "NOMBRE GENERICO";
				
				}
				public String NGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NGenericoOriginalDbColumnName(){
				
					return "NGenerico";
				
				}

				
			    public String Concentracion;

				public String getConcentracion () {
					return this.Concentracion;
				}

				public Boolean ConcentracionIsNullable(){
				    return true;
				}
				public Boolean ConcentracionIsKey(){
				    return false;
				}
				public Integer ConcentracionLength(){
				    return 50;
				}
				public Integer ConcentracionPrecision(){
				    return 0;
				}
				public String ConcentracionDefault(){
				
					return null;
				
				}
				public String ConcentracionComment(){
				
				    return "CONCENTRACION";
				
				}
				public String ConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ConcentracionOriginalDbColumnName(){
				
					return "Concentracion";
				
				}

				
			    public String FFarmaceutica;

				public String getFFarmaceutica () {
					return this.FFarmaceutica;
				}

				public Boolean FFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean FFarmaceuticaIsKey(){
				    return false;
				}
				public Integer FFarmaceuticaLength(){
				    return 500;
				}
				public Integer FFarmaceuticaPrecision(){
				    return 0;
				}
				public String FFarmaceuticaDefault(){
				
					return null;
				
				}
				public String FFarmaceuticaComment(){
				
				    return "FORMA FARMACEUTICA";
				
				}
				public String FFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FFarmaceuticaOriginalDbColumnName(){
				
					return "FFarmaceutica";
				
				}

				
			    public String ViaAdmin;

				public String getViaAdmin () {
					return this.ViaAdmin;
				}

				public Boolean ViaAdminIsNullable(){
				    return true;
				}
				public Boolean ViaAdminIsKey(){
				    return false;
				}
				public Integer ViaAdminLength(){
				    return 200;
				}
				public Integer ViaAdminPrecision(){
				    return 0;
				}
				public String ViaAdminDefault(){
				
					return null;
				
				}
				public String ViaAdminComment(){
				
				    return "VIA ADMINISTRACION";
				
				}
				public String ViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ViaAdminOriginalDbColumnName(){
				
					return "ViaAdmin";
				
				}

				
			    public String NUso;

				public String getNUso () {
					return this.NUso;
				}

				public Boolean NUsoIsNullable(){
				    return true;
				}
				public Boolean NUsoIsKey(){
				    return false;
				}
				public Integer NUsoLength(){
				    return 50;
				}
				public Integer NUsoPrecision(){
				    return 0;
				}
				public String NUsoDefault(){
				
					return null;
				
				}
				public String NUsoComment(){
				
				    return "NIVEL USO";
				
				}
				public String NUsoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NUsoOriginalDbColumnName(){
				
					return "NUso";
				
				}

				
			    public String NAtencion;

				public String getNAtencion () {
					return this.NAtencion;
				}

				public Boolean NAtencionIsNullable(){
				    return true;
				}
				public Boolean NAtencionIsKey(){
				    return false;
				}
				public Integer NAtencionLength(){
				    return 50;
				}
				public Integer NAtencionPrecision(){
				    return 0;
				}
				public String NAtencionDefault(){
				
					return null;
				
				}
				public String NAtencionComment(){
				
				    return "NIVEL ATENCION";
				
				}
				public String NAtencionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NAtencionOriginalDbColumnName(){
				
					return "NAtencion";
				
				}

				
			    public String ObsNUso;

				public String getObsNUso () {
					return this.ObsNUso;
				}

				public Boolean ObsNUsoIsNullable(){
				    return true;
				}
				public Boolean ObsNUsoIsKey(){
				    return false;
				}
				public Integer ObsNUsoLength(){
				    return 500;
				}
				public Integer ObsNUsoPrecision(){
				    return 0;
				}
				public String ObsNUsoDefault(){
				
					return null;
				
				}
				public String ObsNUsoComment(){
				
				    return "OBSERVACION PARA EL NIVEL DE USO";
				
				}
				public String ObsNUsoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ObsNUsoOriginalDbColumnName(){
				
					return "ObsNUso";
				
				}

				
			    public String UsadoPre;

				public String getUsadoPre () {
					return this.UsadoPre;
				}

				public Boolean UsadoPreIsNullable(){
				    return true;
				}
				public Boolean UsadoPreIsKey(){
				    return false;
				}
				public Integer UsadoPreLength(){
				    return 2;
				}
				public Integer UsadoPrePrecision(){
				    return 0;
				}
				public String UsadoPreDefault(){
				
					return null;
				
				}
				public String UsadoPreComment(){
				
				    return "USADO PARA PREPARACIONES";
				
				}
				public String UsadoPrePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UsadoPreOriginalDbColumnName(){
				
					return "UsadoPre";
				
				}

				
			    public String CodigoUnico;

				public String getCodigoUnico () {
					return this.CodigoUnico;
				}

				public Boolean CodigoUnicoIsNullable(){
				    return true;
				}
				public Boolean CodigoUnicoIsKey(){
				    return false;
				}
				public Integer CodigoUnicoLength(){
				    return 150;
				}
				public Integer CodigoUnicoPrecision(){
				    return 0;
				}
				public String CodigoUnicoDefault(){
				
					return null;
				
				}
				public String CodigoUnicoComment(){
				
				    return "CODIGO UNICO";
				
				}
				public String CodigoUnicoPattern(){
				
					return "";
				
				}
				public String CodigoUnicoOriginalDbColumnName(){
				
					return "CodigoUnico";
				
				}

				
			    public String EspecialidadMedica;

				public String getEspecialidadMedica () {
					return this.EspecialidadMedica;
				}

				public Boolean EspecialidadMedicaIsNullable(){
				    return true;
				}
				public Boolean EspecialidadMedicaIsKey(){
				    return false;
				}
				public Integer EspecialidadMedicaLength(){
				    return 150;
				}
				public Integer EspecialidadMedicaPrecision(){
				    return 0;
				}
				public String EspecialidadMedicaDefault(){
				
					return null;
				
				}
				public String EspecialidadMedicaComment(){
				
				    return "ESPECIALIDAD MEDICA";
				
				}
				public String EspecialidadMedicaPattern(){
				
					return "";
				
				}
				public String EspecialidadMedicaOriginalDbColumnName(){
				
					return "EspecialidadMedica";
				
				}

				
			    public String nuevoNuso;

				public String getNuevoNuso () {
					return this.nuevoNuso;
				}

				public Boolean nuevoNusoIsNullable(){
				    return true;
				}
				public Boolean nuevoNusoIsKey(){
				    return false;
				}
				public Integer nuevoNusoLength(){
				    return 20;
				}
				public Integer nuevoNusoPrecision(){
				    return null;
				}
				public String nuevoNusoDefault(){
				
					return null;
				
				}
				public String nuevoNusoComment(){
				
				    return "";
				
				}
				public String nuevoNusoPattern(){
				
					return "";
				
				}
				public String nuevoNusoOriginalDbColumnName(){
				
					return "nuevoNuso";
				
				}

				
			    public String nuevaEspecialidad;

				public String getNuevaEspecialidad () {
					return this.nuevaEspecialidad;
				}

				public Boolean nuevaEspecialidadIsNullable(){
				    return true;
				}
				public Boolean nuevaEspecialidadIsKey(){
				    return false;
				}
				public Integer nuevaEspecialidadLength(){
				    return 150;
				}
				public Integer nuevaEspecialidadPrecision(){
				    return null;
				}
				public String nuevaEspecialidadDefault(){
				
					return null;
				
				}
				public String nuevaEspecialidadComment(){
				
				    return "";
				
				}
				public String nuevaEspecialidadPattern(){
				
					return "";
				
				}
				public String nuevaEspecialidadOriginalDbColumnName(){
				
					return "nuevaEspecialidad";
				
				}

				
			    public String nuevaAdmin;

				public String getNuevaAdmin () {
					return this.nuevaAdmin;
				}

				public Boolean nuevaAdminIsNullable(){
				    return true;
				}
				public Boolean nuevaAdminIsKey(){
				    return false;
				}
				public Integer nuevaAdminLength(){
				    return 100;
				}
				public Integer nuevaAdminPrecision(){
				    return null;
				}
				public String nuevaAdminDefault(){
				
					return null;
				
				}
				public String nuevaAdminComment(){
				
				    return "";
				
				}
				public String nuevaAdminPattern(){
				
					return "";
				
				}
				public String nuevaAdminOriginalDbColumnName(){
				
					return "nuevaAdmin";
				
				}

				
			    public String nuevaForma;

				public String getNuevaForma () {
					return this.nuevaForma;
				}

				public Boolean nuevaFormaIsNullable(){
				    return true;
				}
				public Boolean nuevaFormaIsKey(){
				    return false;
				}
				public Integer nuevaFormaLength(){
				    return 200;
				}
				public Integer nuevaFormaPrecision(){
				    return null;
				}
				public String nuevaFormaDefault(){
				
					return null;
				
				}
				public String nuevaFormaComment(){
				
				    return "";
				
				}
				public String nuevaFormaPattern(){
				
					return "";
				
				}
				public String nuevaFormaOriginalDbColumnName(){
				
					return "nuevaForma";
				
				}

				
			    public Long linea;

				public Long getLinea () {
					return this.linea;
				}

				public Boolean lineaIsNullable(){
				    return true;
				}
				public Boolean lineaIsKey(){
				    return false;
				}
				public Integer lineaLength(){
				    return null;
				}
				public Integer lineaPrecision(){
				    return null;
				}
				public String lineaDefault(){
				
					return "";
				
				}
				public String lineaComment(){
				
				    return "";
				
				}
				public String lineaPattern(){
				
					return "";
				
				}
				public String lineaOriginalDbColumnName(){
				
					return "linea";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CodSsmp = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.FFarmaceutica = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.NUso = readString(dis);
					
					this.NAtencion = readString(dis);
					
					this.ObsNUso = readString(dis);
					
					this.UsadoPre = readString(dis);
					
					this.CodigoUnico = readString(dis);
					
					this.EspecialidadMedica = readString(dis);
					
					this.nuevoNuso = readString(dis);
					
					this.nuevaEspecialidad = readString(dis);
					
					this.nuevaAdmin = readString(dis);
					
					this.nuevaForma = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.linea = null;
           				} else {
           			    	this.linea = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CodSsmp = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.FFarmaceutica = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.NUso = readString(dis);
					
					this.NAtencion = readString(dis);
					
					this.ObsNUso = readString(dis);
					
					this.UsadoPre = readString(dis);
					
					this.CodigoUnico = readString(dis);
					
					this.EspecialidadMedica = readString(dis);
					
					this.nuevoNuso = readString(dis);
					
					this.nuevaEspecialidad = readString(dis);
					
					this.nuevaAdmin = readString(dis);
					
					this.nuevaForma = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.linea = null;
           				} else {
           			    	this.linea = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CodSsmp,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.FFarmaceutica,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.NUso,dos);
					
					// String
				
						writeString(this.NAtencion,dos);
					
					// String
				
						writeString(this.ObsNUso,dos);
					
					// String
				
						writeString(this.UsadoPre,dos);
					
					// String
				
						writeString(this.CodigoUnico,dos);
					
					// String
				
						writeString(this.EspecialidadMedica,dos);
					
					// String
				
						writeString(this.nuevoNuso,dos);
					
					// String
				
						writeString(this.nuevaEspecialidad,dos);
					
					// String
				
						writeString(this.nuevaAdmin,dos);
					
					// String
				
						writeString(this.nuevaForma,dos);
					
					// Long
				
						if(this.linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.linea);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CodSsmp,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.FFarmaceutica,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.NUso,dos);
					
					// String
				
						writeString(this.NAtencion,dos);
					
					// String
				
						writeString(this.ObsNUso,dos);
					
					// String
				
						writeString(this.UsadoPre,dos);
					
					// String
				
						writeString(this.CodigoUnico,dos);
					
					// String
				
						writeString(this.EspecialidadMedica,dos);
					
					// String
				
						writeString(this.nuevoNuso,dos);
					
					// String
				
						writeString(this.nuevaEspecialidad,dos);
					
					// String
				
						writeString(this.nuevaAdmin,dos);
					
					// String
				
						writeString(this.nuevaForma,dos);
					
					// Long
				
						if(this.linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.linea);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CodSsmp="+CodSsmp);
		sb.append(",NGenerico="+NGenerico);
		sb.append(",Concentracion="+Concentracion);
		sb.append(",FFarmaceutica="+FFarmaceutica);
		sb.append(",ViaAdmin="+ViaAdmin);
		sb.append(",NUso="+NUso);
		sb.append(",NAtencion="+NAtencion);
		sb.append(",ObsNUso="+ObsNUso);
		sb.append(",UsadoPre="+UsadoPre);
		sb.append(",CodigoUnico="+CodigoUnico);
		sb.append(",EspecialidadMedica="+EspecialidadMedica);
		sb.append(",nuevoNuso="+nuevoNuso);
		sb.append(",nuevaEspecialidad="+nuevaEspecialidad);
		sb.append(",nuevaAdmin="+nuevaAdmin);
		sb.append(",nuevaForma="+nuevaForma);
		sb.append(",linea="+String.valueOf(linea));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row29Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_4Struct implements routines.system.IPersistableRow<after_tHashInput_4Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String CodSsmp;

				public String getCodSsmp () {
					return this.CodSsmp;
				}

				public Boolean CodSsmpIsNullable(){
				    return true;
				}
				public Boolean CodSsmpIsKey(){
				    return false;
				}
				public Integer CodSsmpLength(){
				    return 15;
				}
				public Integer CodSsmpPrecision(){
				    return 0;
				}
				public String CodSsmpDefault(){
				
					return null;
				
				}
				public String CodSsmpComment(){
				
				    return "CODIGO SSMP";
				
				}
				public String CodSsmpPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CodSsmpOriginalDbColumnName(){
				
					return "CodSsmp";
				
				}

				
			    public String NGenerico;

				public String getNGenerico () {
					return this.NGenerico;
				}

				public Boolean NGenericoIsNullable(){
				    return true;
				}
				public Boolean NGenericoIsKey(){
				    return false;
				}
				public Integer NGenericoLength(){
				    return 200;
				}
				public Integer NGenericoPrecision(){
				    return 0;
				}
				public String NGenericoDefault(){
				
					return null;
				
				}
				public String NGenericoComment(){
				
				    return "NOMBRE GENERICO";
				
				}
				public String NGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NGenericoOriginalDbColumnName(){
				
					return "NGenerico";
				
				}

				
			    public String Concentracion;

				public String getConcentracion () {
					return this.Concentracion;
				}

				public Boolean ConcentracionIsNullable(){
				    return true;
				}
				public Boolean ConcentracionIsKey(){
				    return false;
				}
				public Integer ConcentracionLength(){
				    return 50;
				}
				public Integer ConcentracionPrecision(){
				    return 0;
				}
				public String ConcentracionDefault(){
				
					return null;
				
				}
				public String ConcentracionComment(){
				
				    return "CONCENTRACION";
				
				}
				public String ConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ConcentracionOriginalDbColumnName(){
				
					return "Concentracion";
				
				}

				
			    public String FFarmaceutica;

				public String getFFarmaceutica () {
					return this.FFarmaceutica;
				}

				public Boolean FFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean FFarmaceuticaIsKey(){
				    return false;
				}
				public Integer FFarmaceuticaLength(){
				    return 500;
				}
				public Integer FFarmaceuticaPrecision(){
				    return 0;
				}
				public String FFarmaceuticaDefault(){
				
					return null;
				
				}
				public String FFarmaceuticaComment(){
				
				    return "FORMA FARMACEUTICA";
				
				}
				public String FFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FFarmaceuticaOriginalDbColumnName(){
				
					return "FFarmaceutica";
				
				}

				
			    public String ViaAdmin;

				public String getViaAdmin () {
					return this.ViaAdmin;
				}

				public Boolean ViaAdminIsNullable(){
				    return true;
				}
				public Boolean ViaAdminIsKey(){
				    return false;
				}
				public Integer ViaAdminLength(){
				    return 200;
				}
				public Integer ViaAdminPrecision(){
				    return 0;
				}
				public String ViaAdminDefault(){
				
					return null;
				
				}
				public String ViaAdminComment(){
				
				    return "VIA ADMINISTRACION";
				
				}
				public String ViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ViaAdminOriginalDbColumnName(){
				
					return "ViaAdmin";
				
				}

				
			    public String NUso;

				public String getNUso () {
					return this.NUso;
				}

				public Boolean NUsoIsNullable(){
				    return true;
				}
				public Boolean NUsoIsKey(){
				    return false;
				}
				public Integer NUsoLength(){
				    return 50;
				}
				public Integer NUsoPrecision(){
				    return 0;
				}
				public String NUsoDefault(){
				
					return null;
				
				}
				public String NUsoComment(){
				
				    return "NIVEL USO";
				
				}
				public String NUsoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NUsoOriginalDbColumnName(){
				
					return "NUso";
				
				}

				
			    public String NAtencion;

				public String getNAtencion () {
					return this.NAtencion;
				}

				public Boolean NAtencionIsNullable(){
				    return true;
				}
				public Boolean NAtencionIsKey(){
				    return false;
				}
				public Integer NAtencionLength(){
				    return 50;
				}
				public Integer NAtencionPrecision(){
				    return 0;
				}
				public String NAtencionDefault(){
				
					return null;
				
				}
				public String NAtencionComment(){
				
				    return "NIVEL ATENCION";
				
				}
				public String NAtencionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NAtencionOriginalDbColumnName(){
				
					return "NAtencion";
				
				}

				
			    public String ObsNUso;

				public String getObsNUso () {
					return this.ObsNUso;
				}

				public Boolean ObsNUsoIsNullable(){
				    return true;
				}
				public Boolean ObsNUsoIsKey(){
				    return false;
				}
				public Integer ObsNUsoLength(){
				    return 500;
				}
				public Integer ObsNUsoPrecision(){
				    return 0;
				}
				public String ObsNUsoDefault(){
				
					return null;
				
				}
				public String ObsNUsoComment(){
				
				    return "OBSERVACION PARA EL NIVEL DE USO";
				
				}
				public String ObsNUsoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ObsNUsoOriginalDbColumnName(){
				
					return "ObsNUso";
				
				}

				
			    public String UsadoPre;

				public String getUsadoPre () {
					return this.UsadoPre;
				}

				public Boolean UsadoPreIsNullable(){
				    return true;
				}
				public Boolean UsadoPreIsKey(){
				    return false;
				}
				public Integer UsadoPreLength(){
				    return 2;
				}
				public Integer UsadoPrePrecision(){
				    return 0;
				}
				public String UsadoPreDefault(){
				
					return null;
				
				}
				public String UsadoPreComment(){
				
				    return "USADO PARA PREPARACIONES";
				
				}
				public String UsadoPrePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UsadoPreOriginalDbColumnName(){
				
					return "UsadoPre";
				
				}

				
			    public String CodigoUnico;

				public String getCodigoUnico () {
					return this.CodigoUnico;
				}

				public Boolean CodigoUnicoIsNullable(){
				    return true;
				}
				public Boolean CodigoUnicoIsKey(){
				    return false;
				}
				public Integer CodigoUnicoLength(){
				    return 150;
				}
				public Integer CodigoUnicoPrecision(){
				    return 0;
				}
				public String CodigoUnicoDefault(){
				
					return null;
				
				}
				public String CodigoUnicoComment(){
				
				    return "CODIGO UNICO";
				
				}
				public String CodigoUnicoPattern(){
				
					return "";
				
				}
				public String CodigoUnicoOriginalDbColumnName(){
				
					return "CodigoUnico";
				
				}

				
			    public String EspecialidadMedica;

				public String getEspecialidadMedica () {
					return this.EspecialidadMedica;
				}

				public Boolean EspecialidadMedicaIsNullable(){
				    return true;
				}
				public Boolean EspecialidadMedicaIsKey(){
				    return false;
				}
				public Integer EspecialidadMedicaLength(){
				    return 150;
				}
				public Integer EspecialidadMedicaPrecision(){
				    return 0;
				}
				public String EspecialidadMedicaDefault(){
				
					return null;
				
				}
				public String EspecialidadMedicaComment(){
				
				    return "ESPECIALIDAD MEDICA";
				
				}
				public String EspecialidadMedicaPattern(){
				
					return "";
				
				}
				public String EspecialidadMedicaOriginalDbColumnName(){
				
					return "EspecialidadMedica";
				
				}

				
			    public String nuevoNuso;

				public String getNuevoNuso () {
					return this.nuevoNuso;
				}

				public Boolean nuevoNusoIsNullable(){
				    return true;
				}
				public Boolean nuevoNusoIsKey(){
				    return false;
				}
				public Integer nuevoNusoLength(){
				    return 20;
				}
				public Integer nuevoNusoPrecision(){
				    return null;
				}
				public String nuevoNusoDefault(){
				
					return null;
				
				}
				public String nuevoNusoComment(){
				
				    return "";
				
				}
				public String nuevoNusoPattern(){
				
					return "";
				
				}
				public String nuevoNusoOriginalDbColumnName(){
				
					return "nuevoNuso";
				
				}

				
			    public String nuevaEspecialidad;

				public String getNuevaEspecialidad () {
					return this.nuevaEspecialidad;
				}

				public Boolean nuevaEspecialidadIsNullable(){
				    return true;
				}
				public Boolean nuevaEspecialidadIsKey(){
				    return false;
				}
				public Integer nuevaEspecialidadLength(){
				    return 150;
				}
				public Integer nuevaEspecialidadPrecision(){
				    return null;
				}
				public String nuevaEspecialidadDefault(){
				
					return null;
				
				}
				public String nuevaEspecialidadComment(){
				
				    return "";
				
				}
				public String nuevaEspecialidadPattern(){
				
					return "";
				
				}
				public String nuevaEspecialidadOriginalDbColumnName(){
				
					return "nuevaEspecialidad";
				
				}

				
			    public String nuevaAdmin;

				public String getNuevaAdmin () {
					return this.nuevaAdmin;
				}

				public Boolean nuevaAdminIsNullable(){
				    return true;
				}
				public Boolean nuevaAdminIsKey(){
				    return false;
				}
				public Integer nuevaAdminLength(){
				    return 100;
				}
				public Integer nuevaAdminPrecision(){
				    return null;
				}
				public String nuevaAdminDefault(){
				
					return null;
				
				}
				public String nuevaAdminComment(){
				
				    return "";
				
				}
				public String nuevaAdminPattern(){
				
					return "";
				
				}
				public String nuevaAdminOriginalDbColumnName(){
				
					return "nuevaAdmin";
				
				}

				
			    public String nuevaForma;

				public String getNuevaForma () {
					return this.nuevaForma;
				}

				public Boolean nuevaFormaIsNullable(){
				    return true;
				}
				public Boolean nuevaFormaIsKey(){
				    return false;
				}
				public Integer nuevaFormaLength(){
				    return 200;
				}
				public Integer nuevaFormaPrecision(){
				    return null;
				}
				public String nuevaFormaDefault(){
				
					return null;
				
				}
				public String nuevaFormaComment(){
				
				    return "";
				
				}
				public String nuevaFormaPattern(){
				
					return "";
				
				}
				public String nuevaFormaOriginalDbColumnName(){
				
					return "nuevaForma";
				
				}

				
			    public Long linea;

				public Long getLinea () {
					return this.linea;
				}

				public Boolean lineaIsNullable(){
				    return true;
				}
				public Boolean lineaIsKey(){
				    return false;
				}
				public Integer lineaLength(){
				    return null;
				}
				public Integer lineaPrecision(){
				    return null;
				}
				public String lineaDefault(){
				
					return "";
				
				}
				public String lineaComment(){
				
				    return "";
				
				}
				public String lineaPattern(){
				
					return "";
				
				}
				public String lineaOriginalDbColumnName(){
				
					return "linea";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CodSsmp = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.FFarmaceutica = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.NUso = readString(dis);
					
					this.NAtencion = readString(dis);
					
					this.ObsNUso = readString(dis);
					
					this.UsadoPre = readString(dis);
					
					this.CodigoUnico = readString(dis);
					
					this.EspecialidadMedica = readString(dis);
					
					this.nuevoNuso = readString(dis);
					
					this.nuevaEspecialidad = readString(dis);
					
					this.nuevaAdmin = readString(dis);
					
					this.nuevaForma = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.linea = null;
           				} else {
           			    	this.linea = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CodSsmp = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.FFarmaceutica = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.NUso = readString(dis);
					
					this.NAtencion = readString(dis);
					
					this.ObsNUso = readString(dis);
					
					this.UsadoPre = readString(dis);
					
					this.CodigoUnico = readString(dis);
					
					this.EspecialidadMedica = readString(dis);
					
					this.nuevoNuso = readString(dis);
					
					this.nuevaEspecialidad = readString(dis);
					
					this.nuevaAdmin = readString(dis);
					
					this.nuevaForma = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.linea = null;
           				} else {
           			    	this.linea = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CodSsmp,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.FFarmaceutica,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.NUso,dos);
					
					// String
				
						writeString(this.NAtencion,dos);
					
					// String
				
						writeString(this.ObsNUso,dos);
					
					// String
				
						writeString(this.UsadoPre,dos);
					
					// String
				
						writeString(this.CodigoUnico,dos);
					
					// String
				
						writeString(this.EspecialidadMedica,dos);
					
					// String
				
						writeString(this.nuevoNuso,dos);
					
					// String
				
						writeString(this.nuevaEspecialidad,dos);
					
					// String
				
						writeString(this.nuevaAdmin,dos);
					
					// String
				
						writeString(this.nuevaForma,dos);
					
					// Long
				
						if(this.linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.linea);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CodSsmp,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.FFarmaceutica,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.NUso,dos);
					
					// String
				
						writeString(this.NAtencion,dos);
					
					// String
				
						writeString(this.ObsNUso,dos);
					
					// String
				
						writeString(this.UsadoPre,dos);
					
					// String
				
						writeString(this.CodigoUnico,dos);
					
					// String
				
						writeString(this.EspecialidadMedica,dos);
					
					// String
				
						writeString(this.nuevoNuso,dos);
					
					// String
				
						writeString(this.nuevaEspecialidad,dos);
					
					// String
				
						writeString(this.nuevaAdmin,dos);
					
					// String
				
						writeString(this.nuevaForma,dos);
					
					// Long
				
						if(this.linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.linea);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CodSsmp="+CodSsmp);
		sb.append(",NGenerico="+NGenerico);
		sb.append(",Concentracion="+Concentracion);
		sb.append(",FFarmaceutica="+FFarmaceutica);
		sb.append(",ViaAdmin="+ViaAdmin);
		sb.append(",NUso="+NUso);
		sb.append(",NAtencion="+NAtencion);
		sb.append(",ObsNUso="+ObsNUso);
		sb.append(",UsadoPre="+UsadoPre);
		sb.append(",CodigoUnico="+CodigoUnico);
		sb.append(",EspecialidadMedica="+EspecialidadMedica);
		sb.append(",nuevoNuso="+nuevoNuso);
		sb.append(",nuevaEspecialidad="+nuevaEspecialidad);
		sb.append(",nuevaAdmin="+nuevaAdmin);
		sb.append(",nuevaForma="+nuevaForma);
		sb.append(",linea="+String.valueOf(linea));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tOracleInput_19Process(globalMap);

		row29Struct row29 = new row29Struct();
validacionTnivelUsoStruct validacionTnivelUso = new validacionTnivelUsoStruct();
row67Struct row67 = new row67Struct();
row68Struct row68 = new row68Struct();





	
	/**
	 * [tAggregateRow_2_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_2_AGGOUT", false);
		start_Hash.put("tAggregateRow_2_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"validacionTnivelUso");
					}
				
		int tos_count_tAggregateRow_2_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_2 = new java.util.HashMap(); 

// ------------
	class AggOperationStruct_tAggregateRow_2 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				String Mensaje;
    				Long Linea;
    				String CODIGO_UNICO;
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.Mensaje == null) ? 0 : this.Mensaje.hashCode());
							
							result = prime * result + ((this.Linea == null) ? 0 : this.Linea.hashCode());
							
							result = prime * result + ((this.CODIGO_UNICO == null) ? 0 : this.CODIGO_UNICO.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_2 other = (AggOperationStruct_tAggregateRow_2) obj;
			
							if (this.Mensaje == null) {
								if (other.Mensaje != null) 
									return false;
							} else if (!this.Mensaje.equals(other.Mensaje)) 
								return false;
						
							if (this.Linea == null) {
								if (other.Linea != null) 
									return false;
							} else if (!this.Linea.equals(other.Linea)) 
								return false;
						
							if (this.CODIGO_UNICO == null) {
								if (other.CODIGO_UNICO != null) 
									return false;
							} else if (!this.CODIGO_UNICO.equals(other.CODIGO_UNICO)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_2 operation_result_tAggregateRow_2 = null;
	AggOperationStruct_tAggregateRow_2 operation_finder_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();
	java.util.Map<AggOperationStruct_tAggregateRow_2,AggOperationStruct_tAggregateRow_2> hash_tAggregateRow_2 = new java.util.HashMap<AggOperationStruct_tAggregateRow_2,AggOperationStruct_tAggregateRow_2>();
	

 



/**
 * [tAggregateRow_2_AGGOUT begin ] stop
 */



	
	/**
	 * [tMap_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_16", false);
		start_Hash.put("tMap_16", System.currentTimeMillis());
		
	
	currentComponent="tMap_16";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row29");
					}
				
		int tos_count_tMap_16 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row55Struct> tHash_Lookup_row55 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row55Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row55Struct>) 
					globalMap.get( "tHash_Lookup_row55" ))
					;					
					
	

row55Struct row55HashKey = new row55Struct();
row55Struct row55Default = new row55Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_16__Struct  {
}
Var__tMap_16__Struct Var__tMap_16 = new Var__tMap_16__Struct();
// ###############################

// ###############################
// # Outputs initialization
validacionTnivelUsoStruct validacionTnivelUso_tmp = new validacionTnivelUsoStruct();
// ###############################

        
        



        









 



/**
 * [tMap_16 begin ] stop
 */



	
	/**
	 * [tHashInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_4", false);
		start_Hash.put("tHashInput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_4";
	
	
		int tos_count_tHashInput_4 = 0;
		


int nb_line_tHashInput_4 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row8Struct> tHashFile_tHashInput_4 = mf_tHashInput_4.getAdvancedMemoryHashFile("tHashFile_CargaMoleculasAcuerdo_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_4==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row8Struct> iterator_tHashInput_4 = tHashFile_tHashInput_4.iterator();
while (iterator_tHashInput_4.hasNext()) {
    row8Struct next_tHashInput_4 = iterator_tHashInput_4.next();

	row29.CodSsmp = next_tHashInput_4.CodSsmp;
	row29.NGenerico = next_tHashInput_4.NGenerico;
	row29.Concentracion = next_tHashInput_4.Concentracion;
	row29.FFarmaceutica = next_tHashInput_4.FFarmaceutica;
	row29.ViaAdmin = next_tHashInput_4.ViaAdmin;
	row29.NUso = next_tHashInput_4.NUso;
	row29.NAtencion = next_tHashInput_4.NAtencion;
	row29.ObsNUso = next_tHashInput_4.ObsNUso;
	row29.UsadoPre = next_tHashInput_4.UsadoPre;
	row29.CodigoUnico = next_tHashInput_4.CodigoUnico;
	row29.EspecialidadMedica = next_tHashInput_4.EspecialidadMedica;
	row29.nuevoNuso = next_tHashInput_4.nuevoNuso;
	row29.nuevaEspecialidad = next_tHashInput_4.nuevaEspecialidad;
	row29.nuevaAdmin = next_tHashInput_4.nuevaAdmin;
	row29.nuevaForma = next_tHashInput_4.nuevaForma;
	row29.linea = next_tHashInput_4.linea;

 



/**
 * [tHashInput_4 begin ] stop
 */
	
	/**
	 * [tHashInput_4 main ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 


	tos_count_tHashInput_4++;

/**
 * [tHashInput_4 main ] stop
 */
	
	/**
	 * [tHashInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_16 main ] start
	 */

	

	
	
	currentComponent="tMap_16";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row29"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_16 = false;
		
						row55Struct row55 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_16 = false;
		boolean mainRowRejected_tMap_16 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row55" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow55 = false;
       		  	    	
       		  	    	
 							row55Struct row55ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_16) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_16 = false;
								
                        		    		    row55HashKey.SIGLA = row29.nuevoNuso;
                        		    		

								
		                        	row55HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row55.lookup( row55HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row55.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_16 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row55Struct fromLookup_row55 = null;
							row55 = row55Default;
										 
							
								 
							
							
								if (tHash_Lookup_row55 !=null && tHash_Lookup_row55.hasNext()) { // G 099
								
							
								
								fromLookup_row55 = tHash_Lookup_row55.next();

							
							
								} // G 099
							
							

							if(fromLookup_row55 != null) {
								row55 = fromLookup_row55;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_16__Struct Var = Var__tMap_16;// ###############################
        // ###############################
        // # Output tables

validacionTnivelUso = null;

if(!rejectedInnerJoin_tMap_16 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'validacionTnivelUso'
// # Filter conditions 
if( rejectedInnerJoin_tMap_16 ) {
validacionTnivelUso_tmp.Mensaje = "No se encuentra el nivel de uso: ( "+row29.NUso + " ) para el producto con el codigo único "+row29.CodigoUnico+"  en el sistema" ;
validacionTnivelUso_tmp.Linea = row29.linea;
validacionTnivelUso_tmp.CODIGO_UNICO = row29.CodigoUnico ;
validacionTnivelUso = validacionTnivelUso_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_16 = false;










 


	tos_count_tMap_16++;

/**
 * [tMap_16 main ] stop
 */
	
	/**
	 * [tMap_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_16";
	
	

 



/**
 * [tMap_16 process_data_begin ] stop
 */
// Start of branch "validacionTnivelUso"
if(validacionTnivelUso != null) { 



	
	/**
	 * [tAggregateRow_2_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"validacionTnivelUso"
						
						);
					}
					
	
operation_finder_tAggregateRow_2.Mensaje = validacionTnivelUso.Mensaje;
			operation_finder_tAggregateRow_2.Linea = validacionTnivelUso.Linea;
			operation_finder_tAggregateRow_2.CODIGO_UNICO = validacionTnivelUso.CODIGO_UNICO;
			

	operation_finder_tAggregateRow_2.hashCodeDirty = true;
	
	operation_result_tAggregateRow_2 = hash_tAggregateRow_2.get(operation_finder_tAggregateRow_2);

	

	if(operation_result_tAggregateRow_2 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();

		operation_result_tAggregateRow_2.Mensaje = operation_finder_tAggregateRow_2.Mensaje;
				operation_result_tAggregateRow_2.Linea = operation_finder_tAggregateRow_2.Linea;
				operation_result_tAggregateRow_2.CODIGO_UNICO = operation_finder_tAggregateRow_2.CODIGO_UNICO;
				
		
		

		hash_tAggregateRow_2.put(operation_result_tAggregateRow_2, operation_result_tAggregateRow_2);
	
	} // G_OutMain_AggR_001


	


 


	tos_count_tAggregateRow_2_AGGOUT++;

/**
 * [tAggregateRow_2_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";
	
	

 



/**
 * [tAggregateRow_2_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";
	
	

 



/**
 * [tAggregateRow_2_AGGOUT process_data_end ] stop
 */

} // End of branch "validacionTnivelUso"




	
	/**
	 * [tMap_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_16";
	
	

 



/**
 * [tMap_16 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_4 end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	
    

		
			nb_line_tHashInput_4++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_CargaMoleculasAcuerdo_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_4_NB_LINE", nb_line_tHashInput_4);       

 

ok_Hash.put("tHashInput_4", true);
end_Hash.put("tHashInput_4", System.currentTimeMillis());




/**
 * [tHashInput_4 end ] stop
 */

	
	/**
	 * [tMap_16 end ] start
	 */

	

	
	
	currentComponent="tMap_16";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row55 != null) {
						tHash_Lookup_row55.endGet();
					}
					globalMap.remove( "tHash_Lookup_row55" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row29");
			  	}
			  	
 

ok_Hash.put("tMap_16", true);
end_Hash.put("tMap_16", System.currentTimeMillis());




/**
 * [tMap_16 end ] stop
 */

	
	/**
	 * [tAggregateRow_2_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"validacionTnivelUso");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_2_AGGOUT", true);
end_Hash.put("tAggregateRow_2_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_2_AGGOUT end ] stop
 */



	
	/**
	 * [tOracleOutput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_9", false);
		start_Hash.put("tOracleOutput_9", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row68");
					}
				
		int tos_count_tOracleOutput_9 = 0;
		






    
    int nb_line_tOracleOutput_9 = 0;
    int nb_line_update_tOracleOutput_9 = 0;
    int nb_line_inserted_tOracleOutput_9 = 0;
    int nb_line_deleted_tOracleOutput_9 = 0;
    int nb_line_rejected_tOracleOutput_9 = 0;

    int tmp_batchUpdateCount_tOracleOutput_9 = 0;

    int deletedCount_tOracleOutput_9=0;
    int updatedCount_tOracleOutput_9=0;
    int insertedCount_tOracleOutput_9=0;
    int rowsToCommitCount_tOracleOutput_9=0;
    int rejectedCount_tOracleOutput_9=0;

    boolean whetherReject_tOracleOutput_9 = false;

    java.sql.Connection conn_tOracleOutput_9 = null;

    //optional table
    String dbschema_tOracleOutput_9 = null;
    String tableName_tOracleOutput_9 = null;
        dbschema_tOracleOutput_9 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_9 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_9=0;

        if(dbschema_tOracleOutput_9 == null || dbschema_tOracleOutput_9.trim().length() == 0) {
            tableName_tOracleOutput_9 = ("ERRORLOG_TEMP");
        } else {
            tableName_tOracleOutput_9 = dbschema_tOracleOutput_9 + "." + ("ERRORLOG_TEMP");
        }
                String insert_tOracleOutput_9 = "INSERT INTO " + tableName_tOracleOutput_9 + " (Mensaje,Linea,CODIGO_UNICO) VALUES (?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_9 = conn_tOracleOutput_9.prepareStatement(insert_tOracleOutput_9);
                        resourceMap.put("pstmt_tOracleOutput_9", pstmt_tOracleOutput_9);





 



/**
 * [tOracleOutput_9 begin ] stop
 */



	
	/**
	 * [tJavaRow_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_17", false);
		start_Hash.put("tJavaRow_17", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_17";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row67");
					}
				
		int tos_count_tJavaRow_17 = 0;
		

int nb_line_tJavaRow_17 = 0;

 



/**
 * [tJavaRow_17 begin ] stop
 */



	
	/**
	 * [tAggregateRow_2_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_2_AGGIN", false);
		start_Hash.put("tAggregateRow_2_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";
	
	
		int tos_count_tAggregateRow_2_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_2> values_tAggregateRow_2 = hash_tAggregateRow_2.values();

globalMap.put("tAggregateRow_2_NB_LINE", values_tAggregateRow_2.size());

for(AggOperationStruct_tAggregateRow_2 aggregated_row_tAggregateRow_2 : values_tAggregateRow_2) { // G_AggR_600



 



/**
 * [tAggregateRow_2_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";
	
	

            				    row67.Mensaje = aggregated_row_tAggregateRow_2.Mensaje;
            				    
            				    row67.Linea = aggregated_row_tAggregateRow_2.Linea;
            				    
            				    row67.CODIGO_UNICO = aggregated_row_tAggregateRow_2.CODIGO_UNICO;
            				    

 


	tos_count_tAggregateRow_2_AGGIN++;

/**
 * [tAggregateRow_2_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";
	
	

 



/**
 * [tAggregateRow_2_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_17 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_17";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row67"
						
						);
					}
					

    //Code generate according to input schema and output schema
row68.Mensaje = row67.Mensaje;
row68.Linea = row67.Linea;
row68.CODIGO_UNICO = row67.CODIGO_UNICO;


context.ErrorLog +=1;
    nb_line_tJavaRow_17++;   

 


	tos_count_tJavaRow_17++;

/**
 * [tJavaRow_17 main ] stop
 */
	
	/**
	 * [tJavaRow_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_17";
	
	

 



/**
 * [tJavaRow_17 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_9 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row68"
						
						);
					}
					



        whetherReject_tOracleOutput_9 = false;
                        if(row68.Mensaje == null) {
pstmt_tOracleOutput_9.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_9.setString(1, row68.Mensaje);
}

                        if(row68.Linea == null) {
pstmt_tOracleOutput_9.setNull(2, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_9.setLong(2, row68.Linea);
}

                        if(row68.CODIGO_UNICO == null) {
pstmt_tOracleOutput_9.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_9.setString(3, row68.CODIGO_UNICO);
}

                try {
                    nb_line_tOracleOutput_9++;
                    int processedCount_tOracleOutput_9 = pstmt_tOracleOutput_9.executeUpdate();
                    insertedCount_tOracleOutput_9 += processedCount_tOracleOutput_9;
                    rowsToCommitCount_tOracleOutput_9 += processedCount_tOracleOutput_9;
                } catch(java.lang.Exception e_tOracleOutput_9) {
globalMap.put("tOracleOutput_9_ERROR_MESSAGE",e_tOracleOutput_9.getMessage());
                    whetherReject_tOracleOutput_9 = true;
                            System.err.print(e_tOracleOutput_9.getMessage());
                }

 


	tos_count_tOracleOutput_9++;

/**
 * [tOracleOutput_9 main ] stop
 */
	
	/**
	 * [tOracleOutput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_9";
	
	

 



/**
 * [tOracleOutput_9 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_9";
	
	

 



/**
 * [tOracleOutput_9 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_17";
	
	

 



/**
 * [tJavaRow_17 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_2_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";
	
	

 



/**
 * [tAggregateRow_2_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";
	
	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_2_AGGIN", true);
end_Hash.put("tAggregateRow_2_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_2_AGGIN end ] stop
 */

	
	/**
	 * [tJavaRow_17 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_17";
	
	

globalMap.put("tJavaRow_17_NB_LINE",nb_line_tJavaRow_17);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row67");
			  	}
			  	
 

ok_Hash.put("tJavaRow_17", true);
end_Hash.put("tJavaRow_17", System.currentTimeMillis());




/**
 * [tJavaRow_17 end ] stop
 */

	
	/**
	 * [tOracleOutput_9 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_9";
	
	
	



	
        if(pstmt_tOracleOutput_9 != null) {
			
				pstmt_tOracleOutput_9.close();
				resourceMap.remove("pstmt_tOracleOutput_9");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_9", true);

	
	nb_line_deleted_tOracleOutput_9=nb_line_deleted_tOracleOutput_9+ deletedCount_tOracleOutput_9;
	nb_line_update_tOracleOutput_9=nb_line_update_tOracleOutput_9 + updatedCount_tOracleOutput_9;
	nb_line_inserted_tOracleOutput_9=nb_line_inserted_tOracleOutput_9 + insertedCount_tOracleOutput_9;
	nb_line_rejected_tOracleOutput_9=nb_line_rejected_tOracleOutput_9 + rejectedCount_tOracleOutput_9;
	
        globalMap.put("tOracleOutput_9_NB_LINE",nb_line_tOracleOutput_9);
        globalMap.put("tOracleOutput_9_NB_LINE_UPDATED",nb_line_update_tOracleOutput_9);
        globalMap.put("tOracleOutput_9_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_9);
        globalMap.put("tOracleOutput_9_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_9);
        globalMap.put("tOracleOutput_9_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_9);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row68");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_9", true);
end_Hash.put("tOracleOutput_9", System.currentTimeMillis());




/**
 * [tOracleOutput_9 end ] stop
 */















				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk16", 0, "ok");
								} 
							
							tHashInput_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_2_AGGIN"
							globalMap.remove("tAggregateRow_2");
						
					     			//free memory for "tMap_16"
					     			globalMap.remove("tHash_Lookup_row55"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 finally ] stop
 */

	
	/**
	 * [tMap_16 finally ] start
	 */

	

	
	
	currentComponent="tMap_16";
	
	

 



/**
 * [tMap_16 finally ] stop
 */

	
	/**
	 * [tAggregateRow_2_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";
	
	

 



/**
 * [tAggregateRow_2_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_2_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";
	
	

 



/**
 * [tAggregateRow_2_AGGIN finally ] stop
 */

	
	/**
	 * [tJavaRow_17 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_17";
	
	

 



/**
 * [tJavaRow_17 finally ] stop
 */

	
	/**
	 * [tOracleOutput_9 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_9";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_9") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_9 = null;
                if ((pstmtToClose_tOracleOutput_9 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_9")) != null) {
                    pstmtToClose_tOracleOutput_9.close();
                }
    }
 



/**
 * [tOracleOutput_9 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row71Struct implements routines.system.IPersistableRow<row71Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String Mensaje;

				public String getMensaje () {
					return this.Mensaje;
				}

				public Boolean MensajeIsNullable(){
				    return true;
				}
				public Boolean MensajeIsKey(){
				    return false;
				}
				public Integer MensajeLength(){
				    return null;
				}
				public Integer MensajePrecision(){
				    return null;
				}
				public String MensajeDefault(){
				
					return null;
				
				}
				public String MensajeComment(){
				
				    return "";
				
				}
				public String MensajePattern(){
				
					return "";
				
				}
				public String MensajeOriginalDbColumnName(){
				
					return "Mensaje";
				
				}

				
			    public Long Linea;

				public Long getLinea () {
					return this.Linea;
				}

				public Boolean LineaIsNullable(){
				    return true;
				}
				public Boolean LineaIsKey(){
				    return false;
				}
				public Integer LineaLength(){
				    return null;
				}
				public Integer LineaPrecision(){
				    return null;
				}
				public String LineaDefault(){
				
					return null;
				
				}
				public String LineaComment(){
				
				    return "";
				
				}
				public String LineaPattern(){
				
					return "";
				
				}
				public String LineaOriginalDbColumnName(){
				
					return "Linea";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return null;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Mensaje="+Mensaje);
		sb.append(",Linea="+String.valueOf(Linea));
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row71Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row58Struct implements routines.system.IPersistableRow<row58Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String Mensaje;

				public String getMensaje () {
					return this.Mensaje;
				}

				public Boolean MensajeIsNullable(){
				    return true;
				}
				public Boolean MensajeIsKey(){
				    return false;
				}
				public Integer MensajeLength(){
				    return null;
				}
				public Integer MensajePrecision(){
				    return null;
				}
				public String MensajeDefault(){
				
					return null;
				
				}
				public String MensajeComment(){
				
				    return "";
				
				}
				public String MensajePattern(){
				
					return "";
				
				}
				public String MensajeOriginalDbColumnName(){
				
					return "Mensaje";
				
				}

				
			    public Long Linea;

				public Long getLinea () {
					return this.Linea;
				}

				public Boolean LineaIsNullable(){
				    return true;
				}
				public Boolean LineaIsKey(){
				    return false;
				}
				public Integer LineaLength(){
				    return null;
				}
				public Integer LineaPrecision(){
				    return null;
				}
				public String LineaDefault(){
				
					return null;
				
				}
				public String LineaComment(){
				
				    return "";
				
				}
				public String LineaPattern(){
				
					return "";
				
				}
				public String LineaOriginalDbColumnName(){
				
					return "Linea";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return null;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Mensaje="+Mensaje);
		sb.append(",Linea="+String.valueOf(Linea));
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row58Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_4 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_4> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String Mensaje;

				public String getMensaje () {
					return this.Mensaje;
				}

				public Boolean MensajeIsNullable(){
				    return true;
				}
				public Boolean MensajeIsKey(){
				    return false;
				}
				public Integer MensajeLength(){
				    return null;
				}
				public Integer MensajePrecision(){
				    return null;
				}
				public String MensajeDefault(){
				
					return null;
				
				}
				public String MensajeComment(){
				
				    return "";
				
				}
				public String MensajePattern(){
				
					return "";
				
				}
				public String MensajeOriginalDbColumnName(){
				
					return "Mensaje";
				
				}

				
			    public Long Linea;

				public Long getLinea () {
					return this.Linea;
				}

				public Boolean LineaIsNullable(){
				    return true;
				}
				public Boolean LineaIsKey(){
				    return false;
				}
				public Integer LineaLength(){
				    return null;
				}
				public Integer LineaPrecision(){
				    return null;
				}
				public String LineaDefault(){
				
					return null;
				
				}
				public String LineaComment(){
				
				    return "";
				
				}
				public String LineaPattern(){
				
					return "";
				
				}
				public String LineaOriginalDbColumnName(){
				
					return "Linea";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return null;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Mensaje="+Mensaje);
		sb.append(",Linea="+String.valueOf(Linea));
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_4 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class validacionViaAdminStruct implements routines.system.IPersistableRow<validacionViaAdminStruct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String Mensaje;

				public String getMensaje () {
					return this.Mensaje;
				}

				public Boolean MensajeIsNullable(){
				    return true;
				}
				public Boolean MensajeIsKey(){
				    return false;
				}
				public Integer MensajeLength(){
				    return 500;
				}
				public Integer MensajePrecision(){
				    return null;
				}
				public String MensajeDefault(){
				
					return null;
				
				}
				public String MensajeComment(){
				
				    return "";
				
				}
				public String MensajePattern(){
				
					return "";
				
				}
				public String MensajeOriginalDbColumnName(){
				
					return "Mensaje";
				
				}

				
			    public Long Linea;

				public Long getLinea () {
					return this.Linea;
				}

				public Boolean LineaIsNullable(){
				    return true;
				}
				public Boolean LineaIsKey(){
				    return false;
				}
				public Integer LineaLength(){
				    return null;
				}
				public Integer LineaPrecision(){
				    return null;
				}
				public String LineaDefault(){
				
					return null;
				
				}
				public String LineaComment(){
				
				    return "";
				
				}
				public String LineaPattern(){
				
					return "";
				
				}
				public String LineaOriginalDbColumnName(){
				
					return "Linea";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return null;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Mensaje="+Mensaje);
		sb.append(",Linea="+String.valueOf(Linea));
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(validacionViaAdminStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row56Struct implements routines.system.IPersistableRow<row56Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String CodSsmp;

				public String getCodSsmp () {
					return this.CodSsmp;
				}

				public Boolean CodSsmpIsNullable(){
				    return true;
				}
				public Boolean CodSsmpIsKey(){
				    return false;
				}
				public Integer CodSsmpLength(){
				    return 15;
				}
				public Integer CodSsmpPrecision(){
				    return 0;
				}
				public String CodSsmpDefault(){
				
					return null;
				
				}
				public String CodSsmpComment(){
				
				    return "CODIGO SSMP";
				
				}
				public String CodSsmpPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CodSsmpOriginalDbColumnName(){
				
					return "CodSsmp";
				
				}

				
			    public String NGenerico;

				public String getNGenerico () {
					return this.NGenerico;
				}

				public Boolean NGenericoIsNullable(){
				    return true;
				}
				public Boolean NGenericoIsKey(){
				    return false;
				}
				public Integer NGenericoLength(){
				    return 200;
				}
				public Integer NGenericoPrecision(){
				    return 0;
				}
				public String NGenericoDefault(){
				
					return null;
				
				}
				public String NGenericoComment(){
				
				    return "NOMBRE GENERICO";
				
				}
				public String NGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NGenericoOriginalDbColumnName(){
				
					return "NGenerico";
				
				}

				
			    public String Concentracion;

				public String getConcentracion () {
					return this.Concentracion;
				}

				public Boolean ConcentracionIsNullable(){
				    return true;
				}
				public Boolean ConcentracionIsKey(){
				    return false;
				}
				public Integer ConcentracionLength(){
				    return 50;
				}
				public Integer ConcentracionPrecision(){
				    return 0;
				}
				public String ConcentracionDefault(){
				
					return null;
				
				}
				public String ConcentracionComment(){
				
				    return "CONCENTRACION";
				
				}
				public String ConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ConcentracionOriginalDbColumnName(){
				
					return "Concentracion";
				
				}

				
			    public String FFarmaceutica;

				public String getFFarmaceutica () {
					return this.FFarmaceutica;
				}

				public Boolean FFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean FFarmaceuticaIsKey(){
				    return false;
				}
				public Integer FFarmaceuticaLength(){
				    return 500;
				}
				public Integer FFarmaceuticaPrecision(){
				    return 0;
				}
				public String FFarmaceuticaDefault(){
				
					return null;
				
				}
				public String FFarmaceuticaComment(){
				
				    return "FORMA FARMACEUTICA";
				
				}
				public String FFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FFarmaceuticaOriginalDbColumnName(){
				
					return "FFarmaceutica";
				
				}

				
			    public String ViaAdmin;

				public String getViaAdmin () {
					return this.ViaAdmin;
				}

				public Boolean ViaAdminIsNullable(){
				    return true;
				}
				public Boolean ViaAdminIsKey(){
				    return false;
				}
				public Integer ViaAdminLength(){
				    return 200;
				}
				public Integer ViaAdminPrecision(){
				    return 0;
				}
				public String ViaAdminDefault(){
				
					return null;
				
				}
				public String ViaAdminComment(){
				
				    return "VIA ADMINISTRACION";
				
				}
				public String ViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ViaAdminOriginalDbColumnName(){
				
					return "ViaAdmin";
				
				}

				
			    public String NUso;

				public String getNUso () {
					return this.NUso;
				}

				public Boolean NUsoIsNullable(){
				    return true;
				}
				public Boolean NUsoIsKey(){
				    return false;
				}
				public Integer NUsoLength(){
				    return 50;
				}
				public Integer NUsoPrecision(){
				    return 0;
				}
				public String NUsoDefault(){
				
					return null;
				
				}
				public String NUsoComment(){
				
				    return "NIVEL USO";
				
				}
				public String NUsoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NUsoOriginalDbColumnName(){
				
					return "NUso";
				
				}

				
			    public String NAtencion;

				public String getNAtencion () {
					return this.NAtencion;
				}

				public Boolean NAtencionIsNullable(){
				    return true;
				}
				public Boolean NAtencionIsKey(){
				    return false;
				}
				public Integer NAtencionLength(){
				    return 50;
				}
				public Integer NAtencionPrecision(){
				    return 0;
				}
				public String NAtencionDefault(){
				
					return null;
				
				}
				public String NAtencionComment(){
				
				    return "NIVEL ATENCION";
				
				}
				public String NAtencionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NAtencionOriginalDbColumnName(){
				
					return "NAtencion";
				
				}

				
			    public String ObsNUso;

				public String getObsNUso () {
					return this.ObsNUso;
				}

				public Boolean ObsNUsoIsNullable(){
				    return true;
				}
				public Boolean ObsNUsoIsKey(){
				    return false;
				}
				public Integer ObsNUsoLength(){
				    return 500;
				}
				public Integer ObsNUsoPrecision(){
				    return 0;
				}
				public String ObsNUsoDefault(){
				
					return null;
				
				}
				public String ObsNUsoComment(){
				
				    return "OBSERVACION PARA EL NIVEL DE USO";
				
				}
				public String ObsNUsoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ObsNUsoOriginalDbColumnName(){
				
					return "ObsNUso";
				
				}

				
			    public String UsadoPre;

				public String getUsadoPre () {
					return this.UsadoPre;
				}

				public Boolean UsadoPreIsNullable(){
				    return true;
				}
				public Boolean UsadoPreIsKey(){
				    return false;
				}
				public Integer UsadoPreLength(){
				    return 2;
				}
				public Integer UsadoPrePrecision(){
				    return 0;
				}
				public String UsadoPreDefault(){
				
					return null;
				
				}
				public String UsadoPreComment(){
				
				    return "USADO PARA PREPARACIONES";
				
				}
				public String UsadoPrePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UsadoPreOriginalDbColumnName(){
				
					return "UsadoPre";
				
				}

				
			    public String CodigoUnico;

				public String getCodigoUnico () {
					return this.CodigoUnico;
				}

				public Boolean CodigoUnicoIsNullable(){
				    return true;
				}
				public Boolean CodigoUnicoIsKey(){
				    return false;
				}
				public Integer CodigoUnicoLength(){
				    return 150;
				}
				public Integer CodigoUnicoPrecision(){
				    return 0;
				}
				public String CodigoUnicoDefault(){
				
					return null;
				
				}
				public String CodigoUnicoComment(){
				
				    return "CODIGO UNICO";
				
				}
				public String CodigoUnicoPattern(){
				
					return "";
				
				}
				public String CodigoUnicoOriginalDbColumnName(){
				
					return "CodigoUnico";
				
				}

				
			    public String EspecialidadMedica;

				public String getEspecialidadMedica () {
					return this.EspecialidadMedica;
				}

				public Boolean EspecialidadMedicaIsNullable(){
				    return true;
				}
				public Boolean EspecialidadMedicaIsKey(){
				    return false;
				}
				public Integer EspecialidadMedicaLength(){
				    return 150;
				}
				public Integer EspecialidadMedicaPrecision(){
				    return 0;
				}
				public String EspecialidadMedicaDefault(){
				
					return null;
				
				}
				public String EspecialidadMedicaComment(){
				
				    return "ESPECIALIDAD MEDICA";
				
				}
				public String EspecialidadMedicaPattern(){
				
					return "";
				
				}
				public String EspecialidadMedicaOriginalDbColumnName(){
				
					return "EspecialidadMedica";
				
				}

				
			    public String nuevoNuso;

				public String getNuevoNuso () {
					return this.nuevoNuso;
				}

				public Boolean nuevoNusoIsNullable(){
				    return true;
				}
				public Boolean nuevoNusoIsKey(){
				    return false;
				}
				public Integer nuevoNusoLength(){
				    return 20;
				}
				public Integer nuevoNusoPrecision(){
				    return null;
				}
				public String nuevoNusoDefault(){
				
					return null;
				
				}
				public String nuevoNusoComment(){
				
				    return "";
				
				}
				public String nuevoNusoPattern(){
				
					return "";
				
				}
				public String nuevoNusoOriginalDbColumnName(){
				
					return "nuevoNuso";
				
				}

				
			    public String nuevaEspecialidad;

				public String getNuevaEspecialidad () {
					return this.nuevaEspecialidad;
				}

				public Boolean nuevaEspecialidadIsNullable(){
				    return true;
				}
				public Boolean nuevaEspecialidadIsKey(){
				    return false;
				}
				public Integer nuevaEspecialidadLength(){
				    return 150;
				}
				public Integer nuevaEspecialidadPrecision(){
				    return null;
				}
				public String nuevaEspecialidadDefault(){
				
					return null;
				
				}
				public String nuevaEspecialidadComment(){
				
				    return "";
				
				}
				public String nuevaEspecialidadPattern(){
				
					return "";
				
				}
				public String nuevaEspecialidadOriginalDbColumnName(){
				
					return "nuevaEspecialidad";
				
				}

				
			    public String nuevaAdmin;

				public String getNuevaAdmin () {
					return this.nuevaAdmin;
				}

				public Boolean nuevaAdminIsNullable(){
				    return true;
				}
				public Boolean nuevaAdminIsKey(){
				    return false;
				}
				public Integer nuevaAdminLength(){
				    return 100;
				}
				public Integer nuevaAdminPrecision(){
				    return null;
				}
				public String nuevaAdminDefault(){
				
					return null;
				
				}
				public String nuevaAdminComment(){
				
				    return "";
				
				}
				public String nuevaAdminPattern(){
				
					return "";
				
				}
				public String nuevaAdminOriginalDbColumnName(){
				
					return "nuevaAdmin";
				
				}

				
			    public String nuevaForma;

				public String getNuevaForma () {
					return this.nuevaForma;
				}

				public Boolean nuevaFormaIsNullable(){
				    return true;
				}
				public Boolean nuevaFormaIsKey(){
				    return false;
				}
				public Integer nuevaFormaLength(){
				    return 200;
				}
				public Integer nuevaFormaPrecision(){
				    return null;
				}
				public String nuevaFormaDefault(){
				
					return null;
				
				}
				public String nuevaFormaComment(){
				
				    return "";
				
				}
				public String nuevaFormaPattern(){
				
					return "";
				
				}
				public String nuevaFormaOriginalDbColumnName(){
				
					return "nuevaForma";
				
				}

				
			    public Long linea;

				public Long getLinea () {
					return this.linea;
				}

				public Boolean lineaIsNullable(){
				    return true;
				}
				public Boolean lineaIsKey(){
				    return false;
				}
				public Integer lineaLength(){
				    return null;
				}
				public Integer lineaPrecision(){
				    return null;
				}
				public String lineaDefault(){
				
					return "";
				
				}
				public String lineaComment(){
				
				    return "";
				
				}
				public String lineaPattern(){
				
					return "";
				
				}
				public String lineaOriginalDbColumnName(){
				
					return "linea";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CodSsmp = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.FFarmaceutica = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.NUso = readString(dis);
					
					this.NAtencion = readString(dis);
					
					this.ObsNUso = readString(dis);
					
					this.UsadoPre = readString(dis);
					
					this.CodigoUnico = readString(dis);
					
					this.EspecialidadMedica = readString(dis);
					
					this.nuevoNuso = readString(dis);
					
					this.nuevaEspecialidad = readString(dis);
					
					this.nuevaAdmin = readString(dis);
					
					this.nuevaForma = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.linea = null;
           				} else {
           			    	this.linea = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CodSsmp = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.FFarmaceutica = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.NUso = readString(dis);
					
					this.NAtencion = readString(dis);
					
					this.ObsNUso = readString(dis);
					
					this.UsadoPre = readString(dis);
					
					this.CodigoUnico = readString(dis);
					
					this.EspecialidadMedica = readString(dis);
					
					this.nuevoNuso = readString(dis);
					
					this.nuevaEspecialidad = readString(dis);
					
					this.nuevaAdmin = readString(dis);
					
					this.nuevaForma = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.linea = null;
           				} else {
           			    	this.linea = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CodSsmp,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.FFarmaceutica,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.NUso,dos);
					
					// String
				
						writeString(this.NAtencion,dos);
					
					// String
				
						writeString(this.ObsNUso,dos);
					
					// String
				
						writeString(this.UsadoPre,dos);
					
					// String
				
						writeString(this.CodigoUnico,dos);
					
					// String
				
						writeString(this.EspecialidadMedica,dos);
					
					// String
				
						writeString(this.nuevoNuso,dos);
					
					// String
				
						writeString(this.nuevaEspecialidad,dos);
					
					// String
				
						writeString(this.nuevaAdmin,dos);
					
					// String
				
						writeString(this.nuevaForma,dos);
					
					// Long
				
						if(this.linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.linea);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CodSsmp,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.FFarmaceutica,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.NUso,dos);
					
					// String
				
						writeString(this.NAtencion,dos);
					
					// String
				
						writeString(this.ObsNUso,dos);
					
					// String
				
						writeString(this.UsadoPre,dos);
					
					// String
				
						writeString(this.CodigoUnico,dos);
					
					// String
				
						writeString(this.EspecialidadMedica,dos);
					
					// String
				
						writeString(this.nuevoNuso,dos);
					
					// String
				
						writeString(this.nuevaEspecialidad,dos);
					
					// String
				
						writeString(this.nuevaAdmin,dos);
					
					// String
				
						writeString(this.nuevaForma,dos);
					
					// Long
				
						if(this.linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.linea);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CodSsmp="+CodSsmp);
		sb.append(",NGenerico="+NGenerico);
		sb.append(",Concentracion="+Concentracion);
		sb.append(",FFarmaceutica="+FFarmaceutica);
		sb.append(",ViaAdmin="+ViaAdmin);
		sb.append(",NUso="+NUso);
		sb.append(",NAtencion="+NAtencion);
		sb.append(",ObsNUso="+ObsNUso);
		sb.append(",UsadoPre="+UsadoPre);
		sb.append(",CodigoUnico="+CodigoUnico);
		sb.append(",EspecialidadMedica="+EspecialidadMedica);
		sb.append(",nuevoNuso="+nuevoNuso);
		sb.append(",nuevaEspecialidad="+nuevaEspecialidad);
		sb.append(",nuevaAdmin="+nuevaAdmin);
		sb.append(",nuevaForma="+nuevaForma);
		sb.append(",linea="+String.valueOf(linea));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row56Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_5Struct implements routines.system.IPersistableRow<after_tHashInput_5Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String CodSsmp;

				public String getCodSsmp () {
					return this.CodSsmp;
				}

				public Boolean CodSsmpIsNullable(){
				    return true;
				}
				public Boolean CodSsmpIsKey(){
				    return false;
				}
				public Integer CodSsmpLength(){
				    return 15;
				}
				public Integer CodSsmpPrecision(){
				    return 0;
				}
				public String CodSsmpDefault(){
				
					return null;
				
				}
				public String CodSsmpComment(){
				
				    return "CODIGO SSMP";
				
				}
				public String CodSsmpPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CodSsmpOriginalDbColumnName(){
				
					return "CodSsmp";
				
				}

				
			    public String NGenerico;

				public String getNGenerico () {
					return this.NGenerico;
				}

				public Boolean NGenericoIsNullable(){
				    return true;
				}
				public Boolean NGenericoIsKey(){
				    return false;
				}
				public Integer NGenericoLength(){
				    return 200;
				}
				public Integer NGenericoPrecision(){
				    return 0;
				}
				public String NGenericoDefault(){
				
					return null;
				
				}
				public String NGenericoComment(){
				
				    return "NOMBRE GENERICO";
				
				}
				public String NGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NGenericoOriginalDbColumnName(){
				
					return "NGenerico";
				
				}

				
			    public String Concentracion;

				public String getConcentracion () {
					return this.Concentracion;
				}

				public Boolean ConcentracionIsNullable(){
				    return true;
				}
				public Boolean ConcentracionIsKey(){
				    return false;
				}
				public Integer ConcentracionLength(){
				    return 50;
				}
				public Integer ConcentracionPrecision(){
				    return 0;
				}
				public String ConcentracionDefault(){
				
					return null;
				
				}
				public String ConcentracionComment(){
				
				    return "CONCENTRACION";
				
				}
				public String ConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ConcentracionOriginalDbColumnName(){
				
					return "Concentracion";
				
				}

				
			    public String FFarmaceutica;

				public String getFFarmaceutica () {
					return this.FFarmaceutica;
				}

				public Boolean FFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean FFarmaceuticaIsKey(){
				    return false;
				}
				public Integer FFarmaceuticaLength(){
				    return 500;
				}
				public Integer FFarmaceuticaPrecision(){
				    return 0;
				}
				public String FFarmaceuticaDefault(){
				
					return null;
				
				}
				public String FFarmaceuticaComment(){
				
				    return "FORMA FARMACEUTICA";
				
				}
				public String FFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FFarmaceuticaOriginalDbColumnName(){
				
					return "FFarmaceutica";
				
				}

				
			    public String ViaAdmin;

				public String getViaAdmin () {
					return this.ViaAdmin;
				}

				public Boolean ViaAdminIsNullable(){
				    return true;
				}
				public Boolean ViaAdminIsKey(){
				    return false;
				}
				public Integer ViaAdminLength(){
				    return 200;
				}
				public Integer ViaAdminPrecision(){
				    return 0;
				}
				public String ViaAdminDefault(){
				
					return null;
				
				}
				public String ViaAdminComment(){
				
				    return "VIA ADMINISTRACION";
				
				}
				public String ViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ViaAdminOriginalDbColumnName(){
				
					return "ViaAdmin";
				
				}

				
			    public String NUso;

				public String getNUso () {
					return this.NUso;
				}

				public Boolean NUsoIsNullable(){
				    return true;
				}
				public Boolean NUsoIsKey(){
				    return false;
				}
				public Integer NUsoLength(){
				    return 50;
				}
				public Integer NUsoPrecision(){
				    return 0;
				}
				public String NUsoDefault(){
				
					return null;
				
				}
				public String NUsoComment(){
				
				    return "NIVEL USO";
				
				}
				public String NUsoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NUsoOriginalDbColumnName(){
				
					return "NUso";
				
				}

				
			    public String NAtencion;

				public String getNAtencion () {
					return this.NAtencion;
				}

				public Boolean NAtencionIsNullable(){
				    return true;
				}
				public Boolean NAtencionIsKey(){
				    return false;
				}
				public Integer NAtencionLength(){
				    return 50;
				}
				public Integer NAtencionPrecision(){
				    return 0;
				}
				public String NAtencionDefault(){
				
					return null;
				
				}
				public String NAtencionComment(){
				
				    return "NIVEL ATENCION";
				
				}
				public String NAtencionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NAtencionOriginalDbColumnName(){
				
					return "NAtencion";
				
				}

				
			    public String ObsNUso;

				public String getObsNUso () {
					return this.ObsNUso;
				}

				public Boolean ObsNUsoIsNullable(){
				    return true;
				}
				public Boolean ObsNUsoIsKey(){
				    return false;
				}
				public Integer ObsNUsoLength(){
				    return 500;
				}
				public Integer ObsNUsoPrecision(){
				    return 0;
				}
				public String ObsNUsoDefault(){
				
					return null;
				
				}
				public String ObsNUsoComment(){
				
				    return "OBSERVACION PARA EL NIVEL DE USO";
				
				}
				public String ObsNUsoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ObsNUsoOriginalDbColumnName(){
				
					return "ObsNUso";
				
				}

				
			    public String UsadoPre;

				public String getUsadoPre () {
					return this.UsadoPre;
				}

				public Boolean UsadoPreIsNullable(){
				    return true;
				}
				public Boolean UsadoPreIsKey(){
				    return false;
				}
				public Integer UsadoPreLength(){
				    return 2;
				}
				public Integer UsadoPrePrecision(){
				    return 0;
				}
				public String UsadoPreDefault(){
				
					return null;
				
				}
				public String UsadoPreComment(){
				
				    return "USADO PARA PREPARACIONES";
				
				}
				public String UsadoPrePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UsadoPreOriginalDbColumnName(){
				
					return "UsadoPre";
				
				}

				
			    public String CodigoUnico;

				public String getCodigoUnico () {
					return this.CodigoUnico;
				}

				public Boolean CodigoUnicoIsNullable(){
				    return true;
				}
				public Boolean CodigoUnicoIsKey(){
				    return false;
				}
				public Integer CodigoUnicoLength(){
				    return 150;
				}
				public Integer CodigoUnicoPrecision(){
				    return 0;
				}
				public String CodigoUnicoDefault(){
				
					return null;
				
				}
				public String CodigoUnicoComment(){
				
				    return "CODIGO UNICO";
				
				}
				public String CodigoUnicoPattern(){
				
					return "";
				
				}
				public String CodigoUnicoOriginalDbColumnName(){
				
					return "CodigoUnico";
				
				}

				
			    public String EspecialidadMedica;

				public String getEspecialidadMedica () {
					return this.EspecialidadMedica;
				}

				public Boolean EspecialidadMedicaIsNullable(){
				    return true;
				}
				public Boolean EspecialidadMedicaIsKey(){
				    return false;
				}
				public Integer EspecialidadMedicaLength(){
				    return 150;
				}
				public Integer EspecialidadMedicaPrecision(){
				    return 0;
				}
				public String EspecialidadMedicaDefault(){
				
					return null;
				
				}
				public String EspecialidadMedicaComment(){
				
				    return "ESPECIALIDAD MEDICA";
				
				}
				public String EspecialidadMedicaPattern(){
				
					return "";
				
				}
				public String EspecialidadMedicaOriginalDbColumnName(){
				
					return "EspecialidadMedica";
				
				}

				
			    public String nuevoNuso;

				public String getNuevoNuso () {
					return this.nuevoNuso;
				}

				public Boolean nuevoNusoIsNullable(){
				    return true;
				}
				public Boolean nuevoNusoIsKey(){
				    return false;
				}
				public Integer nuevoNusoLength(){
				    return 20;
				}
				public Integer nuevoNusoPrecision(){
				    return null;
				}
				public String nuevoNusoDefault(){
				
					return null;
				
				}
				public String nuevoNusoComment(){
				
				    return "";
				
				}
				public String nuevoNusoPattern(){
				
					return "";
				
				}
				public String nuevoNusoOriginalDbColumnName(){
				
					return "nuevoNuso";
				
				}

				
			    public String nuevaEspecialidad;

				public String getNuevaEspecialidad () {
					return this.nuevaEspecialidad;
				}

				public Boolean nuevaEspecialidadIsNullable(){
				    return true;
				}
				public Boolean nuevaEspecialidadIsKey(){
				    return false;
				}
				public Integer nuevaEspecialidadLength(){
				    return 150;
				}
				public Integer nuevaEspecialidadPrecision(){
				    return null;
				}
				public String nuevaEspecialidadDefault(){
				
					return null;
				
				}
				public String nuevaEspecialidadComment(){
				
				    return "";
				
				}
				public String nuevaEspecialidadPattern(){
				
					return "";
				
				}
				public String nuevaEspecialidadOriginalDbColumnName(){
				
					return "nuevaEspecialidad";
				
				}

				
			    public String nuevaAdmin;

				public String getNuevaAdmin () {
					return this.nuevaAdmin;
				}

				public Boolean nuevaAdminIsNullable(){
				    return true;
				}
				public Boolean nuevaAdminIsKey(){
				    return false;
				}
				public Integer nuevaAdminLength(){
				    return 100;
				}
				public Integer nuevaAdminPrecision(){
				    return null;
				}
				public String nuevaAdminDefault(){
				
					return null;
				
				}
				public String nuevaAdminComment(){
				
				    return "";
				
				}
				public String nuevaAdminPattern(){
				
					return "";
				
				}
				public String nuevaAdminOriginalDbColumnName(){
				
					return "nuevaAdmin";
				
				}

				
			    public String nuevaForma;

				public String getNuevaForma () {
					return this.nuevaForma;
				}

				public Boolean nuevaFormaIsNullable(){
				    return true;
				}
				public Boolean nuevaFormaIsKey(){
				    return false;
				}
				public Integer nuevaFormaLength(){
				    return 200;
				}
				public Integer nuevaFormaPrecision(){
				    return null;
				}
				public String nuevaFormaDefault(){
				
					return null;
				
				}
				public String nuevaFormaComment(){
				
				    return "";
				
				}
				public String nuevaFormaPattern(){
				
					return "";
				
				}
				public String nuevaFormaOriginalDbColumnName(){
				
					return "nuevaForma";
				
				}

				
			    public Long linea;

				public Long getLinea () {
					return this.linea;
				}

				public Boolean lineaIsNullable(){
				    return true;
				}
				public Boolean lineaIsKey(){
				    return false;
				}
				public Integer lineaLength(){
				    return null;
				}
				public Integer lineaPrecision(){
				    return null;
				}
				public String lineaDefault(){
				
					return "";
				
				}
				public String lineaComment(){
				
				    return "";
				
				}
				public String lineaPattern(){
				
					return "";
				
				}
				public String lineaOriginalDbColumnName(){
				
					return "linea";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CodSsmp = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.FFarmaceutica = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.NUso = readString(dis);
					
					this.NAtencion = readString(dis);
					
					this.ObsNUso = readString(dis);
					
					this.UsadoPre = readString(dis);
					
					this.CodigoUnico = readString(dis);
					
					this.EspecialidadMedica = readString(dis);
					
					this.nuevoNuso = readString(dis);
					
					this.nuevaEspecialidad = readString(dis);
					
					this.nuevaAdmin = readString(dis);
					
					this.nuevaForma = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.linea = null;
           				} else {
           			    	this.linea = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CodSsmp = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.FFarmaceutica = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.NUso = readString(dis);
					
					this.NAtencion = readString(dis);
					
					this.ObsNUso = readString(dis);
					
					this.UsadoPre = readString(dis);
					
					this.CodigoUnico = readString(dis);
					
					this.EspecialidadMedica = readString(dis);
					
					this.nuevoNuso = readString(dis);
					
					this.nuevaEspecialidad = readString(dis);
					
					this.nuevaAdmin = readString(dis);
					
					this.nuevaForma = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.linea = null;
           				} else {
           			    	this.linea = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CodSsmp,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.FFarmaceutica,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.NUso,dos);
					
					// String
				
						writeString(this.NAtencion,dos);
					
					// String
				
						writeString(this.ObsNUso,dos);
					
					// String
				
						writeString(this.UsadoPre,dos);
					
					// String
				
						writeString(this.CodigoUnico,dos);
					
					// String
				
						writeString(this.EspecialidadMedica,dos);
					
					// String
				
						writeString(this.nuevoNuso,dos);
					
					// String
				
						writeString(this.nuevaEspecialidad,dos);
					
					// String
				
						writeString(this.nuevaAdmin,dos);
					
					// String
				
						writeString(this.nuevaForma,dos);
					
					// Long
				
						if(this.linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.linea);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CodSsmp,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.FFarmaceutica,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.NUso,dos);
					
					// String
				
						writeString(this.NAtencion,dos);
					
					// String
				
						writeString(this.ObsNUso,dos);
					
					// String
				
						writeString(this.UsadoPre,dos);
					
					// String
				
						writeString(this.CodigoUnico,dos);
					
					// String
				
						writeString(this.EspecialidadMedica,dos);
					
					// String
				
						writeString(this.nuevoNuso,dos);
					
					// String
				
						writeString(this.nuevaEspecialidad,dos);
					
					// String
				
						writeString(this.nuevaAdmin,dos);
					
					// String
				
						writeString(this.nuevaForma,dos);
					
					// Long
				
						if(this.linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.linea);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CodSsmp="+CodSsmp);
		sb.append(",NGenerico="+NGenerico);
		sb.append(",Concentracion="+Concentracion);
		sb.append(",FFarmaceutica="+FFarmaceutica);
		sb.append(",ViaAdmin="+ViaAdmin);
		sb.append(",NUso="+NUso);
		sb.append(",NAtencion="+NAtencion);
		sb.append(",ObsNUso="+ObsNUso);
		sb.append(",UsadoPre="+UsadoPre);
		sb.append(",CodigoUnico="+CodigoUnico);
		sb.append(",EspecialidadMedica="+EspecialidadMedica);
		sb.append(",nuevoNuso="+nuevoNuso);
		sb.append(",nuevaEspecialidad="+nuevaEspecialidad);
		sb.append(",nuevaAdmin="+nuevaAdmin);
		sb.append(",nuevaForma="+nuevaForma);
		sb.append(",linea="+String.valueOf(linea));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tOracleInput_20Process(globalMap);

		row56Struct row56 = new row56Struct();
validacionViaAdminStruct validacionViaAdmin = new validacionViaAdminStruct();
row58Struct row58 = new row58Struct();
row71Struct row71 = new row71Struct();





	
	/**
	 * [tAggregateRow_4_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_4_AGGOUT", false);
		start_Hash.put("tAggregateRow_4_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGOUT";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"validacionViaAdmin");
					}
				
		int tos_count_tAggregateRow_4_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_4 = new java.util.HashMap(); 

// ------------
	class AggOperationStruct_tAggregateRow_4 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				String Mensaje;
    				Long Linea;
    				String CODIGO_UNICO;
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.Mensaje == null) ? 0 : this.Mensaje.hashCode());
							
							result = prime * result + ((this.Linea == null) ? 0 : this.Linea.hashCode());
							
							result = prime * result + ((this.CODIGO_UNICO == null) ? 0 : this.CODIGO_UNICO.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_4 other = (AggOperationStruct_tAggregateRow_4) obj;
			
							if (this.Mensaje == null) {
								if (other.Mensaje != null) 
									return false;
							} else if (!this.Mensaje.equals(other.Mensaje)) 
								return false;
						
							if (this.Linea == null) {
								if (other.Linea != null) 
									return false;
							} else if (!this.Linea.equals(other.Linea)) 
								return false;
						
							if (this.CODIGO_UNICO == null) {
								if (other.CODIGO_UNICO != null) 
									return false;
							} else if (!this.CODIGO_UNICO.equals(other.CODIGO_UNICO)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_4 operation_result_tAggregateRow_4 = null;
	AggOperationStruct_tAggregateRow_4 operation_finder_tAggregateRow_4 = new AggOperationStruct_tAggregateRow_4();
	java.util.Map<AggOperationStruct_tAggregateRow_4,AggOperationStruct_tAggregateRow_4> hash_tAggregateRow_4 = new java.util.HashMap<AggOperationStruct_tAggregateRow_4,AggOperationStruct_tAggregateRow_4>();
	

 



/**
 * [tAggregateRow_4_AGGOUT begin ] stop
 */



	
	/**
	 * [tMap_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_18", false);
		start_Hash.put("tMap_18", System.currentTimeMillis());
		
	
	currentComponent="tMap_18";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row56");
					}
				
		int tos_count_tMap_18 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row57Struct> tHash_Lookup_row57 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row57Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row57Struct>) 
					globalMap.get( "tHash_Lookup_row57" ))
					;					
					
	

row57Struct row57HashKey = new row57Struct();
row57Struct row57Default = new row57Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_18__Struct  {
}
Var__tMap_18__Struct Var__tMap_18 = new Var__tMap_18__Struct();
// ###############################

// ###############################
// # Outputs initialization
validacionViaAdminStruct validacionViaAdmin_tmp = new validacionViaAdminStruct();
// ###############################

        
        



        









 



/**
 * [tMap_18 begin ] stop
 */



	
	/**
	 * [tHashInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_5", false);
		start_Hash.put("tHashInput_5", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_5";
	
	
		int tos_count_tHashInput_5 = 0;
		


int nb_line_tHashInput_5 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_5=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row8Struct> tHashFile_tHashInput_5 = mf_tHashInput_5.getAdvancedMemoryHashFile("tHashFile_CargaMoleculasAcuerdo_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_5==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row8Struct> iterator_tHashInput_5 = tHashFile_tHashInput_5.iterator();
while (iterator_tHashInput_5.hasNext()) {
    row8Struct next_tHashInput_5 = iterator_tHashInput_5.next();

	row56.CodSsmp = next_tHashInput_5.CodSsmp;
	row56.NGenerico = next_tHashInput_5.NGenerico;
	row56.Concentracion = next_tHashInput_5.Concentracion;
	row56.FFarmaceutica = next_tHashInput_5.FFarmaceutica;
	row56.ViaAdmin = next_tHashInput_5.ViaAdmin;
	row56.NUso = next_tHashInput_5.NUso;
	row56.NAtencion = next_tHashInput_5.NAtencion;
	row56.ObsNUso = next_tHashInput_5.ObsNUso;
	row56.UsadoPre = next_tHashInput_5.UsadoPre;
	row56.CodigoUnico = next_tHashInput_5.CodigoUnico;
	row56.EspecialidadMedica = next_tHashInput_5.EspecialidadMedica;
	row56.nuevoNuso = next_tHashInput_5.nuevoNuso;
	row56.nuevaEspecialidad = next_tHashInput_5.nuevaEspecialidad;
	row56.nuevaAdmin = next_tHashInput_5.nuevaAdmin;
	row56.nuevaForma = next_tHashInput_5.nuevaForma;
	row56.linea = next_tHashInput_5.linea;

 



/**
 * [tHashInput_5 begin ] stop
 */
	
	/**
	 * [tHashInput_5 main ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 


	tos_count_tHashInput_5++;

/**
 * [tHashInput_5 main ] stop
 */
	
	/**
	 * [tHashInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tMap_18 main ] start
	 */

	

	
	
	currentComponent="tMap_18";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row56"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_18 = false;
		
						row57Struct row57 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_18 = false;
		boolean mainRowRejected_tMap_18 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row57" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow57 = false;
       		  	    	
       		  	    	
 							row57Struct row57ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_18) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_18 = false;
								
                        		    		    row57HashKey.SIGLA = row56.nuevaAdmin;
                        		    		

								
		                        	row57HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row57.lookup( row57HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row57.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_18 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row57Struct fromLookup_row57 = null;
							row57 = row57Default;
										 
							
								 
							
							
								if (tHash_Lookup_row57 !=null && tHash_Lookup_row57.hasNext()) { // G 099
								
							
								
								fromLookup_row57 = tHash_Lookup_row57.next();

							
							
								} // G 099
							
							

							if(fromLookup_row57 != null) {
								row57 = fromLookup_row57;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_18__Struct Var = Var__tMap_18;// ###############################
        // ###############################
        // # Output tables

validacionViaAdmin = null;

if(!rejectedInnerJoin_tMap_18 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'validacionViaAdmin'
// # Filter conditions 
if( rejectedInnerJoin_tMap_18 ) {
validacionViaAdmin_tmp.Mensaje = "No se encuentra la via de adminitración: ( "+row56.nuevaAdmin + " ) para el producto con el codigo único "+row56.CodigoUnico+"  en el sistema" ;
validacionViaAdmin_tmp.Linea = row56.linea;
validacionViaAdmin_tmp.CODIGO_UNICO = row56.CodigoUnico ;
validacionViaAdmin = validacionViaAdmin_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_18 = false;










 


	tos_count_tMap_18++;

/**
 * [tMap_18 main ] stop
 */
	
	/**
	 * [tMap_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_18";
	
	

 



/**
 * [tMap_18 process_data_begin ] stop
 */
// Start of branch "validacionViaAdmin"
if(validacionViaAdmin != null) { 



	
	/**
	 * [tAggregateRow_4_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGOUT";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"validacionViaAdmin"
						
						);
					}
					
	
operation_finder_tAggregateRow_4.Mensaje = validacionViaAdmin.Mensaje;
			operation_finder_tAggregateRow_4.Linea = validacionViaAdmin.Linea;
			operation_finder_tAggregateRow_4.CODIGO_UNICO = validacionViaAdmin.CODIGO_UNICO;
			

	operation_finder_tAggregateRow_4.hashCodeDirty = true;
	
	operation_result_tAggregateRow_4 = hash_tAggregateRow_4.get(operation_finder_tAggregateRow_4);

	

	if(operation_result_tAggregateRow_4 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_4 = new AggOperationStruct_tAggregateRow_4();

		operation_result_tAggregateRow_4.Mensaje = operation_finder_tAggregateRow_4.Mensaje;
				operation_result_tAggregateRow_4.Linea = operation_finder_tAggregateRow_4.Linea;
				operation_result_tAggregateRow_4.CODIGO_UNICO = operation_finder_tAggregateRow_4.CODIGO_UNICO;
				
		
		

		hash_tAggregateRow_4.put(operation_result_tAggregateRow_4, operation_result_tAggregateRow_4);
	
	} // G_OutMain_AggR_001


	


 


	tos_count_tAggregateRow_4_AGGOUT++;

/**
 * [tAggregateRow_4_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_4_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGOUT";
	
	

 



/**
 * [tAggregateRow_4_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_4_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGOUT";
	
	

 



/**
 * [tAggregateRow_4_AGGOUT process_data_end ] stop
 */

} // End of branch "validacionViaAdmin"




	
	/**
	 * [tMap_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_18";
	
	

 



/**
 * [tMap_18 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_5 end ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	
    

		
			nb_line_tHashInput_5++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_CargaMoleculasAcuerdo_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_5_NB_LINE", nb_line_tHashInput_5);       

 

ok_Hash.put("tHashInput_5", true);
end_Hash.put("tHashInput_5", System.currentTimeMillis());




/**
 * [tHashInput_5 end ] stop
 */

	
	/**
	 * [tMap_18 end ] start
	 */

	

	
	
	currentComponent="tMap_18";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row57 != null) {
						tHash_Lookup_row57.endGet();
					}
					globalMap.remove( "tHash_Lookup_row57" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row56");
			  	}
			  	
 

ok_Hash.put("tMap_18", true);
end_Hash.put("tMap_18", System.currentTimeMillis());




/**
 * [tMap_18 end ] stop
 */

	
	/**
	 * [tAggregateRow_4_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGOUT";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"validacionViaAdmin");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_4_AGGOUT", true);
end_Hash.put("tAggregateRow_4_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_4_AGGOUT end ] stop
 */



	
	/**
	 * [tOracleOutput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_10", false);
		start_Hash.put("tOracleOutput_10", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_10";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row71");
					}
				
		int tos_count_tOracleOutput_10 = 0;
		






    
    int nb_line_tOracleOutput_10 = 0;
    int nb_line_update_tOracleOutput_10 = 0;
    int nb_line_inserted_tOracleOutput_10 = 0;
    int nb_line_deleted_tOracleOutput_10 = 0;
    int nb_line_rejected_tOracleOutput_10 = 0;

    int tmp_batchUpdateCount_tOracleOutput_10 = 0;

    int deletedCount_tOracleOutput_10=0;
    int updatedCount_tOracleOutput_10=0;
    int insertedCount_tOracleOutput_10=0;
    int rowsToCommitCount_tOracleOutput_10=0;
    int rejectedCount_tOracleOutput_10=0;

    boolean whetherReject_tOracleOutput_10 = false;

    java.sql.Connection conn_tOracleOutput_10 = null;

    //optional table
    String dbschema_tOracleOutput_10 = null;
    String tableName_tOracleOutput_10 = null;
        dbschema_tOracleOutput_10 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_10 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_10=0;

        if(dbschema_tOracleOutput_10 == null || dbschema_tOracleOutput_10.trim().length() == 0) {
            tableName_tOracleOutput_10 = ("ERRORLOG_TEMP");
        } else {
            tableName_tOracleOutput_10 = dbschema_tOracleOutput_10 + "." + ("ERRORLOG_TEMP");
        }
                String insert_tOracleOutput_10 = "INSERT INTO " + tableName_tOracleOutput_10 + " (Mensaje,Linea,CODIGO_UNICO) VALUES (?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_10 = conn_tOracleOutput_10.prepareStatement(insert_tOracleOutput_10);
                        resourceMap.put("pstmt_tOracleOutput_10", pstmt_tOracleOutput_10);





 



/**
 * [tOracleOutput_10 begin ] stop
 */



	
	/**
	 * [tJavaRow_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_18", false);
		start_Hash.put("tJavaRow_18", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_18";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row58");
					}
				
		int tos_count_tJavaRow_18 = 0;
		

int nb_line_tJavaRow_18 = 0;

 



/**
 * [tJavaRow_18 begin ] stop
 */



	
	/**
	 * [tAggregateRow_4_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_4_AGGIN", false);
		start_Hash.put("tAggregateRow_4_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGIN";
	
	
		int tos_count_tAggregateRow_4_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_4> values_tAggregateRow_4 = hash_tAggregateRow_4.values();

globalMap.put("tAggregateRow_4_NB_LINE", values_tAggregateRow_4.size());

for(AggOperationStruct_tAggregateRow_4 aggregated_row_tAggregateRow_4 : values_tAggregateRow_4) { // G_AggR_600



 



/**
 * [tAggregateRow_4_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_4_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGIN";
	
	

            				    row58.Mensaje = aggregated_row_tAggregateRow_4.Mensaje;
            				    
            				    row58.Linea = aggregated_row_tAggregateRow_4.Linea;
            				    
            				    row58.CODIGO_UNICO = aggregated_row_tAggregateRow_4.CODIGO_UNICO;
            				    

 


	tos_count_tAggregateRow_4_AGGIN++;

/**
 * [tAggregateRow_4_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_4_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGIN";
	
	

 



/**
 * [tAggregateRow_4_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_18 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_18";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row58"
						
						);
					}
					

    //Code generate according to input schema and output schema
row71.Mensaje = row58.Mensaje;
row71.Linea = row58.Linea;
row71.CODIGO_UNICO = row58.CODIGO_UNICO;


context.ErrorLog +=1;
    nb_line_tJavaRow_18++;   

 


	tos_count_tJavaRow_18++;

/**
 * [tJavaRow_18 main ] stop
 */
	
	/**
	 * [tJavaRow_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_18";
	
	

 



/**
 * [tJavaRow_18 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_10 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_10";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row71"
						
						);
					}
					



        whetherReject_tOracleOutput_10 = false;
                        if(row71.Mensaje == null) {
pstmt_tOracleOutput_10.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(1, row71.Mensaje);
}

                        if(row71.Linea == null) {
pstmt_tOracleOutput_10.setNull(2, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_10.setLong(2, row71.Linea);
}

                        if(row71.CODIGO_UNICO == null) {
pstmt_tOracleOutput_10.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(3, row71.CODIGO_UNICO);
}

                try {
                    nb_line_tOracleOutput_10++;
                    int processedCount_tOracleOutput_10 = pstmt_tOracleOutput_10.executeUpdate();
                    insertedCount_tOracleOutput_10 += processedCount_tOracleOutput_10;
                    rowsToCommitCount_tOracleOutput_10 += processedCount_tOracleOutput_10;
                } catch(java.lang.Exception e_tOracleOutput_10) {
globalMap.put("tOracleOutput_10_ERROR_MESSAGE",e_tOracleOutput_10.getMessage());
                    whetherReject_tOracleOutput_10 = true;
                            System.err.print(e_tOracleOutput_10.getMessage());
                }

 


	tos_count_tOracleOutput_10++;

/**
 * [tOracleOutput_10 main ] stop
 */
	
	/**
	 * [tOracleOutput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_10";
	
	

 



/**
 * [tOracleOutput_10 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_10";
	
	

 



/**
 * [tOracleOutput_10 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_18";
	
	

 



/**
 * [tJavaRow_18 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_4_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGIN";
	
	

 



/**
 * [tAggregateRow_4_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_4_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGIN";
	
	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_4_AGGIN", true);
end_Hash.put("tAggregateRow_4_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_4_AGGIN end ] stop
 */

	
	/**
	 * [tJavaRow_18 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_18";
	
	

globalMap.put("tJavaRow_18_NB_LINE",nb_line_tJavaRow_18);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row58");
			  	}
			  	
 

ok_Hash.put("tJavaRow_18", true);
end_Hash.put("tJavaRow_18", System.currentTimeMillis());




/**
 * [tJavaRow_18 end ] stop
 */

	
	/**
	 * [tOracleOutput_10 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_10";
	
	
	



	
        if(pstmt_tOracleOutput_10 != null) {
			
				pstmt_tOracleOutput_10.close();
				resourceMap.remove("pstmt_tOracleOutput_10");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_10", true);

	
	nb_line_deleted_tOracleOutput_10=nb_line_deleted_tOracleOutput_10+ deletedCount_tOracleOutput_10;
	nb_line_update_tOracleOutput_10=nb_line_update_tOracleOutput_10 + updatedCount_tOracleOutput_10;
	nb_line_inserted_tOracleOutput_10=nb_line_inserted_tOracleOutput_10 + insertedCount_tOracleOutput_10;
	nb_line_rejected_tOracleOutput_10=nb_line_rejected_tOracleOutput_10 + rejectedCount_tOracleOutput_10;
	
        globalMap.put("tOracleOutput_10_NB_LINE",nb_line_tOracleOutput_10);
        globalMap.put("tOracleOutput_10_NB_LINE_UPDATED",nb_line_update_tOracleOutput_10);
        globalMap.put("tOracleOutput_10_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_10);
        globalMap.put("tOracleOutput_10_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_10);
        globalMap.put("tOracleOutput_10_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_10);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row71");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_10", true);
end_Hash.put("tOracleOutput_10", System.currentTimeMillis());




/**
 * [tOracleOutput_10 end ] stop
 */















				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk17", 0, "ok");
								} 
							
							tHashInput_6Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_4_AGGIN"
							globalMap.remove("tAggregateRow_4");
						
					     			//free memory for "tMap_18"
					     			globalMap.remove("tHash_Lookup_row57"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_5 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 finally ] stop
 */

	
	/**
	 * [tMap_18 finally ] start
	 */

	

	
	
	currentComponent="tMap_18";
	
	

 



/**
 * [tMap_18 finally ] stop
 */

	
	/**
	 * [tAggregateRow_4_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGOUT";
	
	

 



/**
 * [tAggregateRow_4_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_4_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGIN";
	
	

 



/**
 * [tAggregateRow_4_AGGIN finally ] stop
 */

	
	/**
	 * [tJavaRow_18 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_18";
	
	

 



/**
 * [tJavaRow_18 finally ] stop
 */

	
	/**
	 * [tOracleOutput_10 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_10";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_10") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_10 = null;
                if ((pstmtToClose_tOracleOutput_10 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_10")) != null) {
                    pstmtToClose_tOracleOutput_10.close();
                }
    }
 



/**
 * [tOracleOutput_10 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public BigDecimal TFORMAS_ID;

				public BigDecimal getTFORMAS_ID () {
					return this.TFORMAS_ID;
				}

				public Boolean TFORMAS_IDIsNullable(){
				    return true;
				}
				public Boolean TFORMAS_IDIsKey(){
				    return false;
				}
				public Integer TFORMAS_IDLength(){
				    return null;
				}
				public Integer TFORMAS_IDPrecision(){
				    return null;
				}
				public String TFORMAS_IDDefault(){
				
					return null;
				
				}
				public String TFORMAS_IDComment(){
				
				    return "";
				
				}
				public String TFORMAS_IDPattern(){
				
					return "";
				
				}
				public String TFORMAS_IDOriginalDbColumnName(){
				
					return "TFORMAS_ID";
				
				}

				
			    public String NUEVAFORMA;

				public String getNUEVAFORMA () {
					return this.NUEVAFORMA;
				}

				public Boolean NUEVAFORMAIsNullable(){
				    return true;
				}
				public Boolean NUEVAFORMAIsKey(){
				    return false;
				}
				public Integer NUEVAFORMALength(){
				    return 150;
				}
				public Integer NUEVAFORMAPrecision(){
				    return null;
				}
				public String NUEVAFORMADefault(){
				
					return null;
				
				}
				public String NUEVAFORMAComment(){
				
				    return "";
				
				}
				public String NUEVAFORMAPattern(){
				
					return "";
				
				}
				public String NUEVAFORMAOriginalDbColumnName(){
				
					return "NUEVAFORMA";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return 150;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				
			    public Long LINEA;

				public Long getLINEA () {
					return this.LINEA;
				}

				public Boolean LINEAIsNullable(){
				    return true;
				}
				public Boolean LINEAIsKey(){
				    return false;
				}
				public Integer LINEALength(){
				    return null;
				}
				public Integer LINEAPrecision(){
				    return null;
				}
				public String LINEADefault(){
				
					return null;
				
				}
				public String LINEAComment(){
				
				    return "";
				
				}
				public String LINEAPattern(){
				
					return "";
				
				}
				public String LINEAOriginalDbColumnName(){
				
					return "LINEA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.TFORMAS_ID = (BigDecimal) dis.readObject();
					
					this.NUEVAFORMA = readString(dis);
					
					this.CODIGO_UNICO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LINEA = null;
           				} else {
           			    	this.LINEA = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.TFORMAS_ID = (BigDecimal) dis.readObject();
					
					this.NUEVAFORMA = readString(dis);
					
					this.CODIGO_UNICO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LINEA = null;
           				} else {
           			    	this.LINEA = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.TFORMAS_ID);
					
					// String
				
						writeString(this.NUEVAFORMA,dos);
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
					// Long
				
						if(this.LINEA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LINEA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TFORMAS_ID);
					
					// String
				
						writeString(this.NUEVAFORMA,dos);
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
					// Long
				
						if(this.LINEA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LINEA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TFORMAS_ID="+String.valueOf(TFORMAS_ID));
		sb.append(",NUEVAFORMA="+NUEVAFORMA);
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
		sb.append(",LINEA="+String.valueOf(LINEA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public BigDecimal TFORMAS_ID;

				public BigDecimal getTFORMAS_ID () {
					return this.TFORMAS_ID;
				}

				public Boolean TFORMAS_IDIsNullable(){
				    return true;
				}
				public Boolean TFORMAS_IDIsKey(){
				    return false;
				}
				public Integer TFORMAS_IDLength(){
				    return null;
				}
				public Integer TFORMAS_IDPrecision(){
				    return null;
				}
				public String TFORMAS_IDDefault(){
				
					return null;
				
				}
				public String TFORMAS_IDComment(){
				
				    return "";
				
				}
				public String TFORMAS_IDPattern(){
				
					return "";
				
				}
				public String TFORMAS_IDOriginalDbColumnName(){
				
					return "TFORMAS_ID";
				
				}

				
			    public String NUEVAFORMA;

				public String getNUEVAFORMA () {
					return this.NUEVAFORMA;
				}

				public Boolean NUEVAFORMAIsNullable(){
				    return true;
				}
				public Boolean NUEVAFORMAIsKey(){
				    return false;
				}
				public Integer NUEVAFORMALength(){
				    return 150;
				}
				public Integer NUEVAFORMAPrecision(){
				    return null;
				}
				public String NUEVAFORMADefault(){
				
					return null;
				
				}
				public String NUEVAFORMAComment(){
				
				    return "";
				
				}
				public String NUEVAFORMAPattern(){
				
					return "";
				
				}
				public String NUEVAFORMAOriginalDbColumnName(){
				
					return "NUEVAFORMA";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return 150;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				
			    public Long LINEA;

				public Long getLINEA () {
					return this.LINEA;
				}

				public Boolean LINEAIsNullable(){
				    return true;
				}
				public Boolean LINEAIsKey(){
				    return false;
				}
				public Integer LINEALength(){
				    return null;
				}
				public Integer LINEAPrecision(){
				    return null;
				}
				public String LINEADefault(){
				
					return null;
				
				}
				public String LINEAComment(){
				
				    return "";
				
				}
				public String LINEAPattern(){
				
					return "";
				
				}
				public String LINEAOriginalDbColumnName(){
				
					return "LINEA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.TFORMAS_ID = (BigDecimal) dis.readObject();
					
					this.NUEVAFORMA = readString(dis);
					
					this.CODIGO_UNICO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LINEA = null;
           				} else {
           			    	this.LINEA = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.TFORMAS_ID = (BigDecimal) dis.readObject();
					
					this.NUEVAFORMA = readString(dis);
					
					this.CODIGO_UNICO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LINEA = null;
           				} else {
           			    	this.LINEA = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.TFORMAS_ID);
					
					// String
				
						writeString(this.NUEVAFORMA,dos);
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
					// Long
				
						if(this.LINEA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LINEA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TFORMAS_ID);
					
					// String
				
						writeString(this.NUEVAFORMA,dos);
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
					// Long
				
						if(this.LINEA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LINEA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TFORMAS_ID="+String.valueOf(TFORMAS_ID));
		sb.append(",NUEVAFORMA="+NUEVAFORMA);
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
		sb.append(",LINEA="+String.valueOf(LINEA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row70Struct implements routines.system.IPersistableRow<row70Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String Mensaje;

				public String getMensaje () {
					return this.Mensaje;
				}

				public Boolean MensajeIsNullable(){
				    return true;
				}
				public Boolean MensajeIsKey(){
				    return false;
				}
				public Integer MensajeLength(){
				    return null;
				}
				public Integer MensajePrecision(){
				    return null;
				}
				public String MensajeDefault(){
				
					return null;
				
				}
				public String MensajeComment(){
				
				    return "";
				
				}
				public String MensajePattern(){
				
					return "";
				
				}
				public String MensajeOriginalDbColumnName(){
				
					return "Mensaje";
				
				}

				
			    public Long Linea;

				public Long getLinea () {
					return this.Linea;
				}

				public Boolean LineaIsNullable(){
				    return true;
				}
				public Boolean LineaIsKey(){
				    return false;
				}
				public Integer LineaLength(){
				    return null;
				}
				public Integer LineaPrecision(){
				    return null;
				}
				public String LineaDefault(){
				
					return null;
				
				}
				public String LineaComment(){
				
				    return "";
				
				}
				public String LineaPattern(){
				
					return "";
				
				}
				public String LineaOriginalDbColumnName(){
				
					return "Linea";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return null;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Mensaje="+Mensaje);
		sb.append(",Linea="+String.valueOf(Linea));
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row70Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row60Struct implements routines.system.IPersistableRow<row60Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String Mensaje;

				public String getMensaje () {
					return this.Mensaje;
				}

				public Boolean MensajeIsNullable(){
				    return true;
				}
				public Boolean MensajeIsKey(){
				    return false;
				}
				public Integer MensajeLength(){
				    return null;
				}
				public Integer MensajePrecision(){
				    return null;
				}
				public String MensajeDefault(){
				
					return null;
				
				}
				public String MensajeComment(){
				
				    return "";
				
				}
				public String MensajePattern(){
				
					return "";
				
				}
				public String MensajeOriginalDbColumnName(){
				
					return "Mensaje";
				
				}

				
			    public Long Linea;

				public Long getLinea () {
					return this.Linea;
				}

				public Boolean LineaIsNullable(){
				    return true;
				}
				public Boolean LineaIsKey(){
				    return false;
				}
				public Integer LineaLength(){
				    return null;
				}
				public Integer LineaPrecision(){
				    return null;
				}
				public String LineaDefault(){
				
					return null;
				
				}
				public String LineaComment(){
				
				    return "";
				
				}
				public String LineaPattern(){
				
					return "";
				
				}
				public String LineaOriginalDbColumnName(){
				
					return "Linea";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return null;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Mensaje="+Mensaje);
		sb.append(",Linea="+String.valueOf(Linea));
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row60Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_5 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_5> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String Mensaje;

				public String getMensaje () {
					return this.Mensaje;
				}

				public Boolean MensajeIsNullable(){
				    return true;
				}
				public Boolean MensajeIsKey(){
				    return false;
				}
				public Integer MensajeLength(){
				    return null;
				}
				public Integer MensajePrecision(){
				    return null;
				}
				public String MensajeDefault(){
				
					return null;
				
				}
				public String MensajeComment(){
				
				    return "";
				
				}
				public String MensajePattern(){
				
					return "";
				
				}
				public String MensajeOriginalDbColumnName(){
				
					return "Mensaje";
				
				}

				
			    public Long Linea;

				public Long getLinea () {
					return this.Linea;
				}

				public Boolean LineaIsNullable(){
				    return true;
				}
				public Boolean LineaIsKey(){
				    return false;
				}
				public Integer LineaLength(){
				    return null;
				}
				public Integer LineaPrecision(){
				    return null;
				}
				public String LineaDefault(){
				
					return null;
				
				}
				public String LineaComment(){
				
				    return "";
				
				}
				public String LineaPattern(){
				
					return "";
				
				}
				public String LineaOriginalDbColumnName(){
				
					return "Linea";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return null;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Mensaje="+Mensaje);
		sb.append(",Linea="+String.valueOf(Linea));
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_5 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class validacionFormaFarmaceuticaStruct implements routines.system.IPersistableRow<validacionFormaFarmaceuticaStruct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String Mensaje;

				public String getMensaje () {
					return this.Mensaje;
				}

				public Boolean MensajeIsNullable(){
				    return true;
				}
				public Boolean MensajeIsKey(){
				    return false;
				}
				public Integer MensajeLength(){
				    return 500;
				}
				public Integer MensajePrecision(){
				    return null;
				}
				public String MensajeDefault(){
				
					return null;
				
				}
				public String MensajeComment(){
				
				    return "";
				
				}
				public String MensajePattern(){
				
					return "";
				
				}
				public String MensajeOriginalDbColumnName(){
				
					return "Mensaje";
				
				}

				
			    public Long Linea;

				public Long getLinea () {
					return this.Linea;
				}

				public Boolean LineaIsNullable(){
				    return true;
				}
				public Boolean LineaIsKey(){
				    return false;
				}
				public Integer LineaLength(){
				    return null;
				}
				public Integer LineaPrecision(){
				    return null;
				}
				public String LineaDefault(){
				
					return null;
				
				}
				public String LineaComment(){
				
				    return "";
				
				}
				public String LineaPattern(){
				
					return "";
				
				}
				public String LineaOriginalDbColumnName(){
				
					return "Linea";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return null;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Mensaje="+Mensaje);
		sb.append(",Linea="+String.valueOf(Linea));
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(validacionFormaFarmaceuticaStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class identificadorValidoStruct implements routines.system.IPersistableRow<identificadorValidoStruct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public BigDecimal TFORMAS_ID;

				public BigDecimal getTFORMAS_ID () {
					return this.TFORMAS_ID;
				}

				public Boolean TFORMAS_IDIsNullable(){
				    return true;
				}
				public Boolean TFORMAS_IDIsKey(){
				    return false;
				}
				public Integer TFORMAS_IDLength(){
				    return null;
				}
				public Integer TFORMAS_IDPrecision(){
				    return null;
				}
				public String TFORMAS_IDDefault(){
				
					return null;
				
				}
				public String TFORMAS_IDComment(){
				
				    return "";
				
				}
				public String TFORMAS_IDPattern(){
				
					return "";
				
				}
				public String TFORMAS_IDOriginalDbColumnName(){
				
					return "TFORMAS_ID";
				
				}

				
			    public String NUEVAFORMA;

				public String getNUEVAFORMA () {
					return this.NUEVAFORMA;
				}

				public Boolean NUEVAFORMAIsNullable(){
				    return true;
				}
				public Boolean NUEVAFORMAIsKey(){
				    return false;
				}
				public Integer NUEVAFORMALength(){
				    return 150;
				}
				public Integer NUEVAFORMAPrecision(){
				    return null;
				}
				public String NUEVAFORMADefault(){
				
					return null;
				
				}
				public String NUEVAFORMAComment(){
				
				    return "";
				
				}
				public String NUEVAFORMAPattern(){
				
					return "";
				
				}
				public String NUEVAFORMAOriginalDbColumnName(){
				
					return "NUEVAFORMA";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return 150;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				
			    public Long LINEA;

				public Long getLINEA () {
					return this.LINEA;
				}

				public Boolean LINEAIsNullable(){
				    return true;
				}
				public Boolean LINEAIsKey(){
				    return false;
				}
				public Integer LINEALength(){
				    return null;
				}
				public Integer LINEAPrecision(){
				    return null;
				}
				public String LINEADefault(){
				
					return null;
				
				}
				public String LINEAComment(){
				
				    return "";
				
				}
				public String LINEAPattern(){
				
					return "";
				
				}
				public String LINEAOriginalDbColumnName(){
				
					return "LINEA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.TFORMAS_ID = (BigDecimal) dis.readObject();
					
					this.NUEVAFORMA = readString(dis);
					
					this.CODIGO_UNICO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LINEA = null;
           				} else {
           			    	this.LINEA = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.TFORMAS_ID = (BigDecimal) dis.readObject();
					
					this.NUEVAFORMA = readString(dis);
					
					this.CODIGO_UNICO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LINEA = null;
           				} else {
           			    	this.LINEA = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.TFORMAS_ID);
					
					// String
				
						writeString(this.NUEVAFORMA,dos);
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
					// Long
				
						if(this.LINEA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LINEA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TFORMAS_ID);
					
					// String
				
						writeString(this.NUEVAFORMA,dos);
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
					// Long
				
						if(this.LINEA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LINEA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TFORMAS_ID="+String.valueOf(TFORMAS_ID));
		sb.append(",NUEVAFORMA="+NUEVAFORMA);
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
		sb.append(",LINEA="+String.valueOf(LINEA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(identificadorValidoStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String CodSsmp;

				public String getCodSsmp () {
					return this.CodSsmp;
				}

				public Boolean CodSsmpIsNullable(){
				    return true;
				}
				public Boolean CodSsmpIsKey(){
				    return false;
				}
				public Integer CodSsmpLength(){
				    return 15;
				}
				public Integer CodSsmpPrecision(){
				    return 0;
				}
				public String CodSsmpDefault(){
				
					return null;
				
				}
				public String CodSsmpComment(){
				
				    return "CODIGO SSMP";
				
				}
				public String CodSsmpPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CodSsmpOriginalDbColumnName(){
				
					return "CodSsmp";
				
				}

				
			    public String NGenerico;

				public String getNGenerico () {
					return this.NGenerico;
				}

				public Boolean NGenericoIsNullable(){
				    return true;
				}
				public Boolean NGenericoIsKey(){
				    return false;
				}
				public Integer NGenericoLength(){
				    return 200;
				}
				public Integer NGenericoPrecision(){
				    return 0;
				}
				public String NGenericoDefault(){
				
					return null;
				
				}
				public String NGenericoComment(){
				
				    return "NOMBRE GENERICO";
				
				}
				public String NGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NGenericoOriginalDbColumnName(){
				
					return "NGenerico";
				
				}

				
			    public String Concentracion;

				public String getConcentracion () {
					return this.Concentracion;
				}

				public Boolean ConcentracionIsNullable(){
				    return true;
				}
				public Boolean ConcentracionIsKey(){
				    return false;
				}
				public Integer ConcentracionLength(){
				    return 50;
				}
				public Integer ConcentracionPrecision(){
				    return 0;
				}
				public String ConcentracionDefault(){
				
					return null;
				
				}
				public String ConcentracionComment(){
				
				    return "CONCENTRACION";
				
				}
				public String ConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ConcentracionOriginalDbColumnName(){
				
					return "Concentracion";
				
				}

				
			    public String FFarmaceutica;

				public String getFFarmaceutica () {
					return this.FFarmaceutica;
				}

				public Boolean FFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean FFarmaceuticaIsKey(){
				    return false;
				}
				public Integer FFarmaceuticaLength(){
				    return 500;
				}
				public Integer FFarmaceuticaPrecision(){
				    return 0;
				}
				public String FFarmaceuticaDefault(){
				
					return null;
				
				}
				public String FFarmaceuticaComment(){
				
				    return "FORMA FARMACEUTICA";
				
				}
				public String FFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FFarmaceuticaOriginalDbColumnName(){
				
					return "FFarmaceutica";
				
				}

				
			    public String ViaAdmin;

				public String getViaAdmin () {
					return this.ViaAdmin;
				}

				public Boolean ViaAdminIsNullable(){
				    return true;
				}
				public Boolean ViaAdminIsKey(){
				    return false;
				}
				public Integer ViaAdminLength(){
				    return 200;
				}
				public Integer ViaAdminPrecision(){
				    return 0;
				}
				public String ViaAdminDefault(){
				
					return null;
				
				}
				public String ViaAdminComment(){
				
				    return "VIA ADMINISTRACION";
				
				}
				public String ViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ViaAdminOriginalDbColumnName(){
				
					return "ViaAdmin";
				
				}

				
			    public String NUso;

				public String getNUso () {
					return this.NUso;
				}

				public Boolean NUsoIsNullable(){
				    return true;
				}
				public Boolean NUsoIsKey(){
				    return false;
				}
				public Integer NUsoLength(){
				    return 50;
				}
				public Integer NUsoPrecision(){
				    return 0;
				}
				public String NUsoDefault(){
				
					return null;
				
				}
				public String NUsoComment(){
				
				    return "NIVEL USO";
				
				}
				public String NUsoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NUsoOriginalDbColumnName(){
				
					return "NUso";
				
				}

				
			    public String NAtencion;

				public String getNAtencion () {
					return this.NAtencion;
				}

				public Boolean NAtencionIsNullable(){
				    return true;
				}
				public Boolean NAtencionIsKey(){
				    return false;
				}
				public Integer NAtencionLength(){
				    return 50;
				}
				public Integer NAtencionPrecision(){
				    return 0;
				}
				public String NAtencionDefault(){
				
					return null;
				
				}
				public String NAtencionComment(){
				
				    return "NIVEL ATENCION";
				
				}
				public String NAtencionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NAtencionOriginalDbColumnName(){
				
					return "NAtencion";
				
				}

				
			    public String ObsNUso;

				public String getObsNUso () {
					return this.ObsNUso;
				}

				public Boolean ObsNUsoIsNullable(){
				    return true;
				}
				public Boolean ObsNUsoIsKey(){
				    return false;
				}
				public Integer ObsNUsoLength(){
				    return 500;
				}
				public Integer ObsNUsoPrecision(){
				    return 0;
				}
				public String ObsNUsoDefault(){
				
					return null;
				
				}
				public String ObsNUsoComment(){
				
				    return "OBSERVACION PARA EL NIVEL DE USO";
				
				}
				public String ObsNUsoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ObsNUsoOriginalDbColumnName(){
				
					return "ObsNUso";
				
				}

				
			    public String UsadoPre;

				public String getUsadoPre () {
					return this.UsadoPre;
				}

				public Boolean UsadoPreIsNullable(){
				    return true;
				}
				public Boolean UsadoPreIsKey(){
				    return false;
				}
				public Integer UsadoPreLength(){
				    return 2;
				}
				public Integer UsadoPrePrecision(){
				    return 0;
				}
				public String UsadoPreDefault(){
				
					return null;
				
				}
				public String UsadoPreComment(){
				
				    return "USADO PARA PREPARACIONES";
				
				}
				public String UsadoPrePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UsadoPreOriginalDbColumnName(){
				
					return "UsadoPre";
				
				}

				
			    public String CodigoUnico;

				public String getCodigoUnico () {
					return this.CodigoUnico;
				}

				public Boolean CodigoUnicoIsNullable(){
				    return true;
				}
				public Boolean CodigoUnicoIsKey(){
				    return false;
				}
				public Integer CodigoUnicoLength(){
				    return 150;
				}
				public Integer CodigoUnicoPrecision(){
				    return 0;
				}
				public String CodigoUnicoDefault(){
				
					return null;
				
				}
				public String CodigoUnicoComment(){
				
				    return "CODIGO UNICO";
				
				}
				public String CodigoUnicoPattern(){
				
					return "";
				
				}
				public String CodigoUnicoOriginalDbColumnName(){
				
					return "CodigoUnico";
				
				}

				
			    public String EspecialidadMedica;

				public String getEspecialidadMedica () {
					return this.EspecialidadMedica;
				}

				public Boolean EspecialidadMedicaIsNullable(){
				    return true;
				}
				public Boolean EspecialidadMedicaIsKey(){
				    return false;
				}
				public Integer EspecialidadMedicaLength(){
				    return 150;
				}
				public Integer EspecialidadMedicaPrecision(){
				    return 0;
				}
				public String EspecialidadMedicaDefault(){
				
					return null;
				
				}
				public String EspecialidadMedicaComment(){
				
				    return "ESPECIALIDAD MEDICA";
				
				}
				public String EspecialidadMedicaPattern(){
				
					return "";
				
				}
				public String EspecialidadMedicaOriginalDbColumnName(){
				
					return "EspecialidadMedica";
				
				}

				
			    public String nuevoNuso;

				public String getNuevoNuso () {
					return this.nuevoNuso;
				}

				public Boolean nuevoNusoIsNullable(){
				    return true;
				}
				public Boolean nuevoNusoIsKey(){
				    return false;
				}
				public Integer nuevoNusoLength(){
				    return 20;
				}
				public Integer nuevoNusoPrecision(){
				    return null;
				}
				public String nuevoNusoDefault(){
				
					return null;
				
				}
				public String nuevoNusoComment(){
				
				    return "";
				
				}
				public String nuevoNusoPattern(){
				
					return "";
				
				}
				public String nuevoNusoOriginalDbColumnName(){
				
					return "nuevoNuso";
				
				}

				
			    public String nuevaEspecialidad;

				public String getNuevaEspecialidad () {
					return this.nuevaEspecialidad;
				}

				public Boolean nuevaEspecialidadIsNullable(){
				    return true;
				}
				public Boolean nuevaEspecialidadIsKey(){
				    return false;
				}
				public Integer nuevaEspecialidadLength(){
				    return 150;
				}
				public Integer nuevaEspecialidadPrecision(){
				    return null;
				}
				public String nuevaEspecialidadDefault(){
				
					return null;
				
				}
				public String nuevaEspecialidadComment(){
				
				    return "";
				
				}
				public String nuevaEspecialidadPattern(){
				
					return "";
				
				}
				public String nuevaEspecialidadOriginalDbColumnName(){
				
					return "nuevaEspecialidad";
				
				}

				
			    public String nuevaAdmin;

				public String getNuevaAdmin () {
					return this.nuevaAdmin;
				}

				public Boolean nuevaAdminIsNullable(){
				    return true;
				}
				public Boolean nuevaAdminIsKey(){
				    return false;
				}
				public Integer nuevaAdminLength(){
				    return 100;
				}
				public Integer nuevaAdminPrecision(){
				    return null;
				}
				public String nuevaAdminDefault(){
				
					return null;
				
				}
				public String nuevaAdminComment(){
				
				    return "";
				
				}
				public String nuevaAdminPattern(){
				
					return "";
				
				}
				public String nuevaAdminOriginalDbColumnName(){
				
					return "nuevaAdmin";
				
				}

				
			    public String nuevaForma;

				public String getNuevaForma () {
					return this.nuevaForma;
				}

				public Boolean nuevaFormaIsNullable(){
				    return true;
				}
				public Boolean nuevaFormaIsKey(){
				    return false;
				}
				public Integer nuevaFormaLength(){
				    return 200;
				}
				public Integer nuevaFormaPrecision(){
				    return null;
				}
				public String nuevaFormaDefault(){
				
					return null;
				
				}
				public String nuevaFormaComment(){
				
				    return "";
				
				}
				public String nuevaFormaPattern(){
				
					return "";
				
				}
				public String nuevaFormaOriginalDbColumnName(){
				
					return "nuevaForma";
				
				}

				
			    public Long linea;

				public Long getLinea () {
					return this.linea;
				}

				public Boolean lineaIsNullable(){
				    return true;
				}
				public Boolean lineaIsKey(){
				    return false;
				}
				public Integer lineaLength(){
				    return null;
				}
				public Integer lineaPrecision(){
				    return null;
				}
				public String lineaDefault(){
				
					return "";
				
				}
				public String lineaComment(){
				
				    return "";
				
				}
				public String lineaPattern(){
				
					return "";
				
				}
				public String lineaOriginalDbColumnName(){
				
					return "linea";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CodSsmp = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.FFarmaceutica = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.NUso = readString(dis);
					
					this.NAtencion = readString(dis);
					
					this.ObsNUso = readString(dis);
					
					this.UsadoPre = readString(dis);
					
					this.CodigoUnico = readString(dis);
					
					this.EspecialidadMedica = readString(dis);
					
					this.nuevoNuso = readString(dis);
					
					this.nuevaEspecialidad = readString(dis);
					
					this.nuevaAdmin = readString(dis);
					
					this.nuevaForma = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.linea = null;
           				} else {
           			    	this.linea = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CodSsmp = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.FFarmaceutica = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.NUso = readString(dis);
					
					this.NAtencion = readString(dis);
					
					this.ObsNUso = readString(dis);
					
					this.UsadoPre = readString(dis);
					
					this.CodigoUnico = readString(dis);
					
					this.EspecialidadMedica = readString(dis);
					
					this.nuevoNuso = readString(dis);
					
					this.nuevaEspecialidad = readString(dis);
					
					this.nuevaAdmin = readString(dis);
					
					this.nuevaForma = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.linea = null;
           				} else {
           			    	this.linea = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CodSsmp,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.FFarmaceutica,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.NUso,dos);
					
					// String
				
						writeString(this.NAtencion,dos);
					
					// String
				
						writeString(this.ObsNUso,dos);
					
					// String
				
						writeString(this.UsadoPre,dos);
					
					// String
				
						writeString(this.CodigoUnico,dos);
					
					// String
				
						writeString(this.EspecialidadMedica,dos);
					
					// String
				
						writeString(this.nuevoNuso,dos);
					
					// String
				
						writeString(this.nuevaEspecialidad,dos);
					
					// String
				
						writeString(this.nuevaAdmin,dos);
					
					// String
				
						writeString(this.nuevaForma,dos);
					
					// Long
				
						if(this.linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.linea);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CodSsmp,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.FFarmaceutica,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.NUso,dos);
					
					// String
				
						writeString(this.NAtencion,dos);
					
					// String
				
						writeString(this.ObsNUso,dos);
					
					// String
				
						writeString(this.UsadoPre,dos);
					
					// String
				
						writeString(this.CodigoUnico,dos);
					
					// String
				
						writeString(this.EspecialidadMedica,dos);
					
					// String
				
						writeString(this.nuevoNuso,dos);
					
					// String
				
						writeString(this.nuevaEspecialidad,dos);
					
					// String
				
						writeString(this.nuevaAdmin,dos);
					
					// String
				
						writeString(this.nuevaForma,dos);
					
					// Long
				
						if(this.linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.linea);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CodSsmp="+CodSsmp);
		sb.append(",NGenerico="+NGenerico);
		sb.append(",Concentracion="+Concentracion);
		sb.append(",FFarmaceutica="+FFarmaceutica);
		sb.append(",ViaAdmin="+ViaAdmin);
		sb.append(",NUso="+NUso);
		sb.append(",NAtencion="+NAtencion);
		sb.append(",ObsNUso="+ObsNUso);
		sb.append(",UsadoPre="+UsadoPre);
		sb.append(",CodigoUnico="+CodigoUnico);
		sb.append(",EspecialidadMedica="+EspecialidadMedica);
		sb.append(",nuevoNuso="+nuevoNuso);
		sb.append(",nuevaEspecialidad="+nuevaEspecialidad);
		sb.append(",nuevaAdmin="+nuevaAdmin);
		sb.append(",nuevaForma="+nuevaForma);
		sb.append(",linea="+String.valueOf(linea));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_6Struct implements routines.system.IPersistableRow<after_tHashInput_6Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String CodSsmp;

				public String getCodSsmp () {
					return this.CodSsmp;
				}

				public Boolean CodSsmpIsNullable(){
				    return true;
				}
				public Boolean CodSsmpIsKey(){
				    return false;
				}
				public Integer CodSsmpLength(){
				    return 15;
				}
				public Integer CodSsmpPrecision(){
				    return 0;
				}
				public String CodSsmpDefault(){
				
					return null;
				
				}
				public String CodSsmpComment(){
				
				    return "CODIGO SSMP";
				
				}
				public String CodSsmpPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CodSsmpOriginalDbColumnName(){
				
					return "CodSsmp";
				
				}

				
			    public String NGenerico;

				public String getNGenerico () {
					return this.NGenerico;
				}

				public Boolean NGenericoIsNullable(){
				    return true;
				}
				public Boolean NGenericoIsKey(){
				    return false;
				}
				public Integer NGenericoLength(){
				    return 200;
				}
				public Integer NGenericoPrecision(){
				    return 0;
				}
				public String NGenericoDefault(){
				
					return null;
				
				}
				public String NGenericoComment(){
				
				    return "NOMBRE GENERICO";
				
				}
				public String NGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NGenericoOriginalDbColumnName(){
				
					return "NGenerico";
				
				}

				
			    public String Concentracion;

				public String getConcentracion () {
					return this.Concentracion;
				}

				public Boolean ConcentracionIsNullable(){
				    return true;
				}
				public Boolean ConcentracionIsKey(){
				    return false;
				}
				public Integer ConcentracionLength(){
				    return 50;
				}
				public Integer ConcentracionPrecision(){
				    return 0;
				}
				public String ConcentracionDefault(){
				
					return null;
				
				}
				public String ConcentracionComment(){
				
				    return "CONCENTRACION";
				
				}
				public String ConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ConcentracionOriginalDbColumnName(){
				
					return "Concentracion";
				
				}

				
			    public String FFarmaceutica;

				public String getFFarmaceutica () {
					return this.FFarmaceutica;
				}

				public Boolean FFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean FFarmaceuticaIsKey(){
				    return false;
				}
				public Integer FFarmaceuticaLength(){
				    return 500;
				}
				public Integer FFarmaceuticaPrecision(){
				    return 0;
				}
				public String FFarmaceuticaDefault(){
				
					return null;
				
				}
				public String FFarmaceuticaComment(){
				
				    return "FORMA FARMACEUTICA";
				
				}
				public String FFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FFarmaceuticaOriginalDbColumnName(){
				
					return "FFarmaceutica";
				
				}

				
			    public String ViaAdmin;

				public String getViaAdmin () {
					return this.ViaAdmin;
				}

				public Boolean ViaAdminIsNullable(){
				    return true;
				}
				public Boolean ViaAdminIsKey(){
				    return false;
				}
				public Integer ViaAdminLength(){
				    return 200;
				}
				public Integer ViaAdminPrecision(){
				    return 0;
				}
				public String ViaAdminDefault(){
				
					return null;
				
				}
				public String ViaAdminComment(){
				
				    return "VIA ADMINISTRACION";
				
				}
				public String ViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ViaAdminOriginalDbColumnName(){
				
					return "ViaAdmin";
				
				}

				
			    public String NUso;

				public String getNUso () {
					return this.NUso;
				}

				public Boolean NUsoIsNullable(){
				    return true;
				}
				public Boolean NUsoIsKey(){
				    return false;
				}
				public Integer NUsoLength(){
				    return 50;
				}
				public Integer NUsoPrecision(){
				    return 0;
				}
				public String NUsoDefault(){
				
					return null;
				
				}
				public String NUsoComment(){
				
				    return "NIVEL USO";
				
				}
				public String NUsoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NUsoOriginalDbColumnName(){
				
					return "NUso";
				
				}

				
			    public String NAtencion;

				public String getNAtencion () {
					return this.NAtencion;
				}

				public Boolean NAtencionIsNullable(){
				    return true;
				}
				public Boolean NAtencionIsKey(){
				    return false;
				}
				public Integer NAtencionLength(){
				    return 50;
				}
				public Integer NAtencionPrecision(){
				    return 0;
				}
				public String NAtencionDefault(){
				
					return null;
				
				}
				public String NAtencionComment(){
				
				    return "NIVEL ATENCION";
				
				}
				public String NAtencionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NAtencionOriginalDbColumnName(){
				
					return "NAtencion";
				
				}

				
			    public String ObsNUso;

				public String getObsNUso () {
					return this.ObsNUso;
				}

				public Boolean ObsNUsoIsNullable(){
				    return true;
				}
				public Boolean ObsNUsoIsKey(){
				    return false;
				}
				public Integer ObsNUsoLength(){
				    return 500;
				}
				public Integer ObsNUsoPrecision(){
				    return 0;
				}
				public String ObsNUsoDefault(){
				
					return null;
				
				}
				public String ObsNUsoComment(){
				
				    return "OBSERVACION PARA EL NIVEL DE USO";
				
				}
				public String ObsNUsoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ObsNUsoOriginalDbColumnName(){
				
					return "ObsNUso";
				
				}

				
			    public String UsadoPre;

				public String getUsadoPre () {
					return this.UsadoPre;
				}

				public Boolean UsadoPreIsNullable(){
				    return true;
				}
				public Boolean UsadoPreIsKey(){
				    return false;
				}
				public Integer UsadoPreLength(){
				    return 2;
				}
				public Integer UsadoPrePrecision(){
				    return 0;
				}
				public String UsadoPreDefault(){
				
					return null;
				
				}
				public String UsadoPreComment(){
				
				    return "USADO PARA PREPARACIONES";
				
				}
				public String UsadoPrePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UsadoPreOriginalDbColumnName(){
				
					return "UsadoPre";
				
				}

				
			    public String CodigoUnico;

				public String getCodigoUnico () {
					return this.CodigoUnico;
				}

				public Boolean CodigoUnicoIsNullable(){
				    return true;
				}
				public Boolean CodigoUnicoIsKey(){
				    return false;
				}
				public Integer CodigoUnicoLength(){
				    return 150;
				}
				public Integer CodigoUnicoPrecision(){
				    return 0;
				}
				public String CodigoUnicoDefault(){
				
					return null;
				
				}
				public String CodigoUnicoComment(){
				
				    return "CODIGO UNICO";
				
				}
				public String CodigoUnicoPattern(){
				
					return "";
				
				}
				public String CodigoUnicoOriginalDbColumnName(){
				
					return "CodigoUnico";
				
				}

				
			    public String EspecialidadMedica;

				public String getEspecialidadMedica () {
					return this.EspecialidadMedica;
				}

				public Boolean EspecialidadMedicaIsNullable(){
				    return true;
				}
				public Boolean EspecialidadMedicaIsKey(){
				    return false;
				}
				public Integer EspecialidadMedicaLength(){
				    return 150;
				}
				public Integer EspecialidadMedicaPrecision(){
				    return 0;
				}
				public String EspecialidadMedicaDefault(){
				
					return null;
				
				}
				public String EspecialidadMedicaComment(){
				
				    return "ESPECIALIDAD MEDICA";
				
				}
				public String EspecialidadMedicaPattern(){
				
					return "";
				
				}
				public String EspecialidadMedicaOriginalDbColumnName(){
				
					return "EspecialidadMedica";
				
				}

				
			    public String nuevoNuso;

				public String getNuevoNuso () {
					return this.nuevoNuso;
				}

				public Boolean nuevoNusoIsNullable(){
				    return true;
				}
				public Boolean nuevoNusoIsKey(){
				    return false;
				}
				public Integer nuevoNusoLength(){
				    return 20;
				}
				public Integer nuevoNusoPrecision(){
				    return null;
				}
				public String nuevoNusoDefault(){
				
					return null;
				
				}
				public String nuevoNusoComment(){
				
				    return "";
				
				}
				public String nuevoNusoPattern(){
				
					return "";
				
				}
				public String nuevoNusoOriginalDbColumnName(){
				
					return "nuevoNuso";
				
				}

				
			    public String nuevaEspecialidad;

				public String getNuevaEspecialidad () {
					return this.nuevaEspecialidad;
				}

				public Boolean nuevaEspecialidadIsNullable(){
				    return true;
				}
				public Boolean nuevaEspecialidadIsKey(){
				    return false;
				}
				public Integer nuevaEspecialidadLength(){
				    return 150;
				}
				public Integer nuevaEspecialidadPrecision(){
				    return null;
				}
				public String nuevaEspecialidadDefault(){
				
					return null;
				
				}
				public String nuevaEspecialidadComment(){
				
				    return "";
				
				}
				public String nuevaEspecialidadPattern(){
				
					return "";
				
				}
				public String nuevaEspecialidadOriginalDbColumnName(){
				
					return "nuevaEspecialidad";
				
				}

				
			    public String nuevaAdmin;

				public String getNuevaAdmin () {
					return this.nuevaAdmin;
				}

				public Boolean nuevaAdminIsNullable(){
				    return true;
				}
				public Boolean nuevaAdminIsKey(){
				    return false;
				}
				public Integer nuevaAdminLength(){
				    return 100;
				}
				public Integer nuevaAdminPrecision(){
				    return null;
				}
				public String nuevaAdminDefault(){
				
					return null;
				
				}
				public String nuevaAdminComment(){
				
				    return "";
				
				}
				public String nuevaAdminPattern(){
				
					return "";
				
				}
				public String nuevaAdminOriginalDbColumnName(){
				
					return "nuevaAdmin";
				
				}

				
			    public String nuevaForma;

				public String getNuevaForma () {
					return this.nuevaForma;
				}

				public Boolean nuevaFormaIsNullable(){
				    return true;
				}
				public Boolean nuevaFormaIsKey(){
				    return false;
				}
				public Integer nuevaFormaLength(){
				    return 200;
				}
				public Integer nuevaFormaPrecision(){
				    return null;
				}
				public String nuevaFormaDefault(){
				
					return null;
				
				}
				public String nuevaFormaComment(){
				
				    return "";
				
				}
				public String nuevaFormaPattern(){
				
					return "";
				
				}
				public String nuevaFormaOriginalDbColumnName(){
				
					return "nuevaForma";
				
				}

				
			    public Long linea;

				public Long getLinea () {
					return this.linea;
				}

				public Boolean lineaIsNullable(){
				    return true;
				}
				public Boolean lineaIsKey(){
				    return false;
				}
				public Integer lineaLength(){
				    return null;
				}
				public Integer lineaPrecision(){
				    return null;
				}
				public String lineaDefault(){
				
					return "";
				
				}
				public String lineaComment(){
				
				    return "";
				
				}
				public String lineaPattern(){
				
					return "";
				
				}
				public String lineaOriginalDbColumnName(){
				
					return "linea";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CodSsmp = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.FFarmaceutica = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.NUso = readString(dis);
					
					this.NAtencion = readString(dis);
					
					this.ObsNUso = readString(dis);
					
					this.UsadoPre = readString(dis);
					
					this.CodigoUnico = readString(dis);
					
					this.EspecialidadMedica = readString(dis);
					
					this.nuevoNuso = readString(dis);
					
					this.nuevaEspecialidad = readString(dis);
					
					this.nuevaAdmin = readString(dis);
					
					this.nuevaForma = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.linea = null;
           				} else {
           			    	this.linea = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CodSsmp = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.FFarmaceutica = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.NUso = readString(dis);
					
					this.NAtencion = readString(dis);
					
					this.ObsNUso = readString(dis);
					
					this.UsadoPre = readString(dis);
					
					this.CodigoUnico = readString(dis);
					
					this.EspecialidadMedica = readString(dis);
					
					this.nuevoNuso = readString(dis);
					
					this.nuevaEspecialidad = readString(dis);
					
					this.nuevaAdmin = readString(dis);
					
					this.nuevaForma = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.linea = null;
           				} else {
           			    	this.linea = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CodSsmp,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.FFarmaceutica,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.NUso,dos);
					
					// String
				
						writeString(this.NAtencion,dos);
					
					// String
				
						writeString(this.ObsNUso,dos);
					
					// String
				
						writeString(this.UsadoPre,dos);
					
					// String
				
						writeString(this.CodigoUnico,dos);
					
					// String
				
						writeString(this.EspecialidadMedica,dos);
					
					// String
				
						writeString(this.nuevoNuso,dos);
					
					// String
				
						writeString(this.nuevaEspecialidad,dos);
					
					// String
				
						writeString(this.nuevaAdmin,dos);
					
					// String
				
						writeString(this.nuevaForma,dos);
					
					// Long
				
						if(this.linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.linea);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CodSsmp,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.FFarmaceutica,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.NUso,dos);
					
					// String
				
						writeString(this.NAtencion,dos);
					
					// String
				
						writeString(this.ObsNUso,dos);
					
					// String
				
						writeString(this.UsadoPre,dos);
					
					// String
				
						writeString(this.CodigoUnico,dos);
					
					// String
				
						writeString(this.EspecialidadMedica,dos);
					
					// String
				
						writeString(this.nuevoNuso,dos);
					
					// String
				
						writeString(this.nuevaEspecialidad,dos);
					
					// String
				
						writeString(this.nuevaAdmin,dos);
					
					// String
				
						writeString(this.nuevaForma,dos);
					
					// Long
				
						if(this.linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.linea);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CodSsmp="+CodSsmp);
		sb.append(",NGenerico="+NGenerico);
		sb.append(",Concentracion="+Concentracion);
		sb.append(",FFarmaceutica="+FFarmaceutica);
		sb.append(",ViaAdmin="+ViaAdmin);
		sb.append(",NUso="+NUso);
		sb.append(",NAtencion="+NAtencion);
		sb.append(",ObsNUso="+ObsNUso);
		sb.append(",UsadoPre="+UsadoPre);
		sb.append(",CodigoUnico="+CodigoUnico);
		sb.append(",EspecialidadMedica="+EspecialidadMedica);
		sb.append(",nuevoNuso="+nuevoNuso);
		sb.append(",nuevaEspecialidad="+nuevaEspecialidad);
		sb.append(",nuevaAdmin="+nuevaAdmin);
		sb.append(",nuevaForma="+nuevaForma);
		sb.append(",linea="+String.valueOf(linea));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tOracleInput_1Process(globalMap);

		row15Struct row15 = new row15Struct();
validacionFormaFarmaceuticaStruct validacionFormaFarmaceutica = new validacionFormaFarmaceuticaStruct();
row60Struct row60 = new row60Struct();
row70Struct row70 = new row70Struct();
identificadorValidoStruct identificadorValido = new identificadorValidoStruct();
row13Struct row13 = new row13Struct();
row16Struct row16 = new row16Struct();





	
	/**
	 * [tAggregateRow_5_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_5_AGGOUT", false);
		start_Hash.put("tAggregateRow_5_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGOUT";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"validacionFormaFarmaceutica");
					}
				
		int tos_count_tAggregateRow_5_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_5 = new java.util.HashMap(); 

// ------------
	class AggOperationStruct_tAggregateRow_5 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				String Mensaje;
    				Long Linea;
    				String CODIGO_UNICO;
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.Mensaje == null) ? 0 : this.Mensaje.hashCode());
							
							result = prime * result + ((this.Linea == null) ? 0 : this.Linea.hashCode());
							
							result = prime * result + ((this.CODIGO_UNICO == null) ? 0 : this.CODIGO_UNICO.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_5 other = (AggOperationStruct_tAggregateRow_5) obj;
			
							if (this.Mensaje == null) {
								if (other.Mensaje != null) 
									return false;
							} else if (!this.Mensaje.equals(other.Mensaje)) 
								return false;
						
							if (this.Linea == null) {
								if (other.Linea != null) 
									return false;
							} else if (!this.Linea.equals(other.Linea)) 
								return false;
						
							if (this.CODIGO_UNICO == null) {
								if (other.CODIGO_UNICO != null) 
									return false;
							} else if (!this.CODIGO_UNICO.equals(other.CODIGO_UNICO)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_5 operation_result_tAggregateRow_5 = null;
	AggOperationStruct_tAggregateRow_5 operation_finder_tAggregateRow_5 = new AggOperationStruct_tAggregateRow_5();
	java.util.Map<AggOperationStruct_tAggregateRow_5,AggOperationStruct_tAggregateRow_5> hash_tAggregateRow_5 = new java.util.HashMap<AggOperationStruct_tAggregateRow_5,AggOperationStruct_tAggregateRow_5>();
	

 



/**
 * [tAggregateRow_5_AGGOUT begin ] stop
 */






	
	/**
	 * [tHashOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_3", false);
		start_Hash.put("tHashOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tHashOutput_3 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row16Struct> tHashFile_tHashOutput_3 = null;
		String hashKey_tHashOutput_3 = "tHashFile_CargaMoleculasAcuerdo_" + pid + "_tHashOutput_3";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_3)){
			    if(mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3) == null){
	      		    mf_tHashOutput_3.getResourceMap().put(hashKey_tHashOutput_3, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row16Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }else{
			    	tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }
			}
        int nb_line_tHashOutput_3 = 0;

 



/**
 * [tHashOutput_3 begin ] stop
 */



	
	/**
	 * [tReplicate_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tReplicate_2", false);
		start_Hash.put("tReplicate_2", System.currentTimeMillis());
		
	
	currentComponent="tReplicate_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tReplicate_2 = 0;
		

 



/**
 * [tReplicate_2 begin ] stop
 */



	
	/**
	 * [tJavaRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_3", false);
		start_Hash.put("tJavaRow_3", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"identificadorValido");
					}
				
		int tos_count_tJavaRow_3 = 0;
		

int nb_line_tJavaRow_3 = 0;

 



/**
 * [tJavaRow_3 begin ] stop
 */



	
	/**
	 * [tMap_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_19", false);
		start_Hash.put("tMap_19", System.currentTimeMillis());
		
	
	currentComponent="tMap_19";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row15");
					}
				
		int tos_count_tMap_19 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row59Struct> tHash_Lookup_row59 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row59Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row59Struct>) 
					globalMap.get( "tHash_Lookup_row59" ))
					;					
					
	

row59Struct row59HashKey = new row59Struct();
row59Struct row59Default = new row59Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_19__Struct  {
}
Var__tMap_19__Struct Var__tMap_19 = new Var__tMap_19__Struct();
// ###############################

// ###############################
// # Outputs initialization
validacionFormaFarmaceuticaStruct validacionFormaFarmaceutica_tmp = new validacionFormaFarmaceuticaStruct();
identificadorValidoStruct identificadorValido_tmp = new identificadorValidoStruct();
// ###############################

        
        



        









 



/**
 * [tMap_19 begin ] stop
 */



	
	/**
	 * [tHashInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_6", false);
		start_Hash.put("tHashInput_6", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_6";
	
	
		int tos_count_tHashInput_6 = 0;
		


int nb_line_tHashInput_6 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_6=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row8Struct> tHashFile_tHashInput_6 = mf_tHashInput_6.getAdvancedMemoryHashFile("tHashFile_CargaMoleculasAcuerdo_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_6==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row8Struct> iterator_tHashInput_6 = tHashFile_tHashInput_6.iterator();
while (iterator_tHashInput_6.hasNext()) {
    row8Struct next_tHashInput_6 = iterator_tHashInput_6.next();

	row15.CodSsmp = next_tHashInput_6.CodSsmp;
	row15.NGenerico = next_tHashInput_6.NGenerico;
	row15.Concentracion = next_tHashInput_6.Concentracion;
	row15.FFarmaceutica = next_tHashInput_6.FFarmaceutica;
	row15.ViaAdmin = next_tHashInput_6.ViaAdmin;
	row15.NUso = next_tHashInput_6.NUso;
	row15.NAtencion = next_tHashInput_6.NAtencion;
	row15.ObsNUso = next_tHashInput_6.ObsNUso;
	row15.UsadoPre = next_tHashInput_6.UsadoPre;
	row15.CodigoUnico = next_tHashInput_6.CodigoUnico;
	row15.EspecialidadMedica = next_tHashInput_6.EspecialidadMedica;
	row15.nuevoNuso = next_tHashInput_6.nuevoNuso;
	row15.nuevaEspecialidad = next_tHashInput_6.nuevaEspecialidad;
	row15.nuevaAdmin = next_tHashInput_6.nuevaAdmin;
	row15.nuevaForma = next_tHashInput_6.nuevaForma;
	row15.linea = next_tHashInput_6.linea;

 



/**
 * [tHashInput_6 begin ] stop
 */
	
	/**
	 * [tHashInput_6 main ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 


	tos_count_tHashInput_6++;

/**
 * [tHashInput_6 main ] stop
 */
	
	/**
	 * [tHashInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tMap_19 main ] start
	 */

	

	
	
	currentComponent="tMap_19";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row15"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_19 = false;
		
						row59Struct row59 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_19 = false;
		boolean mainRowRejected_tMap_19 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row59" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow59 = false;
       		  	    	
       		  	    	
 							row59Struct row59ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_19) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_19 = false;
								
                        		    		    row59HashKey.NOMBRE = row15.nuevaForma ;
                        		    		

								
		                        	row59HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row59.lookup( row59HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row59.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_19 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row59Struct fromLookup_row59 = null;
							row59 = row59Default;
										 
							
								 
							
							
								if (tHash_Lookup_row59 !=null && tHash_Lookup_row59.hasNext()) { // G 099
								
							
								
								fromLookup_row59 = tHash_Lookup_row59.next();

							
							
								} // G 099
							
							

							if(fromLookup_row59 != null) {
								row59 = fromLookup_row59;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_19__Struct Var = Var__tMap_19;// ###############################
        // ###############################
        // # Output tables

identificadorValido = null;
validacionFormaFarmaceutica = null;

if(!rejectedInnerJoin_tMap_19 ) {

// # Output table : 'identificadorValido'
identificadorValido_tmp.TFORMAS_ID = row59.ID ;
identificadorValido_tmp.NUEVAFORMA = row59.NOMBRE ;
identificadorValido_tmp.CODIGO_UNICO = row15.CodigoUnico ;
identificadorValido_tmp.LINEA = row15.linea;
identificadorValido = identificadorValido_tmp;
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'validacionFormaFarmaceutica'
// # Filter conditions 
if( rejectedInnerJoin_tMap_19 ) {
validacionFormaFarmaceutica_tmp.Mensaje = "No se encuentra el tipo de forma farmaceutica: ( "+row15.nuevaForma + " ) para el producto con el codigo único "+row15.CodigoUnico+"  en el sistema" ;
validacionFormaFarmaceutica_tmp.Linea = row15.linea;
validacionFormaFarmaceutica_tmp.CODIGO_UNICO = row15.CodigoUnico ;
validacionFormaFarmaceutica = validacionFormaFarmaceutica_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_19 = false;










 


	tos_count_tMap_19++;

/**
 * [tMap_19 main ] stop
 */
	
	/**
	 * [tMap_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_19";
	
	

 



/**
 * [tMap_19 process_data_begin ] stop
 */
// Start of branch "validacionFormaFarmaceutica"
if(validacionFormaFarmaceutica != null) { 



	
	/**
	 * [tAggregateRow_5_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGOUT";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"validacionFormaFarmaceutica"
						
						);
					}
					
	
operation_finder_tAggregateRow_5.Mensaje = validacionFormaFarmaceutica.Mensaje;
			operation_finder_tAggregateRow_5.Linea = validacionFormaFarmaceutica.Linea;
			operation_finder_tAggregateRow_5.CODIGO_UNICO = validacionFormaFarmaceutica.CODIGO_UNICO;
			

	operation_finder_tAggregateRow_5.hashCodeDirty = true;
	
	operation_result_tAggregateRow_5 = hash_tAggregateRow_5.get(operation_finder_tAggregateRow_5);

	

	if(operation_result_tAggregateRow_5 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_5 = new AggOperationStruct_tAggregateRow_5();

		operation_result_tAggregateRow_5.Mensaje = operation_finder_tAggregateRow_5.Mensaje;
				operation_result_tAggregateRow_5.Linea = operation_finder_tAggregateRow_5.Linea;
				operation_result_tAggregateRow_5.CODIGO_UNICO = operation_finder_tAggregateRow_5.CODIGO_UNICO;
				
		
		

		hash_tAggregateRow_5.put(operation_result_tAggregateRow_5, operation_result_tAggregateRow_5);
	
	} // G_OutMain_AggR_001


	


 


	tos_count_tAggregateRow_5_AGGOUT++;

/**
 * [tAggregateRow_5_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_5_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGOUT";
	
	

 



/**
 * [tAggregateRow_5_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_5_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGOUT";
	
	

 



/**
 * [tAggregateRow_5_AGGOUT process_data_end ] stop
 */

} // End of branch "validacionFormaFarmaceutica"




// Start of branch "identificadorValido"
if(identificadorValido != null) { 



	
	/**
	 * [tJavaRow_3 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"identificadorValido"
						
						);
					}
					

    //Code generate according to input schema and output schema
row13.TFORMAS_ID = identificadorValido.TFORMAS_ID;
row13.NUEVAFORMA = identificadorValido.NUEVAFORMA;
row13.CODIGO_UNICO = identificadorValido.CODIGO_UNICO;
row13.LINEA = identificadorValido.LINEA;

    nb_line_tJavaRow_3++;   

 


	tos_count_tJavaRow_3++;

/**
 * [tJavaRow_3 main ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_begin ] stop
 */

	
	/**
	 * [tReplicate_2 main ] start
	 */

	

	
	
	currentComponent="tReplicate_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row13"
						
						);
					}
					


	row16 = new row16Struct();
						
	row16.TFORMAS_ID = row13.TFORMAS_ID;								
	row16.NUEVAFORMA = row13.NUEVAFORMA;								
	row16.CODIGO_UNICO = row13.CODIGO_UNICO;								
	row16.LINEA = row13.LINEA;			


 


	tos_count_tReplicate_2++;

/**
 * [tReplicate_2 main ] stop
 */
	
	/**
	 * [tReplicate_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tReplicate_2";
	
	

 



/**
 * [tReplicate_2 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_3 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row16"
						
						);
					}
					



    
		row16Struct oneRow_tHashOutput_3 = new row16Struct();
				
					oneRow_tHashOutput_3.TFORMAS_ID = row16.TFORMAS_ID;
					oneRow_tHashOutput_3.NUEVAFORMA = row16.NUEVAFORMA;
					oneRow_tHashOutput_3.CODIGO_UNICO = row16.CODIGO_UNICO;
					oneRow_tHashOutput_3.LINEA = row16.LINEA;
		
        tHashFile_tHashOutput_3.put(oneRow_tHashOutput_3);
        nb_line_tHashOutput_3 ++;

 


	tos_count_tHashOutput_3++;

/**
 * [tHashOutput_3 main ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 process_data_end ] stop
 */



	
	/**
	 * [tReplicate_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tReplicate_2";
	
	

 



/**
 * [tReplicate_2 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_end ] stop
 */

} // End of branch "identificadorValido"




	
	/**
	 * [tMap_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_19";
	
	

 



/**
 * [tMap_19 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_6 end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	
    

		
			nb_line_tHashInput_6++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_CargaMoleculasAcuerdo_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_6_NB_LINE", nb_line_tHashInput_6);       

 

ok_Hash.put("tHashInput_6", true);
end_Hash.put("tHashInput_6", System.currentTimeMillis());




/**
 * [tHashInput_6 end ] stop
 */

	
	/**
	 * [tMap_19 end ] start
	 */

	

	
	
	currentComponent="tMap_19";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row59 != null) {
						tHash_Lookup_row59.endGet();
					}
					globalMap.remove( "tHash_Lookup_row59" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row15");
			  	}
			  	
 

ok_Hash.put("tMap_19", true);
end_Hash.put("tMap_19", System.currentTimeMillis());




/**
 * [tMap_19 end ] stop
 */

	
	/**
	 * [tAggregateRow_5_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGOUT";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"validacionFormaFarmaceutica");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_5_AGGOUT", true);
end_Hash.put("tAggregateRow_5_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_5_AGGOUT end ] stop
 */



	
	/**
	 * [tOracleOutput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_11", false);
		start_Hash.put("tOracleOutput_11", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_11";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row70");
					}
				
		int tos_count_tOracleOutput_11 = 0;
		






    
    int nb_line_tOracleOutput_11 = 0;
    int nb_line_update_tOracleOutput_11 = 0;
    int nb_line_inserted_tOracleOutput_11 = 0;
    int nb_line_deleted_tOracleOutput_11 = 0;
    int nb_line_rejected_tOracleOutput_11 = 0;

    int tmp_batchUpdateCount_tOracleOutput_11 = 0;

    int deletedCount_tOracleOutput_11=0;
    int updatedCount_tOracleOutput_11=0;
    int insertedCount_tOracleOutput_11=0;
    int rowsToCommitCount_tOracleOutput_11=0;
    int rejectedCount_tOracleOutput_11=0;

    boolean whetherReject_tOracleOutput_11 = false;

    java.sql.Connection conn_tOracleOutput_11 = null;

    //optional table
    String dbschema_tOracleOutput_11 = null;
    String tableName_tOracleOutput_11 = null;
        dbschema_tOracleOutput_11 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_11 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_11=0;

        if(dbschema_tOracleOutput_11 == null || dbschema_tOracleOutput_11.trim().length() == 0) {
            tableName_tOracleOutput_11 = ("ERRORLOG_TEMP");
        } else {
            tableName_tOracleOutput_11 = dbschema_tOracleOutput_11 + "." + ("ERRORLOG_TEMP");
        }
                String insert_tOracleOutput_11 = "INSERT INTO " + tableName_tOracleOutput_11 + " (Mensaje,Linea,CODIGO_UNICO) VALUES (?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_11 = conn_tOracleOutput_11.prepareStatement(insert_tOracleOutput_11);
                        resourceMap.put("pstmt_tOracleOutput_11", pstmt_tOracleOutput_11);





 



/**
 * [tOracleOutput_11 begin ] stop
 */



	
	/**
	 * [tJavaRow_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_19", false);
		start_Hash.put("tJavaRow_19", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_19";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row60");
					}
				
		int tos_count_tJavaRow_19 = 0;
		

int nb_line_tJavaRow_19 = 0;

 



/**
 * [tJavaRow_19 begin ] stop
 */



	
	/**
	 * [tAggregateRow_5_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_5_AGGIN", false);
		start_Hash.put("tAggregateRow_5_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGIN";
	
	
		int tos_count_tAggregateRow_5_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_5> values_tAggregateRow_5 = hash_tAggregateRow_5.values();

globalMap.put("tAggregateRow_5_NB_LINE", values_tAggregateRow_5.size());

for(AggOperationStruct_tAggregateRow_5 aggregated_row_tAggregateRow_5 : values_tAggregateRow_5) { // G_AggR_600



 



/**
 * [tAggregateRow_5_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_5_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGIN";
	
	

            				    row60.Mensaje = aggregated_row_tAggregateRow_5.Mensaje;
            				    
            				    row60.Linea = aggregated_row_tAggregateRow_5.Linea;
            				    
            				    row60.CODIGO_UNICO = aggregated_row_tAggregateRow_5.CODIGO_UNICO;
            				    

 


	tos_count_tAggregateRow_5_AGGIN++;

/**
 * [tAggregateRow_5_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_5_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGIN";
	
	

 



/**
 * [tAggregateRow_5_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_19 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_19";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row60"
						
						);
					}
					

    //Code generate according to input schema and output schema
row70.Mensaje = row60.Mensaje;
row70.Linea = row60.Linea;
row70.CODIGO_UNICO = row60.CODIGO_UNICO;


context.ErrorLog +=1;
    nb_line_tJavaRow_19++;   

 


	tos_count_tJavaRow_19++;

/**
 * [tJavaRow_19 main ] stop
 */
	
	/**
	 * [tJavaRow_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_19";
	
	

 



/**
 * [tJavaRow_19 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_11 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_11";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row70"
						
						);
					}
					



        whetherReject_tOracleOutput_11 = false;
                        if(row70.Mensaje == null) {
pstmt_tOracleOutput_11.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_11.setString(1, row70.Mensaje);
}

                        if(row70.Linea == null) {
pstmt_tOracleOutput_11.setNull(2, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_11.setLong(2, row70.Linea);
}

                        if(row70.CODIGO_UNICO == null) {
pstmt_tOracleOutput_11.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_11.setString(3, row70.CODIGO_UNICO);
}

                try {
                    nb_line_tOracleOutput_11++;
                    int processedCount_tOracleOutput_11 = pstmt_tOracleOutput_11.executeUpdate();
                    insertedCount_tOracleOutput_11 += processedCount_tOracleOutput_11;
                    rowsToCommitCount_tOracleOutput_11 += processedCount_tOracleOutput_11;
                } catch(java.lang.Exception e_tOracleOutput_11) {
globalMap.put("tOracleOutput_11_ERROR_MESSAGE",e_tOracleOutput_11.getMessage());
                    whetherReject_tOracleOutput_11 = true;
                            System.err.print(e_tOracleOutput_11.getMessage());
                }

 


	tos_count_tOracleOutput_11++;

/**
 * [tOracleOutput_11 main ] stop
 */
	
	/**
	 * [tOracleOutput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_11";
	
	

 



/**
 * [tOracleOutput_11 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_11";
	
	

 



/**
 * [tOracleOutput_11 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_19";
	
	

 



/**
 * [tJavaRow_19 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_5_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGIN";
	
	

 



/**
 * [tAggregateRow_5_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_5_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGIN";
	
	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_5_AGGIN", true);
end_Hash.put("tAggregateRow_5_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_5_AGGIN end ] stop
 */

	
	/**
	 * [tJavaRow_19 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_19";
	
	

globalMap.put("tJavaRow_19_NB_LINE",nb_line_tJavaRow_19);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row60");
			  	}
			  	
 

ok_Hash.put("tJavaRow_19", true);
end_Hash.put("tJavaRow_19", System.currentTimeMillis());




/**
 * [tJavaRow_19 end ] stop
 */

	
	/**
	 * [tOracleOutput_11 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_11";
	
	
	



	
        if(pstmt_tOracleOutput_11 != null) {
			
				pstmt_tOracleOutput_11.close();
				resourceMap.remove("pstmt_tOracleOutput_11");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_11", true);

	
	nb_line_deleted_tOracleOutput_11=nb_line_deleted_tOracleOutput_11+ deletedCount_tOracleOutput_11;
	nb_line_update_tOracleOutput_11=nb_line_update_tOracleOutput_11 + updatedCount_tOracleOutput_11;
	nb_line_inserted_tOracleOutput_11=nb_line_inserted_tOracleOutput_11 + insertedCount_tOracleOutput_11;
	nb_line_rejected_tOracleOutput_11=nb_line_rejected_tOracleOutput_11 + rejectedCount_tOracleOutput_11;
	
        globalMap.put("tOracleOutput_11_NB_LINE",nb_line_tOracleOutput_11);
        globalMap.put("tOracleOutput_11_NB_LINE_UPDATED",nb_line_update_tOracleOutput_11);
        globalMap.put("tOracleOutput_11_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_11);
        globalMap.put("tOracleOutput_11_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_11);
        globalMap.put("tOracleOutput_11_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_11);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row70");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_11", true);
end_Hash.put("tOracleOutput_11", System.currentTimeMillis());




/**
 * [tOracleOutput_11 end ] stop
 */













	
	/**
	 * [tJavaRow_3 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

globalMap.put("tJavaRow_3_NB_LINE",nb_line_tJavaRow_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"identificadorValido");
			  	}
			  	
 

ok_Hash.put("tJavaRow_3", true);
end_Hash.put("tJavaRow_3", System.currentTimeMillis());




/**
 * [tJavaRow_3 end ] stop
 */

	
	/**
	 * [tReplicate_2 end ] start
	 */

	

	
	
	currentComponent="tReplicate_2";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tReplicate_2", true);
end_Hash.put("tReplicate_2", System.currentTimeMillis());




/**
 * [tReplicate_2 end ] stop
 */

	
	/**
	 * [tHashOutput_3 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	
globalMap.put("tHashOutput_3_NB_LINE", nb_line_tHashOutput_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tHashOutput_3", true);
end_Hash.put("tHashOutput_3", System.currentTimeMillis());




/**
 * [tHashOutput_3 end ] stop
 */












				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_6:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk18", 0, "ok");
								} 
							
							tHashInput_8Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_5_AGGIN"
							globalMap.remove("tAggregateRow_5");
						
					     			//free memory for "tMap_19"
					     			globalMap.remove("tHash_Lookup_row59"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_6 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 finally ] stop
 */

	
	/**
	 * [tMap_19 finally ] start
	 */

	

	
	
	currentComponent="tMap_19";
	
	

 



/**
 * [tMap_19 finally ] stop
 */

	
	/**
	 * [tAggregateRow_5_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGOUT";
	
	

 



/**
 * [tAggregateRow_5_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_5_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGIN";
	
	

 



/**
 * [tAggregateRow_5_AGGIN finally ] stop
 */

	
	/**
	 * [tJavaRow_19 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_19";
	
	

 



/**
 * [tJavaRow_19 finally ] stop
 */

	
	/**
	 * [tOracleOutput_11 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_11";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_11") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_11 = null;
                if ((pstmtToClose_tOracleOutput_11 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_11")) != null) {
                    pstmtToClose_tOracleOutput_11.close();
                }
    }
 



/**
 * [tOracleOutput_11 finally ] stop
 */













	
	/**
	 * [tJavaRow_3 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 finally ] stop
 */

	
	/**
	 * [tReplicate_2 finally ] start
	 */

	

	
	
	currentComponent="tReplicate_2";
	
	

 



/**
 * [tReplicate_2 finally ] stop
 */

	
	/**
	 * [tHashOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public BigDecimal GENERICO_ID;

				public BigDecimal getGENERICO_ID () {
					return this.GENERICO_ID;
				}

				public Boolean GENERICO_IDIsNullable(){
				    return true;
				}
				public Boolean GENERICO_IDIsKey(){
				    return false;
				}
				public Integer GENERICO_IDLength(){
				    return null;
				}
				public Integer GENERICO_IDPrecision(){
				    return null;
				}
				public String GENERICO_IDDefault(){
				
					return null;
				
				}
				public String GENERICO_IDComment(){
				
				    return "";
				
				}
				public String GENERICO_IDPattern(){
				
					return "";
				
				}
				public String GENERICO_IDOriginalDbColumnName(){
				
					return "GENERICO_ID";
				
				}

				
			    public String NOMBREGENERICO;

				public String getNOMBREGENERICO () {
					return this.NOMBREGENERICO;
				}

				public Boolean NOMBREGENERICOIsNullable(){
				    return true;
				}
				public Boolean NOMBREGENERICOIsKey(){
				    return false;
				}
				public Integer NOMBREGENERICOLength(){
				    return 150;
				}
				public Integer NOMBREGENERICOPrecision(){
				    return null;
				}
				public String NOMBREGENERICODefault(){
				
					return null;
				
				}
				public String NOMBREGENERICOComment(){
				
				    return "";
				
				}
				public String NOMBREGENERICOPattern(){
				
					return "";
				
				}
				public String NOMBREGENERICOOriginalDbColumnName(){
				
					return "NOMBREGENERICO";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return 150;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				
			    public Long LINEA;

				public Long getLINEA () {
					return this.LINEA;
				}

				public Boolean LINEAIsNullable(){
				    return true;
				}
				public Boolean LINEAIsKey(){
				    return false;
				}
				public Integer LINEALength(){
				    return null;
				}
				public Integer LINEAPrecision(){
				    return null;
				}
				public String LINEADefault(){
				
					return null;
				
				}
				public String LINEAComment(){
				
				    return "";
				
				}
				public String LINEAPattern(){
				
					return "";
				
				}
				public String LINEAOriginalDbColumnName(){
				
					return "LINEA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.GENERICO_ID = (BigDecimal) dis.readObject();
					
					this.NOMBREGENERICO = readString(dis);
					
					this.CODIGO_UNICO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LINEA = null;
           				} else {
           			    	this.LINEA = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.GENERICO_ID = (BigDecimal) dis.readObject();
					
					this.NOMBREGENERICO = readString(dis);
					
					this.CODIGO_UNICO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LINEA = null;
           				} else {
           			    	this.LINEA = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.GENERICO_ID);
					
					// String
				
						writeString(this.NOMBREGENERICO,dos);
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
					// Long
				
						if(this.LINEA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LINEA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GENERICO_ID);
					
					// String
				
						writeString(this.NOMBREGENERICO,dos);
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
					// Long
				
						if(this.LINEA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LINEA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("GENERICO_ID="+String.valueOf(GENERICO_ID));
		sb.append(",NOMBREGENERICO="+NOMBREGENERICO);
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
		sb.append(",LINEA="+String.valueOf(LINEA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public BigDecimal GENERICO_ID;

				public BigDecimal getGENERICO_ID () {
					return this.GENERICO_ID;
				}

				public Boolean GENERICO_IDIsNullable(){
				    return true;
				}
				public Boolean GENERICO_IDIsKey(){
				    return false;
				}
				public Integer GENERICO_IDLength(){
				    return null;
				}
				public Integer GENERICO_IDPrecision(){
				    return null;
				}
				public String GENERICO_IDDefault(){
				
					return null;
				
				}
				public String GENERICO_IDComment(){
				
				    return "";
				
				}
				public String GENERICO_IDPattern(){
				
					return "";
				
				}
				public String GENERICO_IDOriginalDbColumnName(){
				
					return "GENERICO_ID";
				
				}

				
			    public String NOMBREGENERICO;

				public String getNOMBREGENERICO () {
					return this.NOMBREGENERICO;
				}

				public Boolean NOMBREGENERICOIsNullable(){
				    return true;
				}
				public Boolean NOMBREGENERICOIsKey(){
				    return false;
				}
				public Integer NOMBREGENERICOLength(){
				    return 150;
				}
				public Integer NOMBREGENERICOPrecision(){
				    return null;
				}
				public String NOMBREGENERICODefault(){
				
					return null;
				
				}
				public String NOMBREGENERICOComment(){
				
				    return "";
				
				}
				public String NOMBREGENERICOPattern(){
				
					return "";
				
				}
				public String NOMBREGENERICOOriginalDbColumnName(){
				
					return "NOMBREGENERICO";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return null;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				
			    public Long LINEA;

				public Long getLINEA () {
					return this.LINEA;
				}

				public Boolean LINEAIsNullable(){
				    return true;
				}
				public Boolean LINEAIsKey(){
				    return false;
				}
				public Integer LINEALength(){
				    return null;
				}
				public Integer LINEAPrecision(){
				    return null;
				}
				public String LINEADefault(){
				
					return null;
				
				}
				public String LINEAComment(){
				
				    return "";
				
				}
				public String LINEAPattern(){
				
					return "";
				
				}
				public String LINEAOriginalDbColumnName(){
				
					return "LINEA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.GENERICO_ID = (BigDecimal) dis.readObject();
					
					this.NOMBREGENERICO = readString(dis);
					
					this.CODIGO_UNICO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LINEA = null;
           				} else {
           			    	this.LINEA = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.GENERICO_ID = (BigDecimal) dis.readObject();
					
					this.NOMBREGENERICO = readString(dis);
					
					this.CODIGO_UNICO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LINEA = null;
           				} else {
           			    	this.LINEA = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.GENERICO_ID);
					
					// String
				
						writeString(this.NOMBREGENERICO,dos);
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
					// Long
				
						if(this.LINEA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LINEA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GENERICO_ID);
					
					// String
				
						writeString(this.NOMBREGENERICO,dos);
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
					// Long
				
						if(this.LINEA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LINEA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("GENERICO_ID="+String.valueOf(GENERICO_ID));
		sb.append(",NOMBREGENERICO="+NOMBREGENERICO);
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
		sb.append(",LINEA="+String.valueOf(LINEA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row69Struct implements routines.system.IPersistableRow<row69Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String Mensaje;

				public String getMensaje () {
					return this.Mensaje;
				}

				public Boolean MensajeIsNullable(){
				    return true;
				}
				public Boolean MensajeIsKey(){
				    return false;
				}
				public Integer MensajeLength(){
				    return null;
				}
				public Integer MensajePrecision(){
				    return null;
				}
				public String MensajeDefault(){
				
					return null;
				
				}
				public String MensajeComment(){
				
				    return "";
				
				}
				public String MensajePattern(){
				
					return "";
				
				}
				public String MensajeOriginalDbColumnName(){
				
					return "Mensaje";
				
				}

				
			    public Long Linea;

				public Long getLinea () {
					return this.Linea;
				}

				public Boolean LineaIsNullable(){
				    return true;
				}
				public Boolean LineaIsKey(){
				    return false;
				}
				public Integer LineaLength(){
				    return null;
				}
				public Integer LineaPrecision(){
				    return null;
				}
				public String LineaDefault(){
				
					return null;
				
				}
				public String LineaComment(){
				
				    return "";
				
				}
				public String LineaPattern(){
				
					return "";
				
				}
				public String LineaOriginalDbColumnName(){
				
					return "Linea";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return null;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Mensaje="+Mensaje);
		sb.append(",Linea="+String.valueOf(Linea));
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row69Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row28Struct implements routines.system.IPersistableRow<row28Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String Mensaje;

				public String getMensaje () {
					return this.Mensaje;
				}

				public Boolean MensajeIsNullable(){
				    return true;
				}
				public Boolean MensajeIsKey(){
				    return false;
				}
				public Integer MensajeLength(){
				    return null;
				}
				public Integer MensajePrecision(){
				    return null;
				}
				public String MensajeDefault(){
				
					return null;
				
				}
				public String MensajeComment(){
				
				    return "";
				
				}
				public String MensajePattern(){
				
					return "";
				
				}
				public String MensajeOriginalDbColumnName(){
				
					return "Mensaje";
				
				}

				
			    public Long Linea;

				public Long getLinea () {
					return this.Linea;
				}

				public Boolean LineaIsNullable(){
				    return true;
				}
				public Boolean LineaIsKey(){
				    return false;
				}
				public Integer LineaLength(){
				    return null;
				}
				public Integer LineaPrecision(){
				    return null;
				}
				public String LineaDefault(){
				
					return null;
				
				}
				public String LineaComment(){
				
				    return "";
				
				}
				public String LineaPattern(){
				
					return "";
				
				}
				public String LineaOriginalDbColumnName(){
				
					return "Linea";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return null;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Mensaje="+Mensaje);
		sb.append(",Linea="+String.valueOf(Linea));
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row28Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_6 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_6> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String Mensaje;

				public String getMensaje () {
					return this.Mensaje;
				}

				public Boolean MensajeIsNullable(){
				    return true;
				}
				public Boolean MensajeIsKey(){
				    return false;
				}
				public Integer MensajeLength(){
				    return null;
				}
				public Integer MensajePrecision(){
				    return null;
				}
				public String MensajeDefault(){
				
					return null;
				
				}
				public String MensajeComment(){
				
				    return "";
				
				}
				public String MensajePattern(){
				
					return "";
				
				}
				public String MensajeOriginalDbColumnName(){
				
					return "Mensaje";
				
				}

				
			    public Long Linea;

				public Long getLinea () {
					return this.Linea;
				}

				public Boolean LineaIsNullable(){
				    return true;
				}
				public Boolean LineaIsKey(){
				    return false;
				}
				public Integer LineaLength(){
				    return null;
				}
				public Integer LineaPrecision(){
				    return null;
				}
				public String LineaDefault(){
				
					return null;
				
				}
				public String LineaComment(){
				
				    return "";
				
				}
				public String LineaPattern(){
				
					return "";
				
				}
				public String LineaOriginalDbColumnName(){
				
					return "Linea";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return null;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Mensaje="+Mensaje);
		sb.append(",Linea="+String.valueOf(Linea));
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_6 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class validacionGenericoStruct implements routines.system.IPersistableRow<validacionGenericoStruct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String Mensaje;

				public String getMensaje () {
					return this.Mensaje;
				}

				public Boolean MensajeIsNullable(){
				    return true;
				}
				public Boolean MensajeIsKey(){
				    return false;
				}
				public Integer MensajeLength(){
				    return null;
				}
				public Integer MensajePrecision(){
				    return null;
				}
				public String MensajeDefault(){
				
					return null;
				
				}
				public String MensajeComment(){
				
				    return "";
				
				}
				public String MensajePattern(){
				
					return "";
				
				}
				public String MensajeOriginalDbColumnName(){
				
					return "Mensaje";
				
				}

				
			    public Long Linea;

				public Long getLinea () {
					return this.Linea;
				}

				public Boolean LineaIsNullable(){
				    return true;
				}
				public Boolean LineaIsKey(){
				    return false;
				}
				public Integer LineaLength(){
				    return null;
				}
				public Integer LineaPrecision(){
				    return null;
				}
				public String LineaDefault(){
				
					return null;
				
				}
				public String LineaComment(){
				
				    return "";
				
				}
				public String LineaPattern(){
				
					return "";
				
				}
				public String LineaOriginalDbColumnName(){
				
					return "Linea";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return null;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Mensaje="+Mensaje);
		sb.append(",Linea="+String.valueOf(Linea));
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(validacionGenericoStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class identificadoresValidosStruct implements routines.system.IPersistableRow<identificadoresValidosStruct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public BigDecimal GENERICO_ID;

				public BigDecimal getGENERICO_ID () {
					return this.GENERICO_ID;
				}

				public Boolean GENERICO_IDIsNullable(){
				    return true;
				}
				public Boolean GENERICO_IDIsKey(){
				    return false;
				}
				public Integer GENERICO_IDLength(){
				    return null;
				}
				public Integer GENERICO_IDPrecision(){
				    return null;
				}
				public String GENERICO_IDDefault(){
				
					return null;
				
				}
				public String GENERICO_IDComment(){
				
				    return "";
				
				}
				public String GENERICO_IDPattern(){
				
					return "";
				
				}
				public String GENERICO_IDOriginalDbColumnName(){
				
					return "GENERICO_ID";
				
				}

				
			    public String NOMBREGENERICO;

				public String getNOMBREGENERICO () {
					return this.NOMBREGENERICO;
				}

				public Boolean NOMBREGENERICOIsNullable(){
				    return true;
				}
				public Boolean NOMBREGENERICOIsKey(){
				    return false;
				}
				public Integer NOMBREGENERICOLength(){
				    return null;
				}
				public Integer NOMBREGENERICOPrecision(){
				    return null;
				}
				public String NOMBREGENERICODefault(){
				
					return null;
				
				}
				public String NOMBREGENERICOComment(){
				
				    return "";
				
				}
				public String NOMBREGENERICOPattern(){
				
					return "";
				
				}
				public String NOMBREGENERICOOriginalDbColumnName(){
				
					return "NOMBREGENERICO";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return null;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				
			    public Long LINEA;

				public Long getLINEA () {
					return this.LINEA;
				}

				public Boolean LINEAIsNullable(){
				    return true;
				}
				public Boolean LINEAIsKey(){
				    return false;
				}
				public Integer LINEALength(){
				    return null;
				}
				public Integer LINEAPrecision(){
				    return null;
				}
				public String LINEADefault(){
				
					return null;
				
				}
				public String LINEAComment(){
				
				    return "";
				
				}
				public String LINEAPattern(){
				
					return "";
				
				}
				public String LINEAOriginalDbColumnName(){
				
					return "LINEA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.GENERICO_ID = (BigDecimal) dis.readObject();
					
					this.NOMBREGENERICO = readString(dis);
					
					this.CODIGO_UNICO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LINEA = null;
           				} else {
           			    	this.LINEA = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.GENERICO_ID = (BigDecimal) dis.readObject();
					
					this.NOMBREGENERICO = readString(dis);
					
					this.CODIGO_UNICO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LINEA = null;
           				} else {
           			    	this.LINEA = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.GENERICO_ID);
					
					// String
				
						writeString(this.NOMBREGENERICO,dos);
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
					// Long
				
						if(this.LINEA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LINEA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GENERICO_ID);
					
					// String
				
						writeString(this.NOMBREGENERICO,dos);
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
					// Long
				
						if(this.LINEA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LINEA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("GENERICO_ID="+String.valueOf(GENERICO_ID));
		sb.append(",NOMBREGENERICO="+NOMBREGENERICO);
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
		sb.append(",LINEA="+String.valueOf(LINEA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(identificadoresValidosStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String CodSsmp;

				public String getCodSsmp () {
					return this.CodSsmp;
				}

				public Boolean CodSsmpIsNullable(){
				    return true;
				}
				public Boolean CodSsmpIsKey(){
				    return false;
				}
				public Integer CodSsmpLength(){
				    return 15;
				}
				public Integer CodSsmpPrecision(){
				    return 0;
				}
				public String CodSsmpDefault(){
				
					return null;
				
				}
				public String CodSsmpComment(){
				
				    return "CODIGO SSMP";
				
				}
				public String CodSsmpPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CodSsmpOriginalDbColumnName(){
				
					return "CodSsmp";
				
				}

				
			    public String NGenerico;

				public String getNGenerico () {
					return this.NGenerico;
				}

				public Boolean NGenericoIsNullable(){
				    return true;
				}
				public Boolean NGenericoIsKey(){
				    return false;
				}
				public Integer NGenericoLength(){
				    return 200;
				}
				public Integer NGenericoPrecision(){
				    return 0;
				}
				public String NGenericoDefault(){
				
					return null;
				
				}
				public String NGenericoComment(){
				
				    return "NOMBRE GENERICO";
				
				}
				public String NGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NGenericoOriginalDbColumnName(){
				
					return "NGenerico";
				
				}

				
			    public String Concentracion;

				public String getConcentracion () {
					return this.Concentracion;
				}

				public Boolean ConcentracionIsNullable(){
				    return true;
				}
				public Boolean ConcentracionIsKey(){
				    return false;
				}
				public Integer ConcentracionLength(){
				    return 50;
				}
				public Integer ConcentracionPrecision(){
				    return 0;
				}
				public String ConcentracionDefault(){
				
					return null;
				
				}
				public String ConcentracionComment(){
				
				    return "CONCENTRACION";
				
				}
				public String ConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ConcentracionOriginalDbColumnName(){
				
					return "Concentracion";
				
				}

				
			    public String FFarmaceutica;

				public String getFFarmaceutica () {
					return this.FFarmaceutica;
				}

				public Boolean FFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean FFarmaceuticaIsKey(){
				    return false;
				}
				public Integer FFarmaceuticaLength(){
				    return 500;
				}
				public Integer FFarmaceuticaPrecision(){
				    return 0;
				}
				public String FFarmaceuticaDefault(){
				
					return null;
				
				}
				public String FFarmaceuticaComment(){
				
				    return "FORMA FARMACEUTICA";
				
				}
				public String FFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FFarmaceuticaOriginalDbColumnName(){
				
					return "FFarmaceutica";
				
				}

				
			    public String ViaAdmin;

				public String getViaAdmin () {
					return this.ViaAdmin;
				}

				public Boolean ViaAdminIsNullable(){
				    return true;
				}
				public Boolean ViaAdminIsKey(){
				    return false;
				}
				public Integer ViaAdminLength(){
				    return 200;
				}
				public Integer ViaAdminPrecision(){
				    return 0;
				}
				public String ViaAdminDefault(){
				
					return null;
				
				}
				public String ViaAdminComment(){
				
				    return "VIA ADMINISTRACION";
				
				}
				public String ViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ViaAdminOriginalDbColumnName(){
				
					return "ViaAdmin";
				
				}

				
			    public String NUso;

				public String getNUso () {
					return this.NUso;
				}

				public Boolean NUsoIsNullable(){
				    return true;
				}
				public Boolean NUsoIsKey(){
				    return false;
				}
				public Integer NUsoLength(){
				    return 50;
				}
				public Integer NUsoPrecision(){
				    return 0;
				}
				public String NUsoDefault(){
				
					return null;
				
				}
				public String NUsoComment(){
				
				    return "NIVEL USO";
				
				}
				public String NUsoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NUsoOriginalDbColumnName(){
				
					return "NUso";
				
				}

				
			    public String NAtencion;

				public String getNAtencion () {
					return this.NAtencion;
				}

				public Boolean NAtencionIsNullable(){
				    return true;
				}
				public Boolean NAtencionIsKey(){
				    return false;
				}
				public Integer NAtencionLength(){
				    return 50;
				}
				public Integer NAtencionPrecision(){
				    return 0;
				}
				public String NAtencionDefault(){
				
					return null;
				
				}
				public String NAtencionComment(){
				
				    return "NIVEL ATENCION";
				
				}
				public String NAtencionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NAtencionOriginalDbColumnName(){
				
					return "NAtencion";
				
				}

				
			    public String ObsNUso;

				public String getObsNUso () {
					return this.ObsNUso;
				}

				public Boolean ObsNUsoIsNullable(){
				    return true;
				}
				public Boolean ObsNUsoIsKey(){
				    return false;
				}
				public Integer ObsNUsoLength(){
				    return 500;
				}
				public Integer ObsNUsoPrecision(){
				    return 0;
				}
				public String ObsNUsoDefault(){
				
					return null;
				
				}
				public String ObsNUsoComment(){
				
				    return "OBSERVACION PARA EL NIVEL DE USO";
				
				}
				public String ObsNUsoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ObsNUsoOriginalDbColumnName(){
				
					return "ObsNUso";
				
				}

				
			    public String UsadoPre;

				public String getUsadoPre () {
					return this.UsadoPre;
				}

				public Boolean UsadoPreIsNullable(){
				    return true;
				}
				public Boolean UsadoPreIsKey(){
				    return false;
				}
				public Integer UsadoPreLength(){
				    return 2;
				}
				public Integer UsadoPrePrecision(){
				    return 0;
				}
				public String UsadoPreDefault(){
				
					return null;
				
				}
				public String UsadoPreComment(){
				
				    return "USADO PARA PREPARACIONES";
				
				}
				public String UsadoPrePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UsadoPreOriginalDbColumnName(){
				
					return "UsadoPre";
				
				}

				
			    public String CodigoUnico;

				public String getCodigoUnico () {
					return this.CodigoUnico;
				}

				public Boolean CodigoUnicoIsNullable(){
				    return true;
				}
				public Boolean CodigoUnicoIsKey(){
				    return false;
				}
				public Integer CodigoUnicoLength(){
				    return 150;
				}
				public Integer CodigoUnicoPrecision(){
				    return 0;
				}
				public String CodigoUnicoDefault(){
				
					return null;
				
				}
				public String CodigoUnicoComment(){
				
				    return "CODIGO UNICO";
				
				}
				public String CodigoUnicoPattern(){
				
					return "";
				
				}
				public String CodigoUnicoOriginalDbColumnName(){
				
					return "CodigoUnico";
				
				}

				
			    public String EspecialidadMedica;

				public String getEspecialidadMedica () {
					return this.EspecialidadMedica;
				}

				public Boolean EspecialidadMedicaIsNullable(){
				    return true;
				}
				public Boolean EspecialidadMedicaIsKey(){
				    return false;
				}
				public Integer EspecialidadMedicaLength(){
				    return 150;
				}
				public Integer EspecialidadMedicaPrecision(){
				    return 0;
				}
				public String EspecialidadMedicaDefault(){
				
					return null;
				
				}
				public String EspecialidadMedicaComment(){
				
				    return "ESPECIALIDAD MEDICA";
				
				}
				public String EspecialidadMedicaPattern(){
				
					return "";
				
				}
				public String EspecialidadMedicaOriginalDbColumnName(){
				
					return "EspecialidadMedica";
				
				}

				
			    public String nuevoNuso;

				public String getNuevoNuso () {
					return this.nuevoNuso;
				}

				public Boolean nuevoNusoIsNullable(){
				    return true;
				}
				public Boolean nuevoNusoIsKey(){
				    return false;
				}
				public Integer nuevoNusoLength(){
				    return 20;
				}
				public Integer nuevoNusoPrecision(){
				    return null;
				}
				public String nuevoNusoDefault(){
				
					return null;
				
				}
				public String nuevoNusoComment(){
				
				    return "";
				
				}
				public String nuevoNusoPattern(){
				
					return "";
				
				}
				public String nuevoNusoOriginalDbColumnName(){
				
					return "nuevoNuso";
				
				}

				
			    public String nuevaEspecialidad;

				public String getNuevaEspecialidad () {
					return this.nuevaEspecialidad;
				}

				public Boolean nuevaEspecialidadIsNullable(){
				    return true;
				}
				public Boolean nuevaEspecialidadIsKey(){
				    return false;
				}
				public Integer nuevaEspecialidadLength(){
				    return 150;
				}
				public Integer nuevaEspecialidadPrecision(){
				    return null;
				}
				public String nuevaEspecialidadDefault(){
				
					return null;
				
				}
				public String nuevaEspecialidadComment(){
				
				    return "";
				
				}
				public String nuevaEspecialidadPattern(){
				
					return "";
				
				}
				public String nuevaEspecialidadOriginalDbColumnName(){
				
					return "nuevaEspecialidad";
				
				}

				
			    public String nuevaAdmin;

				public String getNuevaAdmin () {
					return this.nuevaAdmin;
				}

				public Boolean nuevaAdminIsNullable(){
				    return true;
				}
				public Boolean nuevaAdminIsKey(){
				    return false;
				}
				public Integer nuevaAdminLength(){
				    return 100;
				}
				public Integer nuevaAdminPrecision(){
				    return null;
				}
				public String nuevaAdminDefault(){
				
					return null;
				
				}
				public String nuevaAdminComment(){
				
				    return "";
				
				}
				public String nuevaAdminPattern(){
				
					return "";
				
				}
				public String nuevaAdminOriginalDbColumnName(){
				
					return "nuevaAdmin";
				
				}

				
			    public String nuevaForma;

				public String getNuevaForma () {
					return this.nuevaForma;
				}

				public Boolean nuevaFormaIsNullable(){
				    return true;
				}
				public Boolean nuevaFormaIsKey(){
				    return false;
				}
				public Integer nuevaFormaLength(){
				    return 200;
				}
				public Integer nuevaFormaPrecision(){
				    return null;
				}
				public String nuevaFormaDefault(){
				
					return null;
				
				}
				public String nuevaFormaComment(){
				
				    return "";
				
				}
				public String nuevaFormaPattern(){
				
					return "";
				
				}
				public String nuevaFormaOriginalDbColumnName(){
				
					return "nuevaForma";
				
				}

				
			    public Long linea;

				public Long getLinea () {
					return this.linea;
				}

				public Boolean lineaIsNullable(){
				    return true;
				}
				public Boolean lineaIsKey(){
				    return false;
				}
				public Integer lineaLength(){
				    return null;
				}
				public Integer lineaPrecision(){
				    return null;
				}
				public String lineaDefault(){
				
					return "";
				
				}
				public String lineaComment(){
				
				    return "";
				
				}
				public String lineaPattern(){
				
					return "";
				
				}
				public String lineaOriginalDbColumnName(){
				
					return "linea";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CodSsmp = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.FFarmaceutica = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.NUso = readString(dis);
					
					this.NAtencion = readString(dis);
					
					this.ObsNUso = readString(dis);
					
					this.UsadoPre = readString(dis);
					
					this.CodigoUnico = readString(dis);
					
					this.EspecialidadMedica = readString(dis);
					
					this.nuevoNuso = readString(dis);
					
					this.nuevaEspecialidad = readString(dis);
					
					this.nuevaAdmin = readString(dis);
					
					this.nuevaForma = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.linea = null;
           				} else {
           			    	this.linea = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CodSsmp = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.FFarmaceutica = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.NUso = readString(dis);
					
					this.NAtencion = readString(dis);
					
					this.ObsNUso = readString(dis);
					
					this.UsadoPre = readString(dis);
					
					this.CodigoUnico = readString(dis);
					
					this.EspecialidadMedica = readString(dis);
					
					this.nuevoNuso = readString(dis);
					
					this.nuevaEspecialidad = readString(dis);
					
					this.nuevaAdmin = readString(dis);
					
					this.nuevaForma = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.linea = null;
           				} else {
           			    	this.linea = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CodSsmp,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.FFarmaceutica,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.NUso,dos);
					
					// String
				
						writeString(this.NAtencion,dos);
					
					// String
				
						writeString(this.ObsNUso,dos);
					
					// String
				
						writeString(this.UsadoPre,dos);
					
					// String
				
						writeString(this.CodigoUnico,dos);
					
					// String
				
						writeString(this.EspecialidadMedica,dos);
					
					// String
				
						writeString(this.nuevoNuso,dos);
					
					// String
				
						writeString(this.nuevaEspecialidad,dos);
					
					// String
				
						writeString(this.nuevaAdmin,dos);
					
					// String
				
						writeString(this.nuevaForma,dos);
					
					// Long
				
						if(this.linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.linea);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CodSsmp,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.FFarmaceutica,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.NUso,dos);
					
					// String
				
						writeString(this.NAtencion,dos);
					
					// String
				
						writeString(this.ObsNUso,dos);
					
					// String
				
						writeString(this.UsadoPre,dos);
					
					// String
				
						writeString(this.CodigoUnico,dos);
					
					// String
				
						writeString(this.EspecialidadMedica,dos);
					
					// String
				
						writeString(this.nuevoNuso,dos);
					
					// String
				
						writeString(this.nuevaEspecialidad,dos);
					
					// String
				
						writeString(this.nuevaAdmin,dos);
					
					// String
				
						writeString(this.nuevaForma,dos);
					
					// Long
				
						if(this.linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.linea);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CodSsmp="+CodSsmp);
		sb.append(",NGenerico="+NGenerico);
		sb.append(",Concentracion="+Concentracion);
		sb.append(",FFarmaceutica="+FFarmaceutica);
		sb.append(",ViaAdmin="+ViaAdmin);
		sb.append(",NUso="+NUso);
		sb.append(",NAtencion="+NAtencion);
		sb.append(",ObsNUso="+ObsNUso);
		sb.append(",UsadoPre="+UsadoPre);
		sb.append(",CodigoUnico="+CodigoUnico);
		sb.append(",EspecialidadMedica="+EspecialidadMedica);
		sb.append(",nuevoNuso="+nuevoNuso);
		sb.append(",nuevaEspecialidad="+nuevaEspecialidad);
		sb.append(",nuevaAdmin="+nuevaAdmin);
		sb.append(",nuevaForma="+nuevaForma);
		sb.append(",linea="+String.valueOf(linea));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_8Struct implements routines.system.IPersistableRow<after_tHashInput_8Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String CodSsmp;

				public String getCodSsmp () {
					return this.CodSsmp;
				}

				public Boolean CodSsmpIsNullable(){
				    return true;
				}
				public Boolean CodSsmpIsKey(){
				    return false;
				}
				public Integer CodSsmpLength(){
				    return 15;
				}
				public Integer CodSsmpPrecision(){
				    return 0;
				}
				public String CodSsmpDefault(){
				
					return null;
				
				}
				public String CodSsmpComment(){
				
				    return "CODIGO SSMP";
				
				}
				public String CodSsmpPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CodSsmpOriginalDbColumnName(){
				
					return "CodSsmp";
				
				}

				
			    public String NGenerico;

				public String getNGenerico () {
					return this.NGenerico;
				}

				public Boolean NGenericoIsNullable(){
				    return true;
				}
				public Boolean NGenericoIsKey(){
				    return false;
				}
				public Integer NGenericoLength(){
				    return 200;
				}
				public Integer NGenericoPrecision(){
				    return 0;
				}
				public String NGenericoDefault(){
				
					return null;
				
				}
				public String NGenericoComment(){
				
				    return "NOMBRE GENERICO";
				
				}
				public String NGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NGenericoOriginalDbColumnName(){
				
					return "NGenerico";
				
				}

				
			    public String Concentracion;

				public String getConcentracion () {
					return this.Concentracion;
				}

				public Boolean ConcentracionIsNullable(){
				    return true;
				}
				public Boolean ConcentracionIsKey(){
				    return false;
				}
				public Integer ConcentracionLength(){
				    return 50;
				}
				public Integer ConcentracionPrecision(){
				    return 0;
				}
				public String ConcentracionDefault(){
				
					return null;
				
				}
				public String ConcentracionComment(){
				
				    return "CONCENTRACION";
				
				}
				public String ConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ConcentracionOriginalDbColumnName(){
				
					return "Concentracion";
				
				}

				
			    public String FFarmaceutica;

				public String getFFarmaceutica () {
					return this.FFarmaceutica;
				}

				public Boolean FFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean FFarmaceuticaIsKey(){
				    return false;
				}
				public Integer FFarmaceuticaLength(){
				    return 500;
				}
				public Integer FFarmaceuticaPrecision(){
				    return 0;
				}
				public String FFarmaceuticaDefault(){
				
					return null;
				
				}
				public String FFarmaceuticaComment(){
				
				    return "FORMA FARMACEUTICA";
				
				}
				public String FFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FFarmaceuticaOriginalDbColumnName(){
				
					return "FFarmaceutica";
				
				}

				
			    public String ViaAdmin;

				public String getViaAdmin () {
					return this.ViaAdmin;
				}

				public Boolean ViaAdminIsNullable(){
				    return true;
				}
				public Boolean ViaAdminIsKey(){
				    return false;
				}
				public Integer ViaAdminLength(){
				    return 200;
				}
				public Integer ViaAdminPrecision(){
				    return 0;
				}
				public String ViaAdminDefault(){
				
					return null;
				
				}
				public String ViaAdminComment(){
				
				    return "VIA ADMINISTRACION";
				
				}
				public String ViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ViaAdminOriginalDbColumnName(){
				
					return "ViaAdmin";
				
				}

				
			    public String NUso;

				public String getNUso () {
					return this.NUso;
				}

				public Boolean NUsoIsNullable(){
				    return true;
				}
				public Boolean NUsoIsKey(){
				    return false;
				}
				public Integer NUsoLength(){
				    return 50;
				}
				public Integer NUsoPrecision(){
				    return 0;
				}
				public String NUsoDefault(){
				
					return null;
				
				}
				public String NUsoComment(){
				
				    return "NIVEL USO";
				
				}
				public String NUsoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NUsoOriginalDbColumnName(){
				
					return "NUso";
				
				}

				
			    public String NAtencion;

				public String getNAtencion () {
					return this.NAtencion;
				}

				public Boolean NAtencionIsNullable(){
				    return true;
				}
				public Boolean NAtencionIsKey(){
				    return false;
				}
				public Integer NAtencionLength(){
				    return 50;
				}
				public Integer NAtencionPrecision(){
				    return 0;
				}
				public String NAtencionDefault(){
				
					return null;
				
				}
				public String NAtencionComment(){
				
				    return "NIVEL ATENCION";
				
				}
				public String NAtencionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NAtencionOriginalDbColumnName(){
				
					return "NAtencion";
				
				}

				
			    public String ObsNUso;

				public String getObsNUso () {
					return this.ObsNUso;
				}

				public Boolean ObsNUsoIsNullable(){
				    return true;
				}
				public Boolean ObsNUsoIsKey(){
				    return false;
				}
				public Integer ObsNUsoLength(){
				    return 500;
				}
				public Integer ObsNUsoPrecision(){
				    return 0;
				}
				public String ObsNUsoDefault(){
				
					return null;
				
				}
				public String ObsNUsoComment(){
				
				    return "OBSERVACION PARA EL NIVEL DE USO";
				
				}
				public String ObsNUsoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ObsNUsoOriginalDbColumnName(){
				
					return "ObsNUso";
				
				}

				
			    public String UsadoPre;

				public String getUsadoPre () {
					return this.UsadoPre;
				}

				public Boolean UsadoPreIsNullable(){
				    return true;
				}
				public Boolean UsadoPreIsKey(){
				    return false;
				}
				public Integer UsadoPreLength(){
				    return 2;
				}
				public Integer UsadoPrePrecision(){
				    return 0;
				}
				public String UsadoPreDefault(){
				
					return null;
				
				}
				public String UsadoPreComment(){
				
				    return "USADO PARA PREPARACIONES";
				
				}
				public String UsadoPrePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UsadoPreOriginalDbColumnName(){
				
					return "UsadoPre";
				
				}

				
			    public String CodigoUnico;

				public String getCodigoUnico () {
					return this.CodigoUnico;
				}

				public Boolean CodigoUnicoIsNullable(){
				    return true;
				}
				public Boolean CodigoUnicoIsKey(){
				    return false;
				}
				public Integer CodigoUnicoLength(){
				    return 150;
				}
				public Integer CodigoUnicoPrecision(){
				    return 0;
				}
				public String CodigoUnicoDefault(){
				
					return null;
				
				}
				public String CodigoUnicoComment(){
				
				    return "CODIGO UNICO";
				
				}
				public String CodigoUnicoPattern(){
				
					return "";
				
				}
				public String CodigoUnicoOriginalDbColumnName(){
				
					return "CodigoUnico";
				
				}

				
			    public String EspecialidadMedica;

				public String getEspecialidadMedica () {
					return this.EspecialidadMedica;
				}

				public Boolean EspecialidadMedicaIsNullable(){
				    return true;
				}
				public Boolean EspecialidadMedicaIsKey(){
				    return false;
				}
				public Integer EspecialidadMedicaLength(){
				    return 150;
				}
				public Integer EspecialidadMedicaPrecision(){
				    return 0;
				}
				public String EspecialidadMedicaDefault(){
				
					return null;
				
				}
				public String EspecialidadMedicaComment(){
				
				    return "ESPECIALIDAD MEDICA";
				
				}
				public String EspecialidadMedicaPattern(){
				
					return "";
				
				}
				public String EspecialidadMedicaOriginalDbColumnName(){
				
					return "EspecialidadMedica";
				
				}

				
			    public String nuevoNuso;

				public String getNuevoNuso () {
					return this.nuevoNuso;
				}

				public Boolean nuevoNusoIsNullable(){
				    return true;
				}
				public Boolean nuevoNusoIsKey(){
				    return false;
				}
				public Integer nuevoNusoLength(){
				    return 20;
				}
				public Integer nuevoNusoPrecision(){
				    return null;
				}
				public String nuevoNusoDefault(){
				
					return null;
				
				}
				public String nuevoNusoComment(){
				
				    return "";
				
				}
				public String nuevoNusoPattern(){
				
					return "";
				
				}
				public String nuevoNusoOriginalDbColumnName(){
				
					return "nuevoNuso";
				
				}

				
			    public String nuevaEspecialidad;

				public String getNuevaEspecialidad () {
					return this.nuevaEspecialidad;
				}

				public Boolean nuevaEspecialidadIsNullable(){
				    return true;
				}
				public Boolean nuevaEspecialidadIsKey(){
				    return false;
				}
				public Integer nuevaEspecialidadLength(){
				    return 150;
				}
				public Integer nuevaEspecialidadPrecision(){
				    return null;
				}
				public String nuevaEspecialidadDefault(){
				
					return null;
				
				}
				public String nuevaEspecialidadComment(){
				
				    return "";
				
				}
				public String nuevaEspecialidadPattern(){
				
					return "";
				
				}
				public String nuevaEspecialidadOriginalDbColumnName(){
				
					return "nuevaEspecialidad";
				
				}

				
			    public String nuevaAdmin;

				public String getNuevaAdmin () {
					return this.nuevaAdmin;
				}

				public Boolean nuevaAdminIsNullable(){
				    return true;
				}
				public Boolean nuevaAdminIsKey(){
				    return false;
				}
				public Integer nuevaAdminLength(){
				    return 100;
				}
				public Integer nuevaAdminPrecision(){
				    return null;
				}
				public String nuevaAdminDefault(){
				
					return null;
				
				}
				public String nuevaAdminComment(){
				
				    return "";
				
				}
				public String nuevaAdminPattern(){
				
					return "";
				
				}
				public String nuevaAdminOriginalDbColumnName(){
				
					return "nuevaAdmin";
				
				}

				
			    public String nuevaForma;

				public String getNuevaForma () {
					return this.nuevaForma;
				}

				public Boolean nuevaFormaIsNullable(){
				    return true;
				}
				public Boolean nuevaFormaIsKey(){
				    return false;
				}
				public Integer nuevaFormaLength(){
				    return 200;
				}
				public Integer nuevaFormaPrecision(){
				    return null;
				}
				public String nuevaFormaDefault(){
				
					return null;
				
				}
				public String nuevaFormaComment(){
				
				    return "";
				
				}
				public String nuevaFormaPattern(){
				
					return "";
				
				}
				public String nuevaFormaOriginalDbColumnName(){
				
					return "nuevaForma";
				
				}

				
			    public Long linea;

				public Long getLinea () {
					return this.linea;
				}

				public Boolean lineaIsNullable(){
				    return true;
				}
				public Boolean lineaIsKey(){
				    return false;
				}
				public Integer lineaLength(){
				    return null;
				}
				public Integer lineaPrecision(){
				    return null;
				}
				public String lineaDefault(){
				
					return "";
				
				}
				public String lineaComment(){
				
				    return "";
				
				}
				public String lineaPattern(){
				
					return "";
				
				}
				public String lineaOriginalDbColumnName(){
				
					return "linea";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CodSsmp = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.FFarmaceutica = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.NUso = readString(dis);
					
					this.NAtencion = readString(dis);
					
					this.ObsNUso = readString(dis);
					
					this.UsadoPre = readString(dis);
					
					this.CodigoUnico = readString(dis);
					
					this.EspecialidadMedica = readString(dis);
					
					this.nuevoNuso = readString(dis);
					
					this.nuevaEspecialidad = readString(dis);
					
					this.nuevaAdmin = readString(dis);
					
					this.nuevaForma = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.linea = null;
           				} else {
           			    	this.linea = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CodSsmp = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.FFarmaceutica = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.NUso = readString(dis);
					
					this.NAtencion = readString(dis);
					
					this.ObsNUso = readString(dis);
					
					this.UsadoPre = readString(dis);
					
					this.CodigoUnico = readString(dis);
					
					this.EspecialidadMedica = readString(dis);
					
					this.nuevoNuso = readString(dis);
					
					this.nuevaEspecialidad = readString(dis);
					
					this.nuevaAdmin = readString(dis);
					
					this.nuevaForma = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.linea = null;
           				} else {
           			    	this.linea = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CodSsmp,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.FFarmaceutica,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.NUso,dos);
					
					// String
				
						writeString(this.NAtencion,dos);
					
					// String
				
						writeString(this.ObsNUso,dos);
					
					// String
				
						writeString(this.UsadoPre,dos);
					
					// String
				
						writeString(this.CodigoUnico,dos);
					
					// String
				
						writeString(this.EspecialidadMedica,dos);
					
					// String
				
						writeString(this.nuevoNuso,dos);
					
					// String
				
						writeString(this.nuevaEspecialidad,dos);
					
					// String
				
						writeString(this.nuevaAdmin,dos);
					
					// String
				
						writeString(this.nuevaForma,dos);
					
					// Long
				
						if(this.linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.linea);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CodSsmp,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.FFarmaceutica,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.NUso,dos);
					
					// String
				
						writeString(this.NAtencion,dos);
					
					// String
				
						writeString(this.ObsNUso,dos);
					
					// String
				
						writeString(this.UsadoPre,dos);
					
					// String
				
						writeString(this.CodigoUnico,dos);
					
					// String
				
						writeString(this.EspecialidadMedica,dos);
					
					// String
				
						writeString(this.nuevoNuso,dos);
					
					// String
				
						writeString(this.nuevaEspecialidad,dos);
					
					// String
				
						writeString(this.nuevaAdmin,dos);
					
					// String
				
						writeString(this.nuevaForma,dos);
					
					// Long
				
						if(this.linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.linea);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CodSsmp="+CodSsmp);
		sb.append(",NGenerico="+NGenerico);
		sb.append(",Concentracion="+Concentracion);
		sb.append(",FFarmaceutica="+FFarmaceutica);
		sb.append(",ViaAdmin="+ViaAdmin);
		sb.append(",NUso="+NUso);
		sb.append(",NAtencion="+NAtencion);
		sb.append(",ObsNUso="+ObsNUso);
		sb.append(",UsadoPre="+UsadoPre);
		sb.append(",CodigoUnico="+CodigoUnico);
		sb.append(",EspecialidadMedica="+EspecialidadMedica);
		sb.append(",nuevoNuso="+nuevoNuso);
		sb.append(",nuevaEspecialidad="+nuevaEspecialidad);
		sb.append(",nuevaAdmin="+nuevaAdmin);
		sb.append(",nuevaForma="+nuevaForma);
		sb.append(",linea="+String.valueOf(linea));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tOracleInput_5Process(globalMap);

		row11Struct row11 = new row11Struct();
validacionGenericoStruct validacionGenerico = new validacionGenericoStruct();
row28Struct row28 = new row28Struct();
row69Struct row69 = new row69Struct();
identificadoresValidosStruct identificadoresValidos = new identificadoresValidosStruct();
row12Struct row12 = new row12Struct();
row22Struct row22 = new row22Struct();





	
	/**
	 * [tAggregateRow_6_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_6_AGGOUT", false);
		start_Hash.put("tAggregateRow_6_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGOUT";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"validacionGenerico");
					}
				
		int tos_count_tAggregateRow_6_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_6 = new java.util.HashMap(); 

// ------------
	class AggOperationStruct_tAggregateRow_6 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				String Mensaje;
    				Long Linea;
    				String CODIGO_UNICO;
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.Mensaje == null) ? 0 : this.Mensaje.hashCode());
							
							result = prime * result + ((this.Linea == null) ? 0 : this.Linea.hashCode());
							
							result = prime * result + ((this.CODIGO_UNICO == null) ? 0 : this.CODIGO_UNICO.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_6 other = (AggOperationStruct_tAggregateRow_6) obj;
			
							if (this.Mensaje == null) {
								if (other.Mensaje != null) 
									return false;
							} else if (!this.Mensaje.equals(other.Mensaje)) 
								return false;
						
							if (this.Linea == null) {
								if (other.Linea != null) 
									return false;
							} else if (!this.Linea.equals(other.Linea)) 
								return false;
						
							if (this.CODIGO_UNICO == null) {
								if (other.CODIGO_UNICO != null) 
									return false;
							} else if (!this.CODIGO_UNICO.equals(other.CODIGO_UNICO)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_6 operation_result_tAggregateRow_6 = null;
	AggOperationStruct_tAggregateRow_6 operation_finder_tAggregateRow_6 = new AggOperationStruct_tAggregateRow_6();
	java.util.Map<AggOperationStruct_tAggregateRow_6,AggOperationStruct_tAggregateRow_6> hash_tAggregateRow_6 = new java.util.HashMap<AggOperationStruct_tAggregateRow_6,AggOperationStruct_tAggregateRow_6>();
	

 



/**
 * [tAggregateRow_6_AGGOUT begin ] stop
 */






	
	/**
	 * [tHashOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_2", false);
		start_Hash.put("tHashOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row22");
					}
				
		int tos_count_tHashOutput_2 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row22Struct> tHashFile_tHashOutput_2 = null;
		String hashKey_tHashOutput_2 = "tHashFile_CargaMoleculasAcuerdo_" + pid + "_tHashOutput_2";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_2)){
			    if(mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2) == null){
	      		    mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row22Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }else{
			    	tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }
			}
        int nb_line_tHashOutput_2 = 0;

 



/**
 * [tHashOutput_2 begin ] stop
 */



	
	/**
	 * [tReplicate_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tReplicate_1", false);
		start_Hash.put("tReplicate_1", System.currentTimeMillis());
		
	
	currentComponent="tReplicate_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tReplicate_1 = 0;
		

 



/**
 * [tReplicate_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"identificadoresValidos");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tMap_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_20", false);
		start_Hash.put("tMap_20", System.currentTimeMillis());
		
	
	currentComponent="tMap_20";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tMap_20 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row61Struct> tHash_Lookup_row61 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row61Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row61Struct>) 
					globalMap.get( "tHash_Lookup_row61" ))
					;					
					
	

row61Struct row61HashKey = new row61Struct();
row61Struct row61Default = new row61Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_20__Struct  {
}
Var__tMap_20__Struct Var__tMap_20 = new Var__tMap_20__Struct();
// ###############################

// ###############################
// # Outputs initialization
validacionGenericoStruct validacionGenerico_tmp = new validacionGenericoStruct();
identificadoresValidosStruct identificadoresValidos_tmp = new identificadoresValidosStruct();
// ###############################

        
        



        









 



/**
 * [tMap_20 begin ] stop
 */



	
	/**
	 * [tHashInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_8", false);
		start_Hash.put("tHashInput_8", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_8";
	
	
		int tos_count_tHashInput_8 = 0;
		


int nb_line_tHashInput_8 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_8=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row8Struct> tHashFile_tHashInput_8 = mf_tHashInput_8.getAdvancedMemoryHashFile("tHashFile_CargaMoleculasAcuerdo_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_8==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row8Struct> iterator_tHashInput_8 = tHashFile_tHashInput_8.iterator();
while (iterator_tHashInput_8.hasNext()) {
    row8Struct next_tHashInput_8 = iterator_tHashInput_8.next();

	row11.CodSsmp = next_tHashInput_8.CodSsmp;
	row11.NGenerico = next_tHashInput_8.NGenerico;
	row11.Concentracion = next_tHashInput_8.Concentracion;
	row11.FFarmaceutica = next_tHashInput_8.FFarmaceutica;
	row11.ViaAdmin = next_tHashInput_8.ViaAdmin;
	row11.NUso = next_tHashInput_8.NUso;
	row11.NAtencion = next_tHashInput_8.NAtencion;
	row11.ObsNUso = next_tHashInput_8.ObsNUso;
	row11.UsadoPre = next_tHashInput_8.UsadoPre;
	row11.CodigoUnico = next_tHashInput_8.CodigoUnico;
	row11.EspecialidadMedica = next_tHashInput_8.EspecialidadMedica;
	row11.nuevoNuso = next_tHashInput_8.nuevoNuso;
	row11.nuevaEspecialidad = next_tHashInput_8.nuevaEspecialidad;
	row11.nuevaAdmin = next_tHashInput_8.nuevaAdmin;
	row11.nuevaForma = next_tHashInput_8.nuevaForma;
	row11.linea = next_tHashInput_8.linea;

 



/**
 * [tHashInput_8 begin ] stop
 */
	
	/**
	 * [tHashInput_8 main ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 


	tos_count_tHashInput_8++;

/**
 * [tHashInput_8 main ] stop
 */
	
	/**
	 * [tHashInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 



/**
 * [tHashInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tMap_20 main ] start
	 */

	

	
	
	currentComponent="tMap_20";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row11"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_20 = false;
		
						row61Struct row61 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_20 = false;
		boolean mainRowRejected_tMap_20 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row61" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow61 = false;
       		  	    	
       		  	    	
 							row61Struct row61ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_20) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_20 = false;
								
                        		    		    row61HashKey.CODIGO_UNICO = row11.CodigoUnico ;
                        		    		
                        		    		    row61HashKey.CONCENTRACION = row11.Concentracion ;
                        		    		
                        		    		    row61HashKey.NOMBRE_GENERICO = row11.NGenerico ;
                        		    		

								
		                        	row61HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row61.lookup( row61HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row61.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_20 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row61Struct fromLookup_row61 = null;
							row61 = row61Default;
										 
							
								 
							
							
								if (tHash_Lookup_row61 !=null && tHash_Lookup_row61.hasNext()) { // G 099
								
							
								
								fromLookup_row61 = tHash_Lookup_row61.next();

							
							
								} // G 099
							
							

							if(fromLookup_row61 != null) {
								row61 = fromLookup_row61;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_20__Struct Var = Var__tMap_20;// ###############################
        // ###############################
        // # Output tables

identificadoresValidos = null;
validacionGenerico = null;

if(!rejectedInnerJoin_tMap_20 ) {

// # Output table : 'identificadoresValidos'
identificadoresValidos_tmp.GENERICO_ID = row61.ID ;
identificadoresValidos_tmp.NOMBREGENERICO = row61.NOMBRE_GENERICO ;
identificadoresValidos_tmp.CODIGO_UNICO = row61.CODIGO_UNICO ;
identificadoresValidos_tmp.LINEA = row11.linea;
identificadoresValidos = identificadoresValidos_tmp;
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'validacionGenerico'
// # Filter conditions 
if( rejectedInnerJoin_tMap_20 ) {
validacionGenerico_tmp.Mensaje = "El generico "+row11.NGenerico+ " con concentración " +row11.Concentracion+ " con el codigo único  "+row11.CodigoUnico+" no se encuentra registrado en el sistema" ;
validacionGenerico_tmp.Linea = row11.linea;
validacionGenerico_tmp.CODIGO_UNICO = row11.CodigoUnico ;
validacionGenerico = validacionGenerico_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_20 = false;










 


	tos_count_tMap_20++;

/**
 * [tMap_20 main ] stop
 */
	
	/**
	 * [tMap_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_20";
	
	

 



/**
 * [tMap_20 process_data_begin ] stop
 */
// Start of branch "validacionGenerico"
if(validacionGenerico != null) { 



	
	/**
	 * [tAggregateRow_6_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGOUT";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"validacionGenerico"
						
						);
					}
					
	
operation_finder_tAggregateRow_6.Mensaje = validacionGenerico.Mensaje;
			operation_finder_tAggregateRow_6.Linea = validacionGenerico.Linea;
			operation_finder_tAggregateRow_6.CODIGO_UNICO = validacionGenerico.CODIGO_UNICO;
			

	operation_finder_tAggregateRow_6.hashCodeDirty = true;
	
	operation_result_tAggregateRow_6 = hash_tAggregateRow_6.get(operation_finder_tAggregateRow_6);

	

	if(operation_result_tAggregateRow_6 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_6 = new AggOperationStruct_tAggregateRow_6();

		operation_result_tAggregateRow_6.Mensaje = operation_finder_tAggregateRow_6.Mensaje;
				operation_result_tAggregateRow_6.Linea = operation_finder_tAggregateRow_6.Linea;
				operation_result_tAggregateRow_6.CODIGO_UNICO = operation_finder_tAggregateRow_6.CODIGO_UNICO;
				
		
		

		hash_tAggregateRow_6.put(operation_result_tAggregateRow_6, operation_result_tAggregateRow_6);
	
	} // G_OutMain_AggR_001


	


 


	tos_count_tAggregateRow_6_AGGOUT++;

/**
 * [tAggregateRow_6_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_6_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGOUT";
	
	

 



/**
 * [tAggregateRow_6_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_6_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGOUT";
	
	

 



/**
 * [tAggregateRow_6_AGGOUT process_data_end ] stop
 */

} // End of branch "validacionGenerico"




// Start of branch "identificadoresValidos"
if(identificadoresValidos != null) { 



	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"identificadoresValidos"
						
						);
					}
					

    //Code generate according to input schema and output schema
row12.GENERICO_ID = identificadoresValidos.GENERICO_ID;
row12.NOMBREGENERICO = identificadoresValidos.NOMBREGENERICO;
row12.CODIGO_UNICO = identificadoresValidos.CODIGO_UNICO;
row12.LINEA = identificadoresValidos.LINEA;

    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tReplicate_1 main ] start
	 */

	

	
	
	currentComponent="tReplicate_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row12"
						
						);
					}
					


	row22 = new row22Struct();
						
	row22.GENERICO_ID = row12.GENERICO_ID;								
	row22.NOMBREGENERICO = row12.NOMBREGENERICO;								
	row22.CODIGO_UNICO = row12.CODIGO_UNICO;								
	row22.LINEA = row12.LINEA;			


 


	tos_count_tReplicate_1++;

/**
 * [tReplicate_1 main ] stop
 */
	
	/**
	 * [tReplicate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tReplicate_1";
	
	

 



/**
 * [tReplicate_1 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row22"
						
						);
					}
					



    
		row22Struct oneRow_tHashOutput_2 = new row22Struct();
				
					oneRow_tHashOutput_2.GENERICO_ID = row22.GENERICO_ID;
					oneRow_tHashOutput_2.NOMBREGENERICO = row22.NOMBREGENERICO;
					oneRow_tHashOutput_2.CODIGO_UNICO = row22.CODIGO_UNICO;
					oneRow_tHashOutput_2.LINEA = row22.LINEA;
		
        tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
        nb_line_tHashOutput_2 ++;

 


	tos_count_tHashOutput_2++;

/**
 * [tHashOutput_2 main ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tReplicate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tReplicate_1";
	
	

 



/**
 * [tReplicate_1 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */

} // End of branch "identificadoresValidos"




	
	/**
	 * [tMap_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_20";
	
	

 



/**
 * [tMap_20 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 



/**
 * [tHashInput_8 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_8 end ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	
    

		
			nb_line_tHashInput_8++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_CargaMoleculasAcuerdo_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_8_NB_LINE", nb_line_tHashInput_8);       

 

ok_Hash.put("tHashInput_8", true);
end_Hash.put("tHashInput_8", System.currentTimeMillis());




/**
 * [tHashInput_8 end ] stop
 */

	
	/**
	 * [tMap_20 end ] start
	 */

	

	
	
	currentComponent="tMap_20";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row61 != null) {
						tHash_Lookup_row61.endGet();
					}
					globalMap.remove( "tHash_Lookup_row61" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tMap_20", true);
end_Hash.put("tMap_20", System.currentTimeMillis());




/**
 * [tMap_20 end ] stop
 */

	
	/**
	 * [tAggregateRow_6_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGOUT";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"validacionGenerico");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_6_AGGOUT", true);
end_Hash.put("tAggregateRow_6_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_6_AGGOUT end ] stop
 */



	
	/**
	 * [tOracleOutput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_12", false);
		start_Hash.put("tOracleOutput_12", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_12";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row69");
					}
				
		int tos_count_tOracleOutput_12 = 0;
		






    
    int nb_line_tOracleOutput_12 = 0;
    int nb_line_update_tOracleOutput_12 = 0;
    int nb_line_inserted_tOracleOutput_12 = 0;
    int nb_line_deleted_tOracleOutput_12 = 0;
    int nb_line_rejected_tOracleOutput_12 = 0;

    int tmp_batchUpdateCount_tOracleOutput_12 = 0;

    int deletedCount_tOracleOutput_12=0;
    int updatedCount_tOracleOutput_12=0;
    int insertedCount_tOracleOutput_12=0;
    int rowsToCommitCount_tOracleOutput_12=0;
    int rejectedCount_tOracleOutput_12=0;

    boolean whetherReject_tOracleOutput_12 = false;

    java.sql.Connection conn_tOracleOutput_12 = null;

    //optional table
    String dbschema_tOracleOutput_12 = null;
    String tableName_tOracleOutput_12 = null;
        dbschema_tOracleOutput_12 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_12 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_12=0;

        if(dbschema_tOracleOutput_12 == null || dbschema_tOracleOutput_12.trim().length() == 0) {
            tableName_tOracleOutput_12 = ("ERRORLOG_TEMP");
        } else {
            tableName_tOracleOutput_12 = dbschema_tOracleOutput_12 + "." + ("ERRORLOG_TEMP");
        }
                String insert_tOracleOutput_12 = "INSERT INTO " + tableName_tOracleOutput_12 + " (Mensaje,Linea,CODIGO_UNICO) VALUES (?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_12 = conn_tOracleOutput_12.prepareStatement(insert_tOracleOutput_12);
                        resourceMap.put("pstmt_tOracleOutput_12", pstmt_tOracleOutput_12);





 



/**
 * [tOracleOutput_12 begin ] stop
 */



	
	/**
	 * [tJavaRow_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_20", false);
		start_Hash.put("tJavaRow_20", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_20";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row28");
					}
				
		int tos_count_tJavaRow_20 = 0;
		

int nb_line_tJavaRow_20 = 0;

 



/**
 * [tJavaRow_20 begin ] stop
 */



	
	/**
	 * [tAggregateRow_6_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_6_AGGIN", false);
		start_Hash.put("tAggregateRow_6_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGIN";
	
	
		int tos_count_tAggregateRow_6_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_6> values_tAggregateRow_6 = hash_tAggregateRow_6.values();

globalMap.put("tAggregateRow_6_NB_LINE", values_tAggregateRow_6.size());

for(AggOperationStruct_tAggregateRow_6 aggregated_row_tAggregateRow_6 : values_tAggregateRow_6) { // G_AggR_600



 



/**
 * [tAggregateRow_6_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_6_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGIN";
	
	

            				    row28.Mensaje = aggregated_row_tAggregateRow_6.Mensaje;
            				    
            				    row28.Linea = aggregated_row_tAggregateRow_6.Linea;
            				    
            				    row28.CODIGO_UNICO = aggregated_row_tAggregateRow_6.CODIGO_UNICO;
            				    

 


	tos_count_tAggregateRow_6_AGGIN++;

/**
 * [tAggregateRow_6_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_6_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGIN";
	
	

 



/**
 * [tAggregateRow_6_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_20 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_20";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row28"
						
						);
					}
					

    //Code generate according to input schema and output schema
row69.Mensaje = row28.Mensaje;
row69.Linea = row28.Linea;
row69.CODIGO_UNICO = row28.CODIGO_UNICO;

context.ErrorLog +=1;
    nb_line_tJavaRow_20++;   

 


	tos_count_tJavaRow_20++;

/**
 * [tJavaRow_20 main ] stop
 */
	
	/**
	 * [tJavaRow_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_20";
	
	

 



/**
 * [tJavaRow_20 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_12 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_12";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row69"
						
						);
					}
					



        whetherReject_tOracleOutput_12 = false;
                        if(row69.Mensaje == null) {
pstmt_tOracleOutput_12.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_12.setString(1, row69.Mensaje);
}

                        if(row69.Linea == null) {
pstmt_tOracleOutput_12.setNull(2, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_12.setLong(2, row69.Linea);
}

                        if(row69.CODIGO_UNICO == null) {
pstmt_tOracleOutput_12.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_12.setString(3, row69.CODIGO_UNICO);
}

                try {
                    nb_line_tOracleOutput_12++;
                    int processedCount_tOracleOutput_12 = pstmt_tOracleOutput_12.executeUpdate();
                    insertedCount_tOracleOutput_12 += processedCount_tOracleOutput_12;
                    rowsToCommitCount_tOracleOutput_12 += processedCount_tOracleOutput_12;
                } catch(java.lang.Exception e_tOracleOutput_12) {
globalMap.put("tOracleOutput_12_ERROR_MESSAGE",e_tOracleOutput_12.getMessage());
                    whetherReject_tOracleOutput_12 = true;
                            System.err.print(e_tOracleOutput_12.getMessage());
                }

 


	tos_count_tOracleOutput_12++;

/**
 * [tOracleOutput_12 main ] stop
 */
	
	/**
	 * [tOracleOutput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_12";
	
	

 



/**
 * [tOracleOutput_12 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_12";
	
	

 



/**
 * [tOracleOutput_12 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_20";
	
	

 



/**
 * [tJavaRow_20 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_6_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGIN";
	
	

 



/**
 * [tAggregateRow_6_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_6_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGIN";
	
	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_6_AGGIN", true);
end_Hash.put("tAggregateRow_6_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_6_AGGIN end ] stop
 */

	
	/**
	 * [tJavaRow_20 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_20";
	
	

globalMap.put("tJavaRow_20_NB_LINE",nb_line_tJavaRow_20);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row28");
			  	}
			  	
 

ok_Hash.put("tJavaRow_20", true);
end_Hash.put("tJavaRow_20", System.currentTimeMillis());




/**
 * [tJavaRow_20 end ] stop
 */

	
	/**
	 * [tOracleOutput_12 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_12";
	
	
	



	
        if(pstmt_tOracleOutput_12 != null) {
			
				pstmt_tOracleOutput_12.close();
				resourceMap.remove("pstmt_tOracleOutput_12");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_12", true);

	
	nb_line_deleted_tOracleOutput_12=nb_line_deleted_tOracleOutput_12+ deletedCount_tOracleOutput_12;
	nb_line_update_tOracleOutput_12=nb_line_update_tOracleOutput_12 + updatedCount_tOracleOutput_12;
	nb_line_inserted_tOracleOutput_12=nb_line_inserted_tOracleOutput_12 + insertedCount_tOracleOutput_12;
	nb_line_rejected_tOracleOutput_12=nb_line_rejected_tOracleOutput_12 + rejectedCount_tOracleOutput_12;
	
        globalMap.put("tOracleOutput_12_NB_LINE",nb_line_tOracleOutput_12);
        globalMap.put("tOracleOutput_12_NB_LINE_UPDATED",nb_line_update_tOracleOutput_12);
        globalMap.put("tOracleOutput_12_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_12);
        globalMap.put("tOracleOutput_12_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_12);
        globalMap.put("tOracleOutput_12_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_12);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row69");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_12", true);
end_Hash.put("tOracleOutput_12", System.currentTimeMillis());




/**
 * [tOracleOutput_12 end ] stop
 */













	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"identificadoresValidos");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */

	
	/**
	 * [tReplicate_1 end ] start
	 */

	

	
	
	currentComponent="tReplicate_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tReplicate_1", true);
end_Hash.put("tReplicate_1", System.currentTimeMillis());




/**
 * [tReplicate_1 end ] stop
 */

	
	/**
	 * [tHashOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row22");
			  	}
			  	
 

ok_Hash.put("tHashOutput_2", true);
end_Hash.put("tHashOutput_2", System.currentTimeMillis());




/**
 * [tHashOutput_2 end ] stop
 */












				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_8:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tHashInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_6_AGGIN"
							globalMap.remove("tAggregateRow_6");
						
					     			//free memory for "tMap_20"
					     			globalMap.remove("tHash_Lookup_row61"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_8 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 



/**
 * [tHashInput_8 finally ] stop
 */

	
	/**
	 * [tMap_20 finally ] start
	 */

	

	
	
	currentComponent="tMap_20";
	
	

 



/**
 * [tMap_20 finally ] stop
 */

	
	/**
	 * [tAggregateRow_6_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGOUT";
	
	

 



/**
 * [tAggregateRow_6_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_6_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGIN";
	
	

 



/**
 * [tAggregateRow_6_AGGIN finally ] stop
 */

	
	/**
	 * [tJavaRow_20 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_20";
	
	

 



/**
 * [tJavaRow_20 finally ] stop
 */

	
	/**
	 * [tOracleOutput_12 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_12";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_12") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_12 = null;
                if ((pstmtToClose_tOracleOutput_12 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_12")) != null) {
                    pstmtToClose_tOracleOutput_12.close();
                }
    }
 



/**
 * [tOracleOutput_12 finally ] stop
 */













	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 finally ] stop
 */

	
	/**
	 * [tReplicate_1 finally ] start
	 */

	

	
	
	currentComponent="tReplicate_1";
	
	

 



/**
 * [tReplicate_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class row24Struct implements routines.system.IPersistableRow<row24Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public BigDecimal TFORMAS_ID;

				public BigDecimal getTFORMAS_ID () {
					return this.TFORMAS_ID;
				}

				public Boolean TFORMAS_IDIsNullable(){
				    return true;
				}
				public Boolean TFORMAS_IDIsKey(){
				    return false;
				}
				public Integer TFORMAS_IDLength(){
				    return null;
				}
				public Integer TFORMAS_IDPrecision(){
				    return null;
				}
				public String TFORMAS_IDDefault(){
				
					return "";
				
				}
				public String TFORMAS_IDComment(){
				
				    return "";
				
				}
				public String TFORMAS_IDPattern(){
				
					return "";
				
				}
				public String TFORMAS_IDOriginalDbColumnName(){
				
					return "TFORMAS_ID";
				
				}

				
			    public String NUEVAFORMA;

				public String getNUEVAFORMA () {
					return this.NUEVAFORMA;
				}

				public Boolean NUEVAFORMAIsNullable(){
				    return true;
				}
				public Boolean NUEVAFORMAIsKey(){
				    return false;
				}
				public Integer NUEVAFORMALength(){
				    return 150;
				}
				public Integer NUEVAFORMAPrecision(){
				    return null;
				}
				public String NUEVAFORMADefault(){
				
					return null;
				
				}
				public String NUEVAFORMAComment(){
				
				    return "";
				
				}
				public String NUEVAFORMAPattern(){
				
					return "";
				
				}
				public String NUEVAFORMAOriginalDbColumnName(){
				
					return "NUEVAFORMA";
				
				}

				
			    public BigDecimal GENERICO_ID;

				public BigDecimal getGENERICO_ID () {
					return this.GENERICO_ID;
				}

				public Boolean GENERICO_IDIsNullable(){
				    return true;
				}
				public Boolean GENERICO_IDIsKey(){
				    return false;
				}
				public Integer GENERICO_IDLength(){
				    return null;
				}
				public Integer GENERICO_IDPrecision(){
				    return null;
				}
				public String GENERICO_IDDefault(){
				
					return "";
				
				}
				public String GENERICO_IDComment(){
				
				    return "";
				
				}
				public String GENERICO_IDPattern(){
				
					return "";
				
				}
				public String GENERICO_IDOriginalDbColumnName(){
				
					return "GENERICO_ID";
				
				}

				
			    public String NOMBREGENERICO;

				public String getNOMBREGENERICO () {
					return this.NOMBREGENERICO;
				}

				public Boolean NOMBREGENERICOIsNullable(){
				    return true;
				}
				public Boolean NOMBREGENERICOIsKey(){
				    return false;
				}
				public Integer NOMBREGENERICOLength(){
				    return 150;
				}
				public Integer NOMBREGENERICOPrecision(){
				    return null;
				}
				public String NOMBREGENERICODefault(){
				
					return null;
				
				}
				public String NOMBREGENERICOComment(){
				
				    return "";
				
				}
				public String NOMBREGENERICOPattern(){
				
					return "";
				
				}
				public String NOMBREGENERICOOriginalDbColumnName(){
				
					return "NOMBREGENERICO";
				
				}

				
			    public Long LINEA;

				public Long getLINEA () {
					return this.LINEA;
				}

				public Boolean LINEAIsNullable(){
				    return true;
				}
				public Boolean LINEAIsKey(){
				    return false;
				}
				public Integer LINEALength(){
				    return null;
				}
				public Integer LINEAPrecision(){
				    return null;
				}
				public String LINEADefault(){
				
					return null;
				
				}
				public String LINEAComment(){
				
				    return "";
				
				}
				public String LINEAPattern(){
				
					return "";
				
				}
				public String LINEAOriginalDbColumnName(){
				
					return "LINEA";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return 150;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.TFORMAS_ID = (BigDecimal) dis.readObject();
					
					this.NUEVAFORMA = readString(dis);
					
						this.GENERICO_ID = (BigDecimal) dis.readObject();
					
					this.NOMBREGENERICO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LINEA = null;
           				} else {
           			    	this.LINEA = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.TFORMAS_ID = (BigDecimal) dis.readObject();
					
					this.NUEVAFORMA = readString(dis);
					
						this.GENERICO_ID = (BigDecimal) dis.readObject();
					
					this.NOMBREGENERICO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LINEA = null;
           				} else {
           			    	this.LINEA = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.TFORMAS_ID);
					
					// String
				
						writeString(this.NUEVAFORMA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GENERICO_ID);
					
					// String
				
						writeString(this.NOMBREGENERICO,dos);
					
					// Long
				
						if(this.LINEA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LINEA);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TFORMAS_ID);
					
					// String
				
						writeString(this.NUEVAFORMA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GENERICO_ID);
					
					// String
				
						writeString(this.NOMBREGENERICO,dos);
					
					// Long
				
						if(this.LINEA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LINEA);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TFORMAS_ID="+String.valueOf(TFORMAS_ID));
		sb.append(",NUEVAFORMA="+NUEVAFORMA);
		sb.append(",GENERICO_ID="+String.valueOf(GENERICO_ID));
		sb.append(",NOMBREGENERICO="+NOMBREGENERICO);
		sb.append(",LINEA="+String.valueOf(LINEA));
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row24Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public BigDecimal TFORMAS_ID;

				public BigDecimal getTFORMAS_ID () {
					return this.TFORMAS_ID;
				}

				public Boolean TFORMAS_IDIsNullable(){
				    return true;
				}
				public Boolean TFORMAS_IDIsKey(){
				    return false;
				}
				public Integer TFORMAS_IDLength(){
				    return null;
				}
				public Integer TFORMAS_IDPrecision(){
				    return null;
				}
				public String TFORMAS_IDDefault(){
				
					return "";
				
				}
				public String TFORMAS_IDComment(){
				
				    return "";
				
				}
				public String TFORMAS_IDPattern(){
				
					return "";
				
				}
				public String TFORMAS_IDOriginalDbColumnName(){
				
					return "TFORMAS_ID";
				
				}

				
			    public String NUEVAFORMA;

				public String getNUEVAFORMA () {
					return this.NUEVAFORMA;
				}

				public Boolean NUEVAFORMAIsNullable(){
				    return true;
				}
				public Boolean NUEVAFORMAIsKey(){
				    return false;
				}
				public Integer NUEVAFORMALength(){
				    return 150;
				}
				public Integer NUEVAFORMAPrecision(){
				    return null;
				}
				public String NUEVAFORMADefault(){
				
					return null;
				
				}
				public String NUEVAFORMAComment(){
				
				    return "";
				
				}
				public String NUEVAFORMAPattern(){
				
					return "";
				
				}
				public String NUEVAFORMAOriginalDbColumnName(){
				
					return "NUEVAFORMA";
				
				}

				
			    public BigDecimal GENERICO_ID;

				public BigDecimal getGENERICO_ID () {
					return this.GENERICO_ID;
				}

				public Boolean GENERICO_IDIsNullable(){
				    return true;
				}
				public Boolean GENERICO_IDIsKey(){
				    return false;
				}
				public Integer GENERICO_IDLength(){
				    return null;
				}
				public Integer GENERICO_IDPrecision(){
				    return null;
				}
				public String GENERICO_IDDefault(){
				
					return "";
				
				}
				public String GENERICO_IDComment(){
				
				    return "";
				
				}
				public String GENERICO_IDPattern(){
				
					return "";
				
				}
				public String GENERICO_IDOriginalDbColumnName(){
				
					return "GENERICO_ID";
				
				}

				
			    public String NOMBREGENERICO;

				public String getNOMBREGENERICO () {
					return this.NOMBREGENERICO;
				}

				public Boolean NOMBREGENERICOIsNullable(){
				    return true;
				}
				public Boolean NOMBREGENERICOIsKey(){
				    return false;
				}
				public Integer NOMBREGENERICOLength(){
				    return 150;
				}
				public Integer NOMBREGENERICOPrecision(){
				    return null;
				}
				public String NOMBREGENERICODefault(){
				
					return null;
				
				}
				public String NOMBREGENERICOComment(){
				
				    return "";
				
				}
				public String NOMBREGENERICOPattern(){
				
					return "";
				
				}
				public String NOMBREGENERICOOriginalDbColumnName(){
				
					return "NOMBREGENERICO";
				
				}

				
			    public Long LINEA;

				public Long getLINEA () {
					return this.LINEA;
				}

				public Boolean LINEAIsNullable(){
				    return true;
				}
				public Boolean LINEAIsKey(){
				    return false;
				}
				public Integer LINEALength(){
				    return null;
				}
				public Integer LINEAPrecision(){
				    return null;
				}
				public String LINEADefault(){
				
					return null;
				
				}
				public String LINEAComment(){
				
				    return "";
				
				}
				public String LINEAPattern(){
				
					return "";
				
				}
				public String LINEAOriginalDbColumnName(){
				
					return "LINEA";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return 150;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.TFORMAS_ID = (BigDecimal) dis.readObject();
					
					this.NUEVAFORMA = readString(dis);
					
						this.GENERICO_ID = (BigDecimal) dis.readObject();
					
					this.NOMBREGENERICO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LINEA = null;
           				} else {
           			    	this.LINEA = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.TFORMAS_ID = (BigDecimal) dis.readObject();
					
					this.NUEVAFORMA = readString(dis);
					
						this.GENERICO_ID = (BigDecimal) dis.readObject();
					
					this.NOMBREGENERICO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LINEA = null;
           				} else {
           			    	this.LINEA = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.TFORMAS_ID);
					
					// String
				
						writeString(this.NUEVAFORMA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GENERICO_ID);
					
					// String
				
						writeString(this.NOMBREGENERICO,dos);
					
					// Long
				
						if(this.LINEA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LINEA);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TFORMAS_ID);
					
					// String
				
						writeString(this.NUEVAFORMA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GENERICO_ID);
					
					// String
				
						writeString(this.NOMBREGENERICO,dos);
					
					// Long
				
						if(this.LINEA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LINEA);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TFORMAS_ID="+String.valueOf(TFORMAS_ID));
		sb.append(",NUEVAFORMA="+NUEVAFORMA);
		sb.append(",GENERICO_ID="+String.valueOf(GENERICO_ID));
		sb.append(",NOMBREGENERICO="+NOMBREGENERICO);
		sb.append(",LINEA="+String.valueOf(LINEA));
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class parametrizacionStruct implements routines.system.IPersistableRow<parametrizacionStruct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public BigDecimal TFORMAS_ID;

				public BigDecimal getTFORMAS_ID () {
					return this.TFORMAS_ID;
				}

				public Boolean TFORMAS_IDIsNullable(){
				    return true;
				}
				public Boolean TFORMAS_IDIsKey(){
				    return false;
				}
				public Integer TFORMAS_IDLength(){
				    return null;
				}
				public Integer TFORMAS_IDPrecision(){
				    return null;
				}
				public String TFORMAS_IDDefault(){
				
					return "";
				
				}
				public String TFORMAS_IDComment(){
				
				    return "";
				
				}
				public String TFORMAS_IDPattern(){
				
					return "";
				
				}
				public String TFORMAS_IDOriginalDbColumnName(){
				
					return "TFORMAS_ID";
				
				}

				
			    public String NUEVAFORMA;

				public String getNUEVAFORMA () {
					return this.NUEVAFORMA;
				}

				public Boolean NUEVAFORMAIsNullable(){
				    return true;
				}
				public Boolean NUEVAFORMAIsKey(){
				    return false;
				}
				public Integer NUEVAFORMALength(){
				    return 150;
				}
				public Integer NUEVAFORMAPrecision(){
				    return null;
				}
				public String NUEVAFORMADefault(){
				
					return null;
				
				}
				public String NUEVAFORMAComment(){
				
				    return "";
				
				}
				public String NUEVAFORMAPattern(){
				
					return "";
				
				}
				public String NUEVAFORMAOriginalDbColumnName(){
				
					return "NUEVAFORMA";
				
				}

				
			    public BigDecimal GENERICO_ID;

				public BigDecimal getGENERICO_ID () {
					return this.GENERICO_ID;
				}

				public Boolean GENERICO_IDIsNullable(){
				    return true;
				}
				public Boolean GENERICO_IDIsKey(){
				    return false;
				}
				public Integer GENERICO_IDLength(){
				    return null;
				}
				public Integer GENERICO_IDPrecision(){
				    return null;
				}
				public String GENERICO_IDDefault(){
				
					return "";
				
				}
				public String GENERICO_IDComment(){
				
				    return "";
				
				}
				public String GENERICO_IDPattern(){
				
					return "";
				
				}
				public String GENERICO_IDOriginalDbColumnName(){
				
					return "GENERICO_ID";
				
				}

				
			    public String NOMBREGENERICO;

				public String getNOMBREGENERICO () {
					return this.NOMBREGENERICO;
				}

				public Boolean NOMBREGENERICOIsNullable(){
				    return true;
				}
				public Boolean NOMBREGENERICOIsKey(){
				    return false;
				}
				public Integer NOMBREGENERICOLength(){
				    return 150;
				}
				public Integer NOMBREGENERICOPrecision(){
				    return null;
				}
				public String NOMBREGENERICODefault(){
				
					return null;
				
				}
				public String NOMBREGENERICOComment(){
				
				    return "";
				
				}
				public String NOMBREGENERICOPattern(){
				
					return "";
				
				}
				public String NOMBREGENERICOOriginalDbColumnName(){
				
					return "NOMBREGENERICO";
				
				}

				
			    public Long LINEA;

				public Long getLINEA () {
					return this.LINEA;
				}

				public Boolean LINEAIsNullable(){
				    return true;
				}
				public Boolean LINEAIsKey(){
				    return false;
				}
				public Integer LINEALength(){
				    return null;
				}
				public Integer LINEAPrecision(){
				    return null;
				}
				public String LINEADefault(){
				
					return null;
				
				}
				public String LINEAComment(){
				
				    return "";
				
				}
				public String LINEAPattern(){
				
					return "";
				
				}
				public String LINEAOriginalDbColumnName(){
				
					return "LINEA";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return 150;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.TFORMAS_ID = (BigDecimal) dis.readObject();
					
					this.NUEVAFORMA = readString(dis);
					
						this.GENERICO_ID = (BigDecimal) dis.readObject();
					
					this.NOMBREGENERICO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LINEA = null;
           				} else {
           			    	this.LINEA = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.TFORMAS_ID = (BigDecimal) dis.readObject();
					
					this.NUEVAFORMA = readString(dis);
					
						this.GENERICO_ID = (BigDecimal) dis.readObject();
					
					this.NOMBREGENERICO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LINEA = null;
           				} else {
           			    	this.LINEA = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.TFORMAS_ID);
					
					// String
				
						writeString(this.NUEVAFORMA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GENERICO_ID);
					
					// String
				
						writeString(this.NOMBREGENERICO,dos);
					
					// Long
				
						if(this.LINEA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LINEA);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TFORMAS_ID);
					
					// String
				
						writeString(this.NUEVAFORMA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GENERICO_ID);
					
					// String
				
						writeString(this.NOMBREGENERICO,dos);
					
					// Long
				
						if(this.LINEA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LINEA);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TFORMAS_ID="+String.valueOf(TFORMAS_ID));
		sb.append(",NUEVAFORMA="+NUEVAFORMA);
		sb.append(",GENERICO_ID="+String.valueOf(GENERICO_ID));
		sb.append(",NOMBREGENERICO="+NOMBREGENERICO);
		sb.append(",LINEA="+String.valueOf(LINEA));
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(parametrizacionStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public BigDecimal TFORMAS_ID;

				public BigDecimal getTFORMAS_ID () {
					return this.TFORMAS_ID;
				}

				public Boolean TFORMAS_IDIsNullable(){
				    return true;
				}
				public Boolean TFORMAS_IDIsKey(){
				    return false;
				}
				public Integer TFORMAS_IDLength(){
				    return null;
				}
				public Integer TFORMAS_IDPrecision(){
				    return null;
				}
				public String TFORMAS_IDDefault(){
				
					return "";
				
				}
				public String TFORMAS_IDComment(){
				
				    return "";
				
				}
				public String TFORMAS_IDPattern(){
				
					return "";
				
				}
				public String TFORMAS_IDOriginalDbColumnName(){
				
					return "TFORMAS_ID";
				
				}

				
			    public String NUEVAFORMA;

				public String getNUEVAFORMA () {
					return this.NUEVAFORMA;
				}

				public Boolean NUEVAFORMAIsNullable(){
				    return true;
				}
				public Boolean NUEVAFORMAIsKey(){
				    return false;
				}
				public Integer NUEVAFORMALength(){
				    return 150;
				}
				public Integer NUEVAFORMAPrecision(){
				    return null;
				}
				public String NUEVAFORMADefault(){
				
					return null;
				
				}
				public String NUEVAFORMAComment(){
				
				    return "";
				
				}
				public String NUEVAFORMAPattern(){
				
					return "";
				
				}
				public String NUEVAFORMAOriginalDbColumnName(){
				
					return "NUEVAFORMA";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return 150;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				
			    public Long LINEA;

				public Long getLINEA () {
					return this.LINEA;
				}

				public Boolean LINEAIsNullable(){
				    return true;
				}
				public Boolean LINEAIsKey(){
				    return false;
				}
				public Integer LINEALength(){
				    return null;
				}
				public Integer LINEAPrecision(){
				    return null;
				}
				public String LINEADefault(){
				
					return null;
				
				}
				public String LINEAComment(){
				
				    return "";
				
				}
				public String LINEAPattern(){
				
					return "";
				
				}
				public String LINEAOriginalDbColumnName(){
				
					return "LINEA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.TFORMAS_ID = (BigDecimal) dis.readObject();
					
					this.NUEVAFORMA = readString(dis);
					
					this.CODIGO_UNICO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LINEA = null;
           				} else {
           			    	this.LINEA = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.TFORMAS_ID = (BigDecimal) dis.readObject();
					
					this.NUEVAFORMA = readString(dis);
					
					this.CODIGO_UNICO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LINEA = null;
           				} else {
           			    	this.LINEA = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.TFORMAS_ID);
					
					// String
				
						writeString(this.NUEVAFORMA,dos);
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
					// Long
				
						if(this.LINEA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LINEA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TFORMAS_ID);
					
					// String
				
						writeString(this.NUEVAFORMA,dos);
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
					// Long
				
						if(this.LINEA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LINEA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TFORMAS_ID="+String.valueOf(TFORMAS_ID));
		sb.append(",NUEVAFORMA="+NUEVAFORMA);
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
		sb.append(",LINEA="+String.valueOf(LINEA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_1Struct implements routines.system.IPersistableRow<after_tHashInput_1Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public BigDecimal TFORMAS_ID;

				public BigDecimal getTFORMAS_ID () {
					return this.TFORMAS_ID;
				}

				public Boolean TFORMAS_IDIsNullable(){
				    return true;
				}
				public Boolean TFORMAS_IDIsKey(){
				    return false;
				}
				public Integer TFORMAS_IDLength(){
				    return null;
				}
				public Integer TFORMAS_IDPrecision(){
				    return null;
				}
				public String TFORMAS_IDDefault(){
				
					return "";
				
				}
				public String TFORMAS_IDComment(){
				
				    return "";
				
				}
				public String TFORMAS_IDPattern(){
				
					return "";
				
				}
				public String TFORMAS_IDOriginalDbColumnName(){
				
					return "TFORMAS_ID";
				
				}

				
			    public String NUEVAFORMA;

				public String getNUEVAFORMA () {
					return this.NUEVAFORMA;
				}

				public Boolean NUEVAFORMAIsNullable(){
				    return true;
				}
				public Boolean NUEVAFORMAIsKey(){
				    return false;
				}
				public Integer NUEVAFORMALength(){
				    return 150;
				}
				public Integer NUEVAFORMAPrecision(){
				    return null;
				}
				public String NUEVAFORMADefault(){
				
					return null;
				
				}
				public String NUEVAFORMAComment(){
				
				    return "";
				
				}
				public String NUEVAFORMAPattern(){
				
					return "";
				
				}
				public String NUEVAFORMAOriginalDbColumnName(){
				
					return "NUEVAFORMA";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return 150;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				
			    public Long LINEA;

				public Long getLINEA () {
					return this.LINEA;
				}

				public Boolean LINEAIsNullable(){
				    return true;
				}
				public Boolean LINEAIsKey(){
				    return false;
				}
				public Integer LINEALength(){
				    return null;
				}
				public Integer LINEAPrecision(){
				    return null;
				}
				public String LINEADefault(){
				
					return null;
				
				}
				public String LINEAComment(){
				
				    return "";
				
				}
				public String LINEAPattern(){
				
					return "";
				
				}
				public String LINEAOriginalDbColumnName(){
				
					return "LINEA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.TFORMAS_ID = (BigDecimal) dis.readObject();
					
					this.NUEVAFORMA = readString(dis);
					
					this.CODIGO_UNICO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LINEA = null;
           				} else {
           			    	this.LINEA = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.TFORMAS_ID = (BigDecimal) dis.readObject();
					
					this.NUEVAFORMA = readString(dis);
					
					this.CODIGO_UNICO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LINEA = null;
           				} else {
           			    	this.LINEA = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.TFORMAS_ID);
					
					// String
				
						writeString(this.NUEVAFORMA,dos);
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
					// Long
				
						if(this.LINEA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LINEA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TFORMAS_ID);
					
					// String
				
						writeString(this.NUEVAFORMA,dos);
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
					// Long
				
						if(this.LINEA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LINEA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TFORMAS_ID="+String.valueOf(TFORMAS_ID));
		sb.append(",NUEVAFORMA="+NUEVAFORMA);
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
		sb.append(",LINEA="+String.valueOf(LINEA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_10Process(globalMap);

		row17Struct row17 = new row17Struct();
parametrizacionStruct parametrizacion = new parametrizacionStruct();
row18Struct row18 = new row18Struct();
row24Struct row24 = new row24Struct();







	
	/**
	 * [tHashOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_4", false);
		start_Hash.put("tHashOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row24");
					}
				
		int tos_count_tHashOutput_4 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row24Struct> tHashFile_tHashOutput_4 = null;
		String hashKey_tHashOutput_4 = "tHashFile_CargaMoleculasAcuerdo_" + pid + "_tHashOutput_4";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_4)){
			    if(mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4) == null){
	      		    mf_tHashOutput_4.getResourceMap().put(hashKey_tHashOutput_4, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row24Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }else{
			    	tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }
			}
        int nb_line_tHashOutput_4 = 0;

 



/**
 * [tHashOutput_4 begin ] stop
 */



	
	/**
	 * [tReplicate_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tReplicate_3", false);
		start_Hash.put("tReplicate_3", System.currentTimeMillis());
		
	
	currentComponent="tReplicate_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row18");
					}
				
		int tos_count_tReplicate_3 = 0;
		

 



/**
 * [tReplicate_3 begin ] stop
 */



	
	/**
	 * [tJavaRow_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_6", false);
		start_Hash.put("tJavaRow_6", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"parametrizacion");
					}
				
		int tos_count_tJavaRow_6 = 0;
		

int nb_line_tJavaRow_6 = 0;

 



/**
 * [tJavaRow_6 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row17");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct> tHash_Lookup_row20 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct>) 
					globalMap.get( "tHash_Lookup_row20" ))
					;					
					
	

row20Struct row20HashKey = new row20Struct();
row20Struct row20Default = new row20Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
parametrizacionStruct parametrizacion_tmp = new parametrizacionStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tHashInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_1", false);
		start_Hash.put("tHashInput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_1";
	
	
		int tos_count_tHashInput_1 = 0;
		


int nb_line_tHashInput_1 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row16Struct> tHashFile_tHashInput_1 = mf_tHashInput_1.getAdvancedMemoryHashFile("tHashFile_CargaMoleculasAcuerdo_" + pid +"_tHashOutput_3");
if(tHashFile_tHashInput_1==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row16Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
while (iterator_tHashInput_1.hasNext()) {
    row16Struct next_tHashInput_1 = iterator_tHashInput_1.next();

	row17.TFORMAS_ID = next_tHashInput_1.TFORMAS_ID;
	row17.NUEVAFORMA = next_tHashInput_1.NUEVAFORMA;
	row17.CODIGO_UNICO = next_tHashInput_1.CODIGO_UNICO;
	row17.LINEA = next_tHashInput_1.LINEA;

 



/**
 * [tHashInput_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 main ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 


	tos_count_tHashInput_1++;

/**
 * [tHashInput_1 main ] stop
 */
	
	/**
	 * [tHashInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row17"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
						row20Struct row20 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_4 = false;
		boolean mainRowRejected_tMap_4 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row20" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow20 = false;
       		  	    	
       		  	    	
 							row20Struct row20ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    row20HashKey.CODIGO_UNICO = row17.CODIGO_UNICO ;
                        		    		
                        		    		    row20HashKey.LINEA = row17.LINEA ;
                        		    		

								
		                        	row20HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row20.lookup( row20HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row20.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_4 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row20Struct fromLookup_row20 = null;
							row20 = row20Default;
										 
							
								 
							
							
								if (tHash_Lookup_row20 !=null && tHash_Lookup_row20.hasNext()) { // G 099
								
							
								
								fromLookup_row20 = tHash_Lookup_row20.next();

							
							
								} // G 099
							
							

							if(fromLookup_row20 != null) {
								row20 = fromLookup_row20;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

parametrizacion = null;

if(!rejectedInnerJoin_tMap_4 ) {

// # Output table : 'parametrizacion'
parametrizacion_tmp.TFORMAS_ID = row17.TFORMAS_ID ;
parametrizacion_tmp.NUEVAFORMA = row17.NUEVAFORMA ;
parametrizacion_tmp.GENERICO_ID = row20.GENERICO_ID ;
parametrizacion_tmp.NOMBREGENERICO = row20.NOMBREGENERICO ;
parametrizacion_tmp.LINEA = row17.LINEA ;
parametrizacion_tmp.CODIGO_UNICO = row17.CODIGO_UNICO ;
parametrizacion = parametrizacion_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "parametrizacion"
if(parametrizacion != null) { 



	
	/**
	 * [tJavaRow_6 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"parametrizacion"
						
						);
					}
					

    //Code generate according to input schema and output schema
row18.TFORMAS_ID = parametrizacion.TFORMAS_ID;
row18.NUEVAFORMA = parametrizacion.NUEVAFORMA;
row18.GENERICO_ID = parametrizacion.GENERICO_ID;
row18.NOMBREGENERICO = parametrizacion.NOMBREGENERICO;
row18.LINEA = parametrizacion.LINEA;
row18.CODIGO_UNICO = parametrizacion.CODIGO_UNICO;

    nb_line_tJavaRow_6++;   

 


	tos_count_tJavaRow_6++;

/**
 * [tJavaRow_6 main ] stop
 */
	
	/**
	 * [tJavaRow_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

 



/**
 * [tJavaRow_6 process_data_begin ] stop
 */

	
	/**
	 * [tReplicate_3 main ] start
	 */

	

	
	
	currentComponent="tReplicate_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row18"
						
						);
					}
					


	row24 = new row24Struct();
						
	row24.TFORMAS_ID = row18.TFORMAS_ID;								
	row24.NUEVAFORMA = row18.NUEVAFORMA;								
	row24.GENERICO_ID = row18.GENERICO_ID;								
	row24.NOMBREGENERICO = row18.NOMBREGENERICO;								
	row24.LINEA = row18.LINEA;								
	row24.CODIGO_UNICO = row18.CODIGO_UNICO;			


 


	tos_count_tReplicate_3++;

/**
 * [tReplicate_3 main ] stop
 */
	
	/**
	 * [tReplicate_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tReplicate_3";
	
	

 



/**
 * [tReplicate_3 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_4 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row24"
						
						);
					}
					



    
		row24Struct oneRow_tHashOutput_4 = new row24Struct();
				
					oneRow_tHashOutput_4.TFORMAS_ID = row24.TFORMAS_ID;
					oneRow_tHashOutput_4.NUEVAFORMA = row24.NUEVAFORMA;
					oneRow_tHashOutput_4.GENERICO_ID = row24.GENERICO_ID;
					oneRow_tHashOutput_4.NOMBREGENERICO = row24.NOMBREGENERICO;
					oneRow_tHashOutput_4.LINEA = row24.LINEA;
					oneRow_tHashOutput_4.CODIGO_UNICO = row24.CODIGO_UNICO;
		
        tHashFile_tHashOutput_4.put(oneRow_tHashOutput_4);
        nb_line_tHashOutput_4 ++;

 


	tos_count_tHashOutput_4++;

/**
 * [tHashOutput_4 main ] stop
 */
	
	/**
	 * [tHashOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 process_data_end ] stop
 */



	
	/**
	 * [tReplicate_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tReplicate_3";
	
	

 



/**
 * [tReplicate_3 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

 



/**
 * [tJavaRow_6 process_data_end ] stop
 */

} // End of branch "parametrizacion"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_1 end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	
    

		
			nb_line_tHashInput_1++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_CargaMoleculasAcuerdo_" + pid +"_tHashOutput_3");
	


	globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);       

 

ok_Hash.put("tHashInput_1", true);
end_Hash.put("tHashInput_1", System.currentTimeMillis());




/**
 * [tHashInput_1 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row20 != null) {
						tHash_Lookup_row20.endGet();
					}
					globalMap.remove( "tHash_Lookup_row20" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row17");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tJavaRow_6 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

globalMap.put("tJavaRow_6_NB_LINE",nb_line_tJavaRow_6);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"parametrizacion");
			  	}
			  	
 

ok_Hash.put("tJavaRow_6", true);
end_Hash.put("tJavaRow_6", System.currentTimeMillis());




/**
 * [tJavaRow_6 end ] stop
 */

	
	/**
	 * [tReplicate_3 end ] start
	 */

	

	
	
	currentComponent="tReplicate_3";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row18");
			  	}
			  	
 

ok_Hash.put("tReplicate_3", true);
end_Hash.put("tReplicate_3", System.currentTimeMillis());




/**
 * [tReplicate_3 end ] stop
 */

	
	/**
	 * [tHashOutput_4 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	
globalMap.put("tHashOutput_4_NB_LINE", nb_line_tHashOutput_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row24");
			  	}
			  	
 

ok_Hash.put("tHashOutput_4", true);
end_Hash.put("tHashOutput_4", System.currentTimeMillis());




/**
 * [tHashOutput_4 end ] stop
 */












				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk21", 0, "ok");
								} 
							
							tOracleInput_8Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row20"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tJavaRow_6 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

 



/**
 * [tJavaRow_6 finally ] stop
 */

	
	/**
	 * [tReplicate_3 finally ] start
	 */

	

	
	
	currentComponent="tReplicate_3";
	
	

 



/**
 * [tReplicate_3 finally ] stop
 */

	
	/**
	 * [tHashOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal TFORMASFARMACEUTICAS_ID;

				public BigDecimal getTFORMASFARMACEUTICAS_ID () {
					return this.TFORMASFARMACEUTICAS_ID;
				}

				public Boolean TFORMASFARMACEUTICAS_IDIsNullable(){
				    return true;
				}
				public Boolean TFORMASFARMACEUTICAS_IDIsKey(){
				    return false;
				}
				public Integer TFORMASFARMACEUTICAS_IDLength(){
				    return null;
				}
				public Integer TFORMASFARMACEUTICAS_IDPrecision(){
				    return null;
				}
				public String TFORMASFARMACEUTICAS_IDDefault(){
				
					return null;
				
				}
				public String TFORMASFARMACEUTICAS_IDComment(){
				
				    return "";
				
				}
				public String TFORMASFARMACEUTICAS_IDPattern(){
				
					return "";
				
				}
				public String TFORMASFARMACEUTICAS_IDOriginalDbColumnName(){
				
					return "TFORMASFARMACEUTICAS_ID";
				
				}

				
			    public BigDecimal GENERICOS_ID;

				public BigDecimal getGENERICOS_ID () {
					return this.GENERICOS_ID;
				}

				public Boolean GENERICOS_IDIsNullable(){
				    return true;
				}
				public Boolean GENERICOS_IDIsKey(){
				    return false;
				}
				public Integer GENERICOS_IDLength(){
				    return null;
				}
				public Integer GENERICOS_IDPrecision(){
				    return null;
				}
				public String GENERICOS_IDDefault(){
				
					return null;
				
				}
				public String GENERICOS_IDComment(){
				
				    return "";
				
				}
				public String GENERICOS_IDPattern(){
				
					return "";
				
				}
				public String GENERICOS_IDOriginalDbColumnName(){
				
					return "GENERICOS_ID";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.TFORMASFARMACEUTICAS_ID = (BigDecimal) dis.readObject();
					
						this.GENERICOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.TFORMASFARMACEUTICAS_ID = (BigDecimal) dis.readObject();
					
						this.GENERICOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TFORMASFARMACEUTICAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GENERICOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TFORMASFARMACEUTICAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GENERICOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",TFORMASFARMACEUTICAS_ID="+String.valueOf(TFORMASFARMACEUTICAS_ID));
		sb.append(",GENERICOS_ID="+String.valueOf(GENERICOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row14Struct row14 = new row14Struct();




	
	/**
	 * [tHashOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_5", false);
		start_Hash.put("tHashOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tHashOutput_5 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_5=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row14Struct> tHashFile_tHashOutput_5 = null;
		String hashKey_tHashOutput_5 = "tHashFile_CargaMoleculasAcuerdo_" + pid + "_tHashOutput_5";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_5)){
			    if(mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5) == null){
	      		    mf_tHashOutput_5.getResourceMap().put(hashKey_tHashOutput_5, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row14Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_5 = mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5);
			    }else{
			    	tHashFile_tHashOutput_5 = mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5);
			    }
			}
        int nb_line_tHashOutput_5 = 0;

 



/**
 * [tHashOutput_5 begin ] stop
 */



	
	/**
	 * [tOracleInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_8", false);
		start_Hash.put("tOracleInput_8", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_8";
	
	
		int tos_count_tOracleInput_8 = 0;
		
	


	
		    int nb_line_tOracleInput_8 = 0;
		    java.sql.Connection conn_tOracleInput_8 = null;
				conn_tOracleInput_8 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_8 = false;
				boolean isConnectionWrapped_tOracleInput_8 = !(conn_tOracleInput_8 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_8.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_8 = null;
                if (isConnectionWrapped_tOracleInput_8) {
					unwrappedOraConn_tOracleInput_8 = conn_tOracleInput_8.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_8 != null) {
                        isTimeZoneNull_tOracleInput_8 = (unwrappedOraConn_tOracleInput_8.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_8 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_8).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_8) {
					java.sql.Statement stmtGetTZ_tOracleInput_8 = conn_tOracleInput_8.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_8 = stmtGetTZ_tOracleInput_8.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_8 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_8.next()) {
						sessionTimezone_tOracleInput_8 = rsGetTZ_tOracleInput_8.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_8 && unwrappedOraConn_tOracleInput_8 != null) {
                        unwrappedOraConn_tOracleInput_8.setSessionTimeZone(sessionTimezone_tOracleInput_8);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_8).setSessionTimeZone(sessionTimezone_tOracleInput_8);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_8 = conn_tOracleInput_8.createStatement();

		    String dbquery_tOracleInput_8 = "SELECT \nID,\nTFORMASFARMACEUTICAS_ID,\nGENERICOS_ID\nFROM\n MED_FORMASFARMACEUTICAS \nWHERE ESTADO = 'Activo' AND ESTR"
+"EGISTRO_ID = 1 \nAND GENERICOS_ID IS NOT NULL \nAND TFORMASFARMACEUTICAS_ID IS NOT NULL";
		    

		    globalMap.put("tOracleInput_8_QUERY",dbquery_tOracleInput_8);

		    java.sql.ResultSet rs_tOracleInput_8 = null;

		    try {
		    	rs_tOracleInput_8 = stmt_tOracleInput_8.executeQuery(dbquery_tOracleInput_8);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_8 = rs_tOracleInput_8.getMetaData();
		    	int colQtyInRs_tOracleInput_8 = rsmd_tOracleInput_8.getColumnCount();

		    String tmpContent_tOracleInput_8 = null;
		    
		    
		    while (rs_tOracleInput_8.next()) {
		        nb_line_tOracleInput_8++;
		        
							if(colQtyInRs_tOracleInput_8 < 1) {
								row14.ID = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(1) != null) {
						row14.ID = rs_tOracleInput_8.getBigDecimal(1);
					} else {
				
						row14.ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 2) {
								row14.TFORMASFARMACEUTICAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(2) != null) {
						row14.TFORMASFARMACEUTICAS_ID = rs_tOracleInput_8.getBigDecimal(2);
					} else {
				
						row14.TFORMASFARMACEUTICAS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 3) {
								row14.GENERICOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(3) != null) {
						row14.GENERICOS_ID = rs_tOracleInput_8.getBigDecimal(3);
					} else {
				
						row14.GENERICOS_ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_8 begin ] stop
 */
	
	/**
	 * [tOracleInput_8 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 


	tos_count_tOracleInput_8++;

/**
 * [tOracleInput_8 main ] stop
 */
	
	/**
	 * [tOracleInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_5 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row14"
						
						);
					}
					



    
		row14Struct oneRow_tHashOutput_5 = new row14Struct();
				
					oneRow_tHashOutput_5.ID = row14.ID;
					oneRow_tHashOutput_5.TFORMASFARMACEUTICAS_ID = row14.TFORMASFARMACEUTICAS_ID;
					oneRow_tHashOutput_5.GENERICOS_ID = row14.GENERICOS_ID;
		
        tHashFile_tHashOutput_5.put(oneRow_tHashOutput_5);
        nb_line_tHashOutput_5 ++;

 


	tos_count_tHashOutput_5++;

/**
 * [tHashOutput_5 main ] stop
 */
	
	/**
	 * [tHashOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_8 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

}
}finally{
	if (rs_tOracleInput_8 != null) {
		rs_tOracleInput_8.close();
	}
	if (stmt_tOracleInput_8 != null) {
		stmt_tOracleInput_8.close();
	}
}

globalMap.put("tOracleInput_8_NB_LINE",nb_line_tOracleInput_8);
 

ok_Hash.put("tOracleInput_8", true);
end_Hash.put("tOracleInput_8", System.currentTimeMillis());




/**
 * [tOracleInput_8 end ] stop
 */

	
	/**
	 * [tHashOutput_5 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	
globalMap.put("tHashOutput_5_NB_LINE", nb_line_tHashOutput_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tHashOutput_5", true);
end_Hash.put("tHashOutput_5", System.currentTimeMillis());




/**
 * [tHashOutput_5 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_8:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk23", 0, "ok");
								} 
							
							tHashInput_7Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_8 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 finally ] stop
 */

	
	/**
	 * [tHashOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class row35Struct implements routines.system.IPersistableRow<row35Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public BigDecimal FORMAID;

				public BigDecimal getFORMAID () {
					return this.FORMAID;
				}

				public Boolean FORMAIDIsNullable(){
				    return true;
				}
				public Boolean FORMAIDIsKey(){
				    return false;
				}
				public Integer FORMAIDLength(){
				    return null;
				}
				public Integer FORMAIDPrecision(){
				    return null;
				}
				public String FORMAIDDefault(){
				
					return null;
				
				}
				public String FORMAIDComment(){
				
				    return "";
				
				}
				public String FORMAIDPattern(){
				
					return "";
				
				}
				public String FORMAIDOriginalDbColumnName(){
				
					return "FORMAID";
				
				}

				
			    public BigDecimal TFORMAS_ID;

				public BigDecimal getTFORMAS_ID () {
					return this.TFORMAS_ID;
				}

				public Boolean TFORMAS_IDIsNullable(){
				    return true;
				}
				public Boolean TFORMAS_IDIsKey(){
				    return false;
				}
				public Integer TFORMAS_IDLength(){
				    return null;
				}
				public Integer TFORMAS_IDPrecision(){
				    return null;
				}
				public String TFORMAS_IDDefault(){
				
					return null;
				
				}
				public String TFORMAS_IDComment(){
				
				    return "";
				
				}
				public String TFORMAS_IDPattern(){
				
					return "";
				
				}
				public String TFORMAS_IDOriginalDbColumnName(){
				
					return "TFORMAS_ID";
				
				}

				
			    public BigDecimal GENERICO_ID;

				public BigDecimal getGENERICO_ID () {
					return this.GENERICO_ID;
				}

				public Boolean GENERICO_IDIsNullable(){
				    return true;
				}
				public Boolean GENERICO_IDIsKey(){
				    return false;
				}
				public Integer GENERICO_IDLength(){
				    return null;
				}
				public Integer GENERICO_IDPrecision(){
				    return null;
				}
				public String GENERICO_IDDefault(){
				
					return null;
				
				}
				public String GENERICO_IDComment(){
				
				    return "";
				
				}
				public String GENERICO_IDPattern(){
				
					return "";
				
				}
				public String GENERICO_IDOriginalDbColumnName(){
				
					return "GENERICO_ID";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return null;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				
			    public Long LINEA;

				public Long getLINEA () {
					return this.LINEA;
				}

				public Boolean LINEAIsNullable(){
				    return true;
				}
				public Boolean LINEAIsKey(){
				    return false;
				}
				public Integer LINEALength(){
				    return null;
				}
				public Integer LINEAPrecision(){
				    return null;
				}
				public String LINEADefault(){
				
					return null;
				
				}
				public String LINEAComment(){
				
				    return "";
				
				}
				public String LINEAPattern(){
				
					return "";
				
				}
				public String LINEAOriginalDbColumnName(){
				
					return "LINEA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.FORMAID = (BigDecimal) dis.readObject();
					
						this.TFORMAS_ID = (BigDecimal) dis.readObject();
					
						this.GENERICO_ID = (BigDecimal) dis.readObject();
					
					this.CODIGO_UNICO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LINEA = null;
           				} else {
           			    	this.LINEA = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.FORMAID = (BigDecimal) dis.readObject();
					
						this.TFORMAS_ID = (BigDecimal) dis.readObject();
					
						this.GENERICO_ID = (BigDecimal) dis.readObject();
					
					this.CODIGO_UNICO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LINEA = null;
           				} else {
           			    	this.LINEA = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.FORMAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TFORMAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GENERICO_ID);
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
					// Long
				
						if(this.LINEA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LINEA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FORMAID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TFORMAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GENERICO_ID);
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
					// Long
				
						if(this.LINEA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LINEA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FORMAID="+String.valueOf(FORMAID));
		sb.append(",TFORMAS_ID="+String.valueOf(TFORMAS_ID));
		sb.append(",GENERICO_ID="+String.valueOf(GENERICO_ID));
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
		sb.append(",LINEA="+String.valueOf(LINEA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row35Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row34Struct implements routines.system.IPersistableRow<row34Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public BigDecimal FORMAID;

				public BigDecimal getFORMAID () {
					return this.FORMAID;
				}

				public Boolean FORMAIDIsNullable(){
				    return true;
				}
				public Boolean FORMAIDIsKey(){
				    return false;
				}
				public Integer FORMAIDLength(){
				    return null;
				}
				public Integer FORMAIDPrecision(){
				    return null;
				}
				public String FORMAIDDefault(){
				
					return null;
				
				}
				public String FORMAIDComment(){
				
				    return "";
				
				}
				public String FORMAIDPattern(){
				
					return "";
				
				}
				public String FORMAIDOriginalDbColumnName(){
				
					return "FORMAID";
				
				}

				
			    public BigDecimal TFORMAS_ID;

				public BigDecimal getTFORMAS_ID () {
					return this.TFORMAS_ID;
				}

				public Boolean TFORMAS_IDIsNullable(){
				    return true;
				}
				public Boolean TFORMAS_IDIsKey(){
				    return false;
				}
				public Integer TFORMAS_IDLength(){
				    return null;
				}
				public Integer TFORMAS_IDPrecision(){
				    return null;
				}
				public String TFORMAS_IDDefault(){
				
					return null;
				
				}
				public String TFORMAS_IDComment(){
				
				    return "";
				
				}
				public String TFORMAS_IDPattern(){
				
					return "";
				
				}
				public String TFORMAS_IDOriginalDbColumnName(){
				
					return "TFORMAS_ID";
				
				}

				
			    public BigDecimal GENERICO_ID;

				public BigDecimal getGENERICO_ID () {
					return this.GENERICO_ID;
				}

				public Boolean GENERICO_IDIsNullable(){
				    return true;
				}
				public Boolean GENERICO_IDIsKey(){
				    return false;
				}
				public Integer GENERICO_IDLength(){
				    return null;
				}
				public Integer GENERICO_IDPrecision(){
				    return null;
				}
				public String GENERICO_IDDefault(){
				
					return null;
				
				}
				public String GENERICO_IDComment(){
				
				    return "";
				
				}
				public String GENERICO_IDPattern(){
				
					return "";
				
				}
				public String GENERICO_IDOriginalDbColumnName(){
				
					return "GENERICO_ID";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return null;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				
			    public Long LINEA;

				public Long getLINEA () {
					return this.LINEA;
				}

				public Boolean LINEAIsNullable(){
				    return true;
				}
				public Boolean LINEAIsKey(){
				    return false;
				}
				public Integer LINEALength(){
				    return null;
				}
				public Integer LINEAPrecision(){
				    return null;
				}
				public String LINEADefault(){
				
					return null;
				
				}
				public String LINEAComment(){
				
				    return "";
				
				}
				public String LINEAPattern(){
				
					return "";
				
				}
				public String LINEAOriginalDbColumnName(){
				
					return "LINEA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.FORMAID = (BigDecimal) dis.readObject();
					
						this.TFORMAS_ID = (BigDecimal) dis.readObject();
					
						this.GENERICO_ID = (BigDecimal) dis.readObject();
					
					this.CODIGO_UNICO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LINEA = null;
           				} else {
           			    	this.LINEA = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.FORMAID = (BigDecimal) dis.readObject();
					
						this.TFORMAS_ID = (BigDecimal) dis.readObject();
					
						this.GENERICO_ID = (BigDecimal) dis.readObject();
					
					this.CODIGO_UNICO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LINEA = null;
           				} else {
           			    	this.LINEA = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.FORMAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TFORMAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GENERICO_ID);
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
					// Long
				
						if(this.LINEA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LINEA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FORMAID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TFORMAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GENERICO_ID);
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
					// Long
				
						if(this.LINEA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LINEA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FORMAID="+String.valueOf(FORMAID));
		sb.append(",TFORMAS_ID="+String.valueOf(TFORMAS_ID));
		sb.append(",GENERICO_ID="+String.valueOf(GENERICO_ID));
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
		sb.append(",LINEA="+String.valueOf(LINEA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row34Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String Mensaje;

				public String getMensaje () {
					return this.Mensaje;
				}

				public Boolean MensajeIsNullable(){
				    return true;
				}
				public Boolean MensajeIsKey(){
				    return false;
				}
				public Integer MensajeLength(){
				    return null;
				}
				public Integer MensajePrecision(){
				    return null;
				}
				public String MensajeDefault(){
				
					return null;
				
				}
				public String MensajeComment(){
				
				    return "";
				
				}
				public String MensajePattern(){
				
					return "";
				
				}
				public String MensajeOriginalDbColumnName(){
				
					return "Mensaje";
				
				}

				
			    public Long Linea;

				public Long getLinea () {
					return this.Linea;
				}

				public Boolean LineaIsNullable(){
				    return true;
				}
				public Boolean LineaIsKey(){
				    return false;
				}
				public Integer LineaLength(){
				    return null;
				}
				public Integer LineaPrecision(){
				    return null;
				}
				public String LineaDefault(){
				
					return null;
				
				}
				public String LineaComment(){
				
				    return "";
				
				}
				public String LineaPattern(){
				
					return "";
				
				}
				public String LineaOriginalDbColumnName(){
				
					return "Linea";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return null;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Mensaje="+Mensaje);
		sb.append(",Linea="+String.valueOf(Linea));
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row30Struct implements routines.system.IPersistableRow<row30Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String Mensaje;

				public String getMensaje () {
					return this.Mensaje;
				}

				public Boolean MensajeIsNullable(){
				    return true;
				}
				public Boolean MensajeIsKey(){
				    return false;
				}
				public Integer MensajeLength(){
				    return null;
				}
				public Integer MensajePrecision(){
				    return null;
				}
				public String MensajeDefault(){
				
					return null;
				
				}
				public String MensajeComment(){
				
				    return "";
				
				}
				public String MensajePattern(){
				
					return "";
				
				}
				public String MensajeOriginalDbColumnName(){
				
					return "Mensaje";
				
				}

				
			    public Long Linea;

				public Long getLinea () {
					return this.Linea;
				}

				public Boolean LineaIsNullable(){
				    return true;
				}
				public Boolean LineaIsKey(){
				    return false;
				}
				public Integer LineaLength(){
				    return null;
				}
				public Integer LineaPrecision(){
				    return null;
				}
				public String LineaDefault(){
				
					return null;
				
				}
				public String LineaComment(){
				
				    return "";
				
				}
				public String LineaPattern(){
				
					return "";
				
				}
				public String LineaOriginalDbColumnName(){
				
					return "Linea";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return null;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Mensaje="+Mensaje);
		sb.append(",Linea="+String.valueOf(Linea));
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row30Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_7 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_7> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String Mensaje;

				public String getMensaje () {
					return this.Mensaje;
				}

				public Boolean MensajeIsNullable(){
				    return true;
				}
				public Boolean MensajeIsKey(){
				    return false;
				}
				public Integer MensajeLength(){
				    return null;
				}
				public Integer MensajePrecision(){
				    return null;
				}
				public String MensajeDefault(){
				
					return null;
				
				}
				public String MensajeComment(){
				
				    return "";
				
				}
				public String MensajePattern(){
				
					return "";
				
				}
				public String MensajeOriginalDbColumnName(){
				
					return "Mensaje";
				
				}

				
			    public Long Linea;

				public Long getLinea () {
					return this.Linea;
				}

				public Boolean LineaIsNullable(){
				    return true;
				}
				public Boolean LineaIsKey(){
				    return false;
				}
				public Integer LineaLength(){
				    return null;
				}
				public Integer LineaPrecision(){
				    return null;
				}
				public String LineaDefault(){
				
					return null;
				
				}
				public String LineaComment(){
				
				    return "";
				
				}
				public String LineaPattern(){
				
					return "";
				
				}
				public String LineaOriginalDbColumnName(){
				
					return "Linea";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return null;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Mensaje="+Mensaje);
		sb.append(",Linea="+String.valueOf(Linea));
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_7 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class errorLogFormasStruct implements routines.system.IPersistableRow<errorLogFormasStruct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String Mensaje;

				public String getMensaje () {
					return this.Mensaje;
				}

				public Boolean MensajeIsNullable(){
				    return true;
				}
				public Boolean MensajeIsKey(){
				    return false;
				}
				public Integer MensajeLength(){
				    return null;
				}
				public Integer MensajePrecision(){
				    return null;
				}
				public String MensajeDefault(){
				
					return null;
				
				}
				public String MensajeComment(){
				
				    return "";
				
				}
				public String MensajePattern(){
				
					return "";
				
				}
				public String MensajeOriginalDbColumnName(){
				
					return "Mensaje";
				
				}

				
			    public Long Linea;

				public Long getLinea () {
					return this.Linea;
				}

				public Boolean LineaIsNullable(){
				    return true;
				}
				public Boolean LineaIsKey(){
				    return false;
				}
				public Integer LineaLength(){
				    return null;
				}
				public Integer LineaPrecision(){
				    return null;
				}
				public String LineaDefault(){
				
					return null;
				
				}
				public String LineaComment(){
				
				    return "";
				
				}
				public String LineaPattern(){
				
					return "";
				
				}
				public String LineaOriginalDbColumnName(){
				
					return "Linea";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return null;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea = null;
           				} else {
           			    	this.Linea = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Long
				
						if(this.Linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Mensaje="+Mensaje);
		sb.append(",Linea="+String.valueOf(Linea));
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(errorLogFormasStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class DatosValidosStruct implements routines.system.IPersistableRow<DatosValidosStruct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public BigDecimal FORMAID;

				public BigDecimal getFORMAID () {
					return this.FORMAID;
				}

				public Boolean FORMAIDIsNullable(){
				    return true;
				}
				public Boolean FORMAIDIsKey(){
				    return false;
				}
				public Integer FORMAIDLength(){
				    return null;
				}
				public Integer FORMAIDPrecision(){
				    return null;
				}
				public String FORMAIDDefault(){
				
					return null;
				
				}
				public String FORMAIDComment(){
				
				    return "";
				
				}
				public String FORMAIDPattern(){
				
					return "";
				
				}
				public String FORMAIDOriginalDbColumnName(){
				
					return "FORMAID";
				
				}

				
			    public BigDecimal TFORMAS_ID;

				public BigDecimal getTFORMAS_ID () {
					return this.TFORMAS_ID;
				}

				public Boolean TFORMAS_IDIsNullable(){
				    return true;
				}
				public Boolean TFORMAS_IDIsKey(){
				    return false;
				}
				public Integer TFORMAS_IDLength(){
				    return null;
				}
				public Integer TFORMAS_IDPrecision(){
				    return null;
				}
				public String TFORMAS_IDDefault(){
				
					return null;
				
				}
				public String TFORMAS_IDComment(){
				
				    return "";
				
				}
				public String TFORMAS_IDPattern(){
				
					return "";
				
				}
				public String TFORMAS_IDOriginalDbColumnName(){
				
					return "TFORMAS_ID";
				
				}

				
			    public BigDecimal GENERICO_ID;

				public BigDecimal getGENERICO_ID () {
					return this.GENERICO_ID;
				}

				public Boolean GENERICO_IDIsNullable(){
				    return true;
				}
				public Boolean GENERICO_IDIsKey(){
				    return false;
				}
				public Integer GENERICO_IDLength(){
				    return null;
				}
				public Integer GENERICO_IDPrecision(){
				    return null;
				}
				public String GENERICO_IDDefault(){
				
					return null;
				
				}
				public String GENERICO_IDComment(){
				
				    return "";
				
				}
				public String GENERICO_IDPattern(){
				
					return "";
				
				}
				public String GENERICO_IDOriginalDbColumnName(){
				
					return "GENERICO_ID";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return null;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				
			    public Long LINEA;

				public Long getLINEA () {
					return this.LINEA;
				}

				public Boolean LINEAIsNullable(){
				    return true;
				}
				public Boolean LINEAIsKey(){
				    return false;
				}
				public Integer LINEALength(){
				    return null;
				}
				public Integer LINEAPrecision(){
				    return null;
				}
				public String LINEADefault(){
				
					return null;
				
				}
				public String LINEAComment(){
				
				    return "";
				
				}
				public String LINEAPattern(){
				
					return "";
				
				}
				public String LINEAOriginalDbColumnName(){
				
					return "LINEA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.FORMAID = (BigDecimal) dis.readObject();
					
						this.TFORMAS_ID = (BigDecimal) dis.readObject();
					
						this.GENERICO_ID = (BigDecimal) dis.readObject();
					
					this.CODIGO_UNICO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LINEA = null;
           				} else {
           			    	this.LINEA = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.FORMAID = (BigDecimal) dis.readObject();
					
						this.TFORMAS_ID = (BigDecimal) dis.readObject();
					
						this.GENERICO_ID = (BigDecimal) dis.readObject();
					
					this.CODIGO_UNICO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LINEA = null;
           				} else {
           			    	this.LINEA = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.FORMAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TFORMAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GENERICO_ID);
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
					// Long
				
						if(this.LINEA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LINEA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FORMAID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TFORMAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GENERICO_ID);
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
					// Long
				
						if(this.LINEA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LINEA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FORMAID="+String.valueOf(FORMAID));
		sb.append(",TFORMAS_ID="+String.valueOf(TFORMAS_ID));
		sb.append(",GENERICO_ID="+String.valueOf(GENERICO_ID));
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
		sb.append(",LINEA="+String.valueOf(LINEA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(DatosValidosStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public BigDecimal TFORMAS_ID;

				public BigDecimal getTFORMAS_ID () {
					return this.TFORMAS_ID;
				}

				public Boolean TFORMAS_IDIsNullable(){
				    return true;
				}
				public Boolean TFORMAS_IDIsKey(){
				    return false;
				}
				public Integer TFORMAS_IDLength(){
				    return null;
				}
				public Integer TFORMAS_IDPrecision(){
				    return null;
				}
				public String TFORMAS_IDDefault(){
				
					return "";
				
				}
				public String TFORMAS_IDComment(){
				
				    return "";
				
				}
				public String TFORMAS_IDPattern(){
				
					return "";
				
				}
				public String TFORMAS_IDOriginalDbColumnName(){
				
					return "TFORMAS_ID";
				
				}

				
			    public String NUEVAFORMA;

				public String getNUEVAFORMA () {
					return this.NUEVAFORMA;
				}

				public Boolean NUEVAFORMAIsNullable(){
				    return true;
				}
				public Boolean NUEVAFORMAIsKey(){
				    return false;
				}
				public Integer NUEVAFORMALength(){
				    return null;
				}
				public Integer NUEVAFORMAPrecision(){
				    return null;
				}
				public String NUEVAFORMADefault(){
				
					return null;
				
				}
				public String NUEVAFORMAComment(){
				
				    return "";
				
				}
				public String NUEVAFORMAPattern(){
				
					return "";
				
				}
				public String NUEVAFORMAOriginalDbColumnName(){
				
					return "NUEVAFORMA";
				
				}

				
			    public BigDecimal GENERICO_ID;

				public BigDecimal getGENERICO_ID () {
					return this.GENERICO_ID;
				}

				public Boolean GENERICO_IDIsNullable(){
				    return true;
				}
				public Boolean GENERICO_IDIsKey(){
				    return false;
				}
				public Integer GENERICO_IDLength(){
				    return null;
				}
				public Integer GENERICO_IDPrecision(){
				    return null;
				}
				public String GENERICO_IDDefault(){
				
					return "";
				
				}
				public String GENERICO_IDComment(){
				
				    return "";
				
				}
				public String GENERICO_IDPattern(){
				
					return "";
				
				}
				public String GENERICO_IDOriginalDbColumnName(){
				
					return "GENERICO_ID";
				
				}

				
			    public String NOMBREGENERICO;

				public String getNOMBREGENERICO () {
					return this.NOMBREGENERICO;
				}

				public Boolean NOMBREGENERICOIsNullable(){
				    return true;
				}
				public Boolean NOMBREGENERICOIsKey(){
				    return false;
				}
				public Integer NOMBREGENERICOLength(){
				    return null;
				}
				public Integer NOMBREGENERICOPrecision(){
				    return null;
				}
				public String NOMBREGENERICODefault(){
				
					return null;
				
				}
				public String NOMBREGENERICOComment(){
				
				    return "";
				
				}
				public String NOMBREGENERICOPattern(){
				
					return "";
				
				}
				public String NOMBREGENERICOOriginalDbColumnName(){
				
					return "NOMBREGENERICO";
				
				}

				
			    public Long LINEA;

				public Long getLINEA () {
					return this.LINEA;
				}

				public Boolean LINEAIsNullable(){
				    return true;
				}
				public Boolean LINEAIsKey(){
				    return false;
				}
				public Integer LINEALength(){
				    return null;
				}
				public Integer LINEAPrecision(){
				    return null;
				}
				public String LINEADefault(){
				
					return null;
				
				}
				public String LINEAComment(){
				
				    return "";
				
				}
				public String LINEAPattern(){
				
					return "";
				
				}
				public String LINEAOriginalDbColumnName(){
				
					return "LINEA";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return null;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.TFORMAS_ID = (BigDecimal) dis.readObject();
					
					this.NUEVAFORMA = readString(dis);
					
						this.GENERICO_ID = (BigDecimal) dis.readObject();
					
					this.NOMBREGENERICO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LINEA = null;
           				} else {
           			    	this.LINEA = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.TFORMAS_ID = (BigDecimal) dis.readObject();
					
					this.NUEVAFORMA = readString(dis);
					
						this.GENERICO_ID = (BigDecimal) dis.readObject();
					
					this.NOMBREGENERICO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LINEA = null;
           				} else {
           			    	this.LINEA = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.TFORMAS_ID);
					
					// String
				
						writeString(this.NUEVAFORMA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GENERICO_ID);
					
					// String
				
						writeString(this.NOMBREGENERICO,dos);
					
					// Long
				
						if(this.LINEA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LINEA);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TFORMAS_ID);
					
					// String
				
						writeString(this.NUEVAFORMA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GENERICO_ID);
					
					// String
				
						writeString(this.NOMBREGENERICO,dos);
					
					// Long
				
						if(this.LINEA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LINEA);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TFORMAS_ID="+String.valueOf(TFORMAS_ID));
		sb.append(",NUEVAFORMA="+NUEVAFORMA);
		sb.append(",GENERICO_ID="+String.valueOf(GENERICO_ID));
		sb.append(",NOMBREGENERICO="+NOMBREGENERICO);
		sb.append(",LINEA="+String.valueOf(LINEA));
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_7Struct implements routines.system.IPersistableRow<after_tHashInput_7Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public BigDecimal TFORMAS_ID;

				public BigDecimal getTFORMAS_ID () {
					return this.TFORMAS_ID;
				}

				public Boolean TFORMAS_IDIsNullable(){
				    return true;
				}
				public Boolean TFORMAS_IDIsKey(){
				    return false;
				}
				public Integer TFORMAS_IDLength(){
				    return null;
				}
				public Integer TFORMAS_IDPrecision(){
				    return null;
				}
				public String TFORMAS_IDDefault(){
				
					return "";
				
				}
				public String TFORMAS_IDComment(){
				
				    return "";
				
				}
				public String TFORMAS_IDPattern(){
				
					return "";
				
				}
				public String TFORMAS_IDOriginalDbColumnName(){
				
					return "TFORMAS_ID";
				
				}

				
			    public String NUEVAFORMA;

				public String getNUEVAFORMA () {
					return this.NUEVAFORMA;
				}

				public Boolean NUEVAFORMAIsNullable(){
				    return true;
				}
				public Boolean NUEVAFORMAIsKey(){
				    return false;
				}
				public Integer NUEVAFORMALength(){
				    return null;
				}
				public Integer NUEVAFORMAPrecision(){
				    return null;
				}
				public String NUEVAFORMADefault(){
				
					return null;
				
				}
				public String NUEVAFORMAComment(){
				
				    return "";
				
				}
				public String NUEVAFORMAPattern(){
				
					return "";
				
				}
				public String NUEVAFORMAOriginalDbColumnName(){
				
					return "NUEVAFORMA";
				
				}

				
			    public BigDecimal GENERICO_ID;

				public BigDecimal getGENERICO_ID () {
					return this.GENERICO_ID;
				}

				public Boolean GENERICO_IDIsNullable(){
				    return true;
				}
				public Boolean GENERICO_IDIsKey(){
				    return false;
				}
				public Integer GENERICO_IDLength(){
				    return null;
				}
				public Integer GENERICO_IDPrecision(){
				    return null;
				}
				public String GENERICO_IDDefault(){
				
					return "";
				
				}
				public String GENERICO_IDComment(){
				
				    return "";
				
				}
				public String GENERICO_IDPattern(){
				
					return "";
				
				}
				public String GENERICO_IDOriginalDbColumnName(){
				
					return "GENERICO_ID";
				
				}

				
			    public String NOMBREGENERICO;

				public String getNOMBREGENERICO () {
					return this.NOMBREGENERICO;
				}

				public Boolean NOMBREGENERICOIsNullable(){
				    return true;
				}
				public Boolean NOMBREGENERICOIsKey(){
				    return false;
				}
				public Integer NOMBREGENERICOLength(){
				    return null;
				}
				public Integer NOMBREGENERICOPrecision(){
				    return null;
				}
				public String NOMBREGENERICODefault(){
				
					return null;
				
				}
				public String NOMBREGENERICOComment(){
				
				    return "";
				
				}
				public String NOMBREGENERICOPattern(){
				
					return "";
				
				}
				public String NOMBREGENERICOOriginalDbColumnName(){
				
					return "NOMBREGENERICO";
				
				}

				
			    public Long LINEA;

				public Long getLINEA () {
					return this.LINEA;
				}

				public Boolean LINEAIsNullable(){
				    return true;
				}
				public Boolean LINEAIsKey(){
				    return false;
				}
				public Integer LINEALength(){
				    return null;
				}
				public Integer LINEAPrecision(){
				    return null;
				}
				public String LINEADefault(){
				
					return null;
				
				}
				public String LINEAComment(){
				
				    return "";
				
				}
				public String LINEAPattern(){
				
					return "";
				
				}
				public String LINEAOriginalDbColumnName(){
				
					return "LINEA";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return null;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.TFORMAS_ID = (BigDecimal) dis.readObject();
					
					this.NUEVAFORMA = readString(dis);
					
						this.GENERICO_ID = (BigDecimal) dis.readObject();
					
					this.NOMBREGENERICO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LINEA = null;
           				} else {
           			    	this.LINEA = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.TFORMAS_ID = (BigDecimal) dis.readObject();
					
					this.NUEVAFORMA = readString(dis);
					
						this.GENERICO_ID = (BigDecimal) dis.readObject();
					
					this.NOMBREGENERICO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LINEA = null;
           				} else {
           			    	this.LINEA = dis.readLong();
           				}
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.TFORMAS_ID);
					
					// String
				
						writeString(this.NUEVAFORMA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GENERICO_ID);
					
					// String
				
						writeString(this.NOMBREGENERICO,dos);
					
					// Long
				
						if(this.LINEA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LINEA);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TFORMAS_ID);
					
					// String
				
						writeString(this.NUEVAFORMA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GENERICO_ID);
					
					// String
				
						writeString(this.NOMBREGENERICO,dos);
					
					// Long
				
						if(this.LINEA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LINEA);
		            	}
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TFORMAS_ID="+String.valueOf(TFORMAS_ID));
		sb.append(",NUEVAFORMA="+NUEVAFORMA);
		sb.append(",GENERICO_ID="+String.valueOf(GENERICO_ID));
		sb.append(",NOMBREGENERICO="+NOMBREGENERICO);
		sb.append(",LINEA="+String.valueOf(LINEA));
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_9Process(globalMap);

		row9Struct row9 = new row9Struct();
errorLogFormasStruct errorLogFormas = new errorLogFormasStruct();
row30Struct row30 = new row30Struct();
row19Struct row19 = new row19Struct();
DatosValidosStruct DatosValidos = new DatosValidosStruct();
row34Struct row34 = new row34Struct();
row35Struct row35 = new row35Struct();





	
	/**
	 * [tAggregateRow_7_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_7_AGGOUT", false);
		start_Hash.put("tAggregateRow_7_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGOUT";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"errorLogFormas");
					}
				
		int tos_count_tAggregateRow_7_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_7 = new java.util.HashMap(); 

// ------------
	class AggOperationStruct_tAggregateRow_7 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				String Mensaje;
    				Long Linea;
    				String CODIGO_UNICO;
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.Mensaje == null) ? 0 : this.Mensaje.hashCode());
							
							result = prime * result + ((this.Linea == null) ? 0 : this.Linea.hashCode());
							
							result = prime * result + ((this.CODIGO_UNICO == null) ? 0 : this.CODIGO_UNICO.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_7 other = (AggOperationStruct_tAggregateRow_7) obj;
			
							if (this.Mensaje == null) {
								if (other.Mensaje != null) 
									return false;
							} else if (!this.Mensaje.equals(other.Mensaje)) 
								return false;
						
							if (this.Linea == null) {
								if (other.Linea != null) 
									return false;
							} else if (!this.Linea.equals(other.Linea)) 
								return false;
						
							if (this.CODIGO_UNICO == null) {
								if (other.CODIGO_UNICO != null) 
									return false;
							} else if (!this.CODIGO_UNICO.equals(other.CODIGO_UNICO)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_7 operation_result_tAggregateRow_7 = null;
	AggOperationStruct_tAggregateRow_7 operation_finder_tAggregateRow_7 = new AggOperationStruct_tAggregateRow_7();
	java.util.Map<AggOperationStruct_tAggregateRow_7,AggOperationStruct_tAggregateRow_7> hash_tAggregateRow_7 = new java.util.HashMap<AggOperationStruct_tAggregateRow_7,AggOperationStruct_tAggregateRow_7>();
	

 



/**
 * [tAggregateRow_7_AGGOUT begin ] stop
 */






	
	/**
	 * [tOracleOutput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_14", false);
		start_Hash.put("tOracleOutput_14", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_14";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row35");
					}
				
		int tos_count_tOracleOutput_14 = 0;
		






    
    int nb_line_tOracleOutput_14 = 0;
    int nb_line_update_tOracleOutput_14 = 0;
    int nb_line_inserted_tOracleOutput_14 = 0;
    int nb_line_deleted_tOracleOutput_14 = 0;
    int nb_line_rejected_tOracleOutput_14 = 0;

    int tmp_batchUpdateCount_tOracleOutput_14 = 0;

    int deletedCount_tOracleOutput_14=0;
    int updatedCount_tOracleOutput_14=0;
    int insertedCount_tOracleOutput_14=0;
    int rowsToCommitCount_tOracleOutput_14=0;
    int rejectedCount_tOracleOutput_14=0;

    boolean whetherReject_tOracleOutput_14 = false;

    java.sql.Connection conn_tOracleOutput_14 = null;

    //optional table
    String dbschema_tOracleOutput_14 = null;
    String tableName_tOracleOutput_14 = null;
        dbschema_tOracleOutput_14 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_14 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_14=0;

        if(dbschema_tOracleOutput_14 == null || dbschema_tOracleOutput_14.trim().length() == 0) {
            tableName_tOracleOutput_14 = ("FORMAFARMACEUTICA_TEMP");
        } else {
            tableName_tOracleOutput_14 = dbschema_tOracleOutput_14 + "." + ("FORMAFARMACEUTICA_TEMP");
        }
                                String tableNameForSearch_tOracleOutput_14= "" + ((String)"FORMAFARMACEUTICA_TEMP") + "";
String dbschemaForSearch_tOracleOutput_14= null;
if(dbschema_tOracleOutput_14== null || dbschema_tOracleOutput_14.trim().length() == 0) {
dbschemaForSearch_tOracleOutput_14= ((String)globalMap.get("username_tOracleConnection_2")).toUpperCase();
} else {
dbschemaForSearch_tOracleOutput_14= dbschema_tOracleOutput_14.toUpperCase();
}

                                java.sql.DatabaseMetaData dbMetaData_tOracleOutput_14 = conn_tOracleOutput_14.getMetaData();
                                if(tableNameForSearch_tOracleOutput_14.indexOf("\"")==-1){
                                    tableNameForSearch_tOracleOutput_14 = tableNameForSearch_tOracleOutput_14.toUpperCase();
                                }else{
                                    tableNameForSearch_tOracleOutput_14 = tableNameForSearch_tOracleOutput_14.replaceAll("\"","");
                                }
                                boolean whetherExist_tOracleOutput_14 = false;
                                try (java.sql.ResultSet rsTable_tOracleOutput_14 = dbMetaData_tOracleOutput_14.getTables(null, dbschemaForSearch_tOracleOutput_14, tableNameForSearch_tOracleOutput_14, new String[]{"TABLE"})) {
                                    if(rsTable_tOracleOutput_14.next()) {
                                        whetherExist_tOracleOutput_14 = true;
                                    }
                                }

                                if(!whetherExist_tOracleOutput_14) {
                                    try (java.sql.Statement stmtCreate_tOracleOutput_14 = conn_tOracleOutput_14.createStatement()) {
                                        stmtCreate_tOracleOutput_14.execute("CREATE TABLE " + tableName_tOracleOutput_14 + "(FORMAID DEC(0,0)  ,TFORMAS_ID DEC(0,0)  ,GENERICO_ID DEC(0,0)  ,CODIGO_UNICO VARCHAR2(0)  ,LINEA NUMBER )");
                                    }
                                }
                String insert_tOracleOutput_14 = "INSERT INTO " + tableName_tOracleOutput_14 + " (FORMAID,TFORMAS_ID,GENERICO_ID,CODIGO_UNICO,LINEA) VALUES (?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_14 = conn_tOracleOutput_14.prepareStatement(insert_tOracleOutput_14);
                        resourceMap.put("pstmt_tOracleOutput_14", pstmt_tOracleOutput_14);





 



/**
 * [tOracleOutput_14 begin ] stop
 */



	
	/**
	 * [tReplicate_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tReplicate_4", false);
		start_Hash.put("tReplicate_4", System.currentTimeMillis());
		
	
	currentComponent="tReplicate_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row34");
					}
				
		int tos_count_tReplicate_4 = 0;
		

 



/**
 * [tReplicate_4 begin ] stop
 */



	
	/**
	 * [tJavaRow_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_7", false);
		start_Hash.put("tJavaRow_7", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"DatosValidos");
					}
				
		int tos_count_tJavaRow_7 = 0;
		

int nb_line_tJavaRow_7 = 0;

 



/**
 * [tJavaRow_7 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct> tHash_Lookup_row26 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct>) 
					globalMap.get( "tHash_Lookup_row26" ))
					;					
					
	

row26Struct row26HashKey = new row26Struct();
row26Struct row26Default = new row26Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
errorLogFormasStruct errorLogFormas_tmp = new errorLogFormasStruct();
DatosValidosStruct DatosValidos_tmp = new DatosValidosStruct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tHashInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_7", false);
		start_Hash.put("tHashInput_7", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_7";
	
	
		int tos_count_tHashInput_7 = 0;
		


int nb_line_tHashInput_7 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_7=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row24Struct> tHashFile_tHashInput_7 = mf_tHashInput_7.getAdvancedMemoryHashFile("tHashFile_CargaMoleculasAcuerdo_" + pid +"_tHashOutput_4");
if(tHashFile_tHashInput_7==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row24Struct> iterator_tHashInput_7 = tHashFile_tHashInput_7.iterator();
while (iterator_tHashInput_7.hasNext()) {
    row24Struct next_tHashInput_7 = iterator_tHashInput_7.next();

	row9.TFORMAS_ID = next_tHashInput_7.TFORMAS_ID;
	row9.NUEVAFORMA = next_tHashInput_7.NUEVAFORMA;
	row9.GENERICO_ID = next_tHashInput_7.GENERICO_ID;
	row9.NOMBREGENERICO = next_tHashInput_7.NOMBREGENERICO;
	row9.LINEA = next_tHashInput_7.LINEA;
	row9.CODIGO_UNICO = next_tHashInput_7.CODIGO_UNICO;

 



/**
 * [tHashInput_7 begin ] stop
 */
	
	/**
	 * [tHashInput_7 main ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 


	tos_count_tHashInput_7++;

/**
 * [tHashInput_7 main ] stop
 */
	
	/**
	 * [tHashInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
						row26Struct row26 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_7 = false;
		boolean mainRowRejected_tMap_7 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row26" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow26 = false;
       		  	    	
       		  	    	
 							row26Struct row26ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_7) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_7 = false;
								
                        		    		    row26HashKey.TFORMASFARMACEUTICAS_ID = row9.TFORMAS_ID ;
                        		    		
                        		    		    row26HashKey.GENERICOS_ID = row9.GENERICO_ID ;
                        		    		

								
		                        	row26HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row26.lookup( row26HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row26 != null && tHash_Lookup_row26.getCount(row26HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row26' and it contains more one result from keys :  row26.TFORMASFARMACEUTICAS_ID = '" + row26HashKey.TFORMASFARMACEUTICAS_ID + "', row26.GENERICOS_ID = '" + row26HashKey.GENERICOS_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row26Struct fromLookup_row26 = null;
							row26 = row26Default;
										 
							
								 
							
							
								if (tHash_Lookup_row26 !=null && tHash_Lookup_row26.hasNext()) { // G 099
								
							
								
								fromLookup_row26 = tHash_Lookup_row26.next();

							
							
								} // G 099
							
							

							if(fromLookup_row26 != null) {
								row26 = fromLookup_row26;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

DatosValidos = null;
errorLogFormas = null;


// # Output table : 'DatosValidos'
DatosValidos_tmp.FORMAID = row26.ID ;
DatosValidos_tmp.TFORMAS_ID = row26.TFORMASFARMACEUTICAS_ID ;
DatosValidos_tmp.GENERICO_ID = row26.GENERICOS_ID ;
DatosValidos_tmp.CODIGO_UNICO = row9.CODIGO_UNICO ;
DatosValidos_tmp.LINEA = row9.LINEA ;
DatosValidos = DatosValidos_tmp;
// ###### START REJECTS ##### 
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "errorLogFormas"
if(errorLogFormas != null) { 



	
	/**
	 * [tAggregateRow_7_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGOUT";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"errorLogFormas"
						
						);
					}
					
	
operation_finder_tAggregateRow_7.Mensaje = errorLogFormas.Mensaje;
			operation_finder_tAggregateRow_7.Linea = errorLogFormas.Linea;
			operation_finder_tAggregateRow_7.CODIGO_UNICO = errorLogFormas.CODIGO_UNICO;
			

	operation_finder_tAggregateRow_7.hashCodeDirty = true;
	
	operation_result_tAggregateRow_7 = hash_tAggregateRow_7.get(operation_finder_tAggregateRow_7);

	

	if(operation_result_tAggregateRow_7 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_7 = new AggOperationStruct_tAggregateRow_7();

		operation_result_tAggregateRow_7.Mensaje = operation_finder_tAggregateRow_7.Mensaje;
				operation_result_tAggregateRow_7.Linea = operation_finder_tAggregateRow_7.Linea;
				operation_result_tAggregateRow_7.CODIGO_UNICO = operation_finder_tAggregateRow_7.CODIGO_UNICO;
				
		
		

		hash_tAggregateRow_7.put(operation_result_tAggregateRow_7, operation_result_tAggregateRow_7);
	
	} // G_OutMain_AggR_001


	


 


	tos_count_tAggregateRow_7_AGGOUT++;

/**
 * [tAggregateRow_7_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_7_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGOUT";
	
	

 



/**
 * [tAggregateRow_7_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_7_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGOUT";
	
	

 



/**
 * [tAggregateRow_7_AGGOUT process_data_end ] stop
 */

} // End of branch "errorLogFormas"




// Start of branch "DatosValidos"
if(DatosValidos != null) { 



	
	/**
	 * [tJavaRow_7 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"DatosValidos"
						
						);
					}
					

    //Code generate according to input schema and output schema
row34.FORMAID = DatosValidos.FORMAID;
row34.TFORMAS_ID = DatosValidos.TFORMAS_ID;
row34.GENERICO_ID = DatosValidos.GENERICO_ID;
row34.CODIGO_UNICO = DatosValidos.CODIGO_UNICO;
row34.LINEA = DatosValidos.LINEA;

    nb_line_tJavaRow_7++;   

 


	tos_count_tJavaRow_7++;

/**
 * [tJavaRow_7 main ] stop
 */
	
	/**
	 * [tJavaRow_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 process_data_begin ] stop
 */

	
	/**
	 * [tReplicate_4 main ] start
	 */

	

	
	
	currentComponent="tReplicate_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row34"
						
						);
					}
					


	row35 = new row35Struct();
						
	row35.FORMAID = row34.FORMAID;								
	row35.TFORMAS_ID = row34.TFORMAS_ID;								
	row35.GENERICO_ID = row34.GENERICO_ID;								
	row35.CODIGO_UNICO = row34.CODIGO_UNICO;								
	row35.LINEA = row34.LINEA;			


 


	tos_count_tReplicate_4++;

/**
 * [tReplicate_4 main ] stop
 */
	
	/**
	 * [tReplicate_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tReplicate_4";
	
	

 



/**
 * [tReplicate_4 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_14 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_14";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row35"
						
						);
					}
					



        whetherReject_tOracleOutput_14 = false;
                        pstmt_tOracleOutput_14.setBigDecimal(1, row35.FORMAID);

                        pstmt_tOracleOutput_14.setBigDecimal(2, row35.TFORMAS_ID);

                        pstmt_tOracleOutput_14.setBigDecimal(3, row35.GENERICO_ID);

                        if(row35.CODIGO_UNICO == null) {
pstmt_tOracleOutput_14.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_14.setString(4, row35.CODIGO_UNICO);
}

                        if(row35.LINEA == null) {
pstmt_tOracleOutput_14.setNull(5, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_14.setLong(5, row35.LINEA);
}

                try {
                    nb_line_tOracleOutput_14++;
                    int processedCount_tOracleOutput_14 = pstmt_tOracleOutput_14.executeUpdate();
                    insertedCount_tOracleOutput_14 += processedCount_tOracleOutput_14;
                    rowsToCommitCount_tOracleOutput_14 += processedCount_tOracleOutput_14;
                } catch(java.lang.Exception e_tOracleOutput_14) {
globalMap.put("tOracleOutput_14_ERROR_MESSAGE",e_tOracleOutput_14.getMessage());
                    whetherReject_tOracleOutput_14 = true;
                            System.err.print(e_tOracleOutput_14.getMessage());
                }

 


	tos_count_tOracleOutput_14++;

/**
 * [tOracleOutput_14 main ] stop
 */
	
	/**
	 * [tOracleOutput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_14";
	
	

 



/**
 * [tOracleOutput_14 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_14";
	
	

 



/**
 * [tOracleOutput_14 process_data_end ] stop
 */



	
	/**
	 * [tReplicate_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tReplicate_4";
	
	

 



/**
 * [tReplicate_4 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 process_data_end ] stop
 */

} // End of branch "DatosValidos"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_7 end ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	
    

		
			nb_line_tHashInput_7++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_CargaMoleculasAcuerdo_" + pid +"_tHashOutput_4");
	


	globalMap.put("tHashInput_7_NB_LINE", nb_line_tHashInput_7);       

 

ok_Hash.put("tHashInput_7", true);
end_Hash.put("tHashInput_7", System.currentTimeMillis());




/**
 * [tHashInput_7 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row26 != null) {
						tHash_Lookup_row26.endGet();
					}
					globalMap.remove( "tHash_Lookup_row26" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tAggregateRow_7_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGOUT";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"errorLogFormas");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_7_AGGOUT", true);
end_Hash.put("tAggregateRow_7_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_7_AGGOUT end ] stop
 */



	
	/**
	 * [tOracleOutput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_13", false);
		start_Hash.put("tOracleOutput_13", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_13";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row19");
					}
				
		int tos_count_tOracleOutput_13 = 0;
		






    
    int nb_line_tOracleOutput_13 = 0;
    int nb_line_update_tOracleOutput_13 = 0;
    int nb_line_inserted_tOracleOutput_13 = 0;
    int nb_line_deleted_tOracleOutput_13 = 0;
    int nb_line_rejected_tOracleOutput_13 = 0;

    int tmp_batchUpdateCount_tOracleOutput_13 = 0;

    int deletedCount_tOracleOutput_13=0;
    int updatedCount_tOracleOutput_13=0;
    int insertedCount_tOracleOutput_13=0;
    int rowsToCommitCount_tOracleOutput_13=0;
    int rejectedCount_tOracleOutput_13=0;

    boolean whetherReject_tOracleOutput_13 = false;

    java.sql.Connection conn_tOracleOutput_13 = null;

    //optional table
    String dbschema_tOracleOutput_13 = null;
    String tableName_tOracleOutput_13 = null;
        dbschema_tOracleOutput_13 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_13 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_13=0;

        if(dbschema_tOracleOutput_13 == null || dbschema_tOracleOutput_13.trim().length() == 0) {
            tableName_tOracleOutput_13 = ("ERRORLOG_TEMP");
        } else {
            tableName_tOracleOutput_13 = dbschema_tOracleOutput_13 + "." + ("ERRORLOG_TEMP");
        }
                String insert_tOracleOutput_13 = "INSERT INTO " + tableName_tOracleOutput_13 + " (Mensaje,Linea,CODIGO_UNICO) VALUES (?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_13 = conn_tOracleOutput_13.prepareStatement(insert_tOracleOutput_13);
                        resourceMap.put("pstmt_tOracleOutput_13", pstmt_tOracleOutput_13);





 



/**
 * [tOracleOutput_13 begin ] stop
 */



	
	/**
	 * [tJavaRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_5", false);
		start_Hash.put("tJavaRow_5", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row30");
					}
				
		int tos_count_tJavaRow_5 = 0;
		

int nb_line_tJavaRow_5 = 0;

 



/**
 * [tJavaRow_5 begin ] stop
 */



	
	/**
	 * [tAggregateRow_7_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_7_AGGIN", false);
		start_Hash.put("tAggregateRow_7_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGIN";
	
	
		int tos_count_tAggregateRow_7_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_7> values_tAggregateRow_7 = hash_tAggregateRow_7.values();

globalMap.put("tAggregateRow_7_NB_LINE", values_tAggregateRow_7.size());

for(AggOperationStruct_tAggregateRow_7 aggregated_row_tAggregateRow_7 : values_tAggregateRow_7) { // G_AggR_600



 



/**
 * [tAggregateRow_7_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_7_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGIN";
	
	

            				    row30.Mensaje = aggregated_row_tAggregateRow_7.Mensaje;
            				    
            				    row30.Linea = aggregated_row_tAggregateRow_7.Linea;
            				    
            				    row30.CODIGO_UNICO = aggregated_row_tAggregateRow_7.CODIGO_UNICO;
            				    

 


	tos_count_tAggregateRow_7_AGGIN++;

/**
 * [tAggregateRow_7_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_7_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGIN";
	
	

 



/**
 * [tAggregateRow_7_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_5 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row30"
						
						);
					}
					

    //Code generate according to input schema and output schema
row19.Mensaje = row30.Mensaje;
row19.Linea = row30.Linea;
row19.CODIGO_UNICO = row30.CODIGO_UNICO;

context.ErrorLog +=1;

    nb_line_tJavaRow_5++;   

 


	tos_count_tJavaRow_5++;

/**
 * [tJavaRow_5 main ] stop
 */
	
	/**
	 * [tJavaRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_13 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_13";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row19"
						
						);
					}
					



        whetherReject_tOracleOutput_13 = false;
                        if(row19.Mensaje == null) {
pstmt_tOracleOutput_13.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_13.setString(1, row19.Mensaje);
}

                        if(row19.Linea == null) {
pstmt_tOracleOutput_13.setNull(2, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_13.setLong(2, row19.Linea);
}

                        if(row19.CODIGO_UNICO == null) {
pstmt_tOracleOutput_13.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_13.setString(3, row19.CODIGO_UNICO);
}

                try {
                    nb_line_tOracleOutput_13++;
                    int processedCount_tOracleOutput_13 = pstmt_tOracleOutput_13.executeUpdate();
                    insertedCount_tOracleOutput_13 += processedCount_tOracleOutput_13;
                    rowsToCommitCount_tOracleOutput_13 += processedCount_tOracleOutput_13;
                } catch(java.lang.Exception e_tOracleOutput_13) {
globalMap.put("tOracleOutput_13_ERROR_MESSAGE",e_tOracleOutput_13.getMessage());
                    whetherReject_tOracleOutput_13 = true;
                            System.err.print(e_tOracleOutput_13.getMessage());
                }

 


	tos_count_tOracleOutput_13++;

/**
 * [tOracleOutput_13 main ] stop
 */
	
	/**
	 * [tOracleOutput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_13";
	
	

 



/**
 * [tOracleOutput_13 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_13";
	
	

 



/**
 * [tOracleOutput_13 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_7_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGIN";
	
	

 



/**
 * [tAggregateRow_7_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_7_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGIN";
	
	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_7_AGGIN", true);
end_Hash.put("tAggregateRow_7_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_7_AGGIN end ] stop
 */

	
	/**
	 * [tJavaRow_5 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

globalMap.put("tJavaRow_5_NB_LINE",nb_line_tJavaRow_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row30");
			  	}
			  	
 

ok_Hash.put("tJavaRow_5", true);
end_Hash.put("tJavaRow_5", System.currentTimeMillis());




/**
 * [tJavaRow_5 end ] stop
 */

	
	/**
	 * [tOracleOutput_13 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_13";
	
	
	



	
        if(pstmt_tOracleOutput_13 != null) {
			
				pstmt_tOracleOutput_13.close();
				resourceMap.remove("pstmt_tOracleOutput_13");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_13", true);

	
	nb_line_deleted_tOracleOutput_13=nb_line_deleted_tOracleOutput_13+ deletedCount_tOracleOutput_13;
	nb_line_update_tOracleOutput_13=nb_line_update_tOracleOutput_13 + updatedCount_tOracleOutput_13;
	nb_line_inserted_tOracleOutput_13=nb_line_inserted_tOracleOutput_13 + insertedCount_tOracleOutput_13;
	nb_line_rejected_tOracleOutput_13=nb_line_rejected_tOracleOutput_13 + rejectedCount_tOracleOutput_13;
	
        globalMap.put("tOracleOutput_13_NB_LINE",nb_line_tOracleOutput_13);
        globalMap.put("tOracleOutput_13_NB_LINE_UPDATED",nb_line_update_tOracleOutput_13);
        globalMap.put("tOracleOutput_13_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_13);
        globalMap.put("tOracleOutput_13_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_13);
        globalMap.put("tOracleOutput_13_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_13);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row19");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_13", true);
end_Hash.put("tOracleOutput_13", System.currentTimeMillis());




/**
 * [tOracleOutput_13 end ] stop
 */













	
	/**
	 * [tJavaRow_7 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

globalMap.put("tJavaRow_7_NB_LINE",nb_line_tJavaRow_7);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"DatosValidos");
			  	}
			  	
 

ok_Hash.put("tJavaRow_7", true);
end_Hash.put("tJavaRow_7", System.currentTimeMillis());




/**
 * [tJavaRow_7 end ] stop
 */

	
	/**
	 * [tReplicate_4 end ] start
	 */

	

	
	
	currentComponent="tReplicate_4";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row34");
			  	}
			  	
 

ok_Hash.put("tReplicate_4", true);
end_Hash.put("tReplicate_4", System.currentTimeMillis());




/**
 * [tReplicate_4 end ] stop
 */

	
	/**
	 * [tOracleOutput_14 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_14";
	
	
	



	
        if(pstmt_tOracleOutput_14 != null) {
			
				pstmt_tOracleOutput_14.close();
				resourceMap.remove("pstmt_tOracleOutput_14");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_14", true);

	
	nb_line_deleted_tOracleOutput_14=nb_line_deleted_tOracleOutput_14+ deletedCount_tOracleOutput_14;
	nb_line_update_tOracleOutput_14=nb_line_update_tOracleOutput_14 + updatedCount_tOracleOutput_14;
	nb_line_inserted_tOracleOutput_14=nb_line_inserted_tOracleOutput_14 + insertedCount_tOracleOutput_14;
	nb_line_rejected_tOracleOutput_14=nb_line_rejected_tOracleOutput_14 + rejectedCount_tOracleOutput_14;
	
        globalMap.put("tOracleOutput_14_NB_LINE",nb_line_tOracleOutput_14);
        globalMap.put("tOracleOutput_14_NB_LINE_UPDATED",nb_line_update_tOracleOutput_14);
        globalMap.put("tOracleOutput_14_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_14);
        globalMap.put("tOracleOutput_14_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_14);
        globalMap.put("tOracleOutput_14_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_14);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row35");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_14", true);
end_Hash.put("tOracleOutput_14", System.currentTimeMillis());




/**
 * [tOracleOutput_14 end ] stop
 */












				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_7:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk22", 0, "ok");
								} 
							
							tOracleInput_6Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_7_AGGIN"
							globalMap.remove("tAggregateRow_7");
						
					     			//free memory for "tMap_7"
					     			globalMap.remove("tHash_Lookup_row26"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_7 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tAggregateRow_7_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGOUT";
	
	

 



/**
 * [tAggregateRow_7_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_7_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGIN";
	
	

 



/**
 * [tAggregateRow_7_AGGIN finally ] stop
 */

	
	/**
	 * [tJavaRow_5 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 finally ] stop
 */

	
	/**
	 * [tOracleOutput_13 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_13";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_13") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_13 = null;
                if ((pstmtToClose_tOracleOutput_13 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_13")) != null) {
                    pstmtToClose_tOracleOutput_13.close();
                }
    }
 



/**
 * [tOracleOutput_13 finally ] stop
 */













	
	/**
	 * [tJavaRow_7 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 finally ] stop
 */

	
	/**
	 * [tReplicate_4 finally ] start
	 */

	

	
	
	currentComponent="tReplicate_4";
	
	

 



/**
 * [tReplicate_4 finally ] stop
 */

	
	/**
	 * [tOracleOutput_14 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_14";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_14") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_14 = null;
                if ((pstmtToClose_tOracleOutput_14 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_14")) != null) {
                    pstmtToClose_tOracleOutput_14.close();
                }
    }
 



/**
 * [tOracleOutput_14 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class registrosCorrectosStruct implements routines.system.IPersistableRow<registrosCorrectosStruct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public BigDecimal Acuerdos_Id;

				public BigDecimal getAcuerdos_Id () {
					return this.Acuerdos_Id;
				}

				public Boolean Acuerdos_IdIsNullable(){
				    return true;
				}
				public Boolean Acuerdos_IdIsKey(){
				    return false;
				}
				public Integer Acuerdos_IdLength(){
				    return null;
				}
				public Integer Acuerdos_IdPrecision(){
				    return null;
				}
				public String Acuerdos_IdDefault(){
				
					return null;
				
				}
				public String Acuerdos_IdComment(){
				
				    return "";
				
				}
				public String Acuerdos_IdPattern(){
				
					return "";
				
				}
				public String Acuerdos_IdOriginalDbColumnName(){
				
					return "Acuerdos_Id";
				
				}

				
			    public Long FFarmaceuticas_Ids_;

				public Long getFFarmaceuticas_Ids_ () {
					return this.FFarmaceuticas_Ids_;
				}

				public Boolean FFarmaceuticas_Ids_IsNullable(){
				    return true;
				}
				public Boolean FFarmaceuticas_Ids_IsKey(){
				    return false;
				}
				public Integer FFarmaceuticas_Ids_Length(){
				    return null;
				}
				public Integer FFarmaceuticas_Ids_Precision(){
				    return null;
				}
				public String FFarmaceuticas_Ids_Default(){
				
					return null;
				
				}
				public String FFarmaceuticas_Ids_Comment(){
				
				    return "";
				
				}
				public String FFarmaceuticas_Ids_Pattern(){
				
					return "";
				
				}
				public String FFarmaceuticas_Ids_OriginalDbColumnName(){
				
					return "FFarmaceuticas_Ids_";
				
				}

				
			    public String Cod_Ssmp_;

				public String getCod_Ssmp_ () {
					return this.Cod_Ssmp_;
				}

				public Boolean Cod_Ssmp_IsNullable(){
				    return true;
				}
				public Boolean Cod_Ssmp_IsKey(){
				    return false;
				}
				public Integer Cod_Ssmp_Length(){
				    return 15;
				}
				public Integer Cod_Ssmp_Precision(){
				    return 0;
				}
				public String Cod_Ssmp_Default(){
				
					return null;
				
				}
				public String Cod_Ssmp_Comment(){
				
				    return "CODIGO SSMP";
				
				}
				public String Cod_Ssmp_Pattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String Cod_Ssmp_OriginalDbColumnName(){
				
					return "Cod_Ssmp_";
				
				}

				
			    public Long NivelesUso_Ids_;

				public Long getNivelesUso_Ids_ () {
					return this.NivelesUso_Ids_;
				}

				public Boolean NivelesUso_Ids_IsNullable(){
				    return true;
				}
				public Boolean NivelesUso_Ids_IsKey(){
				    return false;
				}
				public Integer NivelesUso_Ids_Length(){
				    return null;
				}
				public Integer NivelesUso_Ids_Precision(){
				    return null;
				}
				public String NivelesUso_Ids_Default(){
				
					return null;
				
				}
				public String NivelesUso_Ids_Comment(){
				
				    return "";
				
				}
				public String NivelesUso_Ids_Pattern(){
				
					return "";
				
				}
				public String NivelesUso_Ids_OriginalDbColumnName(){
				
					return "NivelesUso_Ids_";
				
				}

				
			    public Long Especialidad_Id_;

				public Long getEspecialidad_Id_ () {
					return this.Especialidad_Id_;
				}

				public Boolean Especialidad_Id_IsNullable(){
				    return true;
				}
				public Boolean Especialidad_Id_IsKey(){
				    return false;
				}
				public Integer Especialidad_Id_Length(){
				    return null;
				}
				public Integer Especialidad_Id_Precision(){
				    return null;
				}
				public String Especialidad_Id_Default(){
				
					return null;
				
				}
				public String Especialidad_Id_Comment(){
				
				    return "";
				
				}
				public String Especialidad_Id_Pattern(){
				
					return "";
				
				}
				public String Especialidad_Id_OriginalDbColumnName(){
				
					return "Especialidad_Id_";
				
				}

				
			    public Long NAtencion_Id_;

				public Long getNAtencion_Id_ () {
					return this.NAtencion_Id_;
				}

				public Boolean NAtencion_Id_IsNullable(){
				    return true;
				}
				public Boolean NAtencion_Id_IsKey(){
				    return false;
				}
				public Integer NAtencion_Id_Length(){
				    return null;
				}
				public Integer NAtencion_Id_Precision(){
				    return null;
				}
				public String NAtencion_Id_Default(){
				
					return null;
				
				}
				public String NAtencion_Id_Comment(){
				
				    return "";
				
				}
				public String NAtencion_Id_Pattern(){
				
					return "";
				
				}
				public String NAtencion_Id_OriginalDbColumnName(){
				
					return "NAtencion_Id_";
				
				}

				
			    public String ObsNivelesUso_;

				public String getObsNivelesUso_ () {
					return this.ObsNivelesUso_;
				}

				public Boolean ObsNivelesUso_IsNullable(){
				    return true;
				}
				public Boolean ObsNivelesUso_IsKey(){
				    return false;
				}
				public Integer ObsNivelesUso_Length(){
				    return 500;
				}
				public Integer ObsNivelesUso_Precision(){
				    return 0;
				}
				public String ObsNivelesUso_Default(){
				
					return null;
				
				}
				public String ObsNivelesUso_Comment(){
				
				    return "OBSERVACION PARA EL NIVEL DE USO";
				
				}
				public String ObsNivelesUso_Pattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ObsNivelesUso_OriginalDbColumnName(){
				
					return "ObsNivelesUso_";
				
				}

				
			    public String Usado_;

				public String getUsado_ () {
					return this.Usado_;
				}

				public Boolean Usado_IsNullable(){
				    return true;
				}
				public Boolean Usado_IsKey(){
				    return false;
				}
				public Integer Usado_Length(){
				    return 2;
				}
				public Integer Usado_Precision(){
				    return 0;
				}
				public String Usado_Default(){
				
					return null;
				
				}
				public String Usado_Comment(){
				
				    return "USADO PARA PREPARACIONES";
				
				}
				public String Usado_Pattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String Usado_OriginalDbColumnName(){
				
					return "Usado_";
				
				}

				
			    public String Codigo_Unico_;

				public String getCodigo_Unico_ () {
					return this.Codigo_Unico_;
				}

				public Boolean Codigo_Unico_IsNullable(){
				    return true;
				}
				public Boolean Codigo_Unico_IsKey(){
				    return false;
				}
				public Integer Codigo_Unico_Length(){
				    return null;
				}
				public Integer Codigo_Unico_Precision(){
				    return null;
				}
				public String Codigo_Unico_Default(){
				
					return null;
				
				}
				public String Codigo_Unico_Comment(){
				
				    return "";
				
				}
				public String Codigo_Unico_Pattern(){
				
					return "";
				
				}
				public String Codigo_Unico_OriginalDbColumnName(){
				
					return "Codigo_Unico_";
				
				}

				
			    public Long Linea_;

				public Long getLinea_ () {
					return this.Linea_;
				}

				public Boolean Linea_IsNullable(){
				    return true;
				}
				public Boolean Linea_IsKey(){
				    return false;
				}
				public Integer Linea_Length(){
				    return null;
				}
				public Integer Linea_Precision(){
				    return null;
				}
				public String Linea_Default(){
				
					return null;
				
				}
				public String Linea_Comment(){
				
				    return "";
				
				}
				public String Linea_Pattern(){
				
					return "";
				
				}
				public String Linea_OriginalDbColumnName(){
				
					return "Linea_";
				
				}

				
			    public String Estado_;

				public String getEstado_ () {
					return this.Estado_;
				}

				public Boolean Estado_IsNullable(){
				    return true;
				}
				public Boolean Estado_IsKey(){
				    return false;
				}
				public Integer Estado_Length(){
				    return null;
				}
				public Integer Estado_Precision(){
				    return null;
				}
				public String Estado_Default(){
				
					return null;
				
				}
				public String Estado_Comment(){
				
				    return "";
				
				}
				public String Estado_Pattern(){
				
					return "";
				
				}
				public String Estado_OriginalDbColumnName(){
				
					return "Estado_";
				
				}

				
			    public String Respuesta_;

				public String getRespuesta_ () {
					return this.Respuesta_;
				}

				public Boolean Respuesta_IsNullable(){
				    return true;
				}
				public Boolean Respuesta_IsKey(){
				    return false;
				}
				public Integer Respuesta_Length(){
				    return null;
				}
				public Integer Respuesta_Precision(){
				    return null;
				}
				public String Respuesta_Default(){
				
					return null;
				
				}
				public String Respuesta_Comment(){
				
				    return "";
				
				}
				public String Respuesta_Pattern(){
				
					return "";
				
				}
				public String Respuesta_OriginalDbColumnName(){
				
					return "Respuesta_";
				
				}

				
			    public String Id_;

				public String getId_ () {
					return this.Id_;
				}

				public Boolean Id_IsNullable(){
				    return true;
				}
				public Boolean Id_IsKey(){
				    return false;
				}
				public Integer Id_Length(){
				    return null;
				}
				public Integer Id_Precision(){
				    return null;
				}
				public String Id_Default(){
				
					return null;
				
				}
				public String Id_Comment(){
				
				    return "";
				
				}
				public String Id_Pattern(){
				
					return "";
				
				}
				public String Id_OriginalDbColumnName(){
				
					return "Id_";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.Acuerdos_Id = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.FFarmaceuticas_Ids_ = null;
           				} else {
           			    	this.FFarmaceuticas_Ids_ = dis.readLong();
           				}
					
					this.Cod_Ssmp_ = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NivelesUso_Ids_ = null;
           				} else {
           			    	this.NivelesUso_Ids_ = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Especialidad_Id_ = null;
           				} else {
           			    	this.Especialidad_Id_ = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NAtencion_Id_ = null;
           				} else {
           			    	this.NAtencion_Id_ = dis.readLong();
           				}
					
					this.ObsNivelesUso_ = readString(dis);
					
					this.Usado_ = readString(dis);
					
					this.Codigo_Unico_ = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea_ = null;
           				} else {
           			    	this.Linea_ = dis.readLong();
           				}
					
					this.Estado_ = readString(dis);
					
					this.Respuesta_ = readString(dis);
					
					this.Id_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.Acuerdos_Id = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.FFarmaceuticas_Ids_ = null;
           				} else {
           			    	this.FFarmaceuticas_Ids_ = dis.readLong();
           				}
					
					this.Cod_Ssmp_ = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NivelesUso_Ids_ = null;
           				} else {
           			    	this.NivelesUso_Ids_ = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Especialidad_Id_ = null;
           				} else {
           			    	this.Especialidad_Id_ = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NAtencion_Id_ = null;
           				} else {
           			    	this.NAtencion_Id_ = dis.readLong();
           				}
					
					this.ObsNivelesUso_ = readString(dis);
					
					this.Usado_ = readString(dis);
					
					this.Codigo_Unico_ = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Linea_ = null;
           				} else {
           			    	this.Linea_ = dis.readLong();
           				}
					
					this.Estado_ = readString(dis);
					
					this.Respuesta_ = readString(dis);
					
					this.Id_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.Acuerdos_Id);
					
					// Long
				
						if(this.FFarmaceuticas_Ids_ == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.FFarmaceuticas_Ids_);
		            	}
					
					// String
				
						writeString(this.Cod_Ssmp_,dos);
					
					// Long
				
						if(this.NivelesUso_Ids_ == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.NivelesUso_Ids_);
		            	}
					
					// Long
				
						if(this.Especialidad_Id_ == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Especialidad_Id_);
		            	}
					
					// Long
				
						if(this.NAtencion_Id_ == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.NAtencion_Id_);
		            	}
					
					// String
				
						writeString(this.ObsNivelesUso_,dos);
					
					// String
				
						writeString(this.Usado_,dos);
					
					// String
				
						writeString(this.Codigo_Unico_,dos);
					
					// Long
				
						if(this.Linea_ == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea_);
		            	}
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this.Respuesta_,dos);
					
					// String
				
						writeString(this.Id_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Acuerdos_Id);
					
					// Long
				
						if(this.FFarmaceuticas_Ids_ == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.FFarmaceuticas_Ids_);
		            	}
					
					// String
				
						writeString(this.Cod_Ssmp_,dos);
					
					// Long
				
						if(this.NivelesUso_Ids_ == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.NivelesUso_Ids_);
		            	}
					
					// Long
				
						if(this.Especialidad_Id_ == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Especialidad_Id_);
		            	}
					
					// Long
				
						if(this.NAtencion_Id_ == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.NAtencion_Id_);
		            	}
					
					// String
				
						writeString(this.ObsNivelesUso_,dos);
					
					// String
				
						writeString(this.Usado_,dos);
					
					// String
				
						writeString(this.Codigo_Unico_,dos);
					
					// Long
				
						if(this.Linea_ == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Linea_);
		            	}
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this.Respuesta_,dos);
					
					// String
				
						writeString(this.Id_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Acuerdos_Id="+String.valueOf(Acuerdos_Id));
		sb.append(",FFarmaceuticas_Ids_="+String.valueOf(FFarmaceuticas_Ids_));
		sb.append(",Cod_Ssmp_="+Cod_Ssmp_);
		sb.append(",NivelesUso_Ids_="+String.valueOf(NivelesUso_Ids_));
		sb.append(",Especialidad_Id_="+String.valueOf(Especialidad_Id_));
		sb.append(",NAtencion_Id_="+String.valueOf(NAtencion_Id_));
		sb.append(",ObsNivelesUso_="+ObsNivelesUso_);
		sb.append(",Usado_="+Usado_);
		sb.append(",Codigo_Unico_="+Codigo_Unico_);
		sb.append(",Linea_="+String.valueOf(Linea_));
		sb.append(",Estado_="+Estado_);
		sb.append(",Respuesta_="+Respuesta_);
		sb.append(",Id_="+Id_);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(registrosCorrectosStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String CodSsmp;

				public String getCodSsmp () {
					return this.CodSsmp;
				}

				public Boolean CodSsmpIsNullable(){
				    return true;
				}
				public Boolean CodSsmpIsKey(){
				    return false;
				}
				public Integer CodSsmpLength(){
				    return 15;
				}
				public Integer CodSsmpPrecision(){
				    return 0;
				}
				public String CodSsmpDefault(){
				
					return null;
				
				}
				public String CodSsmpComment(){
				
				    return "CODIGO SSMP";
				
				}
				public String CodSsmpPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CodSsmpOriginalDbColumnName(){
				
					return "CodSsmp";
				
				}

				
			    public String NGenerico;

				public String getNGenerico () {
					return this.NGenerico;
				}

				public Boolean NGenericoIsNullable(){
				    return true;
				}
				public Boolean NGenericoIsKey(){
				    return false;
				}
				public Integer NGenericoLength(){
				    return 200;
				}
				public Integer NGenericoPrecision(){
				    return 0;
				}
				public String NGenericoDefault(){
				
					return null;
				
				}
				public String NGenericoComment(){
				
				    return "NOMBRE GENERICO";
				
				}
				public String NGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NGenericoOriginalDbColumnName(){
				
					return "NGenerico";
				
				}

				
			    public String Concentracion;

				public String getConcentracion () {
					return this.Concentracion;
				}

				public Boolean ConcentracionIsNullable(){
				    return true;
				}
				public Boolean ConcentracionIsKey(){
				    return false;
				}
				public Integer ConcentracionLength(){
				    return 50;
				}
				public Integer ConcentracionPrecision(){
				    return 0;
				}
				public String ConcentracionDefault(){
				
					return null;
				
				}
				public String ConcentracionComment(){
				
				    return "CONCENTRACION";
				
				}
				public String ConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ConcentracionOriginalDbColumnName(){
				
					return "Concentracion";
				
				}

				
			    public String FFarmaceutica;

				public String getFFarmaceutica () {
					return this.FFarmaceutica;
				}

				public Boolean FFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean FFarmaceuticaIsKey(){
				    return false;
				}
				public Integer FFarmaceuticaLength(){
				    return 500;
				}
				public Integer FFarmaceuticaPrecision(){
				    return 0;
				}
				public String FFarmaceuticaDefault(){
				
					return null;
				
				}
				public String FFarmaceuticaComment(){
				
				    return "FORMA FARMACEUTICA";
				
				}
				public String FFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FFarmaceuticaOriginalDbColumnName(){
				
					return "FFarmaceutica";
				
				}

				
			    public String ViaAdmin;

				public String getViaAdmin () {
					return this.ViaAdmin;
				}

				public Boolean ViaAdminIsNullable(){
				    return true;
				}
				public Boolean ViaAdminIsKey(){
				    return false;
				}
				public Integer ViaAdminLength(){
				    return 200;
				}
				public Integer ViaAdminPrecision(){
				    return 0;
				}
				public String ViaAdminDefault(){
				
					return null;
				
				}
				public String ViaAdminComment(){
				
				    return "VIA ADMINISTRACION";
				
				}
				public String ViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ViaAdminOriginalDbColumnName(){
				
					return "ViaAdmin";
				
				}

				
			    public String NUso;

				public String getNUso () {
					return this.NUso;
				}

				public Boolean NUsoIsNullable(){
				    return true;
				}
				public Boolean NUsoIsKey(){
				    return false;
				}
				public Integer NUsoLength(){
				    return 50;
				}
				public Integer NUsoPrecision(){
				    return 0;
				}
				public String NUsoDefault(){
				
					return null;
				
				}
				public String NUsoComment(){
				
				    return "NIVEL USO";
				
				}
				public String NUsoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NUsoOriginalDbColumnName(){
				
					return "NUso";
				
				}

				
			    public String NAtencion;

				public String getNAtencion () {
					return this.NAtencion;
				}

				public Boolean NAtencionIsNullable(){
				    return true;
				}
				public Boolean NAtencionIsKey(){
				    return false;
				}
				public Integer NAtencionLength(){
				    return 50;
				}
				public Integer NAtencionPrecision(){
				    return 0;
				}
				public String NAtencionDefault(){
				
					return null;
				
				}
				public String NAtencionComment(){
				
				    return "NIVEL ATENCION";
				
				}
				public String NAtencionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NAtencionOriginalDbColumnName(){
				
					return "NAtencion";
				
				}

				
			    public String ObsNUso;

				public String getObsNUso () {
					return this.ObsNUso;
				}

				public Boolean ObsNUsoIsNullable(){
				    return true;
				}
				public Boolean ObsNUsoIsKey(){
				    return false;
				}
				public Integer ObsNUsoLength(){
				    return 500;
				}
				public Integer ObsNUsoPrecision(){
				    return 0;
				}
				public String ObsNUsoDefault(){
				
					return null;
				
				}
				public String ObsNUsoComment(){
				
				    return "OBSERVACION PARA EL NIVEL DE USO";
				
				}
				public String ObsNUsoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ObsNUsoOriginalDbColumnName(){
				
					return "ObsNUso";
				
				}

				
			    public String UsadoPre;

				public String getUsadoPre () {
					return this.UsadoPre;
				}

				public Boolean UsadoPreIsNullable(){
				    return true;
				}
				public Boolean UsadoPreIsKey(){
				    return false;
				}
				public Integer UsadoPreLength(){
				    return 2;
				}
				public Integer UsadoPrePrecision(){
				    return 0;
				}
				public String UsadoPreDefault(){
				
					return null;
				
				}
				public String UsadoPreComment(){
				
				    return "USADO PARA PREPARACIONES";
				
				}
				public String UsadoPrePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UsadoPreOriginalDbColumnName(){
				
					return "UsadoPre";
				
				}

				
			    public String CodigoUnico;

				public String getCodigoUnico () {
					return this.CodigoUnico;
				}

				public Boolean CodigoUnicoIsNullable(){
				    return true;
				}
				public Boolean CodigoUnicoIsKey(){
				    return false;
				}
				public Integer CodigoUnicoLength(){
				    return 150;
				}
				public Integer CodigoUnicoPrecision(){
				    return 0;
				}
				public String CodigoUnicoDefault(){
				
					return null;
				
				}
				public String CodigoUnicoComment(){
				
				    return "CODIGO UNICO";
				
				}
				public String CodigoUnicoPattern(){
				
					return "";
				
				}
				public String CodigoUnicoOriginalDbColumnName(){
				
					return "CodigoUnico";
				
				}

				
			    public String EspecialidadMedica;

				public String getEspecialidadMedica () {
					return this.EspecialidadMedica;
				}

				public Boolean EspecialidadMedicaIsNullable(){
				    return true;
				}
				public Boolean EspecialidadMedicaIsKey(){
				    return false;
				}
				public Integer EspecialidadMedicaLength(){
				    return 150;
				}
				public Integer EspecialidadMedicaPrecision(){
				    return 0;
				}
				public String EspecialidadMedicaDefault(){
				
					return null;
				
				}
				public String EspecialidadMedicaComment(){
				
				    return "ESPECIALIDAD MEDICA";
				
				}
				public String EspecialidadMedicaPattern(){
				
					return "";
				
				}
				public String EspecialidadMedicaOriginalDbColumnName(){
				
					return "EspecialidadMedica";
				
				}

				
			    public String nuevoNuso;

				public String getNuevoNuso () {
					return this.nuevoNuso;
				}

				public Boolean nuevoNusoIsNullable(){
				    return true;
				}
				public Boolean nuevoNusoIsKey(){
				    return false;
				}
				public Integer nuevoNusoLength(){
				    return 20;
				}
				public Integer nuevoNusoPrecision(){
				    return null;
				}
				public String nuevoNusoDefault(){
				
					return null;
				
				}
				public String nuevoNusoComment(){
				
				    return "";
				
				}
				public String nuevoNusoPattern(){
				
					return "";
				
				}
				public String nuevoNusoOriginalDbColumnName(){
				
					return "nuevoNuso";
				
				}

				
			    public String nuevaEspecialidad;

				public String getNuevaEspecialidad () {
					return this.nuevaEspecialidad;
				}

				public Boolean nuevaEspecialidadIsNullable(){
				    return true;
				}
				public Boolean nuevaEspecialidadIsKey(){
				    return false;
				}
				public Integer nuevaEspecialidadLength(){
				    return 150;
				}
				public Integer nuevaEspecialidadPrecision(){
				    return null;
				}
				public String nuevaEspecialidadDefault(){
				
					return null;
				
				}
				public String nuevaEspecialidadComment(){
				
				    return "";
				
				}
				public String nuevaEspecialidadPattern(){
				
					return "";
				
				}
				public String nuevaEspecialidadOriginalDbColumnName(){
				
					return "nuevaEspecialidad";
				
				}

				
			    public String nuevaAdmin;

				public String getNuevaAdmin () {
					return this.nuevaAdmin;
				}

				public Boolean nuevaAdminIsNullable(){
				    return true;
				}
				public Boolean nuevaAdminIsKey(){
				    return false;
				}
				public Integer nuevaAdminLength(){
				    return 100;
				}
				public Integer nuevaAdminPrecision(){
				    return null;
				}
				public String nuevaAdminDefault(){
				
					return null;
				
				}
				public String nuevaAdminComment(){
				
				    return "";
				
				}
				public String nuevaAdminPattern(){
				
					return "";
				
				}
				public String nuevaAdminOriginalDbColumnName(){
				
					return "nuevaAdmin";
				
				}

				
			    public String nuevaForma;

				public String getNuevaForma () {
					return this.nuevaForma;
				}

				public Boolean nuevaFormaIsNullable(){
				    return true;
				}
				public Boolean nuevaFormaIsKey(){
				    return false;
				}
				public Integer nuevaFormaLength(){
				    return 200;
				}
				public Integer nuevaFormaPrecision(){
				    return null;
				}
				public String nuevaFormaDefault(){
				
					return null;
				
				}
				public String nuevaFormaComment(){
				
				    return "";
				
				}
				public String nuevaFormaPattern(){
				
					return "";
				
				}
				public String nuevaFormaOriginalDbColumnName(){
				
					return "nuevaForma";
				
				}

				
			    public Long linea;

				public Long getLinea () {
					return this.linea;
				}

				public Boolean lineaIsNullable(){
				    return true;
				}
				public Boolean lineaIsKey(){
				    return false;
				}
				public Integer lineaLength(){
				    return null;
				}
				public Integer lineaPrecision(){
				    return null;
				}
				public String lineaDefault(){
				
					return "";
				
				}
				public String lineaComment(){
				
				    return "";
				
				}
				public String lineaPattern(){
				
					return "";
				
				}
				public String lineaOriginalDbColumnName(){
				
					return "linea";
				
				}

				
			    public Long NivelUsoId;

				public Long getNivelUsoId () {
					return this.NivelUsoId;
				}

				public Boolean NivelUsoIdIsNullable(){
				    return true;
				}
				public Boolean NivelUsoIdIsKey(){
				    return false;
				}
				public Integer NivelUsoIdLength(){
				    return null;
				}
				public Integer NivelUsoIdPrecision(){
				    return null;
				}
				public String NivelUsoIdDefault(){
				
					return null;
				
				}
				public String NivelUsoIdComment(){
				
				    return "";
				
				}
				public String NivelUsoIdPattern(){
				
					return "";
				
				}
				public String NivelUsoIdOriginalDbColumnName(){
				
					return "NivelUsoId";
				
				}

				
			    public Long EspecialidadId;

				public Long getEspecialidadId () {
					return this.EspecialidadId;
				}

				public Boolean EspecialidadIdIsNullable(){
				    return true;
				}
				public Boolean EspecialidadIdIsKey(){
				    return false;
				}
				public Integer EspecialidadIdLength(){
				    return null;
				}
				public Integer EspecialidadIdPrecision(){
				    return null;
				}
				public String EspecialidadIdDefault(){
				
					return null;
				
				}
				public String EspecialidadIdComment(){
				
				    return "";
				
				}
				public String EspecialidadIdPattern(){
				
					return "";
				
				}
				public String EspecialidadIdOriginalDbColumnName(){
				
					return "EspecialidadId";
				
				}

				
			    public Long ViaAdminId;

				public Long getViaAdminId () {
					return this.ViaAdminId;
				}

				public Boolean ViaAdminIdIsNullable(){
				    return true;
				}
				public Boolean ViaAdminIdIsKey(){
				    return false;
				}
				public Integer ViaAdminIdLength(){
				    return null;
				}
				public Integer ViaAdminIdPrecision(){
				    return null;
				}
				public String ViaAdminIdDefault(){
				
					return null;
				
				}
				public String ViaAdminIdComment(){
				
				    return "";
				
				}
				public String ViaAdminIdPattern(){
				
					return "";
				
				}
				public String ViaAdminIdOriginalDbColumnName(){
				
					return "ViaAdminId";
				
				}

				
			    public Long FormaId;

				public Long getFormaId () {
					return this.FormaId;
				}

				public Boolean FormaIdIsNullable(){
				    return true;
				}
				public Boolean FormaIdIsKey(){
				    return false;
				}
				public Integer FormaIdLength(){
				    return null;
				}
				public Integer FormaIdPrecision(){
				    return null;
				}
				public String FormaIdDefault(){
				
					return null;
				
				}
				public String FormaIdComment(){
				
				    return "";
				
				}
				public String FormaIdPattern(){
				
					return "";
				
				}
				public String FormaIdOriginalDbColumnName(){
				
					return "FormaId";
				
				}

				
			    public Long NAtencionId;

				public Long getNAtencionId () {
					return this.NAtencionId;
				}

				public Boolean NAtencionIdIsNullable(){
				    return true;
				}
				public Boolean NAtencionIdIsKey(){
				    return false;
				}
				public Integer NAtencionIdLength(){
				    return null;
				}
				public Integer NAtencionIdPrecision(){
				    return null;
				}
				public String NAtencionIdDefault(){
				
					return null;
				
				}
				public String NAtencionIdComment(){
				
				    return "";
				
				}
				public String NAtencionIdPattern(){
				
					return "";
				
				}
				public String NAtencionIdOriginalDbColumnName(){
				
					return "NAtencionId";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CodSsmp = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.FFarmaceutica = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.NUso = readString(dis);
					
					this.NAtencion = readString(dis);
					
					this.ObsNUso = readString(dis);
					
					this.UsadoPre = readString(dis);
					
					this.CodigoUnico = readString(dis);
					
					this.EspecialidadMedica = readString(dis);
					
					this.nuevoNuso = readString(dis);
					
					this.nuevaEspecialidad = readString(dis);
					
					this.nuevaAdmin = readString(dis);
					
					this.nuevaForma = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.linea = null;
           				} else {
           			    	this.linea = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NivelUsoId = null;
           				} else {
           			    	this.NivelUsoId = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.EspecialidadId = null;
           				} else {
           			    	this.EspecialidadId = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ViaAdminId = null;
           				} else {
           			    	this.ViaAdminId = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.FormaId = null;
           				} else {
           			    	this.FormaId = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NAtencionId = null;
           				} else {
           			    	this.NAtencionId = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CodSsmp = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.FFarmaceutica = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.NUso = readString(dis);
					
					this.NAtencion = readString(dis);
					
					this.ObsNUso = readString(dis);
					
					this.UsadoPre = readString(dis);
					
					this.CodigoUnico = readString(dis);
					
					this.EspecialidadMedica = readString(dis);
					
					this.nuevoNuso = readString(dis);
					
					this.nuevaEspecialidad = readString(dis);
					
					this.nuevaAdmin = readString(dis);
					
					this.nuevaForma = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.linea = null;
           				} else {
           			    	this.linea = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NivelUsoId = null;
           				} else {
           			    	this.NivelUsoId = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.EspecialidadId = null;
           				} else {
           			    	this.EspecialidadId = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ViaAdminId = null;
           				} else {
           			    	this.ViaAdminId = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.FormaId = null;
           				} else {
           			    	this.FormaId = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NAtencionId = null;
           				} else {
           			    	this.NAtencionId = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CodSsmp,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.FFarmaceutica,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.NUso,dos);
					
					// String
				
						writeString(this.NAtencion,dos);
					
					// String
				
						writeString(this.ObsNUso,dos);
					
					// String
				
						writeString(this.UsadoPre,dos);
					
					// String
				
						writeString(this.CodigoUnico,dos);
					
					// String
				
						writeString(this.EspecialidadMedica,dos);
					
					// String
				
						writeString(this.nuevoNuso,dos);
					
					// String
				
						writeString(this.nuevaEspecialidad,dos);
					
					// String
				
						writeString(this.nuevaAdmin,dos);
					
					// String
				
						writeString(this.nuevaForma,dos);
					
					// Long
				
						if(this.linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.linea);
		            	}
					
					// Long
				
						if(this.NivelUsoId == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.NivelUsoId);
		            	}
					
					// Long
				
						if(this.EspecialidadId == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.EspecialidadId);
		            	}
					
					// Long
				
						if(this.ViaAdminId == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.ViaAdminId);
		            	}
					
					// Long
				
						if(this.FormaId == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.FormaId);
		            	}
					
					// Long
				
						if(this.NAtencionId == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.NAtencionId);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CodSsmp,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.FFarmaceutica,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.NUso,dos);
					
					// String
				
						writeString(this.NAtencion,dos);
					
					// String
				
						writeString(this.ObsNUso,dos);
					
					// String
				
						writeString(this.UsadoPre,dos);
					
					// String
				
						writeString(this.CodigoUnico,dos);
					
					// String
				
						writeString(this.EspecialidadMedica,dos);
					
					// String
				
						writeString(this.nuevoNuso,dos);
					
					// String
				
						writeString(this.nuevaEspecialidad,dos);
					
					// String
				
						writeString(this.nuevaAdmin,dos);
					
					// String
				
						writeString(this.nuevaForma,dos);
					
					// Long
				
						if(this.linea == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.linea);
		            	}
					
					// Long
				
						if(this.NivelUsoId == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.NivelUsoId);
		            	}
					
					// Long
				
						if(this.EspecialidadId == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.EspecialidadId);
		            	}
					
					// Long
				
						if(this.ViaAdminId == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.ViaAdminId);
		            	}
					
					// Long
				
						if(this.FormaId == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.FormaId);
		            	}
					
					// Long
				
						if(this.NAtencionId == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.NAtencionId);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CodSsmp="+CodSsmp);
		sb.append(",NGenerico="+NGenerico);
		sb.append(",Concentracion="+Concentracion);
		sb.append(",FFarmaceutica="+FFarmaceutica);
		sb.append(",ViaAdmin="+ViaAdmin);
		sb.append(",NUso="+NUso);
		sb.append(",NAtencion="+NAtencion);
		sb.append(",ObsNUso="+ObsNUso);
		sb.append(",UsadoPre="+UsadoPre);
		sb.append(",CodigoUnico="+CodigoUnico);
		sb.append(",EspecialidadMedica="+EspecialidadMedica);
		sb.append(",nuevoNuso="+nuevoNuso);
		sb.append(",nuevaEspecialidad="+nuevaEspecialidad);
		sb.append(",nuevaAdmin="+nuevaAdmin);
		sb.append(",nuevaForma="+nuevaForma);
		sb.append(",linea="+String.valueOf(linea));
		sb.append(",NivelUsoId="+String.valueOf(NivelUsoId));
		sb.append(",EspecialidadId="+String.valueOf(EspecialidadId));
		sb.append(",ViaAdminId="+String.valueOf(ViaAdminId));
		sb.append(",FormaId="+String.valueOf(FormaId));
		sb.append(",NAtencionId="+String.valueOf(NAtencionId));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row10Struct row10 = new row10Struct();
registrosCorrectosStruct registrosCorrectos = new registrosCorrectosStruct();





	
	/**
	 * [tOracleSP_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_3", false);
		start_Hash.put("tOracleSP_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"registrosCorrectos");
					}
				
		int tos_count_tOracleSP_3 = 0;
		

	java.sql.Connection connection_tOracleSP_3 = null;
	connection_tOracleSP_3 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_2");
	

java.sql.CallableStatement statement_tOracleSP_3 = connection_tOracleSP_3.prepareCall("{call " + "MED.InsMedAcuerdoCM" + "(?,?,?,?,?,?,?,?,?,?,?,?,?)}");

java.sql.Timestamp tmpDate_tOracleSP_3;
String tmpString_tOracleSP_3;

 



/**
 * [tOracleSP_3 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
registrosCorrectosStruct registrosCorrectos_tmp = new registrosCorrectosStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tOracleInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_6", false);
		start_Hash.put("tOracleInput_6", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_6";
	
	
		int tos_count_tOracleInput_6 = 0;
		
	


	
		    int nb_line_tOracleInput_6 = 0;
		    java.sql.Connection conn_tOracleInput_6 = null;
				conn_tOracleInput_6 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_6 = false;
				boolean isConnectionWrapped_tOracleInput_6 = !(conn_tOracleInput_6 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_6.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_6 = null;
                if (isConnectionWrapped_tOracleInput_6) {
					unwrappedOraConn_tOracleInput_6 = conn_tOracleInput_6.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_6 != null) {
                        isTimeZoneNull_tOracleInput_6 = (unwrappedOraConn_tOracleInput_6.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_6 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_6).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_6) {
					java.sql.Statement stmtGetTZ_tOracleInput_6 = conn_tOracleInput_6.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_6 = stmtGetTZ_tOracleInput_6.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_6 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_6.next()) {
						sessionTimezone_tOracleInput_6 = rsGetTZ_tOracleInput_6.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_6 && unwrappedOraConn_tOracleInput_6 != null) {
                        unwrappedOraConn_tOracleInput_6.setSessionTimeZone(sessionTimezone_tOracleInput_6);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_6).setSessionTimeZone(sessionTimezone_tOracleInput_6);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_6 = conn_tOracleInput_6.createStatement();

		    String dbquery_tOracleInput_6 = "SELECT  \na.CodSsmp,\na.NGenerico,\na.Concentracion,\na.FFarmaceutica,\na.ViaAdmin,\na.NUso,\na.NAtencion,\na.ObsNUso,"
+"\na.UsadoPre,\na.CodigoUnico,\na.EspecialidadMedica,\nb.SIGLA_USO AS nuevoNuso,\nc.SIGLA_ESPECIALIDAD AS nuevaEspecialida"
+"d, \nd.SIGLA_ADMIN as nuevaAdmin, \ne.SIGLA_FORMA AS nuevaForma,\na.linea,\n(SELECT ID FROM MED_TNIVELESUSO WHERE SIGLA "
+"= b.SIGLA_USO AND ESTREGISTRO_ID = 1) AS NivelUsoId,\n(SELECT ID FROM GEN_ESPECIALIDADES WHERE SIGLA = c.SIGLA_ESPECIALI"
+"DAD AND ESTREGISTRO_ID = 1) AS EspecialidadId,\n(SELECT ID FROM MED_TVIADMIN WHERE SIGLA = d.SIGLA_ADMIN AND ESTREGISTRO"
+"_ID = 1) AS ViaAdminId,\n--(SELECT ID FROM MED_TFORMASFARMACEUTICAS WHERE MED.MayusculasSinAcentos(NOMBRE) = e.SIGLA_FOR"
+"MA AND ESTREGISTRO_ID = 1) AS TformaId,\nfm.FORMAID AS FormaId,\n(SELECT ID FROM MED_NATENCION WHERE NOMBRE = a.NAtencio"
+"n AND ESTREGISTRO_ID = 1)  AS NAtencionId\nFROM MED_NUSOREGISTRO_TEMP a \nINNER JOIN MED_SIGLA_USO_TEMP b on b.CODIGO_UN"
+"ICO = a.codigounico\nINNER JOIN MED_SIGLA_ESPECIALIDAD_TEMP c on c.CODIGO_UNICO = a.codigounico\nINNER JOIN MED_SIGLA_AD"
+"MIN_TEMP d on d.CODIGO_UNICO = a.codigounico\nINNER JOIN MED_SIGLA_FORMA_TEMP e on e.CODIGO_UNICO = a.codigounico\nINNER"
+" JOIN (SELECT DISTINCT FORMAID,CODIGO_UNICO,LINEA FROM FORMAFARMACEUTICA_TEMP) fm on a.codigounico = fm.CODIGO_UNICO AND"
+" a.LINEA = fm.LINEA\nWHERE (NGENERICO, CONCENTRACION,FFarmaceutica,ViaAdmin) NOT IN (\n    SELECT  NGENERICO, CONCENTRAC"
+"ION,FFarmaceutica,ViaAdmin\n    FROM MED_NUSOREGISTRO_TEMP\n    GROUP BY  NGENERICO, CONCENTRACION,FFarmaceutica,ViaAdmi"
+"n\n    HAVING COUNT(*) > 1)\n    AND (a.linea) NOT IN (\nSELECT TRIM(REPLACE(' ' || Linea || ' ', ' Linea: ', ' ')) AS n"
+"ueva_columna\nFROM ERRORLOG_TEMP)  ";
		    

		    globalMap.put("tOracleInput_6_QUERY",dbquery_tOracleInput_6);

		    java.sql.ResultSet rs_tOracleInput_6 = null;

		    try {
		    	rs_tOracleInput_6 = stmt_tOracleInput_6.executeQuery(dbquery_tOracleInput_6);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_6 = rs_tOracleInput_6.getMetaData();
		    	int colQtyInRs_tOracleInput_6 = rsmd_tOracleInput_6.getColumnCount();

		    String tmpContent_tOracleInput_6 = null;
		    
		    
		    while (rs_tOracleInput_6.next()) {
		        nb_line_tOracleInput_6++;
		        
							if(colQtyInRs_tOracleInput_6 < 1) {
								row10.CodSsmp = null;
							} else {
	                         		
        	row10.CodSsmp = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 2) {
								row10.NGenerico = null;
							} else {
	                         		
        	row10.NGenerico = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 3) {
								row10.Concentracion = null;
							} else {
	                         		
        	row10.Concentracion = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 4) {
								row10.FFarmaceutica = null;
							} else {
	                         		
        	row10.FFarmaceutica = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 5) {
								row10.ViaAdmin = null;
							} else {
	                         		
        	row10.ViaAdmin = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 6) {
								row10.NUso = null;
							} else {
	                         		
        	row10.NUso = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 7) {
								row10.NAtencion = null;
							} else {
	                         		
        	row10.NAtencion = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 8) {
								row10.ObsNUso = null;
							} else {
	                         		
        	row10.ObsNUso = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 9) {
								row10.UsadoPre = null;
							} else {
	                         		
        	row10.UsadoPre = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 9, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 10) {
								row10.CodigoUnico = null;
							} else {
	                         		
        	row10.CodigoUnico = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 10, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 11) {
								row10.EspecialidadMedica = null;
							} else {
	                         		
        	row10.EspecialidadMedica = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 11, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 12) {
								row10.nuevoNuso = null;
							} else {
	                         		
        	row10.nuevoNuso = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 12, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 13) {
								row10.nuevaEspecialidad = null;
							} else {
	                         		
        	row10.nuevaEspecialidad = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 13, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 14) {
								row10.nuevaAdmin = null;
							} else {
	                         		
        	row10.nuevaAdmin = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 14, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 15) {
								row10.nuevaForma = null;
							} else {
	                         		
        	row10.nuevaForma = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 15, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 16) {
								row10.linea = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(16) != null) {
						row10.linea = rs_tOracleInput_6.getLong(16);
					} else {
				
						row10.linea = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 17) {
								row10.NivelUsoId = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(17) != null) {
						row10.NivelUsoId = rs_tOracleInput_6.getLong(17);
					} else {
				
						row10.NivelUsoId = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 18) {
								row10.EspecialidadId = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(18) != null) {
						row10.EspecialidadId = rs_tOracleInput_6.getLong(18);
					} else {
				
						row10.EspecialidadId = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 19) {
								row10.ViaAdminId = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(19) != null) {
						row10.ViaAdminId = rs_tOracleInput_6.getLong(19);
					} else {
				
						row10.ViaAdminId = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 20) {
								row10.FormaId = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(20) != null) {
						row10.FormaId = rs_tOracleInput_6.getLong(20);
					} else {
				
						row10.FormaId = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 21) {
								row10.NAtencionId = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(21) != null) {
						row10.NAtencionId = rs_tOracleInput_6.getLong(21);
					} else {
				
						row10.NAtencionId = null;
					}
		                    }
					




 



/**
 * [tOracleInput_6 begin ] stop
 */
	
	/**
	 * [tOracleInput_6 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 


	tos_count_tOracleInput_6++;

/**
 * [tOracleInput_6 main ] stop
 */
	
	/**
	 * [tOracleInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

registrosCorrectos = null;


// # Output table : 'registrosCorrectos'
registrosCorrectos_tmp.Acuerdos_Id = context.acuerdo_id;
registrosCorrectos_tmp.FFarmaceuticas_Ids_ = row10.FormaId ;
registrosCorrectos_tmp.Cod_Ssmp_ = row10.CodSsmp ;
registrosCorrectos_tmp.NivelesUso_Ids_ = row10.NivelUsoId ;
registrosCorrectos_tmp.Especialidad_Id_ = row10.EspecialidadId ;
registrosCorrectos_tmp.NAtencion_Id_ = row10.NAtencionId ;
registrosCorrectos_tmp.ObsNivelesUso_ = row10.ObsNUso ;
registrosCorrectos_tmp.Usado_ = row10.UsadoPre ;
registrosCorrectos_tmp.Codigo_Unico_ = row10.CodigoUnico ;
registrosCorrectos_tmp.Linea_ = row10.linea ;
registrosCorrectos_tmp.Estado_ = null;
registrosCorrectos_tmp.Respuesta_ = null;
registrosCorrectos_tmp.Id_ = null;
registrosCorrectos = registrosCorrectos_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "registrosCorrectos"
if(registrosCorrectos != null) { 



	
	/**
	 * [tOracleSP_3 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"registrosCorrectos"
						
						);
					}
					

			// code for the argument 1 (Acuerdos_Id) of type 'IN CLOB'
    					if (registrosCorrectos.Acuerdos_Id == null) {
    						statement_tOracleSP_3.setNull(1, java.sql.Types.OTHER);
    					} else {
    					
                        statement_tOracleSP_3.setBigDecimal(1, registrosCorrectos.Acuerdos_Id);
    					}
    					
			// code for the argument 2 (FFarmaceuticas_Ids_) of type 'IN CLOB'
    					if (registrosCorrectos.FFarmaceuticas_Ids_ == null) {
    						statement_tOracleSP_3.setNull(2, java.sql.Types.BIGINT);
    					} else {
    					
                        statement_tOracleSP_3.setLong(2, registrosCorrectos.FFarmaceuticas_Ids_);
    					}
    					
			// code for the argument 3 (Cod_Ssmp_) of type 'IN CLOB'
    					if (registrosCorrectos.Cod_Ssmp_ == null) {
    						statement_tOracleSP_3.setNull(3, java.sql.Types.VARCHAR);
    					} else {
    					
                        java.sql.Clob clob_tOracleSP_3 = connection_tOracleSP_3.createClob();
                        clob_tOracleSP_3.setString(1, registrosCorrectos.Cod_Ssmp_);
                        statement_tOracleSP_3.setClob(3, clob_tOracleSP_3);
    					}
    					
			// code for the argument 4 (NivelesUso_Ids_) of type 'IN CLOB'
    					if (registrosCorrectos.NivelesUso_Ids_ == null) {
    						statement_tOracleSP_3.setNull(4, java.sql.Types.BIGINT);
    					} else {
    					
                        statement_tOracleSP_3.setLong(4, registrosCorrectos.NivelesUso_Ids_);
    					}
    					
			// code for the argument 5 (Especialidad_Id_) of type 'IN CLOB'
    					if (registrosCorrectos.Especialidad_Id_ == null) {
    						statement_tOracleSP_3.setNull(5, java.sql.Types.BIGINT);
    					} else {
    					
                        statement_tOracleSP_3.setLong(5, registrosCorrectos.Especialidad_Id_);
    					}
    					
			// code for the argument 6 (NAtencion_Id_) of type 'IN CLOB'
    					if (registrosCorrectos.NAtencion_Id_ == null) {
    						statement_tOracleSP_3.setNull(6, java.sql.Types.BIGINT);
    					} else {
    					
                        statement_tOracleSP_3.setLong(6, registrosCorrectos.NAtencion_Id_);
    					}
    					
			// code for the argument 7 (ObsNivelesUso_) of type 'IN CLOB'
    					if (registrosCorrectos.ObsNivelesUso_ == null) {
    						statement_tOracleSP_3.setNull(7, java.sql.Types.VARCHAR);
    					} else {
    					
                        java.sql.Clob clob_tOracleSP_3 = connection_tOracleSP_3.createClob();
                        clob_tOracleSP_3.setString(1, registrosCorrectos.ObsNivelesUso_);
                        statement_tOracleSP_3.setClob(7, clob_tOracleSP_3);
    					}
    					
			// code for the argument 8 (Usado_) of type 'IN CLOB'
    					if (registrosCorrectos.Usado_ == null) {
    						statement_tOracleSP_3.setNull(8, java.sql.Types.VARCHAR);
    					} else {
    					
                        java.sql.Clob clob_tOracleSP_3 = connection_tOracleSP_3.createClob();
                        clob_tOracleSP_3.setString(1, registrosCorrectos.Usado_);
                        statement_tOracleSP_3.setClob(8, clob_tOracleSP_3);
    					}
    					
			// code for the argument 9 (Codigo_Unico_) of type 'IN CLOB'
    					if (registrosCorrectos.Codigo_Unico_ == null) {
    						statement_tOracleSP_3.setNull(9, java.sql.Types.VARCHAR);
    					} else {
    					
                        java.sql.Clob clob_tOracleSP_3 = connection_tOracleSP_3.createClob();
                        clob_tOracleSP_3.setString(1, registrosCorrectos.Codigo_Unico_);
                        statement_tOracleSP_3.setClob(9, clob_tOracleSP_3);
    					}
    					
			// code for the argument 10 (Linea_) of type 'IN AUTOMAPPING'
    					if (registrosCorrectos.Linea_ == null) {
    						statement_tOracleSP_3.setNull(10, java.sql.Types.BIGINT);
    					} else {
    					
                        statement_tOracleSP_3.setLong(10, registrosCorrectos.Linea_);
    					}
    					
			// code for the argument 11 (Estado_) of type 'INOUT AUTOMAPPING'
    					if (registrosCorrectos.Estado_ == null) {
    						statement_tOracleSP_3.setNull(11, java.sql.Types.VARCHAR);
    					} else {
    					
                        statement_tOracleSP_3.setString(11, registrosCorrectos.Estado_);
    					}
    					
					statement_tOracleSP_3.registerOutParameter(11, java.sql.Types.VARCHAR);
			// code for the argument 12 (Respuesta_) of type 'OUT CLOB'
					statement_tOracleSP_3.registerOutParameter(12, java.sql.Types.CLOB);
			// code for the argument 13 (Id_) of type 'OUT NUMERIC'
					statement_tOracleSP_3.registerOutParameter(13, java.sql.Types.NUMERIC);
		statement_tOracleSP_3.execute();
		

 


	tos_count_tOracleSP_3++;

/**
 * [tOracleSP_3 main ] stop
 */
	
	/**
	 * [tOracleSP_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_3";
	
	

 



/**
 * [tOracleSP_3 process_data_begin ] stop
 */
	
	/**
	 * [tOracleSP_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_3";
	
	

 



/**
 * [tOracleSP_3 process_data_end ] stop
 */

} // End of branch "registrosCorrectos"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_6 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

}
}finally{
	if (rs_tOracleInput_6 != null) {
		rs_tOracleInput_6.close();
	}
	if (stmt_tOracleInput_6 != null) {
		stmt_tOracleInput_6.close();
	}
}

globalMap.put("tOracleInput_6_NB_LINE",nb_line_tOracleInput_6);
 

ok_Hash.put("tOracleInput_6", true);
end_Hash.put("tOracleInput_6", System.currentTimeMillis());




/**
 * [tOracleInput_6 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tOracleSP_3 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_3";
	
	


	statement_tOracleSP_3.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"registrosCorrectos");
			  	}
			  	
 

ok_Hash.put("tOracleSP_3", true);
end_Hash.put("tOracleSP_3", System.currentTimeMillis());




/**
 * [tOracleSP_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_6 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tOracleSP_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_3";
	
	

 



/**
 * [tOracleSP_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row44Struct implements routines.system.IPersistableRow<row44Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String Result;

				public String getResult () {
					return this.Result;
				}

				public Boolean ResultIsNullable(){
				    return true;
				}
				public Boolean ResultIsKey(){
				    return false;
				}
				public Integer ResultLength(){
				    return null;
				}
				public Integer ResultPrecision(){
				    return null;
				}
				public String ResultDefault(){
				
					return null;
				
				}
				public String ResultComment(){
				
				    return "";
				
				}
				public String ResultPattern(){
				
					return "";
				
				}
				public String ResultOriginalDbColumnName(){
				
					return "Result";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Result = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Result = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Result,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Result,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Result="+Result);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row44Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row44Struct row44 = new row44Struct();




	
	/**
	 * [tBufferOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tBufferOutput_2", false);
		start_Hash.put("tBufferOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tBufferOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row44");
					}
				
		int tos_count_tBufferOutput_2 = 0;
		

 



/**
 * [tBufferOutput_2 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_2", false);
		start_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_2";
	
	
		int tos_count_tFixedFlowInput_2 = 0;
		

	    for (int i_tFixedFlowInput_2 = 0 ; i_tFixedFlowInput_2 < 1 ; i_tFixedFlowInput_2++) {
	                	            	
    	            		row44.Result = "2";
    	            	

 



/**
 * [tFixedFlowInput_2 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 


	tos_count_tFixedFlowInput_2++;

/**
 * [tFixedFlowInput_2 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tBufferOutput_2 main ] start
	 */

	

	
	
	currentComponent="tBufferOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row44"
						
						);
					}
					



String[] row_tBufferOutput_2=new String[]{"",};		
	    if(row44.Result != null){
	        
	            row_tBufferOutput_2[0] = row44.Result;
	                        			    
	    }else{
	    	row_tBufferOutput_2[0] = null;
	    }
	globalBuffer.add(row_tBufferOutput_2);	
	
 


	tos_count_tBufferOutput_2++;

/**
 * [tBufferOutput_2 main ] stop
 */
	
	/**
	 * [tBufferOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tBufferOutput_2";
	
	

 



/**
 * [tBufferOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tBufferOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_2";
	
	

 



/**
 * [tBufferOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

        }
        globalMap.put("tFixedFlowInput_2_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_2", true);
end_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());




/**
 * [tFixedFlowInput_2 end ] stop
 */

	
	/**
	 * [tBufferOutput_2 end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_2";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row44");
			  	}
			  	
 

ok_Hash.put("tBufferOutput_2", true);
end_Hash.put("tBufferOutput_2", System.currentTimeMillis());




/**
 * [tBufferOutput_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_2 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 finally ] stop
 */

	
	/**
	 * [tBufferOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tBufferOutput_2";
	
	

 



/**
 * [tBufferOutput_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class MED_ATENCIOnStruct implements routines.system.IPersistableComparableLookupRow<MED_ATENCIOnStruct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 4000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 4000;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.NOMBRE == null) ? 0 : this.NOMBRE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final MED_ATENCIOnStruct other = (MED_ATENCIOnStruct) obj;
		
						if (this.NOMBRE == null) {
							if (other.NOMBRE != null)
								return false;
						
						} else if (!this.NOMBRE.equals(other.NOMBRE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(MED_ATENCIOnStruct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.SIGLA = this.SIGLA;
	            
	}

	public void copyKeysDataTo(MED_ATENCIOnStruct other) {

		other.NOMBRE = this.NOMBRE;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.NOMBRE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.NOMBRE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NOMBRE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NOMBRE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
						this.SIGLA = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
						this.SIGLA = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
						writeString(this.SIGLA, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
						writeString(this.SIGLA, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(MED_ATENCIOnStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.NOMBRE, other.NOMBRE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		MED_ATENCIOnStruct MED_ATENCIOn = new MED_ATENCIOnStruct();




	
	/**
	 * [tAdvancedHash_MED_ATENCIOn begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_MED_ATENCIOn", false);
		start_Hash.put("tAdvancedHash_MED_ATENCIOn", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_MED_ATENCIOn";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"MED_ATENCIOn");
					}
				
		int tos_count_tAdvancedHash_MED_ATENCIOn = 0;
		

			   		// connection name:MED_ATENCIOn
			   		// source node:tOracleInput_3 - inputs:(after_tHashInput_2) outputs:(MED_ATENCIOn,MED_ATENCIOn) | target node:tAdvancedHash_MED_ATENCIOn - inputs:(MED_ATENCIOn) outputs:()
			   		// linked node: tMap_14 - inputs:(row53,MED_ATENCIOn) outputs:(validacionNAtencion)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_MED_ATENCIOn = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<MED_ATENCIOnStruct> tHash_Lookup_MED_ATENCIOn =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<MED_ATENCIOnStruct>getLookup(matchingModeEnum_MED_ATENCIOn);
	   						   
		   	   	   globalMap.put("tHash_Lookup_MED_ATENCIOn", tHash_Lookup_MED_ATENCIOn);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_MED_ATENCIOn begin ] stop
 */



	
	/**
	 * [tOracleInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_3", false);
		start_Hash.put("tOracleInput_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_3";
	
	
		int tos_count_tOracleInput_3 = 0;
		
	


	
		    int nb_line_tOracleInput_3 = 0;
		    java.sql.Connection conn_tOracleInput_3 = null;
				conn_tOracleInput_3 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_3 = false;
				boolean isConnectionWrapped_tOracleInput_3 = !(conn_tOracleInput_3 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_3.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_3 = null;
                if (isConnectionWrapped_tOracleInput_3) {
					unwrappedOraConn_tOracleInput_3 = conn_tOracleInput_3.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_3 != null) {
                        isTimeZoneNull_tOracleInput_3 = (unwrappedOraConn_tOracleInput_3.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_3 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_3).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_3) {
					java.sql.Statement stmtGetTZ_tOracleInput_3 = conn_tOracleInput_3.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_3 = stmtGetTZ_tOracleInput_3.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_3 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_3.next()) {
						sessionTimezone_tOracleInput_3 = rsGetTZ_tOracleInput_3.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_3 && unwrappedOraConn_tOracleInput_3 != null) {
                        unwrappedOraConn_tOracleInput_3.setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_3).setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_3 = conn_tOracleInput_3.createStatement();

		    String dbquery_tOracleInput_3 = "SELECT \n  ID, \n  UPPER(TRIM(MED.MayusculasSinAcentos(NOMBRE))) AS NOMBRE, \n  UPPER(TRIM(MED.MayusculasSinAcentos(SIG"
+"LA))) AS SIGLA\nFROM MED_NATENCION\nWHERE ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_3_QUERY",dbquery_tOracleInput_3);

		    java.sql.ResultSet rs_tOracleInput_3 = null;

		    try {
		    	rs_tOracleInput_3 = stmt_tOracleInput_3.executeQuery(dbquery_tOracleInput_3);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_3 = rs_tOracleInput_3.getMetaData();
		    	int colQtyInRs_tOracleInput_3 = rsmd_tOracleInput_3.getColumnCount();

		    String tmpContent_tOracleInput_3 = null;
		    
		    
		    while (rs_tOracleInput_3.next()) {
		        nb_line_tOracleInput_3++;
		        
							if(colQtyInRs_tOracleInput_3 < 1) {
								MED_ATENCIOn.ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(1) != null) {
						MED_ATENCIOn.ID = rs_tOracleInput_3.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 2) {
								MED_ATENCIOn.NOMBRE = null;
							} else {
	                         		
        	MED_ATENCIOn.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 3) {
								MED_ATENCIOn.SIGLA = null;
							} else {
	                         		
        	MED_ATENCIOn.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 3, false);
		                    }
					




 



/**
 * [tOracleInput_3 begin ] stop
 */
	
	/**
	 * [tOracleInput_3 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 


	tos_count_tOracleInput_3++;

/**
 * [tOracleInput_3 main ] stop
 */
	
	/**
	 * [tOracleInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_MED_ATENCIOn main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_MED_ATENCIOn";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"MED_ATENCIOn"
						
						);
					}
					


			   
			   

					MED_ATENCIOnStruct MED_ATENCIOn_HashRow = new MED_ATENCIOnStruct();
		   	   	   
				
				MED_ATENCIOn_HashRow.ID = MED_ATENCIOn.ID;
				
				MED_ATENCIOn_HashRow.NOMBRE = MED_ATENCIOn.NOMBRE;
				
				MED_ATENCIOn_HashRow.SIGLA = MED_ATENCIOn.SIGLA;
				
			tHash_Lookup_MED_ATENCIOn.put(MED_ATENCIOn_HashRow);
			
            




 


	tos_count_tAdvancedHash_MED_ATENCIOn++;

/**
 * [tAdvancedHash_MED_ATENCIOn main ] stop
 */
	
	/**
	 * [tAdvancedHash_MED_ATENCIOn process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_MED_ATENCIOn";
	
	

 



/**
 * [tAdvancedHash_MED_ATENCIOn process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_MED_ATENCIOn process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_MED_ATENCIOn";
	
	

 



/**
 * [tAdvancedHash_MED_ATENCIOn process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_3 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

}
}finally{
	if (rs_tOracleInput_3 != null) {
		rs_tOracleInput_3.close();
	}
	if (stmt_tOracleInput_3 != null) {
		stmt_tOracleInput_3.close();
	}
}

globalMap.put("tOracleInput_3_NB_LINE",nb_line_tOracleInput_3);
 

ok_Hash.put("tOracleInput_3", true);
end_Hash.put("tOracleInput_3", System.currentTimeMillis());




/**
 * [tOracleInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_MED_ATENCIOn end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_MED_ATENCIOn";
	
	

tHash_Lookup_MED_ATENCIOn.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"MED_ATENCIOn");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_MED_ATENCIOn", true);
end_Hash.put("tAdvancedHash_MED_ATENCIOn", System.currentTimeMillis());




/**
 * [tAdvancedHash_MED_ATENCIOn end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_MED_ATENCIOn finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_MED_ATENCIOn";
	
	

 



/**
 * [tAdvancedHash_MED_ATENCIOn finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row54Struct implements routines.system.IPersistableComparableLookupRow<row54Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 4000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 4000;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SIGLA == null) ? 0 : this.SIGLA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row54Struct other = (row54Struct) obj;
		
						if (this.SIGLA == null) {
							if (other.SIGLA != null)
								return false;
						
						} else if (!this.SIGLA.equals(other.SIGLA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row54Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.SIGLA = this.SIGLA;
	            
	}

	public void copyKeysDataTo(row54Struct other) {

		other.SIGLA = this.SIGLA;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
						this.NOMBRE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
						this.NOMBRE = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
						writeString(this.NOMBRE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
						writeString(this.NOMBRE, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row54Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SIGLA, other.SIGLA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row54Struct row54 = new row54Struct();




	
	/**
	 * [tAdvancedHash_row54 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row54", false);
		start_Hash.put("tAdvancedHash_row54", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row54";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row54");
					}
				
		int tos_count_tAdvancedHash_row54 = 0;
		

			   		// connection name:row54
			   		// source node:tOracleInput_12 - inputs:(after_tHashInput_3) outputs:(row54,row54) | target node:tAdvancedHash_row54 - inputs:(row54) outputs:()
			   		// linked node: tMap_17 - inputs:(row39,row54) outputs:(validacionEspecialidades)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row54 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row54Struct> tHash_Lookup_row54 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row54Struct>getLookup(matchingModeEnum_row54);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row54", tHash_Lookup_row54);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row54 begin ] stop
 */



	
	/**
	 * [tOracleInput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_12", false);
		start_Hash.put("tOracleInput_12", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_12";
	
	
		int tos_count_tOracleInput_12 = 0;
		
	


	
		    int nb_line_tOracleInput_12 = 0;
		    java.sql.Connection conn_tOracleInput_12 = null;
				conn_tOracleInput_12 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_12 = false;
				boolean isConnectionWrapped_tOracleInput_12 = !(conn_tOracleInput_12 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_12.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_12 = null;
                if (isConnectionWrapped_tOracleInput_12) {
					unwrappedOraConn_tOracleInput_12 = conn_tOracleInput_12.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_12 != null) {
                        isTimeZoneNull_tOracleInput_12 = (unwrappedOraConn_tOracleInput_12.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_12 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_12).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_12) {
					java.sql.Statement stmtGetTZ_tOracleInput_12 = conn_tOracleInput_12.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_12 = stmtGetTZ_tOracleInput_12.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_12 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_12.next()) {
						sessionTimezone_tOracleInput_12 = rsGetTZ_tOracleInput_12.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_12 && unwrappedOraConn_tOracleInput_12 != null) {
                        unwrappedOraConn_tOracleInput_12.setSessionTimeZone(sessionTimezone_tOracleInput_12);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_12).setSessionTimeZone(sessionTimezone_tOracleInput_12);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_12 = conn_tOracleInput_12.createStatement();

		    String dbquery_tOracleInput_12 = "SELECT \n  ID, \n  UPPER(TRIM(MED.MayusculasSinAcentos(NOMBRE))) AS NOMBRE, \n  UPPER(TRIM(MED.MayusculasSinAcentos(SIG"
+"LA))) AS SIGLA\nFROM GEN_ESPECIALIDADES\nWHERE ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_12_QUERY",dbquery_tOracleInput_12);

		    java.sql.ResultSet rs_tOracleInput_12 = null;

		    try {
		    	rs_tOracleInput_12 = stmt_tOracleInput_12.executeQuery(dbquery_tOracleInput_12);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_12 = rs_tOracleInput_12.getMetaData();
		    	int colQtyInRs_tOracleInput_12 = rsmd_tOracleInput_12.getColumnCount();

		    String tmpContent_tOracleInput_12 = null;
		    
		    
		    while (rs_tOracleInput_12.next()) {
		        nb_line_tOracleInput_12++;
		        
							if(colQtyInRs_tOracleInput_12 < 1) {
								row54.ID = null;
							} else {
		                          
					if(rs_tOracleInput_12.getObject(1) != null) {
						row54.ID = rs_tOracleInput_12.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_12 < 2) {
								row54.NOMBRE = null;
							} else {
	                         		
        	row54.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_12, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_12 < 3) {
								row54.SIGLA = null;
							} else {
	                         		
        	row54.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_12, 3, false);
		                    }
					




 



/**
 * [tOracleInput_12 begin ] stop
 */
	
	/**
	 * [tOracleInput_12 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 


	tos_count_tOracleInput_12++;

/**
 * [tOracleInput_12 main ] stop
 */
	
	/**
	 * [tOracleInput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 



/**
 * [tOracleInput_12 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row54 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row54";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row54"
						
						);
					}
					


			   
			   

					row54Struct row54_HashRow = new row54Struct();
		   	   	   
				
				row54_HashRow.ID = row54.ID;
				
				row54_HashRow.NOMBRE = row54.NOMBRE;
				
				row54_HashRow.SIGLA = row54.SIGLA;
				
			tHash_Lookup_row54.put(row54_HashRow);
			
            




 


	tos_count_tAdvancedHash_row54++;

/**
 * [tAdvancedHash_row54 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row54 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row54";
	
	

 



/**
 * [tAdvancedHash_row54 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row54 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row54";
	
	

 



/**
 * [tAdvancedHash_row54 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 



/**
 * [tOracleInput_12 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_12 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

}
}finally{
	if (rs_tOracleInput_12 != null) {
		rs_tOracleInput_12.close();
	}
	if (stmt_tOracleInput_12 != null) {
		stmt_tOracleInput_12.close();
	}
}

globalMap.put("tOracleInput_12_NB_LINE",nb_line_tOracleInput_12);
 

ok_Hash.put("tOracleInput_12", true);
end_Hash.put("tOracleInput_12", System.currentTimeMillis());




/**
 * [tOracleInput_12 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row54 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row54";
	
	

tHash_Lookup_row54.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row54");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row54", true);
end_Hash.put("tAdvancedHash_row54", System.currentTimeMillis());




/**
 * [tAdvancedHash_row54 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_12 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 



/**
 * [tOracleInput_12 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row54 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row54";
	
	

 



/**
 * [tAdvancedHash_row54 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_12_SUBPROCESS_STATE", 1);
	}
	


public static class row55Struct implements routines.system.IPersistableComparableLookupRow<row55Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 4000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 4000;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SIGLA == null) ? 0 : this.SIGLA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row55Struct other = (row55Struct) obj;
		
						if (this.SIGLA == null) {
							if (other.SIGLA != null)
								return false;
						
						} else if (!this.SIGLA.equals(other.SIGLA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row55Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.SIGLA = this.SIGLA;
	            
	}

	public void copyKeysDataTo(row55Struct other) {

		other.SIGLA = this.SIGLA;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
						this.NOMBRE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
						this.NOMBRE = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
						writeString(this.NOMBRE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
						writeString(this.NOMBRE, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row55Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SIGLA, other.SIGLA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_19Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_19_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row55Struct row55 = new row55Struct();




	
	/**
	 * [tAdvancedHash_row55 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row55", false);
		start_Hash.put("tAdvancedHash_row55", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row55";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row55");
					}
				
		int tos_count_tAdvancedHash_row55 = 0;
		

			   		// connection name:row55
			   		// source node:tOracleInput_19 - inputs:(after_tHashInput_4) outputs:(row55,row55) | target node:tAdvancedHash_row55 - inputs:(row55) outputs:()
			   		// linked node: tMap_16 - inputs:(row29,row55) outputs:(validacionTnivelUso)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row55 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row55Struct> tHash_Lookup_row55 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row55Struct>getLookup(matchingModeEnum_row55);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row55", tHash_Lookup_row55);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row55 begin ] stop
 */



	
	/**
	 * [tOracleInput_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_19", false);
		start_Hash.put("tOracleInput_19", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_19";
	
	
		int tos_count_tOracleInput_19 = 0;
		
	


	
		    int nb_line_tOracleInput_19 = 0;
		    java.sql.Connection conn_tOracleInput_19 = null;
				conn_tOracleInput_19 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_19 = false;
				boolean isConnectionWrapped_tOracleInput_19 = !(conn_tOracleInput_19 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_19.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_19 = null;
                if (isConnectionWrapped_tOracleInput_19) {
					unwrappedOraConn_tOracleInput_19 = conn_tOracleInput_19.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_19 != null) {
                        isTimeZoneNull_tOracleInput_19 = (unwrappedOraConn_tOracleInput_19.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_19 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_19).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_19) {
					java.sql.Statement stmtGetTZ_tOracleInput_19 = conn_tOracleInput_19.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_19 = stmtGetTZ_tOracleInput_19.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_19 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_19.next()) {
						sessionTimezone_tOracleInput_19 = rsGetTZ_tOracleInput_19.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_19 && unwrappedOraConn_tOracleInput_19 != null) {
                        unwrappedOraConn_tOracleInput_19.setSessionTimeZone(sessionTimezone_tOracleInput_19);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_19).setSessionTimeZone(sessionTimezone_tOracleInput_19);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_19 = conn_tOracleInput_19.createStatement();

		    String dbquery_tOracleInput_19 = "SELECT \n  ID, \n  UPPER(TRIM(MED.MayusculasSinAcentos(NOMBRE))) AS NOMBRE, \n  UPPER(TRIM(MED.MayusculasSinAcentos(SIG"
+"LA))) AS SIGLA\nFROM MED_TNIVELESUSO\nWHERE ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_19_QUERY",dbquery_tOracleInput_19);

		    java.sql.ResultSet rs_tOracleInput_19 = null;

		    try {
		    	rs_tOracleInput_19 = stmt_tOracleInput_19.executeQuery(dbquery_tOracleInput_19);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_19 = rs_tOracleInput_19.getMetaData();
		    	int colQtyInRs_tOracleInput_19 = rsmd_tOracleInput_19.getColumnCount();

		    String tmpContent_tOracleInput_19 = null;
		    
		    
		    while (rs_tOracleInput_19.next()) {
		        nb_line_tOracleInput_19++;
		        
							if(colQtyInRs_tOracleInput_19 < 1) {
								row55.ID = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(1) != null) {
						row55.ID = rs_tOracleInput_19.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_19 < 2) {
								row55.NOMBRE = null;
							} else {
	                         		
        	row55.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_19, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_19 < 3) {
								row55.SIGLA = null;
							} else {
	                         		
        	row55.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_19, 3, false);
		                    }
					




 



/**
 * [tOracleInput_19 begin ] stop
 */
	
	/**
	 * [tOracleInput_19 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

 


	tos_count_tOracleInput_19++;

/**
 * [tOracleInput_19 main ] stop
 */
	
	/**
	 * [tOracleInput_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

 



/**
 * [tOracleInput_19 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row55 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row55";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row55"
						
						);
					}
					


			   
			   

					row55Struct row55_HashRow = new row55Struct();
		   	   	   
				
				row55_HashRow.ID = row55.ID;
				
				row55_HashRow.NOMBRE = row55.NOMBRE;
				
				row55_HashRow.SIGLA = row55.SIGLA;
				
			tHash_Lookup_row55.put(row55_HashRow);
			
            




 


	tos_count_tAdvancedHash_row55++;

/**
 * [tAdvancedHash_row55 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row55 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row55";
	
	

 



/**
 * [tAdvancedHash_row55 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row55 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row55";
	
	

 



/**
 * [tAdvancedHash_row55 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

 



/**
 * [tOracleInput_19 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_19 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

}
}finally{
	if (rs_tOracleInput_19 != null) {
		rs_tOracleInput_19.close();
	}
	if (stmt_tOracleInput_19 != null) {
		stmt_tOracleInput_19.close();
	}
}

globalMap.put("tOracleInput_19_NB_LINE",nb_line_tOracleInput_19);
 

ok_Hash.put("tOracleInput_19", true);
end_Hash.put("tOracleInput_19", System.currentTimeMillis());




/**
 * [tOracleInput_19 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row55 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row55";
	
	

tHash_Lookup_row55.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row55");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row55", true);
end_Hash.put("tAdvancedHash_row55", System.currentTimeMillis());




/**
 * [tAdvancedHash_row55 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_19 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

 



/**
 * [tOracleInput_19 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row55 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row55";
	
	

 



/**
 * [tAdvancedHash_row55 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_19_SUBPROCESS_STATE", 1);
	}
	


public static class row57Struct implements routines.system.IPersistableComparableLookupRow<row57Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 4000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 4000;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SIGLA == null) ? 0 : this.SIGLA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row57Struct other = (row57Struct) obj;
		
						if (this.SIGLA == null) {
							if (other.SIGLA != null)
								return false;
						
						} else if (!this.SIGLA.equals(other.SIGLA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row57Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.SIGLA = this.SIGLA;
	            
	}

	public void copyKeysDataTo(row57Struct other) {

		other.SIGLA = this.SIGLA;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
						this.NOMBRE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
						this.NOMBRE = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
						writeString(this.NOMBRE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
						writeString(this.NOMBRE, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row57Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SIGLA, other.SIGLA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_20Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_20_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row57Struct row57 = new row57Struct();




	
	/**
	 * [tAdvancedHash_row57 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row57", false);
		start_Hash.put("tAdvancedHash_row57", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row57";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row57");
					}
				
		int tos_count_tAdvancedHash_row57 = 0;
		

			   		// connection name:row57
			   		// source node:tOracleInput_20 - inputs:(after_tHashInput_5) outputs:(row57,row57) | target node:tAdvancedHash_row57 - inputs:(row57) outputs:()
			   		// linked node: tMap_18 - inputs:(row56,row57) outputs:(validacionViaAdmin)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row57 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row57Struct> tHash_Lookup_row57 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row57Struct>getLookup(matchingModeEnum_row57);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row57", tHash_Lookup_row57);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row57 begin ] stop
 */



	
	/**
	 * [tOracleInput_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_20", false);
		start_Hash.put("tOracleInput_20", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_20";
	
	
		int tos_count_tOracleInput_20 = 0;
		
	


	
		    int nb_line_tOracleInput_20 = 0;
		    java.sql.Connection conn_tOracleInput_20 = null;
				conn_tOracleInput_20 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_20 = false;
				boolean isConnectionWrapped_tOracleInput_20 = !(conn_tOracleInput_20 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_20.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_20 = null;
                if (isConnectionWrapped_tOracleInput_20) {
					unwrappedOraConn_tOracleInput_20 = conn_tOracleInput_20.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_20 != null) {
                        isTimeZoneNull_tOracleInput_20 = (unwrappedOraConn_tOracleInput_20.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_20 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_20).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_20) {
					java.sql.Statement stmtGetTZ_tOracleInput_20 = conn_tOracleInput_20.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_20 = stmtGetTZ_tOracleInput_20.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_20 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_20.next()) {
						sessionTimezone_tOracleInput_20 = rsGetTZ_tOracleInput_20.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_20 && unwrappedOraConn_tOracleInput_20 != null) {
                        unwrappedOraConn_tOracleInput_20.setSessionTimeZone(sessionTimezone_tOracleInput_20);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_20).setSessionTimeZone(sessionTimezone_tOracleInput_20);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_20 = conn_tOracleInput_20.createStatement();

		    String dbquery_tOracleInput_20 = "SELECT \n  ID, \n  UPPER(TRIM(MED.MayusculasSinAcentos(NOMBRE))) AS NOMBRE, \n  UPPER(TRIM(MED.MayusculasSinAcentos(SIG"
+"LA))) AS SIGLA\nFROM MED_TVIADMIN\nWHERE ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_20_QUERY",dbquery_tOracleInput_20);

		    java.sql.ResultSet rs_tOracleInput_20 = null;

		    try {
		    	rs_tOracleInput_20 = stmt_tOracleInput_20.executeQuery(dbquery_tOracleInput_20);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_20 = rs_tOracleInput_20.getMetaData();
		    	int colQtyInRs_tOracleInput_20 = rsmd_tOracleInput_20.getColumnCount();

		    String tmpContent_tOracleInput_20 = null;
		    
		    
		    while (rs_tOracleInput_20.next()) {
		        nb_line_tOracleInput_20++;
		        
							if(colQtyInRs_tOracleInput_20 < 1) {
								row57.ID = null;
							} else {
		                          
					if(rs_tOracleInput_20.getObject(1) != null) {
						row57.ID = rs_tOracleInput_20.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_20 < 2) {
								row57.NOMBRE = null;
							} else {
	                         		
        	row57.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_20, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_20 < 3) {
								row57.SIGLA = null;
							} else {
	                         		
        	row57.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_20, 3, false);
		                    }
					




 



/**
 * [tOracleInput_20 begin ] stop
 */
	
	/**
	 * [tOracleInput_20 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_20";
	
	

 


	tos_count_tOracleInput_20++;

/**
 * [tOracleInput_20 main ] stop
 */
	
	/**
	 * [tOracleInput_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_20";
	
	

 



/**
 * [tOracleInput_20 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row57 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row57";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row57"
						
						);
					}
					


			   
			   

					row57Struct row57_HashRow = new row57Struct();
		   	   	   
				
				row57_HashRow.ID = row57.ID;
				
				row57_HashRow.NOMBRE = row57.NOMBRE;
				
				row57_HashRow.SIGLA = row57.SIGLA;
				
			tHash_Lookup_row57.put(row57_HashRow);
			
            




 


	tos_count_tAdvancedHash_row57++;

/**
 * [tAdvancedHash_row57 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row57 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row57";
	
	

 



/**
 * [tAdvancedHash_row57 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row57 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row57";
	
	

 



/**
 * [tAdvancedHash_row57 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_20";
	
	

 



/**
 * [tOracleInput_20 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_20 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_20";
	
	

}
}finally{
	if (rs_tOracleInput_20 != null) {
		rs_tOracleInput_20.close();
	}
	if (stmt_tOracleInput_20 != null) {
		stmt_tOracleInput_20.close();
	}
}

globalMap.put("tOracleInput_20_NB_LINE",nb_line_tOracleInput_20);
 

ok_Hash.put("tOracleInput_20", true);
end_Hash.put("tOracleInput_20", System.currentTimeMillis());




/**
 * [tOracleInput_20 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row57 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row57";
	
	

tHash_Lookup_row57.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row57");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row57", true);
end_Hash.put("tAdvancedHash_row57", System.currentTimeMillis());




/**
 * [tAdvancedHash_row57 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_20 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_20";
	
	

 



/**
 * [tOracleInput_20 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row57 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row57";
	
	

 



/**
 * [tAdvancedHash_row57 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_20_SUBPROCESS_STATE", 1);
	}
	


public static class row59Struct implements routines.system.IPersistableComparableLookupRow<row59Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 4000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 4000;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.NOMBRE == null) ? 0 : this.NOMBRE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row59Struct other = (row59Struct) obj;
		
						if (this.NOMBRE == null) {
							if (other.NOMBRE != null)
								return false;
						
						} else if (!this.NOMBRE.equals(other.NOMBRE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row59Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.SIGLA = this.SIGLA;
	            
	}

	public void copyKeysDataTo(row59Struct other) {

		other.NOMBRE = this.NOMBRE;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.NOMBRE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.NOMBRE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NOMBRE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NOMBRE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
						this.SIGLA = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
						this.SIGLA = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
						writeString(this.SIGLA, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
						writeString(this.SIGLA, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row59Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.NOMBRE, other.NOMBRE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row59Struct row59 = new row59Struct();




	
	/**
	 * [tAdvancedHash_row59 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row59", false);
		start_Hash.put("tAdvancedHash_row59", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row59";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row59");
					}
				
		int tos_count_tAdvancedHash_row59 = 0;
		

			   		// connection name:row59
			   		// source node:tOracleInput_1 - inputs:(after_tHashInput_6) outputs:(row59,row59) | target node:tAdvancedHash_row59 - inputs:(row59) outputs:()
			   		// linked node: tMap_19 - inputs:(row15,row59) outputs:(validacionFormaFarmaceutica,identificadorValido)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row59 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row59Struct> tHash_Lookup_row59 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row59Struct>getLookup(matchingModeEnum_row59);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row59", tHash_Lookup_row59);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row59 begin ] stop
 */



	
	/**
	 * [tOracleInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_1", false);
		start_Hash.put("tOracleInput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_1";
	
	
		int tos_count_tOracleInput_1 = 0;
		
	


	
		    int nb_line_tOracleInput_1 = 0;
		    java.sql.Connection conn_tOracleInput_1 = null;
				conn_tOracleInput_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_1 = false;
				boolean isConnectionWrapped_tOracleInput_1 = !(conn_tOracleInput_1 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_1.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_1 = null;
                if (isConnectionWrapped_tOracleInput_1) {
					unwrappedOraConn_tOracleInput_1 = conn_tOracleInput_1.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_1 != null) {
                        isTimeZoneNull_tOracleInput_1 = (unwrappedOraConn_tOracleInput_1.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_1 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_1).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_1) {
					java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_1 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_1.next()) {
						sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_1 && unwrappedOraConn_tOracleInput_1 != null) {
                        unwrappedOraConn_tOracleInput_1.setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_1).setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1.createStatement();

		    String dbquery_tOracleInput_1 = "SELECT \n  ID, \n  UPPER(TRIM(MED.MayusculasSinAcentos(NOMBRE))) AS NOMBRE, \n  UPPER(TRIM(MED.MayusculasSinAcentos(SIG"
+"LA))) AS SIGLA  \nFROM MED_TFORMASFARMACEUTICAS\nWHERE ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_1_QUERY",dbquery_tOracleInput_1);

		    java.sql.ResultSet rs_tOracleInput_1 = null;

		    try {
		    	rs_tOracleInput_1 = stmt_tOracleInput_1.executeQuery(dbquery_tOracleInput_1);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1.getMetaData();
		    	int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1.getColumnCount();

		    String tmpContent_tOracleInput_1 = null;
		    
		    
		    while (rs_tOracleInput_1.next()) {
		        nb_line_tOracleInput_1++;
		        
							if(colQtyInRs_tOracleInput_1 < 1) {
								row59.ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(1) != null) {
						row59.ID = rs_tOracleInput_1.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 2) {
								row59.NOMBRE = null;
							} else {
	                         		
        	row59.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 3) {
								row59.SIGLA = null;
							} else {
	                         		
        	row59.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 3, false);
		                    }
					




 



/**
 * [tOracleInput_1 begin ] stop
 */
	
	/**
	 * [tOracleInput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 


	tos_count_tOracleInput_1++;

/**
 * [tOracleInput_1 main ] stop
 */
	
	/**
	 * [tOracleInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row59 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row59";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row59"
						
						);
					}
					


			   
			   

					row59Struct row59_HashRow = new row59Struct();
		   	   	   
				
				row59_HashRow.ID = row59.ID;
				
				row59_HashRow.NOMBRE = row59.NOMBRE;
				
				row59_HashRow.SIGLA = row59.SIGLA;
				
			tHash_Lookup_row59.put(row59_HashRow);
			
            




 


	tos_count_tAdvancedHash_row59++;

/**
 * [tAdvancedHash_row59 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row59 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row59";
	
	

 



/**
 * [tAdvancedHash_row59 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row59 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row59";
	
	

 



/**
 * [tAdvancedHash_row59 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

}
}finally{
	if (rs_tOracleInput_1 != null) {
		rs_tOracleInput_1.close();
	}
	if (stmt_tOracleInput_1 != null) {
		stmt_tOracleInput_1.close();
	}
}

globalMap.put("tOracleInput_1_NB_LINE",nb_line_tOracleInput_1);
 

ok_Hash.put("tOracleInput_1", true);
end_Hash.put("tOracleInput_1", System.currentTimeMillis());




/**
 * [tOracleInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row59 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row59";
	
	

tHash_Lookup_row59.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row59");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row59", true);
end_Hash.put("tAdvancedHash_row59", System.currentTimeMillis());




/**
 * [tAdvancedHash_row59 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row59 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row59";
	
	

 



/**
 * [tAdvancedHash_row59 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row61Struct implements routines.system.IPersistableComparableLookupRow<row61Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return 4000;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return 0;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				
			    public String CONCENTRACION;

				public String getCONCENTRACION () {
					return this.CONCENTRACION;
				}

				public Boolean CONCENTRACIONIsNullable(){
				    return true;
				}
				public Boolean CONCENTRACIONIsKey(){
				    return false;
				}
				public Integer CONCENTRACIONLength(){
				    return 4000;
				}
				public Integer CONCENTRACIONPrecision(){
				    return 0;
				}
				public String CONCENTRACIONDefault(){
				
					return null;
				
				}
				public String CONCENTRACIONComment(){
				
				    return "";
				
				}
				public String CONCENTRACIONPattern(){
				
					return "";
				
				}
				public String CONCENTRACIONOriginalDbColumnName(){
				
					return "CONCENTRACION";
				
				}

				
			    public String NOMBRE_GENERICO;

				public String getNOMBRE_GENERICO () {
					return this.NOMBRE_GENERICO;
				}

				public Boolean NOMBRE_GENERICOIsNullable(){
				    return true;
				}
				public Boolean NOMBRE_GENERICOIsKey(){
				    return false;
				}
				public Integer NOMBRE_GENERICOLength(){
				    return null;
				}
				public Integer NOMBRE_GENERICOPrecision(){
				    return null;
				}
				public String NOMBRE_GENERICODefault(){
				
					return null;
				
				}
				public String NOMBRE_GENERICOComment(){
				
				    return "";
				
				}
				public String NOMBRE_GENERICOPattern(){
				
					return "";
				
				}
				public String NOMBRE_GENERICOOriginalDbColumnName(){
				
					return "NOMBRE_GENERICO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CODIGO_UNICO == null) ? 0 : this.CODIGO_UNICO.hashCode());
					
						result = prime * result + ((this.CONCENTRACION == null) ? 0 : this.CONCENTRACION.hashCode());
					
						result = prime * result + ((this.NOMBRE_GENERICO == null) ? 0 : this.NOMBRE_GENERICO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row61Struct other = (row61Struct) obj;
		
						if (this.CODIGO_UNICO == null) {
							if (other.CODIGO_UNICO != null)
								return false;
						
						} else if (!this.CODIGO_UNICO.equals(other.CODIGO_UNICO))
						
							return false;
					
						if (this.CONCENTRACION == null) {
							if (other.CONCENTRACION != null)
								return false;
						
						} else if (!this.CONCENTRACION.equals(other.CONCENTRACION))
						
							return false;
					
						if (this.NOMBRE_GENERICO == null) {
							if (other.NOMBRE_GENERICO != null)
								return false;
						
						} else if (!this.NOMBRE_GENERICO.equals(other.NOMBRE_GENERICO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row61Struct other) {

		other.ID = this.ID;
	            other.CODIGO_UNICO = this.CODIGO_UNICO;
	            other.CONCENTRACION = this.CONCENTRACION;
	            other.NOMBRE_GENERICO = this.NOMBRE_GENERICO;
	            
	}

	public void copyKeysDataTo(row61Struct other) {

		other.CODIGO_UNICO = this.CODIGO_UNICO;
	            	other.CONCENTRACION = this.CONCENTRACION;
	            	other.NOMBRE_GENERICO = this.NOMBRE_GENERICO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CODIGO_UNICO = readString(dis);
					
					this.CONCENTRACION = readString(dis);
					
					this.NOMBRE_GENERICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CODIGO_UNICO = readString(dis);
					
					this.CONCENTRACION = readString(dis);
					
					this.NOMBRE_GENERICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
					// String
				
						writeString(this.CONCENTRACION,dos);
					
					// String
				
						writeString(this.NOMBRE_GENERICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
					// String
				
						writeString(this.CONCENTRACION,dos);
					
					// String
				
						writeString(this.NOMBRE_GENERICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
		sb.append(",CONCENTRACION="+CONCENTRACION);
		sb.append(",NOMBRE_GENERICO="+NOMBRE_GENERICO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row61Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CODIGO_UNICO, other.CODIGO_UNICO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CONCENTRACION, other.CONCENTRACION);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.NOMBRE_GENERICO, other.NOMBRE_GENERICO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row61Struct row61 = new row61Struct();




	
	/**
	 * [tAdvancedHash_row61 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row61", false);
		start_Hash.put("tAdvancedHash_row61", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row61";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row61");
					}
				
		int tos_count_tAdvancedHash_row61 = 0;
		

			   		// connection name:row61
			   		// source node:tOracleInput_5 - inputs:(after_tHashInput_8) outputs:(row61,row61) | target node:tAdvancedHash_row61 - inputs:(row61) outputs:()
			   		// linked node: tMap_20 - inputs:(row11,row61) outputs:(validacionGenerico,identificadoresValidos)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row61 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row61Struct> tHash_Lookup_row61 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row61Struct>getLookup(matchingModeEnum_row61);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row61", tHash_Lookup_row61);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row61 begin ] stop
 */



	
	/**
	 * [tOracleInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_5", false);
		start_Hash.put("tOracleInput_5", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_5";
	
	
		int tos_count_tOracleInput_5 = 0;
		
	


	
		    int nb_line_tOracleInput_5 = 0;
		    java.sql.Connection conn_tOracleInput_5 = null;
				conn_tOracleInput_5 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_5 = false;
				boolean isConnectionWrapped_tOracleInput_5 = !(conn_tOracleInput_5 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_5.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_5 = null;
                if (isConnectionWrapped_tOracleInput_5) {
					unwrappedOraConn_tOracleInput_5 = conn_tOracleInput_5.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_5 != null) {
                        isTimeZoneNull_tOracleInput_5 = (unwrappedOraConn_tOracleInput_5.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_5 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_5).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_5) {
					java.sql.Statement stmtGetTZ_tOracleInput_5 = conn_tOracleInput_5.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_5 = stmtGetTZ_tOracleInput_5.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_5 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_5.next()) {
						sessionTimezone_tOracleInput_5 = rsGetTZ_tOracleInput_5.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_5 && unwrappedOraConn_tOracleInput_5 != null) {
                        unwrappedOraConn_tOracleInput_5.setSessionTimeZone(sessionTimezone_tOracleInput_5);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_5).setSessionTimeZone(sessionTimezone_tOracleInput_5);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_5 = conn_tOracleInput_5.createStatement();

		    String dbquery_tOracleInput_5 = "SELECT \n  ID,\n  CODIGO_UNICO AS CODIGO_UNICO,\n  UPPER(TRIM(MED.MayusculasSinAcentos(CONCENTRACION))) AS CONCENTRACIO"
+"N,\n  UPPER(TRIM(MED.MayusculasSinAcentos(DESCRIPCION))) AS NOMBRE_GENERICO\nFROM MED_GENERICOS\nWHERE ESTREGISTRO_ID = "
+"1  AND TVIADMIN_ID IS NOT NULL AND CODIGO_UNICO IS NOT NULL \nAND ESTADO = 'Activo'";
		    

		    globalMap.put("tOracleInput_5_QUERY",dbquery_tOracleInput_5);

		    java.sql.ResultSet rs_tOracleInput_5 = null;

		    try {
		    	rs_tOracleInput_5 = stmt_tOracleInput_5.executeQuery(dbquery_tOracleInput_5);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_5 = rs_tOracleInput_5.getMetaData();
		    	int colQtyInRs_tOracleInput_5 = rsmd_tOracleInput_5.getColumnCount();

		    String tmpContent_tOracleInput_5 = null;
		    
		    
		    while (rs_tOracleInput_5.next()) {
		        nb_line_tOracleInput_5++;
		        
							if(colQtyInRs_tOracleInput_5 < 1) {
								row61.ID = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(1) != null) {
						row61.ID = rs_tOracleInput_5.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_5 < 2) {
								row61.CODIGO_UNICO = null;
							} else {
	                         		
        	row61.CODIGO_UNICO = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 3) {
								row61.CONCENTRACION = null;
							} else {
	                         		
        	row61.CONCENTRACION = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 4) {
								row61.NOMBRE_GENERICO = null;
							} else {
	                         		
        	row61.NOMBRE_GENERICO = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 4, false);
		                    }
					




 



/**
 * [tOracleInput_5 begin ] stop
 */
	
	/**
	 * [tOracleInput_5 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 


	tos_count_tOracleInput_5++;

/**
 * [tOracleInput_5 main ] stop
 */
	
	/**
	 * [tOracleInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row61 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row61";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row61"
						
						);
					}
					


			   
			   

					row61Struct row61_HashRow = new row61Struct();
		   	   	   
				
				row61_HashRow.ID = row61.ID;
				
				row61_HashRow.CODIGO_UNICO = row61.CODIGO_UNICO;
				
				row61_HashRow.CONCENTRACION = row61.CONCENTRACION;
				
				row61_HashRow.NOMBRE_GENERICO = row61.NOMBRE_GENERICO;
				
			tHash_Lookup_row61.put(row61_HashRow);
			
            




 


	tos_count_tAdvancedHash_row61++;

/**
 * [tAdvancedHash_row61 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row61 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row61";
	
	

 



/**
 * [tAdvancedHash_row61 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row61 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row61";
	
	

 



/**
 * [tAdvancedHash_row61 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_5 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

}
}finally{
	if (rs_tOracleInput_5 != null) {
		rs_tOracleInput_5.close();
	}
	if (stmt_tOracleInput_5 != null) {
		stmt_tOracleInput_5.close();
	}
}

globalMap.put("tOracleInput_5_NB_LINE",nb_line_tOracleInput_5);
 

ok_Hash.put("tOracleInput_5", true);
end_Hash.put("tOracleInput_5", System.currentTimeMillis());




/**
 * [tOracleInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row61 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row61";
	
	

tHash_Lookup_row61.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row61");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row61", true);
end_Hash.put("tAdvancedHash_row61", System.currentTimeMillis());




/**
 * [tAdvancedHash_row61 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_5 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row61 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row61";
	
	

 



/**
 * [tAdvancedHash_row61 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row20Struct implements routines.system.IPersistableComparableLookupRow<row20Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal GENERICO_ID;

				public BigDecimal getGENERICO_ID () {
					return this.GENERICO_ID;
				}

				public Boolean GENERICO_IDIsNullable(){
				    return true;
				}
				public Boolean GENERICO_IDIsKey(){
				    return false;
				}
				public Integer GENERICO_IDLength(){
				    return null;
				}
				public Integer GENERICO_IDPrecision(){
				    return null;
				}
				public String GENERICO_IDDefault(){
				
					return "";
				
				}
				public String GENERICO_IDComment(){
				
				    return "";
				
				}
				public String GENERICO_IDPattern(){
				
					return "";
				
				}
				public String GENERICO_IDOriginalDbColumnName(){
				
					return "GENERICO_ID";
				
				}

				
			    public String NOMBREGENERICO;

				public String getNOMBREGENERICO () {
					return this.NOMBREGENERICO;
				}

				public Boolean NOMBREGENERICOIsNullable(){
				    return true;
				}
				public Boolean NOMBREGENERICOIsKey(){
				    return false;
				}
				public Integer NOMBREGENERICOLength(){
				    return 150;
				}
				public Integer NOMBREGENERICOPrecision(){
				    return null;
				}
				public String NOMBREGENERICODefault(){
				
					return null;
				
				}
				public String NOMBREGENERICOComment(){
				
				    return "";
				
				}
				public String NOMBREGENERICOPattern(){
				
					return "";
				
				}
				public String NOMBREGENERICOOriginalDbColumnName(){
				
					return "NOMBREGENERICO";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return 150;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				
			    public Long LINEA;

				public Long getLINEA () {
					return this.LINEA;
				}

				public Boolean LINEAIsNullable(){
				    return true;
				}
				public Boolean LINEAIsKey(){
				    return false;
				}
				public Integer LINEALength(){
				    return null;
				}
				public Integer LINEAPrecision(){
				    return null;
				}
				public String LINEADefault(){
				
					return null;
				
				}
				public String LINEAComment(){
				
				    return "";
				
				}
				public String LINEAPattern(){
				
					return "";
				
				}
				public String LINEAOriginalDbColumnName(){
				
					return "LINEA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CODIGO_UNICO == null) ? 0 : this.CODIGO_UNICO.hashCode());
					
						result = prime * result + ((this.LINEA == null) ? 0 : this.LINEA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row20Struct other = (row20Struct) obj;
		
						if (this.CODIGO_UNICO == null) {
							if (other.CODIGO_UNICO != null)
								return false;
						
						} else if (!this.CODIGO_UNICO.equals(other.CODIGO_UNICO))
						
							return false;
					
						if (this.LINEA == null) {
							if (other.LINEA != null)
								return false;
						
						} else if (!this.LINEA.equals(other.LINEA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row20Struct other) {

		other.GENERICO_ID = this.GENERICO_ID;
	            other.NOMBREGENERICO = this.NOMBREGENERICO;
	            other.CODIGO_UNICO = this.CODIGO_UNICO;
	            other.LINEA = this.LINEA;
	            
	}

	public void copyKeysDataTo(row20Struct other) {

		other.CODIGO_UNICO = this.CODIGO_UNICO;
	            	other.LINEA = this.LINEA;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CODIGO_UNICO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LINEA = null;
           				} else {
           			    	this.LINEA = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.CODIGO_UNICO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LINEA = null;
           				} else {
           			    	this.LINEA = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
					// Long
				
						if(this.LINEA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LINEA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
					// Long
				
						if(this.LINEA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LINEA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.GENERICO_ID = (BigDecimal) ois.readObject();
					
						this.NOMBREGENERICO = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.GENERICO_ID = (BigDecimal) objectIn.readObject();
					
						this.NOMBREGENERICO = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.GENERICO_ID);
					
						writeString(this.NOMBREGENERICO, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.GENERICO_ID);
					
						writeString(this.NOMBREGENERICO, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("GENERICO_ID="+String.valueOf(GENERICO_ID));
		sb.append(",NOMBREGENERICO="+NOMBREGENERICO);
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
		sb.append(",LINEA="+String.valueOf(LINEA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CODIGO_UNICO, other.CODIGO_UNICO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.LINEA, other.LINEA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row20Struct row20 = new row20Struct();




	
	/**
	 * [tAdvancedHash_row20 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row20", false);
		start_Hash.put("tAdvancedHash_row20", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row20";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row20");
					}
				
		int tos_count_tAdvancedHash_row20 = 0;
		

			   		// connection name:row20
			   		// source node:tHashInput_10 - inputs:(after_tHashInput_1) outputs:(row20,row20) | target node:tAdvancedHash_row20 - inputs:(row20) outputs:()
			   		// linked node: tMap_4 - inputs:(row17,row20) outputs:(parametrizacion)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row20 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct> tHash_Lookup_row20 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row20Struct>getLookup(matchingModeEnum_row20);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row20", tHash_Lookup_row20);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row20 begin ] stop
 */



	
	/**
	 * [tHashInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_10", false);
		start_Hash.put("tHashInput_10", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_10";
	
	
		int tos_count_tHashInput_10 = 0;
		


int nb_line_tHashInput_10 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_10=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row22Struct> tHashFile_tHashInput_10 = mf_tHashInput_10.getAdvancedMemoryHashFile("tHashFile_CargaMoleculasAcuerdo_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_10==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row22Struct> iterator_tHashInput_10 = tHashFile_tHashInput_10.iterator();
while (iterator_tHashInput_10.hasNext()) {
    row22Struct next_tHashInput_10 = iterator_tHashInput_10.next();

	row20.GENERICO_ID = next_tHashInput_10.GENERICO_ID;
	row20.NOMBREGENERICO = next_tHashInput_10.NOMBREGENERICO;
	row20.CODIGO_UNICO = next_tHashInput_10.CODIGO_UNICO;
	row20.LINEA = next_tHashInput_10.LINEA;

 



/**
 * [tHashInput_10 begin ] stop
 */
	
	/**
	 * [tHashInput_10 main ] start
	 */

	

	
	
	currentComponent="tHashInput_10";
	
	

 


	tos_count_tHashInput_10++;

/**
 * [tHashInput_10 main ] stop
 */
	
	/**
	 * [tHashInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_10";
	
	

 



/**
 * [tHashInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row20 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row20";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row20"
						
						);
					}
					


			   
			   

					row20Struct row20_HashRow = new row20Struct();
		   	   	   
				
				row20_HashRow.GENERICO_ID = row20.GENERICO_ID;
				
				row20_HashRow.NOMBREGENERICO = row20.NOMBREGENERICO;
				
				row20_HashRow.CODIGO_UNICO = row20.CODIGO_UNICO;
				
				row20_HashRow.LINEA = row20.LINEA;
				
			tHash_Lookup_row20.put(row20_HashRow);
			
            




 


	tos_count_tAdvancedHash_row20++;

/**
 * [tAdvancedHash_row20 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row20";
	
	

 



/**
 * [tAdvancedHash_row20 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row20 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row20";
	
	

 



/**
 * [tAdvancedHash_row20 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_10";
	
	

 



/**
 * [tHashInput_10 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_10 end ] start
	 */

	

	
	
	currentComponent="tHashInput_10";
	
	
    

		
			nb_line_tHashInput_10++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_CargaMoleculasAcuerdo_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_10_NB_LINE", nb_line_tHashInput_10);       

 

ok_Hash.put("tHashInput_10", true);
end_Hash.put("tHashInput_10", System.currentTimeMillis());




/**
 * [tHashInput_10 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row20 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row20";
	
	

tHash_Lookup_row20.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row20");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row20", true);
end_Hash.put("tAdvancedHash_row20", System.currentTimeMillis());




/**
 * [tAdvancedHash_row20 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_10 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_10";
	
	

 



/**
 * [tHashInput_10 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row20 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row20";
	
	

 



/**
 * [tAdvancedHash_row20 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_10_SUBPROCESS_STATE", 1);
	}
	


public static class row26Struct implements routines.system.IPersistableComparableLookupRow<row26Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal TFORMASFARMACEUTICAS_ID;

				public BigDecimal getTFORMASFARMACEUTICAS_ID () {
					return this.TFORMASFARMACEUTICAS_ID;
				}

				public Boolean TFORMASFARMACEUTICAS_IDIsNullable(){
				    return true;
				}
				public Boolean TFORMASFARMACEUTICAS_IDIsKey(){
				    return false;
				}
				public Integer TFORMASFARMACEUTICAS_IDLength(){
				    return null;
				}
				public Integer TFORMASFARMACEUTICAS_IDPrecision(){
				    return null;
				}
				public String TFORMASFARMACEUTICAS_IDDefault(){
				
					return null;
				
				}
				public String TFORMASFARMACEUTICAS_IDComment(){
				
				    return "";
				
				}
				public String TFORMASFARMACEUTICAS_IDPattern(){
				
					return "";
				
				}
				public String TFORMASFARMACEUTICAS_IDOriginalDbColumnName(){
				
					return "TFORMASFARMACEUTICAS_ID";
				
				}

				
			    public BigDecimal GENERICOS_ID;

				public BigDecimal getGENERICOS_ID () {
					return this.GENERICOS_ID;
				}

				public Boolean GENERICOS_IDIsNullable(){
				    return true;
				}
				public Boolean GENERICOS_IDIsKey(){
				    return false;
				}
				public Integer GENERICOS_IDLength(){
				    return null;
				}
				public Integer GENERICOS_IDPrecision(){
				    return null;
				}
				public String GENERICOS_IDDefault(){
				
					return null;
				
				}
				public String GENERICOS_IDComment(){
				
				    return "";
				
				}
				public String GENERICOS_IDPattern(){
				
					return "";
				
				}
				public String GENERICOS_IDOriginalDbColumnName(){
				
					return "GENERICOS_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.TFORMASFARMACEUTICAS_ID == null) ? 0 : this.TFORMASFARMACEUTICAS_ID.hashCode());
					
						result = prime * result + ((this.GENERICOS_ID == null) ? 0 : this.GENERICOS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row26Struct other = (row26Struct) obj;
		
						if (this.TFORMASFARMACEUTICAS_ID == null) {
							if (other.TFORMASFARMACEUTICAS_ID != null)
								return false;
						
						} else if (!this.TFORMASFARMACEUTICAS_ID.equals(other.TFORMASFARMACEUTICAS_ID))
						
							return false;
					
						if (this.GENERICOS_ID == null) {
							if (other.GENERICOS_ID != null)
								return false;
						
						} else if (!this.GENERICOS_ID.equals(other.GENERICOS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row26Struct other) {

		other.ID = this.ID;
	            other.TFORMASFARMACEUTICAS_ID = this.TFORMASFARMACEUTICAS_ID;
	            other.GENERICOS_ID = this.GENERICOS_ID;
	            
	}

	public void copyKeysDataTo(row26Struct other) {

		other.TFORMASFARMACEUTICAS_ID = this.TFORMASFARMACEUTICAS_ID;
	            	other.GENERICOS_ID = this.GENERICOS_ID;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.TFORMASFARMACEUTICAS_ID = (BigDecimal) dis.readObject();
					
						this.GENERICOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.TFORMASFARMACEUTICAS_ID = (BigDecimal) dis.readObject();
					
						this.GENERICOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.TFORMASFARMACEUTICAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GENERICOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TFORMASFARMACEUTICAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GENERICOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",TFORMASFARMACEUTICAS_ID="+String.valueOf(TFORMASFARMACEUTICAS_ID));
		sb.append(",GENERICOS_ID="+String.valueOf(GENERICOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row26Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.TFORMASFARMACEUTICAS_ID, other.TFORMASFARMACEUTICAS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.GENERICOS_ID, other.GENERICOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row26Struct row26 = new row26Struct();




	
	/**
	 * [tAdvancedHash_row26 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row26", false);
		start_Hash.put("tAdvancedHash_row26", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row26";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row26");
					}
				
		int tos_count_tAdvancedHash_row26 = 0;
		

			   		// connection name:row26
			   		// source node:tHashInput_9 - inputs:(after_tHashInput_7) outputs:(row26,row26) | target node:tAdvancedHash_row26 - inputs:(row26) outputs:()
			   		// linked node: tMap_7 - inputs:(row9,row26) outputs:(errorLogFormas,DatosValidos)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row26 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct> tHash_Lookup_row26 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row26Struct>getLookup(matchingModeEnum_row26);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row26", tHash_Lookup_row26);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row26 begin ] stop
 */



	
	/**
	 * [tHashInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_9", false);
		start_Hash.put("tHashInput_9", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_9";
	
	
		int tos_count_tHashInput_9 = 0;
		


int nb_line_tHashInput_9 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_9=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row14Struct> tHashFile_tHashInput_9 = mf_tHashInput_9.getAdvancedMemoryHashFile("tHashFile_CargaMoleculasAcuerdo_" + pid +"_tHashOutput_5");
if(tHashFile_tHashInput_9==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row14Struct> iterator_tHashInput_9 = tHashFile_tHashInput_9.iterator();
while (iterator_tHashInput_9.hasNext()) {
    row14Struct next_tHashInput_9 = iterator_tHashInput_9.next();

	row26.ID = next_tHashInput_9.ID;
	row26.TFORMASFARMACEUTICAS_ID = next_tHashInput_9.TFORMASFARMACEUTICAS_ID;
	row26.GENERICOS_ID = next_tHashInput_9.GENERICOS_ID;

 



/**
 * [tHashInput_9 begin ] stop
 */
	
	/**
	 * [tHashInput_9 main ] start
	 */

	

	
	
	currentComponent="tHashInput_9";
	
	

 


	tos_count_tHashInput_9++;

/**
 * [tHashInput_9 main ] stop
 */
	
	/**
	 * [tHashInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_9";
	
	

 



/**
 * [tHashInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row26 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row26";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row26"
						
						);
					}
					


			   
			   

					row26Struct row26_HashRow = new row26Struct();
		   	   	   
				
				row26_HashRow.ID = row26.ID;
				
				row26_HashRow.TFORMASFARMACEUTICAS_ID = row26.TFORMASFARMACEUTICAS_ID;
				
				row26_HashRow.GENERICOS_ID = row26.GENERICOS_ID;
				
			tHash_Lookup_row26.put(row26_HashRow);
			
            




 


	tos_count_tAdvancedHash_row26++;

/**
 * [tAdvancedHash_row26 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row26 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row26";
	
	

 



/**
 * [tAdvancedHash_row26 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row26 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row26";
	
	

 



/**
 * [tAdvancedHash_row26 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_9";
	
	

 



/**
 * [tHashInput_9 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_9 end ] start
	 */

	

	
	
	currentComponent="tHashInput_9";
	
	
    

		
			nb_line_tHashInput_9++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_CargaMoleculasAcuerdo_" + pid +"_tHashOutput_5");
	


	globalMap.put("tHashInput_9_NB_LINE", nb_line_tHashInput_9);       

 

ok_Hash.put("tHashInput_9", true);
end_Hash.put("tHashInput_9", System.currentTimeMillis());




/**
 * [tHashInput_9 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row26 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row26";
	
	

tHash_Lookup_row26.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row26");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row26", true);
end_Hash.put("tAdvancedHash_row26", System.currentTimeMillis());




/**
 * [tAdvancedHash_row26 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_9 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_9";
	
	

 



/**
 * [tHashInput_9 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row26 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row26";
	
	

 



/**
 * [tAdvancedHash_row26 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class mailStruct implements routines.system.IPersistableRow<mailStruct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(mailStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class salidaStruct implements routines.system.IPersistableRow<salidaStruct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(salidaStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row45Struct implements routines.system.IPersistableRow<row45Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row45Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row45Struct row45 = new row45Struct();
salidaStruct salida = new salidaStruct();
salidaStruct mail = salida;
row7Struct row7 = new row7Struct();







	
	/**
	 * [tJava_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_4", false);
		start_Hash.put("tJava_4", System.currentTimeMillis());
		
	
	currentComponent="tJava_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tJava_4 = 0;
		


context.FECHA_EJECUCION = TalendDate.getDate("DD/MM/YYYY");
context.ESTADO_EXEC = "Interrumpido";
 



/**
 * [tJava_4 begin ] stop
 */



	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"mail");
					}
				
		int tos_count_tRunJob_1 = 0;
		
class DealChildJobLibrary_tRunJob_1 {

	public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
		String classPathLine = "";
		String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
		if (isNeedAddLibsPath( crcMapPath)) {
			java.util.Map<String, String> crcMap = null;
			java.io.ObjectInputStream ois = new java.io.ObjectInputStream(new java.io.FileInputStream(crcMapPath)) {
				@Override
				public Class<?> resolveClass(java.io.ObjectStreamClass desc) throws java.io.IOException, ClassNotFoundException {
					if(!"java.util.HashMap".equals(desc.getName())) {
						throw new java.io.InvalidClassException("Unauthorized deserialization attempt : " + desc.getName());
					}
					return super.resolveClass(desc);
				}
			};
			crcMap = (java.util.Map<String, String>) ois.readObject();
			ois.close();
			classPathLine = addLibsPath(originalClassPathLine, crcMap);
		} else {
			classPathLine = originalClassPathLine;
		}
		return classPathLine;
	}
	
	private boolean isNeedAddLibsPath(String crcMapPath) {
		if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
			return false;
		}
		return true;
	}
	
	
	private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
		for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
			line = adaptLibPaths(line, entry);
		}
		return line;
	}
	
	private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
		String jarName = entry.getValue();
		String crc = entry.getKey();
		String libStringFinder = "../lib/" + jarName;
		if (line.contains(libStringFinder)) {
			line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
		} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
			line = line.replace(":$ROOT_PATH/" + jarName + ":", ":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
		} else if (line.contains(";" + jarName + ";")) {
			line = line.replace(";" + jarName + ";", ";../../../cache/lib/" + crc + "/" + jarName + ";");
		}
		return line;
	}
	
}
	DealChildJobLibrary_tRunJob_1 dealChildJobLibrary_tRunJob_1 = new DealChildJobLibrary_tRunJob_1();

	class JVMArgumentHelper_tRunJob_1 {
		
		
		
		private void addClasspath(java.util.List<String> target_argument_list, String job_origin_classpath) {
			
			String extra_classpath = null;
			String path_separator = System.getProperty("path.separator");
			if (path_separator != null && path_separator.length() > 1) {
				throw new RuntimeException("path separator should be single character");
			}
			
			if(extra_classpath!=null && !extra_classpath.isEmpty()) {
				if(extra_classpath.endsWith(path_separator)) {
					target_argument_list.add(extra_classpath+job_origin_classpath);
				} else if(extra_classpath.contains(path_separator)) {
					target_argument_list.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
				} else if(extra_classpath.endsWith(":")) {
					target_argument_list.add(extra_classpath.replace(":", path_separator)+job_origin_classpath);
				} else if(extra_classpath.endsWith(";")) {
					target_argument_list.add(extra_classpath.replace(";", path_separator)+job_origin_classpath);
				} else if(extra_classpath.contains(":")) {
					target_argument_list.add(concatStr(extra_classpath.replace(":", path_separator), path_separator, job_origin_classpath));
				} else if(extra_classpath.contains(";")) {
					target_argument_list.add(concatStr(extra_classpath.replace(";", path_separator), path_separator, job_origin_classpath));
				} else {
					target_argument_list.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
				}
				return;
			}
			
			target_argument_list.add(job_origin_classpath);
		}
		
		private String concatStr(String s1, String s2, String s3) {
			java.lang.StringBuilder strB = new java.lang.StringBuilder();
			strB.append(s1).append(s2).append(s3);
			return strB.toString();
		}
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child) {
			addArgumentsTo(target_argument_list, argument_from_child, false);
		}
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child, boolean isCP) {
			if(isCP) {
				addClasspath(target_argument_list, argument_from_child);
				return;
			}
		
			
			
			
			target_argument_list.add(argument_from_child);
			
		}
		
		
	}
	
	JVMArgumentHelper_tRunJob_1 jvm_argument_helper_tRunJob_1 = new JVMArgumentHelper_tRunJob_1();
	
	String audit_jar_path_tRunJob_1 = System.getProperty("classpath.extended");
	

 



/**
 * [tRunJob_1 begin ] stop
 */



	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"salida");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.LOGS_ERROR)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
        if(filetFileOutputDelimited_1.exists()){
            isFileGenerated_tFileOutputDelimited_1 = false;
        }
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("moment");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("root_pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("father_pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("project");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("job");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("context");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("priority");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("type");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("origin");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("message");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("code");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }


resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row45");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
	String var1;
	String var2;
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
salidaStruct salida_tmp = new salidaStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";
	
	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row45.type = lcm.getType();
		row45.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row45.priority = lcm.getPriority();
		row45.message = lcm.getMessage();
		row45.code = lcm.getCode();
		
		row45.moment = java.util.Calendar.getInstance().getTime();
	
    	row45.pid = pid;
		row45.root_pid = rootPid;
		row45.father_pid = fatherPid;
	
    	row45.project = projectName;
    	row45.job = jobName;
    	row45.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row45"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_5 = false;
		boolean mainRowRejected_tMap_5 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;
Var.var1 = context.FECHA_EJECUCION = TalendDate.getDate("DD/MM/YYYY"); ;
Var.var2 = context.ESTADO_EXEC = "Interrumpido";;// ###############################
        // ###############################
        // # Output tables

salida = null;


// # Output table : 'salida'
salida_tmp.moment = row45.moment;
salida_tmp.pid = row45.pid;
salida_tmp.root_pid = row45.root_pid;
salida_tmp.father_pid = row45.father_pid;
salida_tmp.project = row45.project;
salida_tmp.job = row45.job;
salida_tmp.context = row45.context;
salida_tmp.priority = row45.priority;
salida_tmp.type = row45.type;
salida_tmp.origin = row45.origin;
salida_tmp.message = row45.message;
salida_tmp.code = row45.code;
salida = salida_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "salida"
if(salida != null) { 



	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"salida"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(salida.moment != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(salida.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(salida.pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            salida.pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(salida.root_pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            salida.root_pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(salida.father_pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            salida.father_pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(salida.project != null) {
                        sb_tFileOutputDelimited_1.append(
                            salida.project
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(salida.job != null) {
                        sb_tFileOutputDelimited_1.append(
                            salida.job
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(salida.context != null) {
                        sb_tFileOutputDelimited_1.append(
                            salida.context
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(salida.priority != null) {
                        sb_tFileOutputDelimited_1.append(
                            salida.priority
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(salida.type != null) {
                        sb_tFileOutputDelimited_1.append(
                            salida.type
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(salida.origin != null) {
                        sb_tFileOutputDelimited_1.append(
                            salida.origin
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(salida.message != null) {
                        sb_tFileOutputDelimited_1.append(
                            salida.message
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(salida.code != null) {
                        sb_tFileOutputDelimited_1.append(
                            salida.code
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 
     mail = salida;


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */

	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"mail"
						
						);
					}
					
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
			
			String osName_tRunJob_1 = System.getProperty("os.name");
			if (osName_tRunJob_1 != null && osName_tRunJob_1.toLowerCase(java.util.Locale.US).startsWith("win")){
				
						paraList_tRunJob_1.add("java");
						String m2 = System.getProperty("talend.component.manager.m2.repository");
						if (m2 != null){
							paraList_tRunJob_1.add("-Dtalend.component.manager.m2.repository=" + m2);
						}
						
						if (Boolean.getBoolean("propagateLoggingConfiguration")) {
							String log4j1_config_tRunJob_1 = System.getProperty("log4j.configuration");
							if (log4j1_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_1);
							}
							String log4j2_config_tRunJob_1 = System.getProperty("log4j.configurationFile");
							if (log4j2_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_1);
							}
							if (log4j1_config_tRunJob_1 != null || log4j2_config_tRunJob_1 != null) {
								paraList_tRunJob_1.add("-DpropagateLoggingConfiguration=true");
							}
						}
						
						if(enableLogStash){
							System.getProperties().stringPropertyNames().stream()
								.filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
						}
							
						System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
					
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dtalend.component.manager.m2.repository=../lib");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");
		      				
              					String classpath_tRunJob_1_5 = ".;../lib/routines.jar;../lib/log4j-slf4j-impl-2.17.1.jar;../lib/log4j-api-2.17.1.jar;../lib/log4j-core-2.17.1.jar;../lib/activation-1.1.jar;../lib/jakarta.mail-1.6.7.jar;../lib/xpathutil-1.0.0.jar;../lib/slf4j-api-1.7.34.jar;../lib/crypto-utils-7.1.16.jar;../lib/jboss-marshalling-2.0.12.Final.jar;../lib/dom4j-2.1.3.jar;../lib/jaxen-1.1.6.jar;mail_old_0_3.jar;";
              					
              					if(audit_jar_path_tRunJob_1!=null && !audit_jar_path_tRunJob_1.isEmpty()) {
		      						classpath_tRunJob_1_5 += audit_jar_path_tRunJob_1;
		      					}
		      					
	        					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(classpath_tRunJob_1_5), true);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "med_cargue_moleculas_acuerdo.mail_old_0_3.Mail_old");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid="+pid);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid="+rootPid);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "%*");
		      				
			} else {
	      		
						paraList_tRunJob_1.add("java");
						String m2 = System.getProperty("talend.component.manager.m2.repository");
						if (m2 != null){
							paraList_tRunJob_1.add("-Dtalend.component.manager.m2.repository=" + m2);
						}
						
						if (Boolean.getBoolean("propagateLoggingConfiguration")) {
							String log4j1_config_tRunJob_1 = System.getProperty("log4j.configuration");
							if (log4j1_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_1);
							}
							String log4j2_config_tRunJob_1 = System.getProperty("log4j.configurationFile");
							if (log4j2_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_1);
							}
							if (log4j1_config_tRunJob_1 != null || log4j2_config_tRunJob_1 != null) {
								paraList_tRunJob_1.add("-DpropagateLoggingConfiguration=true");
							}
						}
						
						if(enableLogStash){
							System.getProperties().stringPropertyNames().stream()
								.filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
						}
							
						System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
					
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dtalend.component.manager.m2.repository=../lib");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");
		      				
		      					String classpath_tRunJob_1_5 = ".:$ROOT_PATH:$ROOT_PATH/../lib/routines.jar:$ROOT_PATH/../lib/log4j-slf4j-impl-2.17.1.jar:$ROOT_PATH/../lib/log4j-api-2.17.1.jar:$ROOT_PATH/../lib/log4j-core-2.17.1.jar:$ROOT_PATH/../lib/activation-1.1.jar:$ROOT_PATH/../lib/jakarta.mail-1.6.7.jar:$ROOT_PATH/../lib/xpathutil-1.0.0.jar:$ROOT_PATH/../lib/slf4j-api-1.7.34.jar:$ROOT_PATH/../lib/crypto-utils-7.1.16.jar:$ROOT_PATH/../lib/jboss-marshalling-2.0.12.Final.jar:$ROOT_PATH/../lib/dom4j-2.1.3.jar:$ROOT_PATH/../lib/jaxen-1.1.6.jar:$ROOT_PATH/mail_old_0_3.jar:";
		      					
		      					if(audit_jar_path_tRunJob_1!=null && !audit_jar_path_tRunJob_1.isEmpty()) {
		      						classpath_tRunJob_1_5 += audit_jar_path_tRunJob_1;
		      					}
		      					
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(classpath_tRunJob_1_5).replace("$ROOT_PATH",System.getProperty("user.dir")), true);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "med_cargue_moleculas_acuerdo.mail_old_0_3.Mail_old");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid="+pid);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid="+rootPid);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "$@");
		      				
			}

			
			
	  	
		if(enableLogStash){
			paraList_tRunJob_1.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + null);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_1 = null;

	
		obj_tRunJob_1 = mail.moment;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param moment=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param moment=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param moment=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("moment", obj_tRunJob_1);
	
		obj_tRunJob_1 = mail.project;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param project=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param project=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param project=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("project", obj_tRunJob_1);
	
		obj_tRunJob_1 = mail.job;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param job=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param job=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param job=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("job", obj_tRunJob_1);
	
		obj_tRunJob_1 = mail.context;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param context=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param context=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param context=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("context", obj_tRunJob_1);
	
		obj_tRunJob_1 = mail.origin;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param origin=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param origin=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param origin=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("origin", obj_tRunJob_1);
	
		obj_tRunJob_1 = mail.message;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param message=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param message=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param message=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("message", obj_tRunJob_1);
	
		obj_tRunJob_1 = "MedMoleculasAcuerdo";
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param TipoCarga=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param TipoCarga=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param TipoCarga=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("TipoCarga", obj_tRunJob_1);
	
	
				class ConsoleHelper_tRunJob_1 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",ioe.getMessage());
						            
									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line)
													.append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",ioe.getMessage());
						            
									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_1 consoleHelper_tRunJob_1 = new ConsoleHelper_tRunJob_1();

		Runtime runtime_tRunJob_1 = Runtime.getRuntime();
		Process ps_tRunJob_1 = null;
		
		//0 indicates normal termination
        int result_tRunJob_1;
        StringBuffer errorMsg_tRunJob_1 = new StringBuffer();
        try {
            ps_tRunJob_1 = runtime_tRunJob_1.exec((String[])paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));

            Thread normal_tRunJob_1 = consoleHelper_tRunJob_1.getNormalThread(ps_tRunJob_1);
            normal_tRunJob_1.start();

            Thread error_tRunJob_1 = consoleHelper_tRunJob_1.getErrorThread(ps_tRunJob_1, errorMsg_tRunJob_1);
            error_tRunJob_1.start();

            result_tRunJob_1 = ps_tRunJob_1.waitFor();
            normal_tRunJob_1.join();
            error_tRunJob_1.join();
        } catch (ThreadDeath tde) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",tde.getMessage());
            ps_tRunJob_1.destroy();
            throw tde;
        }

		globalMap.put("tRunJob_1_CHILD_RETURN_CODE",result_tRunJob_1);
		if(result_tRunJob_1 != 0){
   			globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",errorMsg_tRunJob_1.toString());
			  
	    		throw new RuntimeException("Child job returns " + result_tRunJob_1 + ". It doesn't terminate normally.\n" + errorMsg_tRunJob_1.toString());
			
  		}

		

 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 



/**
 * [tRunJob_1 process_data_begin ] stop
 */

	
	/**
	 * [tJava_4 main ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					

 


	tos_count_tJava_4++;

/**
 * [tJava_4 main ] stop
 */
	
	/**
	 * [tJava_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 process_data_begin ] stop
 */
	
	/**
	 * [tJava_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 process_data_end ] stop
 */



	
	/**
	 * [tRunJob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 



/**
 * [tRunJob_1 process_data_end ] stop
 */



	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */

} // End of branch "salida"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	
	}
} catch (Exception e_tLogCatcher_1) {
globalMap.put("tLogCatcher_1_ERROR_MESSAGE",e_tLogCatcher_1.getMessage());
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row45");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"salida");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */

	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"mail");
			  	}
			  	
 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */

	
	/**
	 * [tJava_4 end ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tJava_4", true);
end_Hash.put("tJava_4", System.currentTimeMillis());




/**
 * [tJava_4 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */

	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	
	
 



/**
 * [tRunJob_1 finally ] stop
 */

	
	/**
	 * [tJava_4 finally ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";
	
	
		int tos_count_tJava_1 = 0;
		


context.FECHA_EJECUCION = TalendDate.getDate("DD/MM/YYYY");
context.HORA_INICIO = TalendDate.getDate("HH:mm:ss");



 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tFileInputXML_1Process(globalMap);



/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String Host;

				public String getHost () {
					return this.Host;
				}

				public Boolean HostIsNullable(){
				    return true;
				}
				public Boolean HostIsKey(){
				    return true;
				}
				public Integer HostLength(){
				    return 13;
				}
				public Integer HostPrecision(){
				    return 0;
				}
				public String HostDefault(){
				
					return null;
				
				}
				public String HostComment(){
				
				    return "";
				
				}
				public String HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HostOriginalDbColumnName(){
				
					return "Host";
				
				}

				
			    public String Port;

				public String getPort () {
					return this.Port;
				}

				public Boolean PortIsNullable(){
				    return true;
				}
				public Boolean PortIsKey(){
				    return true;
				}
				public Integer PortLength(){
				    return 4;
				}
				public Integer PortPrecision(){
				    return 0;
				}
				public String PortDefault(){
				
					return null;
				
				}
				public String PortComment(){
				
				    return "";
				
				}
				public String PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PortOriginalDbColumnName(){
				
					return "Port";
				
				}

				
			    public String Sid;

				public String getSid () {
					return this.Sid;
				}

				public Boolean SidIsNullable(){
				    return true;
				}
				public Boolean SidIsKey(){
				    return true;
				}
				public Integer SidLength(){
				    return 4;
				}
				public Integer SidPrecision(){
				    return 0;
				}
				public String SidDefault(){
				
					return null;
				
				}
				public String SidComment(){
				
				    return "";
				
				}
				public String SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SidOriginalDbColumnName(){
				
					return "Sid";
				
				}

				
			    public String Schema;

				public String getSchema () {
					return this.Schema;
				}

				public Boolean SchemaIsNullable(){
				    return true;
				}
				public Boolean SchemaIsKey(){
				    return false;
				}
				public Integer SchemaLength(){
				    return 8;
				}
				public Integer SchemaPrecision(){
				    return 0;
				}
				public String SchemaDefault(){
				
					return null;
				
				}
				public String SchemaComment(){
				
				    return "";
				
				}
				public String SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SchemaOriginalDbColumnName(){
				
					return "Schema";
				
				}

				
			    public String User;

				public String getUser () {
					return this.User;
				}

				public Boolean UserIsNullable(){
				    return true;
				}
				public Boolean UserIsKey(){
				    return false;
				}
				public Integer UserLength(){
				    return 12;
				}
				public Integer UserPrecision(){
				    return 0;
				}
				public String UserDefault(){
				
					return null;
				
				}
				public String UserComment(){
				
				    return "";
				
				}
				public String UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UserOriginalDbColumnName(){
				
					return "User";
				
				}

				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}

				public Boolean PasswordIsNullable(){
				    return true;
				}
				public Boolean PasswordIsKey(){
				    return false;
				}
				public Integer PasswordLength(){
				    return 12;
				}
				public Integer PasswordPrecision(){
				    return 0;
				}
				public String PasswordDefault(){
				
					return null;
				
				}
				public String PasswordComment(){
				
				    return "";
				
				}
				public String PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordOriginalDbColumnName(){
				
					return "Password";
				
				}

				
			    public String PathStorage;

				public String getPathStorage () {
					return this.PathStorage;
				}

				public Boolean PathStorageIsNullable(){
				    return true;
				}
				public Boolean PathStorageIsKey(){
				    return false;
				}
				public Integer PathStorageLength(){
				    return 0;
				}
				public Integer PathStoragePrecision(){
				    return 0;
				}
				public String PathStorageDefault(){
				
					return null;
				
				}
				public String PathStorageComment(){
				
				    return "";
				
				}
				public String PathStoragePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PathStorageOriginalDbColumnName(){
				
					return "PathStorage";
				
				}

				
			    public String SMTPHost;

				public String getSMTPHost () {
					return this.SMTPHost;
				}

				public Boolean SMTPHostIsNullable(){
				    return true;
				}
				public Boolean SMTPHostIsKey(){
				    return false;
				}
				public Integer SMTPHostLength(){
				    return 14;
				}
				public Integer SMTPHostPrecision(){
				    return 0;
				}
				public String SMTPHostDefault(){
				
					return null;
				
				}
				public String SMTPHostComment(){
				
				    return "";
				
				}
				public String SMTPHostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPHostOriginalDbColumnName(){
				
					return "SMTPHost";
				
				}

				
			    public String SMTPPort;

				public String getSMTPPort () {
					return this.SMTPPort;
				}

				public Boolean SMTPPortIsNullable(){
				    return true;
				}
				public Boolean SMTPPortIsKey(){
				    return false;
				}
				public Integer SMTPPortLength(){
				    return 3;
				}
				public Integer SMTPPortPrecision(){
				    return 0;
				}
				public String SMTPPortDefault(){
				
					return null;
				
				}
				public String SMTPPortComment(){
				
				    return "";
				
				}
				public String SMTPPortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPPortOriginalDbColumnName(){
				
					return "SMTPPort";
				
				}

				
			    public String UsernameMail;

				public String getUsernameMail () {
					return this.UsernameMail;
				}

				public Boolean UsernameMailIsNullable(){
				    return true;
				}
				public Boolean UsernameMailIsKey(){
				    return false;
				}
				public Integer UsernameMailLength(){
				    return 34;
				}
				public Integer UsernameMailPrecision(){
				    return 0;
				}
				public String UsernameMailDefault(){
				
					return null;
				
				}
				public String UsernameMailComment(){
				
				    return "";
				
				}
				public String UsernameMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UsernameMailOriginalDbColumnName(){
				
					return "UsernameMail";
				
				}

				
			    public String PasswordMail;

				public String getPasswordMail () {
					return this.PasswordMail;
				}

				public Boolean PasswordMailIsNullable(){
				    return true;
				}
				public Boolean PasswordMailIsKey(){
				    return false;
				}
				public Integer PasswordMailLength(){
				    return 13;
				}
				public Integer PasswordMailPrecision(){
				    return 0;
				}
				public String PasswordMailDefault(){
				
					return null;
				
				}
				public String PasswordMailComment(){
				
				    return "";
				
				}
				public String PasswordMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordMailOriginalDbColumnName(){
				
					return "PasswordMail";
				
				}

				
			    public String ServiceName;

				public String getServiceName () {
					return this.ServiceName;
				}

				public Boolean ServiceNameIsNullable(){
				    return true;
				}
				public Boolean ServiceNameIsKey(){
				    return false;
				}
				public Integer ServiceNameLength(){
				    return null;
				}
				public Integer ServiceNamePrecision(){
				    return null;
				}
				public String ServiceNameDefault(){
				
					return null;
				
				}
				public String ServiceNameComment(){
				
				    return "";
				
				}
				public String ServiceNamePattern(){
				
					return "";
				
				}
				public String ServiceNameOriginalDbColumnName(){
				
					return "ServiceName";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.Host == null) ? 0 : this.Host.hashCode());
					
						result = prime * result + ((this.Port == null) ? 0 : this.Port.hashCode());
					
						result = prime * result + ((this.Sid == null) ? 0 : this.Sid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row1Struct other = (row1Struct) obj;
		
						if (this.Host == null) {
							if (other.Host != null)
								return false;
						
						} else if (!this.Host.equals(other.Host))
						
							return false;
					
						if (this.Port == null) {
							if (other.Port != null)
								return false;
						
						} else if (!this.Port.equals(other.Port))
						
							return false;
					
						if (this.Sid == null) {
							if (other.Sid != null)
								return false;
						
						} else if (!this.Sid.equals(other.Sid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row1Struct other) {

		other.Host = this.Host;
	            other.Port = this.Port;
	            other.Sid = this.Sid;
	            other.Schema = this.Schema;
	            other.User = this.User;
	            other.Password = this.Password;
	            other.PathStorage = this.PathStorage;
	            other.SMTPHost = this.SMTPHost;
	            other.SMTPPort = this.SMTPPort;
	            other.UsernameMail = this.UsernameMail;
	            other.PasswordMail = this.PasswordMail;
	            other.ServiceName = this.ServiceName;
	            
	}

	public void copyKeysDataTo(row1Struct other) {

		other.Host = this.Host;
	            	other.Port = this.Port;
	            	other.Sid = this.Sid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.PathStorage = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
					this.ServiceName = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.PathStorage = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
					this.ServiceName = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.PathStorage,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.PathStorage,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Host="+Host);
		sb.append(",Port="+Port);
		sb.append(",Sid="+Sid);
		sb.append(",Schema="+Schema);
		sb.append(",User="+User);
		sb.append(",Password="+Password);
		sb.append(",PathStorage="+PathStorage);
		sb.append(",SMTPHost="+SMTPHost);
		sb.append(",SMTPPort="+SMTPPort);
		sb.append(",UsernameMail="+UsernameMail);
		sb.append(",PasswordMail="+PasswordMail);
		sb.append(",ServiceName="+ServiceName);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Host, other.Host);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Port, other.Port);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Sid, other.Sid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tJavaRow_2 = 0;
		

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tFileInputXML_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_1", false);
		start_Hash.put("tFileInputXML_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_1";
	
	
		int tos_count_tFileInputXML_1 = 0;
		

	

int nb_line_tFileInputXML_1 = 0;

	String os_tFileInputXML_1 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_1=false;
	if(os_tFileInputXML_1.indexOf("windows") > -1 || os_tFileInputXML_1.indexOf("nt") > -1){
		isWindows_tFileInputXML_1=true;
	}
class NameSpaceTool_tFileInputXML_1 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_1{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getStringValue().isEmpty();
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_1 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_1 = null;
try {
	filename_tFileInputXML_1 = context.ORIGEN;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_1 != null && filename_tFileInputXML_1 instanceof String && filename_tFileInputXML_1.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_1){
		filename_tFileInputXML_1 = filename_tFileInputXML_1.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_1 = true;
org.dom4j.Document doc_tFileInputXML_1 = null;
java.io.Closeable toClose_tFileInputXML_1 = null;
try{
	if(filename_tFileInputXML_1 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_1 = (java.io.InputStream)filename_tFileInputXML_1;
		toClose_tFileInputXML_1 = inputStream_tFileInputXML_1;
		doc_tFileInputXML_1 = reader_tFileInputXML_1.read(inputStream_tFileInputXML_1);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_1 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_1)),"UTF-8");
		toClose_tFileInputXML_1 = unicodeReader_tFileInputXML_1;
		org.xml.sax.InputSource in_tFileInputXML_1= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_1);
		doc_tFileInputXML_1 = reader_tFileInputXML_1.read(in_tFileInputXML_1);
	}
}catch(java.lang.Exception e){
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_1 = false;
} finally {
	if(toClose_tFileInputXML_1!=null) {
		toClose_tFileInputXML_1.close();
	}
}
if(isValidFile_tFileInputXML_1){
NameSpaceTool_tFileInputXML_1 nsTool_tFileInputXML_1 = new NameSpaceTool_tFileInputXML_1();
nsTool_tFileInputXML_1.countNSMap(doc_tFileInputXML_1.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_1 = nsTool_tFileInputXML_1.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_1 = doc_tFileInputXML_1.createXPath(nsTool_tFileInputXML_1.addDefaultNSPrefix("/connectionStrings"));  
x_tFileInputXML_1.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1); 

java.util.List<org.dom4j.Node> nodeList_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)x_tFileInputXML_1.selectNodes(doc_tFileInputXML_1);	
XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();
String str_tFileInputXML_1 = "";
org.dom4j.Node node_tFileInputXML_1 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_1=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_1{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_1 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Host","/connectionStrings"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	org.dom4j.XPath xpath_1 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Port","/connectionStrings"));
	xpath_1.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(1,xpath_1);
			
	org.dom4j.XPath xpath_2 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Sid","/connectionStrings"));
	xpath_2.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(2,xpath_2);
			
	org.dom4j.XPath xpath_3 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Schema","/connectionStrings"));
	xpath_3.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(3,xpath_3);
			
	org.dom4j.XPath xpath_4 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("User","/connectionStrings"));
	xpath_4.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(4,xpath_4);
			
	org.dom4j.XPath xpath_5 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Password","/connectionStrings"));
	xpath_5.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(5,xpath_5);
			
	org.dom4j.XPath xpath_6 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("PathStorage","/connectionStrings"));
	xpath_6.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(6,xpath_6);
			
	org.dom4j.XPath xpath_7 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("SMTPHost","/connectionStrings"));
	xpath_7.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(7,xpath_7);
			
	org.dom4j.XPath xpath_8 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("SMTPPort","/connectionStrings"));
	xpath_8.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(8,xpath_8);
			
	org.dom4j.XPath xpath_9 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("UsernameMail","/connectionStrings"));
	xpath_9.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(9,xpath_9);
			
	org.dom4j.XPath xpath_10 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("PasswordMail","/connectionStrings"));
	xpath_10.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(10,xpath_10);
			
	org.dom4j.XPath xpath_11 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("ServiceName","/connectionStrings"));
	xpath_11.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(11,xpath_11);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_1 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_1 xPathUtil_tFileInputXML_1 = new XPathUtil_tFileInputXML_1();
	xPathUtil_tFileInputXML_1.initXPaths(xpaths_tFileInputXML_1, nsTool_tFileInputXML_1, xmlNameSpaceMap_tFileInputXML_1);
for (org.dom4j.Node temp_tFileInputXML_1: nodeList_tFileInputXML_1) {
	if (nb_line_tFileInputXML_1>=1) {
	
		break;
	}
		nb_line_tFileInputXML_1++;
		
	row1 = null;			
	boolean whetherReject_tFileInputXML_1 = false;
	row1 = new row1Struct();
	try{
    Object obj0_tFileInputXML_1 = xpaths_tFileInputXML_1.get(0).evaluate(temp_tFileInputXML_1);
    if(obj0_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj0_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj0_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj0_tFileInputXML_1 instanceof String || obj0_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj0_tFileInputXML_1);
    } else if(obj0_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Host =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Host ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Host =null;
									}else{
		row1.Host = str_tFileInputXML_1;
	}
    Object obj1_tFileInputXML_1 = xpaths_tFileInputXML_1.get(1).evaluate(temp_tFileInputXML_1);
    if(obj1_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj1_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj1_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj1_tFileInputXML_1 instanceof String || obj1_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj1_tFileInputXML_1);
    } else if(obj1_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj1_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Port =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Port ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Port =null;
									}else{
		row1.Port = str_tFileInputXML_1;
	}
    Object obj2_tFileInputXML_1 = xpaths_tFileInputXML_1.get(2).evaluate(temp_tFileInputXML_1);
    if(obj2_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj2_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj2_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj2_tFileInputXML_1 instanceof String || obj2_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj2_tFileInputXML_1);
    } else if(obj2_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj2_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Sid =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Sid ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Sid =null;
									}else{
		row1.Sid = str_tFileInputXML_1;
	}
    Object obj3_tFileInputXML_1 = xpaths_tFileInputXML_1.get(3).evaluate(temp_tFileInputXML_1);
    if(obj3_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj3_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj3_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj3_tFileInputXML_1 instanceof String || obj3_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj3_tFileInputXML_1);
    } else if(obj3_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj3_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Schema =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Schema ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Schema =null;
									}else{
		row1.Schema = str_tFileInputXML_1;
	}
    Object obj4_tFileInputXML_1 = xpaths_tFileInputXML_1.get(4).evaluate(temp_tFileInputXML_1);
    if(obj4_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj4_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj4_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj4_tFileInputXML_1 instanceof String || obj4_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj4_tFileInputXML_1);
    } else if(obj4_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj4_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.User =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.User ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.User =null;
									}else{
		row1.User = str_tFileInputXML_1;
	}
    Object obj5_tFileInputXML_1 = xpaths_tFileInputXML_1.get(5).evaluate(temp_tFileInputXML_1);
    if(obj5_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj5_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj5_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj5_tFileInputXML_1 instanceof String || obj5_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj5_tFileInputXML_1);
    } else if(obj5_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj5_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Password =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Password ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Password =null;
									}else{
		row1.Password = str_tFileInputXML_1;
	}
    Object obj6_tFileInputXML_1 = xpaths_tFileInputXML_1.get(6).evaluate(temp_tFileInputXML_1);
    if(obj6_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj6_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj6_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj6_tFileInputXML_1 instanceof String || obj6_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj6_tFileInputXML_1);
    } else if(obj6_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj6_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.PathStorage =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.PathStorage ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.PathStorage =null;
									}else{
		row1.PathStorage = str_tFileInputXML_1;
	}
    Object obj7_tFileInputXML_1 = xpaths_tFileInputXML_1.get(7).evaluate(temp_tFileInputXML_1);
    if(obj7_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj7_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj7_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj7_tFileInputXML_1 instanceof String || obj7_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj7_tFileInputXML_1);
    } else if(obj7_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj7_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.SMTPHost =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.SMTPHost ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.SMTPHost =null;
									}else{
		row1.SMTPHost = str_tFileInputXML_1;
	}
    Object obj8_tFileInputXML_1 = xpaths_tFileInputXML_1.get(8).evaluate(temp_tFileInputXML_1);
    if(obj8_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj8_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj8_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj8_tFileInputXML_1 instanceof String || obj8_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj8_tFileInputXML_1);
    } else if(obj8_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj8_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.SMTPPort =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.SMTPPort ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.SMTPPort =null;
									}else{
		row1.SMTPPort = str_tFileInputXML_1;
	}
    Object obj9_tFileInputXML_1 = xpaths_tFileInputXML_1.get(9).evaluate(temp_tFileInputXML_1);
    if(obj9_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj9_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj9_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj9_tFileInputXML_1 instanceof String || obj9_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj9_tFileInputXML_1);
    } else if(obj9_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj9_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.UsernameMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.UsernameMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.UsernameMail =null;
									}else{
		row1.UsernameMail = str_tFileInputXML_1;
	}
    Object obj10_tFileInputXML_1 = xpaths_tFileInputXML_1.get(10).evaluate(temp_tFileInputXML_1);
    if(obj10_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj10_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj10_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj10_tFileInputXML_1 instanceof String || obj10_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj10_tFileInputXML_1);
    } else if(obj10_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj10_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.PasswordMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.PasswordMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.PasswordMail =null;
									}else{
		row1.PasswordMail = str_tFileInputXML_1;
	}
    Object obj11_tFileInputXML_1 = xpaths_tFileInputXML_1.get(11).evaluate(temp_tFileInputXML_1);
    if(obj11_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj11_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj11_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj11_tFileInputXML_1 instanceof String || obj11_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj11_tFileInputXML_1);
    } else if(obj11_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj11_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.ServiceName =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.ServiceName ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.ServiceName =null;
									}else{
		row1.ServiceName = str_tFileInputXML_1;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_1 = true;
                System.err.println(e.getMessage());
                row1 = null;
    }
			
			

 



/**
 * [tFileInputXML_1 begin ] stop
 */
	
	/**
	 * [tFileInputXML_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 


	tos_count_tFileInputXML_1++;

/**
 * [tFileInputXML_1 main ] stop
 */
	
	/**
	 * [tFileInputXML_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

    context.Host = row1.Host;
context.Port = row1.Port;
context.Sid = row1.Sid;
context.User = row1.User;
context.ServiceName = row1.ServiceName;
context.Password = row1.Password;
context.Schema = row1.Schema;

context.acuerdo_id = null;
globalMap.put("archivo_salida",new java.io.ByteArrayOutputStream());
System.out.println(context.Host);
System.out.println(context.Port);
System.out.println(context.Sid);
System.out.println(context.User);
System.out.println(context.Password);
System.out.println(context.Schema);

    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputXML_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	


}
	}
	globalMap.put("tFileInputXML_1_NB_LINE",nb_line_tFileInputXML_1);

	

 

ok_Hash.put("tFileInputXML_1", true);
end_Hash.put("tFileInputXML_1", System.currentTimeMillis());




/**
 * [tFileInputXML_1 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tOracleConnection_2Process(globalMap);



/**
 * [tJavaRow_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_2", false);
		start_Hash.put("tOracleConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_2";
	
	
		int tos_count_tOracleConnection_2 = 0;
		
	

	
        String url_tOracleConnection_2 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.Host + ")(port=" + context.Port + "))(connect_data=(service_name=" + context.ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_2", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_2 = context.User;
	
	
		
	final String decryptedPassword_tOracleConnection_2 = context.Password; 
		String dbPwd_tOracleConnection_2 = decryptedPassword_tOracleConnection_2;
	
	
	java.sql.Connection conn_tOracleConnection_2 = null;
	
		
			String driverClass_tOracleConnection_2 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_2 = java.lang.Class.forName(driverClass_tOracleConnection_2);
			globalMap.put("driverClass_tOracleConnection_2", driverClass_tOracleConnection_2);
		
			conn_tOracleConnection_2 = java.sql.DriverManager.getConnection(url_tOracleConnection_2,dbUser_tOracleConnection_2,dbPwd_tOracleConnection_2);

		globalMap.put("conn_tOracleConnection_2", conn_tOracleConnection_2);
	if (null != conn_tOracleConnection_2) {
		
			conn_tOracleConnection_2.setAutoCommit(true);
	}
        globalMap.put("host_" + "tOracleConnection_2",context.Host);
        globalMap.put("port_" + "tOracleConnection_2",context.Port);
        globalMap.put("dbname_" + "tOracleConnection_2",context.ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_2", context.Schema);
	globalMap.put("username_" + "tOracleConnection_2",context.User);
	globalMap.put("password_" + "tOracleConnection_2",dbPwd_tOracleConnection_2);

 



/**
 * [tOracleConnection_2 begin ] stop
 */
	
	/**
	 * [tOracleConnection_2 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 


	tos_count_tOracleConnection_2++;

/**
 * [tOracleConnection_2 main ] stop
 */
	
	/**
	 * [tOracleConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_2 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 

ok_Hash.put("tOracleConnection_2", true);
end_Hash.put("tOracleConnection_2", System.currentTimeMillis());




/**
 * [tOracleConnection_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleConnection_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk25", 0, "ok");
								} 
							
							tOracleRow_6Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_2_SUBPROCESS_STATE", 1);
	}
	


public void tDie_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_1", false);
		start_Hash.put("tDie_1", System.currentTimeMillis());
		
	
	currentComponent="tDie_1";
	
	
		int tos_count_tDie_1 = 0;
		

 



/**
 * [tDie_1 begin ] stop
 */
	
	/**
	 * [tDie_1 main ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_1", 5, "the end is near", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_1_DIE_PRIORITY", 5);
	System.err.println("the end is near");
	
	globalMap.put("tDie_1_DIE_MESSAGE", "the end is near");
	globalMap.put("tDie_1_DIE_MESSAGES", "the end is near");
	
	} catch (Exception | Error e_tDie_1) {
	    globalMap.put("tDie_1_ERROR_MESSAGE",e_tDie_1.getMessage());
		logIgnoredError(String.format("tDie_1 - tDie failed to log message due to internal error: %s", e_tDie_1), e_tDie_1);
	}
	
	currentComponent = "tDie_1";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_1_DIE_CODE", errorCode);        

    
	if(true){	
		TDieException e_tDie_1 = new TDieException();

		

		throw e_tDie_1;
	}

 


	tos_count_tDie_1++;

/**
 * [tDie_1 main ] stop
 */
	
	/**
	 * [tDie_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 process_data_begin ] stop
 */
	
	/**
	 * [tDie_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 process_data_end ] stop
 */
	
	/**
	 * [tDie_1 end ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 

ok_Hash.put("tDie_1", true);
end_Hash.put("tDie_1", System.currentTimeMillis());




/**
 * [tDie_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_1 finally ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleRow_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleRow_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleRow_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleRow_6", false);
		start_Hash.put("tOracleRow_6", System.currentTimeMillis());
		
	
	currentComponent="tOracleRow_6";
	
	
		int tos_count_tOracleRow_6 = 0;
		

	java.sql.Connection conn_tOracleRow_6 = null;
	String query_tOracleRow_6 = "";
	boolean whetherReject_tOracleRow_6 = false;
	int count_tOracleRow_6 = 0;
				conn_tOracleRow_6 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
			
        resourceMap.put("conn_tOracleRow_6", conn_tOracleRow_6);
        java.sql.Statement stmt_tOracleRow_6 = conn_tOracleRow_6.createStatement();
        resourceMap.put("stmt_tOracleRow_6", stmt_tOracleRow_6);

 



/**
 * [tOracleRow_6 begin ] stop
 */
	
	/**
	 * [tOracleRow_6 main ] start
	 */

	

	
	
	currentComponent="tOracleRow_6";
	
	

query_tOracleRow_6 = "TRUNCATE TABLE MED_NUSOREGISTRO_TEMP";
whetherReject_tOracleRow_6 = false;
globalMap.put("tOracleRow_6_QUERY",query_tOracleRow_6);
try {
		stmt_tOracleRow_6.execute(query_tOracleRow_6);
		
	} catch (java.lang.Exception e) {
globalMap.put("tOracleRow_6_ERROR_MESSAGE",e.getMessage());
		whetherReject_tOracleRow_6 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tOracleRow_6) {
		
	}
	

 


	tos_count_tOracleRow_6++;

/**
 * [tOracleRow_6 main ] stop
 */
	
	/**
	 * [tOracleRow_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleRow_6";
	
	

 



/**
 * [tOracleRow_6 process_data_begin ] stop
 */
	
	/**
	 * [tOracleRow_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleRow_6";
	
	

 



/**
 * [tOracleRow_6 process_data_end ] stop
 */
	
	/**
	 * [tOracleRow_6 end ] start
	 */

	

	
	
	currentComponent="tOracleRow_6";
	
	

	globalMap.put("tOracleRow_6_NB_LINE", count_tOracleRow_6);
        stmt_tOracleRow_6.close();
        resourceMap.remove("stmt_tOracleRow_6");
    resourceMap.put("statementClosed_tOracleRow_6", true);
    resourceMap.put("finish_tOracleRow_6", true);

 

ok_Hash.put("tOracleRow_6", true);
end_Hash.put("tOracleRow_6", System.currentTimeMillis());




/**
 * [tOracleRow_6 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleRow_6:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk26", 0, "ok");
								} 
							
							tOracleRow_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleRow_6 finally ] start
	 */

	

	
	
	currentComponent="tOracleRow_6";
	
	

    if (resourceMap.get("statementClosed_tOracleRow_6") == null) {
            java.sql.Statement stmtToClose_tOracleRow_6 = null;
            if ((stmtToClose_tOracleRow_6 = (java.sql.Statement) resourceMap.remove("stmt_tOracleRow_6")) != null) {
                stmtToClose_tOracleRow_6.close();
            }
    }
 



/**
 * [tOracleRow_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleRow_6_SUBPROCESS_STATE", 1);
	}
	


public void tOracleRow_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleRow_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleRow_2", false);
		start_Hash.put("tOracleRow_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleRow_2";
	
	
		int tos_count_tOracleRow_2 = 0;
		

	java.sql.Connection conn_tOracleRow_2 = null;
	String query_tOracleRow_2 = "";
	boolean whetherReject_tOracleRow_2 = false;
	int count_tOracleRow_2 = 0;
				conn_tOracleRow_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
			
        resourceMap.put("conn_tOracleRow_2", conn_tOracleRow_2);
        java.sql.Statement stmt_tOracleRow_2 = conn_tOracleRow_2.createStatement();
        resourceMap.put("stmt_tOracleRow_2", stmt_tOracleRow_2);

 



/**
 * [tOracleRow_2 begin ] stop
 */
	
	/**
	 * [tOracleRow_2 main ] start
	 */

	

	
	
	currentComponent="tOracleRow_2";
	
	

query_tOracleRow_2 = "TRUNCATE TABLE MED_SIGLA_USO_TEMP";
whetherReject_tOracleRow_2 = false;
globalMap.put("tOracleRow_2_QUERY",query_tOracleRow_2);
try {
		stmt_tOracleRow_2.execute(query_tOracleRow_2);
		
	} catch (java.lang.Exception e) {
globalMap.put("tOracleRow_2_ERROR_MESSAGE",e.getMessage());
		whetherReject_tOracleRow_2 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tOracleRow_2) {
		
	}
	

 


	tos_count_tOracleRow_2++;

/**
 * [tOracleRow_2 main ] stop
 */
	
	/**
	 * [tOracleRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleRow_2";
	
	

 



/**
 * [tOracleRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleRow_2";
	
	

 



/**
 * [tOracleRow_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleRow_2 end ] start
	 */

	

	
	
	currentComponent="tOracleRow_2";
	
	

	globalMap.put("tOracleRow_2_NB_LINE", count_tOracleRow_2);
        stmt_tOracleRow_2.close();
        resourceMap.remove("stmt_tOracleRow_2");
    resourceMap.put("statementClosed_tOracleRow_2", true);
    resourceMap.put("finish_tOracleRow_2", true);

 

ok_Hash.put("tOracleRow_2", true);
end_Hash.put("tOracleRow_2", System.currentTimeMillis());




/**
 * [tOracleRow_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleRow_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk28", 0, "ok");
								} 
							
							tOracleRow_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleRow_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleRow_2";
	
	

    if (resourceMap.get("statementClosed_tOracleRow_2") == null) {
            java.sql.Statement stmtToClose_tOracleRow_2 = null;
            if ((stmtToClose_tOracleRow_2 = (java.sql.Statement) resourceMap.remove("stmt_tOracleRow_2")) != null) {
                stmtToClose_tOracleRow_2.close();
            }
    }
 



/**
 * [tOracleRow_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleRow_2_SUBPROCESS_STATE", 1);
	}
	


public void tOracleRow_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleRow_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleRow_3", false);
		start_Hash.put("tOracleRow_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleRow_3";
	
	
		int tos_count_tOracleRow_3 = 0;
		

	java.sql.Connection conn_tOracleRow_3 = null;
	String query_tOracleRow_3 = "";
	boolean whetherReject_tOracleRow_3 = false;
	int count_tOracleRow_3 = 0;
				conn_tOracleRow_3 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
			
        resourceMap.put("conn_tOracleRow_3", conn_tOracleRow_3);
        java.sql.Statement stmt_tOracleRow_3 = conn_tOracleRow_3.createStatement();
        resourceMap.put("stmt_tOracleRow_3", stmt_tOracleRow_3);

 



/**
 * [tOracleRow_3 begin ] stop
 */
	
	/**
	 * [tOracleRow_3 main ] start
	 */

	

	
	
	currentComponent="tOracleRow_3";
	
	

query_tOracleRow_3 = "TRUNCATE TABLE MED_SIGLA_ESPECIALIDAD_TEMP";
whetherReject_tOracleRow_3 = false;
globalMap.put("tOracleRow_3_QUERY",query_tOracleRow_3);
try {
		stmt_tOracleRow_3.execute(query_tOracleRow_3);
		
	} catch (java.lang.Exception e) {
globalMap.put("tOracleRow_3_ERROR_MESSAGE",e.getMessage());
		whetherReject_tOracleRow_3 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tOracleRow_3) {
		
	}
	

 


	tos_count_tOracleRow_3++;

/**
 * [tOracleRow_3 main ] stop
 */
	
	/**
	 * [tOracleRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleRow_3";
	
	

 



/**
 * [tOracleRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tOracleRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleRow_3";
	
	

 



/**
 * [tOracleRow_3 process_data_end ] stop
 */
	
	/**
	 * [tOracleRow_3 end ] start
	 */

	

	
	
	currentComponent="tOracleRow_3";
	
	

	globalMap.put("tOracleRow_3_NB_LINE", count_tOracleRow_3);
        stmt_tOracleRow_3.close();
        resourceMap.remove("stmt_tOracleRow_3");
    resourceMap.put("statementClosed_tOracleRow_3", true);
    resourceMap.put("finish_tOracleRow_3", true);

 

ok_Hash.put("tOracleRow_3", true);
end_Hash.put("tOracleRow_3", System.currentTimeMillis());




/**
 * [tOracleRow_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleRow_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk27", 0, "ok");
								} 
							
							tOracleRow_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleRow_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleRow_3";
	
	

    if (resourceMap.get("statementClosed_tOracleRow_3") == null) {
            java.sql.Statement stmtToClose_tOracleRow_3 = null;
            if ((stmtToClose_tOracleRow_3 = (java.sql.Statement) resourceMap.remove("stmt_tOracleRow_3")) != null) {
                stmtToClose_tOracleRow_3.close();
            }
    }
 



/**
 * [tOracleRow_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleRow_3_SUBPROCESS_STATE", 1);
	}
	


public void tOracleRow_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleRow_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleRow_4", false);
		start_Hash.put("tOracleRow_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleRow_4";
	
	
		int tos_count_tOracleRow_4 = 0;
		

	java.sql.Connection conn_tOracleRow_4 = null;
	String query_tOracleRow_4 = "";
	boolean whetherReject_tOracleRow_4 = false;
	int count_tOracleRow_4 = 0;
				conn_tOracleRow_4 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
			
        resourceMap.put("conn_tOracleRow_4", conn_tOracleRow_4);
        java.sql.Statement stmt_tOracleRow_4 = conn_tOracleRow_4.createStatement();
        resourceMap.put("stmt_tOracleRow_4", stmt_tOracleRow_4);

 



/**
 * [tOracleRow_4 begin ] stop
 */
	
	/**
	 * [tOracleRow_4 main ] start
	 */

	

	
	
	currentComponent="tOracleRow_4";
	
	

query_tOracleRow_4 = "TRUNCATE TABLE MED_SIGLA_ADMIN_TEMP";
whetherReject_tOracleRow_4 = false;
globalMap.put("tOracleRow_4_QUERY",query_tOracleRow_4);
try {
		stmt_tOracleRow_4.execute(query_tOracleRow_4);
		
	} catch (java.lang.Exception e) {
globalMap.put("tOracleRow_4_ERROR_MESSAGE",e.getMessage());
		whetherReject_tOracleRow_4 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tOracleRow_4) {
		
	}
	

 


	tos_count_tOracleRow_4++;

/**
 * [tOracleRow_4 main ] stop
 */
	
	/**
	 * [tOracleRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleRow_4";
	
	

 



/**
 * [tOracleRow_4 process_data_begin ] stop
 */
	
	/**
	 * [tOracleRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleRow_4";
	
	

 



/**
 * [tOracleRow_4 process_data_end ] stop
 */
	
	/**
	 * [tOracleRow_4 end ] start
	 */

	

	
	
	currentComponent="tOracleRow_4";
	
	

	globalMap.put("tOracleRow_4_NB_LINE", count_tOracleRow_4);
        stmt_tOracleRow_4.close();
        resourceMap.remove("stmt_tOracleRow_4");
    resourceMap.put("statementClosed_tOracleRow_4", true);
    resourceMap.put("finish_tOracleRow_4", true);

 

ok_Hash.put("tOracleRow_4", true);
end_Hash.put("tOracleRow_4", System.currentTimeMillis());




/**
 * [tOracleRow_4 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleRow_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk29", 0, "ok");
								} 
							
							tOracleRow_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleRow_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleRow_4";
	
	

    if (resourceMap.get("statementClosed_tOracleRow_4") == null) {
            java.sql.Statement stmtToClose_tOracleRow_4 = null;
            if ((stmtToClose_tOracleRow_4 = (java.sql.Statement) resourceMap.remove("stmt_tOracleRow_4")) != null) {
                stmtToClose_tOracleRow_4.close();
            }
    }
 



/**
 * [tOracleRow_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleRow_4_SUBPROCESS_STATE", 1);
	}
	


public void tOracleRow_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleRow_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleRow_5", false);
		start_Hash.put("tOracleRow_5", System.currentTimeMillis());
		
	
	currentComponent="tOracleRow_5";
	
	
		int tos_count_tOracleRow_5 = 0;
		

	java.sql.Connection conn_tOracleRow_5 = null;
	String query_tOracleRow_5 = "";
	boolean whetherReject_tOracleRow_5 = false;
	int count_tOracleRow_5 = 0;
				conn_tOracleRow_5 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
			
        resourceMap.put("conn_tOracleRow_5", conn_tOracleRow_5);
        java.sql.Statement stmt_tOracleRow_5 = conn_tOracleRow_5.createStatement();
        resourceMap.put("stmt_tOracleRow_5", stmt_tOracleRow_5);

 



/**
 * [tOracleRow_5 begin ] stop
 */
	
	/**
	 * [tOracleRow_5 main ] start
	 */

	

	
	
	currentComponent="tOracleRow_5";
	
	

query_tOracleRow_5 = "TRUNCATE TABLE MED_SIGLA_FORMA_TEMP";
whetherReject_tOracleRow_5 = false;
globalMap.put("tOracleRow_5_QUERY",query_tOracleRow_5);
try {
		stmt_tOracleRow_5.execute(query_tOracleRow_5);
		
	} catch (java.lang.Exception e) {
globalMap.put("tOracleRow_5_ERROR_MESSAGE",e.getMessage());
		whetherReject_tOracleRow_5 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tOracleRow_5) {
		
	}
	

 


	tos_count_tOracleRow_5++;

/**
 * [tOracleRow_5 main ] stop
 */
	
	/**
	 * [tOracleRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleRow_5";
	
	

 



/**
 * [tOracleRow_5 process_data_begin ] stop
 */
	
	/**
	 * [tOracleRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleRow_5";
	
	

 



/**
 * [tOracleRow_5 process_data_end ] stop
 */
	
	/**
	 * [tOracleRow_5 end ] start
	 */

	

	
	
	currentComponent="tOracleRow_5";
	
	

	globalMap.put("tOracleRow_5_NB_LINE", count_tOracleRow_5);
        stmt_tOracleRow_5.close();
        resourceMap.remove("stmt_tOracleRow_5");
    resourceMap.put("statementClosed_tOracleRow_5", true);
    resourceMap.put("finish_tOracleRow_5", true);

 

ok_Hash.put("tOracleRow_5", true);
end_Hash.put("tOracleRow_5", System.currentTimeMillis());




/**
 * [tOracleRow_5 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleRow_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk30", 0, "ok");
								} 
							
							tOracleRow_7Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleRow_5 finally ] start
	 */

	

	
	
	currentComponent="tOracleRow_5";
	
	

    if (resourceMap.get("statementClosed_tOracleRow_5") == null) {
            java.sql.Statement stmtToClose_tOracleRow_5 = null;
            if ((stmtToClose_tOracleRow_5 = (java.sql.Statement) resourceMap.remove("stmt_tOracleRow_5")) != null) {
                stmtToClose_tOracleRow_5.close();
            }
    }
 



/**
 * [tOracleRow_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleRow_5_SUBPROCESS_STATE", 1);
	}
	


public void tOracleRow_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleRow_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleRow_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleRow_7", false);
		start_Hash.put("tOracleRow_7", System.currentTimeMillis());
		
	
	currentComponent="tOracleRow_7";
	
	
		int tos_count_tOracleRow_7 = 0;
		

	java.sql.Connection conn_tOracleRow_7 = null;
	String query_tOracleRow_7 = "";
	boolean whetherReject_tOracleRow_7 = false;
	int count_tOracleRow_7 = 0;
				conn_tOracleRow_7 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
			
        resourceMap.put("conn_tOracleRow_7", conn_tOracleRow_7);
        java.sql.Statement stmt_tOracleRow_7 = conn_tOracleRow_7.createStatement();
        resourceMap.put("stmt_tOracleRow_7", stmt_tOracleRow_7);

 



/**
 * [tOracleRow_7 begin ] stop
 */
	
	/**
	 * [tOracleRow_7 main ] start
	 */

	

	
	
	currentComponent="tOracleRow_7";
	
	

query_tOracleRow_7 = "TRUNCATE TABLE ERRORLOG_TEMP";
whetherReject_tOracleRow_7 = false;
globalMap.put("tOracleRow_7_QUERY",query_tOracleRow_7);
try {
		stmt_tOracleRow_7.execute(query_tOracleRow_7);
		
	} catch (java.lang.Exception e) {
globalMap.put("tOracleRow_7_ERROR_MESSAGE",e.getMessage());
		whetherReject_tOracleRow_7 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tOracleRow_7) {
		
	}
	

 


	tos_count_tOracleRow_7++;

/**
 * [tOracleRow_7 main ] stop
 */
	
	/**
	 * [tOracleRow_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleRow_7";
	
	

 



/**
 * [tOracleRow_7 process_data_begin ] stop
 */
	
	/**
	 * [tOracleRow_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleRow_7";
	
	

 



/**
 * [tOracleRow_7 process_data_end ] stop
 */
	
	/**
	 * [tOracleRow_7 end ] start
	 */

	

	
	
	currentComponent="tOracleRow_7";
	
	

	globalMap.put("tOracleRow_7_NB_LINE", count_tOracleRow_7);
        stmt_tOracleRow_7.close();
        resourceMap.remove("stmt_tOracleRow_7");
    resourceMap.put("statementClosed_tOracleRow_7", true);
    resourceMap.put("finish_tOracleRow_7", true);

 

ok_Hash.put("tOracleRow_7", true);
end_Hash.put("tOracleRow_7", System.currentTimeMillis());




/**
 * [tOracleRow_7 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleRow_7:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk32", 0, "ok");
								} 
							
							tOracleRow_8Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleRow_7 finally ] start
	 */

	

	
	
	currentComponent="tOracleRow_7";
	
	

    if (resourceMap.get("statementClosed_tOracleRow_7") == null) {
            java.sql.Statement stmtToClose_tOracleRow_7 = null;
            if ((stmtToClose_tOracleRow_7 = (java.sql.Statement) resourceMap.remove("stmt_tOracleRow_7")) != null) {
                stmtToClose_tOracleRow_7.close();
            }
    }
 



/**
 * [tOracleRow_7 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleRow_7_SUBPROCESS_STATE", 1);
	}
	


public void tOracleRow_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleRow_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleRow_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleRow_8", false);
		start_Hash.put("tOracleRow_8", System.currentTimeMillis());
		
	
	currentComponent="tOracleRow_8";
	
	
		int tos_count_tOracleRow_8 = 0;
		

	java.sql.Connection conn_tOracleRow_8 = null;
	String query_tOracleRow_8 = "";
	boolean whetherReject_tOracleRow_8 = false;
	int count_tOracleRow_8 = 0;
				conn_tOracleRow_8 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
			
        resourceMap.put("conn_tOracleRow_8", conn_tOracleRow_8);
        java.sql.Statement stmt_tOracleRow_8 = conn_tOracleRow_8.createStatement();
        resourceMap.put("stmt_tOracleRow_8", stmt_tOracleRow_8);

 



/**
 * [tOracleRow_8 begin ] stop
 */
	
	/**
	 * [tOracleRow_8 main ] start
	 */

	

	
	
	currentComponent="tOracleRow_8";
	
	

query_tOracleRow_8 = "TRUNCATE TABLE FORMAFARMACEUTICA_TEMP";
whetherReject_tOracleRow_8 = false;
globalMap.put("tOracleRow_8_QUERY",query_tOracleRow_8);
try {
		stmt_tOracleRow_8.execute(query_tOracleRow_8);
		
	} catch (java.lang.Exception e) {
globalMap.put("tOracleRow_8_ERROR_MESSAGE",e.getMessage());
		whetherReject_tOracleRow_8 = true;
		
				System.err.print(e.getMessage());
				
	}
	

 


	tos_count_tOracleRow_8++;

/**
 * [tOracleRow_8 main ] stop
 */
	
	/**
	 * [tOracleRow_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleRow_8";
	
	

 



/**
 * [tOracleRow_8 process_data_begin ] stop
 */
	
	/**
	 * [tOracleRow_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleRow_8";
	
	

 



/**
 * [tOracleRow_8 process_data_end ] stop
 */
	
	/**
	 * [tOracleRow_8 end ] start
	 */

	

	
	
	currentComponent="tOracleRow_8";
	
	

	globalMap.put("tOracleRow_8_NB_LINE", count_tOracleRow_8);
        stmt_tOracleRow_8.close();
        resourceMap.remove("stmt_tOracleRow_8");
    resourceMap.put("statementClosed_tOracleRow_8", true);
    resourceMap.put("finish_tOracleRow_8", true);

 

ok_Hash.put("tOracleRow_8", true);
end_Hash.put("tOracleRow_8", System.currentTimeMillis());




/**
 * [tOracleRow_8 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleRow_8 finally ] start
	 */

	

	
	
	currentComponent="tOracleRow_8";
	
	

    if (resourceMap.get("statementClosed_tOracleRow_8") == null) {
            java.sql.Statement stmtToClose_tOracleRow_8 = null;
            if ((stmtToClose_tOracleRow_8 = (java.sql.Statement) resourceMap.remove("stmt_tOracleRow_8")) != null) {
                stmtToClose_tOracleRow_8.close();
            }
    }
 



/**
 * [tOracleRow_8 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleRow_8_SUBPROCESS_STATE", 1);
	}
	


public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tJava_3Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";
	
	
		int tos_count_tJava_3 = 0;
		


context.HORA_FINAL = TalendDate.getDate("HH:mm:ss");

 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tFixedFlowInput_3Process(globalMap);
   			if (context.ErrorLog > 0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If4", 0, "true");
					}
				tOracleInput_21Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If4", 0, "false");
					}   	 
   				}



/**
 * [tJava_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tOracleRow_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}
	


public static class row38Struct implements routines.system.IPersistableRow<row38Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String FECHA_EJECUCION;

				public String getFECHA_EJECUCION () {
					return this.FECHA_EJECUCION;
				}

				public Boolean FECHA_EJECUCIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_EJECUCIONIsKey(){
				    return false;
				}
				public Integer FECHA_EJECUCIONLength(){
				    return null;
				}
				public Integer FECHA_EJECUCIONPrecision(){
				    return null;
				}
				public String FECHA_EJECUCIONDefault(){
				
					return null;
				
				}
				public String FECHA_EJECUCIONComment(){
				
				    return "";
				
				}
				public String FECHA_EJECUCIONPattern(){
				
					return "";
				
				}
				public String FECHA_EJECUCIONOriginalDbColumnName(){
				
					return "FECHA_EJECUCION";
				
				}

				
			    public String HORA_INICIO;

				public String getHORA_INICIO () {
					return this.HORA_INICIO;
				}

				public Boolean HORA_INICIOIsNullable(){
				    return true;
				}
				public Boolean HORA_INICIOIsKey(){
				    return false;
				}
				public Integer HORA_INICIOLength(){
				    return null;
				}
				public Integer HORA_INICIOPrecision(){
				    return null;
				}
				public String HORA_INICIODefault(){
				
					return null;
				
				}
				public String HORA_INICIOComment(){
				
				    return "";
				
				}
				public String HORA_INICIOPattern(){
				
					return "";
				
				}
				public String HORA_INICIOOriginalDbColumnName(){
				
					return "HORA_INICIO";
				
				}

				
			    public String HORA_FINAL;

				public String getHORA_FINAL () {
					return this.HORA_FINAL;
				}

				public Boolean HORA_FINALIsNullable(){
				    return true;
				}
				public Boolean HORA_FINALIsKey(){
				    return false;
				}
				public Integer HORA_FINALLength(){
				    return null;
				}
				public Integer HORA_FINALPrecision(){
				    return null;
				}
				public String HORA_FINALDefault(){
				
					return null;
				
				}
				public String HORA_FINALComment(){
				
				    return "";
				
				}
				public String HORA_FINALPattern(){
				
					return "";
				
				}
				public String HORA_FINALOriginalDbColumnName(){
				
					return "HORA_FINAL";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String JOBS;

				public String getJOBS () {
					return this.JOBS;
				}

				public Boolean JOBSIsNullable(){
				    return true;
				}
				public Boolean JOBSIsKey(){
				    return false;
				}
				public Integer JOBSLength(){
				    return null;
				}
				public Integer JOBSPrecision(){
				    return null;
				}
				public String JOBSDefault(){
				
					return null;
				
				}
				public String JOBSComment(){
				
				    return "";
				
				}
				public String JOBSPattern(){
				
					return "";
				
				}
				public String JOBSOriginalDbColumnName(){
				
					return "JOBS";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.FECHA_EJECUCION = readString(dis);
					
					this.HORA_INICIO = readString(dis);
					
					this.HORA_FINAL = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.JOBS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.FECHA_EJECUCION = readString(dis);
					
					this.HORA_INICIO = readString(dis);
					
					this.HORA_FINAL = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.JOBS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FECHA_EJECUCION,dos);
					
					// String
				
						writeString(this.HORA_INICIO,dos);
					
					// String
				
						writeString(this.HORA_FINAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.JOBS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FECHA_EJECUCION,dos);
					
					// String
				
						writeString(this.HORA_INICIO,dos);
					
					// String
				
						writeString(this.HORA_FINAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.JOBS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FECHA_EJECUCION="+FECHA_EJECUCION);
		sb.append(",HORA_INICIO="+HORA_INICIO);
		sb.append(",HORA_FINAL="+HORA_FINAL);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",JOBS="+JOBS);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row38Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row38Struct row38 = new row38Struct();




	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row38");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File(context.LOGS_EXECUTION)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
        if(filetFileOutputDelimited_2.exists()){
            isFileGenerated_tFileOutputDelimited_2 = false;
        }
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
                                    if(filetFileOutputDelimited_2.length()==0){
                                        outtFileOutputDelimited_2.write("FECHA_EJECUCION");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("HORA_INICIO");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("HORA_FINAL");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ESTADO");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("JOBS");
                                        outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.flush();
                                    }


resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_3", false);
		start_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_3";
	
	
		int tos_count_tFixedFlowInput_3 = 0;
		

	    for (int i_tFixedFlowInput_3 = 0 ; i_tFixedFlowInput_3 < 1 ; i_tFixedFlowInput_3++) {
	                	            	
    	            		row38.FECHA_EJECUCION = context.FECHA_EJECUCION;
    	            	        	            	
    	            		row38.HORA_INICIO = context.HORA_INICIO;
    	            	        	            	
    	            		row38.HORA_FINAL = context.HORA_FINAL;
    	            	        	            	
    	            		row38.ESTADO = context.ESTADO_EXEC;
    	            	        	            	
    	            		row38.JOBS = "MedMoleculasAcuerdo";
    	            	

 



/**
 * [tFixedFlowInput_3 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 


	tos_count_tFixedFlowInput_3++;

/**
 * [tFixedFlowInput_3 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row38"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(row38.FECHA_EJECUCION != null) {
                        sb_tFileOutputDelimited_2.append(
                            row38.FECHA_EJECUCION
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row38.HORA_INICIO != null) {
                        sb_tFileOutputDelimited_2.append(
                            row38.HORA_INICIO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row38.HORA_FINAL != null) {
                        sb_tFileOutputDelimited_2.append(
                            row38.HORA_FINAL
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row38.ESTADO != null) {
                        sb_tFileOutputDelimited_2.append(
                            row38.ESTADO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row38.JOBS != null) {
                        sb_tFileOutputDelimited_2.append(
                            row38.JOBS
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

        }
        globalMap.put("tFixedFlowInput_3_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_3", true);
end_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());




/**
 * [tFixedFlowInput_3 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	



		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row38");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_3 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row37Struct implements routines.system.IPersistableRow<row37Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String Mensaje;

				public String getMensaje () {
					return this.Mensaje;
				}

				public Boolean MensajeIsNullable(){
				    return true;
				}
				public Boolean MensajeIsKey(){
				    return false;
				}
				public Integer MensajeLength(){
				    return 500;
				}
				public Integer MensajePrecision(){
				    return null;
				}
				public String MensajeDefault(){
				
					return null;
				
				}
				public String MensajeComment(){
				
				    return "";
				
				}
				public String MensajePattern(){
				
					return "";
				
				}
				public String MensajeOriginalDbColumnName(){
				
					return "Mensaje";
				
				}

				
			    public Integer Linea;

				public Integer getLinea () {
					return this.Linea;
				}

				public Boolean LineaIsNullable(){
				    return true;
				}
				public Boolean LineaIsKey(){
				    return false;
				}
				public Integer LineaLength(){
				    return null;
				}
				public Integer LineaPrecision(){
				    return null;
				}
				public String LineaDefault(){
				
					return null;
				
				}
				public String LineaComment(){
				
				    return "";
				
				}
				public String LineaPattern(){
				
					return "";
				
				}
				public String LineaOriginalDbColumnName(){
				
					return "Linea";
				
				}

				
			    public String CODIGO_UNICO;

				public String getCODIGO_UNICO () {
					return this.CODIGO_UNICO;
				}

				public Boolean CODIGO_UNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_UNICOLength(){
				    return 150;
				}
				public Integer CODIGO_UNICOPrecision(){
				    return null;
				}
				public String CODIGO_UNICODefault(){
				
					return null;
				
				}
				public String CODIGO_UNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_UNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_UNICOOriginalDbColumnName(){
				
					return "CODIGO_UNICO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
						this.Linea = readInteger(dis);
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.Mensaje = readString(dis);
					
						this.Linea = readInteger(dis);
					
					this.CODIGO_UNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Integer
				
						writeInteger(this.Linea,dos);
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Mensaje,dos);
					
					// Integer
				
						writeInteger(this.Linea,dos);
					
					// String
				
						writeString(this.CODIGO_UNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Mensaje="+Mensaje);
		sb.append(",Linea="+String.valueOf(Linea));
		sb.append(",CODIGO_UNICO="+CODIGO_UNICO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row37Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_21Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_21_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row37Struct row37 = new row37Struct();




	
	/**
	 * [tFileOutputExcel_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_3", false);
		start_Hash.put("tFileOutputExcel_3", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row37");
					}
				
		int tos_count_tFileOutputExcel_3 = 0;
		


		
		int columnIndex_tFileOutputExcel_3 = 0;
		boolean headerIsInserted_tFileOutputExcel_3 = false;
		
		
		int nb_line_tFileOutputExcel_3 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_3 = new org.talend.ExcelTool();
		xlsxTool_tFileOutputExcel_3.setUseSharedStringTable(false);
		
    xlsxTool_tFileOutputExcel_3.setTruncateExceedingCharacters(false);
		xlsxTool_tFileOutputExcel_3.setSheet("LogAcuerdo");
		xlsxTool_tFileOutputExcel_3.setAppend(false,false, false);
		xlsxTool_tFileOutputExcel_3.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_3.setXY(false,0,0,false);
		
		xlsxTool_tFileOutputExcel_3.prepareStream();
		
		xlsxTool_tFileOutputExcel_3.setFont("");
		
		if (xlsxTool_tFileOutputExcel_3.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_3.addRow();
		
		xlsxTool_tFileOutputExcel_3.addCellValue("Mensaje");
		
		xlsxTool_tFileOutputExcel_3.addCellValue("Linea");
		
		xlsxTool_tFileOutputExcel_3.addCellValue("CODIGO_UNICO");
		
		nb_line_tFileOutputExcel_3++;
		headerIsInserted_tFileOutputExcel_3 = true;
		
	}
		

 



/**
 * [tFileOutputExcel_3 begin ] stop
 */



	
	/**
	 * [tOracleInput_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_21", false);
		start_Hash.put("tOracleInput_21", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_21";
	
	
		int tos_count_tOracleInput_21 = 0;
		
	


	
		    int nb_line_tOracleInput_21 = 0;
		    java.sql.Connection conn_tOracleInput_21 = null;
				conn_tOracleInput_21 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_21 = false;
				boolean isConnectionWrapped_tOracleInput_21 = !(conn_tOracleInput_21 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_21.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_21 = null;
                if (isConnectionWrapped_tOracleInput_21) {
					unwrappedOraConn_tOracleInput_21 = conn_tOracleInput_21.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_21 != null) {
                        isTimeZoneNull_tOracleInput_21 = (unwrappedOraConn_tOracleInput_21.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_21 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_21).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_21) {
					java.sql.Statement stmtGetTZ_tOracleInput_21 = conn_tOracleInput_21.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_21 = stmtGetTZ_tOracleInput_21.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_21 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_21.next()) {
						sessionTimezone_tOracleInput_21 = rsGetTZ_tOracleInput_21.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_21 && unwrappedOraConn_tOracleInput_21 != null) {
                        unwrappedOraConn_tOracleInput_21.setSessionTimeZone(sessionTimezone_tOracleInput_21);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_21).setSessionTimeZone(sessionTimezone_tOracleInput_21);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_21 = conn_tOracleInput_21.createStatement();

		    String dbquery_tOracleInput_21 = "SELECT\nMENSAJE,\nLINEA,\nCODIGO_UNICO\nFROM ERRORLOG_TEMP ORDER BY LINEA ASC ";
		    

		    globalMap.put("tOracleInput_21_QUERY",dbquery_tOracleInput_21);

		    java.sql.ResultSet rs_tOracleInput_21 = null;

		    try {
		    	rs_tOracleInput_21 = stmt_tOracleInput_21.executeQuery(dbquery_tOracleInput_21);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_21 = rs_tOracleInput_21.getMetaData();
		    	int colQtyInRs_tOracleInput_21 = rsmd_tOracleInput_21.getColumnCount();

		    String tmpContent_tOracleInput_21 = null;
		    
		    
		    while (rs_tOracleInput_21.next()) {
		        nb_line_tOracleInput_21++;
		        
							if(colQtyInRs_tOracleInput_21 < 1) {
								row37.Mensaje = null;
							} else {
	                         		
        	row37.Mensaje = routines.system.JDBCUtil.getString(rs_tOracleInput_21, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_21 < 2) {
								row37.Linea = null;
							} else {
		                          
					if(rs_tOracleInput_21.getObject(2) != null) {
						row37.Linea = rs_tOracleInput_21.getInt(2);
					} else {
				
						row37.Linea = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_21 < 3) {
								row37.CODIGO_UNICO = null;
							} else {
	                         		
        	row37.CODIGO_UNICO = routines.system.JDBCUtil.getString(rs_tOracleInput_21, 3, false);
		                    }
					




 



/**
 * [tOracleInput_21 begin ] stop
 */
	
	/**
	 * [tOracleInput_21 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_21";
	
	

 


	tos_count_tOracleInput_21++;

/**
 * [tOracleInput_21 main ] stop
 */
	
	/**
	 * [tOracleInput_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_21";
	
	

 



/**
 * [tOracleInput_21 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputExcel_3 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row37"
						
						);
					}
					

				xlsxTool_tFileOutputExcel_3.addRow();
									   				
	    				if(row37.Mensaje != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row37.Mensaje));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row37.Linea != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(Double.parseDouble(String.valueOf(row37.Linea)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row37.CODIGO_UNICO != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row37.CODIGO_UNICO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_3++;
				
 


	tos_count_tFileOutputExcel_3++;

/**
 * [tFileOutputExcel_3 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";
	
	

 



/**
 * [tFileOutputExcel_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";
	
	

 



/**
 * [tFileOutputExcel_3 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_21";
	
	

 



/**
 * [tOracleInput_21 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_21 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_21";
	
	

}
}finally{
	if (rs_tOracleInput_21 != null) {
		rs_tOracleInput_21.close();
	}
	if (stmt_tOracleInput_21 != null) {
		stmt_tOracleInput_21.close();
	}
}

globalMap.put("tOracleInput_21_NB_LINE",nb_line_tOracleInput_21);
 

ok_Hash.put("tOracleInput_21", true);
end_Hash.put("tOracleInput_21", System.currentTimeMillis());




/**
 * [tOracleInput_21 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_3 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";
	
	

							columnIndex_tFileOutputExcel_3 = 0;
						
					xlsxTool_tFileOutputExcel_3.setColAutoSize(columnIndex_tFileOutputExcel_3);
	
							columnIndex_tFileOutputExcel_3 = 1;
						
					xlsxTool_tFileOutputExcel_3.setColAutoSize(columnIndex_tFileOutputExcel_3);
	
							columnIndex_tFileOutputExcel_3 = 2;
						
					xlsxTool_tFileOutputExcel_3.setColAutoSize(columnIndex_tFileOutputExcel_3);
	
	
	
	
			xlsxTool_tFileOutputExcel_3.writeExcel((java.io.OutputStream)globalMap.get("archivo_salida"));
	
		if(headerIsInserted_tFileOutputExcel_3 && nb_line_tFileOutputExcel_3 > 0){
			nb_line_tFileOutputExcel_3 = nb_line_tFileOutputExcel_3 -1;
		}
		globalMap.put("tFileOutputExcel_3_NB_LINE",nb_line_tFileOutputExcel_3);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row37");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_3", true);
end_Hash.put("tFileOutputExcel_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk10", 0, "ok");
				}
				tJava_5Process(globalMap);



/**
 * [tFileOutputExcel_3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_21 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_21";
	
	

 



/**
 * [tOracleInput_21 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_3 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";
	
	

 



/**
 * [tFileOutputExcel_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_21_SUBPROCESS_STATE", 1);
	}
	


public static class logCargaStruct implements routines.system.IPersistableRow<logCargaStruct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal Id_;

				public BigDecimal getId_ () {
					return this.Id_;
				}

				public Boolean Id_IsNullable(){
				    return true;
				}
				public Boolean Id_IsKey(){
				    return true;
				}
				public Integer Id_Length(){
				    return 0;
				}
				public Integer Id_Precision(){
				    return null;
				}
				public String Id_Default(){
				
					return "SALUDSIS\".\"ISEQ$$_108067\".nextval";
				
				}
				public String Id_Comment(){
				
				    return "PK - Llave primaria";
				
				}
				public String Id_Pattern(){
				
					return "";
				
				}
				public String Id_OriginalDbColumnName(){
				
					return "Id_";
				
				}

				
			    public Object Log_;

				public Object getLog_ () {
					return this.Log_;
				}

				public Boolean Log_IsNullable(){
				    return true;
				}
				public Boolean Log_IsKey(){
				    return false;
				}
				public Integer Log_Length(){
				    return 4000;
				}
				public Integer Log_Precision(){
				    return 0;
				}
				public String Log_Default(){
				
					return null;
				
				}
				public String Log_Comment(){
				
				    return "Descripcion del log de errores";
				
				}
				public String Log_Pattern(){
				
					return "";
				
				}
				public String Log_OriginalDbColumnName(){
				
					return "Log_";
				
				}

				
			    public String Extension_;

				public String getExtension_ () {
					return this.Extension_;
				}

				public Boolean Extension_IsNullable(){
				    return true;
				}
				public Boolean Extension_IsKey(){
				    return false;
				}
				public Integer Extension_Length(){
				    return null;
				}
				public Integer Extension_Precision(){
				    return null;
				}
				public String Extension_Default(){
				
					return null;
				
				}
				public String Extension_Comment(){
				
				    return "";
				
				}
				public String Extension_Pattern(){
				
					return "";
				
				}
				public String Extension_OriginalDbColumnName(){
				
					return "Extension_";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.Id_ == null) ? 0 : this.Id_.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final logCargaStruct other = (logCargaStruct) obj;
		
						if (this.Id_ == null) {
							if (other.Id_ != null)
								return false;
						
						} else if (!this.Id_.equals(other.Id_))
						
							return false;
					

		return true;
    }

	public void copyDataTo(logCargaStruct other) {

		other.Id_ = this.Id_;
	            other.Log_ = this.Log_;
	            other.Extension_ = this.Extension_;
	            
	}

	public void copyKeysDataTo(logCargaStruct other) {

		other.Id_ = this.Id_;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.Id_ = (BigDecimal) dis.readObject();
					
						this.Log_ = (Object) dis.readObject();
					
					this.Extension_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.Id_ = (BigDecimal) dis.readObject();
					
						this.Log_ = (Object) dis.readObject();
					
					this.Extension_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.Id_);
					
					// Object
				
       			    	dos.writeObject(this.Log_);
					
					// String
				
						writeString(this.Extension_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Id_);
					
					// Object
				
						dos.clearInstanceCache();
						dos.writeObject(this.Log_);
					
					// String
				
						writeString(this.Extension_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id_="+String.valueOf(Id_));
		sb.append(",Log_="+String.valueOf(Log_));
		sb.append(",Extension_="+Extension_);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(logCargaStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Id_, other.Id_);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row32Struct implements routines.system.IPersistableRow<row32Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public String NO_DATA;

				public String getNO_DATA () {
					return this.NO_DATA;
				}

				public Boolean NO_DATAIsNullable(){
				    return true;
				}
				public Boolean NO_DATAIsKey(){
				    return false;
				}
				public Integer NO_DATALength(){
				    return null;
				}
				public Integer NO_DATAPrecision(){
				    return null;
				}
				public String NO_DATADefault(){
				
					return null;
				
				}
				public String NO_DATAComment(){
				
				    return "";
				
				}
				public String NO_DATAPattern(){
				
					return "";
				
				}
				public String NO_DATAOriginalDbColumnName(){
				
					return "NO_DATA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length) {
				if(length < 1024 && commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo.length == 0) {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[1024];
				} else {
   					commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length);
			strReturn = new String(commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.NO_DATA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
					this.NO_DATA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NO_DATA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NO_DATA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NO_DATA="+NO_DATA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row32Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tJava_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row32Struct row32 = new row32Struct();
logCargaStruct logCarga = new logCargaStruct();





	
	/**
	 * [tOracleSP_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_2", false);
		start_Hash.put("tOracleSP_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"logCarga");
					}
				
		int tos_count_tOracleSP_2 = 0;
		

	java.sql.Connection connection_tOracleSP_2 = null;
	connection_tOracleSP_2 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_2");
	

java.sql.CallableStatement statement_tOracleSP_2 = connection_tOracleSP_2.prepareCall("{call " + "MED.UpdLogCargaMasiva" + "(?,?,?)}");

java.sql.Timestamp tmpDate_tOracleSP_2;
String tmpString_tOracleSP_2;

 



/**
 * [tOracleSP_2 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row32");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
logCargaStruct logCarga_tmp = new logCargaStruct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tJava_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_5", false);
		start_Hash.put("tJava_5", System.currentTimeMillis());
		
	
	currentComponent="tJava_5";
	
	
		int tos_count_tJava_5 = 0;
		


context.Salida = globalMap.get("archivo_salida");
//System.out.println(context.Salida);
 



/**
 * [tJava_5 begin ] stop
 */
	
	/**
	 * [tJava_5 main ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 


	tos_count_tJava_5++;

/**
 * [tJava_5 main ] stop
 */
	
	/**
	 * [tJava_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 



/**
 * [tJava_5 process_data_begin ] stop
 */

	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row32"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_6 = false;
		boolean mainRowRejected_tMap_6 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

logCarga = null;


// # Output table : 'logCarga'
logCarga_tmp.Id_ = context.carga_id;
logCarga_tmp.Log_ = ((ByteArrayOutputStream)context.Salida).toByteArray(); ;
logCarga_tmp.Extension_ = "xlsx";
logCarga = logCarga_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "logCarga"
if(logCarga != null) { 



	
	/**
	 * [tOracleSP_2 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"logCarga"
						
						);
					}
					

			// code for the argument 1 (Id_) of type 'IN AUTOMAPPING'
    					if (logCarga.Id_ == null) {
    						statement_tOracleSP_2.setNull(1, java.sql.Types.OTHER);
    					} else {
    					
                        statement_tOracleSP_2.setBigDecimal(1, logCarga.Id_);
    					}
    					
			// code for the argument 2 (Log_) of type 'IN AUTOMAPPING'
    					if (logCarga.Log_ == null) {
    						statement_tOracleSP_2.setNull(2, java.sql.Types.OTHER);
    					} else {
    					
                        statement_tOracleSP_2.setObject(2, logCarga.Log_);
    					}
    					
			// code for the argument 3 (Extension_) of type 'IN AUTOMAPPING'
    					if (logCarga.Extension_ == null) {
    						statement_tOracleSP_2.setNull(3, java.sql.Types.VARCHAR);
    					} else {
    					
                        statement_tOracleSP_2.setString(3, logCarga.Extension_);
    					}
    					
		statement_tOracleSP_2.execute();
		

 


	tos_count_tOracleSP_2++;

/**
 * [tOracleSP_2 main ] stop
 */
	
	/**
	 * [tOracleSP_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	

 



/**
 * [tOracleSP_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleSP_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	

 



/**
 * [tOracleSP_2 process_data_end ] stop
 */

} // End of branch "logCarga"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_end ] stop
 */



	
	/**
	 * [tJava_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 



/**
 * [tJava_5 process_data_end ] stop
 */
	
	/**
	 * [tJava_5 end ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 

ok_Hash.put("tJava_5", true);
end_Hash.put("tJava_5", System.currentTimeMillis());




/**
 * [tJava_5 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row32");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tOracleSP_2 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	


	statement_tOracleSP_2.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"logCarga");
			  	}
			  	
 

ok_Hash.put("tOracleSP_2", true);
end_Hash.put("tOracleSP_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tFixedFlowInput_1Process(globalMap);



/**
 * [tOracleSP_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_5 finally ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 



/**
 * [tJava_5 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tOracleSP_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	

 



/**
 * [tOracleSP_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_5_SUBPROCESS_STATE", 1);
	}
	


public static class row33Struct implements routines.system.IPersistableRow<row33Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	
			    public Object Result;

				public Object getResult () {
					return this.Result;
				}

				public Boolean ResultIsNullable(){
				    return true;
				}
				public Boolean ResultIsKey(){
				    return false;
				}
				public Integer ResultLength(){
				    return null;
				}
				public Integer ResultPrecision(){
				    return null;
				}
				public String ResultDefault(){
				
					return null;
				
				}
				public String ResultComment(){
				
				    return "";
				
				}
				public String ResultPattern(){
				
					return "";
				
				}
				public String ResultOriginalDbColumnName(){
				
					return "Result";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.Result = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		
						this.Result = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.Result);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Object
				
						dos.clearInstanceCache();
						dos.writeObject(this.Result);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Result="+String.valueOf(Result));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row33Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row33Struct row33 = new row33Struct();




	
	/**
	 * [tBufferOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tBufferOutput_1", false);
		start_Hash.put("tBufferOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tBufferOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row33");
					}
				
		int tos_count_tBufferOutput_1 = 0;
		

 



/**
 * [tBufferOutput_1 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_1", false);
		start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_1";
	
	
		int tos_count_tFixedFlowInput_1 = 0;
		

	    for (int i_tFixedFlowInput_1 = 0 ; i_tFixedFlowInput_1 < 1 ; i_tFixedFlowInput_1++) {
	                	            	
    	            		row33.Result = null;        	            	
    	            	

 



/**
 * [tFixedFlowInput_1 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 


	tos_count_tFixedFlowInput_1++;

/**
 * [tFixedFlowInput_1 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tBufferOutput_1 main ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row33"
						
						);
					}
					



String[] row_tBufferOutput_1=new String[]{"",};		
	    if(row33.Result != null){
	        
	            row_tBufferOutput_1[0] = String.valueOf(row33.Result);
	                        			    
	    }else{
	    	row_tBufferOutput_1[0] = null;
	    }
	globalBuffer.add(row_tBufferOutput_1);	
	
 


	tos_count_tBufferOutput_1++;

/**
 * [tBufferOutput_1 main ] stop
 */
	
	/**
	 * [tBufferOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";
	
	

 



/**
 * [tBufferOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tBufferOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";
	
	

 



/**
 * [tBufferOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

        }
        globalMap.put("tFixedFlowInput_1_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_1", true);
end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());




/**
 * [tFixedFlowInput_1 end ] stop
 */

	
	/**
	 * [tBufferOutput_1 end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row33");
			  	}
			  	
 

ok_Hash.put("tBufferOutput_1", true);
end_Hash.put("tBufferOutput_1", System.currentTimeMillis());




/**
 * [tBufferOutput_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_1 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 finally ] stop
 */

	
	/**
	 * [tBufferOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";
	
	

 



/**
 * [tBufferOutput_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row31Struct implements routines.system.IPersistableRow<row31Struct> {
    final static byte[] commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];
    static byte[] commonByteArray_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGUE_MOLECULAS_ACUERDO_CargaMoleculasAcuerdo) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row31Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row31Struct row31 = new row31Struct();




	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row31");
					}
				
		int tos_count_tJava_2 = 0;
		


context.HORA_FINAL = TalendDate.getDate("HH:mm:ss");

 



/**
 * [tJava_2 begin ] stop
 */



	
	/**
	 * [tOracleRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleRow_1", false);
		start_Hash.put("tOracleRow_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleRow_1";
	
	
		int tos_count_tOracleRow_1 = 0;
		

	java.sql.Connection conn_tOracleRow_1 = null;
	String query_tOracleRow_1 = "";
	boolean whetherReject_tOracleRow_1 = false;
	int count_tOracleRow_1 = 0;
				conn_tOracleRow_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
			
        resourceMap.put("conn_tOracleRow_1", conn_tOracleRow_1);
        java.sql.Statement stmt_tOracleRow_1 = conn_tOracleRow_1.createStatement();
        resourceMap.put("stmt_tOracleRow_1", stmt_tOracleRow_1);

 



/**
 * [tOracleRow_1 begin ] stop
 */
	
	/**
	 * [tOracleRow_1 main ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

		row31 = null;
		
query_tOracleRow_1 = "update MED_CARGASMASIVAS\n       set DESCRIPCION = 'Log cargado',\n           ESTADO      = 'Finalizado',\n           F"
+"FINAL      = SYSDATE\n     where id = " + context.carga_id;
whetherReject_tOracleRow_1 = false;
globalMap.put("tOracleRow_1_QUERY",query_tOracleRow_1);
try {
		stmt_tOracleRow_1.execute(query_tOracleRow_1);
		
	} catch (java.lang.Exception e) {
globalMap.put("tOracleRow_1_ERROR_MESSAGE",e.getMessage());
		whetherReject_tOracleRow_1 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tOracleRow_1) {
		
					row31 = new row31Struct();
					
	}
	

 


	tos_count_tOracleRow_1++;

/**
 * [tOracleRow_1 main ] stop
 */
	
	/**
	 * [tOracleRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

 



/**
 * [tOracleRow_1 process_data_begin ] stop
 */
// Start of branch "row31"
if(row31 != null) { 



	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row31"
						
						);
					}
					

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_end ] stop
 */

} // End of branch "row31"




	
	/**
	 * [tOracleRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

 



/**
 * [tOracleRow_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleRow_1 end ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

	globalMap.put("tOracleRow_1_NB_LINE", count_tOracleRow_1);
        stmt_tOracleRow_1.close();
        resourceMap.remove("stmt_tOracleRow_1");
    resourceMap.put("statementClosed_tOracleRow_1", true);
    resourceMap.put("finish_tOracleRow_1", true);

 

ok_Hash.put("tOracleRow_1", true);
end_Hash.put("tOracleRow_1", System.currentTimeMillis());




/**
 * [tOracleRow_1 end ] stop
 */

	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row31");
			  	}
			  	
 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tOracleClose_1Process(globalMap);



/**
 * [tJava_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleRow_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

    if (resourceMap.get("statementClosed_tOracleRow_1") == null) {
            java.sql.Statement stmtToClose_tOracleRow_1 = null;
            if ((stmtToClose_tOracleRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tOracleRow_1")) != null) {
                stmtToClose_tOracleRow_1.close();
            }
    }
 



/**
 * [tOracleRow_1 finally ] stop
 */

	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleRow_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleClose_1", false);
		start_Hash.put("tOracleClose_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleClose_1";
	
	
		int tos_count_tOracleClose_1 = 0;
		

 



/**
 * [tOracleClose_1 begin ] stop
 */
	
	/**
	 * [tOracleClose_1 main ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

	java.sql.Connection conn_tOracleClose_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
	
	if(conn_tOracleClose_1 != null && !conn_tOracleClose_1.isClosed())
	{
		
			conn_tOracleClose_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tOracleConnection_2"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tOracleClose_1++;

/**
 * [tOracleClose_1 main ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleClose_1 end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 

ok_Hash.put("tOracleClose_1", true);
end_Hash.put("tOracleClose_1", System.currentTimeMillis());




/**
 * [tOracleClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleClose_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final CargaMoleculasAcuerdo CargaMoleculasAcuerdoClass = new CargaMoleculasAcuerdo();

        int exitCode = CargaMoleculasAcuerdoClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = (String[][])globalBuffer.toArray(new String[globalBuffer.size()][]);

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        		hastBufferOutput = true;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = CargaMoleculasAcuerdo.class.getClassLoader().getResourceAsStream("med_cargue_moleculas_acuerdo/cargamoleculasacuerdo_3_3/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = CargaMoleculasAcuerdo.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }
            
            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("BODEGA", "id_String");
                        if(context.getStringValue("BODEGA") == null) {
                            context.BODEGA = null;
                        } else {
                            context.BODEGA=(String) context.getProperty("BODEGA");
                        }
                        context.setContextType("acuerdo_id", "id_BigDecimal");
                        if(context.getStringValue("acuerdo_id") == null) {
                            context.acuerdo_id = null;
                        } else {
                            try{
                                context.acuerdo_id=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("acuerdo_id"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "acuerdo_id", e.getMessage()));
                                context.acuerdo_id=null;
                            }
                        }
                        context.setContextType("carga_id", "id_BigDecimal");
                        if(context.getStringValue("carga_id") == null) {
                            context.carga_id = null;
                        } else {
                            try{
                                context.carga_id=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("carga_id"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "carga_id", e.getMessage()));
                                context.carga_id=null;
                            }
                        }
                        context.setContextType("Contenido", "id_Object");
                        if(context.getStringValue("Contenido") == null) {
                            context.Contenido = null;
                        } else {
                            context.Contenido=(Object) context.getProperty("Contenido");
                        }
                        context.setContextType("ErrorLog", "id_Integer");
                        if(context.getStringValue("ErrorLog") == null) {
                            context.ErrorLog = null;
                        } else {
                            try{
                                context.ErrorLog=routines.system.ParserUtils.parseTo_Integer (context.getProperty("ErrorLog"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ErrorLog", e.getMessage()));
                                context.ErrorLog=null;
                            }
                        }
                        context.setContextType("IsValid", "id_Boolean");
                        if(context.getStringValue("IsValid") == null) {
                            context.IsValid = null;
                        } else {
                            try{
                                context.IsValid=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("IsValid"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "IsValid", e.getMessage()));
                                context.IsValid=null;
                            }
                        }
                        context.setContextType("Linea", "id_Integer");
                        if(context.getStringValue("Linea") == null) {
                            context.Linea = null;
                        } else {
                            try{
                                context.Linea=routines.system.ParserUtils.parseTo_Integer (context.getProperty("Linea"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "Linea", e.getMessage()));
                                context.Linea=null;
                            }
                        }
                        context.setContextType("MedGenerico_Id", "id_BigDecimal");
                        if(context.getStringValue("MedGenerico_Id") == null) {
                            context.MedGenerico_Id = null;
                        } else {
                            try{
                                context.MedGenerico_Id=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("MedGenerico_Id"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "MedGenerico_Id", e.getMessage()));
                                context.MedGenerico_Id=null;
                            }
                        }
                        context.setContextType("Mensaje_1", "id_String");
                        if(context.getStringValue("Mensaje_1") == null) {
                            context.Mensaje_1 = null;
                        } else {
                            context.Mensaje_1=(String) context.getProperty("Mensaje_1");
                        }
                        context.setContextType("nombre", "id_String");
                        if(context.getStringValue("nombre") == null) {
                            context.nombre = null;
                        } else {
                            context.nombre=(String) context.getProperty("nombre");
                        }
                        context.setContextType("NusoIndividual", "id_String");
                        if(context.getStringValue("NusoIndividual") == null) {
                            context.NusoIndividual = null;
                        } else {
                            context.NusoIndividual=(String) context.getProperty("NusoIndividual");
                        }
                        context.setContextType("NusoRegistro", "id_String");
                        if(context.getStringValue("NusoRegistro") == null) {
                            context.NusoRegistro = null;
                        } else {
                            context.NusoRegistro=(String) context.getProperty("NusoRegistro");
                        }
                        context.setContextType("result", "id_String");
                        if(context.getStringValue("result") == null) {
                            context.result = null;
                        } else {
                            context.result=(String) context.getProperty("result");
                        }
                        context.setContextType("Salida", "id_Object");
                        if(context.getStringValue("Salida") == null) {
                            context.Salida = null;
                        } else {
                            context.Salida=(Object) context.getProperty("Salida");
                        }
                        context.setContextType("TContenido", "id_String");
                        if(context.getStringValue("TContenido") == null) {
                            context.TContenido = null;
                        } else {
                            context.TContenido=(String) context.getProperty("TContenido");
                        }
                        context.setContextType("Host", "id_String");
                        if(context.getStringValue("Host") == null) {
                            context.Host = null;
                        } else {
                            context.Host=(String) context.getProperty("Host");
                        }
                        context.setContextType("Password", "id_String");
                        if(context.getStringValue("Password") == null) {
                            context.Password = null;
                        } else {
                            context.Password=(String) context.getProperty("Password");
                        }
                        context.setContextType("Port", "id_String");
                        if(context.getStringValue("Port") == null) {
                            context.Port = null;
                        } else {
                            context.Port=(String) context.getProperty("Port");
                        }
                        context.setContextType("Schema", "id_String");
                        if(context.getStringValue("Schema") == null) {
                            context.Schema = null;
                        } else {
                            context.Schema=(String) context.getProperty("Schema");
                        }
                        context.setContextType("ServiceName", "id_String");
                        if(context.getStringValue("ServiceName") == null) {
                            context.ServiceName = null;
                        } else {
                            context.ServiceName=(String) context.getProperty("ServiceName");
                        }
                        context.setContextType("Sid", "id_String");
                        if(context.getStringValue("Sid") == null) {
                            context.Sid = null;
                        } else {
                            context.Sid=(String) context.getProperty("Sid");
                        }
                        context.setContextType("User", "id_String");
                        if(context.getStringValue("User") == null) {
                            context.User = null;
                        } else {
                            context.User=(String) context.getProperty("User");
                        }
                        context.setContextType("ERROR", "id_String");
                        if(context.getStringValue("ERROR") == null) {
                            context.ERROR = null;
                        } else {
                            context.ERROR=(String) context.getProperty("ERROR");
                        }
                        context.setContextType("ESTADO", "id_String");
                        if(context.getStringValue("ESTADO") == null) {
                            context.ESTADO = null;
                        } else {
                            context.ESTADO=(String) context.getProperty("ESTADO");
                        }
                        context.setContextType("ESTADO_EXEC", "id_String");
                        if(context.getStringValue("ESTADO_EXEC") == null) {
                            context.ESTADO_EXEC = null;
                        } else {
                            context.ESTADO_EXEC=(String) context.getProperty("ESTADO_EXEC");
                        }
                        context.setContextType("FECHA_EJECUCION", "id_String");
                        if(context.getStringValue("FECHA_EJECUCION") == null) {
                            context.FECHA_EJECUCION = null;
                        } else {
                            context.FECHA_EJECUCION=(String) context.getProperty("FECHA_EJECUCION");
                        }
                        context.setContextType("HORA_FINAL", "id_String");
                        if(context.getStringValue("HORA_FINAL") == null) {
                            context.HORA_FINAL = null;
                        } else {
                            context.HORA_FINAL=(String) context.getProperty("HORA_FINAL");
                        }
                        context.setContextType("HORA_INICIO", "id_String");
                        if(context.getStringValue("HORA_INICIO") == null) {
                            context.HORA_INICIO = null;
                        } else {
                            context.HORA_INICIO=(String) context.getProperty("HORA_INICIO");
                        }
                        context.setContextType("LOGS_ERROR", "id_String");
                        if(context.getStringValue("LOGS_ERROR") == null) {
                            context.LOGS_ERROR = null;
                        } else {
                            context.LOGS_ERROR=(String) context.getProperty("LOGS_ERROR");
                        }
                        context.setContextType("LOGS_EXECUTION", "id_String");
                        if(context.getStringValue("LOGS_EXECUTION") == null) {
                            context.LOGS_EXECUTION = null;
                        } else {
                            context.LOGS_EXECUTION=(String) context.getProperty("LOGS_EXECUTION");
                        }
                        context.setContextType("ORIGEN", "id_String");
                        if(context.getStringValue("ORIGEN") == null) {
                            context.ORIGEN = null;
                        } else {
                            context.ORIGEN=(String) context.getProperty("ORIGEN");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("BODEGA")) {
                context.BODEGA = (String) parentContextMap.get("BODEGA");
            }if (parentContextMap.containsKey("acuerdo_id")) {
                context.acuerdo_id = (BigDecimal) parentContextMap.get("acuerdo_id");
            }if (parentContextMap.containsKey("carga_id")) {
                context.carga_id = (BigDecimal) parentContextMap.get("carga_id");
            }if (parentContextMap.containsKey("Contenido")) {
                context.Contenido = (Object) parentContextMap.get("Contenido");
            }if (parentContextMap.containsKey("ErrorLog")) {
                context.ErrorLog = (Integer) parentContextMap.get("ErrorLog");
            }if (parentContextMap.containsKey("IsValid")) {
                context.IsValid = (Boolean) parentContextMap.get("IsValid");
            }if (parentContextMap.containsKey("Linea")) {
                context.Linea = (Integer) parentContextMap.get("Linea");
            }if (parentContextMap.containsKey("MedGenerico_Id")) {
                context.MedGenerico_Id = (BigDecimal) parentContextMap.get("MedGenerico_Id");
            }if (parentContextMap.containsKey("Mensaje_1")) {
                context.Mensaje_1 = (String) parentContextMap.get("Mensaje_1");
            }if (parentContextMap.containsKey("nombre")) {
                context.nombre = (String) parentContextMap.get("nombre");
            }if (parentContextMap.containsKey("NusoIndividual")) {
                context.NusoIndividual = (String) parentContextMap.get("NusoIndividual");
            }if (parentContextMap.containsKey("NusoRegistro")) {
                context.NusoRegistro = (String) parentContextMap.get("NusoRegistro");
            }if (parentContextMap.containsKey("result")) {
                context.result = (String) parentContextMap.get("result");
            }if (parentContextMap.containsKey("Salida")) {
                context.Salida = (Object) parentContextMap.get("Salida");
            }if (parentContextMap.containsKey("TContenido")) {
                context.TContenido = (String) parentContextMap.get("TContenido");
            }if (parentContextMap.containsKey("Host")) {
                context.Host = (String) parentContextMap.get("Host");
            }if (parentContextMap.containsKey("Password")) {
                context.Password = (String) parentContextMap.get("Password");
            }if (parentContextMap.containsKey("Port")) {
                context.Port = (String) parentContextMap.get("Port");
            }if (parentContextMap.containsKey("Schema")) {
                context.Schema = (String) parentContextMap.get("Schema");
            }if (parentContextMap.containsKey("ServiceName")) {
                context.ServiceName = (String) parentContextMap.get("ServiceName");
            }if (parentContextMap.containsKey("Sid")) {
                context.Sid = (String) parentContextMap.get("Sid");
            }if (parentContextMap.containsKey("User")) {
                context.User = (String) parentContextMap.get("User");
            }if (parentContextMap.containsKey("ERROR")) {
                context.ERROR = (String) parentContextMap.get("ERROR");
            }if (parentContextMap.containsKey("ESTADO")) {
                context.ESTADO = (String) parentContextMap.get("ESTADO");
            }if (parentContextMap.containsKey("ESTADO_EXEC")) {
                context.ESTADO_EXEC = (String) parentContextMap.get("ESTADO_EXEC");
            }if (parentContextMap.containsKey("FECHA_EJECUCION")) {
                context.FECHA_EJECUCION = (String) parentContextMap.get("FECHA_EJECUCION");
            }if (parentContextMap.containsKey("HORA_FINAL")) {
                context.HORA_FINAL = (String) parentContextMap.get("HORA_FINAL");
            }if (parentContextMap.containsKey("HORA_INICIO")) {
                context.HORA_INICIO = (String) parentContextMap.get("HORA_INICIO");
            }if (parentContextMap.containsKey("LOGS_ERROR")) {
                context.LOGS_ERROR = (String) parentContextMap.get("LOGS_ERROR");
            }if (parentContextMap.containsKey("LOGS_EXECUTION")) {
                context.LOGS_EXECUTION = (String) parentContextMap.get("LOGS_EXECUTION");
            }if (parentContextMap.containsKey("ORIGEN")) {
                context.ORIGEN = (String) parentContextMap.get("ORIGEN");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tOracleInput_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tOracleInput_2) {
globalMap.put("tOracleInput_2_SUBPROCESS_STATE", -1);

e_tOracleInput_2.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : CargaMoleculasAcuerdo");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tOracleConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tOracleConnection_2", globalMap.get("conn_tOracleConnection_2"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--context_file")) {
        	String keyValue = arg.substring(15);
        	String filePath = new String(java.util.Base64.getDecoder().decode(keyValue));
        	java.nio.file.Path contextFile = java.nio.file.Paths.get(filePath);
            try (java.io.BufferedReader reader = java.nio.file.Files.newBufferedReader(contextFile)) {
                String line;
                while ((line = reader.readLine()) != null) {
                    int index = -1;
                    if ( (index = line.indexOf('=')) > -1) {
							if (line.startsWith("--context_param")) {
								if ("id_Password".equals(context_param.getContextType(line.substring(16, index)))) {
									context_param.put(line.substring(16, index), routines.system.PasswordEncryptUtil.decryptPassword(
											line.substring(index + 1)));
								} else {
									context_param.put(line.substring(16, index), line.substring(index + 1));
								}
							}else {//--context_type
								context_param.setContextType(line.substring(15, index), line.substring(index + 1));
							}
                    }
                }
            } catch (java.io.IOException e) {
            	System.err.println("Could not load the context file: " + filePath);
                e.printStackTrace();
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     1978497 characters generated by Talend Open Studio for ESB 
 *     on the October 28, 2024, 3:09:13 PM COT
 ************************************************************************************************/