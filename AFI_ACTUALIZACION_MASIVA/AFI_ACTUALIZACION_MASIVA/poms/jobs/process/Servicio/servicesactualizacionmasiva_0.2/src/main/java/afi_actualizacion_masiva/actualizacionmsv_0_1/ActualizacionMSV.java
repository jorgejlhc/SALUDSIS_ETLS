// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package afi_actualizacion_masiva.actualizacionmsv_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.ExtraerBlob;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJavaRow_2
	//import java.util.List;

	//the import part of tJavaRow_3
	//import java.util.List;

	//the import part of tJavaRow_5
	//import java.util.List;

	//the import part of tJavaRow_6
	//import java.util.List;

	//the import part of tJavaRow_8
	//import java.util.List;

	//the import part of tJavaRow_29
	//import java.util.List;

	//the import part of tJavaRow_9
	//import java.util.List;

	//the import part of tJavaRow_10
	//import java.util.List;

	//the import part of tJavaRow_11
	//import java.util.List;

	//the import part of tJavaRow_4
	//import java.util.List;

	//the import part of tJavaRow_7
	//import java.util.List;

	//the import part of tJavaRow_16
	//import java.util.List;

	//the import part of tJavaRow_17
	//import java.util.List;

	//the import part of tJavaRow_25
	//import java.util.List;

	//the import part of tJavaRow_26
	//import java.util.List;

	//the import part of tJavaRow_27
	//import java.util.List;

	//the import part of tJavaRow_28
	//import java.util.List;

	//the import part of tJavaRow_18
	//import java.util.List;

	//the import part of tJavaRow_19
	//import java.util.List;

	//the import part of tJavaRow_20
	//import java.util.List;

	//the import part of tJavaRow_21
	//import java.util.List;

	//the import part of tJavaRow_12
	//import java.util.List;

	//the import part of tJavaRow_13
	//import java.util.List;

	//the import part of tJavaRow_22
	//import java.util.List;

	//the import part of tJavaRow_23
	//import java.util.List;

	//the import part of tJavaRow_14
	//import java.util.List;

	//the import part of tJavaRow_15
	//import java.util.List;

	//the import part of tJavaRow_30
	//import java.util.List;

	//the import part of tJavaRow_31
	//import java.util.List;

	//the import part of tJavaRow_32
	//import java.util.List;

	//the import part of tJavaRow_33
	//import java.util.List;

	//the import part of tJavaRow_24
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: ActualizacionMSV Purpose: Plantilla para inicial el desarrollo de un ETL<br>
 * Description: Para iniciar el desarrollo de un ETL con conexión de base de datos, log de errores y log de ejecución <br>
 * @author jorgejlhc@gmail.com
 * @version 8.8.8.20240722_1936-SNAPSHOT
 * @status DEV
 */
public class ActualizacionMSV implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(mensaje != null){
				
					this.setProperty("mensaje", mensaje.toString());
				
			}
			
			if(vact_err_ent != null){
				
					this.setProperty("vact_err_ent", vact_err_ent.toString());
				
			}
			
			if(vact_no_err_ent != null){
				
					this.setProperty("vact_no_err_ent", vact_no_err_ent.toString());
				
			}
			
			if(vafiarchivos_id != null){
				
					this.setProperty("vafiarchivos_id", vafiarchivos_id.toString());
				
			}
			
			if(vcontenido != null){
				
					this.setProperty("vcontenido", vcontenido.toString());
				
			}
			
			if(vcount_registros != null){
				
					this.setProperty("vcount_registros", vcount_registros.toString());
				
			}
			
			if(verror_datos != null){
				
					this.setProperty("verror_datos", verror_datos.toString());
				
			}
			
			if(verror_dup_sis != null){
				
					this.setProperty("verror_dup_sis", verror_dup_sis.toString());
				
			}
			
			if(verror_estructura != null){
				
					this.setProperty("verror_estructura", verror_estructura.toString());
				
			}
			
			if(verror_id_afi_dup != null){
				
					this.setProperty("verror_id_afi_dup", verror_id_afi_dup.toString());
				
			}
			
			if(verror_id_per_dup != null){
				
					this.setProperty("verror_id_per_dup", verror_id_per_dup.toString());
				
			}
			
			if(verror_no_afi != null){
				
					this.setProperty("verror_no_afi", verror_no_afi.toString());
				
			}
			
			if(verror_nombres_fnac != null){
				
					this.setProperty("verror_nombres_fnac", verror_nombres_fnac.toString());
				
			}
			
			if(verror_pn_pa_doc != null){
				
					this.setProperty("verror_pn_pa_doc", verror_pn_pa_doc.toString());
				
			}
			
			if(verror_td_doc != null){
				
					this.setProperty("verror_td_doc", verror_td_doc.toString());
				
			}
			
			if(vfinicio != null){
				
					String pattern_vfinicio = "yyyy-MM-dd HH:mm:ss";
					String value_vfinicio = "";
					String[] parts_vfinicio = value_vfinicio.split(";");
					if(parts_vfinicio.length > 1){
						pattern_vfinicio = parts_vfinicio[0];
						this.setProperty("vfinicio", pattern_vfinicio + ";" + FormatterUtils.format_Date(vfinicio, pattern_vfinicio));
					}else{
						this.setProperty("vfinicio", FormatterUtils.format_Date(vfinicio, pattern_vfinicio));
					}
				
			}
			
			if(vprocesos_id != null){
				
					this.setProperty("vprocesos_id", vprocesos_id.toString());
				
			}
			
			if(vtarchivos_codigo != null){
				
					this.setProperty("vtarchivos_codigo", vtarchivos_codigo.toString());
				
			}
			
			if(vtotal_actualizaciones != null){
				
					this.setProperty("vtotal_actualizaciones", vtotal_actualizaciones.toString());
				
			}
			
			if(vtotal_errores != null){
				
					this.setProperty("vtotal_errores", vtotal_errores.toString());
				
			}
			
			if(vtotal_registros != null){
				
					this.setProperty("vtotal_registros", vtotal_registros.toString());
				
			}
			
			if(vusuarios_id != null){
				
					this.setProperty("vusuarios_id", vusuarios_id.toString());
				
			}
			
			if(db_destino_AdditionalParams != null){
				
					this.setProperty("db_destino_AdditionalParams", db_destino_AdditionalParams.toString());
				
			}
			
			if(db_destino_Login != null){
				
					this.setProperty("db_destino_Login", db_destino_Login.toString());
				
			}
			
			if(db_destino_Password != null){
				
					this.setProperty("db_destino_Password", db_destino_Password.toString());
				
			}
			
			if(db_destino_Port != null){
				
					this.setProperty("db_destino_Port", db_destino_Port.toString());
				
			}
			
			if(db_destino_Schema != null){
				
					this.setProperty("db_destino_Schema", db_destino_Schema.toString());
				
			}
			
			if(db_destino_Server != null){
				
					this.setProperty("db_destino_Server", db_destino_Server.toString());
				
			}
			
			if(db_destino_ServiceName != null){
				
					this.setProperty("db_destino_ServiceName", db_destino_ServiceName.toString());
				
			}
			
			if(db_origen_AdditionalParams != null){
				
					this.setProperty("db_origen_AdditionalParams", db_origen_AdditionalParams.toString());
				
			}
			
			if(db_origen_Login != null){
				
					this.setProperty("db_origen_Login", db_origen_Login.toString());
				
			}
			
			if(db_origen_Password != null){
				
					this.setProperty("db_origen_Password", db_origen_Password.toString());
				
			}
			
			if(db_origen_Port != null){
				
					this.setProperty("db_origen_Port", db_origen_Port.toString());
				
			}
			
			if(db_origen_Schema != null){
				
					this.setProperty("db_origen_Schema", db_origen_Schema.toString());
				
			}
			
			if(db_origen_Server != null){
				
					this.setProperty("db_origen_Server", db_origen_Server.toString());
				
			}
			
			if(db_origen_ServiceName != null){
				
					this.setProperty("db_origen_ServiceName", db_origen_ServiceName.toString());
				
			}
			
			if(PATH != null){
				
					this.setProperty("PATH", PATH.toString());
				
			}
			
			if(BODEGA != null){
				
					this.setProperty("BODEGA", BODEGA.toString());
				
			}
			
			if(ESTADO_EXEC != null){
				
					this.setProperty("ESTADO_EXEC", ESTADO_EXEC.toString());
				
			}
			
			if(FECHA_EJECUCION != null){
				
					this.setProperty("FECHA_EJECUCION", FECHA_EJECUCION.toString());
				
			}
			
			if(HORA_FINAL != null){
				
					this.setProperty("HORA_FINAL", HORA_FINAL.toString());
				
			}
			
			if(HORA_INICIO != null){
				
					this.setProperty("HORA_INICIO", HORA_INICIO.toString());
				
			}
			
			if(JOB != null){
				
					this.setProperty("JOB", JOB.toString());
				
			}
			
			if(LOGS_ERROR != null){
				
					this.setProperty("LOGS_ERROR", LOGS_ERROR.toString());
				
			}
			
			if(LOGS_EXECUTION != null){
				
					this.setProperty("LOGS_EXECUTION", LOGS_EXECUTION.toString());
				
			}
			
			if(ORIGEN != null){
				
					this.setProperty("ORIGEN", ORIGEN.toString());
				
			}
			
			if(mail_Message != null){
				
					this.setProperty("mail_Message", mail_Message.toString());
				
			}
			
			if(mail_Password != null){
				
					this.setProperty("mail_Password", mail_Password.toString());
				
			}
			
			if(mail_SenderName != null){
				
					this.setProperty("mail_SenderName", mail_SenderName.toString());
				
			}
			
			if(mail_SMTP_Host != null){
				
					this.setProperty("mail_SMTP_Host", mail_SMTP_Host.toString());
				
			}
			
			if(mail_SMTP_Port != null){
				
					this.setProperty("mail_SMTP_Port", mail_SMTP_Port.toString());
				
			}
			
			if(mail_Subject != null){
				
					this.setProperty("mail_Subject", mail_Subject.toString());
				
			}
			
			if(mail_To != null){
				
					this.setProperty("mail_To", mail_To.toString());
				
			}
			
			if(mail_User != null){
				
					this.setProperty("mail_User", mail_User.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String mensaje;
public String getMensaje(){
	return this.mensaje;
}
public Integer vact_err_ent;
public Integer getVact_err_ent(){
	return this.vact_err_ent;
}
public Integer vact_no_err_ent;
public Integer getVact_no_err_ent(){
	return this.vact_no_err_ent;
}
public Integer vafiarchivos_id;
public Integer getVafiarchivos_id(){
	return this.vafiarchivos_id;
}
public Object vcontenido;
public Object getVcontenido(){
	return this.vcontenido;
}
public Integer vcount_registros;
public Integer getVcount_registros(){
	return this.vcount_registros;
}
public Integer verror_datos;
public Integer getVerror_datos(){
	return this.verror_datos;
}
public Integer verror_dup_sis;
public Integer getVerror_dup_sis(){
	return this.verror_dup_sis;
}
public Integer verror_estructura;
public Integer getVerror_estructura(){
	return this.verror_estructura;
}
public Integer verror_id_afi_dup;
public Integer getVerror_id_afi_dup(){
	return this.verror_id_afi_dup;
}
public Integer verror_id_per_dup;
public Integer getVerror_id_per_dup(){
	return this.verror_id_per_dup;
}
public Integer verror_no_afi;
public Integer getVerror_no_afi(){
	return this.verror_no_afi;
}
public Integer verror_nombres_fnac;
public Integer getVerror_nombres_fnac(){
	return this.verror_nombres_fnac;
}
public Integer verror_pn_pa_doc;
public Integer getVerror_pn_pa_doc(){
	return this.verror_pn_pa_doc;
}
public Integer verror_td_doc;
public Integer getVerror_td_doc(){
	return this.verror_td_doc;
}
public java.util.Date vfinicio;
public java.util.Date getVfinicio(){
	return this.vfinicio;
}
public Integer vprocesos_id;
public Integer getVprocesos_id(){
	return this.vprocesos_id;
}
public Integer vtarchivos_codigo;
public Integer getVtarchivos_codigo(){
	return this.vtarchivos_codigo;
}
public Integer vtotal_actualizaciones;
public Integer getVtotal_actualizaciones(){
	return this.vtotal_actualizaciones;
}
public Integer vtotal_errores;
public Integer getVtotal_errores(){
	return this.vtotal_errores;
}
public Integer vtotal_registros;
public Integer getVtotal_registros(){
	return this.vtotal_registros;
}
public Integer vusuarios_id;
public Integer getVusuarios_id(){
	return this.vusuarios_id;
}
public String db_destino_AdditionalParams;
public String getDb_destino_AdditionalParams(){
	return this.db_destino_AdditionalParams;
}
public String db_destino_Login;
public String getDb_destino_Login(){
	return this.db_destino_Login;
}
public java.lang.String db_destino_Password;
public java.lang.String getDb_destino_Password(){
	return this.db_destino_Password;
}
public String db_destino_Port;
public String getDb_destino_Port(){
	return this.db_destino_Port;
}
public String db_destino_Schema;
public String getDb_destino_Schema(){
	return this.db_destino_Schema;
}
public String db_destino_Server;
public String getDb_destino_Server(){
	return this.db_destino_Server;
}
public String db_destino_ServiceName;
public String getDb_destino_ServiceName(){
	return this.db_destino_ServiceName;
}
public String db_origen_AdditionalParams;
public String getDb_origen_AdditionalParams(){
	return this.db_origen_AdditionalParams;
}
public String db_origen_Login;
public String getDb_origen_Login(){
	return this.db_origen_Login;
}
public java.lang.String db_origen_Password;
public java.lang.String getDb_origen_Password(){
	return this.db_origen_Password;
}
public String db_origen_Port;
public String getDb_origen_Port(){
	return this.db_origen_Port;
}
public String db_origen_Schema;
public String getDb_origen_Schema(){
	return this.db_origen_Schema;
}
public String db_origen_Server;
public String getDb_origen_Server(){
	return this.db_origen_Server;
}
public String db_origen_ServiceName;
public String getDb_origen_ServiceName(){
	return this.db_origen_ServiceName;
}
public String PATH;
public String getPATH(){
	return this.PATH;
}
public String BODEGA;
public String getBODEGA(){
	return this.BODEGA;
}
public String ESTADO_EXEC;
public String getESTADO_EXEC(){
	return this.ESTADO_EXEC;
}
public String FECHA_EJECUCION;
public String getFECHA_EJECUCION(){
	return this.FECHA_EJECUCION;
}
public String HORA_FINAL;
public String getHORA_FINAL(){
	return this.HORA_FINAL;
}
public String HORA_INICIO;
public String getHORA_INICIO(){
	return this.HORA_INICIO;
}
public String JOB;
public String getJOB(){
	return this.JOB;
}
public String LOGS_ERROR;
public String getLOGS_ERROR(){
	return this.LOGS_ERROR;
}
public String LOGS_EXECUTION;
public String getLOGS_EXECUTION(){
	return this.LOGS_EXECUTION;
}
public String ORIGEN;
public String getORIGEN(){
	return this.ORIGEN;
}
public String mail_Message;
public String getMail_Message(){
	return this.mail_Message;
}
public String mail_Password;
public String getMail_Password(){
	return this.mail_Password;
}
public String mail_SenderName;
public String getMail_SenderName(){
	return this.mail_SenderName;
}
public String mail_SMTP_Host;
public String getMail_SMTP_Host(){
	return this.mail_SMTP_Host;
}
public String mail_SMTP_Port;
public String getMail_SMTP_Port(){
	return this.mail_SMTP_Port;
}
public String mail_Subject;
public String getMail_Subject(){
	return this.mail_Subject;
}
public String mail_To;
public String getMail_To(){
	return this.mail_To;
}
public String mail_User;
public String getMail_User(){
	return this.mail_User;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "ActualizacionMSV";
	private final String projectName = "AFI_ACTUALIZACION_MASIVA";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				ActualizacionMSV.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(ActualizacionMSV.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_26_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_26_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_26_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_28_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_28_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_28_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_36_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_36_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_36_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_42_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_42_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_42_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_21_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_21_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_23_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_23_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_25_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_25_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_27_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_37_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_37_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_37_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_43_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_43_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_43_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tBufferOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError1", 0, "error");
								}
							
							
								errorCode = null;
								tFixedFlowInput_5Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tBufferOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tBufferOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleRow_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleCommit_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleCommit_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_29_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tBufferOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleCommit_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_29_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_29_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_29_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_29_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_29_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_29_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleCommit_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_29_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_30_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_30_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_30_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_30_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_30_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_30_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleCommit_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_30_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_38_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_38_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_38_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_41_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_38_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_26_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_38_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_42_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_38_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleCommit_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_38_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_39_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_39_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_27_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_39_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_43_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_39_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_28_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_39_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_44_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_39_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleCommit_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_39_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_31_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_31_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_31_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_31_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_31_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_31_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleCommit_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_31_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_32_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_32_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_32_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_32_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_32_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_32_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleCommit_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_32_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleCommit_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_33_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_33_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_33_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_33_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_33_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_33_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_33_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleCommit_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_33_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_34_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_35_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleCommit_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_40_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_40_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_40_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_30_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_40_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_45_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_40_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_31_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_40_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_46_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_40_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleCommit_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_40_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_41_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_41_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_41_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_32_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_41_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_47_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_41_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_33_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_41_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_48_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_41_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleCommit_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_41_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_34_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_26_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_27_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_28_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_29_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_30_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_31_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_32_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_33_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_38_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_39_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_40_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_35_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_35_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_35_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_36_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputPositional_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_37_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleCommit_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tBufferOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_27_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_31_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_32_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_26_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_28_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_29_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_30_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row64_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row65_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row66_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row67_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row68_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row69_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row70_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row71_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row72_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row73_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row74_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row75_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row76_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row77_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row79_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row80_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row81_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row82_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row46_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row127_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row152_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row154_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row120_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row121_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row122_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row123_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row124_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row125_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row128_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row129_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row150_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_14_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_15_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_20_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_22_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_24_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_26_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_28_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_36_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_42_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_16_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_17_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_18_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_19_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_21_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_23_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_25_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_27_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_37_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_43_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleRow_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleCommit_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_29_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_30_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_38_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_39_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_31_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_32_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_33_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_40_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_41_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_34_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_35_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_14_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_15_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_16_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_17_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	









public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tFileInputXML_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public String Host;

				public String getHost () {
					return this.Host;
				}

				public Boolean HostIsNullable(){
				    return true;
				}
				public Boolean HostIsKey(){
				    return false;
				}
				public Integer HostLength(){
				    return 15;
				}
				public Integer HostPrecision(){
				    return 0;
				}
				public String HostDefault(){
				
					return null;
				
				}
				public String HostComment(){
				
				    return "";
				
				}
				public String HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HostOriginalDbColumnName(){
				
					return "Host";
				
				}

				
			    public String Port;

				public String getPort () {
					return this.Port;
				}

				public Boolean PortIsNullable(){
				    return true;
				}
				public Boolean PortIsKey(){
				    return false;
				}
				public Integer PortLength(){
				    return 4;
				}
				public Integer PortPrecision(){
				    return 0;
				}
				public String PortDefault(){
				
					return null;
				
				}
				public String PortComment(){
				
				    return "";
				
				}
				public String PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PortOriginalDbColumnName(){
				
					return "Port";
				
				}

				
			    public String Sid;

				public String getSid () {
					return this.Sid;
				}

				public Boolean SidIsNullable(){
				    return true;
				}
				public Boolean SidIsKey(){
				    return false;
				}
				public Integer SidLength(){
				    return 4;
				}
				public Integer SidPrecision(){
				    return 0;
				}
				public String SidDefault(){
				
					return null;
				
				}
				public String SidComment(){
				
				    return "";
				
				}
				public String SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SidOriginalDbColumnName(){
				
					return "Sid";
				
				}

				
			    public String ServiceName;

				public String getServiceName () {
					return this.ServiceName;
				}

				public Boolean ServiceNameIsNullable(){
				    return true;
				}
				public Boolean ServiceNameIsKey(){
				    return false;
				}
				public Integer ServiceNameLength(){
				    return 7;
				}
				public Integer ServiceNamePrecision(){
				    return 0;
				}
				public String ServiceNameDefault(){
				
					return null;
				
				}
				public String ServiceNameComment(){
				
				    return "";
				
				}
				public String ServiceNamePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ServiceNameOriginalDbColumnName(){
				
					return "ServiceName";
				
				}

				
			    public String Schema;

				public String getSchema () {
					return this.Schema;
				}

				public Boolean SchemaIsNullable(){
				    return true;
				}
				public Boolean SchemaIsKey(){
				    return false;
				}
				public Integer SchemaLength(){
				    return 8;
				}
				public Integer SchemaPrecision(){
				    return 0;
				}
				public String SchemaDefault(){
				
					return null;
				
				}
				public String SchemaComment(){
				
				    return "";
				
				}
				public String SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SchemaOriginalDbColumnName(){
				
					return "Schema";
				
				}

				
			    public String User;

				public String getUser () {
					return this.User;
				}

				public Boolean UserIsNullable(){
				    return true;
				}
				public Boolean UserIsKey(){
				    return false;
				}
				public Integer UserLength(){
				    return 8;
				}
				public Integer UserPrecision(){
				    return 0;
				}
				public String UserDefault(){
				
					return null;
				
				}
				public String UserComment(){
				
				    return "";
				
				}
				public String UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UserOriginalDbColumnName(){
				
					return "User";
				
				}

				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}

				public Boolean PasswordIsNullable(){
				    return true;
				}
				public Boolean PasswordIsKey(){
				    return false;
				}
				public Integer PasswordLength(){
				    return 15;
				}
				public Integer PasswordPrecision(){
				    return 0;
				}
				public String PasswordDefault(){
				
					return null;
				
				}
				public String PasswordComment(){
				
				    return "";
				
				}
				public String PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordOriginalDbColumnName(){
				
					return "Password";
				
				}

				
			    public String PathStorage;

				public String getPathStorage () {
					return this.PathStorage;
				}

				public Boolean PathStorageIsNullable(){
				    return true;
				}
				public Boolean PathStorageIsKey(){
				    return false;
				}
				public Integer PathStorageLength(){
				    return 44;
				}
				public Integer PathStoragePrecision(){
				    return 0;
				}
				public String PathStorageDefault(){
				
					return null;
				
				}
				public String PathStorageComment(){
				
				    return "";
				
				}
				public String PathStoragePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PathStorageOriginalDbColumnName(){
				
					return "PathStorage";
				
				}

				
			    public String SMTPHost;

				public String getSMTPHost () {
					return this.SMTPHost;
				}

				public Boolean SMTPHostIsNullable(){
				    return true;
				}
				public Boolean SMTPHostIsKey(){
				    return false;
				}
				public Integer SMTPHostLength(){
				    return 14;
				}
				public Integer SMTPHostPrecision(){
				    return 0;
				}
				public String SMTPHostDefault(){
				
					return null;
				
				}
				public String SMTPHostComment(){
				
				    return "";
				
				}
				public String SMTPHostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPHostOriginalDbColumnName(){
				
					return "SMTPHost";
				
				}

				
			    public String SMTPPort;

				public String getSMTPPort () {
					return this.SMTPPort;
				}

				public Boolean SMTPPortIsNullable(){
				    return true;
				}
				public Boolean SMTPPortIsKey(){
				    return false;
				}
				public Integer SMTPPortLength(){
				    return 3;
				}
				public Integer SMTPPortPrecision(){
				    return 0;
				}
				public String SMTPPortDefault(){
				
					return null;
				
				}
				public String SMTPPortComment(){
				
				    return "";
				
				}
				public String SMTPPortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPPortOriginalDbColumnName(){
				
					return "SMTPPort";
				
				}

				
			    public String UsernameMail;

				public String getUsernameMail () {
					return this.UsernameMail;
				}

				public Boolean UsernameMailIsNullable(){
				    return true;
				}
				public Boolean UsernameMailIsKey(){
				    return false;
				}
				public Integer UsernameMailLength(){
				    return 34;
				}
				public Integer UsernameMailPrecision(){
				    return 0;
				}
				public String UsernameMailDefault(){
				
					return null;
				
				}
				public String UsernameMailComment(){
				
				    return "";
				
				}
				public String UsernameMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UsernameMailOriginalDbColumnName(){
				
					return "UsernameMail";
				
				}

				
			    public String PasswordMail;

				public String getPasswordMail () {
					return this.PasswordMail;
				}

				public Boolean PasswordMailIsNullable(){
				    return true;
				}
				public Boolean PasswordMailIsKey(){
				    return false;
				}
				public Integer PasswordMailLength(){
				    return 13;
				}
				public Integer PasswordMailPrecision(){
				    return 0;
				}
				public String PasswordMailDefault(){
				
					return null;
				
				}
				public String PasswordMailComment(){
				
				    return "";
				
				}
				public String PasswordMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordMailOriginalDbColumnName(){
				
					return "PasswordMail";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.PathStorage = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.PathStorage = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.PathStorage,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.PathStorage,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Host="+Host);
		sb.append(",Port="+Port);
		sb.append(",Sid="+Sid);
		sb.append(",ServiceName="+ServiceName);
		sb.append(",Schema="+Schema);
		sb.append(",User="+User);
		sb.append(",Password="+Password);
		sb.append(",PathStorage="+PathStorage);
		sb.append(",SMTPHost="+SMTPHost);
		sb.append(",SMTPPort="+SMTPPort);
		sb.append(",UsernameMail="+UsernameMail);
		sb.append(",PasswordMail="+PasswordMail);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tFileInputXML_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_1", false);
		start_Hash.put("tFileInputXML_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_1";
	
	
		int tos_count_tFileInputXML_1 = 0;
		

	

int nb_line_tFileInputXML_1 = 0;

	String os_tFileInputXML_1 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_1=false;
	if(os_tFileInputXML_1.indexOf("windows") > -1 || os_tFileInputXML_1.indexOf("nt") > -1){
		isWindows_tFileInputXML_1=true;
	}
class NameSpaceTool_tFileInputXML_1 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_1{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getStringValue().isEmpty();
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_1 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_1 = null;
try {
	filename_tFileInputXML_1 = context.ORIGEN;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_1 != null && filename_tFileInputXML_1 instanceof String && filename_tFileInputXML_1.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_1){
		filename_tFileInputXML_1 = filename_tFileInputXML_1.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_1 = true;
org.dom4j.Document doc_tFileInputXML_1 = null;
java.io.Closeable toClose_tFileInputXML_1 = null;
try{
	if(filename_tFileInputXML_1 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_1 = (java.io.InputStream)filename_tFileInputXML_1;
		toClose_tFileInputXML_1 = inputStream_tFileInputXML_1;
		doc_tFileInputXML_1 = reader_tFileInputXML_1.read(inputStream_tFileInputXML_1);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_1 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_1)),"UTF-8");
		toClose_tFileInputXML_1 = unicodeReader_tFileInputXML_1;
		org.xml.sax.InputSource in_tFileInputXML_1= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_1);
		doc_tFileInputXML_1 = reader_tFileInputXML_1.read(in_tFileInputXML_1);
	}
}catch(java.lang.Exception e){
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_1 = false;
} finally {
	if(toClose_tFileInputXML_1!=null) {
		toClose_tFileInputXML_1.close();
	}
}
if(isValidFile_tFileInputXML_1){
NameSpaceTool_tFileInputXML_1 nsTool_tFileInputXML_1 = new NameSpaceTool_tFileInputXML_1();
nsTool_tFileInputXML_1.countNSMap(doc_tFileInputXML_1.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_1 = nsTool_tFileInputXML_1.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_1 = doc_tFileInputXML_1.createXPath(nsTool_tFileInputXML_1.addDefaultNSPrefix("/connectionStrings"));  
x_tFileInputXML_1.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1); 

java.util.List<org.dom4j.Node> nodeList_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)x_tFileInputXML_1.selectNodes(doc_tFileInputXML_1);	
XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();
String str_tFileInputXML_1 = "";
org.dom4j.Node node_tFileInputXML_1 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_1=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_1{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_1 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Host","/connectionStrings"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	org.dom4j.XPath xpath_1 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Port","/connectionStrings"));
	xpath_1.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(1,xpath_1);
			
	org.dom4j.XPath xpath_2 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Sid","/connectionStrings"));
	xpath_2.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(2,xpath_2);
			
	org.dom4j.XPath xpath_3 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("ServiceName","/connectionStrings"));
	xpath_3.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(3,xpath_3);
			
	org.dom4j.XPath xpath_4 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Schema","/connectionStrings"));
	xpath_4.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(4,xpath_4);
			
	org.dom4j.XPath xpath_5 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("User","/connectionStrings"));
	xpath_5.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(5,xpath_5);
			
	org.dom4j.XPath xpath_6 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Password","/connectionStrings"));
	xpath_6.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(6,xpath_6);
			
	org.dom4j.XPath xpath_7 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("PathStorage","/connectionStrings"));
	xpath_7.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(7,xpath_7);
			
	org.dom4j.XPath xpath_8 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("SMTPHost","/connectionStrings"));
	xpath_8.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(8,xpath_8);
			
	org.dom4j.XPath xpath_9 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("SMTPPort","/connectionStrings"));
	xpath_9.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(9,xpath_9);
			
	org.dom4j.XPath xpath_10 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("UsernameMail","/connectionStrings"));
	xpath_10.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(10,xpath_10);
			
	org.dom4j.XPath xpath_11 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("PasswordMail","/connectionStrings"));
	xpath_11.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(11,xpath_11);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_1 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_1 xPathUtil_tFileInputXML_1 = new XPathUtil_tFileInputXML_1();
	xPathUtil_tFileInputXML_1.initXPaths(xpaths_tFileInputXML_1, nsTool_tFileInputXML_1, xmlNameSpaceMap_tFileInputXML_1);
for (org.dom4j.Node temp_tFileInputXML_1: nodeList_tFileInputXML_1) {
	if (nb_line_tFileInputXML_1>=50) {
	
		break;
	}
		nb_line_tFileInputXML_1++;
		
	row1 = null;			
	boolean whetherReject_tFileInputXML_1 = false;
	row1 = new row1Struct();
	try{
    Object obj0_tFileInputXML_1 = xpaths_tFileInputXML_1.get(0).evaluate(temp_tFileInputXML_1);
    if(obj0_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj0_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj0_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj0_tFileInputXML_1 instanceof String || obj0_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj0_tFileInputXML_1);
    } else if(obj0_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Host =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Host ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Host =null;
									}else{
		row1.Host = str_tFileInputXML_1;
	}
    Object obj1_tFileInputXML_1 = xpaths_tFileInputXML_1.get(1).evaluate(temp_tFileInputXML_1);
    if(obj1_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj1_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj1_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj1_tFileInputXML_1 instanceof String || obj1_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj1_tFileInputXML_1);
    } else if(obj1_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj1_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Port =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Port ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Port =null;
									}else{
		row1.Port = str_tFileInputXML_1;
	}
    Object obj2_tFileInputXML_1 = xpaths_tFileInputXML_1.get(2).evaluate(temp_tFileInputXML_1);
    if(obj2_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj2_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj2_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj2_tFileInputXML_1 instanceof String || obj2_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj2_tFileInputXML_1);
    } else if(obj2_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj2_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Sid =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Sid ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Sid =null;
									}else{
		row1.Sid = str_tFileInputXML_1;
	}
    Object obj3_tFileInputXML_1 = xpaths_tFileInputXML_1.get(3).evaluate(temp_tFileInputXML_1);
    if(obj3_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj3_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj3_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj3_tFileInputXML_1 instanceof String || obj3_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj3_tFileInputXML_1);
    } else if(obj3_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj3_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.ServiceName =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.ServiceName ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.ServiceName =null;
									}else{
		row1.ServiceName = str_tFileInputXML_1;
	}
    Object obj4_tFileInputXML_1 = xpaths_tFileInputXML_1.get(4).evaluate(temp_tFileInputXML_1);
    if(obj4_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj4_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj4_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj4_tFileInputXML_1 instanceof String || obj4_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj4_tFileInputXML_1);
    } else if(obj4_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj4_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Schema =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Schema ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Schema =null;
									}else{
		row1.Schema = str_tFileInputXML_1;
	}
    Object obj5_tFileInputXML_1 = xpaths_tFileInputXML_1.get(5).evaluate(temp_tFileInputXML_1);
    if(obj5_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj5_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj5_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj5_tFileInputXML_1 instanceof String || obj5_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj5_tFileInputXML_1);
    } else if(obj5_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj5_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.User =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.User ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.User =null;
									}else{
		row1.User = str_tFileInputXML_1;
	}
    Object obj6_tFileInputXML_1 = xpaths_tFileInputXML_1.get(6).evaluate(temp_tFileInputXML_1);
    if(obj6_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj6_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj6_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj6_tFileInputXML_1 instanceof String || obj6_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj6_tFileInputXML_1);
    } else if(obj6_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj6_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Password =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Password ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Password =null;
									}else{
		row1.Password = str_tFileInputXML_1;
	}
    Object obj7_tFileInputXML_1 = xpaths_tFileInputXML_1.get(7).evaluate(temp_tFileInputXML_1);
    if(obj7_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj7_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj7_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj7_tFileInputXML_1 instanceof String || obj7_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj7_tFileInputXML_1);
    } else if(obj7_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj7_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.PathStorage =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.PathStorage ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.PathStorage =null;
									}else{
		row1.PathStorage = str_tFileInputXML_1;
	}
    Object obj8_tFileInputXML_1 = xpaths_tFileInputXML_1.get(8).evaluate(temp_tFileInputXML_1);
    if(obj8_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj8_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj8_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj8_tFileInputXML_1 instanceof String || obj8_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj8_tFileInputXML_1);
    } else if(obj8_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj8_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.SMTPHost =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.SMTPHost ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.SMTPHost =null;
									}else{
		row1.SMTPHost = str_tFileInputXML_1;
	}
    Object obj9_tFileInputXML_1 = xpaths_tFileInputXML_1.get(9).evaluate(temp_tFileInputXML_1);
    if(obj9_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj9_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj9_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj9_tFileInputXML_1 instanceof String || obj9_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj9_tFileInputXML_1);
    } else if(obj9_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj9_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.SMTPPort =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.SMTPPort ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.SMTPPort =null;
									}else{
		row1.SMTPPort = str_tFileInputXML_1;
	}
    Object obj10_tFileInputXML_1 = xpaths_tFileInputXML_1.get(10).evaluate(temp_tFileInputXML_1);
    if(obj10_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj10_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj10_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj10_tFileInputXML_1 instanceof String || obj10_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj10_tFileInputXML_1);
    } else if(obj10_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj10_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.UsernameMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.UsernameMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.UsernameMail =null;
									}else{
		row1.UsernameMail = str_tFileInputXML_1;
	}
    Object obj11_tFileInputXML_1 = xpaths_tFileInputXML_1.get(11).evaluate(temp_tFileInputXML_1);
    if(obj11_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj11_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj11_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj11_tFileInputXML_1 instanceof String || obj11_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj11_tFileInputXML_1);
    } else if(obj11_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj11_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.PasswordMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.PasswordMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.PasswordMail =null;
									}else{
		row1.PasswordMail = str_tFileInputXML_1;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_1 = true;
                System.err.println(e.getMessage());
                row1 = null;
    }
			
			

 



/**
 * [tFileInputXML_1 begin ] stop
 */
	
	/**
	 * [tFileInputXML_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 


	tos_count_tFileInputXML_1++;

/**
 * [tFileInputXML_1 main ] stop
 */
	
	/**
	 * [tFileInputXML_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

    //Guarda en variables de contexto los parametros de conexión a la bd saludsis
context.db_origen_Server = row1.Host;
context.db_origen_Port = row1.Port;
context.db_origen_ServiceName = row1.ServiceName;
context.db_origen_Schema = row1.Schema;
context.db_origen_Login = row1.User;
context.db_origen_Password = row1.Password;
context.PATH = row1.PathStorage;

//Guarda en variables de contexto la fecha de ejecución y la hora de inicio

context.FECHA_EJECUCION = TalendDate.getDate("DD/MM/YYYY");
context.HORA_INICIO = TalendDate.getDate("HH:mm:ss");
context.JOB = "Inicial";

//Imprime en consola el job, la fecha de ejecución y la hora de inicio
System.out.println(context.JOB+" :-Start: "+context.FECHA_EJECUCION+" "+context.HORA_INICIO);


    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputXML_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	


}
	}
	globalMap.put("tFileInputXML_1_NB_LINE",nb_line_tFileInputXML_1);

	

 

ok_Hash.put("tFileInputXML_1", true);
end_Hash.put("tFileInputXML_1", System.currentTimeMillis());




/**
 * [tFileInputXML_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tOracleConnection_1Process(globalMap);



/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_1", false);
		start_Hash.put("tOracleConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_1";
	
	
		int tos_count_tOracleConnection_1 = 0;
		
	

	
        String url_tOracleConnection_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_1", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_1 = context.db_origen_Login;
	
	
		
	final String decryptedPassword_tOracleConnection_1 = context.db_origen_Password; 
		String dbPwd_tOracleConnection_1 = decryptedPassword_tOracleConnection_1;
	
	
	java.sql.Connection conn_tOracleConnection_1 = null;
	
		
			String driverClass_tOracleConnection_1 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_1 = java.lang.Class.forName(driverClass_tOracleConnection_1);
			globalMap.put("driverClass_tOracleConnection_1", driverClass_tOracleConnection_1);
		
			java.util.Properties atnParamsPrope_tOracleConnection_1 = new java.util.Properties();
			    atnParamsPrope_tOracleConnection_1.put("user",dbUser_tOracleConnection_1);
			    atnParamsPrope_tOracleConnection_1.put("password",dbPwd_tOracleConnection_1);
			if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                atnParamsPrope_tOracleConnection_1.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tOracleConnection_1 = java.sql.DriverManager.getConnection(url_tOracleConnection_1, atnParamsPrope_tOracleConnection_1);

		globalMap.put("conn_tOracleConnection_1", conn_tOracleConnection_1);
	if (null != conn_tOracleConnection_1) {
		
			conn_tOracleConnection_1.setAutoCommit(false);
	}
        globalMap.put("host_" + "tOracleConnection_1",context.db_origen_Server);
        globalMap.put("port_" + "tOracleConnection_1",context.db_origen_Port);
        globalMap.put("dbname_" + "tOracleConnection_1",context.db_origen_ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_1", context.db_origen_Schema);
	globalMap.put("username_" + "tOracleConnection_1",context.db_origen_Login);
	globalMap.put("password_" + "tOracleConnection_1",dbPwd_tOracleConnection_1);

 



/**
 * [tOracleConnection_1 begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 


	tos_count_tOracleConnection_1++;

/**
 * [tOracleConnection_1 main ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_1 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 

ok_Hash.put("tOracleConnection_1", true);
end_Hash.put("tOracleConnection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk14", 0, "ok");
				}
				tOracleInput_12Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk18", 0, "ok");
				}
				tOracleInput_16Process(globalMap);



/**
 * [tOracleConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tOracleInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "SALUDSIS\".\"ISEQ$$_92376\".nextval";
				
				}
				public String IDComment(){
				
				    return "PK - Llave primaria";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 50;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "Nombre del documento";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 5;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "Sigla del documento";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row17Struct other = (row17Struct) obj;
		
						if (this.ID != other.ID)
							return false;
					

		return true;
    }

	public void copyDataTo(row17Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.SIGLA = this.SIGLA;
	            
	}

	public void copyKeysDataTo(row17Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row17Struct row17 = new row17Struct();




	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row17");
					}
				
		int tos_count_tHashOutput_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row17Struct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_ActualizacionMSV_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
			    if(mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null){
	      		    mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row17Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }else{
			    	tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }
			}
        int nb_line_tHashOutput_1 = 0;

 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_12", false);
		start_Hash.put("tOracleInput_12", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_12";
	
	
		int tos_count_tOracleInput_12 = 0;
		
	


	
		    int nb_line_tOracleInput_12 = 0;
		    java.sql.Connection conn_tOracleInput_12 = null;
				conn_tOracleInput_12 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_12 = false;
				boolean isConnectionWrapped_tOracleInput_12 = !(conn_tOracleInput_12 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_12.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_12 = null;
                if (isConnectionWrapped_tOracleInput_12) {
					unwrappedOraConn_tOracleInput_12 = conn_tOracleInput_12.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_12 != null) {
                        isTimeZoneNull_tOracleInput_12 = (unwrappedOraConn_tOracleInput_12.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_12 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_12).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_12) {
					java.sql.Statement stmtGetTZ_tOracleInput_12 = conn_tOracleInput_12.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_12 = stmtGetTZ_tOracleInput_12.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_12 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_12.next()) {
						sessionTimezone_tOracleInput_12 = rsGetTZ_tOracleInput_12.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_12 && unwrappedOraConn_tOracleInput_12 != null) {
                        unwrappedOraConn_tOracleInput_12.setSessionTimeZone(sessionTimezone_tOracleInput_12);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_12).setSessionTimeZone(sessionTimezone_tOracleInput_12);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_12 = conn_tOracleInput_12.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_12.setFetchSize(1000);


		    String dbquery_tOracleInput_12 = "SELECT GT.ID,\n       GT.NOMBRE,\n       GT.SIGLA\nFROM GEN_TDOCUMENTOS GT \nWHERE GT.ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_12_QUERY",dbquery_tOracleInput_12);

		    java.sql.ResultSet rs_tOracleInput_12 = null;

		    try {
		    	rs_tOracleInput_12 = stmt_tOracleInput_12.executeQuery(dbquery_tOracleInput_12);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_12 = rs_tOracleInput_12.getMetaData();
		    	int colQtyInRs_tOracleInput_12 = rsmd_tOracleInput_12.getColumnCount();

		    String tmpContent_tOracleInput_12 = null;
		    
		    
		    while (rs_tOracleInput_12.next()) {
		        nb_line_tOracleInput_12++;
		        
							if(colQtyInRs_tOracleInput_12 < 1) {
								row17.ID = 0;
							} else {
		                          
					if(rs_tOracleInput_12.getObject(1) != null) {
						row17.ID = rs_tOracleInput_12.getInt(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_12 < 2) {
								row17.NOMBRE = null;
							} else {
	                         		
        	row17.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_12, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_12 < 3) {
								row17.SIGLA = null;
							} else {
	                         		
        	row17.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_12, 3, false);
		                    }
					




 



/**
 * [tOracleInput_12 begin ] stop
 */
	
	/**
	 * [tOracleInput_12 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 


	tos_count_tOracleInput_12++;

/**
 * [tOracleInput_12 main ] stop
 */
	
	/**
	 * [tOracleInput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 



/**
 * [tOracleInput_12 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row17"
						
						);
					}
					



    
		row17Struct oneRow_tHashOutput_1 = new row17Struct();
				
					oneRow_tHashOutput_1.ID = row17.ID;
					oneRow_tHashOutput_1.NOMBRE = row17.NOMBRE;
					oneRow_tHashOutput_1.SIGLA = row17.SIGLA;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;

 


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 



/**
 * [tOracleInput_12 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_12 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

}
}finally{
	if (rs_tOracleInput_12 != null) {
		rs_tOracleInput_12.close();
	}
	if (stmt_tOracleInput_12 != null) {
		stmt_tOracleInput_12.close();
	}
}

globalMap.put("tOracleInput_12_NB_LINE",nb_line_tOracleInput_12);
 

ok_Hash.put("tOracleInput_12", true);
end_Hash.put("tOracleInput_12", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk15", 0, "ok");
				}
				tOracleInput_13Process(globalMap);



/**
 * [tOracleInput_12 end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row17");
			  	}
			  	
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());




/**
 * [tHashOutput_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_12 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 



/**
 * [tOracleInput_12 finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_12_SUBPROCESS_STATE", 1);
	}
	


public static class row31Struct implements routines.system.IPersistableRow<row31Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 20;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 1;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row31Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row31Struct row31 = new row31Struct();




	
	/**
	 * [tHashOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_2", false);
		start_Hash.put("tHashOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row31");
					}
				
		int tos_count_tHashOutput_2 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row31Struct> tHashFile_tHashOutput_2 = null;
		String hashKey_tHashOutput_2 = "tHashFile_ActualizacionMSV_" + pid + "_tHashOutput_2";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_2)){
			    if(mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2) == null){
	      		    mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row31Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }else{
			    	tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }
			}
        int nb_line_tHashOutput_2 = 0;

 



/**
 * [tHashOutput_2 begin ] stop
 */



	
	/**
	 * [tOracleInput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_13", false);
		start_Hash.put("tOracleInput_13", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_13";
	
	
		int tos_count_tOracleInput_13 = 0;
		
	


	
		    int nb_line_tOracleInput_13 = 0;
		    java.sql.Connection conn_tOracleInput_13 = null;
				conn_tOracleInput_13 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_13 = false;
				boolean isConnectionWrapped_tOracleInput_13 = !(conn_tOracleInput_13 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_13.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_13 = null;
                if (isConnectionWrapped_tOracleInput_13) {
					unwrappedOraConn_tOracleInput_13 = conn_tOracleInput_13.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_13 != null) {
                        isTimeZoneNull_tOracleInput_13 = (unwrappedOraConn_tOracleInput_13.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_13 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_13).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_13) {
					java.sql.Statement stmtGetTZ_tOracleInput_13 = conn_tOracleInput_13.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_13 = stmtGetTZ_tOracleInput_13.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_13 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_13.next()) {
						sessionTimezone_tOracleInput_13 = rsGetTZ_tOracleInput_13.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_13 && unwrappedOraConn_tOracleInput_13 != null) {
                        unwrappedOraConn_tOracleInput_13.setSessionTimeZone(sessionTimezone_tOracleInput_13);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_13).setSessionTimeZone(sessionTimezone_tOracleInput_13);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_13 = conn_tOracleInput_13.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_13.setFetchSize(1000);


		    String dbquery_tOracleInput_13 = "SELECT GS.ID,\n       GS.NOMBRE,\n       GS.SIGLA\nFROM GEN_SEXOS GS \nWHERE GS.ESTREGISTRO_ID = 1 \n      AND SIGLA IN"
+" ('M', 'F')";
		    

		    globalMap.put("tOracleInput_13_QUERY",dbquery_tOracleInput_13);

		    java.sql.ResultSet rs_tOracleInput_13 = null;

		    try {
		    	rs_tOracleInput_13 = stmt_tOracleInput_13.executeQuery(dbquery_tOracleInput_13);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_13 = rs_tOracleInput_13.getMetaData();
		    	int colQtyInRs_tOracleInput_13 = rsmd_tOracleInput_13.getColumnCount();

		    String tmpContent_tOracleInput_13 = null;
		    
		    
		    while (rs_tOracleInput_13.next()) {
		        nb_line_tOracleInput_13++;
		        
							if(colQtyInRs_tOracleInput_13 < 1) {
								row31.ID = 0;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(1) != null) {
						row31.ID = rs_tOracleInput_13.getInt(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 2) {
								row31.NOMBRE = null;
							} else {
	                         		
        	row31.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 3) {
								row31.SIGLA = null;
							} else {
	                         		
        	row31.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 3, false);
		                    }
					




 



/**
 * [tOracleInput_13 begin ] stop
 */
	
	/**
	 * [tOracleInput_13 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 


	tos_count_tOracleInput_13++;

/**
 * [tOracleInput_13 main ] stop
 */
	
	/**
	 * [tOracleInput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row31"
						
						);
					}
					



    
		row31Struct oneRow_tHashOutput_2 = new row31Struct();
				
					oneRow_tHashOutput_2.ID = row31.ID;
					oneRow_tHashOutput_2.NOMBRE = row31.NOMBRE;
					oneRow_tHashOutput_2.SIGLA = row31.SIGLA;
		
        tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
        nb_line_tHashOutput_2 ++;

 


	tos_count_tHashOutput_2++;

/**
 * [tHashOutput_2 main ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_13 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

}
}finally{
	if (rs_tOracleInput_13 != null) {
		rs_tOracleInput_13.close();
	}
	if (stmt_tOracleInput_13 != null) {
		stmt_tOracleInput_13.close();
	}
}

globalMap.put("tOracleInput_13_NB_LINE",nb_line_tOracleInput_13);
 

ok_Hash.put("tOracleInput_13", true);
end_Hash.put("tOracleInput_13", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk16", 0, "ok");
				}
				tOracleInput_14Process(globalMap);



/**
 * [tOracleInput_13 end ] stop
 */

	
	/**
	 * [tHashOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row31");
			  	}
			  	
 

ok_Hash.put("tHashOutput_2", true);
end_Hash.put("tHashOutput_2", System.currentTimeMillis());




/**
 * [tHashOutput_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_13 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 finally ] stop
 */

	
	/**
	 * [tHashOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_13_SUBPROCESS_STATE", 1);
	}
	


public static class row50Struct implements routines.system.IPersistableRow<row50Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 20;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row50Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row50Struct row50 = new row50Struct();




	
	/**
	 * [tHashOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_3", false);
		start_Hash.put("tHashOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row50");
					}
				
		int tos_count_tHashOutput_3 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row50Struct> tHashFile_tHashOutput_3 = null;
		String hashKey_tHashOutput_3 = "tHashFile_ActualizacionMSV_" + pid + "_tHashOutput_3";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_3)){
			    if(mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3) == null){
	      		    mf_tHashOutput_3.getResourceMap().put(hashKey_tHashOutput_3, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row50Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }else{
			    	tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }
			}
        int nb_line_tHashOutput_3 = 0;

 



/**
 * [tHashOutput_3 begin ] stop
 */



	
	/**
	 * [tOracleInput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_14", false);
		start_Hash.put("tOracleInput_14", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_14";
	
	
		int tos_count_tOracleInput_14 = 0;
		
	


	
		    int nb_line_tOracleInput_14 = 0;
		    java.sql.Connection conn_tOracleInput_14 = null;
				conn_tOracleInput_14 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_14 = false;
				boolean isConnectionWrapped_tOracleInput_14 = !(conn_tOracleInput_14 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_14.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_14 = null;
                if (isConnectionWrapped_tOracleInput_14) {
					unwrappedOraConn_tOracleInput_14 = conn_tOracleInput_14.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_14 != null) {
                        isTimeZoneNull_tOracleInput_14 = (unwrappedOraConn_tOracleInput_14.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_14 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_14).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_14) {
					java.sql.Statement stmtGetTZ_tOracleInput_14 = conn_tOracleInput_14.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_14 = stmtGetTZ_tOracleInput_14.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_14 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_14.next()) {
						sessionTimezone_tOracleInput_14 = rsGetTZ_tOracleInput_14.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_14 && unwrappedOraConn_tOracleInput_14 != null) {
                        unwrappedOraConn_tOracleInput_14.setSessionTimeZone(sessionTimezone_tOracleInput_14);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_14).setSessionTimeZone(sessionTimezone_tOracleInput_14);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_14 = conn_tOracleInput_14.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_14.setFetchSize(1000);


		    String dbquery_tOracleInput_14 = "SELECT GG.ID, \n       GG.NOMBRE \nFROM GEN_GSANGUINEOS GG      \nWHERE GG.ESTREGISTRO_ID = 1\n      AND GG.NOMBRE <> '"
+"N'";
		    

		    globalMap.put("tOracleInput_14_QUERY",dbquery_tOracleInput_14);

		    java.sql.ResultSet rs_tOracleInput_14 = null;

		    try {
		    	rs_tOracleInput_14 = stmt_tOracleInput_14.executeQuery(dbquery_tOracleInput_14);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_14 = rs_tOracleInput_14.getMetaData();
		    	int colQtyInRs_tOracleInput_14 = rsmd_tOracleInput_14.getColumnCount();

		    String tmpContent_tOracleInput_14 = null;
		    
		    
		    while (rs_tOracleInput_14.next()) {
		        nb_line_tOracleInput_14++;
		        
							if(colQtyInRs_tOracleInput_14 < 1) {
								row50.ID = 0;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(1) != null) {
						row50.ID = rs_tOracleInput_14.getInt(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 2) {
								row50.NOMBRE = null;
							} else {
	                         		
        	row50.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 2, false);
		                    }
					




 



/**
 * [tOracleInput_14 begin ] stop
 */
	
	/**
	 * [tOracleInput_14 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 


	tos_count_tOracleInput_14++;

/**
 * [tOracleInput_14 main ] stop
 */
	
	/**
	 * [tOracleInput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 



/**
 * [tOracleInput_14 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_3 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row50"
						
						);
					}
					



    
		row50Struct oneRow_tHashOutput_3 = new row50Struct();
				
					oneRow_tHashOutput_3.ID = row50.ID;
					oneRow_tHashOutput_3.NOMBRE = row50.NOMBRE;
		
        tHashFile_tHashOutput_3.put(oneRow_tHashOutput_3);
        nb_line_tHashOutput_3 ++;

 


	tos_count_tHashOutput_3++;

/**
 * [tHashOutput_3 main ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 



/**
 * [tOracleInput_14 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_14 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

}
}finally{
	if (rs_tOracleInput_14 != null) {
		rs_tOracleInput_14.close();
	}
	if (stmt_tOracleInput_14 != null) {
		stmt_tOracleInput_14.close();
	}
}

globalMap.put("tOracleInput_14_NB_LINE",nb_line_tOracleInput_14);
 

ok_Hash.put("tOracleInput_14", true);
end_Hash.put("tOracleInput_14", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk17", 0, "ok");
				}
				tOracleInput_15Process(globalMap);



/**
 * [tOracleInput_14 end ] stop
 */

	
	/**
	 * [tHashOutput_3 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	
globalMap.put("tHashOutput_3_NB_LINE", nb_line_tHashOutput_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row50");
			  	}
			  	
 

ok_Hash.put("tHashOutput_3", true);
end_Hash.put("tHashOutput_3", System.currentTimeMillis());




/**
 * [tHashOutput_3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_14 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 



/**
 * [tOracleInput_14 finally ] stop
 */

	
	/**
	 * [tHashOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_14_SUBPROCESS_STATE", 1);
	}
	


public static class row51Struct implements routines.system.IPersistableRow<row51Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 500;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 20;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row51Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row51Struct row51 = new row51Struct();




	
	/**
	 * [tHashOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_4", false);
		start_Hash.put("tHashOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row51");
					}
				
		int tos_count_tHashOutput_4 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row51Struct> tHashFile_tHashOutput_4 = null;
		String hashKey_tHashOutput_4 = "tHashFile_ActualizacionMSV_" + pid + "_tHashOutput_4";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_4)){
			    if(mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4) == null){
	      		    mf_tHashOutput_4.getResourceMap().put(hashKey_tHashOutput_4, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row51Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }else{
			    	tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }
			}
        int nb_line_tHashOutput_4 = 0;

 



/**
 * [tHashOutput_4 begin ] stop
 */



	
	/**
	 * [tOracleInput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_15", false);
		start_Hash.put("tOracleInput_15", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_15";
	
	
		int tos_count_tOracleInput_15 = 0;
		
	


	
		    int nb_line_tOracleInput_15 = 0;
		    java.sql.Connection conn_tOracleInput_15 = null;
				conn_tOracleInput_15 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_15 = false;
				boolean isConnectionWrapped_tOracleInput_15 = !(conn_tOracleInput_15 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_15.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_15 = null;
                if (isConnectionWrapped_tOracleInput_15) {
					unwrappedOraConn_tOracleInput_15 = conn_tOracleInput_15.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_15 != null) {
                        isTimeZoneNull_tOracleInput_15 = (unwrappedOraConn_tOracleInput_15.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_15 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_15).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_15) {
					java.sql.Statement stmtGetTZ_tOracleInput_15 = conn_tOracleInput_15.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_15 = stmtGetTZ_tOracleInput_15.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_15 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_15.next()) {
						sessionTimezone_tOracleInput_15 = rsGetTZ_tOracleInput_15.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_15 && unwrappedOraConn_tOracleInput_15 != null) {
                        unwrappedOraConn_tOracleInput_15.setSessionTimeZone(sessionTimezone_tOracleInput_15);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_15).setSessionTimeZone(sessionTimezone_tOracleInput_15);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_15 = conn_tOracleInput_15.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_15.setFetchSize(1000);


		    String dbquery_tOracleInput_15 = "SELECT GOC.ID, \n       GOC.NOMBRE, \n       GOC.SIGLA \nFROM GEN_OCUPACIONES GOC\nWHERE GOC.ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_15_QUERY",dbquery_tOracleInput_15);

		    java.sql.ResultSet rs_tOracleInput_15 = null;

		    try {
		    	rs_tOracleInput_15 = stmt_tOracleInput_15.executeQuery(dbquery_tOracleInput_15);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_15 = rs_tOracleInput_15.getMetaData();
		    	int colQtyInRs_tOracleInput_15 = rsmd_tOracleInput_15.getColumnCount();

		    String tmpContent_tOracleInput_15 = null;
		    
		    
		    while (rs_tOracleInput_15.next()) {
		        nb_line_tOracleInput_15++;
		        
							if(colQtyInRs_tOracleInput_15 < 1) {
								row51.ID = 0;
							} else {
		                          
					if(rs_tOracleInput_15.getObject(1) != null) {
						row51.ID = rs_tOracleInput_15.getInt(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_15 < 2) {
								row51.NOMBRE = null;
							} else {
	                         		
        	row51.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_15, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_15 < 3) {
								row51.SIGLA = null;
							} else {
	                         		
        	row51.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_15, 3, false);
		                    }
					




 



/**
 * [tOracleInput_15 begin ] stop
 */
	
	/**
	 * [tOracleInput_15 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

 


	tos_count_tOracleInput_15++;

/**
 * [tOracleInput_15 main ] stop
 */
	
	/**
	 * [tOracleInput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

 



/**
 * [tOracleInput_15 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_4 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row51"
						
						);
					}
					



    
		row51Struct oneRow_tHashOutput_4 = new row51Struct();
				
					oneRow_tHashOutput_4.ID = row51.ID;
					oneRow_tHashOutput_4.NOMBRE = row51.NOMBRE;
					oneRow_tHashOutput_4.SIGLA = row51.SIGLA;
		
        tHashFile_tHashOutput_4.put(oneRow_tHashOutput_4);
        nb_line_tHashOutput_4 ++;

 


	tos_count_tHashOutput_4++;

/**
 * [tHashOutput_4 main ] stop
 */
	
	/**
	 * [tHashOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

 



/**
 * [tOracleInput_15 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_15 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

}
}finally{
	if (rs_tOracleInput_15 != null) {
		rs_tOracleInput_15.close();
	}
	if (stmt_tOracleInput_15 != null) {
		stmt_tOracleInput_15.close();
	}
}

globalMap.put("tOracleInput_15_NB_LINE",nb_line_tOracleInput_15);
 

ok_Hash.put("tOracleInput_15", true);
end_Hash.put("tOracleInput_15", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk20", 0, "ok");
				}
				tOracleInput_20Process(globalMap);



/**
 * [tOracleInput_15 end ] stop
 */

	
	/**
	 * [tHashOutput_4 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	
globalMap.put("tHashOutput_4_NB_LINE", nb_line_tHashOutput_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row51");
			  	}
			  	
 

ok_Hash.put("tHashOutput_4", true);
end_Hash.put("tHashOutput_4", System.currentTimeMillis());




/**
 * [tHashOutput_4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_15 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

 



/**
 * [tOracleInput_15 finally ] stop
 */

	
	/**
	 * [tHashOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_15_SUBPROCESS_STATE", 1);
	}
	


public static class row56Struct implements routines.system.IPersistableRow<row56Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 100;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return false;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 5;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",CODIGO="+CODIGO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row56Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_20Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_20_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row56Struct row56 = new row56Struct();




	
	/**
	 * [tHashOutput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_9", false);
		start_Hash.put("tHashOutput_9", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row56");
					}
				
		int tos_count_tHashOutput_9 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_9=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row56Struct> tHashFile_tHashOutput_9 = null;
		String hashKey_tHashOutput_9 = "tHashFile_ActualizacionMSV_" + pid + "_tHashOutput_9";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_9)){
			    if(mf_tHashOutput_9.getResourceMap().get(hashKey_tHashOutput_9) == null){
	      		    mf_tHashOutput_9.getResourceMap().put(hashKey_tHashOutput_9, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row56Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_9 = mf_tHashOutput_9.getResourceMap().get(hashKey_tHashOutput_9);
			    }else{
			    	tHashFile_tHashOutput_9 = mf_tHashOutput_9.getResourceMap().get(hashKey_tHashOutput_9);
			    }
			}
        int nb_line_tHashOutput_9 = 0;

 



/**
 * [tHashOutput_9 begin ] stop
 */



	
	/**
	 * [tOracleInput_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_20", false);
		start_Hash.put("tOracleInput_20", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_20";
	
	
		int tos_count_tOracleInput_20 = 0;
		
	


	
		    int nb_line_tOracleInput_20 = 0;
		    java.sql.Connection conn_tOracleInput_20 = null;
				conn_tOracleInput_20 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_20 = false;
				boolean isConnectionWrapped_tOracleInput_20 = !(conn_tOracleInput_20 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_20.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_20 = null;
                if (isConnectionWrapped_tOracleInput_20) {
					unwrappedOraConn_tOracleInput_20 = conn_tOracleInput_20.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_20 != null) {
                        isTimeZoneNull_tOracleInput_20 = (unwrappedOraConn_tOracleInput_20.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_20 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_20).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_20) {
					java.sql.Statement stmtGetTZ_tOracleInput_20 = conn_tOracleInput_20.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_20 = stmtGetTZ_tOracleInput_20.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_20 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_20.next()) {
						sessionTimezone_tOracleInput_20 = rsGetTZ_tOracleInput_20.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_20 && unwrappedOraConn_tOracleInput_20 != null) {
                        unwrappedOraConn_tOracleInput_20.setSessionTimeZone(sessionTimezone_tOracleInput_20);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_20).setSessionTimeZone(sessionTimezone_tOracleInput_20);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_20 = conn_tOracleInput_20.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_20.setFetchSize(1000);


		    String dbquery_tOracleInput_20 = "SELECT GE.ID, \n       GE.NOMBRE, \n       GE.CODIGO \nFROM GEN_ETNICAS GE\nWHERE GE.ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_20_QUERY",dbquery_tOracleInput_20);

		    java.sql.ResultSet rs_tOracleInput_20 = null;

		    try {
		    	rs_tOracleInput_20 = stmt_tOracleInput_20.executeQuery(dbquery_tOracleInput_20);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_20 = rs_tOracleInput_20.getMetaData();
		    	int colQtyInRs_tOracleInput_20 = rsmd_tOracleInput_20.getColumnCount();

		    String tmpContent_tOracleInput_20 = null;
		    
		    
		    while (rs_tOracleInput_20.next()) {
		        nb_line_tOracleInput_20++;
		        
							if(colQtyInRs_tOracleInput_20 < 1) {
								row56.ID = 0;
							} else {
		                          
					if(rs_tOracleInput_20.getObject(1) != null) {
						row56.ID = rs_tOracleInput_20.getInt(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_20 < 2) {
								row56.NOMBRE = null;
							} else {
	                         		
        	row56.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_20, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_20 < 3) {
								row56.CODIGO = null;
							} else {
	                         		
        	row56.CODIGO = routines.system.JDBCUtil.getString(rs_tOracleInput_20, 3, false);
		                    }
					




 



/**
 * [tOracleInput_20 begin ] stop
 */
	
	/**
	 * [tOracleInput_20 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_20";
	
	

 


	tos_count_tOracleInput_20++;

/**
 * [tOracleInput_20 main ] stop
 */
	
	/**
	 * [tOracleInput_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_20";
	
	

 



/**
 * [tOracleInput_20 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_9 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row56"
						
						);
					}
					



    
		row56Struct oneRow_tHashOutput_9 = new row56Struct();
				
					oneRow_tHashOutput_9.ID = row56.ID;
					oneRow_tHashOutput_9.NOMBRE = row56.NOMBRE;
					oneRow_tHashOutput_9.CODIGO = row56.CODIGO;
		
        tHashFile_tHashOutput_9.put(oneRow_tHashOutput_9);
        nb_line_tHashOutput_9 ++;

 


	tos_count_tHashOutput_9++;

/**
 * [tHashOutput_9 main ] stop
 */
	
	/**
	 * [tHashOutput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";
	
	

 



/**
 * [tHashOutput_9 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";
	
	

 



/**
 * [tHashOutput_9 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_20";
	
	

 



/**
 * [tOracleInput_20 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_20 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_20";
	
	

}
}finally{
	if (rs_tOracleInput_20 != null) {
		rs_tOracleInput_20.close();
	}
	if (stmt_tOracleInput_20 != null) {
		stmt_tOracleInput_20.close();
	}
}

globalMap.put("tOracleInput_20_NB_LINE",nb_line_tOracleInput_20);
 

ok_Hash.put("tOracleInput_20", true);
end_Hash.put("tOracleInput_20", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk21", 0, "ok");
				}
				tOracleInput_22Process(globalMap);



/**
 * [tOracleInput_20 end ] stop
 */

	
	/**
	 * [tHashOutput_9 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";
	
	
globalMap.put("tHashOutput_9_NB_LINE", nb_line_tHashOutput_9);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row56");
			  	}
			  	
 

ok_Hash.put("tHashOutput_9", true);
end_Hash.put("tHashOutput_9", System.currentTimeMillis());




/**
 * [tHashOutput_9 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_20 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_20";
	
	

 



/**
 * [tOracleInput_20 finally ] stop
 */

	
	/**
	 * [tHashOutput_9 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";
	
	

 



/**
 * [tHashOutput_9 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_20_SUBPROCESS_STATE", 1);
	}
	


public static class row58Struct implements routines.system.IPersistableRow<row58Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 50;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row58Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_22Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_22_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row58Struct row58 = new row58Struct();




	
	/**
	 * [tHashOutput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_11", false);
		start_Hash.put("tHashOutput_11", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_11";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row58");
					}
				
		int tos_count_tHashOutput_11 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_11=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row58Struct> tHashFile_tHashOutput_11 = null;
		String hashKey_tHashOutput_11 = "tHashFile_ActualizacionMSV_" + pid + "_tHashOutput_11";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_11)){
			    if(mf_tHashOutput_11.getResourceMap().get(hashKey_tHashOutput_11) == null){
	      		    mf_tHashOutput_11.getResourceMap().put(hashKey_tHashOutput_11, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row58Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_11 = mf_tHashOutput_11.getResourceMap().get(hashKey_tHashOutput_11);
			    }else{
			    	tHashFile_tHashOutput_11 = mf_tHashOutput_11.getResourceMap().get(hashKey_tHashOutput_11);
			    }
			}
        int nb_line_tHashOutput_11 = 0;

 



/**
 * [tHashOutput_11 begin ] stop
 */



	
	/**
	 * [tOracleInput_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_22", false);
		start_Hash.put("tOracleInput_22", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_22";
	
	
		int tos_count_tOracleInput_22 = 0;
		
	


	
		    int nb_line_tOracleInput_22 = 0;
		    java.sql.Connection conn_tOracleInput_22 = null;
				conn_tOracleInput_22 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_22 = false;
				boolean isConnectionWrapped_tOracleInput_22 = !(conn_tOracleInput_22 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_22.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_22 = null;
                if (isConnectionWrapped_tOracleInput_22) {
					unwrappedOraConn_tOracleInput_22 = conn_tOracleInput_22.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_22 != null) {
                        isTimeZoneNull_tOracleInput_22 = (unwrappedOraConn_tOracleInput_22.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_22 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_22).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_22) {
					java.sql.Statement stmtGetTZ_tOracleInput_22 = conn_tOracleInput_22.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_22 = stmtGetTZ_tOracleInput_22.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_22 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_22.next()) {
						sessionTimezone_tOracleInput_22 = rsGetTZ_tOracleInput_22.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_22 && unwrappedOraConn_tOracleInput_22 != null) {
                        unwrappedOraConn_tOracleInput_22.setSessionTimeZone(sessionTimezone_tOracleInput_22);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_22).setSessionTimeZone(sessionTimezone_tOracleInput_22);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_22 = conn_tOracleInput_22.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_22.setFetchSize(1000);


		    String dbquery_tOracleInput_22 = "SELECT GN.ID, \n       GN.NOMBRE \nFROM GEN_NSOCIOECONOMICOS GN \nWHERE GN.ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_22_QUERY",dbquery_tOracleInput_22);

		    java.sql.ResultSet rs_tOracleInput_22 = null;

		    try {
		    	rs_tOracleInput_22 = stmt_tOracleInput_22.executeQuery(dbquery_tOracleInput_22);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_22 = rs_tOracleInput_22.getMetaData();
		    	int colQtyInRs_tOracleInput_22 = rsmd_tOracleInput_22.getColumnCount();

		    String tmpContent_tOracleInput_22 = null;
		    
		    
		    while (rs_tOracleInput_22.next()) {
		        nb_line_tOracleInput_22++;
		        
							if(colQtyInRs_tOracleInput_22 < 1) {
								row58.ID = 0;
							} else {
		                          
					if(rs_tOracleInput_22.getObject(1) != null) {
						row58.ID = rs_tOracleInput_22.getInt(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_22 < 2) {
								row58.NOMBRE = null;
							} else {
	                         		
        	row58.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_22, 2, false);
		                    }
					




 



/**
 * [tOracleInput_22 begin ] stop
 */
	
	/**
	 * [tOracleInput_22 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_22";
	
	

 


	tos_count_tOracleInput_22++;

/**
 * [tOracleInput_22 main ] stop
 */
	
	/**
	 * [tOracleInput_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_22";
	
	

 



/**
 * [tOracleInput_22 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_11 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row58"
						
						);
					}
					



    
		row58Struct oneRow_tHashOutput_11 = new row58Struct();
				
					oneRow_tHashOutput_11.ID = row58.ID;
					oneRow_tHashOutput_11.NOMBRE = row58.NOMBRE;
		
        tHashFile_tHashOutput_11.put(oneRow_tHashOutput_11);
        nb_line_tHashOutput_11 ++;

 


	tos_count_tHashOutput_11++;

/**
 * [tHashOutput_11 main ] stop
 */
	
	/**
	 * [tHashOutput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";
	
	

 



/**
 * [tHashOutput_11 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";
	
	

 



/**
 * [tHashOutput_11 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_22";
	
	

 



/**
 * [tOracleInput_22 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_22 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_22";
	
	

}
}finally{
	if (rs_tOracleInput_22 != null) {
		rs_tOracleInput_22.close();
	}
	if (stmt_tOracleInput_22 != null) {
		stmt_tOracleInput_22.close();
	}
}

globalMap.put("tOracleInput_22_NB_LINE",nb_line_tOracleInput_22);
 

ok_Hash.put("tOracleInput_22", true);
end_Hash.put("tOracleInput_22", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk22", 0, "ok");
				}
				tOracleInput_24Process(globalMap);



/**
 * [tOracleInput_22 end ] stop
 */

	
	/**
	 * [tHashOutput_11 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";
	
	
globalMap.put("tHashOutput_11_NB_LINE", nb_line_tHashOutput_11);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row58");
			  	}
			  	
 

ok_Hash.put("tHashOutput_11", true);
end_Hash.put("tHashOutput_11", System.currentTimeMillis());




/**
 * [tHashOutput_11 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_22 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_22";
	
	

 



/**
 * [tOracleInput_22 finally ] stop
 */

	
	/**
	 * [tHashOutput_11 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";
	
	

 



/**
 * [tHashOutput_11 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_22_SUBPROCESS_STATE", 1);
	}
	


public static class row60Struct implements routines.system.IPersistableRow<row60Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 50;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 5;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row60Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_24Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_24_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row60Struct row60 = new row60Struct();




	
	/**
	 * [tHashOutput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_13", false);
		start_Hash.put("tHashOutput_13", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_13";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row60");
					}
				
		int tos_count_tHashOutput_13 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_13=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row60Struct> tHashFile_tHashOutput_13 = null;
		String hashKey_tHashOutput_13 = "tHashFile_ActualizacionMSV_" + pid + "_tHashOutput_13";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_13)){
			    if(mf_tHashOutput_13.getResourceMap().get(hashKey_tHashOutput_13) == null){
	      		    mf_tHashOutput_13.getResourceMap().put(hashKey_tHashOutput_13, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row60Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_13 = mf_tHashOutput_13.getResourceMap().get(hashKey_tHashOutput_13);
			    }else{
			    	tHashFile_tHashOutput_13 = mf_tHashOutput_13.getResourceMap().get(hashKey_tHashOutput_13);
			    }
			}
        int nb_line_tHashOutput_13 = 0;

 



/**
 * [tHashOutput_13 begin ] stop
 */



	
	/**
	 * [tOracleInput_24 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_24", false);
		start_Hash.put("tOracleInput_24", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_24";
	
	
		int tos_count_tOracleInput_24 = 0;
		
	


	
		    int nb_line_tOracleInput_24 = 0;
		    java.sql.Connection conn_tOracleInput_24 = null;
				conn_tOracleInput_24 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_24 = false;
				boolean isConnectionWrapped_tOracleInput_24 = !(conn_tOracleInput_24 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_24.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_24 = null;
                if (isConnectionWrapped_tOracleInput_24) {
					unwrappedOraConn_tOracleInput_24 = conn_tOracleInput_24.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_24 != null) {
                        isTimeZoneNull_tOracleInput_24 = (unwrappedOraConn_tOracleInput_24.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_24 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_24).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_24) {
					java.sql.Statement stmtGetTZ_tOracleInput_24 = conn_tOracleInput_24.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_24 = stmtGetTZ_tOracleInput_24.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_24 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_24.next()) {
						sessionTimezone_tOracleInput_24 = rsGetTZ_tOracleInput_24.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_24 && unwrappedOraConn_tOracleInput_24 != null) {
                        unwrappedOraConn_tOracleInput_24.setSessionTimeZone(sessionTimezone_tOracleInput_24);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_24).setSessionTimeZone(sessionTimezone_tOracleInput_24);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_24 = conn_tOracleInput_24.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_24.setFetchSize(1000);


		    String dbquery_tOracleInput_24 = "SELECT GT.ID, \n       GT.NOMBRE, \n       GT.SIGLA \nFROM GEN_TVIVIENDA GT\nWHERE GT.ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_24_QUERY",dbquery_tOracleInput_24);

		    java.sql.ResultSet rs_tOracleInput_24 = null;

		    try {
		    	rs_tOracleInput_24 = stmt_tOracleInput_24.executeQuery(dbquery_tOracleInput_24);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_24 = rs_tOracleInput_24.getMetaData();
		    	int colQtyInRs_tOracleInput_24 = rsmd_tOracleInput_24.getColumnCount();

		    String tmpContent_tOracleInput_24 = null;
		    
		    
		    while (rs_tOracleInput_24.next()) {
		        nb_line_tOracleInput_24++;
		        
							if(colQtyInRs_tOracleInput_24 < 1) {
								row60.ID = 0;
							} else {
		                          
					if(rs_tOracleInput_24.getObject(1) != null) {
						row60.ID = rs_tOracleInput_24.getInt(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_24 < 2) {
								row60.NOMBRE = null;
							} else {
	                         		
        	row60.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_24, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_24 < 3) {
								row60.SIGLA = null;
							} else {
	                         		
        	row60.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_24, 3, false);
		                    }
					




 



/**
 * [tOracleInput_24 begin ] stop
 */
	
	/**
	 * [tOracleInput_24 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_24";
	
	

 


	tos_count_tOracleInput_24++;

/**
 * [tOracleInput_24 main ] stop
 */
	
	/**
	 * [tOracleInput_24 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_24";
	
	

 



/**
 * [tOracleInput_24 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_13 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_13";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row60"
						
						);
					}
					



    
		row60Struct oneRow_tHashOutput_13 = new row60Struct();
				
					oneRow_tHashOutput_13.ID = row60.ID;
					oneRow_tHashOutput_13.NOMBRE = row60.NOMBRE;
					oneRow_tHashOutput_13.SIGLA = row60.SIGLA;
		
        tHashFile_tHashOutput_13.put(oneRow_tHashOutput_13);
        nb_line_tHashOutput_13 ++;

 


	tos_count_tHashOutput_13++;

/**
 * [tHashOutput_13 main ] stop
 */
	
	/**
	 * [tHashOutput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_13";
	
	

 



/**
 * [tHashOutput_13 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_13";
	
	

 



/**
 * [tHashOutput_13 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_24 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_24";
	
	

 



/**
 * [tOracleInput_24 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_24 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_24";
	
	

}
}finally{
	if (rs_tOracleInput_24 != null) {
		rs_tOracleInput_24.close();
	}
	if (stmt_tOracleInput_24 != null) {
		stmt_tOracleInput_24.close();
	}
}

globalMap.put("tOracleInput_24_NB_LINE",nb_line_tOracleInput_24);
 

ok_Hash.put("tOracleInput_24", true);
end_Hash.put("tOracleInput_24", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk23", 0, "ok");
				}
				tOracleInput_26Process(globalMap);



/**
 * [tOracleInput_24 end ] stop
 */

	
	/**
	 * [tHashOutput_13 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_13";
	
	
globalMap.put("tHashOutput_13_NB_LINE", nb_line_tHashOutput_13);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row60");
			  	}
			  	
 

ok_Hash.put("tHashOutput_13", true);
end_Hash.put("tHashOutput_13", System.currentTimeMillis());




/**
 * [tHashOutput_13 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_24 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_24";
	
	

 



/**
 * [tOracleInput_24 finally ] stop
 */

	
	/**
	 * [tHashOutput_13 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_13";
	
	

 



/**
 * [tHashOutput_13 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_24_SUBPROCESS_STATE", 1);
	}
	


public static class row62Struct implements routines.system.IPersistableRow<row62Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 100;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 3;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row62Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_26Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_26_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row62Struct row62 = new row62Struct();




	
	/**
	 * [tHashOutput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_15", false);
		start_Hash.put("tHashOutput_15", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_15";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row62");
					}
				
		int tos_count_tHashOutput_15 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_15=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row62Struct> tHashFile_tHashOutput_15 = null;
		String hashKey_tHashOutput_15 = "tHashFile_ActualizacionMSV_" + pid + "_tHashOutput_15";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_15)){
			    if(mf_tHashOutput_15.getResourceMap().get(hashKey_tHashOutput_15) == null){
	      		    mf_tHashOutput_15.getResourceMap().put(hashKey_tHashOutput_15, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row62Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_15 = mf_tHashOutput_15.getResourceMap().get(hashKey_tHashOutput_15);
			    }else{
			    	tHashFile_tHashOutput_15 = mf_tHashOutput_15.getResourceMap().get(hashKey_tHashOutput_15);
			    }
			}
        int nb_line_tHashOutput_15 = 0;

 



/**
 * [tHashOutput_15 begin ] stop
 */



	
	/**
	 * [tOracleInput_26 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_26", false);
		start_Hash.put("tOracleInput_26", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_26";
	
	
		int tos_count_tOracleInput_26 = 0;
		
	


	
		    int nb_line_tOracleInput_26 = 0;
		    java.sql.Connection conn_tOracleInput_26 = null;
				conn_tOracleInput_26 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_26 = false;
				boolean isConnectionWrapped_tOracleInput_26 = !(conn_tOracleInput_26 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_26.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_26 = null;
                if (isConnectionWrapped_tOracleInput_26) {
					unwrappedOraConn_tOracleInput_26 = conn_tOracleInput_26.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_26 != null) {
                        isTimeZoneNull_tOracleInput_26 = (unwrappedOraConn_tOracleInput_26.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_26 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_26).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_26) {
					java.sql.Statement stmtGetTZ_tOracleInput_26 = conn_tOracleInput_26.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_26 = stmtGetTZ_tOracleInput_26.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_26 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_26.next()) {
						sessionTimezone_tOracleInput_26 = rsGetTZ_tOracleInput_26.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_26 && unwrappedOraConn_tOracleInput_26 != null) {
                        unwrappedOraConn_tOracleInput_26.setSessionTimeZone(sessionTimezone_tOracleInput_26);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_26).setSessionTimeZone(sessionTimezone_tOracleInput_26);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_26 = conn_tOracleInput_26.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_26.setFetchSize(1000);


		    String dbquery_tOracleInput_26 = "SELECT GN.ID, \n       GN.NOMBRE, \n       GN.SIGLA \nFROM GEN_NEDUCATIVOS GN \nWHERE GN.ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_26_QUERY",dbquery_tOracleInput_26);

		    java.sql.ResultSet rs_tOracleInput_26 = null;

		    try {
		    	rs_tOracleInput_26 = stmt_tOracleInput_26.executeQuery(dbquery_tOracleInput_26);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_26 = rs_tOracleInput_26.getMetaData();
		    	int colQtyInRs_tOracleInput_26 = rsmd_tOracleInput_26.getColumnCount();

		    String tmpContent_tOracleInput_26 = null;
		    
		    
		    while (rs_tOracleInput_26.next()) {
		        nb_line_tOracleInput_26++;
		        
							if(colQtyInRs_tOracleInput_26 < 1) {
								row62.ID = 0;
							} else {
		                          
					if(rs_tOracleInput_26.getObject(1) != null) {
						row62.ID = rs_tOracleInput_26.getInt(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_26 < 2) {
								row62.NOMBRE = null;
							} else {
	                         		
        	row62.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_26, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_26 < 3) {
								row62.SIGLA = null;
							} else {
	                         		
        	row62.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_26, 3, false);
		                    }
					




 



/**
 * [tOracleInput_26 begin ] stop
 */
	
	/**
	 * [tOracleInput_26 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_26";
	
	

 


	tos_count_tOracleInput_26++;

/**
 * [tOracleInput_26 main ] stop
 */
	
	/**
	 * [tOracleInput_26 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_26";
	
	

 



/**
 * [tOracleInput_26 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_15 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_15";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row62"
						
						);
					}
					



    
		row62Struct oneRow_tHashOutput_15 = new row62Struct();
				
					oneRow_tHashOutput_15.ID = row62.ID;
					oneRow_tHashOutput_15.NOMBRE = row62.NOMBRE;
					oneRow_tHashOutput_15.SIGLA = row62.SIGLA;
		
        tHashFile_tHashOutput_15.put(oneRow_tHashOutput_15);
        nb_line_tHashOutput_15 ++;

 


	tos_count_tHashOutput_15++;

/**
 * [tHashOutput_15 main ] stop
 */
	
	/**
	 * [tHashOutput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_15";
	
	

 



/**
 * [tHashOutput_15 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_15";
	
	

 



/**
 * [tHashOutput_15 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_26 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_26";
	
	

 



/**
 * [tOracleInput_26 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_26 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_26";
	
	

}
}finally{
	if (rs_tOracleInput_26 != null) {
		rs_tOracleInput_26.close();
	}
	if (stmt_tOracleInput_26 != null) {
		stmt_tOracleInput_26.close();
	}
}

globalMap.put("tOracleInput_26_NB_LINE",nb_line_tOracleInput_26);
 

ok_Hash.put("tOracleInput_26", true);
end_Hash.put("tOracleInput_26", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk34", 0, "ok");
				}
				tOracleInput_28Process(globalMap);



/**
 * [tOracleInput_26 end ] stop
 */

	
	/**
	 * [tHashOutput_15 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_15";
	
	
globalMap.put("tHashOutput_15_NB_LINE", nb_line_tHashOutput_15);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row62");
			  	}
			  	
 

ok_Hash.put("tHashOutput_15", true);
end_Hash.put("tHashOutput_15", System.currentTimeMillis());




/**
 * [tHashOutput_15 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_26 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_26";
	
	

 



/**
 * [tOracleInput_26 finally ] stop
 */

	
	/**
	 * [tHashOutput_15 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_15";
	
	

 



/**
 * [tHashOutput_15 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_26_SUBPROCESS_STATE", 1);
	}
	


public static class row78Struct implements routines.system.IPersistableRow<row78Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String CODPAIS;

				public String getCODPAIS () {
					return this.CODPAIS;
				}

				public Boolean CODPAISIsNullable(){
				    return false;
				}
				public Boolean CODPAISIsKey(){
				    return false;
				}
				public Integer CODPAISLength(){
				    return 5;
				}
				public Integer CODPAISPrecision(){
				    return 0;
				}
				public String CODPAISDefault(){
				
					return null;
				
				}
				public String CODPAISComment(){
				
				    return "";
				
				}
				public String CODPAISPattern(){
				
					return "";
				
				}
				public String CODPAISOriginalDbColumnName(){
				
					return "CODPAIS";
				
				}

				
			    public String CODDEPTO;

				public String getCODDEPTO () {
					return this.CODDEPTO;
				}

				public Boolean CODDEPTOIsNullable(){
				    return false;
				}
				public Boolean CODDEPTOIsKey(){
				    return false;
				}
				public Integer CODDEPTOLength(){
				    return 5;
				}
				public Integer CODDEPTOPrecision(){
				    return 0;
				}
				public String CODDEPTODefault(){
				
					return null;
				
				}
				public String CODDEPTOComment(){
				
				    return "";
				
				}
				public String CODDEPTOPattern(){
				
					return "";
				
				}
				public String CODDEPTOOriginalDbColumnName(){
				
					return "CODDEPTO";
				
				}

				
			    public String CODMCPIO;

				public String getCODMCPIO () {
					return this.CODMCPIO;
				}

				public Boolean CODMCPIOIsNullable(){
				    return false;
				}
				public Boolean CODMCPIOIsKey(){
				    return false;
				}
				public Integer CODMCPIOLength(){
				    return 10;
				}
				public Integer CODMCPIOPrecision(){
				    return 0;
				}
				public String CODMCPIODefault(){
				
					return null;
				
				}
				public String CODMCPIOComment(){
				
				    return "";
				
				}
				public String CODMCPIOPattern(){
				
					return "";
				
				}
				public String CODMCPIOOriginalDbColumnName(){
				
					return "CODMCPIO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.CODPAIS = readString(dis);
					
					this.CODDEPTO = readString(dis);
					
					this.CODMCPIO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.CODPAIS = readString(dis);
					
					this.CODDEPTO = readString(dis);
					
					this.CODMCPIO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.CODPAIS,dos);
					
					// String
				
						writeString(this.CODDEPTO,dos);
					
					// String
				
						writeString(this.CODMCPIO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.CODPAIS,dos);
					
					// String
				
						writeString(this.CODDEPTO,dos);
					
					// String
				
						writeString(this.CODMCPIO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CODPAIS="+CODPAIS);
		sb.append(",CODDEPTO="+CODDEPTO);
		sb.append(",CODMCPIO="+CODMCPIO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row78Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_28Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_28_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row78Struct row78 = new row78Struct();




	
	/**
	 * [tHashOutput_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_17", false);
		start_Hash.put("tHashOutput_17", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_17";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row78");
					}
				
		int tos_count_tHashOutput_17 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_17=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row78Struct> tHashFile_tHashOutput_17 = null;
		String hashKey_tHashOutput_17 = "tHashFile_ActualizacionMSV_" + pid + "_tHashOutput_17";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_17)){
			    if(mf_tHashOutput_17.getResourceMap().get(hashKey_tHashOutput_17) == null){
	      		    mf_tHashOutput_17.getResourceMap().put(hashKey_tHashOutput_17, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row78Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_17 = mf_tHashOutput_17.getResourceMap().get(hashKey_tHashOutput_17);
			    }else{
			    	tHashFile_tHashOutput_17 = mf_tHashOutput_17.getResourceMap().get(hashKey_tHashOutput_17);
			    }
			}
        int nb_line_tHashOutput_17 = 0;

 



/**
 * [tHashOutput_17 begin ] stop
 */



	
	/**
	 * [tOracleInput_28 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_28", false);
		start_Hash.put("tOracleInput_28", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_28";
	
	
		int tos_count_tOracleInput_28 = 0;
		
	


	
		    int nb_line_tOracleInput_28 = 0;
		    java.sql.Connection conn_tOracleInput_28 = null;
				conn_tOracleInput_28 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_28 = false;
				boolean isConnectionWrapped_tOracleInput_28 = !(conn_tOracleInput_28 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_28.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_28 = null;
                if (isConnectionWrapped_tOracleInput_28) {
					unwrappedOraConn_tOracleInput_28 = conn_tOracleInput_28.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_28 != null) {
                        isTimeZoneNull_tOracleInput_28 = (unwrappedOraConn_tOracleInput_28.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_28 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_28).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_28) {
					java.sql.Statement stmtGetTZ_tOracleInput_28 = conn_tOracleInput_28.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_28 = stmtGetTZ_tOracleInput_28.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_28 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_28.next()) {
						sessionTimezone_tOracleInput_28 = rsGetTZ_tOracleInput_28.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_28 && unwrappedOraConn_tOracleInput_28 != null) {
                        unwrappedOraConn_tOracleInput_28.setSessionTimeZone(sessionTimezone_tOracleInput_28);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_28).setSessionTimeZone(sessionTimezone_tOracleInput_28);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_28 = conn_tOracleInput_28.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_28.setFetchSize(1000);


		    String dbquery_tOracleInput_28 = "SELECT GD.ID,  \n       GD.CODPAIS,  \n       GD.CODDEPTO,\n       GD.CODMCPIO    \nFROM GEN_DIVIPOLA GD\nWHERE GD.TCCP"
+"P = 'CABECERA MUNICIPAL (CM)'      \n      AND GD.ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_28_QUERY",dbquery_tOracleInput_28);

		    java.sql.ResultSet rs_tOracleInput_28 = null;

		    try {
		    	rs_tOracleInput_28 = stmt_tOracleInput_28.executeQuery(dbquery_tOracleInput_28);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_28 = rs_tOracleInput_28.getMetaData();
		    	int colQtyInRs_tOracleInput_28 = rsmd_tOracleInput_28.getColumnCount();

		    String tmpContent_tOracleInput_28 = null;
		    
		    
		    while (rs_tOracleInput_28.next()) {
		        nb_line_tOracleInput_28++;
		        
							if(colQtyInRs_tOracleInput_28 < 1) {
								row78.ID = 0;
							} else {
		                          
					if(rs_tOracleInput_28.getObject(1) != null) {
						row78.ID = rs_tOracleInput_28.getInt(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_28 < 2) {
								row78.CODPAIS = null;
							} else {
	                         		
        	row78.CODPAIS = routines.system.JDBCUtil.getString(rs_tOracleInput_28, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_28 < 3) {
								row78.CODDEPTO = null;
							} else {
	                         		
        	row78.CODDEPTO = routines.system.JDBCUtil.getString(rs_tOracleInput_28, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_28 < 4) {
								row78.CODMCPIO = null;
							} else {
	                         		
        	row78.CODMCPIO = routines.system.JDBCUtil.getString(rs_tOracleInput_28, 4, false);
		                    }
					




 



/**
 * [tOracleInput_28 begin ] stop
 */
	
	/**
	 * [tOracleInput_28 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_28";
	
	

 


	tos_count_tOracleInput_28++;

/**
 * [tOracleInput_28 main ] stop
 */
	
	/**
	 * [tOracleInput_28 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_28";
	
	

 



/**
 * [tOracleInput_28 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_17 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_17";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row78"
						
						);
					}
					



    
		row78Struct oneRow_tHashOutput_17 = new row78Struct();
				
					oneRow_tHashOutput_17.ID = row78.ID;
					oneRow_tHashOutput_17.CODPAIS = row78.CODPAIS;
					oneRow_tHashOutput_17.CODDEPTO = row78.CODDEPTO;
					oneRow_tHashOutput_17.CODMCPIO = row78.CODMCPIO;
		
        tHashFile_tHashOutput_17.put(oneRow_tHashOutput_17);
        nb_line_tHashOutput_17 ++;

 


	tos_count_tHashOutput_17++;

/**
 * [tHashOutput_17 main ] stop
 */
	
	/**
	 * [tHashOutput_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_17";
	
	

 



/**
 * [tHashOutput_17 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_17";
	
	

 



/**
 * [tHashOutput_17 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_28 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_28";
	
	

 



/**
 * [tOracleInput_28 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_28 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_28";
	
	

}
}finally{
	if (rs_tOracleInput_28 != null) {
		rs_tOracleInput_28.close();
	}
	if (stmt_tOracleInput_28 != null) {
		stmt_tOracleInput_28.close();
	}
}

globalMap.put("tOracleInput_28_NB_LINE",nb_line_tOracleInput_28);
 

ok_Hash.put("tOracleInput_28", true);
end_Hash.put("tOracleInput_28", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk41", 0, "ok");
				}
				tOracleInput_36Process(globalMap);



/**
 * [tOracleInput_28 end ] stop
 */

	
	/**
	 * [tHashOutput_17 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_17";
	
	
globalMap.put("tHashOutput_17_NB_LINE", nb_line_tHashOutput_17);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row78");
			  	}
			  	
 

ok_Hash.put("tHashOutput_17", true);
end_Hash.put("tHashOutput_17", System.currentTimeMillis());




/**
 * [tHashOutput_17 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_28 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_28";
	
	

 



/**
 * [tOracleInput_28 finally ] stop
 */

	
	/**
	 * [tHashOutput_17 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_17";
	
	

 



/**
 * [tHashOutput_17 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_28_SUBPROCESS_STATE", 1);
	}
	


public static class row119Struct implements routines.system.IPersistableRow<row119Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return false;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 10;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CODIGO="+CODIGO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row119Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_36Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_36_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row119Struct row119 = new row119Struct();




	
	/**
	 * [tHashOutput_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_19", false);
		start_Hash.put("tHashOutput_19", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_19";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row119");
					}
				
		int tos_count_tHashOutput_19 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_19=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row119Struct> tHashFile_tHashOutput_19 = null;
		String hashKey_tHashOutput_19 = "tHashFile_ActualizacionMSV_" + pid + "_tHashOutput_19";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_19)){
			    if(mf_tHashOutput_19.getResourceMap().get(hashKey_tHashOutput_19) == null){
	      		    mf_tHashOutput_19.getResourceMap().put(hashKey_tHashOutput_19, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row119Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_19 = mf_tHashOutput_19.getResourceMap().get(hashKey_tHashOutput_19);
			    }else{
			    	tHashFile_tHashOutput_19 = mf_tHashOutput_19.getResourceMap().get(hashKey_tHashOutput_19);
			    }
			}
        int nb_line_tHashOutput_19 = 0;

 



/**
 * [tHashOutput_19 begin ] stop
 */



	
	/**
	 * [tOracleInput_36 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_36", false);
		start_Hash.put("tOracleInput_36", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_36";
	
	
		int tos_count_tOracleInput_36 = 0;
		
	


	
		    int nb_line_tOracleInput_36 = 0;
		    java.sql.Connection conn_tOracleInput_36 = null;
				conn_tOracleInput_36 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_36 = false;
				boolean isConnectionWrapped_tOracleInput_36 = !(conn_tOracleInput_36 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_36.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_36 = null;
                if (isConnectionWrapped_tOracleInput_36) {
					unwrappedOraConn_tOracleInput_36 = conn_tOracleInput_36.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_36 != null) {
                        isTimeZoneNull_tOracleInput_36 = (unwrappedOraConn_tOracleInput_36.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_36 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_36).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_36) {
					java.sql.Statement stmtGetTZ_tOracleInput_36 = conn_tOracleInput_36.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_36 = stmtGetTZ_tOracleInput_36.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_36 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_36.next()) {
						sessionTimezone_tOracleInput_36 = rsGetTZ_tOracleInput_36.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_36 && unwrappedOraConn_tOracleInput_36 != null) {
                        unwrappedOraConn_tOracleInput_36.setSessionTimeZone(sessionTimezone_tOracleInput_36);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_36).setSessionTimeZone(sessionTimezone_tOracleInput_36);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_36 = conn_tOracleInput_36.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_36.setFetchSize(1000);


		    String dbquery_tOracleInput_36 = "SELECT AR.ID,  \n       AR.CODIGO  \nFROM AFI_RNOVEDADES AR\nWHERE AR.ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_36_QUERY",dbquery_tOracleInput_36);

		    java.sql.ResultSet rs_tOracleInput_36 = null;

		    try {
		    	rs_tOracleInput_36 = stmt_tOracleInput_36.executeQuery(dbquery_tOracleInput_36);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_36 = rs_tOracleInput_36.getMetaData();
		    	int colQtyInRs_tOracleInput_36 = rsmd_tOracleInput_36.getColumnCount();

		    String tmpContent_tOracleInput_36 = null;
		    
		    
		    while (rs_tOracleInput_36.next()) {
		        nb_line_tOracleInput_36++;
		        
							if(colQtyInRs_tOracleInput_36 < 1) {
								row119.ID = 0;
							} else {
		                          
					if(rs_tOracleInput_36.getObject(1) != null) {
						row119.ID = rs_tOracleInput_36.getInt(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_36 < 2) {
								row119.CODIGO = null;
							} else {
	                         		
        	row119.CODIGO = routines.system.JDBCUtil.getString(rs_tOracleInput_36, 2, false);
		                    }
					




 



/**
 * [tOracleInput_36 begin ] stop
 */
	
	/**
	 * [tOracleInput_36 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_36";
	
	

 


	tos_count_tOracleInput_36++;

/**
 * [tOracleInput_36 main ] stop
 */
	
	/**
	 * [tOracleInput_36 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_36";
	
	

 



/**
 * [tOracleInput_36 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_19 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_19";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row119"
						
						);
					}
					



    
		row119Struct oneRow_tHashOutput_19 = new row119Struct();
				
					oneRow_tHashOutput_19.ID = row119.ID;
					oneRow_tHashOutput_19.CODIGO = row119.CODIGO;
		
        tHashFile_tHashOutput_19.put(oneRow_tHashOutput_19);
        nb_line_tHashOutput_19 ++;

 


	tos_count_tHashOutput_19++;

/**
 * [tHashOutput_19 main ] stop
 */
	
	/**
	 * [tHashOutput_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_19";
	
	

 



/**
 * [tHashOutput_19 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_19";
	
	

 



/**
 * [tHashOutput_19 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_36 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_36";
	
	

 



/**
 * [tOracleInput_36 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_36 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_36";
	
	

}
}finally{
	if (rs_tOracleInput_36 != null) {
		rs_tOracleInput_36.close();
	}
	if (stmt_tOracleInput_36 != null) {
		stmt_tOracleInput_36.close();
	}
}

globalMap.put("tOracleInput_36_NB_LINE",nb_line_tOracleInput_36);
 

ok_Hash.put("tOracleInput_36", true);
end_Hash.put("tOracleInput_36", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk44", 0, "ok");
				}
				tOracleInput_42Process(globalMap);



/**
 * [tOracleInput_36 end ] stop
 */

	
	/**
	 * [tHashOutput_19 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_19";
	
	
globalMap.put("tHashOutput_19_NB_LINE", nb_line_tHashOutput_19);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row119");
			  	}
			  	
 

ok_Hash.put("tHashOutput_19", true);
end_Hash.put("tHashOutput_19", System.currentTimeMillis());




/**
 * [tHashOutput_19 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_36 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_36";
	
	

 



/**
 * [tOracleInput_36 finally ] stop
 */

	
	/**
	 * [tHashOutput_19 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_19";
	
	

 



/**
 * [tHashOutput_19 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_36_SUBPROCESS_STATE", 1);
	}
	


public static class row151Struct implements routines.system.IPersistableRow<row151Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 150;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 10;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row151Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_42Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_42_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row151Struct row151 = new row151Struct();




	
	/**
	 * [tHashOutput_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_21", false);
		start_Hash.put("tHashOutput_21", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_21";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row151");
					}
				
		int tos_count_tHashOutput_21 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_21=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row151Struct> tHashFile_tHashOutput_21 = null;
		String hashKey_tHashOutput_21 = "tHashFile_ActualizacionMSV_" + pid + "_tHashOutput_21";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_21)){
			    if(mf_tHashOutput_21.getResourceMap().get(hashKey_tHashOutput_21) == null){
	      		    mf_tHashOutput_21.getResourceMap().put(hashKey_tHashOutput_21, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row151Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_21 = mf_tHashOutput_21.getResourceMap().get(hashKey_tHashOutput_21);
			    }else{
			    	tHashFile_tHashOutput_21 = mf_tHashOutput_21.getResourceMap().get(hashKey_tHashOutput_21);
			    }
			}
        int nb_line_tHashOutput_21 = 0;

 



/**
 * [tHashOutput_21 begin ] stop
 */



	
	/**
	 * [tOracleInput_42 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_42", false);
		start_Hash.put("tOracleInput_42", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_42";
	
	
		int tos_count_tOracleInput_42 = 0;
		
	


	
		    int nb_line_tOracleInput_42 = 0;
		    java.sql.Connection conn_tOracleInput_42 = null;
				conn_tOracleInput_42 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_42 = false;
				boolean isConnectionWrapped_tOracleInput_42 = !(conn_tOracleInput_42 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_42.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_42 = null;
                if (isConnectionWrapped_tOracleInput_42) {
					unwrappedOraConn_tOracleInput_42 = conn_tOracleInput_42.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_42 != null) {
                        isTimeZoneNull_tOracleInput_42 = (unwrappedOraConn_tOracleInput_42.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_42 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_42).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_42) {
					java.sql.Statement stmtGetTZ_tOracleInput_42 = conn_tOracleInput_42.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_42 = stmtGetTZ_tOracleInput_42.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_42 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_42.next()) {
						sessionTimezone_tOracleInput_42 = rsGetTZ_tOracleInput_42.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_42 && unwrappedOraConn_tOracleInput_42 != null) {
                        unwrappedOraConn_tOracleInput_42.setSessionTimeZone(sessionTimezone_tOracleInput_42);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_42).setSessionTimeZone(sessionTimezone_tOracleInput_42);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_42 = conn_tOracleInput_42.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_42.setFetchSize(1000);


		    String dbquery_tOracleInput_42 = " SELECT ID, \n  		 NOMBRE,\n  		 SIGLA\n FROM GEN_TDISCAPACIDADES gt\nWHERE GT.ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_42_QUERY",dbquery_tOracleInput_42);

		    java.sql.ResultSet rs_tOracleInput_42 = null;

		    try {
		    	rs_tOracleInput_42 = stmt_tOracleInput_42.executeQuery(dbquery_tOracleInput_42);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_42 = rs_tOracleInput_42.getMetaData();
		    	int colQtyInRs_tOracleInput_42 = rsmd_tOracleInput_42.getColumnCount();

		    String tmpContent_tOracleInput_42 = null;
		    
		    
		    while (rs_tOracleInput_42.next()) {
		        nb_line_tOracleInput_42++;
		        
							if(colQtyInRs_tOracleInput_42 < 1) {
								row151.ID = 0;
							} else {
		                          
					if(rs_tOracleInput_42.getObject(1) != null) {
						row151.ID = rs_tOracleInput_42.getInt(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_42 < 2) {
								row151.NOMBRE = null;
							} else {
	                         		
        	row151.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_42, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_42 < 3) {
								row151.SIGLA = null;
							} else {
	                         		
        	row151.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_42, 3, false);
		                    }
					




 



/**
 * [tOracleInput_42 begin ] stop
 */
	
	/**
	 * [tOracleInput_42 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_42";
	
	

 


	tos_count_tOracleInput_42++;

/**
 * [tOracleInput_42 main ] stop
 */
	
	/**
	 * [tOracleInput_42 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_42";
	
	

 



/**
 * [tOracleInput_42 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_21 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_21";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row151"
						
						);
					}
					



    
		row151Struct oneRow_tHashOutput_21 = new row151Struct();
				
					oneRow_tHashOutput_21.ID = row151.ID;
					oneRow_tHashOutput_21.NOMBRE = row151.NOMBRE;
					oneRow_tHashOutput_21.SIGLA = row151.SIGLA;
		
        tHashFile_tHashOutput_21.put(oneRow_tHashOutput_21);
        nb_line_tHashOutput_21 ++;

 


	tos_count_tHashOutput_21++;

/**
 * [tHashOutput_21 main ] stop
 */
	
	/**
	 * [tHashOutput_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_21";
	
	

 



/**
 * [tHashOutput_21 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_21";
	
	

 



/**
 * [tHashOutput_21 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_42 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_42";
	
	

 



/**
 * [tOracleInput_42 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_42 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_42";
	
	

}
}finally{
	if (rs_tOracleInput_42 != null) {
		rs_tOracleInput_42.close();
	}
	if (stmt_tOracleInput_42 != null) {
		stmt_tOracleInput_42.close();
	}
}

globalMap.put("tOracleInput_42_NB_LINE",nb_line_tOracleInput_42);
 

ok_Hash.put("tOracleInput_42", true);
end_Hash.put("tOracleInput_42", System.currentTimeMillis());




/**
 * [tOracleInput_42 end ] stop
 */

	
	/**
	 * [tHashOutput_21 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_21";
	
	
globalMap.put("tHashOutput_21_NB_LINE", nb_line_tHashOutput_21);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row151");
			  	}
			  	
 

ok_Hash.put("tHashOutput_21", true);
end_Hash.put("tHashOutput_21", System.currentTimeMillis());




/**
 * [tHashOutput_21 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_42 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_42";
	
	

 



/**
 * [tOracleInput_42 finally ] stop
 */

	
	/**
	 * [tHashOutput_21 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_21";
	
	

 



/**
 * [tHashOutput_21 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_42_SUBPROCESS_STATE", 1);
	}
	


public static class row52Struct implements routines.system.IPersistableRow<row52Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 20;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 100;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public Integer DIVIPOLA_ID;

				public Integer getDIVIPOLA_ID () {
					return this.DIVIPOLA_ID;
				}

				public Boolean DIVIPOLA_IDIsNullable(){
				    return true;
				}
				public Boolean DIVIPOLA_IDIsKey(){
				    return false;
				}
				public Integer DIVIPOLA_IDLength(){
				    return 0;
				}
				public Integer DIVIPOLA_IDPrecision(){
				    return null;
				}
				public String DIVIPOLA_IDDefault(){
				
					return "";
				
				}
				public String DIVIPOLA_IDComment(){
				
				    return "";
				
				}
				public String DIVIPOLA_IDPattern(){
				
					return "";
				
				}
				public String DIVIPOLA_IDOriginalDbColumnName(){
				
					return "DIVIPOLA_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.CODIGO = readString(dis);
					
					this.NOMBRE = readString(dis);
					
						this.DIVIPOLA_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.CODIGO = readString(dis);
					
					this.NOMBRE = readString(dis);
					
						this.DIVIPOLA_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// Integer
				
						writeInteger(this.DIVIPOLA_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// Integer
				
						writeInteger(this.DIVIPOLA_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CODIGO="+CODIGO);
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",DIVIPOLA_ID="+String.valueOf(DIVIPOLA_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row52Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_16_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row52Struct row52 = new row52Struct();




	
	/**
	 * [tHashOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_5", false);
		start_Hash.put("tHashOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row52");
					}
				
		int tos_count_tHashOutput_5 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_5=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row52Struct> tHashFile_tHashOutput_5 = null;
		String hashKey_tHashOutput_5 = "tHashFile_ActualizacionMSV_" + pid + "_tHashOutput_5";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_5)){
			    if(mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5) == null){
	      		    mf_tHashOutput_5.getResourceMap().put(hashKey_tHashOutput_5, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row52Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_5 = mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5);
			    }else{
			    	tHashFile_tHashOutput_5 = mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5);
			    }
			}
        int nb_line_tHashOutput_5 = 0;

 



/**
 * [tHashOutput_5 begin ] stop
 */



	
	/**
	 * [tOracleInput_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_16", false);
		start_Hash.put("tOracleInput_16", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_16";
	
	
		int tos_count_tOracleInput_16 = 0;
		
	


	
		    int nb_line_tOracleInput_16 = 0;
		    java.sql.Connection conn_tOracleInput_16 = null;
				conn_tOracleInput_16 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_16 = false;
				boolean isConnectionWrapped_tOracleInput_16 = !(conn_tOracleInput_16 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_16.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_16 = null;
                if (isConnectionWrapped_tOracleInput_16) {
					unwrappedOraConn_tOracleInput_16 = conn_tOracleInput_16.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_16 != null) {
                        isTimeZoneNull_tOracleInput_16 = (unwrappedOraConn_tOracleInput_16.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_16 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_16).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_16) {
					java.sql.Statement stmtGetTZ_tOracleInput_16 = conn_tOracleInput_16.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_16 = stmtGetTZ_tOracleInput_16.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_16 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_16.next()) {
						sessionTimezone_tOracleInput_16 = rsGetTZ_tOracleInput_16.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_16 && unwrappedOraConn_tOracleInput_16 != null) {
                        unwrappedOraConn_tOracleInput_16.setSessionTimeZone(sessionTimezone_tOracleInput_16);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_16).setSessionTimeZone(sessionTimezone_tOracleInput_16);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_16 = conn_tOracleInput_16.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_16.setFetchSize(1000);


		    String dbquery_tOracleInput_16 = "SELECT GL.ID, \n       GL.CODLOCALIDAD AS CODIGO, \n       GL.NOMBRE, \n       GL.DIVIPOLA_ID \nFROM GEN_LOCALIDADES GL"
+"\nWHERE GL.ESTADO = 'Activo'\n      AND GL.ESTREGISTRO_ID = 1\n      AND GL.CODLOCALIDAD IS NOT NULL";
		    

		    globalMap.put("tOracleInput_16_QUERY",dbquery_tOracleInput_16);

		    java.sql.ResultSet rs_tOracleInput_16 = null;

		    try {
		    	rs_tOracleInput_16 = stmt_tOracleInput_16.executeQuery(dbquery_tOracleInput_16);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_16 = rs_tOracleInput_16.getMetaData();
		    	int colQtyInRs_tOracleInput_16 = rsmd_tOracleInput_16.getColumnCount();

		    String tmpContent_tOracleInput_16 = null;
		    
		    
		    while (rs_tOracleInput_16.next()) {
		        nb_line_tOracleInput_16++;
		        
							if(colQtyInRs_tOracleInput_16 < 1) {
								row52.ID = 0;
							} else {
		                          
					if(rs_tOracleInput_16.getObject(1) != null) {
						row52.ID = rs_tOracleInput_16.getInt(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_16 < 2) {
								row52.CODIGO = null;
							} else {
	                         		
        	row52.CODIGO = routines.system.JDBCUtil.getString(rs_tOracleInput_16, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_16 < 3) {
								row52.NOMBRE = null;
							} else {
	                         		
        	row52.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_16, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_16 < 4) {
								row52.DIVIPOLA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_16.getObject(4) != null) {
						row52.DIVIPOLA_ID = rs_tOracleInput_16.getInt(4);
					} else {
				
						row52.DIVIPOLA_ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_16 begin ] stop
 */
	
	/**
	 * [tOracleInput_16 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

 


	tos_count_tOracleInput_16++;

/**
 * [tOracleInput_16 main ] stop
 */
	
	/**
	 * [tOracleInput_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

 



/**
 * [tOracleInput_16 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_5 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row52"
						
						);
					}
					



    
		row52Struct oneRow_tHashOutput_5 = new row52Struct();
				
					oneRow_tHashOutput_5.ID = row52.ID;
					oneRow_tHashOutput_5.CODIGO = row52.CODIGO;
					oneRow_tHashOutput_5.NOMBRE = row52.NOMBRE;
					oneRow_tHashOutput_5.DIVIPOLA_ID = row52.DIVIPOLA_ID;
		
        tHashFile_tHashOutput_5.put(oneRow_tHashOutput_5);
        nb_line_tHashOutput_5 ++;

 


	tos_count_tHashOutput_5++;

/**
 * [tHashOutput_5 main ] stop
 */
	
	/**
	 * [tHashOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

 



/**
 * [tOracleInput_16 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_16 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

}
}finally{
	if (rs_tOracleInput_16 != null) {
		rs_tOracleInput_16.close();
	}
	if (stmt_tOracleInput_16 != null) {
		stmt_tOracleInput_16.close();
	}
}

globalMap.put("tOracleInput_16_NB_LINE",nb_line_tOracleInput_16);
 

ok_Hash.put("tOracleInput_16", true);
end_Hash.put("tOracleInput_16", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk19", 0, "ok");
				}
				tOracleInput_17Process(globalMap);



/**
 * [tOracleInput_16 end ] stop
 */

	
	/**
	 * [tHashOutput_5 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	
globalMap.put("tHashOutput_5_NB_LINE", nb_line_tHashOutput_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row52");
			  	}
			  	
 

ok_Hash.put("tHashOutput_5", true);
end_Hash.put("tHashOutput_5", System.currentTimeMillis());




/**
 * [tHashOutput_5 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_16 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

 



/**
 * [tOracleInput_16 finally ] stop
 */

	
	/**
	 * [tHashOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_16_SUBPROCESS_STATE", 1);
	}
	


public static class row53Struct implements routines.system.IPersistableRow<row53Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 2000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 100;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 100;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
		sb.append(",CODIGO="+CODIGO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row53Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_17_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row53Struct row53 = new row53Struct();




	
	/**
	 * [tHashOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_6", false);
		start_Hash.put("tHashOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row53");
					}
				
		int tos_count_tHashOutput_6 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_6=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row53Struct> tHashFile_tHashOutput_6 = null;
		String hashKey_tHashOutput_6 = "tHashFile_ActualizacionMSV_" + pid + "_tHashOutput_6";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_6)){
			    if(mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6) == null){
	      		    mf_tHashOutput_6.getResourceMap().put(hashKey_tHashOutput_6, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row53Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_6 = mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6);
			    }else{
			    	tHashFile_tHashOutput_6 = mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6);
			    }
			}
        int nb_line_tHashOutput_6 = 0;

 



/**
 * [tHashOutput_6 begin ] stop
 */



	
	/**
	 * [tOracleInput_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_17", false);
		start_Hash.put("tOracleInput_17", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_17";
	
	
		int tos_count_tOracleInput_17 = 0;
		
	


	
		    int nb_line_tOracleInput_17 = 0;
		    java.sql.Connection conn_tOracleInput_17 = null;
				conn_tOracleInput_17 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_17 = false;
				boolean isConnectionWrapped_tOracleInput_17 = !(conn_tOracleInput_17 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_17.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_17 = null;
                if (isConnectionWrapped_tOracleInput_17) {
					unwrappedOraConn_tOracleInput_17 = conn_tOracleInput_17.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_17 != null) {
                        isTimeZoneNull_tOracleInput_17 = (unwrappedOraConn_tOracleInput_17.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_17 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_17).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_17) {
					java.sql.Statement stmtGetTZ_tOracleInput_17 = conn_tOracleInput_17.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_17 = stmtGetTZ_tOracleInput_17.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_17 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_17.next()) {
						sessionTimezone_tOracleInput_17 = rsGetTZ_tOracleInput_17.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_17 && unwrappedOraConn_tOracleInput_17 != null) {
                        unwrappedOraConn_tOracleInput_17.setSessionTimeZone(sessionTimezone_tOracleInput_17);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_17).setSessionTimeZone(sessionTimezone_tOracleInput_17);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_17 = conn_tOracleInput_17.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_17.setFetchSize(1000);


		    String dbquery_tOracleInput_17 = "SELECT GU.ID, \n       GU.NOMBRE, \n       GU.SIGLA, \n       GU.CODIGO \nFROM GEN_UORG GU\nINNER JOIN  GEN_TUORG GT ON"
+" GT.ID = GU.TUORG_ID\nWHERE GU.ESTREGISTRO_ID = 1 \n      AND GU.ESTADO = 'Activo'      \n      AND GT.ESTREGISTRO_ID = "
+"1\n      AND GT.ESTADO = 'Activo'\n      AND GT.NOMBRE IN('DISAN','ESM','SATELITE')";
		    

		    globalMap.put("tOracleInput_17_QUERY",dbquery_tOracleInput_17);

		    java.sql.ResultSet rs_tOracleInput_17 = null;

		    try {
		    	rs_tOracleInput_17 = stmt_tOracleInput_17.executeQuery(dbquery_tOracleInput_17);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_17 = rs_tOracleInput_17.getMetaData();
		    	int colQtyInRs_tOracleInput_17 = rsmd_tOracleInput_17.getColumnCount();

		    String tmpContent_tOracleInput_17 = null;
		    
		    
		    while (rs_tOracleInput_17.next()) {
		        nb_line_tOracleInput_17++;
		        
							if(colQtyInRs_tOracleInput_17 < 1) {
								row53.ID = 0;
							} else {
		                          
					if(rs_tOracleInput_17.getObject(1) != null) {
						row53.ID = rs_tOracleInput_17.getInt(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_17 < 2) {
								row53.NOMBRE = null;
							} else {
	                         		
        	row53.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_17, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_17 < 3) {
								row53.SIGLA = null;
							} else {
	                         		
        	row53.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_17, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_17 < 4) {
								row53.CODIGO = null;
							} else {
	                         		
        	row53.CODIGO = routines.system.JDBCUtil.getString(rs_tOracleInput_17, 4, false);
		                    }
					




 



/**
 * [tOracleInput_17 begin ] stop
 */
	
	/**
	 * [tOracleInput_17 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

 


	tos_count_tOracleInput_17++;

/**
 * [tOracleInput_17 main ] stop
 */
	
	/**
	 * [tOracleInput_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

 



/**
 * [tOracleInput_17 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_6 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row53"
						
						);
					}
					



    
		row53Struct oneRow_tHashOutput_6 = new row53Struct();
				
					oneRow_tHashOutput_6.ID = row53.ID;
					oneRow_tHashOutput_6.NOMBRE = row53.NOMBRE;
					oneRow_tHashOutput_6.SIGLA = row53.SIGLA;
					oneRow_tHashOutput_6.CODIGO = row53.CODIGO;
		
        tHashFile_tHashOutput_6.put(oneRow_tHashOutput_6);
        nb_line_tHashOutput_6 ++;

 


	tos_count_tHashOutput_6++;

/**
 * [tHashOutput_6 main ] stop
 */
	
	/**
	 * [tHashOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	

 



/**
 * [tHashOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	

 



/**
 * [tHashOutput_6 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

 



/**
 * [tOracleInput_17 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_17 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

}
}finally{
	if (rs_tOracleInput_17 != null) {
		rs_tOracleInput_17.close();
	}
	if (stmt_tOracleInput_17 != null) {
		stmt_tOracleInput_17.close();
	}
}

globalMap.put("tOracleInput_17_NB_LINE",nb_line_tOracleInput_17);
 

ok_Hash.put("tOracleInput_17", true);
end_Hash.put("tOracleInput_17", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk29", 0, "ok");
				}
				tOracleInput_18Process(globalMap);



/**
 * [tOracleInput_17 end ] stop
 */

	
	/**
	 * [tHashOutput_6 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	
globalMap.put("tHashOutput_6_NB_LINE", nb_line_tHashOutput_6);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row53");
			  	}
			  	
 

ok_Hash.put("tHashOutput_6", true);
end_Hash.put("tHashOutput_6", System.currentTimeMillis());




/**
 * [tHashOutput_6 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_17 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

 



/**
 * [tOracleInput_17 finally ] stop
 */

	
	/**
	 * [tHashOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	

 



/**
 * [tHashOutput_6 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_17_SUBPROCESS_STATE", 1);
	}
	


public static class row54Struct implements routines.system.IPersistableRow<row54Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 50;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 20;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",DOCUMENTO="+DOCUMENTO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row54Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_18Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_18_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row54Struct row54 = new row54Struct();




	
	/**
	 * [tHashOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_7", false);
		start_Hash.put("tHashOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row54");
					}
				
		int tos_count_tHashOutput_7 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_7=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row54Struct> tHashFile_tHashOutput_7 = null;
		String hashKey_tHashOutput_7 = "tHashFile_ActualizacionMSV_" + pid + "_tHashOutput_7";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_7)){
			    if(mf_tHashOutput_7.getResourceMap().get(hashKey_tHashOutput_7) == null){
	      		    mf_tHashOutput_7.getResourceMap().put(hashKey_tHashOutput_7, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row54Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_7 = mf_tHashOutput_7.getResourceMap().get(hashKey_tHashOutput_7);
			    }else{
			    	tHashFile_tHashOutput_7 = mf_tHashOutput_7.getResourceMap().get(hashKey_tHashOutput_7);
			    }
			}
        int nb_line_tHashOutput_7 = 0;

 



/**
 * [tHashOutput_7 begin ] stop
 */



	
	/**
	 * [tOracleInput_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_18", false);
		start_Hash.put("tOracleInput_18", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_18";
	
	
		int tos_count_tOracleInput_18 = 0;
		
	


	
		    int nb_line_tOracleInput_18 = 0;
		    java.sql.Connection conn_tOracleInput_18 = null;
				conn_tOracleInput_18 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_18 = false;
				boolean isConnectionWrapped_tOracleInput_18 = !(conn_tOracleInput_18 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_18.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_18 = null;
                if (isConnectionWrapped_tOracleInput_18) {
					unwrappedOraConn_tOracleInput_18 = conn_tOracleInput_18.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_18 != null) {
                        isTimeZoneNull_tOracleInput_18 = (unwrappedOraConn_tOracleInput_18.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_18 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_18).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_18) {
					java.sql.Statement stmtGetTZ_tOracleInput_18 = conn_tOracleInput_18.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_18 = stmtGetTZ_tOracleInput_18.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_18 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_18.next()) {
						sessionTimezone_tOracleInput_18 = rsGetTZ_tOracleInput_18.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_18 && unwrappedOraConn_tOracleInput_18 != null) {
                        unwrappedOraConn_tOracleInput_18.setSessionTimeZone(sessionTimezone_tOracleInput_18);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_18).setSessionTimeZone(sessionTimezone_tOracleInput_18);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_18 = conn_tOracleInput_18.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_18.setFetchSize(1000);


		    String dbquery_tOracleInput_18 = "SELECT GE.ID, GE.NOMBRE, GE.DOCUMENTO \nFROM GEN_ENTAPORTANTES GE \nWHERE GE.ESTREGISTRO_ID = 1\n      AND GE.ESTADO = "
+"'Activo'";
		    

		    globalMap.put("tOracleInput_18_QUERY",dbquery_tOracleInput_18);

		    java.sql.ResultSet rs_tOracleInput_18 = null;

		    try {
		    	rs_tOracleInput_18 = stmt_tOracleInput_18.executeQuery(dbquery_tOracleInput_18);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_18 = rs_tOracleInput_18.getMetaData();
		    	int colQtyInRs_tOracleInput_18 = rsmd_tOracleInput_18.getColumnCount();

		    String tmpContent_tOracleInput_18 = null;
		    
		    
		    while (rs_tOracleInput_18.next()) {
		        nb_line_tOracleInput_18++;
		        
							if(colQtyInRs_tOracleInput_18 < 1) {
								row54.ID = 0;
							} else {
		                          
					if(rs_tOracleInput_18.getObject(1) != null) {
						row54.ID = rs_tOracleInput_18.getInt(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_18 < 2) {
								row54.NOMBRE = null;
							} else {
	                         		
        	row54.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_18, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_18 < 3) {
								row54.DOCUMENTO = null;
							} else {
	                         		
        	row54.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_18, 3, false);
		                    }
					




 



/**
 * [tOracleInput_18 begin ] stop
 */
	
	/**
	 * [tOracleInput_18 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

 


	tos_count_tOracleInput_18++;

/**
 * [tOracleInput_18 main ] stop
 */
	
	/**
	 * [tOracleInput_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

 



/**
 * [tOracleInput_18 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_7 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row54"
						
						);
					}
					



    
		row54Struct oneRow_tHashOutput_7 = new row54Struct();
				
					oneRow_tHashOutput_7.ID = row54.ID;
					oneRow_tHashOutput_7.NOMBRE = row54.NOMBRE;
					oneRow_tHashOutput_7.DOCUMENTO = row54.DOCUMENTO;
		
        tHashFile_tHashOutput_7.put(oneRow_tHashOutput_7);
        nb_line_tHashOutput_7 ++;

 


	tos_count_tHashOutput_7++;

/**
 * [tHashOutput_7 main ] stop
 */
	
	/**
	 * [tHashOutput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	

 



/**
 * [tHashOutput_7 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	

 



/**
 * [tHashOutput_7 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

 



/**
 * [tOracleInput_18 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_18 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

}
}finally{
	if (rs_tOracleInput_18 != null) {
		rs_tOracleInput_18.close();
	}
	if (stmt_tOracleInput_18 != null) {
		stmt_tOracleInput_18.close();
	}
}

globalMap.put("tOracleInput_18_NB_LINE",nb_line_tOracleInput_18);
 

ok_Hash.put("tOracleInput_18", true);
end_Hash.put("tOracleInput_18", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk28", 0, "ok");
				}
				tOracleInput_19Process(globalMap);



/**
 * [tOracleInput_18 end ] stop
 */

	
	/**
	 * [tHashOutput_7 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	
globalMap.put("tHashOutput_7_NB_LINE", nb_line_tHashOutput_7);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row54");
			  	}
			  	
 

ok_Hash.put("tHashOutput_7", true);
end_Hash.put("tHashOutput_7", System.currentTimeMillis());




/**
 * [tHashOutput_7 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_18 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

 



/**
 * [tOracleInput_18 finally ] stop
 */

	
	/**
	 * [tHashOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	

 



/**
 * [tHashOutput_7 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_18_SUBPROCESS_STATE", 1);
	}
	


public static class row55Struct implements routines.system.IPersistableRow<row55Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 100;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 10;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row55Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_19Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_19_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row55Struct row55 = new row55Struct();




	
	/**
	 * [tHashOutput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_8", false);
		start_Hash.put("tHashOutput_8", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row55");
					}
				
		int tos_count_tHashOutput_8 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_8=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row55Struct> tHashFile_tHashOutput_8 = null;
		String hashKey_tHashOutput_8 = "tHashFile_ActualizacionMSV_" + pid + "_tHashOutput_8";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_8)){
			    if(mf_tHashOutput_8.getResourceMap().get(hashKey_tHashOutput_8) == null){
	      		    mf_tHashOutput_8.getResourceMap().put(hashKey_tHashOutput_8, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row55Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_8 = mf_tHashOutput_8.getResourceMap().get(hashKey_tHashOutput_8);
			    }else{
			    	tHashFile_tHashOutput_8 = mf_tHashOutput_8.getResourceMap().get(hashKey_tHashOutput_8);
			    }
			}
        int nb_line_tHashOutput_8 = 0;

 



/**
 * [tHashOutput_8 begin ] stop
 */



	
	/**
	 * [tOracleInput_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_19", false);
		start_Hash.put("tOracleInput_19", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_19";
	
	
		int tos_count_tOracleInput_19 = 0;
		
	


	
		    int nb_line_tOracleInput_19 = 0;
		    java.sql.Connection conn_tOracleInput_19 = null;
				conn_tOracleInput_19 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_19 = false;
				boolean isConnectionWrapped_tOracleInput_19 = !(conn_tOracleInput_19 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_19.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_19 = null;
                if (isConnectionWrapped_tOracleInput_19) {
					unwrappedOraConn_tOracleInput_19 = conn_tOracleInput_19.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_19 != null) {
                        isTimeZoneNull_tOracleInput_19 = (unwrappedOraConn_tOracleInput_19.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_19 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_19).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_19) {
					java.sql.Statement stmtGetTZ_tOracleInput_19 = conn_tOracleInput_19.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_19 = stmtGetTZ_tOracleInput_19.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_19 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_19.next()) {
						sessionTimezone_tOracleInput_19 = rsGetTZ_tOracleInput_19.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_19 && unwrappedOraConn_tOracleInput_19 != null) {
                        unwrappedOraConn_tOracleInput_19.setSessionTimeZone(sessionTimezone_tOracleInput_19);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_19).setSessionTimeZone(sessionTimezone_tOracleInput_19);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_19 = conn_tOracleInput_19.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_19.setFetchSize(1000);


		    String dbquery_tOracleInput_19 = "SELECT AE.ID, \n       AE.NOMBRE, \n       AE.SIGLA \nFROM AFI_ESTADOS AE\nWHERE AE.ESTREGISTRO_ID = 1\n      AND SIGLA"
+" NOT IN('RI','IX')";
		    

		    globalMap.put("tOracleInput_19_QUERY",dbquery_tOracleInput_19);

		    java.sql.ResultSet rs_tOracleInput_19 = null;

		    try {
		    	rs_tOracleInput_19 = stmt_tOracleInput_19.executeQuery(dbquery_tOracleInput_19);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_19 = rs_tOracleInput_19.getMetaData();
		    	int colQtyInRs_tOracleInput_19 = rsmd_tOracleInput_19.getColumnCount();

		    String tmpContent_tOracleInput_19 = null;
		    
		    
		    while (rs_tOracleInput_19.next()) {
		        nb_line_tOracleInput_19++;
		        
							if(colQtyInRs_tOracleInput_19 < 1) {
								row55.ID = 0;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(1) != null) {
						row55.ID = rs_tOracleInput_19.getInt(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_19 < 2) {
								row55.NOMBRE = null;
							} else {
	                         		
        	row55.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_19, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_19 < 3) {
								row55.SIGLA = null;
							} else {
	                         		
        	row55.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_19, 3, false);
		                    }
					




 



/**
 * [tOracleInput_19 begin ] stop
 */
	
	/**
	 * [tOracleInput_19 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

 


	tos_count_tOracleInput_19++;

/**
 * [tOracleInput_19 main ] stop
 */
	
	/**
	 * [tOracleInput_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

 



/**
 * [tOracleInput_19 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_8 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row55"
						
						);
					}
					



    
		row55Struct oneRow_tHashOutput_8 = new row55Struct();
				
					oneRow_tHashOutput_8.ID = row55.ID;
					oneRow_tHashOutput_8.NOMBRE = row55.NOMBRE;
					oneRow_tHashOutput_8.SIGLA = row55.SIGLA;
		
        tHashFile_tHashOutput_8.put(oneRow_tHashOutput_8);
        nb_line_tHashOutput_8 ++;

 


	tos_count_tHashOutput_8++;

/**
 * [tHashOutput_8 main ] stop
 */
	
	/**
	 * [tHashOutput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	

 



/**
 * [tHashOutput_8 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	

 



/**
 * [tHashOutput_8 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

 



/**
 * [tOracleInput_19 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_19 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

}
}finally{
	if (rs_tOracleInput_19 != null) {
		rs_tOracleInput_19.close();
	}
	if (stmt_tOracleInput_19 != null) {
		stmt_tOracleInput_19.close();
	}
}

globalMap.put("tOracleInput_19_NB_LINE",nb_line_tOracleInput_19);
 

ok_Hash.put("tOracleInput_19", true);
end_Hash.put("tOracleInput_19", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk27", 0, "ok");
				}
				tOracleInput_21Process(globalMap);



/**
 * [tOracleInput_19 end ] stop
 */

	
	/**
	 * [tHashOutput_8 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	
globalMap.put("tHashOutput_8_NB_LINE", nb_line_tHashOutput_8);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row55");
			  	}
			  	
 

ok_Hash.put("tHashOutput_8", true);
end_Hash.put("tHashOutput_8", System.currentTimeMillis());




/**
 * [tHashOutput_8 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_19 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

 



/**
 * [tOracleInput_19 finally ] stop
 */

	
	/**
	 * [tHashOutput_8 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	

 



/**
 * [tHashOutput_8 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_19_SUBPROCESS_STATE", 1);
	}
	


public static class row57Struct implements routines.system.IPersistableRow<row57Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 200;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 10;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row57Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_21Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_21_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row57Struct row57 = new row57Struct();




	
	/**
	 * [tHashOutput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_10", false);
		start_Hash.put("tHashOutput_10", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_10";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row57");
					}
				
		int tos_count_tHashOutput_10 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_10=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row57Struct> tHashFile_tHashOutput_10 = null;
		String hashKey_tHashOutput_10 = "tHashFile_ActualizacionMSV_" + pid + "_tHashOutput_10";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_10)){
			    if(mf_tHashOutput_10.getResourceMap().get(hashKey_tHashOutput_10) == null){
	      		    mf_tHashOutput_10.getResourceMap().put(hashKey_tHashOutput_10, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row57Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_10 = mf_tHashOutput_10.getResourceMap().get(hashKey_tHashOutput_10);
			    }else{
			    	tHashFile_tHashOutput_10 = mf_tHashOutput_10.getResourceMap().get(hashKey_tHashOutput_10);
			    }
			}
        int nb_line_tHashOutput_10 = 0;

 



/**
 * [tHashOutput_10 begin ] stop
 */



	
	/**
	 * [tOracleInput_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_21", false);
		start_Hash.put("tOracleInput_21", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_21";
	
	
		int tos_count_tOracleInput_21 = 0;
		
	


	
		    int nb_line_tOracleInput_21 = 0;
		    java.sql.Connection conn_tOracleInput_21 = null;
				conn_tOracleInput_21 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_21 = false;
				boolean isConnectionWrapped_tOracleInput_21 = !(conn_tOracleInput_21 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_21.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_21 = null;
                if (isConnectionWrapped_tOracleInput_21) {
					unwrappedOraConn_tOracleInput_21 = conn_tOracleInput_21.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_21 != null) {
                        isTimeZoneNull_tOracleInput_21 = (unwrappedOraConn_tOracleInput_21.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_21 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_21).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_21) {
					java.sql.Statement stmtGetTZ_tOracleInput_21 = conn_tOracleInput_21.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_21 = stmtGetTZ_tOracleInput_21.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_21 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_21.next()) {
						sessionTimezone_tOracleInput_21 = rsGetTZ_tOracleInput_21.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_21 && unwrappedOraConn_tOracleInput_21 != null) {
                        unwrappedOraConn_tOracleInput_21.setSessionTimeZone(sessionTimezone_tOracleInput_21);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_21).setSessionTimeZone(sessionTimezone_tOracleInput_21);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_21 = conn_tOracleInput_21.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_21.setFetchSize(1000);


		    String dbquery_tOracleInput_21 = "SELECT ATV.ID, \n       ATV.NOMBRE, \n       ATV.SIGLA \nFROM AFI_TVINCULACIONES ATV\nWHERE ATV.ESTREGISTRO_ID = 1\n   "
+"   AND ATV.ESTADO = 'Activo'\n      AND ATV.TVINCULACIONES = 'AF'";
		    

		    globalMap.put("tOracleInput_21_QUERY",dbquery_tOracleInput_21);

		    java.sql.ResultSet rs_tOracleInput_21 = null;

		    try {
		    	rs_tOracleInput_21 = stmt_tOracleInput_21.executeQuery(dbquery_tOracleInput_21);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_21 = rs_tOracleInput_21.getMetaData();
		    	int colQtyInRs_tOracleInput_21 = rsmd_tOracleInput_21.getColumnCount();

		    String tmpContent_tOracleInput_21 = null;
		    
		    
		    while (rs_tOracleInput_21.next()) {
		        nb_line_tOracleInput_21++;
		        
							if(colQtyInRs_tOracleInput_21 < 1) {
								row57.ID = 0;
							} else {
		                          
					if(rs_tOracleInput_21.getObject(1) != null) {
						row57.ID = rs_tOracleInput_21.getInt(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_21 < 2) {
								row57.NOMBRE = null;
							} else {
	                         		
        	row57.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_21, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_21 < 3) {
								row57.SIGLA = null;
							} else {
	                         		
        	row57.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_21, 3, false);
		                    }
					




 



/**
 * [tOracleInput_21 begin ] stop
 */
	
	/**
	 * [tOracleInput_21 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_21";
	
	

 


	tos_count_tOracleInput_21++;

/**
 * [tOracleInput_21 main ] stop
 */
	
	/**
	 * [tOracleInput_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_21";
	
	

 



/**
 * [tOracleInput_21 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_10 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_10";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row57"
						
						);
					}
					



    
		row57Struct oneRow_tHashOutput_10 = new row57Struct();
				
					oneRow_tHashOutput_10.ID = row57.ID;
					oneRow_tHashOutput_10.NOMBRE = row57.NOMBRE;
					oneRow_tHashOutput_10.SIGLA = row57.SIGLA;
		
        tHashFile_tHashOutput_10.put(oneRow_tHashOutput_10);
        nb_line_tHashOutput_10 ++;

 


	tos_count_tHashOutput_10++;

/**
 * [tHashOutput_10 main ] stop
 */
	
	/**
	 * [tHashOutput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_10";
	
	

 



/**
 * [tHashOutput_10 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_10";
	
	

 



/**
 * [tHashOutput_10 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_21";
	
	

 



/**
 * [tOracleInput_21 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_21 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_21";
	
	

}
}finally{
	if (rs_tOracleInput_21 != null) {
		rs_tOracleInput_21.close();
	}
	if (stmt_tOracleInput_21 != null) {
		stmt_tOracleInput_21.close();
	}
}

globalMap.put("tOracleInput_21_NB_LINE",nb_line_tOracleInput_21);
 

ok_Hash.put("tOracleInput_21", true);
end_Hash.put("tOracleInput_21", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk26", 0, "ok");
				}
				tOracleInput_23Process(globalMap);



/**
 * [tOracleInput_21 end ] stop
 */

	
	/**
	 * [tHashOutput_10 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_10";
	
	
globalMap.put("tHashOutput_10_NB_LINE", nb_line_tHashOutput_10);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row57");
			  	}
			  	
 

ok_Hash.put("tHashOutput_10", true);
end_Hash.put("tHashOutput_10", System.currentTimeMillis());




/**
 * [tHashOutput_10 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_21 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_21";
	
	

 



/**
 * [tOracleInput_21 finally ] stop
 */

	
	/**
	 * [tHashOutput_10 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_10";
	
	

 



/**
 * [tHashOutput_10 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_21_SUBPROCESS_STATE", 1);
	}
	


public static class row59Struct implements routines.system.IPersistableRow<row59Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 100;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 20;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return false;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 50;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
		sb.append(",CODIGO="+CODIGO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row59Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_23Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_23_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row59Struct row59 = new row59Struct();




	
	/**
	 * [tHashOutput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_12", false);
		start_Hash.put("tHashOutput_12", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_12";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row59");
					}
				
		int tos_count_tHashOutput_12 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_12=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row59Struct> tHashFile_tHashOutput_12 = null;
		String hashKey_tHashOutput_12 = "tHashFile_ActualizacionMSV_" + pid + "_tHashOutput_12";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_12)){
			    if(mf_tHashOutput_12.getResourceMap().get(hashKey_tHashOutput_12) == null){
	      		    mf_tHashOutput_12.getResourceMap().put(hashKey_tHashOutput_12, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row59Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_12 = mf_tHashOutput_12.getResourceMap().get(hashKey_tHashOutput_12);
			    }else{
			    	tHashFile_tHashOutput_12 = mf_tHashOutput_12.getResourceMap().get(hashKey_tHashOutput_12);
			    }
			}
        int nb_line_tHashOutput_12 = 0;

 



/**
 * [tHashOutput_12 begin ] stop
 */



	
	/**
	 * [tOracleInput_23 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_23", false);
		start_Hash.put("tOracleInput_23", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_23";
	
	
		int tos_count_tOracleInput_23 = 0;
		
	


	
		    int nb_line_tOracleInput_23 = 0;
		    java.sql.Connection conn_tOracleInput_23 = null;
				conn_tOracleInput_23 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_23 = false;
				boolean isConnectionWrapped_tOracleInput_23 = !(conn_tOracleInput_23 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_23.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_23 = null;
                if (isConnectionWrapped_tOracleInput_23) {
					unwrappedOraConn_tOracleInput_23 = conn_tOracleInput_23.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_23 != null) {
                        isTimeZoneNull_tOracleInput_23 = (unwrappedOraConn_tOracleInput_23.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_23 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_23).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_23) {
					java.sql.Statement stmtGetTZ_tOracleInput_23 = conn_tOracleInput_23.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_23 = stmtGetTZ_tOracleInput_23.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_23 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_23.next()) {
						sessionTimezone_tOracleInput_23 = rsGetTZ_tOracleInput_23.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_23 && unwrappedOraConn_tOracleInput_23 != null) {
                        unwrappedOraConn_tOracleInput_23.setSessionTimeZone(sessionTimezone_tOracleInput_23);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_23).setSessionTimeZone(sessionTimezone_tOracleInput_23);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_23 = conn_tOracleInput_23.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_23.setFetchSize(1000);


		    String dbquery_tOracleInput_23 = "SELECT GU.ID, \n       GU.NOMBRE, \n       GU.SIGLA, \n       GU.CODIGO \nFROM GEN_UMILITARES GU\nWHERE GU.ESTREGISTRO_"
+"ID = 1\n      AND GU.ESTADO = 'Activo'";
		    

		    globalMap.put("tOracleInput_23_QUERY",dbquery_tOracleInput_23);

		    java.sql.ResultSet rs_tOracleInput_23 = null;

		    try {
		    	rs_tOracleInput_23 = stmt_tOracleInput_23.executeQuery(dbquery_tOracleInput_23);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_23 = rs_tOracleInput_23.getMetaData();
		    	int colQtyInRs_tOracleInput_23 = rsmd_tOracleInput_23.getColumnCount();

		    String tmpContent_tOracleInput_23 = null;
		    
		    
		    while (rs_tOracleInput_23.next()) {
		        nb_line_tOracleInput_23++;
		        
							if(colQtyInRs_tOracleInput_23 < 1) {
								row59.ID = 0;
							} else {
		                          
					if(rs_tOracleInput_23.getObject(1) != null) {
						row59.ID = rs_tOracleInput_23.getInt(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_23 < 2) {
								row59.NOMBRE = null;
							} else {
	                         		
        	row59.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_23, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_23 < 3) {
								row59.SIGLA = null;
							} else {
	                         		
        	row59.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_23, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_23 < 4) {
								row59.CODIGO = null;
							} else {
	                         		
        	row59.CODIGO = routines.system.JDBCUtil.getString(rs_tOracleInput_23, 4, false);
		                    }
					




 



/**
 * [tOracleInput_23 begin ] stop
 */
	
	/**
	 * [tOracleInput_23 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_23";
	
	

 


	tos_count_tOracleInput_23++;

/**
 * [tOracleInput_23 main ] stop
 */
	
	/**
	 * [tOracleInput_23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_23";
	
	

 



/**
 * [tOracleInput_23 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_12 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_12";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row59"
						
						);
					}
					



    
		row59Struct oneRow_tHashOutput_12 = new row59Struct();
				
					oneRow_tHashOutput_12.ID = row59.ID;
					oneRow_tHashOutput_12.NOMBRE = row59.NOMBRE;
					oneRow_tHashOutput_12.SIGLA = row59.SIGLA;
					oneRow_tHashOutput_12.CODIGO = row59.CODIGO;
		
        tHashFile_tHashOutput_12.put(oneRow_tHashOutput_12);
        nb_line_tHashOutput_12 ++;

 


	tos_count_tHashOutput_12++;

/**
 * [tHashOutput_12 main ] stop
 */
	
	/**
	 * [tHashOutput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_12";
	
	

 



/**
 * [tHashOutput_12 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_12";
	
	

 



/**
 * [tHashOutput_12 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_23 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_23";
	
	

 



/**
 * [tOracleInput_23 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_23 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_23";
	
	

}
}finally{
	if (rs_tOracleInput_23 != null) {
		rs_tOracleInput_23.close();
	}
	if (stmt_tOracleInput_23 != null) {
		stmt_tOracleInput_23.close();
	}
}

globalMap.put("tOracleInput_23_NB_LINE",nb_line_tOracleInput_23);
 

ok_Hash.put("tOracleInput_23", true);
end_Hash.put("tOracleInput_23", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk25", 0, "ok");
				}
				tOracleInput_25Process(globalMap);



/**
 * [tOracleInput_23 end ] stop
 */

	
	/**
	 * [tHashOutput_12 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_12";
	
	
globalMap.put("tHashOutput_12_NB_LINE", nb_line_tHashOutput_12);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row59");
			  	}
			  	
 

ok_Hash.put("tHashOutput_12", true);
end_Hash.put("tHashOutput_12", System.currentTimeMillis());




/**
 * [tHashOutput_12 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_23 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_23";
	
	

 



/**
 * [tOracleInput_23 finally ] stop
 */

	
	/**
	 * [tHashOutput_12 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_12";
	
	

 



/**
 * [tHashOutput_12 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_23_SUBPROCESS_STATE", 1);
	}
	


public static class row61Struct implements routines.system.IPersistableRow<row61Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 500;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 100;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public int CODIGO;

				public int getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return false;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 20;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
			        this.CODIGO = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
			        this.CODIGO = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// int
				
		            	dos.writeInt(this.CODIGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// int
				
		            	dos.writeInt(this.CODIGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
		sb.append(",CODIGO="+String.valueOf(CODIGO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row61Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_25Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_25_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row61Struct row61 = new row61Struct();




	
	/**
	 * [tHashOutput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_14", false);
		start_Hash.put("tHashOutput_14", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_14";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row61");
					}
				
		int tos_count_tHashOutput_14 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_14=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row61Struct> tHashFile_tHashOutput_14 = null;
		String hashKey_tHashOutput_14 = "tHashFile_ActualizacionMSV_" + pid + "_tHashOutput_14";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_14)){
			    if(mf_tHashOutput_14.getResourceMap().get(hashKey_tHashOutput_14) == null){
	      		    mf_tHashOutput_14.getResourceMap().put(hashKey_tHashOutput_14, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row61Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_14 = mf_tHashOutput_14.getResourceMap().get(hashKey_tHashOutput_14);
			    }else{
			    	tHashFile_tHashOutput_14 = mf_tHashOutput_14.getResourceMap().get(hashKey_tHashOutput_14);
			    }
			}
        int nb_line_tHashOutput_14 = 0;

 



/**
 * [tHashOutput_14 begin ] stop
 */



	
	/**
	 * [tOracleInput_25 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_25", false);
		start_Hash.put("tOracleInput_25", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_25";
	
	
		int tos_count_tOracleInput_25 = 0;
		
	


	
		    int nb_line_tOracleInput_25 = 0;
		    java.sql.Connection conn_tOracleInput_25 = null;
				conn_tOracleInput_25 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_25 = false;
				boolean isConnectionWrapped_tOracleInput_25 = !(conn_tOracleInput_25 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_25.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_25 = null;
                if (isConnectionWrapped_tOracleInput_25) {
					unwrappedOraConn_tOracleInput_25 = conn_tOracleInput_25.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_25 != null) {
                        isTimeZoneNull_tOracleInput_25 = (unwrappedOraConn_tOracleInput_25.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_25 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_25).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_25) {
					java.sql.Statement stmtGetTZ_tOracleInput_25 = conn_tOracleInput_25.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_25 = stmtGetTZ_tOracleInput_25.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_25 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_25.next()) {
						sessionTimezone_tOracleInput_25 = rsGetTZ_tOracleInput_25.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_25 && unwrappedOraConn_tOracleInput_25 != null) {
                        unwrappedOraConn_tOracleInput_25.setSessionTimeZone(sessionTimezone_tOracleInput_25);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_25).setSessionTimeZone(sessionTimezone_tOracleInput_25);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_25 = conn_tOracleInput_25.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_25.setFetchSize(1000);


		    String dbquery_tOracleInput_25 = "SELECT GF.ID, \n       GF.NOMBRE, \n       GF.SIGLA,        \n       TO_NUMBER(GF.CODIGO) AS CODIGO \nFROM GEN_FUERZAS "
+"GF \nWHERE GF.ESTREGISTRO_ID = 1\n      AND GF.ESTADO = 'Activo'";
		    

		    globalMap.put("tOracleInput_25_QUERY",dbquery_tOracleInput_25);

		    java.sql.ResultSet rs_tOracleInput_25 = null;

		    try {
		    	rs_tOracleInput_25 = stmt_tOracleInput_25.executeQuery(dbquery_tOracleInput_25);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_25 = rs_tOracleInput_25.getMetaData();
		    	int colQtyInRs_tOracleInput_25 = rsmd_tOracleInput_25.getColumnCount();

		    String tmpContent_tOracleInput_25 = null;
		    
		    
		    while (rs_tOracleInput_25.next()) {
		        nb_line_tOracleInput_25++;
		        
							if(colQtyInRs_tOracleInput_25 < 1) {
								row61.ID = 0;
							} else {
		                          
					if(rs_tOracleInput_25.getObject(1) != null) {
						row61.ID = rs_tOracleInput_25.getInt(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_25 < 2) {
								row61.NOMBRE = null;
							} else {
	                         		
        	row61.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_25, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_25 < 3) {
								row61.SIGLA = null;
							} else {
	                         		
        	row61.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_25, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_25 < 4) {
								row61.CODIGO = 0;
							} else {
		                          
					if(rs_tOracleInput_25.getObject(4) != null) {
						row61.CODIGO = rs_tOracleInput_25.getInt(4);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
					




 



/**
 * [tOracleInput_25 begin ] stop
 */
	
	/**
	 * [tOracleInput_25 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_25";
	
	

 


	tos_count_tOracleInput_25++;

/**
 * [tOracleInput_25 main ] stop
 */
	
	/**
	 * [tOracleInput_25 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_25";
	
	

 



/**
 * [tOracleInput_25 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_14 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_14";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row61"
						
						);
					}
					



    
		row61Struct oneRow_tHashOutput_14 = new row61Struct();
				
					oneRow_tHashOutput_14.ID = row61.ID;
					oneRow_tHashOutput_14.NOMBRE = row61.NOMBRE;
					oneRow_tHashOutput_14.SIGLA = row61.SIGLA;
					oneRow_tHashOutput_14.CODIGO = row61.CODIGO;
		
        tHashFile_tHashOutput_14.put(oneRow_tHashOutput_14);
        nb_line_tHashOutput_14 ++;

 


	tos_count_tHashOutput_14++;

/**
 * [tHashOutput_14 main ] stop
 */
	
	/**
	 * [tHashOutput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_14";
	
	

 



/**
 * [tHashOutput_14 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_14";
	
	

 



/**
 * [tHashOutput_14 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_25 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_25";
	
	

 



/**
 * [tOracleInput_25 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_25 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_25";
	
	

}
}finally{
	if (rs_tOracleInput_25 != null) {
		rs_tOracleInput_25.close();
	}
	if (stmt_tOracleInput_25 != null) {
		stmt_tOracleInput_25.close();
	}
}

globalMap.put("tOracleInput_25_NB_LINE",nb_line_tOracleInput_25);
 

ok_Hash.put("tOracleInput_25", true);
end_Hash.put("tOracleInput_25", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk24", 0, "ok");
				}
				tOracleInput_27Process(globalMap);



/**
 * [tOracleInput_25 end ] stop
 */

	
	/**
	 * [tHashOutput_14 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_14";
	
	
globalMap.put("tHashOutput_14_NB_LINE", nb_line_tHashOutput_14);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row61");
			  	}
			  	
 

ok_Hash.put("tHashOutput_14", true);
end_Hash.put("tHashOutput_14", System.currentTimeMillis());




/**
 * [tHashOutput_14 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_25 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_25";
	
	

 



/**
 * [tOracleInput_25 finally ] stop
 */

	
	/**
	 * [tHashOutput_14 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_14";
	
	

 



/**
 * [tHashOutput_14 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_25_SUBPROCESS_STATE", 1);
	}
	


public static class row63Struct implements routines.system.IPersistableRow<row63Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 100;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 10;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return false;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 20;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public Integer FUERZA_ID;

				public Integer getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return null;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return null;
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
					this.CODIGO = readString(dis);
					
						this.FUERZA_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
					this.CODIGO = readString(dis);
					
						this.FUERZA_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
		sb.append(",CODIGO="+CODIGO);
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row63Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_27Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_27_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row63Struct row63 = new row63Struct();




	
	/**
	 * [tHashOutput_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_16", false);
		start_Hash.put("tHashOutput_16", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_16";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row63");
					}
				
		int tos_count_tHashOutput_16 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_16=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row63Struct> tHashFile_tHashOutput_16 = null;
		String hashKey_tHashOutput_16 = "tHashFile_ActualizacionMSV_" + pid + "_tHashOutput_16";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_16)){
			    if(mf_tHashOutput_16.getResourceMap().get(hashKey_tHashOutput_16) == null){
	      		    mf_tHashOutput_16.getResourceMap().put(hashKey_tHashOutput_16, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row63Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_16 = mf_tHashOutput_16.getResourceMap().get(hashKey_tHashOutput_16);
			    }else{
			    	tHashFile_tHashOutput_16 = mf_tHashOutput_16.getResourceMap().get(hashKey_tHashOutput_16);
			    }
			}
        int nb_line_tHashOutput_16 = 0;

 



/**
 * [tHashOutput_16 begin ] stop
 */



	
	/**
	 * [tOracleInput_27 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_27", false);
		start_Hash.put("tOracleInput_27", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_27";
	
	
		int tos_count_tOracleInput_27 = 0;
		
	


	
		    int nb_line_tOracleInput_27 = 0;
		    java.sql.Connection conn_tOracleInput_27 = null;
				conn_tOracleInput_27 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_27 = false;
				boolean isConnectionWrapped_tOracleInput_27 = !(conn_tOracleInput_27 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_27.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_27 = null;
                if (isConnectionWrapped_tOracleInput_27) {
					unwrappedOraConn_tOracleInput_27 = conn_tOracleInput_27.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_27 != null) {
                        isTimeZoneNull_tOracleInput_27 = (unwrappedOraConn_tOracleInput_27.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_27 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_27).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_27) {
					java.sql.Statement stmtGetTZ_tOracleInput_27 = conn_tOracleInput_27.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_27 = stmtGetTZ_tOracleInput_27.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_27 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_27.next()) {
						sessionTimezone_tOracleInput_27 = rsGetTZ_tOracleInput_27.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_27 && unwrappedOraConn_tOracleInput_27 != null) {
                        unwrappedOraConn_tOracleInput_27.setSessionTimeZone(sessionTimezone_tOracleInput_27);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_27).setSessionTimeZone(sessionTimezone_tOracleInput_27);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_27 = conn_tOracleInput_27.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_27.setFetchSize(1000);


		    String dbquery_tOracleInput_27 = "SELECT GG.ID, \n       GG.NOMBRE, \n       GG.SIGLA, \n       GG.CODIGO,\n       GG.FUERZA_ID\nFROM GEN_GRDMILITARES GG"
+"";
		    

		    globalMap.put("tOracleInput_27_QUERY",dbquery_tOracleInput_27);

		    java.sql.ResultSet rs_tOracleInput_27 = null;

		    try {
		    	rs_tOracleInput_27 = stmt_tOracleInput_27.executeQuery(dbquery_tOracleInput_27);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_27 = rs_tOracleInput_27.getMetaData();
		    	int colQtyInRs_tOracleInput_27 = rsmd_tOracleInput_27.getColumnCount();

		    String tmpContent_tOracleInput_27 = null;
		    
		    
		    while (rs_tOracleInput_27.next()) {
		        nb_line_tOracleInput_27++;
		        
							if(colQtyInRs_tOracleInput_27 < 1) {
								row63.ID = 0;
							} else {
		                          
					if(rs_tOracleInput_27.getObject(1) != null) {
						row63.ID = rs_tOracleInput_27.getInt(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_27 < 2) {
								row63.NOMBRE = null;
							} else {
	                         		
        	row63.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_27, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_27 < 3) {
								row63.SIGLA = null;
							} else {
	                         		
        	row63.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_27, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_27 < 4) {
								row63.CODIGO = null;
							} else {
	                         		
        	row63.CODIGO = routines.system.JDBCUtil.getString(rs_tOracleInput_27, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_27 < 5) {
								row63.FUERZA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_27.getObject(5) != null) {
						row63.FUERZA_ID = rs_tOracleInput_27.getInt(5);
					} else {
				
						row63.FUERZA_ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_27 begin ] stop
 */
	
	/**
	 * [tOracleInput_27 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_27";
	
	

 


	tos_count_tOracleInput_27++;

/**
 * [tOracleInput_27 main ] stop
 */
	
	/**
	 * [tOracleInput_27 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_27";
	
	

 



/**
 * [tOracleInput_27 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_16 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_16";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row63"
						
						);
					}
					



    
		row63Struct oneRow_tHashOutput_16 = new row63Struct();
				
					oneRow_tHashOutput_16.ID = row63.ID;
					oneRow_tHashOutput_16.NOMBRE = row63.NOMBRE;
					oneRow_tHashOutput_16.SIGLA = row63.SIGLA;
					oneRow_tHashOutput_16.CODIGO = row63.CODIGO;
					oneRow_tHashOutput_16.FUERZA_ID = row63.FUERZA_ID;
		
        tHashFile_tHashOutput_16.put(oneRow_tHashOutput_16);
        nb_line_tHashOutput_16 ++;

 


	tos_count_tHashOutput_16++;

/**
 * [tHashOutput_16 main ] stop
 */
	
	/**
	 * [tHashOutput_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_16";
	
	

 



/**
 * [tHashOutput_16 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_16";
	
	

 



/**
 * [tHashOutput_16 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_27 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_27";
	
	

 



/**
 * [tOracleInput_27 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_27 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_27";
	
	

}
}finally{
	if (rs_tOracleInput_27 != null) {
		rs_tOracleInput_27.close();
	}
	if (stmt_tOracleInput_27 != null) {
		stmt_tOracleInput_27.close();
	}
}

globalMap.put("tOracleInput_27_NB_LINE",nb_line_tOracleInput_27);
 

ok_Hash.put("tOracleInput_27", true);
end_Hash.put("tOracleInput_27", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk36", 0, "ok");
				}
				tOracleInput_9Process(globalMap);



/**
 * [tOracleInput_27 end ] stop
 */

	
	/**
	 * [tHashOutput_16 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_16";
	
	
globalMap.put("tHashOutput_16_NB_LINE", nb_line_tHashOutput_16);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row63");
			  	}
			  	
 

ok_Hash.put("tHashOutput_16", true);
end_Hash.put("tHashOutput_16", System.currentTimeMillis());




/**
 * [tHashOutput_16 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_27 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_27";
	
	

 



/**
 * [tOracleInput_27 finally ] stop
 */

	
	/**
	 * [tHashOutput_16 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_16";
	
	

 



/**
 * [tHashOutput_16 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_27_SUBPROCESS_STATE", 1);
	}
	


public static class row45Struct implements routines.system.IPersistableRow<row45Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 150;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 10;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row45Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row45Struct row45 = new row45Struct();




	
	/**
	 * [tHashOutput_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_18", false);
		start_Hash.put("tHashOutput_18", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_18";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row45");
					}
				
		int tos_count_tHashOutput_18 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_18=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row45Struct> tHashFile_tHashOutput_18 = null;
		String hashKey_tHashOutput_18 = "tHashFile_ActualizacionMSV_" + pid + "_tHashOutput_18";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_18)){
			    if(mf_tHashOutput_18.getResourceMap().get(hashKey_tHashOutput_18) == null){
	      		    mf_tHashOutput_18.getResourceMap().put(hashKey_tHashOutput_18, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row45Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_18 = mf_tHashOutput_18.getResourceMap().get(hashKey_tHashOutput_18);
			    }else{
			    	tHashFile_tHashOutput_18 = mf_tHashOutput_18.getResourceMap().get(hashKey_tHashOutput_18);
			    }
			}
        int nb_line_tHashOutput_18 = 0;

 



/**
 * [tHashOutput_18 begin ] stop
 */



	
	/**
	 * [tOracleInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_9", false);
		start_Hash.put("tOracleInput_9", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_9";
	
	
		int tos_count_tOracleInput_9 = 0;
		
	


	
		    int nb_line_tOracleInput_9 = 0;
		    java.sql.Connection conn_tOracleInput_9 = null;
				conn_tOracleInput_9 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_9 = false;
				boolean isConnectionWrapped_tOracleInput_9 = !(conn_tOracleInput_9 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_9.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_9 = null;
                if (isConnectionWrapped_tOracleInput_9) {
					unwrappedOraConn_tOracleInput_9 = conn_tOracleInput_9.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_9 != null) {
                        isTimeZoneNull_tOracleInput_9 = (unwrappedOraConn_tOracleInput_9.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_9 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_9).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_9) {
					java.sql.Statement stmtGetTZ_tOracleInput_9 = conn_tOracleInput_9.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_9 = stmtGetTZ_tOracleInput_9.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_9 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_9.next()) {
						sessionTimezone_tOracleInput_9 = rsGetTZ_tOracleInput_9.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_9 && unwrappedOraConn_tOracleInput_9 != null) {
                        unwrappedOraConn_tOracleInput_9.setSessionTimeZone(sessionTimezone_tOracleInput_9);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_9).setSessionTimeZone(sessionTimezone_tOracleInput_9);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_9 = conn_tOracleInput_9.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_9.setFetchSize(1000);


		    String dbquery_tOracleInput_9 = "SELECT ATR.ID,\n       ATR.NOMBRE,\n       ATR.SIGLA \nFROM AFI_TREGIMEN ATR\nWHERE ATR.ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_9_QUERY",dbquery_tOracleInput_9);

		    java.sql.ResultSet rs_tOracleInput_9 = null;

		    try {
		    	rs_tOracleInput_9 = stmt_tOracleInput_9.executeQuery(dbquery_tOracleInput_9);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_9 = rs_tOracleInput_9.getMetaData();
		    	int colQtyInRs_tOracleInput_9 = rsmd_tOracleInput_9.getColumnCount();

		    String tmpContent_tOracleInput_9 = null;
		    
		    
		    while (rs_tOracleInput_9.next()) {
		        nb_line_tOracleInput_9++;
		        
							if(colQtyInRs_tOracleInput_9 < 1) {
								row45.ID = 0;
							} else {
		                          
					if(rs_tOracleInput_9.getObject(1) != null) {
						row45.ID = rs_tOracleInput_9.getInt(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_9 < 2) {
								row45.NOMBRE = null;
							} else {
	                         		
        	row45.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_9, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_9 < 3) {
								row45.SIGLA = null;
							} else {
	                         		
        	row45.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_9, 3, false);
		                    }
					




 



/**
 * [tOracleInput_9 begin ] stop
 */
	
	/**
	 * [tOracleInput_9 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 


	tos_count_tOracleInput_9++;

/**
 * [tOracleInput_9 main ] stop
 */
	
	/**
	 * [tOracleInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_18 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_18";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row45"
						
						);
					}
					



    
		row45Struct oneRow_tHashOutput_18 = new row45Struct();
				
					oneRow_tHashOutput_18.ID = row45.ID;
					oneRow_tHashOutput_18.NOMBRE = row45.NOMBRE;
					oneRow_tHashOutput_18.SIGLA = row45.SIGLA;
		
        tHashFile_tHashOutput_18.put(oneRow_tHashOutput_18);
        nb_line_tHashOutput_18 ++;

 


	tos_count_tHashOutput_18++;

/**
 * [tHashOutput_18 main ] stop
 */
	
	/**
	 * [tHashOutput_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_18";
	
	

 



/**
 * [tHashOutput_18 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_18";
	
	

 



/**
 * [tHashOutput_18 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_9 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

}
}finally{
	if (rs_tOracleInput_9 != null) {
		rs_tOracleInput_9.close();
	}
	if (stmt_tOracleInput_9 != null) {
		stmt_tOracleInput_9.close();
	}
}

globalMap.put("tOracleInput_9_NB_LINE",nb_line_tOracleInput_9);
 

ok_Hash.put("tOracleInput_9", true);
end_Hash.put("tOracleInput_9", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk42", 0, "ok");
				}
				tOracleInput_37Process(globalMap);



/**
 * [tOracleInput_9 end ] stop
 */

	
	/**
	 * [tHashOutput_18 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_18";
	
	
globalMap.put("tHashOutput_18_NB_LINE", nb_line_tHashOutput_18);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row45");
			  	}
			  	
 

ok_Hash.put("tHashOutput_18", true);
end_Hash.put("tHashOutput_18", System.currentTimeMillis());




/**
 * [tHashOutput_18 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_9 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 finally ] stop
 */

	
	/**
	 * [tHashOutput_18 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_18";
	
	

 



/**
 * [tHashOutput_18 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class row126Struct implements routines.system.IPersistableRow<row126Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String DESCRIPCION;

				public String getDESCRIPCION () {
					return this.DESCRIPCION;
				}

				public Boolean DESCRIPCIONIsNullable(){
				    return false;
				}
				public Boolean DESCRIPCIONIsKey(){
				    return false;
				}
				public Integer DESCRIPCIONLength(){
				    return 150;
				}
				public Integer DESCRIPCIONPrecision(){
				    return 0;
				}
				public String DESCRIPCIONDefault(){
				
					return null;
				
				}
				public String DESCRIPCIONComment(){
				
				    return "";
				
				}
				public String DESCRIPCIONPattern(){
				
					return "";
				
				}
				public String DESCRIPCIONOriginalDbColumnName(){
				
					return "DESCRIPCION";
				
				}

				
			    public int CODIGO;

				public int getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return false;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 10;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.DESCRIPCION = readString(dis);
					
			        this.CODIGO = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.DESCRIPCION = readString(dis);
					
			        this.CODIGO = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.DESCRIPCION,dos);
					
					// int
				
		            	dos.writeInt(this.CODIGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.DESCRIPCION,dos);
					
					// int
				
		            	dos.writeInt(this.CODIGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",DESCRIPCION="+DESCRIPCION);
		sb.append(",CODIGO="+String.valueOf(CODIGO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row126Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_37Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_37_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row126Struct row126 = new row126Struct();




	
	/**
	 * [tHashOutput_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_20", false);
		start_Hash.put("tHashOutput_20", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_20";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row126");
					}
				
		int tos_count_tHashOutput_20 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_20=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row126Struct> tHashFile_tHashOutput_20 = null;
		String hashKey_tHashOutput_20 = "tHashFile_ActualizacionMSV_" + pid + "_tHashOutput_20";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_20)){
			    if(mf_tHashOutput_20.getResourceMap().get(hashKey_tHashOutput_20) == null){
	      		    mf_tHashOutput_20.getResourceMap().put(hashKey_tHashOutput_20, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row126Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_20 = mf_tHashOutput_20.getResourceMap().get(hashKey_tHashOutput_20);
			    }else{
			    	tHashFile_tHashOutput_20 = mf_tHashOutput_20.getResourceMap().get(hashKey_tHashOutput_20);
			    }
			}
        int nb_line_tHashOutput_20 = 0;

 



/**
 * [tHashOutput_20 begin ] stop
 */



	
	/**
	 * [tOracleInput_37 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_37", false);
		start_Hash.put("tOracleInput_37", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_37";
	
	
		int tos_count_tOracleInput_37 = 0;
		
	


	
		    int nb_line_tOracleInput_37 = 0;
		    java.sql.Connection conn_tOracleInput_37 = null;
				conn_tOracleInput_37 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_37 = false;
				boolean isConnectionWrapped_tOracleInput_37 = !(conn_tOracleInput_37 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_37.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_37 = null;
                if (isConnectionWrapped_tOracleInput_37) {
					unwrappedOraConn_tOracleInput_37 = conn_tOracleInput_37.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_37 != null) {
                        isTimeZoneNull_tOracleInput_37 = (unwrappedOraConn_tOracleInput_37.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_37 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_37).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_37) {
					java.sql.Statement stmtGetTZ_tOracleInput_37 = conn_tOracleInput_37.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_37 = stmtGetTZ_tOracleInput_37.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_37 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_37.next()) {
						sessionTimezone_tOracleInput_37 = rsGetTZ_tOracleInput_37.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_37 && unwrappedOraConn_tOracleInput_37 != null) {
                        unwrappedOraConn_tOracleInput_37.setSessionTimeZone(sessionTimezone_tOracleInput_37);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_37).setSessionTimeZone(sessionTimezone_tOracleInput_37);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_37 = conn_tOracleInput_37.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_37.setFetchSize(1000);


		    String dbquery_tOracleInput_37 = "SELECT AP.ID,\n       AP.DESCRIPCION,\n       AP.CODIGO \nFROM AFI_PLANAFILIACIONES ap \nWHERE AP.ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_37_QUERY",dbquery_tOracleInput_37);

		    java.sql.ResultSet rs_tOracleInput_37 = null;

		    try {
		    	rs_tOracleInput_37 = stmt_tOracleInput_37.executeQuery(dbquery_tOracleInput_37);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_37 = rs_tOracleInput_37.getMetaData();
		    	int colQtyInRs_tOracleInput_37 = rsmd_tOracleInput_37.getColumnCount();

		    String tmpContent_tOracleInput_37 = null;
		    
		    
		    while (rs_tOracleInput_37.next()) {
		        nb_line_tOracleInput_37++;
		        
							if(colQtyInRs_tOracleInput_37 < 1) {
								row126.ID = 0;
							} else {
		                          
					if(rs_tOracleInput_37.getObject(1) != null) {
						row126.ID = rs_tOracleInput_37.getInt(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_37 < 2) {
								row126.DESCRIPCION = null;
							} else {
	                         		
        	row126.DESCRIPCION = routines.system.JDBCUtil.getString(rs_tOracleInput_37, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_37 < 3) {
								row126.CODIGO = 0;
							} else {
		                          
					if(rs_tOracleInput_37.getObject(3) != null) {
						row126.CODIGO = rs_tOracleInput_37.getInt(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
					




 



/**
 * [tOracleInput_37 begin ] stop
 */
	
	/**
	 * [tOracleInput_37 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_37";
	
	

 


	tos_count_tOracleInput_37++;

/**
 * [tOracleInput_37 main ] stop
 */
	
	/**
	 * [tOracleInput_37 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_37";
	
	

 



/**
 * [tOracleInput_37 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_20 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_20";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row126"
						
						);
					}
					



    
		row126Struct oneRow_tHashOutput_20 = new row126Struct();
				
					oneRow_tHashOutput_20.ID = row126.ID;
					oneRow_tHashOutput_20.DESCRIPCION = row126.DESCRIPCION;
					oneRow_tHashOutput_20.CODIGO = row126.CODIGO;
		
        tHashFile_tHashOutput_20.put(oneRow_tHashOutput_20);
        nb_line_tHashOutput_20 ++;

 


	tos_count_tHashOutput_20++;

/**
 * [tHashOutput_20 main ] stop
 */
	
	/**
	 * [tHashOutput_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_20";
	
	

 



/**
 * [tHashOutput_20 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_20";
	
	

 



/**
 * [tHashOutput_20 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_37 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_37";
	
	

 



/**
 * [tOracleInput_37 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_37 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_37";
	
	

}
}finally{
	if (rs_tOracleInput_37 != null) {
		rs_tOracleInput_37.close();
	}
	if (stmt_tOracleInput_37 != null) {
		stmt_tOracleInput_37.close();
	}
}

globalMap.put("tOracleInput_37_NB_LINE",nb_line_tOracleInput_37);
 

ok_Hash.put("tOracleInput_37", true);
end_Hash.put("tOracleInput_37", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk45", 0, "ok");
				}
				tOracleInput_43Process(globalMap);



/**
 * [tOracleInput_37 end ] stop
 */

	
	/**
	 * [tHashOutput_20 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_20";
	
	
globalMap.put("tHashOutput_20_NB_LINE", nb_line_tHashOutput_20);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row126");
			  	}
			  	
 

ok_Hash.put("tHashOutput_20", true);
end_Hash.put("tHashOutput_20", System.currentTimeMillis());




/**
 * [tHashOutput_20 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_37 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_37";
	
	

 



/**
 * [tOracleInput_37 finally ] stop
 */

	
	/**
	 * [tHashOutput_20 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_20";
	
	

 



/**
 * [tHashOutput_20 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_37_SUBPROCESS_STATE", 1);
	}
	


public static class row153Struct implements routines.system.IPersistableRow<row153Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 400;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return false;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 10;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.NOMBRE = readString(dis);
					
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",CODIGO="+CODIGO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row153Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_43Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_43_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row153Struct row153 = new row153Struct();




	
	/**
	 * [tHashOutput_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_22", false);
		start_Hash.put("tHashOutput_22", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_22";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row153");
					}
				
		int tos_count_tHashOutput_22 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_22=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row153Struct> tHashFile_tHashOutput_22 = null;
		String hashKey_tHashOutput_22 = "tHashFile_ActualizacionMSV_" + pid + "_tHashOutput_22";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_22)){
			    if(mf_tHashOutput_22.getResourceMap().get(hashKey_tHashOutput_22) == null){
	      		    mf_tHashOutput_22.getResourceMap().put(hashKey_tHashOutput_22, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row153Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_22 = mf_tHashOutput_22.getResourceMap().get(hashKey_tHashOutput_22);
			    }else{
			    	tHashFile_tHashOutput_22 = mf_tHashOutput_22.getResourceMap().get(hashKey_tHashOutput_22);
			    }
			}
        int nb_line_tHashOutput_22 = 0;

 



/**
 * [tHashOutput_22 begin ] stop
 */



	
	/**
	 * [tOracleInput_43 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_43", false);
		start_Hash.put("tOracleInput_43", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_43";
	
	
		int tos_count_tOracleInput_43 = 0;
		
	


	
		    int nb_line_tOracleInput_43 = 0;
		    java.sql.Connection conn_tOracleInput_43 = null;
				conn_tOracleInput_43 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_43 = false;
				boolean isConnectionWrapped_tOracleInput_43 = !(conn_tOracleInput_43 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_43.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_43 = null;
                if (isConnectionWrapped_tOracleInput_43) {
					unwrappedOraConn_tOracleInput_43 = conn_tOracleInput_43.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_43 != null) {
                        isTimeZoneNull_tOracleInput_43 = (unwrappedOraConn_tOracleInput_43.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_43 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_43).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_43) {
					java.sql.Statement stmtGetTZ_tOracleInput_43 = conn_tOracleInput_43.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_43 = stmtGetTZ_tOracleInput_43.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_43 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_43.next()) {
						sessionTimezone_tOracleInput_43 = rsGetTZ_tOracleInput_43.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_43 && unwrappedOraConn_tOracleInput_43 != null) {
                        unwrappedOraConn_tOracleInput_43.setSessionTimeZone(sessionTimezone_tOracleInput_43);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_43).setSessionTimeZone(sessionTimezone_tOracleInput_43);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_43 = conn_tOracleInput_43.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_43.setFetchSize(1000);


		    String dbquery_tOracleInput_43 = " SELECT ID,\nNOMBRE,\nCODIGO\nFROM GEN_POBLACION_ESPECIAL gpe\nWHERE ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_43_QUERY",dbquery_tOracleInput_43);

		    java.sql.ResultSet rs_tOracleInput_43 = null;

		    try {
		    	rs_tOracleInput_43 = stmt_tOracleInput_43.executeQuery(dbquery_tOracleInput_43);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_43 = rs_tOracleInput_43.getMetaData();
		    	int colQtyInRs_tOracleInput_43 = rsmd_tOracleInput_43.getColumnCount();

		    String tmpContent_tOracleInput_43 = null;
		    
		    
		    while (rs_tOracleInput_43.next()) {
		        nb_line_tOracleInput_43++;
		        
							if(colQtyInRs_tOracleInput_43 < 1) {
								row153.ID = 0;
							} else {
		                          
					if(rs_tOracleInput_43.getObject(1) != null) {
						row153.ID = rs_tOracleInput_43.getInt(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_43 < 2) {
								row153.NOMBRE = null;
							} else {
	                         		
        	row153.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_43, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_43 < 3) {
								row153.CODIGO = null;
							} else {
	                         		
        	row153.CODIGO = routines.system.JDBCUtil.getString(rs_tOracleInput_43, 3, false);
		                    }
					




 



/**
 * [tOracleInput_43 begin ] stop
 */
	
	/**
	 * [tOracleInput_43 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_43";
	
	

 


	tos_count_tOracleInput_43++;

/**
 * [tOracleInput_43 main ] stop
 */
	
	/**
	 * [tOracleInput_43 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_43";
	
	

 



/**
 * [tOracleInput_43 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_22 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_22";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row153"
						
						);
					}
					



    
		row153Struct oneRow_tHashOutput_22 = new row153Struct();
				
					oneRow_tHashOutput_22.ID = row153.ID;
					oneRow_tHashOutput_22.NOMBRE = row153.NOMBRE;
					oneRow_tHashOutput_22.CODIGO = row153.CODIGO;
		
        tHashFile_tHashOutput_22.put(oneRow_tHashOutput_22);
        nb_line_tHashOutput_22 ++;

 


	tos_count_tHashOutput_22++;

/**
 * [tHashOutput_22 main ] stop
 */
	
	/**
	 * [tHashOutput_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_22";
	
	

 



/**
 * [tHashOutput_22 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_22";
	
	

 



/**
 * [tHashOutput_22 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_43 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_43";
	
	

 



/**
 * [tOracleInput_43 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_43 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_43";
	
	

}
}finally{
	if (rs_tOracleInput_43 != null) {
		rs_tOracleInput_43.close();
	}
	if (stmt_tOracleInput_43 != null) {
		stmt_tOracleInput_43.close();
	}
}

globalMap.put("tOracleInput_43_NB_LINE",nb_line_tOracleInput_43);
 

ok_Hash.put("tOracleInput_43", true);
end_Hash.put("tOracleInput_43", System.currentTimeMillis());




/**
 * [tOracleInput_43 end ] stop
 */

	
	/**
	 * [tHashOutput_22 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_22";
	
	
globalMap.put("tHashOutput_22_NB_LINE", nb_line_tHashOutput_22);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row153");
			  	}
			  	
 

ok_Hash.put("tHashOutput_22", true);
end_Hash.put("tHashOutput_22", System.currentTimeMillis());




/**
 * [tHashOutput_22 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_43 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_43";
	
	

 



/**
 * [tOracleInput_43 finally ] stop
 */

	
	/**
	 * [tHashOutput_22 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_22";
	
	

 



/**
 * [tHashOutput_22 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_43_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer REGISTROS;

				public Integer getREGISTROS () {
					return this.REGISTROS;
				}

				public Boolean REGISTROSIsNullable(){
				    return true;
				}
				public Boolean REGISTROSIsKey(){
				    return false;
				}
				public Integer REGISTROSLength(){
				    return 0;
				}
				public Integer REGISTROSPrecision(){
				    return 0;
				}
				public String REGISTROSDefault(){
				
					return null;
				
				}
				public String REGISTROSComment(){
				
				    return "";
				
				}
				public String REGISTROSPattern(){
				
					return "";
				
				}
				public String REGISTROSOriginalDbColumnName(){
				
					return "REGISTROS";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.REGISTROS = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.REGISTROS = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.REGISTROS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.REGISTROS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("REGISTROS="+String.valueOf(REGISTROS));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tJavaRow_2 = 0;
		

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tOracleInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_1", false);
		start_Hash.put("tOracleInput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_1";
	
	
		int tos_count_tOracleInput_1 = 0;
		
	


	
		    int nb_line_tOracleInput_1 = 0;
		    java.sql.Connection conn_tOracleInput_1 = null;
				conn_tOracleInput_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_1 = false;
				boolean isConnectionWrapped_tOracleInput_1 = !(conn_tOracleInput_1 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_1.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_1 = null;
                if (isConnectionWrapped_tOracleInput_1) {
					unwrappedOraConn_tOracleInput_1 = conn_tOracleInput_1.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_1 != null) {
                        isTimeZoneNull_tOracleInput_1 = (unwrappedOraConn_tOracleInput_1.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_1 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_1).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_1) {
					java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_1 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_1.next()) {
						sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_1 && unwrappedOraConn_tOracleInput_1 != null) {
                        unwrappedOraConn_tOracleInput_1.setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_1).setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1.createStatement();

		    String dbquery_tOracleInput_1 = "select count(1) REGISTROS\n  from afi_archivos aa\n   inner join afi_tarchivos at on (aa.tarchivos_id = at.id)\n   inne"
+"r join afi_estextderechos ae on (aa.estado = ae.id)\n  where at.codigo = 21\n    and ae.codigo = 1\n    and UPPER(aa.ext"
+"ension) = 'TXT'\n    and aa.id = 	" + context.vafiarchivos_id;
		    

		    globalMap.put("tOracleInput_1_QUERY",dbquery_tOracleInput_1);

		    java.sql.ResultSet rs_tOracleInput_1 = null;

		    try {
		    	rs_tOracleInput_1 = stmt_tOracleInput_1.executeQuery(dbquery_tOracleInput_1);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1.getMetaData();
		    	int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1.getColumnCount();

		    String tmpContent_tOracleInput_1 = null;
		    
		    
		    while (rs_tOracleInput_1.next()) {
		        nb_line_tOracleInput_1++;
		        
							if(colQtyInRs_tOracleInput_1 < 1) {
								row2.REGISTROS = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(1) != null) {
						row2.REGISTROS = rs_tOracleInput_1.getInt(1);
					} else {
				
						row2.REGISTROS = null;
					}
		                    }
					




 



/**
 * [tOracleInput_1 begin ] stop
 */
	
	/**
	 * [tOracleInput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 


	tos_count_tOracleInput_1++;

/**
 * [tOracleInput_1 main ] stop
 */
	
	/**
	 * [tOracleInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					

    //Mapeo de datos a variables de contexto
context.vcount_registros = row2.REGISTROS;
context.vtarchivos_codigo = 21;
context.vfinicio = TalendDate.getCurrentDate();


    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

}
}finally{
	if (rs_tOracleInput_1 != null) {
		rs_tOracleInput_1.close();
	}
	if (stmt_tOracleInput_1 != null) {
		stmt_tOracleInput_1.close();
	}
}

globalMap.put("tOracleInput_1_NB_LINE",nb_line_tOracleInput_1);
 

ok_Hash.put("tOracleInput_1", true);
end_Hash.put("tOracleInput_1", System.currentTimeMillis());




/**
 * [tOracleInput_1 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());

   			if (context.vcount_registros == 0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If1", 0, "true");
					}
				tFixedFlowInput_2Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "false");
					}   	 
   				}
   			if (context.vcount_registros > 0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If3", 0, "true");
					}
				tFixedFlowInput_4Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If3", 0, "false");
					}   	 
   				}



/**
 * [tJavaRow_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer archivos_id_;

				public Integer getArchivos_id_ () {
					return this.archivos_id_;
				}

				public Boolean archivos_id_IsNullable(){
				    return true;
				}
				public Boolean archivos_id_IsKey(){
				    return false;
				}
				public Integer archivos_id_Length(){
				    return null;
				}
				public Integer archivos_id_Precision(){
				    return null;
				}
				public String archivos_id_Default(){
				
					return null;
				
				}
				public String archivos_id_Comment(){
				
				    return "";
				
				}
				public String archivos_id_Pattern(){
				
					return "";
				
				}
				public String archivos_id_OriginalDbColumnName(){
				
					return "archivos_id_";
				
				}

				
			    public Integer estado_;

				public Integer getEstado_ () {
					return this.estado_;
				}

				public Boolean estado_IsNullable(){
				    return true;
				}
				public Boolean estado_IsKey(){
				    return false;
				}
				public Integer estado_Length(){
				    return null;
				}
				public Integer estado_Precision(){
				    return null;
				}
				public String estado_Default(){
				
					return null;
				
				}
				public String estado_Comment(){
				
				    return "";
				
				}
				public String estado_Pattern(){
				
					return "";
				
				}
				public String estado_OriginalDbColumnName(){
				
					return "estado_";
				
				}

				
			    public java.util.Date finicio_;

				public java.util.Date getFinicio_ () {
					return this.finicio_;
				}

				public Boolean finicio_IsNullable(){
				    return true;
				}
				public Boolean finicio_IsKey(){
				    return false;
				}
				public Integer finicio_Length(){
				    return null;
				}
				public Integer finicio_Precision(){
				    return null;
				}
				public String finicio_Default(){
				
					return null;
				
				}
				public String finicio_Comment(){
				
				    return "";
				
				}
				public String finicio_Pattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String finicio_OriginalDbColumnName(){
				
					return "finicio_";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.archivos_id_ = readInteger(dis);
					
						this.estado_ = readInteger(dis);
					
					this.finicio_ = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.archivos_id_ = readInteger(dis);
					
						this.estado_ = readInteger(dis);
					
					this.finicio_ = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.archivos_id_,dos);
					
					// Integer
				
						writeInteger(this.estado_,dos);
					
					// java.util.Date
				
						writeDate(this.finicio_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.archivos_id_,dos);
					
					// Integer
				
						writeInteger(this.estado_,dos);
					
					// java.util.Date
				
						writeDate(this.finicio_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("archivos_id_="+String.valueOf(archivos_id_));
		sb.append(",estado_="+String.valueOf(estado_));
		sb.append(",finicio_="+String.valueOf(finicio_));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();




	
	/**
	 * [tOracleSP_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_1", false);
		start_Hash.put("tOracleSP_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tOracleSP_1 = 0;
		

	java.sql.Connection connection_tOracleSP_1 = null;
	connection_tOracleSP_1 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_1");
	

java.sql.CallableStatement statement_tOracleSP_1 = connection_tOracleSP_1.prepareCall("{call " + "cms2.updestadoarchivo" + "(?,?,?)}");

java.sql.Timestamp tmpDate_tOracleSP_1;
String tmpString_tOracleSP_1;

 



/**
 * [tOracleSP_1 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_2", false);
		start_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_2";
	
	
		int tos_count_tFixedFlowInput_2 = 0;
		

	    for (int i_tFixedFlowInput_2 = 0 ; i_tFixedFlowInput_2 < 1 ; i_tFixedFlowInput_2++) {
	                	            	
    	            		row6.archivos_id_ = context.vafiarchivos_id;
    	            	        	            	
    	            		row6.estado_ = 7;
    	            	        	            	
    	            		row6.finicio_ = context.vfinicio;
    	            	

 



/**
 * [tFixedFlowInput_2 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 


	tos_count_tFixedFlowInput_2++;

/**
 * [tFixedFlowInput_2 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tOracleSP_1 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					

			// code for the argument 1 (archivos_id_) of type 'IN AUTOMAPPING'
    					if (row6.archivos_id_ == null) {
    						statement_tOracleSP_1.setNull(1, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_1.setInt(1, row6.archivos_id_);
    					}
    					
			// code for the argument 2 (estado_) of type 'IN AUTOMAPPING'
    					if (row6.estado_ == null) {
    						statement_tOracleSP_1.setNull(2, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_1.setInt(2, row6.estado_);
    					}
    					
			// code for the argument 3 (finicio_) of type 'IN TIMESTAMP'
    					if (row6.finicio_ == null) {
    						statement_tOracleSP_1.setNull(3, java.sql.Types.DATE);
    					} else {
    					
    					statement_tOracleSP_1.setTimestamp(3, new java.sql.Timestamp(row6.finicio_.getTime()));
    					
    					}
    					
		statement_tOracleSP_1.execute();
		

 


	tos_count_tOracleSP_1++;

/**
 * [tOracleSP_1 main ] stop
 */
	
	/**
	 * [tOracleSP_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	

 



/**
 * [tOracleSP_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleSP_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	

 



/**
 * [tOracleSP_1 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

        }
        globalMap.put("tFixedFlowInput_2_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_2", true);
end_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());




/**
 * [tFixedFlowInput_2 end ] stop
 */

	
	/**
	 * [tOracleSP_1 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	


	statement_tOracleSP_1.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tOracleSP_1", true);
end_Hash.put("tOracleSP_1", System.currentTimeMillis());

   			if (context.vcount_registros == 0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If2", 0, "true");
					}
				tFixedFlowInput_3Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "false");
					}   	 
   				}



/**
 * [tOracleSP_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_2 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 finally ] stop
 */

	
	/**
	 * [tOracleSP_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	

 



/**
 * [tOracleSP_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public String respuesta;

				public String getRespuesta () {
					return this.respuesta;
				}

				public Boolean respuestaIsNullable(){
				    return true;
				}
				public Boolean respuestaIsKey(){
				    return false;
				}
				public Integer respuestaLength(){
				    return null;
				}
				public Integer respuestaPrecision(){
				    return null;
				}
				public String respuestaDefault(){
				
					return null;
				
				}
				public String respuestaComment(){
				
				    return "";
				
				}
				public String respuestaPattern(){
				
					return "";
				
				}
				public String respuestaOriginalDbColumnName(){
				
					return "respuesta";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.respuesta = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.respuesta = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.respuesta,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.respuesta,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("respuesta="+respuesta);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public String respuesta;

				public String getRespuesta () {
					return this.respuesta;
				}

				public Boolean respuestaIsNullable(){
				    return true;
				}
				public Boolean respuestaIsKey(){
				    return false;
				}
				public Integer respuestaLength(){
				    return null;
				}
				public Integer respuestaPrecision(){
				    return null;
				}
				public String respuestaDefault(){
				
					return null;
				
				}
				public String respuestaComment(){
				
				    return "";
				
				}
				public String respuestaPattern(){
				
					return "";
				
				}
				public String respuestaOriginalDbColumnName(){
				
					return "respuesta";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.respuesta = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.respuesta = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.respuesta,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.respuesta,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("respuesta="+respuesta);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();
row7Struct row8 = row7;





	
	/**
	 * [tDie_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_1", false);
		start_Hash.put("tDie_1", System.currentTimeMillis());
		
	
	currentComponent="tDie_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tDie_1 = 0;
		

 



/**
 * [tDie_1 begin ] stop
 */



	
	/**
	 * [tBufferOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tBufferOutput_1", false);
		start_Hash.put("tBufferOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tBufferOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tBufferOutput_1 = 0;
		

 



/**
 * [tBufferOutput_1 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_3", false);
		start_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_3";
	
	
		int tos_count_tFixedFlowInput_3 = 0;
		

	    for (int i_tFixedFlowInput_3 = 0 ; i_tFixedFlowInput_3 < 1 ; i_tFixedFlowInput_3++) {
	                	            	
    	            		row7.respuesta = "ERROR: No se encuentra el id del archivo en la tabla AFI_ARCHIVOS";
    	            	

 



/**
 * [tFixedFlowInput_3 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 


	tos_count_tFixedFlowInput_3++;

/**
 * [tFixedFlowInput_3 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tBufferOutput_1 main ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					



String[] row_tBufferOutput_1=new String[]{"",};		
	    if(row7.respuesta != null){
	        
	            row_tBufferOutput_1[0] = row7.respuesta;
	                        			    
	    }else{
	    	row_tBufferOutput_1[0] = null;
	    }
	globalBuffer.add(row_tBufferOutput_1);	
	
 
     row8 = row7;


	tos_count_tBufferOutput_1++;

/**
 * [tBufferOutput_1 main ] stop
 */
	
	/**
	 * [tBufferOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";
	
	

 



/**
 * [tBufferOutput_1 process_data_begin ] stop
 */

	
	/**
	 * [tDie_1 main ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_1", 5, "ERROR: No se encuentra el id del archivo en la tabla AFI_ARCHIVOS", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_1_DIE_PRIORITY", 5);
	System.err.println("ERROR: No se encuentra el id del archivo en la tabla AFI_ARCHIVOS");
	
	globalMap.put("tDie_1_DIE_MESSAGE", "ERROR: No se encuentra el id del archivo en la tabla AFI_ARCHIVOS");
	globalMap.put("tDie_1_DIE_MESSAGES", "ERROR: No se encuentra el id del archivo en la tabla AFI_ARCHIVOS");
	
	} catch (Exception | Error e_tDie_1) {
	    globalMap.put("tDie_1_ERROR_MESSAGE",e_tDie_1.getMessage());
		logIgnoredError(String.format("tDie_1 - tDie failed to log message due to internal error: %s", e_tDie_1), e_tDie_1);
	}
	
	currentComponent = "tDie_1";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_1_DIE_CODE", errorCode);        

    
	if(true){	
		TDieException e_tDie_1 = new TDieException();

		

		throw e_tDie_1;
	}

 


	tos_count_tDie_1++;

/**
 * [tDie_1 main ] stop
 */
	
	/**
	 * [tDie_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 process_data_begin ] stop
 */
	
	/**
	 * [tDie_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 process_data_end ] stop
 */



	
	/**
	 * [tBufferOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";
	
	

 



/**
 * [tBufferOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

        }
        globalMap.put("tFixedFlowInput_3_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_3", true);
end_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());




/**
 * [tFixedFlowInput_3 end ] stop
 */

	
	/**
	 * [tBufferOutput_1 end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tBufferOutput_1", true);
end_Hash.put("tBufferOutput_1", System.currentTimeMillis());




/**
 * [tBufferOutput_1 end ] stop
 */

	
	/**
	 * [tDie_1 end ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tDie_1", true);
end_Hash.put("tDie_1", System.currentTimeMillis());




/**
 * [tDie_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_3 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 finally ] stop
 */

	
	/**
	 * [tBufferOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";
	
	

 



/**
 * [tBufferOutput_1 finally ] stop
 */

	
	/**
	 * [tDie_1 finally ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer archivos_id_;

				public Integer getArchivos_id_ () {
					return this.archivos_id_;
				}

				public Boolean archivos_id_IsNullable(){
				    return true;
				}
				public Boolean archivos_id_IsKey(){
				    return false;
				}
				public Integer archivos_id_Length(){
				    return null;
				}
				public Integer archivos_id_Precision(){
				    return null;
				}
				public String archivos_id_Default(){
				
					return null;
				
				}
				public String archivos_id_Comment(){
				
				    return "";
				
				}
				public String archivos_id_Pattern(){
				
					return "";
				
				}
				public String archivos_id_OriginalDbColumnName(){
				
					return "archivos_id_";
				
				}

				
			    public Integer estado_;

				public Integer getEstado_ () {
					return this.estado_;
				}

				public Boolean estado_IsNullable(){
				    return true;
				}
				public Boolean estado_IsKey(){
				    return false;
				}
				public Integer estado_Length(){
				    return null;
				}
				public Integer estado_Precision(){
				    return null;
				}
				public String estado_Default(){
				
					return null;
				
				}
				public String estado_Comment(){
				
				    return "";
				
				}
				public String estado_Pattern(){
				
					return "";
				
				}
				public String estado_OriginalDbColumnName(){
				
					return "estado_";
				
				}

				
			    public java.util.Date finicio_;

				public java.util.Date getFinicio_ () {
					return this.finicio_;
				}

				public Boolean finicio_IsNullable(){
				    return true;
				}
				public Boolean finicio_IsKey(){
				    return false;
				}
				public Integer finicio_Length(){
				    return null;
				}
				public Integer finicio_Precision(){
				    return null;
				}
				public String finicio_Default(){
				
					return null;
				
				}
				public String finicio_Comment(){
				
				    return "";
				
				}
				public String finicio_Pattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String finicio_OriginalDbColumnName(){
				
					return "finicio_";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.archivos_id_ = readInteger(dis);
					
						this.estado_ = readInteger(dis);
					
					this.finicio_ = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.archivos_id_ = readInteger(dis);
					
						this.estado_ = readInteger(dis);
					
					this.finicio_ = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.archivos_id_,dos);
					
					// Integer
				
						writeInteger(this.estado_,dos);
					
					// java.util.Date
				
						writeDate(this.finicio_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.archivos_id_,dos);
					
					// Integer
				
						writeInteger(this.estado_,dos);
					
					// java.util.Date
				
						writeDate(this.finicio_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("archivos_id_="+String.valueOf(archivos_id_));
		sb.append(",estado_="+String.valueOf(estado_));
		sb.append(",finicio_="+String.valueOf(finicio_));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();




	
	/**
	 * [tOracleSP_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_2", false);
		start_Hash.put("tOracleSP_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tOracleSP_2 = 0;
		

	java.sql.Connection connection_tOracleSP_2 = null;
	connection_tOracleSP_2 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_1");
	

java.sql.CallableStatement statement_tOracleSP_2 = connection_tOracleSP_2.prepareCall("{call " + "cms2.updestadoarchivo" + "(?,?,?)}");

java.sql.Timestamp tmpDate_tOracleSP_2;
String tmpString_tOracleSP_2;

 



/**
 * [tOracleSP_2 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_4", false);
		start_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_4";
	
	
		int tos_count_tFixedFlowInput_4 = 0;
		

	    for (int i_tFixedFlowInput_4 = 0 ; i_tFixedFlowInput_4 < 1 ; i_tFixedFlowInput_4++) {
	                	            	
    	            		row9.archivos_id_ = context.vafiarchivos_id;
    	            	        	            	
    	            		row9.estado_ = 5;
    	            	        	            	
    	            		row9.finicio_ = context.vfinicio;
    	            	

 



/**
 * [tFixedFlowInput_4 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 


	tos_count_tFixedFlowInput_4++;

/**
 * [tFixedFlowInput_4 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 



/**
 * [tFixedFlowInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tOracleSP_2 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					

			// code for the argument 1 (archivos_id_) of type 'IN AUTOMAPPING'
    					if (row9.archivos_id_ == null) {
    						statement_tOracleSP_2.setNull(1, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_2.setInt(1, row9.archivos_id_);
    					}
    					
			// code for the argument 2 (estado_) of type 'IN AUTOMAPPING'
    					if (row9.estado_ == null) {
    						statement_tOracleSP_2.setNull(2, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_2.setInt(2, row9.estado_);
    					}
    					
			// code for the argument 3 (finicio_) of type 'IN TIMESTAMP'
    					if (row9.finicio_ == null) {
    						statement_tOracleSP_2.setNull(3, java.sql.Types.DATE);
    					} else {
    					
    					statement_tOracleSP_2.setTimestamp(3, new java.sql.Timestamp(row9.finicio_.getTime()));
    					
    					}
    					
		statement_tOracleSP_2.execute();
		

 


	tos_count_tOracleSP_2++;

/**
 * [tOracleSP_2 main ] stop
 */
	
	/**
	 * [tOracleSP_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	

 



/**
 * [tOracleSP_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleSP_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	

 



/**
 * [tOracleSP_2 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 



/**
 * [tFixedFlowInput_4 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

        }
        globalMap.put("tFixedFlowInput_4_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_4", true);
end_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());




/**
 * [tFixedFlowInput_4 end ] stop
 */

	
	/**
	 * [tOracleSP_2 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	


	statement_tOracleSP_2.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tOracleSP_2", true);
end_Hash.put("tOracleSP_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk10", 0, "ok");
				}
				tOracleRow_1Process(globalMap);



/**
 * [tOracleSP_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_4 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 



/**
 * [tFixedFlowInput_4 finally ] stop
 */

	
	/**
	 * [tOracleSP_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	

 



/**
 * [tOracleSP_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", 1);
	}
	


public void tOracleRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleRow_1", false);
		start_Hash.put("tOracleRow_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleRow_1";
	
	
		int tos_count_tOracleRow_1 = 0;
		

	java.sql.Connection conn_tOracleRow_1 = null;
	String query_tOracleRow_1 = "";
	boolean whetherReject_tOracleRow_1 = false;
	int count_tOracleRow_1 = 0;
				conn_tOracleRow_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
			
        resourceMap.put("conn_tOracleRow_1", conn_tOracleRow_1);
        java.sql.Statement stmt_tOracleRow_1 = conn_tOracleRow_1.createStatement();
        resourceMap.put("stmt_tOracleRow_1", stmt_tOracleRow_1);
				int nb_line_inserted_tOracleRow_1 = 0;
			

 



/**
 * [tOracleRow_1 begin ] stop
 */
	
	/**
	 * [tOracleRow_1 main ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

query_tOracleRow_1 = "truncate table tst_archivo";
whetherReject_tOracleRow_1 = false;
globalMap.put("tOracleRow_1_QUERY",query_tOracleRow_1);
try {
		stmt_tOracleRow_1.execute(query_tOracleRow_1);
		
		nb_line_inserted_tOracleRow_1 += stmt_tOracleRow_1.getUpdateCount();
	} catch (java.lang.Exception e) {
globalMap.put("tOracleRow_1_ERROR_MESSAGE",e.getMessage());
		whetherReject_tOracleRow_1 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tOracleRow_1) {
		
	}
	

 


	tos_count_tOracleRow_1++;

/**
 * [tOracleRow_1 main ] stop
 */
	
	/**
	 * [tOracleRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

 



/**
 * [tOracleRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

 



/**
 * [tOracleRow_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleRow_1 end ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

	globalMap.put("tOracleRow_1_NB_LINE", count_tOracleRow_1);
        stmt_tOracleRow_1.close();
        resourceMap.remove("stmt_tOracleRow_1");
    resourceMap.put("statementClosed_tOracleRow_1", true);
    resourceMap.put("finish_tOracleRow_1", true);

    globalMap.put("tOracleRow_1_NB_LINE_INSERTED",nb_line_inserted_tOracleRow_1);
 

ok_Hash.put("tOracleRow_1", true);
end_Hash.put("tOracleRow_1", System.currentTimeMillis());




/**
 * [tOracleRow_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleRow_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tOracleInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleRow_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

    if (resourceMap.get("statementClosed_tOracleRow_1") == null) {
            java.sql.Statement stmtToClose_tOracleRow_1 = null;
            if ((stmtToClose_tOracleRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tOracleRow_1")) != null) {
                stmtToClose_tOracleRow_1.close();
            }
    }
 



/**
 * [tOracleRow_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleRow_1_SUBPROCESS_STATE", 1);
	}
	


public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public String ARCHIVO;

				public String getARCHIVO () {
					return this.ARCHIVO;
				}

				public Boolean ARCHIVOIsNullable(){
				    return false;
				}
				public Boolean ARCHIVOIsKey(){
				    return false;
				}
				public Integer ARCHIVOLength(){
				    return null;
				}
				public Integer ARCHIVOPrecision(){
				    return null;
				}
				public String ARCHIVODefault(){
				
					return null;
				
				}
				public String ARCHIVOComment(){
				
				    return "";
				
				}
				public String ARCHIVOPattern(){
				
					return "";
				
				}
				public String ARCHIVOOriginalDbColumnName(){
				
					return "ARCHIVO";
				
				}

				
			    public String EXTENSION;

				public String getEXTENSION () {
					return this.EXTENSION;
				}

				public Boolean EXTENSIONIsNullable(){
				    return true;
				}
				public Boolean EXTENSIONIsKey(){
				    return false;
				}
				public Integer EXTENSIONLength(){
				    return null;
				}
				public Integer EXTENSIONPrecision(){
				    return null;
				}
				public String EXTENSIONDefault(){
				
					return null;
				
				}
				public String EXTENSIONComment(){
				
				    return "";
				
				}
				public String EXTENSIONPattern(){
				
					return "";
				
				}
				public String EXTENSIONOriginalDbColumnName(){
				
					return "EXTENSION";
				
				}

				
			    public Object CONTENIDO;

				public Object getCONTENIDO () {
					return this.CONTENIDO;
				}

				public Boolean CONTENIDOIsNullable(){
				    return true;
				}
				public Boolean CONTENIDOIsKey(){
				    return false;
				}
				public Integer CONTENIDOLength(){
				    return null;
				}
				public Integer CONTENIDOPrecision(){
				    return null;
				}
				public String CONTENIDODefault(){
				
					return null;
				
				}
				public String CONTENIDOComment(){
				
				    return "";
				
				}
				public String CONTENIDOPattern(){
				
					return "";
				
				}
				public String CONTENIDOOriginalDbColumnName(){
				
					return "CONTENIDO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.ARCHIVO = readString(dis);
					
					this.EXTENSION = readString(dis);
					
						this.CONTENIDO = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.ARCHIVO = readString(dis);
					
					this.EXTENSION = readString(dis);
					
						this.CONTENIDO = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ARCHIVO,dos);
					
					// String
				
						writeString(this.EXTENSION,dos);
					
					// Object
				
       			    	dos.writeObject(this.CONTENIDO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ARCHIVO,dos);
					
					// String
				
						writeString(this.EXTENSION,dos);
					
					// Object
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTENIDO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ARCHIVO="+ARCHIVO);
		sb.append(",EXTENSION="+EXTENSION);
		sb.append(",CONTENIDO="+String.valueOf(CONTENIDO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row12Struct row12 = new row12Struct();




	
	/**
	 * [tJavaRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_3", false);
		start_Hash.put("tJavaRow_3", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tJavaRow_3 = 0;
		

int nb_line_tJavaRow_3 = 0;

 



/**
 * [tJavaRow_3 begin ] stop
 */



	
	/**
	 * [tOracleInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_2", false);
		start_Hash.put("tOracleInput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_2";
	
	
		int tos_count_tOracleInput_2 = 0;
		
	


	
		    int nb_line_tOracleInput_2 = 0;
		    java.sql.Connection conn_tOracleInput_2 = null;
				conn_tOracleInput_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_2 = false;
				boolean isConnectionWrapped_tOracleInput_2 = !(conn_tOracleInput_2 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_2.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_2 = null;
                if (isConnectionWrapped_tOracleInput_2) {
					unwrappedOraConn_tOracleInput_2 = conn_tOracleInput_2.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_2 != null) {
                        isTimeZoneNull_tOracleInput_2 = (unwrappedOraConn_tOracleInput_2.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_2 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_2).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_2) {
					java.sql.Statement stmtGetTZ_tOracleInput_2 = conn_tOracleInput_2.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_2 = stmtGetTZ_tOracleInput_2.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_2 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_2.next()) {
						sessionTimezone_tOracleInput_2 = rsGetTZ_tOracleInput_2.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_2 && unwrappedOraConn_tOracleInput_2 != null) {
                        unwrappedOraConn_tOracleInput_2.setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_2).setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_2 = conn_tOracleInput_2.createStatement();

		    String dbquery_tOracleInput_2 = "select archivo, extension, contenido\nfrom afi_archivos aa\ninner join afi_tarchivos at on (aa.tarchivos_id = at.id)\ni"
+"nner join afi_estextderechos ae on (aa.estado = ae.id)\nwhere at.codigo = 21\nand UPPER(aa.extension) = 'TXT'\n--and ae."
+"codigo = 5\nand aa.id = " + context.vafiarchivos_id;
		    

		    globalMap.put("tOracleInput_2_QUERY",dbquery_tOracleInput_2);

		    java.sql.ResultSet rs_tOracleInput_2 = null;

		    try {
		    	rs_tOracleInput_2 = stmt_tOracleInput_2.executeQuery(dbquery_tOracleInput_2);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_2 = rs_tOracleInput_2.getMetaData();
		    	int colQtyInRs_tOracleInput_2 = rsmd_tOracleInput_2.getColumnCount();

		    String tmpContent_tOracleInput_2 = null;
		    
		    
		    while (rs_tOracleInput_2.next()) {
		        nb_line_tOracleInput_2++;
		        
							if(colQtyInRs_tOracleInput_2 < 1) {
								row12.ARCHIVO = null;
							} else {
	                         		
        	row12.ARCHIVO = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 2) {
								row12.EXTENSION = null;
							} else {
	                         		
        	row12.EXTENSION = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 3) {
								row12.CONTENIDO = null;
							} else {
		                          
				Object tmpObj_3_tOracleInput_2 = rs_tOracleInput_2.getObject(3);
				if(tmpObj_3_tOracleInput_2 != null) {
					row12.CONTENIDO = tmpObj_3_tOracleInput_2;
				} else {
						row12.CONTENIDO = null;
				}
		                    }
					




 



/**
 * [tOracleInput_2 begin ] stop
 */
	
	/**
	 * [tOracleInput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 


	tos_count_tOracleInput_2++;

/**
 * [tOracleInput_2 main ] stop
 */
	
	/**
	 * [tOracleInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_3 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row12"
						
						);
					}
					

    context.vcontenido = ((java.sql.Blob)row12.CONTENIDO).getBinaryStream();


    nb_line_tJavaRow_3++;   

 


	tos_count_tJavaRow_3++;

/**
 * [tJavaRow_3 main ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

}
}finally{
	if (rs_tOracleInput_2 != null) {
		rs_tOracleInput_2.close();
	}
	if (stmt_tOracleInput_2 != null) {
		stmt_tOracleInput_2.close();
	}
}

globalMap.put("tOracleInput_2_NB_LINE",nb_line_tOracleInput_2);
 

ok_Hash.put("tOracleInput_2", true);
end_Hash.put("tOracleInput_2", System.currentTimeMillis());




/**
 * [tOracleInput_2 end ] stop
 */

	
	/**
	 * [tJavaRow_3 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

globalMap.put("tJavaRow_3_NB_LINE",nb_line_tJavaRow_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tJavaRow_3", true);
end_Hash.put("tJavaRow_3", System.currentTimeMillis());

   			if (context.vcontenido != null) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If6", 0, "true");
					}
				tFileInputDelimited_1Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If6", 0, "false");
					}   	 
   				}
   			if (context.vcontenido == null) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If4", 0, "true");
					}
				tFixedFlowInput_6Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If4", 0, "false");
					}   	 
   				}



/**
 * [tJavaRow_3 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tOracleRow_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_3 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class ArchivoInicialStruct implements routines.system.IPersistableRow<ArchivoInicialStruct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return null;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return null;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return null;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return null;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return null;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return null;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return null;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return null;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String TIPO_DE_DOCUMENTO;

				public String getTIPO_DE_DOCUMENTO () {
					return this.TIPO_DE_DOCUMENTO;
				}

				public Boolean TIPO_DE_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TIPO_DE_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer TIPO_DE_DOCUMENTOLength(){
				    return null;
				}
				public Integer TIPO_DE_DOCUMENTOPrecision(){
				    return null;
				}
				public String TIPO_DE_DOCUMENTODefault(){
				
					return null;
				
				}
				public String TIPO_DE_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String TIPO_DE_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String TIPO_DE_DOCUMENTOOriginalDbColumnName(){
				
					return "TIPO_DE_DOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PAIS_EXP_DOCUMENTO;

				public String getPAIS_EXP_DOCUMENTO () {
					return this.PAIS_EXP_DOCUMENTO;
				}

				public Boolean PAIS_EXP_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean PAIS_EXP_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer PAIS_EXP_DOCUMENTOLength(){
				    return null;
				}
				public Integer PAIS_EXP_DOCUMENTOPrecision(){
				    return null;
				}
				public String PAIS_EXP_DOCUMENTODefault(){
				
					return null;
				
				}
				public String PAIS_EXP_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String PAIS_EXP_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String PAIS_EXP_DOCUMENTOOriginalDbColumnName(){
				
					return "PAIS_EXP_DOCUMENTO";
				
				}

				
			    public String DEPTO_EXP_DOCUMENTO;

				public String getDEPTO_EXP_DOCUMENTO () {
					return this.DEPTO_EXP_DOCUMENTO;
				}

				public Boolean DEPTO_EXP_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DEPTO_EXP_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DEPTO_EXP_DOCUMENTOLength(){
				    return null;
				}
				public Integer DEPTO_EXP_DOCUMENTOPrecision(){
				    return null;
				}
				public String DEPTO_EXP_DOCUMENTODefault(){
				
					return null;
				
				}
				public String DEPTO_EXP_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DEPTO_EXP_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DEPTO_EXP_DOCUMENTOOriginalDbColumnName(){
				
					return "DEPTO_EXP_DOCUMENTO";
				
				}

				
			    public String MUNICIPIO_EXP_DOCUMENTO;

				public String getMUNICIPIO_EXP_DOCUMENTO () {
					return this.MUNICIPIO_EXP_DOCUMENTO;
				}

				public Boolean MUNICIPIO_EXP_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean MUNICIPIO_EXP_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer MUNICIPIO_EXP_DOCUMENTOLength(){
				    return null;
				}
				public Integer MUNICIPIO_EXP_DOCUMENTOPrecision(){
				    return null;
				}
				public String MUNICIPIO_EXP_DOCUMENTODefault(){
				
					return null;
				
				}
				public String MUNICIPIO_EXP_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String MUNICIPIO_EXP_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String MUNICIPIO_EXP_DOCUMENTOOriginalDbColumnName(){
				
					return "MUNICIPIO_EXP_DOCUMENTO";
				
				}

				
			    public String FECHA_EXPEDICION_DOCUMENTO;

				public String getFECHA_EXPEDICION_DOCUMENTO () {
					return this.FECHA_EXPEDICION_DOCUMENTO;
				}

				public Boolean FECHA_EXPEDICION_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_EXPEDICION_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer FECHA_EXPEDICION_DOCUMENTOLength(){
				    return null;
				}
				public Integer FECHA_EXPEDICION_DOCUMENTOPrecision(){
				    return null;
				}
				public String FECHA_EXPEDICION_DOCUMENTODefault(){
				
					return null;
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOOriginalDbColumnName(){
				
					return "FECHA_EXPEDICION_DOCUMENTO";
				
				}

				
			    public String FECHA_NACIMIENTO;

				public String getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return null;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return null;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public String PAIS_NACIMIENTO;

				public String getPAIS_NACIMIENTO () {
					return this.PAIS_NACIMIENTO;
				}

				public Boolean PAIS_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean PAIS_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer PAIS_NACIMIENTOLength(){
				    return null;
				}
				public Integer PAIS_NACIMIENTOPrecision(){
				    return null;
				}
				public String PAIS_NACIMIENTODefault(){
				
					return null;
				
				}
				public String PAIS_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String PAIS_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String PAIS_NACIMIENTOOriginalDbColumnName(){
				
					return "PAIS_NACIMIENTO";
				
				}

				
			    public String DEPARTAMENTO_NACIMIENTO;

				public String getDEPARTAMENTO_NACIMIENTO () {
					return this.DEPARTAMENTO_NACIMIENTO;
				}

				public Boolean DEPARTAMENTO_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean DEPARTAMENTO_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer DEPARTAMENTO_NACIMIENTOLength(){
				    return null;
				}
				public Integer DEPARTAMENTO_NACIMIENTOPrecision(){
				    return null;
				}
				public String DEPARTAMENTO_NACIMIENTODefault(){
				
					return null;
				
				}
				public String DEPARTAMENTO_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String DEPARTAMENTO_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String DEPARTAMENTO_NACIMIENTOOriginalDbColumnName(){
				
					return "DEPARTAMENTO_NACIMIENTO";
				
				}

				
			    public String MUNICIPIO_NACIMIENTO;

				public String getMUNICIPIO_NACIMIENTO () {
					return this.MUNICIPIO_NACIMIENTO;
				}

				public Boolean MUNICIPIO_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean MUNICIPIO_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer MUNICIPIO_NACIMIENTOLength(){
				    return null;
				}
				public Integer MUNICIPIO_NACIMIENTOPrecision(){
				    return null;
				}
				public String MUNICIPIO_NACIMIENTODefault(){
				
					return null;
				
				}
				public String MUNICIPIO_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String MUNICIPIO_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String MUNICIPIO_NACIMIENTOOriginalDbColumnName(){
				
					return "MUNICIPIO_NACIMIENTO";
				
				}

				
			    public String SEXO;

				public String getSEXO () {
					return this.SEXO;
				}

				public Boolean SEXOIsNullable(){
				    return true;
				}
				public Boolean SEXOIsKey(){
				    return false;
				}
				public Integer SEXOLength(){
				    return null;
				}
				public Integer SEXOPrecision(){
				    return null;
				}
				public String SEXODefault(){
				
					return null;
				
				}
				public String SEXOComment(){
				
				    return "";
				
				}
				public String SEXOPattern(){
				
					return "";
				
				}
				public String SEXOOriginalDbColumnName(){
				
					return "SEXO";
				
				}

				
			    public String DIRECCION;

				public String getDIRECCION () {
					return this.DIRECCION;
				}

				public Boolean DIRECCIONIsNullable(){
				    return true;
				}
				public Boolean DIRECCIONIsKey(){
				    return false;
				}
				public Integer DIRECCIONLength(){
				    return null;
				}
				public Integer DIRECCIONPrecision(){
				    return null;
				}
				public String DIRECCIONDefault(){
				
					return null;
				
				}
				public String DIRECCIONComment(){
				
				    return "";
				
				}
				public String DIRECCIONPattern(){
				
					return "";
				
				}
				public String DIRECCIONOriginalDbColumnName(){
				
					return "DIRECCION";
				
				}

				
			    public String TELEFONO;

				public String getTELEFONO () {
					return this.TELEFONO;
				}

				public Boolean TELEFONOIsNullable(){
				    return true;
				}
				public Boolean TELEFONOIsKey(){
				    return false;
				}
				public Integer TELEFONOLength(){
				    return null;
				}
				public Integer TELEFONOPrecision(){
				    return null;
				}
				public String TELEFONODefault(){
				
					return null;
				
				}
				public String TELEFONOComment(){
				
				    return "";
				
				}
				public String TELEFONOPattern(){
				
					return "";
				
				}
				public String TELEFONOOriginalDbColumnName(){
				
					return "TELEFONO";
				
				}

				
			    public String PAIS_RESIDENCIA;

				public String getPAIS_RESIDENCIA () {
					return this.PAIS_RESIDENCIA;
				}

				public Boolean PAIS_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean PAIS_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer PAIS_RESIDENCIALength(){
				    return null;
				}
				public Integer PAIS_RESIDENCIAPrecision(){
				    return null;
				}
				public String PAIS_RESIDENCIADefault(){
				
					return null;
				
				}
				public String PAIS_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String PAIS_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String PAIS_RESIDENCIAOriginalDbColumnName(){
				
					return "PAIS_RESIDENCIA";
				
				}

				
			    public String DEPARTAMENTO_RESIDENCIA;

				public String getDEPARTAMENTO_RESIDENCIA () {
					return this.DEPARTAMENTO_RESIDENCIA;
				}

				public Boolean DEPARTAMENTO_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean DEPARTAMENTO_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer DEPARTAMENTO_RESIDENCIALength(){
				    return null;
				}
				public Integer DEPARTAMENTO_RESIDENCIAPrecision(){
				    return null;
				}
				public String DEPARTAMENTO_RESIDENCIADefault(){
				
					return null;
				
				}
				public String DEPARTAMENTO_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String DEPARTAMENTO_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String DEPARTAMENTO_RESIDENCIAOriginalDbColumnName(){
				
					return "DEPARTAMENTO_RESIDENCIA";
				
				}

				
			    public String MUNICIPIO_RESIDENCIA;

				public String getMUNICIPIO_RESIDENCIA () {
					return this.MUNICIPIO_RESIDENCIA;
				}

				public Boolean MUNICIPIO_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean MUNICIPIO_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer MUNICIPIO_RESIDENCIALength(){
				    return null;
				}
				public Integer MUNICIPIO_RESIDENCIAPrecision(){
				    return null;
				}
				public String MUNICIPIO_RESIDENCIADefault(){
				
					return null;
				
				}
				public String MUNICIPIO_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String MUNICIPIO_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String MUNICIPIO_RESIDENCIAOriginalDbColumnName(){
				
					return "MUNICIPIO_RESIDENCIA";
				
				}

				
			    public String LOCALIDAD_RESIDENCIA;

				public String getLOCALIDAD_RESIDENCIA () {
					return this.LOCALIDAD_RESIDENCIA;
				}

				public Boolean LOCALIDAD_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean LOCALIDAD_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer LOCALIDAD_RESIDENCIALength(){
				    return null;
				}
				public Integer LOCALIDAD_RESIDENCIAPrecision(){
				    return null;
				}
				public String LOCALIDAD_RESIDENCIADefault(){
				
					return null;
				
				}
				public String LOCALIDAD_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String LOCALIDAD_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String LOCALIDAD_RESIDENCIAOriginalDbColumnName(){
				
					return "LOCALIDAD_RESIDENCIA";
				
				}

				
			    public String GRUPO_SANGUINEO;

				public String getGRUPO_SANGUINEO () {
					return this.GRUPO_SANGUINEO;
				}

				public Boolean GRUPO_SANGUINEOIsNullable(){
				    return true;
				}
				public Boolean GRUPO_SANGUINEOIsKey(){
				    return false;
				}
				public Integer GRUPO_SANGUINEOLength(){
				    return null;
				}
				public Integer GRUPO_SANGUINEOPrecision(){
				    return null;
				}
				public String GRUPO_SANGUINEODefault(){
				
					return null;
				
				}
				public String GRUPO_SANGUINEOComment(){
				
				    return "";
				
				}
				public String GRUPO_SANGUINEOPattern(){
				
					return "";
				
				}
				public String GRUPO_SANGUINEOOriginalDbColumnName(){
				
					return "GRUPO_SANGUINEO";
				
				}

				
			    public String FACTOR_RH;

				public String getFACTOR_RH () {
					return this.FACTOR_RH;
				}

				public Boolean FACTOR_RHIsNullable(){
				    return true;
				}
				public Boolean FACTOR_RHIsKey(){
				    return false;
				}
				public Integer FACTOR_RHLength(){
				    return null;
				}
				public Integer FACTOR_RHPrecision(){
				    return null;
				}
				public String FACTOR_RHDefault(){
				
					return null;
				
				}
				public String FACTOR_RHComment(){
				
				    return "";
				
				}
				public String FACTOR_RHPattern(){
				
					return "";
				
				}
				public String FACTOR_RHOriginalDbColumnName(){
				
					return "FACTOR_RH";
				
				}

				
			    public String OCUPACION;

				public String getOCUPACION () {
					return this.OCUPACION;
				}

				public Boolean OCUPACIONIsNullable(){
				    return true;
				}
				public Boolean OCUPACIONIsKey(){
				    return false;
				}
				public Integer OCUPACIONLength(){
				    return null;
				}
				public Integer OCUPACIONPrecision(){
				    return null;
				}
				public String OCUPACIONDefault(){
				
					return null;
				
				}
				public String OCUPACIONComment(){
				
				    return "";
				
				}
				public String OCUPACIONPattern(){
				
					return "";
				
				}
				public String OCUPACIONOriginalDbColumnName(){
				
					return "OCUPACION";
				
				}

				
			    public String ESTATURA;

				public String getESTATURA () {
					return this.ESTATURA;
				}

				public Boolean ESTATURAIsNullable(){
				    return true;
				}
				public Boolean ESTATURAIsKey(){
				    return false;
				}
				public Integer ESTATURALength(){
				    return null;
				}
				public Integer ESTATURAPrecision(){
				    return null;
				}
				public String ESTATURADefault(){
				
					return null;
				
				}
				public String ESTATURAComment(){
				
				    return "";
				
				}
				public String ESTATURAPattern(){
				
					return "";
				
				}
				public String ESTATURAOriginalDbColumnName(){
				
					return "ESTATURA";
				
				}

				
			    public String GRUPO_ETNICO;

				public String getGRUPO_ETNICO () {
					return this.GRUPO_ETNICO;
				}

				public Boolean GRUPO_ETNICOIsNullable(){
				    return true;
				}
				public Boolean GRUPO_ETNICOIsKey(){
				    return false;
				}
				public Integer GRUPO_ETNICOLength(){
				    return null;
				}
				public Integer GRUPO_ETNICOPrecision(){
				    return null;
				}
				public String GRUPO_ETNICODefault(){
				
					return null;
				
				}
				public String GRUPO_ETNICOComment(){
				
				    return "";
				
				}
				public String GRUPO_ETNICOPattern(){
				
					return "";
				
				}
				public String GRUPO_ETNICOOriginalDbColumnName(){
				
					return "GRUPO_ETNICO";
				
				}

				
			    public String NSOCIOECONOMICO;

				public String getNSOCIOECONOMICO () {
					return this.NSOCIOECONOMICO;
				}

				public Boolean NSOCIOECONOMICOIsNullable(){
				    return true;
				}
				public Boolean NSOCIOECONOMICOIsKey(){
				    return false;
				}
				public Integer NSOCIOECONOMICOLength(){
				    return null;
				}
				public Integer NSOCIOECONOMICOPrecision(){
				    return null;
				}
				public String NSOCIOECONOMICODefault(){
				
					return null;
				
				}
				public String NSOCIOECONOMICOComment(){
				
				    return "";
				
				}
				public String NSOCIOECONOMICOPattern(){
				
					return "";
				
				}
				public String NSOCIOECONOMICOOriginalDbColumnName(){
				
					return "NSOCIOECONOMICO";
				
				}

				
			    public String TVIVIENDA;

				public String getTVIVIENDA () {
					return this.TVIVIENDA;
				}

				public Boolean TVIVIENDAIsNullable(){
				    return true;
				}
				public Boolean TVIVIENDAIsKey(){
				    return false;
				}
				public Integer TVIVIENDALength(){
				    return null;
				}
				public Integer TVIVIENDAPrecision(){
				    return null;
				}
				public String TVIVIENDADefault(){
				
					return null;
				
				}
				public String TVIVIENDAComment(){
				
				    return "";
				
				}
				public String TVIVIENDAPattern(){
				
					return "";
				
				}
				public String TVIVIENDAOriginalDbColumnName(){
				
					return "TVIVIENDA";
				
				}

				
			    public String NEDUCATIVOS;

				public String getNEDUCATIVOS () {
					return this.NEDUCATIVOS;
				}

				public Boolean NEDUCATIVOSIsNullable(){
				    return true;
				}
				public Boolean NEDUCATIVOSIsKey(){
				    return false;
				}
				public Integer NEDUCATIVOSLength(){
				    return null;
				}
				public Integer NEDUCATIVOSPrecision(){
				    return null;
				}
				public String NEDUCATIVOSDefault(){
				
					return null;
				
				}
				public String NEDUCATIVOSComment(){
				
				    return "";
				
				}
				public String NEDUCATIVOSPattern(){
				
					return "";
				
				}
				public String NEDUCATIVOSOriginalDbColumnName(){
				
					return "NEDUCATIVOS";
				
				}

				
			    public String CODIGO_ESTABLECIMIENTO;

				public String getCODIGO_ESTABLECIMIENTO () {
					return this.CODIGO_ESTABLECIMIENTO;
				}

				public Boolean CODIGO_ESTABLECIMIENTOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_ESTABLECIMIENTOIsKey(){
				    return false;
				}
				public Integer CODIGO_ESTABLECIMIENTOLength(){
				    return null;
				}
				public Integer CODIGO_ESTABLECIMIENTOPrecision(){
				    return null;
				}
				public String CODIGO_ESTABLECIMIENTODefault(){
				
					return null;
				
				}
				public String CODIGO_ESTABLECIMIENTOComment(){
				
				    return "";
				
				}
				public String CODIGO_ESTABLECIMIENTOPattern(){
				
					return "";
				
				}
				public String CODIGO_ESTABLECIMIENTOOriginalDbColumnName(){
				
					return "CODIGO_ESTABLECIMIENTO";
				
				}

				
			    public String ESTABLECIMIENTO_ADSCRITO;

				public String getESTABLECIMIENTO_ADSCRITO () {
					return this.ESTABLECIMIENTO_ADSCRITO;
				}

				public Boolean ESTABLECIMIENTO_ADSCRITOIsNullable(){
				    return true;
				}
				public Boolean ESTABLECIMIENTO_ADSCRITOIsKey(){
				    return false;
				}
				public Integer ESTABLECIMIENTO_ADSCRITOLength(){
				    return null;
				}
				public Integer ESTABLECIMIENTO_ADSCRITOPrecision(){
				    return null;
				}
				public String ESTABLECIMIENTO_ADSCRITODefault(){
				
					return null;
				
				}
				public String ESTABLECIMIENTO_ADSCRITOComment(){
				
				    return "";
				
				}
				public String ESTABLECIMIENTO_ADSCRITOPattern(){
				
					return "";
				
				}
				public String ESTABLECIMIENTO_ADSCRITOOriginalDbColumnName(){
				
					return "ESTABLECIMIENTO_ADSCRITO";
				
				}

				
			    public String ENTIDAD_APORTANTE;

				public String getENTIDAD_APORTANTE () {
					return this.ENTIDAD_APORTANTE;
				}

				public Boolean ENTIDAD_APORTANTEIsNullable(){
				    return true;
				}
				public Boolean ENTIDAD_APORTANTEIsKey(){
				    return false;
				}
				public Integer ENTIDAD_APORTANTELength(){
				    return null;
				}
				public Integer ENTIDAD_APORTANTEPrecision(){
				    return null;
				}
				public String ENTIDAD_APORTANTEDefault(){
				
					return null;
				
				}
				public String ENTIDAD_APORTANTEComment(){
				
				    return "";
				
				}
				public String ENTIDAD_APORTANTEPattern(){
				
					return "";
				
				}
				public String ENTIDAD_APORTANTEOriginalDbColumnName(){
				
					return "ENTIDAD_APORTANTE";
				
				}

				
			    public String CODIGO_GRDMILITAR;

				public String getCODIGO_GRDMILITAR () {
					return this.CODIGO_GRDMILITAR;
				}

				public Boolean CODIGO_GRDMILITARIsNullable(){
				    return true;
				}
				public Boolean CODIGO_GRDMILITARIsKey(){
				    return false;
				}
				public Integer CODIGO_GRDMILITARLength(){
				    return null;
				}
				public Integer CODIGO_GRDMILITARPrecision(){
				    return null;
				}
				public String CODIGO_GRDMILITARDefault(){
				
					return null;
				
				}
				public String CODIGO_GRDMILITARComment(){
				
				    return "";
				
				}
				public String CODIGO_GRDMILITARPattern(){
				
					return "";
				
				}
				public String CODIGO_GRDMILITAROriginalDbColumnName(){
				
					return "CODIGO_GRDMILITAR";
				
				}

				
			    public String SIGLA_GRDMILITAR;

				public String getSIGLA_GRDMILITAR () {
					return this.SIGLA_GRDMILITAR;
				}

				public Boolean SIGLA_GRDMILITARIsNullable(){
				    return true;
				}
				public Boolean SIGLA_GRDMILITARIsKey(){
				    return false;
				}
				public Integer SIGLA_GRDMILITARLength(){
				    return null;
				}
				public Integer SIGLA_GRDMILITARPrecision(){
				    return null;
				}
				public String SIGLA_GRDMILITARDefault(){
				
					return null;
				
				}
				public String SIGLA_GRDMILITARComment(){
				
				    return "";
				
				}
				public String SIGLA_GRDMILITARPattern(){
				
					return "";
				
				}
				public String SIGLA_GRDMILITAROriginalDbColumnName(){
				
					return "SIGLA_GRDMILITAR";
				
				}

				
			    public String FUERZA_MILITAR;

				public String getFUERZA_MILITAR () {
					return this.FUERZA_MILITAR;
				}

				public Boolean FUERZA_MILITARIsNullable(){
				    return true;
				}
				public Boolean FUERZA_MILITARIsKey(){
				    return false;
				}
				public Integer FUERZA_MILITARLength(){
				    return null;
				}
				public Integer FUERZA_MILITARPrecision(){
				    return null;
				}
				public String FUERZA_MILITARDefault(){
				
					return null;
				
				}
				public String FUERZA_MILITARComment(){
				
				    return "";
				
				}
				public String FUERZA_MILITARPattern(){
				
					return "";
				
				}
				public String FUERZA_MILITAROriginalDbColumnName(){
				
					return "FUERZA_MILITAR";
				
				}

				
			    public String CODIGO_UMILITAR;

				public String getCODIGO_UMILITAR () {
					return this.CODIGO_UMILITAR;
				}

				public Boolean CODIGO_UMILITARIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UMILITARIsKey(){
				    return false;
				}
				public Integer CODIGO_UMILITARLength(){
				    return null;
				}
				public Integer CODIGO_UMILITARPrecision(){
				    return null;
				}
				public String CODIGO_UMILITARDefault(){
				
					return null;
				
				}
				public String CODIGO_UMILITARComment(){
				
				    return "";
				
				}
				public String CODIGO_UMILITARPattern(){
				
					return "";
				
				}
				public String CODIGO_UMILITAROriginalDbColumnName(){
				
					return "CODIGO_UMILITAR";
				
				}

				
			    public String UNIDAD_MILITAR;

				public String getUNIDAD_MILITAR () {
					return this.UNIDAD_MILITAR;
				}

				public Boolean UNIDAD_MILITARIsNullable(){
				    return true;
				}
				public Boolean UNIDAD_MILITARIsKey(){
				    return false;
				}
				public Integer UNIDAD_MILITARLength(){
				    return null;
				}
				public Integer UNIDAD_MILITARPrecision(){
				    return null;
				}
				public String UNIDAD_MILITARDefault(){
				
					return null;
				
				}
				public String UNIDAD_MILITARComment(){
				
				    return "";
				
				}
				public String UNIDAD_MILITARPattern(){
				
					return "";
				
				}
				public String UNIDAD_MILITAROriginalDbColumnName(){
				
					return "UNIDAD_MILITAR";
				
				}

				
			    public String TIPO_DE_VINCULACION;

				public String getTIPO_DE_VINCULACION () {
					return this.TIPO_DE_VINCULACION;
				}

				public Boolean TIPO_DE_VINCULACIONIsNullable(){
				    return true;
				}
				public Boolean TIPO_DE_VINCULACIONIsKey(){
				    return false;
				}
				public Integer TIPO_DE_VINCULACIONLength(){
				    return null;
				}
				public Integer TIPO_DE_VINCULACIONPrecision(){
				    return null;
				}
				public String TIPO_DE_VINCULACIONDefault(){
				
					return null;
				
				}
				public String TIPO_DE_VINCULACIONComment(){
				
				    return "";
				
				}
				public String TIPO_DE_VINCULACIONPattern(){
				
					return "";
				
				}
				public String TIPO_DE_VINCULACIONOriginalDbColumnName(){
				
					return "TIPO_DE_VINCULACION";
				
				}

				
			    public String ESTADO_AFILIACION;

				public String getESTADO_AFILIACION () {
					return this.ESTADO_AFILIACION;
				}

				public Boolean ESTADO_AFILIACIONIsNullable(){
				    return true;
				}
				public Boolean ESTADO_AFILIACIONIsKey(){
				    return false;
				}
				public Integer ESTADO_AFILIACIONLength(){
				    return null;
				}
				public Integer ESTADO_AFILIACIONPrecision(){
				    return null;
				}
				public String ESTADO_AFILIACIONDefault(){
				
					return null;
				
				}
				public String ESTADO_AFILIACIONComment(){
				
				    return "";
				
				}
				public String ESTADO_AFILIACIONPattern(){
				
					return "";
				
				}
				public String ESTADO_AFILIACIONOriginalDbColumnName(){
				
					return "ESTADO_AFILIACION";
				
				}

				
			    public String FECHA_FIN_AFILIACION;

				public String getFECHA_FIN_AFILIACION () {
					return this.FECHA_FIN_AFILIACION;
				}

				public Boolean FECHA_FIN_AFILIACIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_FIN_AFILIACIONIsKey(){
				    return false;
				}
				public Integer FECHA_FIN_AFILIACIONLength(){
				    return null;
				}
				public Integer FECHA_FIN_AFILIACIONPrecision(){
				    return null;
				}
				public String FECHA_FIN_AFILIACIONDefault(){
				
					return null;
				
				}
				public String FECHA_FIN_AFILIACIONComment(){
				
				    return "";
				
				}
				public String FECHA_FIN_AFILIACIONPattern(){
				
					return "";
				
				}
				public String FECHA_FIN_AFILIACIONOriginalDbColumnName(){
				
					return "FECHA_FIN_AFILIACION";
				
				}

				
			    public String FECHA_VINCULACION;

				public String getFECHA_VINCULACION () {
					return this.FECHA_VINCULACION;
				}

				public Boolean FECHA_VINCULACIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_VINCULACIONIsKey(){
				    return false;
				}
				public Integer FECHA_VINCULACIONLength(){
				    return null;
				}
				public Integer FECHA_VINCULACIONPrecision(){
				    return null;
				}
				public String FECHA_VINCULACIONDefault(){
				
					return null;
				
				}
				public String FECHA_VINCULACIONComment(){
				
				    return "";
				
				}
				public String FECHA_VINCULACIONPattern(){
				
					return "";
				
				}
				public String FECHA_VINCULACIONOriginalDbColumnName(){
				
					return "FECHA_VINCULACION";
				
				}

				
			    public BigDecimal ID_UNICO_PERSONA;

				public BigDecimal getID_UNICO_PERSONA () {
					return this.ID_UNICO_PERSONA;
				}

				public Boolean ID_UNICO_PERSONAIsNullable(){
				    return true;
				}
				public Boolean ID_UNICO_PERSONAIsKey(){
				    return false;
				}
				public Integer ID_UNICO_PERSONALength(){
				    return null;
				}
				public Integer ID_UNICO_PERSONAPrecision(){
				    return null;
				}
				public String ID_UNICO_PERSONADefault(){
				
					return "";
				
				}
				public String ID_UNICO_PERSONAComment(){
				
				    return "";
				
				}
				public String ID_UNICO_PERSONAPattern(){
				
					return "";
				
				}
				public String ID_UNICO_PERSONAOriginalDbColumnName(){
				
					return "ID_UNICO_PERSONA";
				
				}

				
			    public BigDecimal ID_UNICO_AFILIADO;

				public BigDecimal getID_UNICO_AFILIADO () {
					return this.ID_UNICO_AFILIADO;
				}

				public Boolean ID_UNICO_AFILIADOIsNullable(){
				    return true;
				}
				public Boolean ID_UNICO_AFILIADOIsKey(){
				    return false;
				}
				public Integer ID_UNICO_AFILIADOLength(){
				    return null;
				}
				public Integer ID_UNICO_AFILIADOPrecision(){
				    return null;
				}
				public String ID_UNICO_AFILIADODefault(){
				
					return "";
				
				}
				public String ID_UNICO_AFILIADOComment(){
				
				    return "";
				
				}
				public String ID_UNICO_AFILIADOPattern(){
				
					return "";
				
				}
				public String ID_UNICO_AFILIADOOriginalDbColumnName(){
				
					return "ID_UNICO_AFILIADO";
				
				}

				
			    public String TIPO_AFILIADO;

				public String getTIPO_AFILIADO () {
					return this.TIPO_AFILIADO;
				}

				public Boolean TIPO_AFILIADOIsNullable(){
				    return true;
				}
				public Boolean TIPO_AFILIADOIsKey(){
				    return false;
				}
				public Integer TIPO_AFILIADOLength(){
				    return null;
				}
				public Integer TIPO_AFILIADOPrecision(){
				    return null;
				}
				public String TIPO_AFILIADODefault(){
				
					return null;
				
				}
				public String TIPO_AFILIADOComment(){
				
				    return "";
				
				}
				public String TIPO_AFILIADOPattern(){
				
					return "";
				
				}
				public String TIPO_AFILIADOOriginalDbColumnName(){
				
					return "TIPO_AFILIADO";
				
				}

				
			    public String ESTADO_ENTIDAD;

				public String getESTADO_ENTIDAD () {
					return this.ESTADO_ENTIDAD;
				}

				public Boolean ESTADO_ENTIDADIsNullable(){
				    return true;
				}
				public Boolean ESTADO_ENTIDADIsKey(){
				    return false;
				}
				public Integer ESTADO_ENTIDADLength(){
				    return null;
				}
				public Integer ESTADO_ENTIDADPrecision(){
				    return null;
				}
				public String ESTADO_ENTIDADDefault(){
				
					return null;
				
				}
				public String ESTADO_ENTIDADComment(){
				
				    return "";
				
				}
				public String ESTADO_ENTIDADPattern(){
				
					return "";
				
				}
				public String ESTADO_ENTIDADOriginalDbColumnName(){
				
					return "ESTADO_ENTIDAD";
				
				}

				
			    public String ENTIDAD_PRINCIPAL;

				public String getENTIDAD_PRINCIPAL () {
					return this.ENTIDAD_PRINCIPAL;
				}

				public Boolean ENTIDAD_PRINCIPALIsNullable(){
				    return true;
				}
				public Boolean ENTIDAD_PRINCIPALIsKey(){
				    return false;
				}
				public Integer ENTIDAD_PRINCIPALLength(){
				    return null;
				}
				public Integer ENTIDAD_PRINCIPALPrecision(){
				    return null;
				}
				public String ENTIDAD_PRINCIPALDefault(){
				
					return null;
				
				}
				public String ENTIDAD_PRINCIPALComment(){
				
				    return "";
				
				}
				public String ENTIDAD_PRINCIPALPattern(){
				
					return "";
				
				}
				public String ENTIDAD_PRINCIPALOriginalDbColumnName(){
				
					return "ENTIDAD_PRINCIPAL";
				
				}

				
			    public String SIGLA_REGIMEN;

				public String getSIGLA_REGIMEN () {
					return this.SIGLA_REGIMEN;
				}

				public Boolean SIGLA_REGIMENIsNullable(){
				    return true;
				}
				public Boolean SIGLA_REGIMENIsKey(){
				    return false;
				}
				public Integer SIGLA_REGIMENLength(){
				    return null;
				}
				public Integer SIGLA_REGIMENPrecision(){
				    return null;
				}
				public String SIGLA_REGIMENDefault(){
				
					return null;
				
				}
				public String SIGLA_REGIMENComment(){
				
				    return "";
				
				}
				public String SIGLA_REGIMENPattern(){
				
					return "";
				
				}
				public String SIGLA_REGIMENOriginalDbColumnName(){
				
					return "SIGLA_REGIMEN";
				
				}

				
			    public BigDecimal ID_UNICO_ENTIDAD;

				public BigDecimal getID_UNICO_ENTIDAD () {
					return this.ID_UNICO_ENTIDAD;
				}

				public Boolean ID_UNICO_ENTIDADIsNullable(){
				    return true;
				}
				public Boolean ID_UNICO_ENTIDADIsKey(){
				    return false;
				}
				public Integer ID_UNICO_ENTIDADLength(){
				    return null;
				}
				public Integer ID_UNICO_ENTIDADPrecision(){
				    return null;
				}
				public String ID_UNICO_ENTIDADDefault(){
				
					return null;
				
				}
				public String ID_UNICO_ENTIDADComment(){
				
				    return "";
				
				}
				public String ID_UNICO_ENTIDADPattern(){
				
					return "";
				
				}
				public String ID_UNICO_ENTIDADOriginalDbColumnName(){
				
					return "ID_UNICO_ENTIDAD";
				
				}

				
			    public String CORREO_ELECTRONICO;

				public String getCORREO_ELECTRONICO () {
					return this.CORREO_ELECTRONICO;
				}

				public Boolean CORREO_ELECTRONICOIsNullable(){
				    return true;
				}
				public Boolean CORREO_ELECTRONICOIsKey(){
				    return false;
				}
				public Integer CORREO_ELECTRONICOLength(){
				    return null;
				}
				public Integer CORREO_ELECTRONICOPrecision(){
				    return null;
				}
				public String CORREO_ELECTRONICODefault(){
				
					return null;
				
				}
				public String CORREO_ELECTRONICOComment(){
				
				    return "";
				
				}
				public String CORREO_ELECTRONICOPattern(){
				
					return "";
				
				}
				public String CORREO_ELECTRONICOOriginalDbColumnName(){
				
					return "CORREO_ELECTRONICO";
				
				}

				
			    public String CELULAR;

				public String getCELULAR () {
					return this.CELULAR;
				}

				public Boolean CELULARIsNullable(){
				    return true;
				}
				public Boolean CELULARIsKey(){
				    return false;
				}
				public Integer CELULARLength(){
				    return null;
				}
				public Integer CELULARPrecision(){
				    return null;
				}
				public String CELULARDefault(){
				
					return null;
				
				}
				public String CELULARComment(){
				
				    return "";
				
				}
				public String CELULARPattern(){
				
					return "";
				
				}
				public String CELULAROriginalDbColumnName(){
				
					return "CELULAR";
				
				}

				
			    public String FECHA_DEFUNCION;

				public String getFECHA_DEFUNCION () {
					return this.FECHA_DEFUNCION;
				}

				public Boolean FECHA_DEFUNCIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_DEFUNCIONIsKey(){
				    return false;
				}
				public Integer FECHA_DEFUNCIONLength(){
				    return null;
				}
				public Integer FECHA_DEFUNCIONPrecision(){
				    return null;
				}
				public String FECHA_DEFUNCIONDefault(){
				
					return null;
				
				}
				public String FECHA_DEFUNCIONComment(){
				
				    return "";
				
				}
				public String FECHA_DEFUNCIONPattern(){
				
					return "";
				
				}
				public String FECHA_DEFUNCIONOriginalDbColumnName(){
				
					return "FECHA_DEFUNCION";
				
				}

				
			    public String OBSERVACIONES;

				public String getOBSERVACIONES () {
					return this.OBSERVACIONES;
				}

				public Boolean OBSERVACIONESIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONESIsKey(){
				    return false;
				}
				public Integer OBSERVACIONESLength(){
				    return null;
				}
				public Integer OBSERVACIONESPrecision(){
				    return null;
				}
				public String OBSERVACIONESDefault(){
				
					return null;
				
				}
				public String OBSERVACIONESComment(){
				
				    return "";
				
				}
				public String OBSERVACIONESPattern(){
				
					return "";
				
				}
				public String OBSERVACIONESOriginalDbColumnName(){
				
					return "OBSERVACIONES";
				
				}

				
			    public String PLANAFILIACION;

				public String getPLANAFILIACION () {
					return this.PLANAFILIACION;
				}

				public Boolean PLANAFILIACIONIsNullable(){
				    return true;
				}
				public Boolean PLANAFILIACIONIsKey(){
				    return false;
				}
				public Integer PLANAFILIACIONLength(){
				    return null;
				}
				public Integer PLANAFILIACIONPrecision(){
				    return null;
				}
				public String PLANAFILIACIONDefault(){
				
					return null;
				
				}
				public String PLANAFILIACIONComment(){
				
				    return "";
				
				}
				public String PLANAFILIACIONPattern(){
				
					return "";
				
				}
				public String PLANAFILIACIONOriginalDbColumnName(){
				
					return "PLANAFILIACION";
				
				}

				
			    public BigDecimal ID_BDUA;

				public BigDecimal getID_BDUA () {
					return this.ID_BDUA;
				}

				public Boolean ID_BDUAIsNullable(){
				    return true;
				}
				public Boolean ID_BDUAIsKey(){
				    return false;
				}
				public Integer ID_BDUALength(){
				    return null;
				}
				public Integer ID_BDUAPrecision(){
				    return null;
				}
				public String ID_BDUADefault(){
				
					return null;
				
				}
				public String ID_BDUAComment(){
				
				    return "";
				
				}
				public String ID_BDUAPattern(){
				
					return "";
				
				}
				public String ID_BDUAOriginalDbColumnName(){
				
					return "ID_BDUA";
				
				}

				
			    public String MOTIVO_CAMBIO_ESTADO;

				public String getMOTIVO_CAMBIO_ESTADO () {
					return this.MOTIVO_CAMBIO_ESTADO;
				}

				public Boolean MOTIVO_CAMBIO_ESTADOIsNullable(){
				    return true;
				}
				public Boolean MOTIVO_CAMBIO_ESTADOIsKey(){
				    return false;
				}
				public Integer MOTIVO_CAMBIO_ESTADOLength(){
				    return null;
				}
				public Integer MOTIVO_CAMBIO_ESTADOPrecision(){
				    return null;
				}
				public String MOTIVO_CAMBIO_ESTADODefault(){
				
					return null;
				
				}
				public String MOTIVO_CAMBIO_ESTADOComment(){
				
				    return "";
				
				}
				public String MOTIVO_CAMBIO_ESTADOPattern(){
				
					return "";
				
				}
				public String MOTIVO_CAMBIO_ESTADOOriginalDbColumnName(){
				
					return "MOTIVO_CAMBIO_ESTADO";
				
				}

				
			    public String MOTIVO_CAMBIO_ESM;

				public String getMOTIVO_CAMBIO_ESM () {
					return this.MOTIVO_CAMBIO_ESM;
				}

				public Boolean MOTIVO_CAMBIO_ESMIsNullable(){
				    return true;
				}
				public Boolean MOTIVO_CAMBIO_ESMIsKey(){
				    return false;
				}
				public Integer MOTIVO_CAMBIO_ESMLength(){
				    return null;
				}
				public Integer MOTIVO_CAMBIO_ESMPrecision(){
				    return null;
				}
				public String MOTIVO_CAMBIO_ESMDefault(){
				
					return null;
				
				}
				public String MOTIVO_CAMBIO_ESMComment(){
				
				    return "";
				
				}
				public String MOTIVO_CAMBIO_ESMPattern(){
				
					return "";
				
				}
				public String MOTIVO_CAMBIO_ESMOriginalDbColumnName(){
				
					return "MOTIVO_CAMBIO_ESM";
				
				}

				
			    public String DISCAPACIDAD;

				public String getDISCAPACIDAD () {
					return this.DISCAPACIDAD;
				}

				public Boolean DISCAPACIDADIsNullable(){
				    return true;
				}
				public Boolean DISCAPACIDADIsKey(){
				    return false;
				}
				public Integer DISCAPACIDADLength(){
				    return null;
				}
				public Integer DISCAPACIDADPrecision(){
				    return null;
				}
				public String DISCAPACIDADDefault(){
				
					return null;
				
				}
				public String DISCAPACIDADComment(){
				
				    return "";
				
				}
				public String DISCAPACIDADPattern(){
				
					return "";
				
				}
				public String DISCAPACIDADOriginalDbColumnName(){
				
					return "DISCAPACIDAD";
				
				}

				
			    public String POBLACION_ESPECIAL;

				public String getPOBLACION_ESPECIAL () {
					return this.POBLACION_ESPECIAL;
				}

				public Boolean POBLACION_ESPECIALIsNullable(){
				    return true;
				}
				public Boolean POBLACION_ESPECIALIsKey(){
				    return false;
				}
				public Integer POBLACION_ESPECIALLength(){
				    return null;
				}
				public Integer POBLACION_ESPECIALPrecision(){
				    return null;
				}
				public String POBLACION_ESPECIALDefault(){
				
					return null;
				
				}
				public String POBLACION_ESPECIALComment(){
				
				    return "";
				
				}
				public String POBLACION_ESPECIALPattern(){
				
					return "";
				
				}
				public String POBLACION_ESPECIALOriginalDbColumnName(){
				
					return "POBLACION_ESPECIAL";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.TIPO_DE_DOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PAIS_EXP_DOCUMENTO = readString(dis);
					
					this.DEPTO_EXP_DOCUMENTO = readString(dis);
					
					this.MUNICIPIO_EXP_DOCUMENTO = readString(dis);
					
					this.FECHA_EXPEDICION_DOCUMENTO = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.PAIS_NACIMIENTO = readString(dis);
					
					this.DEPARTAMENTO_NACIMIENTO = readString(dis);
					
					this.MUNICIPIO_NACIMIENTO = readString(dis);
					
					this.SEXO = readString(dis);
					
					this.DIRECCION = readString(dis);
					
					this.TELEFONO = readString(dis);
					
					this.PAIS_RESIDENCIA = readString(dis);
					
					this.DEPARTAMENTO_RESIDENCIA = readString(dis);
					
					this.MUNICIPIO_RESIDENCIA = readString(dis);
					
					this.LOCALIDAD_RESIDENCIA = readString(dis);
					
					this.GRUPO_SANGUINEO = readString(dis);
					
					this.FACTOR_RH = readString(dis);
					
					this.OCUPACION = readString(dis);
					
					this.ESTATURA = readString(dis);
					
					this.GRUPO_ETNICO = readString(dis);
					
					this.NSOCIOECONOMICO = readString(dis);
					
					this.TVIVIENDA = readString(dis);
					
					this.NEDUCATIVOS = readString(dis);
					
					this.CODIGO_ESTABLECIMIENTO = readString(dis);
					
					this.ESTABLECIMIENTO_ADSCRITO = readString(dis);
					
					this.ENTIDAD_APORTANTE = readString(dis);
					
					this.CODIGO_GRDMILITAR = readString(dis);
					
					this.SIGLA_GRDMILITAR = readString(dis);
					
					this.FUERZA_MILITAR = readString(dis);
					
					this.CODIGO_UMILITAR = readString(dis);
					
					this.UNIDAD_MILITAR = readString(dis);
					
					this.TIPO_DE_VINCULACION = readString(dis);
					
					this.ESTADO_AFILIACION = readString(dis);
					
					this.FECHA_FIN_AFILIACION = readString(dis);
					
					this.FECHA_VINCULACION = readString(dis);
					
						this.ID_UNICO_PERSONA = (BigDecimal) dis.readObject();
					
						this.ID_UNICO_AFILIADO = (BigDecimal) dis.readObject();
					
					this.TIPO_AFILIADO = readString(dis);
					
					this.ESTADO_ENTIDAD = readString(dis);
					
					this.ENTIDAD_PRINCIPAL = readString(dis);
					
					this.SIGLA_REGIMEN = readString(dis);
					
						this.ID_UNICO_ENTIDAD = (BigDecimal) dis.readObject();
					
					this.CORREO_ELECTRONICO = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.FECHA_DEFUNCION = readString(dis);
					
					this.OBSERVACIONES = readString(dis);
					
					this.PLANAFILIACION = readString(dis);
					
						this.ID_BDUA = (BigDecimal) dis.readObject();
					
					this.MOTIVO_CAMBIO_ESTADO = readString(dis);
					
					this.MOTIVO_CAMBIO_ESM = readString(dis);
					
					this.DISCAPACIDAD = readString(dis);
					
					this.POBLACION_ESPECIAL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.TIPO_DE_DOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PAIS_EXP_DOCUMENTO = readString(dis);
					
					this.DEPTO_EXP_DOCUMENTO = readString(dis);
					
					this.MUNICIPIO_EXP_DOCUMENTO = readString(dis);
					
					this.FECHA_EXPEDICION_DOCUMENTO = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.PAIS_NACIMIENTO = readString(dis);
					
					this.DEPARTAMENTO_NACIMIENTO = readString(dis);
					
					this.MUNICIPIO_NACIMIENTO = readString(dis);
					
					this.SEXO = readString(dis);
					
					this.DIRECCION = readString(dis);
					
					this.TELEFONO = readString(dis);
					
					this.PAIS_RESIDENCIA = readString(dis);
					
					this.DEPARTAMENTO_RESIDENCIA = readString(dis);
					
					this.MUNICIPIO_RESIDENCIA = readString(dis);
					
					this.LOCALIDAD_RESIDENCIA = readString(dis);
					
					this.GRUPO_SANGUINEO = readString(dis);
					
					this.FACTOR_RH = readString(dis);
					
					this.OCUPACION = readString(dis);
					
					this.ESTATURA = readString(dis);
					
					this.GRUPO_ETNICO = readString(dis);
					
					this.NSOCIOECONOMICO = readString(dis);
					
					this.TVIVIENDA = readString(dis);
					
					this.NEDUCATIVOS = readString(dis);
					
					this.CODIGO_ESTABLECIMIENTO = readString(dis);
					
					this.ESTABLECIMIENTO_ADSCRITO = readString(dis);
					
					this.ENTIDAD_APORTANTE = readString(dis);
					
					this.CODIGO_GRDMILITAR = readString(dis);
					
					this.SIGLA_GRDMILITAR = readString(dis);
					
					this.FUERZA_MILITAR = readString(dis);
					
					this.CODIGO_UMILITAR = readString(dis);
					
					this.UNIDAD_MILITAR = readString(dis);
					
					this.TIPO_DE_VINCULACION = readString(dis);
					
					this.ESTADO_AFILIACION = readString(dis);
					
					this.FECHA_FIN_AFILIACION = readString(dis);
					
					this.FECHA_VINCULACION = readString(dis);
					
						this.ID_UNICO_PERSONA = (BigDecimal) dis.readObject();
					
						this.ID_UNICO_AFILIADO = (BigDecimal) dis.readObject();
					
					this.TIPO_AFILIADO = readString(dis);
					
					this.ESTADO_ENTIDAD = readString(dis);
					
					this.ENTIDAD_PRINCIPAL = readString(dis);
					
					this.SIGLA_REGIMEN = readString(dis);
					
						this.ID_UNICO_ENTIDAD = (BigDecimal) dis.readObject();
					
					this.CORREO_ELECTRONICO = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.FECHA_DEFUNCION = readString(dis);
					
					this.OBSERVACIONES = readString(dis);
					
					this.PLANAFILIACION = readString(dis);
					
						this.ID_BDUA = (BigDecimal) dis.readObject();
					
					this.MOTIVO_CAMBIO_ESTADO = readString(dis);
					
					this.MOTIVO_CAMBIO_ESM = readString(dis);
					
					this.DISCAPACIDAD = readString(dis);
					
					this.POBLACION_ESPECIAL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.TIPO_DE_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PAIS_EXP_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DEPTO_EXP_DOCUMENTO,dos);
					
					// String
				
						writeString(this.MUNICIPIO_EXP_DOCUMENTO,dos);
					
					// String
				
						writeString(this.FECHA_EXPEDICION_DOCUMENTO,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.PAIS_NACIMIENTO,dos);
					
					// String
				
						writeString(this.DEPARTAMENTO_NACIMIENTO,dos);
					
					// String
				
						writeString(this.MUNICIPIO_NACIMIENTO,dos);
					
					// String
				
						writeString(this.SEXO,dos);
					
					// String
				
						writeString(this.DIRECCION,dos);
					
					// String
				
						writeString(this.TELEFONO,dos);
					
					// String
				
						writeString(this.PAIS_RESIDENCIA,dos);
					
					// String
				
						writeString(this.DEPARTAMENTO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.MUNICIPIO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.LOCALIDAD_RESIDENCIA,dos);
					
					// String
				
						writeString(this.GRUPO_SANGUINEO,dos);
					
					// String
				
						writeString(this.FACTOR_RH,dos);
					
					// String
				
						writeString(this.OCUPACION,dos);
					
					// String
				
						writeString(this.ESTATURA,dos);
					
					// String
				
						writeString(this.GRUPO_ETNICO,dos);
					
					// String
				
						writeString(this.NSOCIOECONOMICO,dos);
					
					// String
				
						writeString(this.TVIVIENDA,dos);
					
					// String
				
						writeString(this.NEDUCATIVOS,dos);
					
					// String
				
						writeString(this.CODIGO_ESTABLECIMIENTO,dos);
					
					// String
				
						writeString(this.ESTABLECIMIENTO_ADSCRITO,dos);
					
					// String
				
						writeString(this.ENTIDAD_APORTANTE,dos);
					
					// String
				
						writeString(this.CODIGO_GRDMILITAR,dos);
					
					// String
				
						writeString(this.SIGLA_GRDMILITAR,dos);
					
					// String
				
						writeString(this.FUERZA_MILITAR,dos);
					
					// String
				
						writeString(this.CODIGO_UMILITAR,dos);
					
					// String
				
						writeString(this.UNIDAD_MILITAR,dos);
					
					// String
				
						writeString(this.TIPO_DE_VINCULACION,dos);
					
					// String
				
						writeString(this.ESTADO_AFILIACION,dos);
					
					// String
				
						writeString(this.FECHA_FIN_AFILIACION,dos);
					
					// String
				
						writeString(this.FECHA_VINCULACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ID_UNICO_PERSONA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ID_UNICO_AFILIADO);
					
					// String
				
						writeString(this.TIPO_AFILIADO,dos);
					
					// String
				
						writeString(this.ESTADO_ENTIDAD,dos);
					
					// String
				
						writeString(this.ENTIDAD_PRINCIPAL,dos);
					
					// String
				
						writeString(this.SIGLA_REGIMEN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ID_UNICO_ENTIDAD);
					
					// String
				
						writeString(this.CORREO_ELECTRONICO,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// String
				
						writeString(this.FECHA_DEFUNCION,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// String
				
						writeString(this.PLANAFILIACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ID_BDUA);
					
					// String
				
						writeString(this.MOTIVO_CAMBIO_ESTADO,dos);
					
					// String
				
						writeString(this.MOTIVO_CAMBIO_ESM,dos);
					
					// String
				
						writeString(this.DISCAPACIDAD,dos);
					
					// String
				
						writeString(this.POBLACION_ESPECIAL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.TIPO_DE_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PAIS_EXP_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DEPTO_EXP_DOCUMENTO,dos);
					
					// String
				
						writeString(this.MUNICIPIO_EXP_DOCUMENTO,dos);
					
					// String
				
						writeString(this.FECHA_EXPEDICION_DOCUMENTO,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.PAIS_NACIMIENTO,dos);
					
					// String
				
						writeString(this.DEPARTAMENTO_NACIMIENTO,dos);
					
					// String
				
						writeString(this.MUNICIPIO_NACIMIENTO,dos);
					
					// String
				
						writeString(this.SEXO,dos);
					
					// String
				
						writeString(this.DIRECCION,dos);
					
					// String
				
						writeString(this.TELEFONO,dos);
					
					// String
				
						writeString(this.PAIS_RESIDENCIA,dos);
					
					// String
				
						writeString(this.DEPARTAMENTO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.MUNICIPIO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.LOCALIDAD_RESIDENCIA,dos);
					
					// String
				
						writeString(this.GRUPO_SANGUINEO,dos);
					
					// String
				
						writeString(this.FACTOR_RH,dos);
					
					// String
				
						writeString(this.OCUPACION,dos);
					
					// String
				
						writeString(this.ESTATURA,dos);
					
					// String
				
						writeString(this.GRUPO_ETNICO,dos);
					
					// String
				
						writeString(this.NSOCIOECONOMICO,dos);
					
					// String
				
						writeString(this.TVIVIENDA,dos);
					
					// String
				
						writeString(this.NEDUCATIVOS,dos);
					
					// String
				
						writeString(this.CODIGO_ESTABLECIMIENTO,dos);
					
					// String
				
						writeString(this.ESTABLECIMIENTO_ADSCRITO,dos);
					
					// String
				
						writeString(this.ENTIDAD_APORTANTE,dos);
					
					// String
				
						writeString(this.CODIGO_GRDMILITAR,dos);
					
					// String
				
						writeString(this.SIGLA_GRDMILITAR,dos);
					
					// String
				
						writeString(this.FUERZA_MILITAR,dos);
					
					// String
				
						writeString(this.CODIGO_UMILITAR,dos);
					
					// String
				
						writeString(this.UNIDAD_MILITAR,dos);
					
					// String
				
						writeString(this.TIPO_DE_VINCULACION,dos);
					
					// String
				
						writeString(this.ESTADO_AFILIACION,dos);
					
					// String
				
						writeString(this.FECHA_FIN_AFILIACION,dos);
					
					// String
				
						writeString(this.FECHA_VINCULACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID_UNICO_PERSONA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID_UNICO_AFILIADO);
					
					// String
				
						writeString(this.TIPO_AFILIADO,dos);
					
					// String
				
						writeString(this.ESTADO_ENTIDAD,dos);
					
					// String
				
						writeString(this.ENTIDAD_PRINCIPAL,dos);
					
					// String
				
						writeString(this.SIGLA_REGIMEN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID_UNICO_ENTIDAD);
					
					// String
				
						writeString(this.CORREO_ELECTRONICO,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// String
				
						writeString(this.FECHA_DEFUNCION,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// String
				
						writeString(this.PLANAFILIACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID_BDUA);
					
					// String
				
						writeString(this.MOTIVO_CAMBIO_ESTADO,dos);
					
					// String
				
						writeString(this.MOTIVO_CAMBIO_ESM,dos);
					
					// String
				
						writeString(this.DISCAPACIDAD,dos);
					
					// String
				
						writeString(this.POBLACION_ESPECIAL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",TIPO_DE_DOCUMENTO="+TIPO_DE_DOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PAIS_EXP_DOCUMENTO="+PAIS_EXP_DOCUMENTO);
		sb.append(",DEPTO_EXP_DOCUMENTO="+DEPTO_EXP_DOCUMENTO);
		sb.append(",MUNICIPIO_EXP_DOCUMENTO="+MUNICIPIO_EXP_DOCUMENTO);
		sb.append(",FECHA_EXPEDICION_DOCUMENTO="+FECHA_EXPEDICION_DOCUMENTO);
		sb.append(",FECHA_NACIMIENTO="+FECHA_NACIMIENTO);
		sb.append(",PAIS_NACIMIENTO="+PAIS_NACIMIENTO);
		sb.append(",DEPARTAMENTO_NACIMIENTO="+DEPARTAMENTO_NACIMIENTO);
		sb.append(",MUNICIPIO_NACIMIENTO="+MUNICIPIO_NACIMIENTO);
		sb.append(",SEXO="+SEXO);
		sb.append(",DIRECCION="+DIRECCION);
		sb.append(",TELEFONO="+TELEFONO);
		sb.append(",PAIS_RESIDENCIA="+PAIS_RESIDENCIA);
		sb.append(",DEPARTAMENTO_RESIDENCIA="+DEPARTAMENTO_RESIDENCIA);
		sb.append(",MUNICIPIO_RESIDENCIA="+MUNICIPIO_RESIDENCIA);
		sb.append(",LOCALIDAD_RESIDENCIA="+LOCALIDAD_RESIDENCIA);
		sb.append(",GRUPO_SANGUINEO="+GRUPO_SANGUINEO);
		sb.append(",FACTOR_RH="+FACTOR_RH);
		sb.append(",OCUPACION="+OCUPACION);
		sb.append(",ESTATURA="+ESTATURA);
		sb.append(",GRUPO_ETNICO="+GRUPO_ETNICO);
		sb.append(",NSOCIOECONOMICO="+NSOCIOECONOMICO);
		sb.append(",TVIVIENDA="+TVIVIENDA);
		sb.append(",NEDUCATIVOS="+NEDUCATIVOS);
		sb.append(",CODIGO_ESTABLECIMIENTO="+CODIGO_ESTABLECIMIENTO);
		sb.append(",ESTABLECIMIENTO_ADSCRITO="+ESTABLECIMIENTO_ADSCRITO);
		sb.append(",ENTIDAD_APORTANTE="+ENTIDAD_APORTANTE);
		sb.append(",CODIGO_GRDMILITAR="+CODIGO_GRDMILITAR);
		sb.append(",SIGLA_GRDMILITAR="+SIGLA_GRDMILITAR);
		sb.append(",FUERZA_MILITAR="+FUERZA_MILITAR);
		sb.append(",CODIGO_UMILITAR="+CODIGO_UMILITAR);
		sb.append(",UNIDAD_MILITAR="+UNIDAD_MILITAR);
		sb.append(",TIPO_DE_VINCULACION="+TIPO_DE_VINCULACION);
		sb.append(",ESTADO_AFILIACION="+ESTADO_AFILIACION);
		sb.append(",FECHA_FIN_AFILIACION="+FECHA_FIN_AFILIACION);
		sb.append(",FECHA_VINCULACION="+FECHA_VINCULACION);
		sb.append(",ID_UNICO_PERSONA="+String.valueOf(ID_UNICO_PERSONA));
		sb.append(",ID_UNICO_AFILIADO="+String.valueOf(ID_UNICO_AFILIADO));
		sb.append(",TIPO_AFILIADO="+TIPO_AFILIADO);
		sb.append(",ESTADO_ENTIDAD="+ESTADO_ENTIDAD);
		sb.append(",ENTIDAD_PRINCIPAL="+ENTIDAD_PRINCIPAL);
		sb.append(",SIGLA_REGIMEN="+SIGLA_REGIMEN);
		sb.append(",ID_UNICO_ENTIDAD="+String.valueOf(ID_UNICO_ENTIDAD));
		sb.append(",CORREO_ELECTRONICO="+CORREO_ELECTRONICO);
		sb.append(",CELULAR="+CELULAR);
		sb.append(",FECHA_DEFUNCION="+FECHA_DEFUNCION);
		sb.append(",OBSERVACIONES="+OBSERVACIONES);
		sb.append(",PLANAFILIACION="+PLANAFILIACION);
		sb.append(",ID_BDUA="+String.valueOf(ID_BDUA));
		sb.append(",MOTIVO_CAMBIO_ESTADO="+MOTIVO_CAMBIO_ESTADO);
		sb.append(",MOTIVO_CAMBIO_ESM="+MOTIVO_CAMBIO_ESM);
		sb.append(",DISCAPACIDAD="+DISCAPACIDAD);
		sb.append(",POBLACION_ESPECIAL="+POBLACION_ESPECIAL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ArchivoInicialStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public String PERSONAS_ID;

				public String getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return null;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return null;
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return null;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return null;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return null;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return null;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return null;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return null;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return null;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return null;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String TIPO_DE_DOCUMENTO;

				public String getTIPO_DE_DOCUMENTO () {
					return this.TIPO_DE_DOCUMENTO;
				}

				public Boolean TIPO_DE_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TIPO_DE_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer TIPO_DE_DOCUMENTOLength(){
				    return null;
				}
				public Integer TIPO_DE_DOCUMENTOPrecision(){
				    return null;
				}
				public String TIPO_DE_DOCUMENTODefault(){
				
					return null;
				
				}
				public String TIPO_DE_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String TIPO_DE_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String TIPO_DE_DOCUMENTOOriginalDbColumnName(){
				
					return "TIPO_DE_DOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String SIGLA_SEXO;

				public String getSIGLA_SEXO () {
					return this.SIGLA_SEXO;
				}

				public Boolean SIGLA_SEXOIsNullable(){
				    return true;
				}
				public Boolean SIGLA_SEXOIsKey(){
				    return false;
				}
				public Integer SIGLA_SEXOLength(){
				    return null;
				}
				public Integer SIGLA_SEXOPrecision(){
				    return null;
				}
				public String SIGLA_SEXODefault(){
				
					return null;
				
				}
				public String SIGLA_SEXOComment(){
				
				    return "";
				
				}
				public String SIGLA_SEXOPattern(){
				
					return "";
				
				}
				public String SIGLA_SEXOOriginalDbColumnName(){
				
					return "SIGLA_SEXO";
				
				}

				
			    public String DIRECCION;

				public String getDIRECCION () {
					return this.DIRECCION;
				}

				public Boolean DIRECCIONIsNullable(){
				    return true;
				}
				public Boolean DIRECCIONIsKey(){
				    return false;
				}
				public Integer DIRECCIONLength(){
				    return null;
				}
				public Integer DIRECCIONPrecision(){
				    return null;
				}
				public String DIRECCIONDefault(){
				
					return null;
				
				}
				public String DIRECCIONComment(){
				
				    return "";
				
				}
				public String DIRECCIONPattern(){
				
					return "";
				
				}
				public String DIRECCIONOriginalDbColumnName(){
				
					return "DIRECCION";
				
				}

				
			    public String TELEFONO;

				public String getTELEFONO () {
					return this.TELEFONO;
				}

				public Boolean TELEFONOIsNullable(){
				    return true;
				}
				public Boolean TELEFONOIsKey(){
				    return false;
				}
				public Integer TELEFONOLength(){
				    return null;
				}
				public Integer TELEFONOPrecision(){
				    return null;
				}
				public String TELEFONODefault(){
				
					return null;
				
				}
				public String TELEFONOComment(){
				
				    return "";
				
				}
				public String TELEFONOPattern(){
				
					return "";
				
				}
				public String TELEFONOOriginalDbColumnName(){
				
					return "TELEFONO";
				
				}

				
			    public String COD_PAIS_RESIDENCIA;

				public String getCOD_PAIS_RESIDENCIA () {
					return this.COD_PAIS_RESIDENCIA;
				}

				public Boolean COD_PAIS_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean COD_PAIS_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer COD_PAIS_RESIDENCIALength(){
				    return null;
				}
				public Integer COD_PAIS_RESIDENCIAPrecision(){
				    return null;
				}
				public String COD_PAIS_RESIDENCIADefault(){
				
					return null;
				
				}
				public String COD_PAIS_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String COD_PAIS_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String COD_PAIS_RESIDENCIAOriginalDbColumnName(){
				
					return "COD_PAIS_RESIDENCIA";
				
				}

				
			    public String CODIGO_DEPTO_RESIDENCIA;

				public String getCODIGO_DEPTO_RESIDENCIA () {
					return this.CODIGO_DEPTO_RESIDENCIA;
				}

				public Boolean CODIGO_DEPTO_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean CODIGO_DEPTO_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer CODIGO_DEPTO_RESIDENCIALength(){
				    return null;
				}
				public Integer CODIGO_DEPTO_RESIDENCIAPrecision(){
				    return null;
				}
				public String CODIGO_DEPTO_RESIDENCIADefault(){
				
					return null;
				
				}
				public String CODIGO_DEPTO_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String CODIGO_DEPTO_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String CODIGO_DEPTO_RESIDENCIAOriginalDbColumnName(){
				
					return "CODIGO_DEPTO_RESIDENCIA";
				
				}

				
			    public String CODIGO_MUNICIPIO_RESIDENCIA;

				public String getCODIGO_MUNICIPIO_RESIDENCIA () {
					return this.CODIGO_MUNICIPIO_RESIDENCIA;
				}

				public Boolean CODIGO_MUNICIPIO_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean CODIGO_MUNICIPIO_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer CODIGO_MUNICIPIO_RESIDENCIALength(){
				    return null;
				}
				public Integer CODIGO_MUNICIPIO_RESIDENCIAPrecision(){
				    return null;
				}
				public String CODIGO_MUNICIPIO_RESIDENCIADefault(){
				
					return null;
				
				}
				public String CODIGO_MUNICIPIO_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String CODIGO_MUNICIPIO_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String CODIGO_MUNICIPIO_RESIDENCIAOriginalDbColumnName(){
				
					return "CODIGO_MUNICIPIO_RESIDENCIA";
				
				}

				
			    public String LOCALIDAD_RESIDENCIA;

				public String getLOCALIDAD_RESIDENCIA () {
					return this.LOCALIDAD_RESIDENCIA;
				}

				public Boolean LOCALIDAD_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean LOCALIDAD_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer LOCALIDAD_RESIDENCIALength(){
				    return null;
				}
				public Integer LOCALIDAD_RESIDENCIAPrecision(){
				    return null;
				}
				public String LOCALIDAD_RESIDENCIADefault(){
				
					return null;
				
				}
				public String LOCALIDAD_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String LOCALIDAD_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String LOCALIDAD_RESIDENCIAOriginalDbColumnName(){
				
					return "LOCALIDAD_RESIDENCIA";
				
				}

				
			    public String COD_PAIS_NAC;

				public String getCOD_PAIS_NAC () {
					return this.COD_PAIS_NAC;
				}

				public Boolean COD_PAIS_NACIsNullable(){
				    return true;
				}
				public Boolean COD_PAIS_NACIsKey(){
				    return false;
				}
				public Integer COD_PAIS_NACLength(){
				    return null;
				}
				public Integer COD_PAIS_NACPrecision(){
				    return null;
				}
				public String COD_PAIS_NACDefault(){
				
					return null;
				
				}
				public String COD_PAIS_NACComment(){
				
				    return "";
				
				}
				public String COD_PAIS_NACPattern(){
				
					return "";
				
				}
				public String COD_PAIS_NACOriginalDbColumnName(){
				
					return "COD_PAIS_NAC";
				
				}

				
			    public String COD_DEPARTAMENTO_NAC;

				public String getCOD_DEPARTAMENTO_NAC () {
					return this.COD_DEPARTAMENTO_NAC;
				}

				public Boolean COD_DEPARTAMENTO_NACIsNullable(){
				    return true;
				}
				public Boolean COD_DEPARTAMENTO_NACIsKey(){
				    return false;
				}
				public Integer COD_DEPARTAMENTO_NACLength(){
				    return null;
				}
				public Integer COD_DEPARTAMENTO_NACPrecision(){
				    return null;
				}
				public String COD_DEPARTAMENTO_NACDefault(){
				
					return null;
				
				}
				public String COD_DEPARTAMENTO_NACComment(){
				
				    return "";
				
				}
				public String COD_DEPARTAMENTO_NACPattern(){
				
					return "";
				
				}
				public String COD_DEPARTAMENTO_NACOriginalDbColumnName(){
				
					return "COD_DEPARTAMENTO_NAC";
				
				}

				
			    public String COD_MUNICIPIO_NAC;

				public String getCOD_MUNICIPIO_NAC () {
					return this.COD_MUNICIPIO_NAC;
				}

				public Boolean COD_MUNICIPIO_NACIsNullable(){
				    return true;
				}
				public Boolean COD_MUNICIPIO_NACIsKey(){
				    return false;
				}
				public Integer COD_MUNICIPIO_NACLength(){
				    return null;
				}
				public Integer COD_MUNICIPIO_NACPrecision(){
				    return null;
				}
				public String COD_MUNICIPIO_NACDefault(){
				
					return null;
				
				}
				public String COD_MUNICIPIO_NACComment(){
				
				    return "";
				
				}
				public String COD_MUNICIPIO_NACPattern(){
				
					return "";
				
				}
				public String COD_MUNICIPIO_NACOriginalDbColumnName(){
				
					return "COD_MUNICIPIO_NAC";
				
				}

				
			    public String COD_PAIS_EXP;

				public String getCOD_PAIS_EXP () {
					return this.COD_PAIS_EXP;
				}

				public Boolean COD_PAIS_EXPIsNullable(){
				    return true;
				}
				public Boolean COD_PAIS_EXPIsKey(){
				    return false;
				}
				public Integer COD_PAIS_EXPLength(){
				    return null;
				}
				public Integer COD_PAIS_EXPPrecision(){
				    return null;
				}
				public String COD_PAIS_EXPDefault(){
				
					return null;
				
				}
				public String COD_PAIS_EXPComment(){
				
				    return "";
				
				}
				public String COD_PAIS_EXPPattern(){
				
					return "";
				
				}
				public String COD_PAIS_EXPOriginalDbColumnName(){
				
					return "COD_PAIS_EXP";
				
				}

				
			    public String COD_DEPARTAMENTO_EXP;

				public String getCOD_DEPARTAMENTO_EXP () {
					return this.COD_DEPARTAMENTO_EXP;
				}

				public Boolean COD_DEPARTAMENTO_EXPIsNullable(){
				    return true;
				}
				public Boolean COD_DEPARTAMENTO_EXPIsKey(){
				    return false;
				}
				public Integer COD_DEPARTAMENTO_EXPLength(){
				    return null;
				}
				public Integer COD_DEPARTAMENTO_EXPPrecision(){
				    return null;
				}
				public String COD_DEPARTAMENTO_EXPDefault(){
				
					return null;
				
				}
				public String COD_DEPARTAMENTO_EXPComment(){
				
				    return "";
				
				}
				public String COD_DEPARTAMENTO_EXPPattern(){
				
					return "";
				
				}
				public String COD_DEPARTAMENTO_EXPOriginalDbColumnName(){
				
					return "COD_DEPARTAMENTO_EXP";
				
				}

				
			    public String COD_MUNICIPIO_EXP;

				public String getCOD_MUNICIPIO_EXP () {
					return this.COD_MUNICIPIO_EXP;
				}

				public Boolean COD_MUNICIPIO_EXPIsNullable(){
				    return true;
				}
				public Boolean COD_MUNICIPIO_EXPIsKey(){
				    return false;
				}
				public Integer COD_MUNICIPIO_EXPLength(){
				    return null;
				}
				public Integer COD_MUNICIPIO_EXPPrecision(){
				    return null;
				}
				public String COD_MUNICIPIO_EXPDefault(){
				
					return null;
				
				}
				public String COD_MUNICIPIO_EXPComment(){
				
				    return "";
				
				}
				public String COD_MUNICIPIO_EXPPattern(){
				
					return "";
				
				}
				public String COD_MUNICIPIO_EXPOriginalDbColumnName(){
				
					return "COD_MUNICIPIO_EXP";
				
				}

				
			    public String FECHA_EXPEDICION_DOCUMENTO;

				public String getFECHA_EXPEDICION_DOCUMENTO () {
					return this.FECHA_EXPEDICION_DOCUMENTO;
				}

				public Boolean FECHA_EXPEDICION_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_EXPEDICION_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer FECHA_EXPEDICION_DOCUMENTOLength(){
				    return null;
				}
				public Integer FECHA_EXPEDICION_DOCUMENTOPrecision(){
				    return null;
				}
				public String FECHA_EXPEDICION_DOCUMENTODefault(){
				
					return null;
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOOriginalDbColumnName(){
				
					return "FECHA_EXPEDICION_DOCUMENTO";
				
				}

				
			    public String FECHA_NACIMIENTO;

				public String getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return null;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return null;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public String GSANGUINEOS;

				public String getGSANGUINEOS () {
					return this.GSANGUINEOS;
				}

				public Boolean GSANGUINEOSIsNullable(){
				    return true;
				}
				public Boolean GSANGUINEOSIsKey(){
				    return false;
				}
				public Integer GSANGUINEOSLength(){
				    return null;
				}
				public Integer GSANGUINEOSPrecision(){
				    return null;
				}
				public String GSANGUINEOSDefault(){
				
					return null;
				
				}
				public String GSANGUINEOSComment(){
				
				    return "";
				
				}
				public String GSANGUINEOSPattern(){
				
					return "";
				
				}
				public String GSANGUINEOSOriginalDbColumnName(){
				
					return "GSANGUINEOS";
				
				}

				
			    public String FACTOR_RH;

				public String getFACTOR_RH () {
					return this.FACTOR_RH;
				}

				public Boolean FACTOR_RHIsNullable(){
				    return true;
				}
				public Boolean FACTOR_RHIsKey(){
				    return false;
				}
				public Integer FACTOR_RHLength(){
				    return null;
				}
				public Integer FACTOR_RHPrecision(){
				    return null;
				}
				public String FACTOR_RHDefault(){
				
					return null;
				
				}
				public String FACTOR_RHComment(){
				
				    return "";
				
				}
				public String FACTOR_RHPattern(){
				
					return "";
				
				}
				public String FACTOR_RHOriginalDbColumnName(){
				
					return "FACTOR_RH";
				
				}

				
			    public String SIGLA_NEDUCATIVOS;

				public String getSIGLA_NEDUCATIVOS () {
					return this.SIGLA_NEDUCATIVOS;
				}

				public Boolean SIGLA_NEDUCATIVOSIsNullable(){
				    return true;
				}
				public Boolean SIGLA_NEDUCATIVOSIsKey(){
				    return false;
				}
				public Integer SIGLA_NEDUCATIVOSLength(){
				    return null;
				}
				public Integer SIGLA_NEDUCATIVOSPrecision(){
				    return null;
				}
				public String SIGLA_NEDUCATIVOSDefault(){
				
					return null;
				
				}
				public String SIGLA_NEDUCATIVOSComment(){
				
				    return "";
				
				}
				public String SIGLA_NEDUCATIVOSPattern(){
				
					return "";
				
				}
				public String SIGLA_NEDUCATIVOSOriginalDbColumnName(){
				
					return "SIGLA_NEDUCATIVOS";
				
				}

				
			    public String CODIGO_ESM;

				public String getCODIGO_ESM () {
					return this.CODIGO_ESM;
				}

				public Boolean CODIGO_ESMIsNullable(){
				    return true;
				}
				public Boolean CODIGO_ESMIsKey(){
				    return false;
				}
				public Integer CODIGO_ESMLength(){
				    return null;
				}
				public Integer CODIGO_ESMPrecision(){
				    return null;
				}
				public String CODIGO_ESMDefault(){
				
					return null;
				
				}
				public String CODIGO_ESMComment(){
				
				    return "";
				
				}
				public String CODIGO_ESMPattern(){
				
					return "";
				
				}
				public String CODIGO_ESMOriginalDbColumnName(){
				
					return "CODIGO_ESM";
				
				}

				
			    public String SIGLA_ADSCRITO;

				public String getSIGLA_ADSCRITO () {
					return this.SIGLA_ADSCRITO;
				}

				public Boolean SIGLA_ADSCRITOIsNullable(){
				    return true;
				}
				public Boolean SIGLA_ADSCRITOIsKey(){
				    return false;
				}
				public Integer SIGLA_ADSCRITOLength(){
				    return null;
				}
				public Integer SIGLA_ADSCRITOPrecision(){
				    return null;
				}
				public String SIGLA_ADSCRITODefault(){
				
					return null;
				
				}
				public String SIGLA_ADSCRITOComment(){
				
				    return "";
				
				}
				public String SIGLA_ADSCRITOPattern(){
				
					return "";
				
				}
				public String SIGLA_ADSCRITOOriginalDbColumnName(){
				
					return "SIGLA_ADSCRITO";
				
				}

				
			    public String CODIGO_ETNICAS;

				public String getCODIGO_ETNICAS () {
					return this.CODIGO_ETNICAS;
				}

				public Boolean CODIGO_ETNICASIsNullable(){
				    return true;
				}
				public Boolean CODIGO_ETNICASIsKey(){
				    return false;
				}
				public Integer CODIGO_ETNICASLength(){
				    return null;
				}
				public Integer CODIGO_ETNICASPrecision(){
				    return null;
				}
				public String CODIGO_ETNICASDefault(){
				
					return null;
				
				}
				public String CODIGO_ETNICASComment(){
				
				    return "";
				
				}
				public String CODIGO_ETNICASPattern(){
				
					return "";
				
				}
				public String CODIGO_ETNICASOriginalDbColumnName(){
				
					return "CODIGO_ETNICAS";
				
				}

				
			    public String NSOCIOECONOMICOS;

				public String getNSOCIOECONOMICOS () {
					return this.NSOCIOECONOMICOS;
				}

				public Boolean NSOCIOECONOMICOSIsNullable(){
				    return true;
				}
				public Boolean NSOCIOECONOMICOSIsKey(){
				    return false;
				}
				public Integer NSOCIOECONOMICOSLength(){
				    return null;
				}
				public Integer NSOCIOECONOMICOSPrecision(){
				    return null;
				}
				public String NSOCIOECONOMICOSDefault(){
				
					return null;
				
				}
				public String NSOCIOECONOMICOSComment(){
				
				    return "";
				
				}
				public String NSOCIOECONOMICOSPattern(){
				
					return "";
				
				}
				public String NSOCIOECONOMICOSOriginalDbColumnName(){
				
					return "NSOCIOECONOMICOS";
				
				}

				
			    public String SIGLA_OCUPACIONES;

				public String getSIGLA_OCUPACIONES () {
					return this.SIGLA_OCUPACIONES;
				}

				public Boolean SIGLA_OCUPACIONESIsNullable(){
				    return true;
				}
				public Boolean SIGLA_OCUPACIONESIsKey(){
				    return false;
				}
				public Integer SIGLA_OCUPACIONESLength(){
				    return null;
				}
				public Integer SIGLA_OCUPACIONESPrecision(){
				    return null;
				}
				public String SIGLA_OCUPACIONESDefault(){
				
					return null;
				
				}
				public String SIGLA_OCUPACIONESComment(){
				
				    return "";
				
				}
				public String SIGLA_OCUPACIONESPattern(){
				
					return "";
				
				}
				public String SIGLA_OCUPACIONESOriginalDbColumnName(){
				
					return "SIGLA_OCUPACIONES";
				
				}

				
			    public String ESTATURA;

				public String getESTATURA () {
					return this.ESTATURA;
				}

				public Boolean ESTATURAIsNullable(){
				    return true;
				}
				public Boolean ESTATURAIsKey(){
				    return false;
				}
				public Integer ESTATURALength(){
				    return null;
				}
				public Integer ESTATURAPrecision(){
				    return null;
				}
				public String ESTATURADefault(){
				
					return null;
				
				}
				public String ESTATURAComment(){
				
				    return "";
				
				}
				public String ESTATURAPattern(){
				
					return "";
				
				}
				public String ESTATURAOriginalDbColumnName(){
				
					return "ESTATURA";
				
				}

				
			    public String SIGLA_TVIVIENDA;

				public String getSIGLA_TVIVIENDA () {
					return this.SIGLA_TVIVIENDA;
				}

				public Boolean SIGLA_TVIVIENDAIsNullable(){
				    return true;
				}
				public Boolean SIGLA_TVIVIENDAIsKey(){
				    return false;
				}
				public Integer SIGLA_TVIVIENDALength(){
				    return null;
				}
				public Integer SIGLA_TVIVIENDAPrecision(){
				    return null;
				}
				public String SIGLA_TVIVIENDADefault(){
				
					return null;
				
				}
				public String SIGLA_TVIVIENDAComment(){
				
				    return "";
				
				}
				public String SIGLA_TVIVIENDAPattern(){
				
					return "";
				
				}
				public String SIGLA_TVIVIENDAOriginalDbColumnName(){
				
					return "SIGLA_TVIVIENDA";
				
				}

				
			    public String FECHA_CADUCIDAD;

				public String getFECHA_CADUCIDAD () {
					return this.FECHA_CADUCIDAD;
				}

				public Boolean FECHA_CADUCIDADIsNullable(){
				    return true;
				}
				public Boolean FECHA_CADUCIDADIsKey(){
				    return false;
				}
				public Integer FECHA_CADUCIDADLength(){
				    return null;
				}
				public Integer FECHA_CADUCIDADPrecision(){
				    return null;
				}
				public String FECHA_CADUCIDADDefault(){
				
					return null;
				
				}
				public String FECHA_CADUCIDADComment(){
				
				    return "";
				
				}
				public String FECHA_CADUCIDADPattern(){
				
					return "";
				
				}
				public String FECHA_CADUCIDADOriginalDbColumnName(){
				
					return "FECHA_CADUCIDAD";
				
				}

				
			    public String SIGLA_FUERZA;

				public String getSIGLA_FUERZA () {
					return this.SIGLA_FUERZA;
				}

				public Boolean SIGLA_FUERZAIsNullable(){
				    return true;
				}
				public Boolean SIGLA_FUERZAIsKey(){
				    return false;
				}
				public Integer SIGLA_FUERZALength(){
				    return null;
				}
				public Integer SIGLA_FUERZAPrecision(){
				    return null;
				}
				public String SIGLA_FUERZADefault(){
				
					return null;
				
				}
				public String SIGLA_FUERZAComment(){
				
				    return "";
				
				}
				public String SIGLA_FUERZAPattern(){
				
					return "";
				
				}
				public String SIGLA_FUERZAOriginalDbColumnName(){
				
					return "SIGLA_FUERZA";
				
				}

				
			    public String CODIGO_GRADO;

				public String getCODIGO_GRADO () {
					return this.CODIGO_GRADO;
				}

				public Boolean CODIGO_GRADOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_GRADOIsKey(){
				    return false;
				}
				public Integer CODIGO_GRADOLength(){
				    return null;
				}
				public Integer CODIGO_GRADOPrecision(){
				    return null;
				}
				public String CODIGO_GRADODefault(){
				
					return null;
				
				}
				public String CODIGO_GRADOComment(){
				
				    return "";
				
				}
				public String CODIGO_GRADOPattern(){
				
					return "";
				
				}
				public String CODIGO_GRADOOriginalDbColumnName(){
				
					return "CODIGO_GRADO";
				
				}

				
			    public String SIGLA_GRADO;

				public String getSIGLA_GRADO () {
					return this.SIGLA_GRADO;
				}

				public Boolean SIGLA_GRADOIsNullable(){
				    return true;
				}
				public Boolean SIGLA_GRADOIsKey(){
				    return false;
				}
				public Integer SIGLA_GRADOLength(){
				    return null;
				}
				public Integer SIGLA_GRADOPrecision(){
				    return null;
				}
				public String SIGLA_GRADODefault(){
				
					return null;
				
				}
				public String SIGLA_GRADOComment(){
				
				    return "";
				
				}
				public String SIGLA_GRADOPattern(){
				
					return "";
				
				}
				public String SIGLA_GRADOOriginalDbColumnName(){
				
					return "SIGLA_GRADO";
				
				}

				
			    public String SIGLA_UMILITAR;

				public String getSIGLA_UMILITAR () {
					return this.SIGLA_UMILITAR;
				}

				public Boolean SIGLA_UMILITARIsNullable(){
				    return true;
				}
				public Boolean SIGLA_UMILITARIsKey(){
				    return false;
				}
				public Integer SIGLA_UMILITARLength(){
				    return null;
				}
				public Integer SIGLA_UMILITARPrecision(){
				    return null;
				}
				public String SIGLA_UMILITARDefault(){
				
					return null;
				
				}
				public String SIGLA_UMILITARComment(){
				
				    return "";
				
				}
				public String SIGLA_UMILITARPattern(){
				
					return "";
				
				}
				public String SIGLA_UMILITAROriginalDbColumnName(){
				
					return "SIGLA_UMILITAR";
				
				}

				
			    public String CODIGO_UMILITAR;

				public String getCODIGO_UMILITAR () {
					return this.CODIGO_UMILITAR;
				}

				public Boolean CODIGO_UMILITARIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UMILITARIsKey(){
				    return false;
				}
				public Integer CODIGO_UMILITARLength(){
				    return null;
				}
				public Integer CODIGO_UMILITARPrecision(){
				    return null;
				}
				public String CODIGO_UMILITARDefault(){
				
					return null;
				
				}
				public String CODIGO_UMILITARComment(){
				
				    return "";
				
				}
				public String CODIGO_UMILITARPattern(){
				
					return "";
				
				}
				public String CODIGO_UMILITAROriginalDbColumnName(){
				
					return "CODIGO_UMILITAR";
				
				}

				
			    public String TVINCULACION_SIGLA;

				public String getTVINCULACION_SIGLA () {
					return this.TVINCULACION_SIGLA;
				}

				public Boolean TVINCULACION_SIGLAIsNullable(){
				    return true;
				}
				public Boolean TVINCULACION_SIGLAIsKey(){
				    return false;
				}
				public Integer TVINCULACION_SIGLALength(){
				    return null;
				}
				public Integer TVINCULACION_SIGLAPrecision(){
				    return null;
				}
				public String TVINCULACION_SIGLADefault(){
				
					return null;
				
				}
				public String TVINCULACION_SIGLAComment(){
				
				    return "";
				
				}
				public String TVINCULACION_SIGLAPattern(){
				
					return "";
				
				}
				public String TVINCULACION_SIGLAOriginalDbColumnName(){
				
					return "TVINCULACION_SIGLA";
				
				}

				
			    public String SIGLA_TREGIMEN;

				public String getSIGLA_TREGIMEN () {
					return this.SIGLA_TREGIMEN;
				}

				public Boolean SIGLA_TREGIMENIsNullable(){
				    return true;
				}
				public Boolean SIGLA_TREGIMENIsKey(){
				    return false;
				}
				public Integer SIGLA_TREGIMENLength(){
				    return null;
				}
				public Integer SIGLA_TREGIMENPrecision(){
				    return null;
				}
				public String SIGLA_TREGIMENDefault(){
				
					return null;
				
				}
				public String SIGLA_TREGIMENComment(){
				
				    return "";
				
				}
				public String SIGLA_TREGIMENPattern(){
				
					return "";
				
				}
				public String SIGLA_TREGIMENOriginalDbColumnName(){
				
					return "SIGLA_TREGIMEN";
				
				}

				
			    public String SIGLA_TAFILIADOS;

				public String getSIGLA_TAFILIADOS () {
					return this.SIGLA_TAFILIADOS;
				}

				public Boolean SIGLA_TAFILIADOSIsNullable(){
				    return true;
				}
				public Boolean SIGLA_TAFILIADOSIsKey(){
				    return false;
				}
				public Integer SIGLA_TAFILIADOSLength(){
				    return null;
				}
				public Integer SIGLA_TAFILIADOSPrecision(){
				    return null;
				}
				public String SIGLA_TAFILIADOSDefault(){
				
					return null;
				
				}
				public String SIGLA_TAFILIADOSComment(){
				
				    return "";
				
				}
				public String SIGLA_TAFILIADOSPattern(){
				
					return "";
				
				}
				public String SIGLA_TAFILIADOSOriginalDbColumnName(){
				
					return "SIGLA_TAFILIADOS";
				
				}

				
			    public String ESTADO_SIGLA;

				public String getESTADO_SIGLA () {
					return this.ESTADO_SIGLA;
				}

				public Boolean ESTADO_SIGLAIsNullable(){
				    return true;
				}
				public Boolean ESTADO_SIGLAIsKey(){
				    return false;
				}
				public Integer ESTADO_SIGLALength(){
				    return null;
				}
				public Integer ESTADO_SIGLAPrecision(){
				    return null;
				}
				public String ESTADO_SIGLADefault(){
				
					return null;
				
				}
				public String ESTADO_SIGLAComment(){
				
				    return "";
				
				}
				public String ESTADO_SIGLAPattern(){
				
					return "";
				
				}
				public String ESTADO_SIGLAOriginalDbColumnName(){
				
					return "ESTADO_SIGLA";
				
				}

				
			    public String DOCUMENTO_ENTIDAD;

				public String getDOCUMENTO_ENTIDAD () {
					return this.DOCUMENTO_ENTIDAD;
				}

				public Boolean DOCUMENTO_ENTIDADIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_ENTIDADIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_ENTIDADLength(){
				    return null;
				}
				public Integer DOCUMENTO_ENTIDADPrecision(){
				    return null;
				}
				public String DOCUMENTO_ENTIDADDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_ENTIDADComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_ENTIDADPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_ENTIDADOriginalDbColumnName(){
				
					return "DOCUMENTO_ENTIDAD";
				
				}

				
			    public String ENTA_PRINCIPAL;

				public String getENTA_PRINCIPAL () {
					return this.ENTA_PRINCIPAL;
				}

				public Boolean ENTA_PRINCIPALIsNullable(){
				    return true;
				}
				public Boolean ENTA_PRINCIPALIsKey(){
				    return false;
				}
				public Integer ENTA_PRINCIPALLength(){
				    return null;
				}
				public Integer ENTA_PRINCIPALPrecision(){
				    return null;
				}
				public String ENTA_PRINCIPALDefault(){
				
					return null;
				
				}
				public String ENTA_PRINCIPALComment(){
				
				    return "";
				
				}
				public String ENTA_PRINCIPALPattern(){
				
					return "";
				
				}
				public String ENTA_PRINCIPALOriginalDbColumnName(){
				
					return "ENTA_PRINCIPAL";
				
				}

				
			    public String FECHA_INGRESO;

				public String getFECHA_INGRESO () {
					return this.FECHA_INGRESO;
				}

				public Boolean FECHA_INGRESOIsNullable(){
				    return true;
				}
				public Boolean FECHA_INGRESOIsKey(){
				    return false;
				}
				public Integer FECHA_INGRESOLength(){
				    return null;
				}
				public Integer FECHA_INGRESOPrecision(){
				    return null;
				}
				public String FECHA_INGRESODefault(){
				
					return null;
				
				}
				public String FECHA_INGRESOComment(){
				
				    return "";
				
				}
				public String FECHA_INGRESOPattern(){
				
					return "";
				
				}
				public String FECHA_INGRESOOriginalDbColumnName(){
				
					return "FECHA_INGRESO";
				
				}

				
			    public String ESTADO_ENTIDAD;

				public String getESTADO_ENTIDAD () {
					return this.ESTADO_ENTIDAD;
				}

				public Boolean ESTADO_ENTIDADIsNullable(){
				    return true;
				}
				public Boolean ESTADO_ENTIDADIsKey(){
				    return false;
				}
				public Integer ESTADO_ENTIDADLength(){
				    return null;
				}
				public Integer ESTADO_ENTIDADPrecision(){
				    return null;
				}
				public String ESTADO_ENTIDADDefault(){
				
					return null;
				
				}
				public String ESTADO_ENTIDADComment(){
				
				    return "";
				
				}
				public String ESTADO_ENTIDADPattern(){
				
					return "";
				
				}
				public String ESTADO_ENTIDADOriginalDbColumnName(){
				
					return "ESTADO_ENTIDAD";
				
				}

				
			    public String GA;

				public String getGA () {
					return this.GA;
				}

				public Boolean GAIsNullable(){
				    return true;
				}
				public Boolean GAIsKey(){
				    return false;
				}
				public Integer GALength(){
				    return null;
				}
				public Integer GAPrecision(){
				    return null;
				}
				public String GADefault(){
				
					return null;
				
				}
				public String GAComment(){
				
				    return "";
				
				}
				public String GAPattern(){
				
					return "";
				
				}
				public String GAOriginalDbColumnName(){
				
					return "GA";
				
				}

				
			    public String GAR;

				public String getGAR () {
					return this.GAR;
				}

				public Boolean GARIsNullable(){
				    return true;
				}
				public Boolean GARIsKey(){
				    return false;
				}
				public Integer GARLength(){
				    return null;
				}
				public Integer GARPrecision(){
				    return null;
				}
				public String GARDefault(){
				
					return null;
				
				}
				public String GARComment(){
				
				    return "";
				
				}
				public String GARPattern(){
				
					return "";
				
				}
				public String GAROriginalDbColumnName(){
				
					return "GAR";
				
				}

				
			    public String CORREO_ELECTRONICO;

				public String getCORREO_ELECTRONICO () {
					return this.CORREO_ELECTRONICO;
				}

				public Boolean CORREO_ELECTRONICOIsNullable(){
				    return true;
				}
				public Boolean CORREO_ELECTRONICOIsKey(){
				    return false;
				}
				public Integer CORREO_ELECTRONICOLength(){
				    return null;
				}
				public Integer CORREO_ELECTRONICOPrecision(){
				    return null;
				}
				public String CORREO_ELECTRONICODefault(){
				
					return null;
				
				}
				public String CORREO_ELECTRONICOComment(){
				
				    return "";
				
				}
				public String CORREO_ELECTRONICOPattern(){
				
					return "";
				
				}
				public String CORREO_ELECTRONICOOriginalDbColumnName(){
				
					return "CORREO_ELECTRONICO";
				
				}

				
			    public String CELULAR;

				public String getCELULAR () {
					return this.CELULAR;
				}

				public Boolean CELULARIsNullable(){
				    return true;
				}
				public Boolean CELULARIsKey(){
				    return false;
				}
				public Integer CELULARLength(){
				    return null;
				}
				public Integer CELULARPrecision(){
				    return null;
				}
				public String CELULARDefault(){
				
					return null;
				
				}
				public String CELULARComment(){
				
				    return "";
				
				}
				public String CELULARPattern(){
				
					return "";
				
				}
				public String CELULAROriginalDbColumnName(){
				
					return "CELULAR";
				
				}

				
			    public String FECHA_DEFUNCION;

				public String getFECHA_DEFUNCION () {
					return this.FECHA_DEFUNCION;
				}

				public Boolean FECHA_DEFUNCIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_DEFUNCIONIsKey(){
				    return false;
				}
				public Integer FECHA_DEFUNCIONLength(){
				    return null;
				}
				public Integer FECHA_DEFUNCIONPrecision(){
				    return null;
				}
				public String FECHA_DEFUNCIONDefault(){
				
					return null;
				
				}
				public String FECHA_DEFUNCIONComment(){
				
				    return "";
				
				}
				public String FECHA_DEFUNCIONPattern(){
				
					return "";
				
				}
				public String FECHA_DEFUNCIONOriginalDbColumnName(){
				
					return "FECHA_DEFUNCION";
				
				}

				
			    public String OBSERVACIONES;

				public String getOBSERVACIONES () {
					return this.OBSERVACIONES;
				}

				public Boolean OBSERVACIONESIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONESIsKey(){
				    return false;
				}
				public Integer OBSERVACIONESLength(){
				    return null;
				}
				public Integer OBSERVACIONESPrecision(){
				    return null;
				}
				public String OBSERVACIONESDefault(){
				
					return null;
				
				}
				public String OBSERVACIONESComment(){
				
				    return "";
				
				}
				public String OBSERVACIONESPattern(){
				
					return "";
				
				}
				public String OBSERVACIONESOriginalDbColumnName(){
				
					return "OBSERVACIONES";
				
				}

				
			    public String PLANAFILIACION;

				public String getPLANAFILIACION () {
					return this.PLANAFILIACION;
				}

				public Boolean PLANAFILIACIONIsNullable(){
				    return true;
				}
				public Boolean PLANAFILIACIONIsKey(){
				    return false;
				}
				public Integer PLANAFILIACIONLength(){
				    return null;
				}
				public Integer PLANAFILIACIONPrecision(){
				    return null;
				}
				public String PLANAFILIACIONDefault(){
				
					return null;
				
				}
				public String PLANAFILIACIONComment(){
				
				    return "";
				
				}
				public String PLANAFILIACIONPattern(){
				
					return "";
				
				}
				public String PLANAFILIACIONOriginalDbColumnName(){
				
					return "PLANAFILIACION";
				
				}

				
			    public String ID_BDUA;

				public String getID_BDUA () {
					return this.ID_BDUA;
				}

				public Boolean ID_BDUAIsNullable(){
				    return true;
				}
				public Boolean ID_BDUAIsKey(){
				    return false;
				}
				public Integer ID_BDUALength(){
				    return null;
				}
				public Integer ID_BDUAPrecision(){
				    return null;
				}
				public String ID_BDUADefault(){
				
					return null;
				
				}
				public String ID_BDUAComment(){
				
				    return "";
				
				}
				public String ID_BDUAPattern(){
				
					return "";
				
				}
				public String ID_BDUAOriginalDbColumnName(){
				
					return "ID_BDUA";
				
				}

				
			    public String MOTIVO_CAMBIO_ESTADO;

				public String getMOTIVO_CAMBIO_ESTADO () {
					return this.MOTIVO_CAMBIO_ESTADO;
				}

				public Boolean MOTIVO_CAMBIO_ESTADOIsNullable(){
				    return true;
				}
				public Boolean MOTIVO_CAMBIO_ESTADOIsKey(){
				    return false;
				}
				public Integer MOTIVO_CAMBIO_ESTADOLength(){
				    return null;
				}
				public Integer MOTIVO_CAMBIO_ESTADOPrecision(){
				    return null;
				}
				public String MOTIVO_CAMBIO_ESTADODefault(){
				
					return null;
				
				}
				public String MOTIVO_CAMBIO_ESTADOComment(){
				
				    return "";
				
				}
				public String MOTIVO_CAMBIO_ESTADOPattern(){
				
					return "";
				
				}
				public String MOTIVO_CAMBIO_ESTADOOriginalDbColumnName(){
				
					return "MOTIVO_CAMBIO_ESTADO";
				
				}

				
			    public String MOTIVO_CAMBIO_ESM;

				public String getMOTIVO_CAMBIO_ESM () {
					return this.MOTIVO_CAMBIO_ESM;
				}

				public Boolean MOTIVO_CAMBIO_ESMIsNullable(){
				    return true;
				}
				public Boolean MOTIVO_CAMBIO_ESMIsKey(){
				    return false;
				}
				public Integer MOTIVO_CAMBIO_ESMLength(){
				    return null;
				}
				public Integer MOTIVO_CAMBIO_ESMPrecision(){
				    return null;
				}
				public String MOTIVO_CAMBIO_ESMDefault(){
				
					return null;
				
				}
				public String MOTIVO_CAMBIO_ESMComment(){
				
				    return "";
				
				}
				public String MOTIVO_CAMBIO_ESMPattern(){
				
					return "";
				
				}
				public String MOTIVO_CAMBIO_ESMOriginalDbColumnName(){
				
					return "MOTIVO_CAMBIO_ESM";
				
				}

				
			    public String DISCAPACIDAD;

				public String getDISCAPACIDAD () {
					return this.DISCAPACIDAD;
				}

				public Boolean DISCAPACIDADIsNullable(){
				    return true;
				}
				public Boolean DISCAPACIDADIsKey(){
				    return false;
				}
				public Integer DISCAPACIDADLength(){
				    return null;
				}
				public Integer DISCAPACIDADPrecision(){
				    return null;
				}
				public String DISCAPACIDADDefault(){
				
					return null;
				
				}
				public String DISCAPACIDADComment(){
				
				    return "";
				
				}
				public String DISCAPACIDADPattern(){
				
					return "";
				
				}
				public String DISCAPACIDADOriginalDbColumnName(){
				
					return "DISCAPACIDAD";
				
				}

				
			    public String POBLACION_ESPECIAL;

				public String getPOBLACION_ESPECIAL () {
					return this.POBLACION_ESPECIAL;
				}

				public Boolean POBLACION_ESPECIALIsNullable(){
				    return true;
				}
				public Boolean POBLACION_ESPECIALIsKey(){
				    return false;
				}
				public Integer POBLACION_ESPECIALLength(){
				    return null;
				}
				public Integer POBLACION_ESPECIALPrecision(){
				    return null;
				}
				public String POBLACION_ESPECIALDefault(){
				
					return null;
				
				}
				public String POBLACION_ESPECIALComment(){
				
				    return "";
				
				}
				public String POBLACION_ESPECIALPattern(){
				
					return "";
				
				}
				public String POBLACION_ESPECIALOriginalDbColumnName(){
				
					return "POBLACION_ESPECIAL";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.PERSONAS_ID = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.TIPO_DE_DOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.SIGLA_SEXO = readString(dis);
					
					this.DIRECCION = readString(dis);
					
					this.TELEFONO = readString(dis);
					
					this.COD_PAIS_RESIDENCIA = readString(dis);
					
					this.CODIGO_DEPTO_RESIDENCIA = readString(dis);
					
					this.CODIGO_MUNICIPIO_RESIDENCIA = readString(dis);
					
					this.LOCALIDAD_RESIDENCIA = readString(dis);
					
					this.COD_PAIS_NAC = readString(dis);
					
					this.COD_DEPARTAMENTO_NAC = readString(dis);
					
					this.COD_MUNICIPIO_NAC = readString(dis);
					
					this.COD_PAIS_EXP = readString(dis);
					
					this.COD_DEPARTAMENTO_EXP = readString(dis);
					
					this.COD_MUNICIPIO_EXP = readString(dis);
					
					this.FECHA_EXPEDICION_DOCUMENTO = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.GSANGUINEOS = readString(dis);
					
					this.FACTOR_RH = readString(dis);
					
					this.SIGLA_NEDUCATIVOS = readString(dis);
					
					this.CODIGO_ESM = readString(dis);
					
					this.SIGLA_ADSCRITO = readString(dis);
					
					this.CODIGO_ETNICAS = readString(dis);
					
					this.NSOCIOECONOMICOS = readString(dis);
					
					this.SIGLA_OCUPACIONES = readString(dis);
					
					this.ESTATURA = readString(dis);
					
					this.SIGLA_TVIVIENDA = readString(dis);
					
					this.FECHA_CADUCIDAD = readString(dis);
					
					this.SIGLA_FUERZA = readString(dis);
					
					this.CODIGO_GRADO = readString(dis);
					
					this.SIGLA_GRADO = readString(dis);
					
					this.SIGLA_UMILITAR = readString(dis);
					
					this.CODIGO_UMILITAR = readString(dis);
					
					this.TVINCULACION_SIGLA = readString(dis);
					
					this.SIGLA_TREGIMEN = readString(dis);
					
					this.SIGLA_TAFILIADOS = readString(dis);
					
					this.ESTADO_SIGLA = readString(dis);
					
					this.DOCUMENTO_ENTIDAD = readString(dis);
					
					this.ENTA_PRINCIPAL = readString(dis);
					
					this.FECHA_INGRESO = readString(dis);
					
					this.ESTADO_ENTIDAD = readString(dis);
					
					this.GA = readString(dis);
					
					this.GAR = readString(dis);
					
					this.CORREO_ELECTRONICO = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.FECHA_DEFUNCION = readString(dis);
					
					this.OBSERVACIONES = readString(dis);
					
					this.PLANAFILIACION = readString(dis);
					
					this.ID_BDUA = readString(dis);
					
					this.MOTIVO_CAMBIO_ESTADO = readString(dis);
					
					this.MOTIVO_CAMBIO_ESM = readString(dis);
					
					this.DISCAPACIDAD = readString(dis);
					
					this.POBLACION_ESPECIAL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.PERSONAS_ID = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.TIPO_DE_DOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.SIGLA_SEXO = readString(dis);
					
					this.DIRECCION = readString(dis);
					
					this.TELEFONO = readString(dis);
					
					this.COD_PAIS_RESIDENCIA = readString(dis);
					
					this.CODIGO_DEPTO_RESIDENCIA = readString(dis);
					
					this.CODIGO_MUNICIPIO_RESIDENCIA = readString(dis);
					
					this.LOCALIDAD_RESIDENCIA = readString(dis);
					
					this.COD_PAIS_NAC = readString(dis);
					
					this.COD_DEPARTAMENTO_NAC = readString(dis);
					
					this.COD_MUNICIPIO_NAC = readString(dis);
					
					this.COD_PAIS_EXP = readString(dis);
					
					this.COD_DEPARTAMENTO_EXP = readString(dis);
					
					this.COD_MUNICIPIO_EXP = readString(dis);
					
					this.FECHA_EXPEDICION_DOCUMENTO = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.GSANGUINEOS = readString(dis);
					
					this.FACTOR_RH = readString(dis);
					
					this.SIGLA_NEDUCATIVOS = readString(dis);
					
					this.CODIGO_ESM = readString(dis);
					
					this.SIGLA_ADSCRITO = readString(dis);
					
					this.CODIGO_ETNICAS = readString(dis);
					
					this.NSOCIOECONOMICOS = readString(dis);
					
					this.SIGLA_OCUPACIONES = readString(dis);
					
					this.ESTATURA = readString(dis);
					
					this.SIGLA_TVIVIENDA = readString(dis);
					
					this.FECHA_CADUCIDAD = readString(dis);
					
					this.SIGLA_FUERZA = readString(dis);
					
					this.CODIGO_GRADO = readString(dis);
					
					this.SIGLA_GRADO = readString(dis);
					
					this.SIGLA_UMILITAR = readString(dis);
					
					this.CODIGO_UMILITAR = readString(dis);
					
					this.TVINCULACION_SIGLA = readString(dis);
					
					this.SIGLA_TREGIMEN = readString(dis);
					
					this.SIGLA_TAFILIADOS = readString(dis);
					
					this.ESTADO_SIGLA = readString(dis);
					
					this.DOCUMENTO_ENTIDAD = readString(dis);
					
					this.ENTA_PRINCIPAL = readString(dis);
					
					this.FECHA_INGRESO = readString(dis);
					
					this.ESTADO_ENTIDAD = readString(dis);
					
					this.GA = readString(dis);
					
					this.GAR = readString(dis);
					
					this.CORREO_ELECTRONICO = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.FECHA_DEFUNCION = readString(dis);
					
					this.OBSERVACIONES = readString(dis);
					
					this.PLANAFILIACION = readString(dis);
					
					this.ID_BDUA = readString(dis);
					
					this.MOTIVO_CAMBIO_ESTADO = readString(dis);
					
					this.MOTIVO_CAMBIO_ESM = readString(dis);
					
					this.DISCAPACIDAD = readString(dis);
					
					this.POBLACION_ESPECIAL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PERSONAS_ID,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.TIPO_DE_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.SIGLA_SEXO,dos);
					
					// String
				
						writeString(this.DIRECCION,dos);
					
					// String
				
						writeString(this.TELEFONO,dos);
					
					// String
				
						writeString(this.COD_PAIS_RESIDENCIA,dos);
					
					// String
				
						writeString(this.CODIGO_DEPTO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.CODIGO_MUNICIPIO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.LOCALIDAD_RESIDENCIA,dos);
					
					// String
				
						writeString(this.COD_PAIS_NAC,dos);
					
					// String
				
						writeString(this.COD_DEPARTAMENTO_NAC,dos);
					
					// String
				
						writeString(this.COD_MUNICIPIO_NAC,dos);
					
					// String
				
						writeString(this.COD_PAIS_EXP,dos);
					
					// String
				
						writeString(this.COD_DEPARTAMENTO_EXP,dos);
					
					// String
				
						writeString(this.COD_MUNICIPIO_EXP,dos);
					
					// String
				
						writeString(this.FECHA_EXPEDICION_DOCUMENTO,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.GSANGUINEOS,dos);
					
					// String
				
						writeString(this.FACTOR_RH,dos);
					
					// String
				
						writeString(this.SIGLA_NEDUCATIVOS,dos);
					
					// String
				
						writeString(this.CODIGO_ESM,dos);
					
					// String
				
						writeString(this.SIGLA_ADSCRITO,dos);
					
					// String
				
						writeString(this.CODIGO_ETNICAS,dos);
					
					// String
				
						writeString(this.NSOCIOECONOMICOS,dos);
					
					// String
				
						writeString(this.SIGLA_OCUPACIONES,dos);
					
					// String
				
						writeString(this.ESTATURA,dos);
					
					// String
				
						writeString(this.SIGLA_TVIVIENDA,dos);
					
					// String
				
						writeString(this.FECHA_CADUCIDAD,dos);
					
					// String
				
						writeString(this.SIGLA_FUERZA,dos);
					
					// String
				
						writeString(this.CODIGO_GRADO,dos);
					
					// String
				
						writeString(this.SIGLA_GRADO,dos);
					
					// String
				
						writeString(this.SIGLA_UMILITAR,dos);
					
					// String
				
						writeString(this.CODIGO_UMILITAR,dos);
					
					// String
				
						writeString(this.TVINCULACION_SIGLA,dos);
					
					// String
				
						writeString(this.SIGLA_TREGIMEN,dos);
					
					// String
				
						writeString(this.SIGLA_TAFILIADOS,dos);
					
					// String
				
						writeString(this.ESTADO_SIGLA,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ENTIDAD,dos);
					
					// String
				
						writeString(this.ENTA_PRINCIPAL,dos);
					
					// String
				
						writeString(this.FECHA_INGRESO,dos);
					
					// String
				
						writeString(this.ESTADO_ENTIDAD,dos);
					
					// String
				
						writeString(this.GA,dos);
					
					// String
				
						writeString(this.GAR,dos);
					
					// String
				
						writeString(this.CORREO_ELECTRONICO,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// String
				
						writeString(this.FECHA_DEFUNCION,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// String
				
						writeString(this.PLANAFILIACION,dos);
					
					// String
				
						writeString(this.ID_BDUA,dos);
					
					// String
				
						writeString(this.MOTIVO_CAMBIO_ESTADO,dos);
					
					// String
				
						writeString(this.MOTIVO_CAMBIO_ESM,dos);
					
					// String
				
						writeString(this.DISCAPACIDAD,dos);
					
					// String
				
						writeString(this.POBLACION_ESPECIAL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.PERSONAS_ID,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.TIPO_DE_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.SIGLA_SEXO,dos);
					
					// String
				
						writeString(this.DIRECCION,dos);
					
					// String
				
						writeString(this.TELEFONO,dos);
					
					// String
				
						writeString(this.COD_PAIS_RESIDENCIA,dos);
					
					// String
				
						writeString(this.CODIGO_DEPTO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.CODIGO_MUNICIPIO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.LOCALIDAD_RESIDENCIA,dos);
					
					// String
				
						writeString(this.COD_PAIS_NAC,dos);
					
					// String
				
						writeString(this.COD_DEPARTAMENTO_NAC,dos);
					
					// String
				
						writeString(this.COD_MUNICIPIO_NAC,dos);
					
					// String
				
						writeString(this.COD_PAIS_EXP,dos);
					
					// String
				
						writeString(this.COD_DEPARTAMENTO_EXP,dos);
					
					// String
				
						writeString(this.COD_MUNICIPIO_EXP,dos);
					
					// String
				
						writeString(this.FECHA_EXPEDICION_DOCUMENTO,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.GSANGUINEOS,dos);
					
					// String
				
						writeString(this.FACTOR_RH,dos);
					
					// String
				
						writeString(this.SIGLA_NEDUCATIVOS,dos);
					
					// String
				
						writeString(this.CODIGO_ESM,dos);
					
					// String
				
						writeString(this.SIGLA_ADSCRITO,dos);
					
					// String
				
						writeString(this.CODIGO_ETNICAS,dos);
					
					// String
				
						writeString(this.NSOCIOECONOMICOS,dos);
					
					// String
				
						writeString(this.SIGLA_OCUPACIONES,dos);
					
					// String
				
						writeString(this.ESTATURA,dos);
					
					// String
				
						writeString(this.SIGLA_TVIVIENDA,dos);
					
					// String
				
						writeString(this.FECHA_CADUCIDAD,dos);
					
					// String
				
						writeString(this.SIGLA_FUERZA,dos);
					
					// String
				
						writeString(this.CODIGO_GRADO,dos);
					
					// String
				
						writeString(this.SIGLA_GRADO,dos);
					
					// String
				
						writeString(this.SIGLA_UMILITAR,dos);
					
					// String
				
						writeString(this.CODIGO_UMILITAR,dos);
					
					// String
				
						writeString(this.TVINCULACION_SIGLA,dos);
					
					// String
				
						writeString(this.SIGLA_TREGIMEN,dos);
					
					// String
				
						writeString(this.SIGLA_TAFILIADOS,dos);
					
					// String
				
						writeString(this.ESTADO_SIGLA,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ENTIDAD,dos);
					
					// String
				
						writeString(this.ENTA_PRINCIPAL,dos);
					
					// String
				
						writeString(this.FECHA_INGRESO,dos);
					
					// String
				
						writeString(this.ESTADO_ENTIDAD,dos);
					
					// String
				
						writeString(this.GA,dos);
					
					// String
				
						writeString(this.GAR,dos);
					
					// String
				
						writeString(this.CORREO_ELECTRONICO,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// String
				
						writeString(this.FECHA_DEFUNCION,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// String
				
						writeString(this.PLANAFILIACION,dos);
					
					// String
				
						writeString(this.ID_BDUA,dos);
					
					// String
				
						writeString(this.MOTIVO_CAMBIO_ESTADO,dos);
					
					// String
				
						writeString(this.MOTIVO_CAMBIO_ESM,dos);
					
					// String
				
						writeString(this.DISCAPACIDAD,dos);
					
					// String
				
						writeString(this.POBLACION_ESPECIAL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PERSONAS_ID="+PERSONAS_ID);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",TIPO_DE_DOCUMENTO="+TIPO_DE_DOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",SIGLA_SEXO="+SIGLA_SEXO);
		sb.append(",DIRECCION="+DIRECCION);
		sb.append(",TELEFONO="+TELEFONO);
		sb.append(",COD_PAIS_RESIDENCIA="+COD_PAIS_RESIDENCIA);
		sb.append(",CODIGO_DEPTO_RESIDENCIA="+CODIGO_DEPTO_RESIDENCIA);
		sb.append(",CODIGO_MUNICIPIO_RESIDENCIA="+CODIGO_MUNICIPIO_RESIDENCIA);
		sb.append(",LOCALIDAD_RESIDENCIA="+LOCALIDAD_RESIDENCIA);
		sb.append(",COD_PAIS_NAC="+COD_PAIS_NAC);
		sb.append(",COD_DEPARTAMENTO_NAC="+COD_DEPARTAMENTO_NAC);
		sb.append(",COD_MUNICIPIO_NAC="+COD_MUNICIPIO_NAC);
		sb.append(",COD_PAIS_EXP="+COD_PAIS_EXP);
		sb.append(",COD_DEPARTAMENTO_EXP="+COD_DEPARTAMENTO_EXP);
		sb.append(",COD_MUNICIPIO_EXP="+COD_MUNICIPIO_EXP);
		sb.append(",FECHA_EXPEDICION_DOCUMENTO="+FECHA_EXPEDICION_DOCUMENTO);
		sb.append(",FECHA_NACIMIENTO="+FECHA_NACIMIENTO);
		sb.append(",GSANGUINEOS="+GSANGUINEOS);
		sb.append(",FACTOR_RH="+FACTOR_RH);
		sb.append(",SIGLA_NEDUCATIVOS="+SIGLA_NEDUCATIVOS);
		sb.append(",CODIGO_ESM="+CODIGO_ESM);
		sb.append(",SIGLA_ADSCRITO="+SIGLA_ADSCRITO);
		sb.append(",CODIGO_ETNICAS="+CODIGO_ETNICAS);
		sb.append(",NSOCIOECONOMICOS="+NSOCIOECONOMICOS);
		sb.append(",SIGLA_OCUPACIONES="+SIGLA_OCUPACIONES);
		sb.append(",ESTATURA="+ESTATURA);
		sb.append(",SIGLA_TVIVIENDA="+SIGLA_TVIVIENDA);
		sb.append(",FECHA_CADUCIDAD="+FECHA_CADUCIDAD);
		sb.append(",SIGLA_FUERZA="+SIGLA_FUERZA);
		sb.append(",CODIGO_GRADO="+CODIGO_GRADO);
		sb.append(",SIGLA_GRADO="+SIGLA_GRADO);
		sb.append(",SIGLA_UMILITAR="+SIGLA_UMILITAR);
		sb.append(",CODIGO_UMILITAR="+CODIGO_UMILITAR);
		sb.append(",TVINCULACION_SIGLA="+TVINCULACION_SIGLA);
		sb.append(",SIGLA_TREGIMEN="+SIGLA_TREGIMEN);
		sb.append(",SIGLA_TAFILIADOS="+SIGLA_TAFILIADOS);
		sb.append(",ESTADO_SIGLA="+ESTADO_SIGLA);
		sb.append(",DOCUMENTO_ENTIDAD="+DOCUMENTO_ENTIDAD);
		sb.append(",ENTA_PRINCIPAL="+ENTA_PRINCIPAL);
		sb.append(",FECHA_INGRESO="+FECHA_INGRESO);
		sb.append(",ESTADO_ENTIDAD="+ESTADO_ENTIDAD);
		sb.append(",GA="+GA);
		sb.append(",GAR="+GAR);
		sb.append(",CORREO_ELECTRONICO="+CORREO_ELECTRONICO);
		sb.append(",CELULAR="+CELULAR);
		sb.append(",FECHA_DEFUNCION="+FECHA_DEFUNCION);
		sb.append(",OBSERVACIONES="+OBSERVACIONES);
		sb.append(",PLANAFILIACION="+PLANAFILIACION);
		sb.append(",ID_BDUA="+ID_BDUA);
		sb.append(",MOTIVO_CAMBIO_ESTADO="+MOTIVO_CAMBIO_ESTADO);
		sb.append(",MOTIVO_CAMBIO_ESM="+MOTIVO_CAMBIO_ESM);
		sb.append(",DISCAPACIDAD="+DISCAPACIDAD);
		sb.append(",POBLACION_ESPECIAL="+POBLACION_ESPECIAL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row16Struct row16 = new row16Struct();
ArchivoInicialStruct ArchivoInicial = new ArchivoInicialStruct();





	
	/**
	 * [tOracleOutput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_10", false);
		start_Hash.put("tOracleOutput_10", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_10";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"ArchivoInicial");
					}
				
		int tos_count_tOracleOutput_10 = 0;
		






    
    int nb_line_tOracleOutput_10 = 0;
    int nb_line_update_tOracleOutput_10 = 0;
    int nb_line_inserted_tOracleOutput_10 = 0;
    int nb_line_deleted_tOracleOutput_10 = 0;
    int nb_line_rejected_tOracleOutput_10 = 0;

    int tmp_batchUpdateCount_tOracleOutput_10 = 0;

    int deletedCount_tOracleOutput_10=0;
    int updatedCount_tOracleOutput_10=0;
    int insertedCount_tOracleOutput_10=0;
    int rowsToCommitCount_tOracleOutput_10=0;
    int rejectedCount_tOracleOutput_10=0;

    boolean whetherReject_tOracleOutput_10 = false;

    java.sql.Connection conn_tOracleOutput_10 = null;

    //optional table
    String dbschema_tOracleOutput_10 = null;
    String tableName_tOracleOutput_10 = null;
        dbschema_tOracleOutput_10 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_10 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_10=0;

        if(dbschema_tOracleOutput_10 == null || dbschema_tOracleOutput_10.trim().length() == 0) {
            tableName_tOracleOutput_10 = ("TST_ARCHIVO");
        } else {
            tableName_tOracleOutput_10 = dbschema_tOracleOutput_10 + "." + ("TST_ARCHIVO");
        }
                String insert_tOracleOutput_10 = "INSERT INTO " + tableName_tOracleOutput_10 + " (PRIMER_NOMBRE,SEGUNDO_NOMBRE,PRIMER_APELLIDO,SEGUNDO_APELLIDO,TIPO_DE_DOCUMENTO,DOCUMENTO,PAIS_EXP_DOCUMENTO,DEPTO_EXP_DOCUMENTO,MUNICIPIO_EXP_DOCUMENTO,FECHA_EXPEDICION_DOCUMENTO,FECHA_NACIMIENTO,PAIS_NACIMIENTO,DEPARTAMENTO_NACIMIENTO,MUNICIPIO_NACIMIENTO,SEXO,DIRECCION,TELEFONO,PAIS_RESIDENCIA,DEPARTAMENTO_RESIDENCIA,MUNICIPIO_RESIDENCIA,LOCALIDAD_RESIDENCIA,GRUPO_SANGUINEO,FACTOR_RH,OCUPACION,ESTATURA,GRUPO_ETNICO,NSOCIOECONOMICO,TVIVIENDA,NEDUCATIVOS,CODIGO_ESTABLECIMIENTO,ESTABLECIMIENTO_ADSCRITO,ENTIDAD_APORTANTE,CODIGO_GRDMILITAR,SIGLA_GRDMILITAR,FUERZA_MILITAR,CODIGO_UMILITAR,UNIDAD_MILITAR,TIPO_DE_VINCULACION,ESTADO_AFILIACION,FECHA_FIN_AFILIACION,FECHA_VINCULACION,ID_UNICO_PERSONA,ID_UNICO_AFILIADO,TIPO_AFILIADO,ESTADO_ENTIDAD,ENTIDAD_PRINCIPAL,SIGLA_REGIMEN,ID_UNICO_ENTIDAD,CORREO_ELECTRONICO,CELULAR,FECHA_DEFUNCION,OBSERVACIONES,PLANAFILIACION,ID_BDUA,MOTIVO_CAMBIO_ESTADO,MOTIVO_CAMBIO_ESM,DISCAPACIDAD,POBLACION_ESPECIAL) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_10 = conn_tOracleOutput_10.prepareStatement(insert_tOracleOutput_10);
                        resourceMap.put("pstmt_tOracleOutput_10", pstmt_tOracleOutput_10);





 



/**
 * [tOracleOutput_10 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
ArchivoInicialStruct ArchivoInicial_tmp = new ArchivoInicialStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";
	
	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try{
					
						Object filename_tFileInputDelimited_1 = (java.io.InputStream)context.vcontenido;
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited((java.io.InputStream)context.vcontenido, "ISO-8859-1",";","\n",true,0,0,
									limit_tFileInputDelimited_1
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						row16 = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									row16 = new row16Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
							row16.PERSONAS_ID = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
							row16.PRIMER_NOMBRE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 2;
					
							row16.SEGUNDO_NOMBRE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 3;
					
							row16.PRIMER_APELLIDO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 4;
					
							row16.SEGUNDO_APELLIDO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 5;
					
							row16.TIPO_DE_DOCUMENTO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 6;
					
							row16.DOCUMENTO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 7;
					
							row16.SIGLA_SEXO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 8;
					
							row16.DIRECCION = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 9;
					
							row16.TELEFONO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 10;
					
							row16.COD_PAIS_RESIDENCIA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 11;
					
							row16.CODIGO_DEPTO_RESIDENCIA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 12;
					
							row16.CODIGO_MUNICIPIO_RESIDENCIA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 13;
					
							row16.LOCALIDAD_RESIDENCIA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 14;
					
							row16.COD_PAIS_NAC = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 15;
					
							row16.COD_DEPARTAMENTO_NAC = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 16;
					
							row16.COD_MUNICIPIO_NAC = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 17;
					
							row16.COD_PAIS_EXP = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 18;
					
							row16.COD_DEPARTAMENTO_EXP = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 19;
					
							row16.COD_MUNICIPIO_EXP = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 20;
					
							row16.FECHA_EXPEDICION_DOCUMENTO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 21;
					
							row16.FECHA_NACIMIENTO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 22;
					
							row16.GSANGUINEOS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 23;
					
							row16.FACTOR_RH = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 24;
					
							row16.SIGLA_NEDUCATIVOS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 25;
					
							row16.CODIGO_ESM = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 26;
					
							row16.SIGLA_ADSCRITO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 27;
					
							row16.CODIGO_ETNICAS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 28;
					
							row16.NSOCIOECONOMICOS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 29;
					
							row16.SIGLA_OCUPACIONES = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 30;
					
							row16.ESTATURA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 31;
					
							row16.SIGLA_TVIVIENDA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 32;
					
							row16.FECHA_CADUCIDAD = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 33;
					
							row16.SIGLA_FUERZA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 34;
					
							row16.CODIGO_GRADO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 35;
					
							row16.SIGLA_GRADO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 36;
					
							row16.SIGLA_UMILITAR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 37;
					
							row16.CODIGO_UMILITAR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 38;
					
							row16.TVINCULACION_SIGLA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 39;
					
							row16.SIGLA_TREGIMEN = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 40;
					
							row16.SIGLA_TAFILIADOS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 41;
					
							row16.ESTADO_SIGLA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 42;
					
							row16.DOCUMENTO_ENTIDAD = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 43;
					
							row16.ENTA_PRINCIPAL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 44;
					
							row16.FECHA_INGRESO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 45;
					
							row16.ESTADO_ENTIDAD = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 46;
					
							row16.GA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 47;
					
							row16.GAR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 48;
					
							row16.CORREO_ELECTRONICO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 49;
					
							row16.CELULAR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 50;
					
							row16.FECHA_DEFUNCION = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 51;
					
							row16.OBSERVACIONES = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 52;
					
							row16.PLANAFILIACION = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 53;
					
							row16.ID_BDUA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 54;
					
							row16.MOTIVO_CAMBIO_ESTADO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 55;
					
							row16.MOTIVO_CAMBIO_ESM = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 56;
					
							row16.DISCAPACIDAD = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 57;
					
							row16.POBLACION_ESPECIAL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row16 = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row16"
if(row16 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row16"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

ArchivoInicial = null;


// # Output table : 'ArchivoInicial'
// # Filter conditions 
if( 

!row16.PRIMER_NOMBRE.equals("PRIMER_NOMBRE")

 ) {
ArchivoInicial_tmp.PRIMER_NOMBRE = row16.PRIMER_NOMBRE;
ArchivoInicial_tmp.SEGUNDO_NOMBRE = row16.SEGUNDO_NOMBRE;
ArchivoInicial_tmp.PRIMER_APELLIDO = row16.PRIMER_APELLIDO;
ArchivoInicial_tmp.SEGUNDO_APELLIDO = row16.SEGUNDO_APELLIDO;
ArchivoInicial_tmp.TIPO_DE_DOCUMENTO = row16.TIPO_DE_DOCUMENTO;
ArchivoInicial_tmp.DOCUMENTO = row16.DOCUMENTO;
ArchivoInicial_tmp.PAIS_EXP_DOCUMENTO = row16.COD_PAIS_EXP ;
ArchivoInicial_tmp.DEPTO_EXP_DOCUMENTO = row16.COD_DEPARTAMENTO_EXP ;
ArchivoInicial_tmp.MUNICIPIO_EXP_DOCUMENTO = row16.COD_MUNICIPIO_EXP ;
ArchivoInicial_tmp.FECHA_EXPEDICION_DOCUMENTO = (row16.FECHA_EXPEDICION_DOCUMENTO != null && (!row16.FECHA_EXPEDICION_DOCUMENTO.equals("")) ) ?
(TalendDate.isDate(row16.FECHA_EXPEDICION_DOCUMENTO,"dd/mm/yyyy") == true?
row16.FECHA_EXPEDICION_DOCUMENTO:"Invalida"): null ;
ArchivoInicial_tmp.FECHA_NACIMIENTO = (row16.FECHA_NACIMIENTO != null && (!row16.FECHA_NACIMIENTO.equals("")) ) ?
(TalendDate.isDate(row16.FECHA_NACIMIENTO,"dd/mm/yyyy") == true?
row16.FECHA_NACIMIENTO:"Invalida"): null ;
ArchivoInicial_tmp.PAIS_NACIMIENTO = row16.COD_PAIS_NAC ;
ArchivoInicial_tmp.DEPARTAMENTO_NACIMIENTO = row16.COD_DEPARTAMENTO_NAC ;
ArchivoInicial_tmp.MUNICIPIO_NACIMIENTO = row16.COD_MUNICIPIO_NAC ;
ArchivoInicial_tmp.SEXO = row16.SIGLA_SEXO ;
ArchivoInicial_tmp.DIRECCION = row16.DIRECCION;
ArchivoInicial_tmp.TELEFONO = row16.TELEFONO;
ArchivoInicial_tmp.PAIS_RESIDENCIA = row16.COD_PAIS_RESIDENCIA ;
ArchivoInicial_tmp.DEPARTAMENTO_RESIDENCIA = row16.CODIGO_DEPTO_RESIDENCIA ;
ArchivoInicial_tmp.MUNICIPIO_RESIDENCIA = row16.CODIGO_MUNICIPIO_RESIDENCIA ;
ArchivoInicial_tmp.LOCALIDAD_RESIDENCIA = row16.LOCALIDAD_RESIDENCIA;
ArchivoInicial_tmp.GRUPO_SANGUINEO = row16.GSANGUINEOS;
ArchivoInicial_tmp.FACTOR_RH = row16.FACTOR_RH;
ArchivoInicial_tmp.OCUPACION = row16.SIGLA_OCUPACIONES ;
ArchivoInicial_tmp.ESTATURA = row16.ESTATURA;
ArchivoInicial_tmp.GRUPO_ETNICO = row16.CODIGO_ETNICAS ;
ArchivoInicial_tmp.NSOCIOECONOMICO = row16.NSOCIOECONOMICOS ;
ArchivoInicial_tmp.TVIVIENDA = row16.SIGLA_TVIVIENDA ;
ArchivoInicial_tmp.NEDUCATIVOS = row16.SIGLA_NEDUCATIVOS ;
ArchivoInicial_tmp.CODIGO_ESTABLECIMIENTO = row16.CODIGO_ESM ;
ArchivoInicial_tmp.ESTABLECIMIENTO_ADSCRITO = row16.SIGLA_ADSCRITO ;
ArchivoInicial_tmp.ENTIDAD_APORTANTE = row16.DOCUMENTO_ENTIDAD ;
ArchivoInicial_tmp.CODIGO_GRDMILITAR = row16.CODIGO_GRADO ;
ArchivoInicial_tmp.SIGLA_GRDMILITAR = row16.SIGLA_GRADO ;
ArchivoInicial_tmp.FUERZA_MILITAR = row16.SIGLA_FUERZA ;
ArchivoInicial_tmp.CODIGO_UMILITAR = row16.CODIGO_UMILITAR;
ArchivoInicial_tmp.UNIDAD_MILITAR = row16.SIGLA_UMILITAR ;
ArchivoInicial_tmp.TIPO_DE_VINCULACION = row16.TVINCULACION_SIGLA;
ArchivoInicial_tmp.ESTADO_AFILIACION = row16.ESTADO_SIGLA ;
ArchivoInicial_tmp.FECHA_FIN_AFILIACION = (row16.FECHA_CADUCIDAD != null && (!row16.FECHA_CADUCIDAD.equals("")) ) ?
(TalendDate.isDate(row16.FECHA_CADUCIDAD,"dd/mm/yyyy") == true?
row16.FECHA_CADUCIDAD:"Invalida"): null ;
ArchivoInicial_tmp.FECHA_VINCULACION = (row16.FECHA_INGRESO != null && (!row16.FECHA_INGRESO.equals("")) ) ?
(TalendDate.isDate(row16.FECHA_INGRESO,"dd/mm/yyyy") == true?
row16.FECHA_INGRESO:"Invalida"): null ;
ArchivoInicial_tmp.ID_UNICO_PERSONA = (row16.PERSONAS_ID.equals(""))? null : new BigDecimal(row16.PERSONAS_ID) ;
ArchivoInicial_tmp.ID_UNICO_AFILIADO = (row16.GA.equals(""))? null : new BigDecimal(row16.GA) ;
ArchivoInicial_tmp.TIPO_AFILIADO = row16.SIGLA_TAFILIADOS ;
ArchivoInicial_tmp.ESTADO_ENTIDAD = row16.ESTADO_ENTIDAD;
ArchivoInicial_tmp.ENTIDAD_PRINCIPAL = row16.ENTA_PRINCIPAL ;
ArchivoInicial_tmp.SIGLA_REGIMEN = row16.SIGLA_TREGIMEN ;
ArchivoInicial_tmp.ID_UNICO_ENTIDAD = (row16.GAR.equals(""))? null : new BigDecimal(row16.GAR) ;
ArchivoInicial_tmp.CORREO_ELECTRONICO = row16.CORREO_ELECTRONICO ;
ArchivoInicial_tmp.CELULAR = row16.CELULAR ;
ArchivoInicial_tmp.FECHA_DEFUNCION = row16.FECHA_DEFUNCION ;
ArchivoInicial_tmp.OBSERVACIONES = row16.OBSERVACIONES ;
ArchivoInicial_tmp.PLANAFILIACION = row16.PLANAFILIACION ;
ArchivoInicial_tmp.ID_BDUA = (row16.ID_BDUA.equals(""))? null : new BigDecimal(row16.ID_BDUA) ;
ArchivoInicial_tmp.MOTIVO_CAMBIO_ESTADO = row16.MOTIVO_CAMBIO_ESTADO ;
ArchivoInicial_tmp.MOTIVO_CAMBIO_ESM = row16.MOTIVO_CAMBIO_ESM ;
ArchivoInicial_tmp.DISCAPACIDAD = row16.DISCAPACIDAD ;
ArchivoInicial_tmp.POBLACION_ESPECIAL = row16.POBLACION_ESPECIAL;
ArchivoInicial = ArchivoInicial_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "ArchivoInicial"
if(ArchivoInicial != null) { 



	
	/**
	 * [tOracleOutput_10 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_10";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"ArchivoInicial"
						
						);
					}
					



        whetherReject_tOracleOutput_10 = false;
                        if(ArchivoInicial.PRIMER_NOMBRE == null) {
pstmt_tOracleOutput_10.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(1, ArchivoInicial.PRIMER_NOMBRE);
}

                        if(ArchivoInicial.SEGUNDO_NOMBRE == null) {
pstmt_tOracleOutput_10.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(2, ArchivoInicial.SEGUNDO_NOMBRE);
}

                        if(ArchivoInicial.PRIMER_APELLIDO == null) {
pstmt_tOracleOutput_10.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(3, ArchivoInicial.PRIMER_APELLIDO);
}

                        if(ArchivoInicial.SEGUNDO_APELLIDO == null) {
pstmt_tOracleOutput_10.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(4, ArchivoInicial.SEGUNDO_APELLIDO);
}

                        if(ArchivoInicial.TIPO_DE_DOCUMENTO == null) {
pstmt_tOracleOutput_10.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(5, ArchivoInicial.TIPO_DE_DOCUMENTO);
}

                        if(ArchivoInicial.DOCUMENTO == null) {
pstmt_tOracleOutput_10.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(6, ArchivoInicial.DOCUMENTO);
}

                        if(ArchivoInicial.PAIS_EXP_DOCUMENTO == null) {
pstmt_tOracleOutput_10.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(7, ArchivoInicial.PAIS_EXP_DOCUMENTO);
}

                        if(ArchivoInicial.DEPTO_EXP_DOCUMENTO == null) {
pstmt_tOracleOutput_10.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(8, ArchivoInicial.DEPTO_EXP_DOCUMENTO);
}

                        if(ArchivoInicial.MUNICIPIO_EXP_DOCUMENTO == null) {
pstmt_tOracleOutput_10.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(9, ArchivoInicial.MUNICIPIO_EXP_DOCUMENTO);
}

                        if(ArchivoInicial.FECHA_EXPEDICION_DOCUMENTO == null) {
pstmt_tOracleOutput_10.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(10, ArchivoInicial.FECHA_EXPEDICION_DOCUMENTO);
}

                        if(ArchivoInicial.FECHA_NACIMIENTO == null) {
pstmt_tOracleOutput_10.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(11, ArchivoInicial.FECHA_NACIMIENTO);
}

                        if(ArchivoInicial.PAIS_NACIMIENTO == null) {
pstmt_tOracleOutput_10.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(12, ArchivoInicial.PAIS_NACIMIENTO);
}

                        if(ArchivoInicial.DEPARTAMENTO_NACIMIENTO == null) {
pstmt_tOracleOutput_10.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(13, ArchivoInicial.DEPARTAMENTO_NACIMIENTO);
}

                        if(ArchivoInicial.MUNICIPIO_NACIMIENTO == null) {
pstmt_tOracleOutput_10.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(14, ArchivoInicial.MUNICIPIO_NACIMIENTO);
}

                        if(ArchivoInicial.SEXO == null) {
pstmt_tOracleOutput_10.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(15, ArchivoInicial.SEXO);
}

                        if(ArchivoInicial.DIRECCION == null) {
pstmt_tOracleOutput_10.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(16, ArchivoInicial.DIRECCION);
}

                        if(ArchivoInicial.TELEFONO == null) {
pstmt_tOracleOutput_10.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(17, ArchivoInicial.TELEFONO);
}

                        if(ArchivoInicial.PAIS_RESIDENCIA == null) {
pstmt_tOracleOutput_10.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(18, ArchivoInicial.PAIS_RESIDENCIA);
}

                        if(ArchivoInicial.DEPARTAMENTO_RESIDENCIA == null) {
pstmt_tOracleOutput_10.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(19, ArchivoInicial.DEPARTAMENTO_RESIDENCIA);
}

                        if(ArchivoInicial.MUNICIPIO_RESIDENCIA == null) {
pstmt_tOracleOutput_10.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(20, ArchivoInicial.MUNICIPIO_RESIDENCIA);
}

                        if(ArchivoInicial.LOCALIDAD_RESIDENCIA == null) {
pstmt_tOracleOutput_10.setNull(21, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(21, ArchivoInicial.LOCALIDAD_RESIDENCIA);
}

                        if(ArchivoInicial.GRUPO_SANGUINEO == null) {
pstmt_tOracleOutput_10.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(22, ArchivoInicial.GRUPO_SANGUINEO);
}

                        if(ArchivoInicial.FACTOR_RH == null) {
pstmt_tOracleOutput_10.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(23, ArchivoInicial.FACTOR_RH);
}

                        if(ArchivoInicial.OCUPACION == null) {
pstmt_tOracleOutput_10.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(24, ArchivoInicial.OCUPACION);
}

                        if(ArchivoInicial.ESTATURA == null) {
pstmt_tOracleOutput_10.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(25, ArchivoInicial.ESTATURA);
}

                        if(ArchivoInicial.GRUPO_ETNICO == null) {
pstmt_tOracleOutput_10.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(26, ArchivoInicial.GRUPO_ETNICO);
}

                        if(ArchivoInicial.NSOCIOECONOMICO == null) {
pstmt_tOracleOutput_10.setNull(27, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(27, ArchivoInicial.NSOCIOECONOMICO);
}

                        if(ArchivoInicial.TVIVIENDA == null) {
pstmt_tOracleOutput_10.setNull(28, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(28, ArchivoInicial.TVIVIENDA);
}

                        if(ArchivoInicial.NEDUCATIVOS == null) {
pstmt_tOracleOutput_10.setNull(29, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(29, ArchivoInicial.NEDUCATIVOS);
}

                        if(ArchivoInicial.CODIGO_ESTABLECIMIENTO == null) {
pstmt_tOracleOutput_10.setNull(30, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(30, ArchivoInicial.CODIGO_ESTABLECIMIENTO);
}

                        if(ArchivoInicial.ESTABLECIMIENTO_ADSCRITO == null) {
pstmt_tOracleOutput_10.setNull(31, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(31, ArchivoInicial.ESTABLECIMIENTO_ADSCRITO);
}

                        if(ArchivoInicial.ENTIDAD_APORTANTE == null) {
pstmt_tOracleOutput_10.setNull(32, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(32, ArchivoInicial.ENTIDAD_APORTANTE);
}

                        if(ArchivoInicial.CODIGO_GRDMILITAR == null) {
pstmt_tOracleOutput_10.setNull(33, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(33, ArchivoInicial.CODIGO_GRDMILITAR);
}

                        if(ArchivoInicial.SIGLA_GRDMILITAR == null) {
pstmt_tOracleOutput_10.setNull(34, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(34, ArchivoInicial.SIGLA_GRDMILITAR);
}

                        if(ArchivoInicial.FUERZA_MILITAR == null) {
pstmt_tOracleOutput_10.setNull(35, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(35, ArchivoInicial.FUERZA_MILITAR);
}

                        if(ArchivoInicial.CODIGO_UMILITAR == null) {
pstmt_tOracleOutput_10.setNull(36, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(36, ArchivoInicial.CODIGO_UMILITAR);
}

                        if(ArchivoInicial.UNIDAD_MILITAR == null) {
pstmt_tOracleOutput_10.setNull(37, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(37, ArchivoInicial.UNIDAD_MILITAR);
}

                        if(ArchivoInicial.TIPO_DE_VINCULACION == null) {
pstmt_tOracleOutput_10.setNull(38, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(38, ArchivoInicial.TIPO_DE_VINCULACION);
}

                        if(ArchivoInicial.ESTADO_AFILIACION == null) {
pstmt_tOracleOutput_10.setNull(39, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(39, ArchivoInicial.ESTADO_AFILIACION);
}

                        if(ArchivoInicial.FECHA_FIN_AFILIACION == null) {
pstmt_tOracleOutput_10.setNull(40, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(40, ArchivoInicial.FECHA_FIN_AFILIACION);
}

                        if(ArchivoInicial.FECHA_VINCULACION == null) {
pstmt_tOracleOutput_10.setNull(41, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(41, ArchivoInicial.FECHA_VINCULACION);
}

                        pstmt_tOracleOutput_10.setBigDecimal(42, ArchivoInicial.ID_UNICO_PERSONA);

                        pstmt_tOracleOutput_10.setBigDecimal(43, ArchivoInicial.ID_UNICO_AFILIADO);

                        if(ArchivoInicial.TIPO_AFILIADO == null) {
pstmt_tOracleOutput_10.setNull(44, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(44, ArchivoInicial.TIPO_AFILIADO);
}

                        if(ArchivoInicial.ESTADO_ENTIDAD == null) {
pstmt_tOracleOutput_10.setNull(45, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(45, ArchivoInicial.ESTADO_ENTIDAD);
}

                        if(ArchivoInicial.ENTIDAD_PRINCIPAL == null) {
pstmt_tOracleOutput_10.setNull(46, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(46, ArchivoInicial.ENTIDAD_PRINCIPAL);
}

                        if(ArchivoInicial.SIGLA_REGIMEN == null) {
pstmt_tOracleOutput_10.setNull(47, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(47, ArchivoInicial.SIGLA_REGIMEN);
}

                        pstmt_tOracleOutput_10.setBigDecimal(48, ArchivoInicial.ID_UNICO_ENTIDAD);

                        if(ArchivoInicial.CORREO_ELECTRONICO == null) {
pstmt_tOracleOutput_10.setNull(49, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(49, ArchivoInicial.CORREO_ELECTRONICO);
}

                        if(ArchivoInicial.CELULAR == null) {
pstmt_tOracleOutput_10.setNull(50, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(50, ArchivoInicial.CELULAR);
}

                        if(ArchivoInicial.FECHA_DEFUNCION == null) {
pstmt_tOracleOutput_10.setNull(51, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(51, ArchivoInicial.FECHA_DEFUNCION);
}

                        if(ArchivoInicial.OBSERVACIONES == null) {
pstmt_tOracleOutput_10.setNull(52, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(52, ArchivoInicial.OBSERVACIONES);
}

                        if(ArchivoInicial.PLANAFILIACION == null) {
pstmt_tOracleOutput_10.setNull(53, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(53, ArchivoInicial.PLANAFILIACION);
}

                        pstmt_tOracleOutput_10.setBigDecimal(54, ArchivoInicial.ID_BDUA);

                        if(ArchivoInicial.MOTIVO_CAMBIO_ESTADO == null) {
pstmt_tOracleOutput_10.setNull(55, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(55, ArchivoInicial.MOTIVO_CAMBIO_ESTADO);
}

                        if(ArchivoInicial.MOTIVO_CAMBIO_ESM == null) {
pstmt_tOracleOutput_10.setNull(56, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(56, ArchivoInicial.MOTIVO_CAMBIO_ESM);
}

                        if(ArchivoInicial.DISCAPACIDAD == null) {
pstmt_tOracleOutput_10.setNull(57, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(57, ArchivoInicial.DISCAPACIDAD);
}

                        if(ArchivoInicial.POBLACION_ESPECIAL == null) {
pstmt_tOracleOutput_10.setNull(58, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(58, ArchivoInicial.POBLACION_ESPECIAL);
}

                try {
                    nb_line_tOracleOutput_10++;
                    int processedCount_tOracleOutput_10 = pstmt_tOracleOutput_10.executeUpdate();
                    insertedCount_tOracleOutput_10 += processedCount_tOracleOutput_10;
                    rowsToCommitCount_tOracleOutput_10 += processedCount_tOracleOutput_10;
                } catch(java.lang.Exception e_tOracleOutput_10) {
globalMap.put("tOracleOutput_10_ERROR_MESSAGE",e_tOracleOutput_10.getMessage());
                    whetherReject_tOracleOutput_10 = true;
                            System.err.print(e_tOracleOutput_10.getMessage());
                }
            if(!whetherReject_tOracleOutput_10) {
            }

 


	tos_count_tOracleOutput_10++;

/**
 * [tOracleOutput_10 main ] stop
 */
	
	/**
	 * [tOracleOutput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_10";
	
	

 



/**
 * [tOracleOutput_10 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_10";
	
	

 



/**
 * [tOracleOutput_10 process_data_end ] stop
 */

} // End of branch "ArchivoInicial"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row16"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	



            }
            }finally{
                if(!((Object)((java.io.InputStream)context.vcontenido) instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tOracleOutput_10 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_10";
	
	
	



	
        if(pstmt_tOracleOutput_10 != null) {
			
				pstmt_tOracleOutput_10.close();
				resourceMap.remove("pstmt_tOracleOutput_10");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_10", true);

	
	nb_line_deleted_tOracleOutput_10=nb_line_deleted_tOracleOutput_10+ deletedCount_tOracleOutput_10;
	nb_line_update_tOracleOutput_10=nb_line_update_tOracleOutput_10 + updatedCount_tOracleOutput_10;
	nb_line_inserted_tOracleOutput_10=nb_line_inserted_tOracleOutput_10 + insertedCount_tOracleOutput_10;
	nb_line_rejected_tOracleOutput_10=nb_line_rejected_tOracleOutput_10 + rejectedCount_tOracleOutput_10;
	
        globalMap.put("tOracleOutput_10_NB_LINE",nb_line_tOracleOutput_10);
        globalMap.put("tOracleOutput_10_NB_LINE_UPDATED",nb_line_update_tOracleOutput_10);
        globalMap.put("tOracleOutput_10_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_10);
        globalMap.put("tOracleOutput_10_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_10);
        globalMap.put("tOracleOutput_10_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_10);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"ArchivoInicial");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_10", true);
end_Hash.put("tOracleOutput_10", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk13", 0, "ok");
				}
				tOracleInput_3Process(globalMap);



/**
 * [tOracleOutput_10 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tOracleOutput_10 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_10";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_10") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_10 = null;
                if ((pstmtToClose_tOracleOutput_10 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_10")) != null) {
                    pstmtToClose_tOracleOutput_10.close();
                }
    }
 



/**
 * [tOracleOutput_10 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	


public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer REGISTROS;

				public Integer getREGISTROS () {
					return this.REGISTROS;
				}

				public Boolean REGISTROSIsNullable(){
				    return true;
				}
				public Boolean REGISTROSIsKey(){
				    return false;
				}
				public Integer REGISTROSLength(){
				    return null;
				}
				public Integer REGISTROSPrecision(){
				    return null;
				}
				public String REGISTROSDefault(){
				
					return null;
				
				}
				public String REGISTROSComment(){
				
				    return "";
				
				}
				public String REGISTROSPattern(){
				
					return "";
				
				}
				public String REGISTROSOriginalDbColumnName(){
				
					return "REGISTROS";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.REGISTROS = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.REGISTROS = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.REGISTROS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.REGISTROS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("REGISTROS="+String.valueOf(REGISTROS));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row18Struct row18 = new row18Struct();




	
	/**
	 * [tJavaRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_5", false);
		start_Hash.put("tJavaRow_5", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row18");
					}
				
		int tos_count_tJavaRow_5 = 0;
		

int nb_line_tJavaRow_5 = 0;

 



/**
 * [tJavaRow_5 begin ] stop
 */



	
	/**
	 * [tOracleInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_3", false);
		start_Hash.put("tOracleInput_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_3";
	
	
		int tos_count_tOracleInput_3 = 0;
		
	


	
		    int nb_line_tOracleInput_3 = 0;
		    java.sql.Connection conn_tOracleInput_3 = null;
				conn_tOracleInput_3 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_3 = false;
				boolean isConnectionWrapped_tOracleInput_3 = !(conn_tOracleInput_3 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_3.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_3 = null;
                if (isConnectionWrapped_tOracleInput_3) {
					unwrappedOraConn_tOracleInput_3 = conn_tOracleInput_3.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_3 != null) {
                        isTimeZoneNull_tOracleInput_3 = (unwrappedOraConn_tOracleInput_3.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_3 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_3).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_3) {
					java.sql.Statement stmtGetTZ_tOracleInput_3 = conn_tOracleInput_3.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_3 = stmtGetTZ_tOracleInput_3.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_3 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_3.next()) {
						sessionTimezone_tOracleInput_3 = rsGetTZ_tOracleInput_3.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_3 && unwrappedOraConn_tOracleInput_3 != null) {
                        unwrappedOraConn_tOracleInput_3.setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_3).setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_3 = conn_tOracleInput_3.createStatement();

		    String dbquery_tOracleInput_3 = "select count(1) registros from tst_archivo";
		    

		    globalMap.put("tOracleInput_3_QUERY",dbquery_tOracleInput_3);

		    java.sql.ResultSet rs_tOracleInput_3 = null;

		    try {
		    	rs_tOracleInput_3 = stmt_tOracleInput_3.executeQuery(dbquery_tOracleInput_3);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_3 = rs_tOracleInput_3.getMetaData();
		    	int colQtyInRs_tOracleInput_3 = rsmd_tOracleInput_3.getColumnCount();

		    String tmpContent_tOracleInput_3 = null;
		    
		    
		    while (rs_tOracleInput_3.next()) {
		        nb_line_tOracleInput_3++;
		        
							if(colQtyInRs_tOracleInput_3 < 1) {
								row18.REGISTROS = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(1) != null) {
						row18.REGISTROS = rs_tOracleInput_3.getInt(1);
					} else {
				
						row18.REGISTROS = null;
					}
		                    }
					




 



/**
 * [tOracleInput_3 begin ] stop
 */
	
	/**
	 * [tOracleInput_3 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 


	tos_count_tOracleInput_3++;

/**
 * [tOracleInput_3 main ] stop
 */
	
	/**
	 * [tOracleInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_5 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row18"
						
						);
					}
					

    context.vcount_registros = row18.REGISTROS;
    nb_line_tJavaRow_5++;   

 


	tos_count_tJavaRow_5++;

/**
 * [tJavaRow_5 main ] stop
 */
	
	/**
	 * [tJavaRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_3 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

}
}finally{
	if (rs_tOracleInput_3 != null) {
		rs_tOracleInput_3.close();
	}
	if (stmt_tOracleInput_3 != null) {
		stmt_tOracleInput_3.close();
	}
}

globalMap.put("tOracleInput_3_NB_LINE",nb_line_tOracleInput_3);
 

ok_Hash.put("tOracleInput_3", true);
end_Hash.put("tOracleInput_3", System.currentTimeMillis());




/**
 * [tOracleInput_3 end ] stop
 */

	
	/**
	 * [tJavaRow_5 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

globalMap.put("tJavaRow_5_NB_LINE",nb_line_tJavaRow_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row18");
			  	}
			  	
 

ok_Hash.put("tJavaRow_5", true);
end_Hash.put("tJavaRow_5", System.currentTimeMillis());

   			if (context.vcount_registros > 0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If11", 0, "true");
					}
				tFixedFlowInput_10Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If11", 0, "false");
					}   	 
   				}
   			if (context.vcount_registros == 0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If8", 0, "true");
					}
				tFixedFlowInput_8Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If8", 0, "false");
					}   	 
   				}



/**
 * [tJavaRow_5 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 finally ] stop
 */

	
	/**
	 * [tJavaRow_5 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row35Struct implements routines.system.IPersistableRow<row35Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer procesos_id;

				public Integer getProcesos_id () {
					return this.procesos_id;
				}

				public Boolean procesos_idIsNullable(){
				    return true;
				}
				public Boolean procesos_idIsKey(){
				    return false;
				}
				public Integer procesos_idLength(){
				    return null;
				}
				public Integer procesos_idPrecision(){
				    return null;
				}
				public String procesos_idDefault(){
				
					return null;
				
				}
				public String procesos_idComment(){
				
				    return "";
				
				}
				public String procesos_idPattern(){
				
					return "";
				
				}
				public String procesos_idOriginalDbColumnName(){
				
					return "procesos_id";
				
				}

				
			    public Integer usuarios_id;

				public Integer getUsuarios_id () {
					return this.usuarios_id;
				}

				public Boolean usuarios_idIsNullable(){
				    return true;
				}
				public Boolean usuarios_idIsKey(){
				    return false;
				}
				public Integer usuarios_idLength(){
				    return null;
				}
				public Integer usuarios_idPrecision(){
				    return null;
				}
				public String usuarios_idDefault(){
				
					return null;
				
				}
				public String usuarios_idComment(){
				
				    return "";
				
				}
				public String usuarios_idPattern(){
				
					return "";
				
				}
				public String usuarios_idOriginalDbColumnName(){
				
					return "usuarios_id";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.procesos_id = readInteger(dis);
					
						this.usuarios_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.procesos_id = readInteger(dis);
					
						this.usuarios_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.procesos_id,dos);
					
					// Integer
				
						writeInteger(this.usuarios_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.procesos_id,dos);
					
					// Integer
				
						writeInteger(this.usuarios_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("procesos_id="+String.valueOf(procesos_id));
		sb.append(",usuarios_id="+String.valueOf(usuarios_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row35Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer procesos_id_;

				public Integer getProcesos_id_ () {
					return this.procesos_id_;
				}

				public Boolean procesos_id_IsNullable(){
				    return true;
				}
				public Boolean procesos_id_IsKey(){
				    return false;
				}
				public Integer procesos_id_Length(){
				    return null;
				}
				public Integer procesos_id_Precision(){
				    return null;
				}
				public String procesos_id_Default(){
				
					return null;
				
				}
				public String procesos_id_Comment(){
				
				    return "";
				
				}
				public String procesos_id_Pattern(){
				
					return "";
				
				}
				public String procesos_id_OriginalDbColumnName(){
				
					return "procesos_id_";
				
				}

				
			    public Integer usuarios_id_;

				public Integer getUsuarios_id_ () {
					return this.usuarios_id_;
				}

				public Boolean usuarios_id_IsNullable(){
				    return true;
				}
				public Boolean usuarios_id_IsKey(){
				    return false;
				}
				public Integer usuarios_id_Length(){
				    return null;
				}
				public Integer usuarios_id_Precision(){
				    return null;
				}
				public String usuarios_id_Default(){
				
					return null;
				
				}
				public String usuarios_id_Comment(){
				
				    return "";
				
				}
				public String usuarios_id_Pattern(){
				
					return "";
				
				}
				public String usuarios_id_OriginalDbColumnName(){
				
					return "usuarios_id_";
				
				}

				
			    public Integer archivos_id_;

				public Integer getArchivos_id_ () {
					return this.archivos_id_;
				}

				public Boolean archivos_id_IsNullable(){
				    return true;
				}
				public Boolean archivos_id_IsKey(){
				    return false;
				}
				public Integer archivos_id_Length(){
				    return null;
				}
				public Integer archivos_id_Precision(){
				    return null;
				}
				public String archivos_id_Default(){
				
					return null;
				
				}
				public String archivos_id_Comment(){
				
				    return "";
				
				}
				public String archivos_id_Pattern(){
				
					return "";
				
				}
				public String archivos_id_OriginalDbColumnName(){
				
					return "archivos_id_";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.procesos_id_ = readInteger(dis);
					
						this.usuarios_id_ = readInteger(dis);
					
						this.archivos_id_ = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.procesos_id_ = readInteger(dis);
					
						this.usuarios_id_ = readInteger(dis);
					
						this.archivos_id_ = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.procesos_id_,dos);
					
					// Integer
				
						writeInteger(this.usuarios_id_,dos);
					
					// Integer
				
						writeInteger(this.archivos_id_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.procesos_id_,dos);
					
					// Integer
				
						writeInteger(this.usuarios_id_,dos);
					
					// Integer
				
						writeInteger(this.archivos_id_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("procesos_id_="+String.valueOf(procesos_id_));
		sb.append(",usuarios_id_="+String.valueOf(usuarios_id_));
		sb.append(",archivos_id_="+String.valueOf(archivos_id_));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer procesos_id_;

				public Integer getProcesos_id_ () {
					return this.procesos_id_;
				}

				public Boolean procesos_id_IsNullable(){
				    return true;
				}
				public Boolean procesos_id_IsKey(){
				    return false;
				}
				public Integer procesos_id_Length(){
				    return null;
				}
				public Integer procesos_id_Precision(){
				    return null;
				}
				public String procesos_id_Default(){
				
					return null;
				
				}
				public String procesos_id_Comment(){
				
				    return "";
				
				}
				public String procesos_id_Pattern(){
				
					return "";
				
				}
				public String procesos_id_OriginalDbColumnName(){
				
					return "procesos_id_";
				
				}

				
			    public Integer usuarios_id_;

				public Integer getUsuarios_id_ () {
					return this.usuarios_id_;
				}

				public Boolean usuarios_id_IsNullable(){
				    return true;
				}
				public Boolean usuarios_id_IsKey(){
				    return false;
				}
				public Integer usuarios_id_Length(){
				    return null;
				}
				public Integer usuarios_id_Precision(){
				    return null;
				}
				public String usuarios_id_Default(){
				
					return null;
				
				}
				public String usuarios_id_Comment(){
				
				    return "";
				
				}
				public String usuarios_id_Pattern(){
				
					return "";
				
				}
				public String usuarios_id_OriginalDbColumnName(){
				
					return "usuarios_id_";
				
				}

				
			    public Integer archivos_id_;

				public Integer getArchivos_id_ () {
					return this.archivos_id_;
				}

				public Boolean archivos_id_IsNullable(){
				    return true;
				}
				public Boolean archivos_id_IsKey(){
				    return false;
				}
				public Integer archivos_id_Length(){
				    return null;
				}
				public Integer archivos_id_Precision(){
				    return null;
				}
				public String archivos_id_Default(){
				
					return null;
				
				}
				public String archivos_id_Comment(){
				
				    return "";
				
				}
				public String archivos_id_Pattern(){
				
					return "";
				
				}
				public String archivos_id_OriginalDbColumnName(){
				
					return "archivos_id_";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.procesos_id_ = readInteger(dis);
					
						this.usuarios_id_ = readInteger(dis);
					
						this.archivos_id_ = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.procesos_id_ = readInteger(dis);
					
						this.usuarios_id_ = readInteger(dis);
					
						this.archivos_id_ = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.procesos_id_,dos);
					
					// Integer
				
						writeInteger(this.usuarios_id_,dos);
					
					// Integer
				
						writeInteger(this.archivos_id_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.procesos_id_,dos);
					
					// Integer
				
						writeInteger(this.usuarios_id_,dos);
					
					// Integer
				
						writeInteger(this.archivos_id_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("procesos_id_="+String.valueOf(procesos_id_));
		sb.append(",usuarios_id_="+String.valueOf(usuarios_id_));
		sb.append(",archivos_id_="+String.valueOf(archivos_id_));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row23Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row23Struct row23 = new row23Struct();
row22Struct row22 = new row22Struct();
row35Struct row35 = new row35Struct();






	
	/**
	 * [tOracleRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleRow_2", false);
		start_Hash.put("tOracleRow_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row35");
					}
				
		int tos_count_tOracleRow_2 = 0;
		

	java.sql.Connection conn_tOracleRow_2 = null;
	String query_tOracleRow_2 = "";
	boolean whetherReject_tOracleRow_2 = false;
	int count_tOracleRow_2 = 0;
				conn_tOracleRow_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
			
        resourceMap.put("conn_tOracleRow_2", conn_tOracleRow_2);
        java.sql.Statement stmt_tOracleRow_2 = conn_tOracleRow_2.createStatement();
        resourceMap.put("stmt_tOracleRow_2", stmt_tOracleRow_2);

 



/**
 * [tOracleRow_2 begin ] stop
 */



	
	/**
	 * [tJavaRow_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_6", false);
		start_Hash.put("tJavaRow_6", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row22");
					}
				
		int tos_count_tJavaRow_6 = 0;
		

int nb_line_tJavaRow_6 = 0;

 



/**
 * [tJavaRow_6 begin ] stop
 */



	
	/**
	 * [tOracleSP_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_5", false);
		start_Hash.put("tOracleSP_5", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row23");
					}
				
		int tos_count_tOracleSP_5 = 0;
		

	java.sql.Connection connection_tOracleSP_5 = null;
	connection_tOracleSP_5 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_1");
	

java.sql.CallableStatement statement_tOracleSP_5 = connection_tOracleSP_5.prepareCall("{call " + "cms2.insafiprocesos" + "(?,?,?)}");

java.sql.Timestamp tmpDate_tOracleSP_5;
String tmpString_tOracleSP_5;

 



/**
 * [tOracleSP_5 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_10", false);
		start_Hash.put("tFixedFlowInput_10", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_10";
	
	
		int tos_count_tFixedFlowInput_10 = 0;
		

	    for (int i_tFixedFlowInput_10 = 0 ; i_tFixedFlowInput_10 < 1 ; i_tFixedFlowInput_10++) {
	                	            	
    	            		row23.procesos_id_ = null;        	            	
    	            	        	            	
    	            		row23.usuarios_id_ = null;        	            	
    	            	        	            	
    	            		row23.archivos_id_ = context.vafiarchivos_id;
    	            	

 



/**
 * [tFixedFlowInput_10 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_10 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_10";
	
	

 


	tos_count_tFixedFlowInput_10++;

/**
 * [tFixedFlowInput_10 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_10";
	
	

 



/**
 * [tFixedFlowInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tOracleSP_5 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row23"
						
						);
					}
					

			// code for the argument 1 (procesos_id_) of type 'OUT AUTOMAPPING'
					statement_tOracleSP_5.registerOutParameter(1, java.sql.Types.INTEGER);
			// code for the argument 2 (usuarios_id_) of type 'OUT AUTOMAPPING'
					statement_tOracleSP_5.registerOutParameter(2, java.sql.Types.INTEGER);
			// code for the argument 3 (archivos_id_) of type 'IN AUTOMAPPING'
    					if (row23.archivos_id_ == null) {
    						statement_tOracleSP_5.setNull(3, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_5.setInt(3, row23.archivos_id_);
    					}
    					
		statement_tOracleSP_5.execute();
		
									row22.procesos_id_ = statement_tOracleSP_5.getInt(1);
									
									if (statement_tOracleSP_5.wasNull()) {
										row22.procesos_id_ = null;
									}
									
									row22.usuarios_id_ = statement_tOracleSP_5.getInt(2);
									
									if (statement_tOracleSP_5.wasNull()) {
										row22.usuarios_id_ = null;
									}
									
								row22.archivos_id_ = row23.archivos_id_;
								

 


	tos_count_tOracleSP_5++;

/**
 * [tOracleSP_5 main ] stop
 */
	
	/**
	 * [tOracleSP_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_5";
	
	

 



/**
 * [tOracleSP_5 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_6 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row22"
						
						);
					}
					

    //Code generate according to input schema and output schema
context.vprocesos_id = row22.procesos_id_;
context.vusuarios_id = row22.usuarios_id_;


    nb_line_tJavaRow_6++;   

 


	tos_count_tJavaRow_6++;

/**
 * [tJavaRow_6 main ] stop
 */
	
	/**
	 * [tJavaRow_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

 



/**
 * [tJavaRow_6 process_data_begin ] stop
 */

	
	/**
	 * [tOracleRow_2 main ] start
	 */

	

	
	
	currentComponent="tOracleRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row35"
						
						);
					}
					

query_tOracleRow_2 = "truncate table tst_carguemasivo";
whetherReject_tOracleRow_2 = false;
globalMap.put("tOracleRow_2_QUERY",query_tOracleRow_2);
try {
		stmt_tOracleRow_2.execute(query_tOracleRow_2);
		
	} catch (java.lang.Exception e) {
globalMap.put("tOracleRow_2_ERROR_MESSAGE",e.getMessage());
		whetherReject_tOracleRow_2 = true;
		
				System.err.print(e.getMessage());
				
	}
	

 


	tos_count_tOracleRow_2++;

/**
 * [tOracleRow_2 main ] stop
 */
	
	/**
	 * [tOracleRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleRow_2";
	
	

 



/**
 * [tOracleRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleRow_2";
	
	

 



/**
 * [tOracleRow_2 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

 



/**
 * [tJavaRow_6 process_data_end ] stop
 */



	
	/**
	 * [tOracleSP_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_5";
	
	

 



/**
 * [tOracleSP_5 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_10";
	
	

 



/**
 * [tFixedFlowInput_10 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_10 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_10";
	
	

        }
        globalMap.put("tFixedFlowInput_10_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_10", true);
end_Hash.put("tFixedFlowInput_10", System.currentTimeMillis());




/**
 * [tFixedFlowInput_10 end ] stop
 */

	
	/**
	 * [tOracleSP_5 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_5";
	
	


	statement_tOracleSP_5.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row23");
			  	}
			  	
 

ok_Hash.put("tOracleSP_5", true);
end_Hash.put("tOracleSP_5", System.currentTimeMillis());




/**
 * [tOracleSP_5 end ] stop
 */

	
	/**
	 * [tJavaRow_6 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

globalMap.put("tJavaRow_6_NB_LINE",nb_line_tJavaRow_6);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row22");
			  	}
			  	
 

ok_Hash.put("tJavaRow_6", true);
end_Hash.put("tJavaRow_6", System.currentTimeMillis());




/**
 * [tJavaRow_6 end ] stop
 */

	
	/**
	 * [tOracleRow_2 end ] start
	 */

	

	
	
	currentComponent="tOracleRow_2";
	
	

	globalMap.put("tOracleRow_2_NB_LINE", count_tOracleRow_2);
        stmt_tOracleRow_2.close();
        resourceMap.remove("stmt_tOracleRow_2");
    resourceMap.put("statementClosed_tOracleRow_2", true);
    resourceMap.put("finish_tOracleRow_2", true);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row35");
			  	}
			  	
 

ok_Hash.put("tOracleRow_2", true);
end_Hash.put("tOracleRow_2", System.currentTimeMillis());




/**
 * [tOracleRow_2 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_10 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_10";
	
	

 



/**
 * [tFixedFlowInput_10 finally ] stop
 */

	
	/**
	 * [tOracleSP_5 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_5";
	
	

 



/**
 * [tOracleSP_5 finally ] stop
 */

	
	/**
	 * [tJavaRow_6 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

 



/**
 * [tJavaRow_6 finally ] stop
 */

	
	/**
	 * [tOracleRow_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleRow_2";
	
	

    if (resourceMap.get("statementClosed_tOracleRow_2") == null) {
            java.sql.Statement stmtToClose_tOracleRow_2 = null;
            if ((stmtToClose_tOracleRow_2 = (java.sql.Statement) resourceMap.remove("stmt_tOracleRow_2")) != null) {
                stmtToClose_tOracleRow_2.close();
            }
    }
 



/**
 * [tOracleRow_2 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_10_SUBPROCESS_STATE", 1);
	}
	


public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer archivos_id_;

				public Integer getArchivos_id_ () {
					return this.archivos_id_;
				}

				public Boolean archivos_id_IsNullable(){
				    return true;
				}
				public Boolean archivos_id_IsKey(){
				    return false;
				}
				public Integer archivos_id_Length(){
				    return null;
				}
				public Integer archivos_id_Precision(){
				    return null;
				}
				public String archivos_id_Default(){
				
					return null;
				
				}
				public String archivos_id_Comment(){
				
				    return "";
				
				}
				public String archivos_id_Pattern(){
				
					return "";
				
				}
				public String archivos_id_OriginalDbColumnName(){
				
					return "archivos_id_";
				
				}

				
			    public Integer estado_;

				public Integer getEstado_ () {
					return this.estado_;
				}

				public Boolean estado_IsNullable(){
				    return true;
				}
				public Boolean estado_IsKey(){
				    return false;
				}
				public Integer estado_Length(){
				    return null;
				}
				public Integer estado_Precision(){
				    return null;
				}
				public String estado_Default(){
				
					return null;
				
				}
				public String estado_Comment(){
				
				    return "";
				
				}
				public String estado_Pattern(){
				
					return "";
				
				}
				public String estado_OriginalDbColumnName(){
				
					return "estado_";
				
				}

				
			    public java.util.Date finicio_;

				public java.util.Date getFinicio_ () {
					return this.finicio_;
				}

				public Boolean finicio_IsNullable(){
				    return true;
				}
				public Boolean finicio_IsKey(){
				    return false;
				}
				public Integer finicio_Length(){
				    return null;
				}
				public Integer finicio_Precision(){
				    return null;
				}
				public String finicio_Default(){
				
					return null;
				
				}
				public String finicio_Comment(){
				
				    return "";
				
				}
				public String finicio_Pattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String finicio_OriginalDbColumnName(){
				
					return "finicio_";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.archivos_id_ = readInteger(dis);
					
						this.estado_ = readInteger(dis);
					
					this.finicio_ = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.archivos_id_ = readInteger(dis);
					
						this.estado_ = readInteger(dis);
					
					this.finicio_ = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.archivos_id_,dos);
					
					// Integer
				
						writeInteger(this.estado_,dos);
					
					// java.util.Date
				
						writeDate(this.finicio_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.archivos_id_,dos);
					
					// Integer
				
						writeInteger(this.estado_,dos);
					
					// java.util.Date
				
						writeDate(this.finicio_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("archivos_id_="+String.valueOf(archivos_id_));
		sb.append(",estado_="+String.valueOf(estado_));
		sb.append(",finicio_="+String.valueOf(finicio_));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row19Struct row19 = new row19Struct();




	
	/**
	 * [tOracleSP_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_4", false);
		start_Hash.put("tOracleSP_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row19");
					}
				
		int tos_count_tOracleSP_4 = 0;
		

	java.sql.Connection connection_tOracleSP_4 = null;
	connection_tOracleSP_4 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_1");
	

java.sql.CallableStatement statement_tOracleSP_4 = connection_tOracleSP_4.prepareCall("{call " + "cms2.updestadoarchivo" + "(?,?,?)}");

java.sql.Timestamp tmpDate_tOracleSP_4;
String tmpString_tOracleSP_4;

 



/**
 * [tOracleSP_4 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_8", false);
		start_Hash.put("tFixedFlowInput_8", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_8";
	
	
		int tos_count_tFixedFlowInput_8 = 0;
		

	    for (int i_tFixedFlowInput_8 = 0 ; i_tFixedFlowInput_8 < 1 ; i_tFixedFlowInput_8++) {
	                	            	
    	            		row19.archivos_id_ = context.vafiarchivos_id;
    	            	        	            	
    	            		row19.estado_ = 8;
    	            	        	            	
    	            		row19.finicio_ = context.vfinicio;
    	            	

 



/**
 * [tFixedFlowInput_8 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_8 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_8";
	
	

 


	tos_count_tFixedFlowInput_8++;

/**
 * [tFixedFlowInput_8 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_8";
	
	

 



/**
 * [tFixedFlowInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tOracleSP_4 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row19"
						
						);
					}
					

			// code for the argument 1 (archivos_id_) of type 'IN AUTOMAPPING'
    					if (row19.archivos_id_ == null) {
    						statement_tOracleSP_4.setNull(1, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_4.setInt(1, row19.archivos_id_);
    					}
    					
			// code for the argument 2 (estado_) of type 'IN AUTOMAPPING'
    					if (row19.estado_ == null) {
    						statement_tOracleSP_4.setNull(2, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_4.setInt(2, row19.estado_);
    					}
    					
			// code for the argument 3 (finicio_) of type 'IN TIMESTAMP'
    					if (row19.finicio_ == null) {
    						statement_tOracleSP_4.setNull(3, java.sql.Types.DATE);
    					} else {
    					
    					statement_tOracleSP_4.setTimestamp(3, new java.sql.Timestamp(row19.finicio_.getTime()));
    					
    					}
    					
		statement_tOracleSP_4.execute();
		

 


	tos_count_tOracleSP_4++;

/**
 * [tOracleSP_4 main ] stop
 */
	
	/**
	 * [tOracleSP_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_4";
	
	

 



/**
 * [tOracleSP_4 process_data_begin ] stop
 */
	
	/**
	 * [tOracleSP_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_4";
	
	

 



/**
 * [tOracleSP_4 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_8";
	
	

 



/**
 * [tFixedFlowInput_8 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_8 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_8";
	
	

        }
        globalMap.put("tFixedFlowInput_8_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_8", true);
end_Hash.put("tFixedFlowInput_8", System.currentTimeMillis());




/**
 * [tFixedFlowInput_8 end ] stop
 */

	
	/**
	 * [tOracleSP_4 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_4";
	
	


	statement_tOracleSP_4.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row19");
			  	}
			  	
 

ok_Hash.put("tOracleSP_4", true);
end_Hash.put("tOracleSP_4", System.currentTimeMillis());

   			if (context.vcount_registros == 0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If7", 0, "true");
					}
				tFixedFlowInput_9Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If7", 0, "false");
					}   	 
   				}



/**
 * [tOracleSP_4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_8 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_8";
	
	

 



/**
 * [tFixedFlowInput_8 finally ] stop
 */

	
	/**
	 * [tOracleSP_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_4";
	
	

 



/**
 * [tOracleSP_4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public String respuesta;

				public String getRespuesta () {
					return this.respuesta;
				}

				public Boolean respuestaIsNullable(){
				    return true;
				}
				public Boolean respuestaIsKey(){
				    return false;
				}
				public Integer respuestaLength(){
				    return null;
				}
				public Integer respuestaPrecision(){
				    return null;
				}
				public String respuestaDefault(){
				
					return null;
				
				}
				public String respuestaComment(){
				
				    return "";
				
				}
				public String respuestaPattern(){
				
					return "";
				
				}
				public String respuestaOriginalDbColumnName(){
				
					return "respuesta";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.respuesta = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.respuesta = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.respuesta,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.respuesta,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("respuesta="+respuesta);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row21Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public String respuesta;

				public String getRespuesta () {
					return this.respuesta;
				}

				public Boolean respuestaIsNullable(){
				    return true;
				}
				public Boolean respuestaIsKey(){
				    return false;
				}
				public Integer respuestaLength(){
				    return null;
				}
				public Integer respuestaPrecision(){
				    return null;
				}
				public String respuestaDefault(){
				
					return null;
				
				}
				public String respuestaComment(){
				
				    return "";
				
				}
				public String respuestaPattern(){
				
					return "";
				
				}
				public String respuestaOriginalDbColumnName(){
				
					return "respuesta";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.respuesta = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.respuesta = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.respuesta,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.respuesta,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("respuesta="+respuesta);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row20Struct row20 = new row20Struct();
row20Struct row21 = row20;





	
	/**
	 * [tDie_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_4", false);
		start_Hash.put("tDie_4", System.currentTimeMillis());
		
	
	currentComponent="tDie_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row21");
					}
				
		int tos_count_tDie_4 = 0;
		

 



/**
 * [tDie_4 begin ] stop
 */



	
	/**
	 * [tBufferOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tBufferOutput_4", false);
		start_Hash.put("tBufferOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tBufferOutput_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row20");
					}
				
		int tos_count_tBufferOutput_4 = 0;
		

 



/**
 * [tBufferOutput_4 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_9", false);
		start_Hash.put("tFixedFlowInput_9", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_9";
	
	
		int tos_count_tFixedFlowInput_9 = 0;
		

	    for (int i_tFixedFlowInput_9 = 0 ; i_tFixedFlowInput_9 < 1 ; i_tFixedFlowInput_9++) {
	                	            	
    	            		row20.respuesta = "ERROR: No hay registros por procesar";
    	            	

 



/**
 * [tFixedFlowInput_9 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_9 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_9";
	
	

 


	tos_count_tFixedFlowInput_9++;

/**
 * [tFixedFlowInput_9 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_9";
	
	

 



/**
 * [tFixedFlowInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tBufferOutput_4 main ] start
	 */

	

	
	
	currentComponent="tBufferOutput_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row20"
						
						);
					}
					



String[] row_tBufferOutput_4=new String[]{"",};		
	    if(row20.respuesta != null){
	        
	            row_tBufferOutput_4[0] = row20.respuesta;
	                        			    
	    }else{
	    	row_tBufferOutput_4[0] = null;
	    }
	globalBuffer.add(row_tBufferOutput_4);	
	
 
     row21 = row20;


	tos_count_tBufferOutput_4++;

/**
 * [tBufferOutput_4 main ] stop
 */
	
	/**
	 * [tBufferOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tBufferOutput_4";
	
	

 



/**
 * [tBufferOutput_4 process_data_begin ] stop
 */

	
	/**
	 * [tDie_4 main ] start
	 */

	

	
	
	currentComponent="tDie_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row21"
						
						);
					}
					

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_4", 5, "ERROR: No se encuentra el id del archivo en la tabla AFI_ARCHIVOS", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_4_DIE_PRIORITY", 5);
	System.err.println("ERROR: No se encuentra el id del archivo en la tabla AFI_ARCHIVOS");
	
	globalMap.put("tDie_4_DIE_MESSAGE", "ERROR: No se encuentra el id del archivo en la tabla AFI_ARCHIVOS");
	globalMap.put("tDie_4_DIE_MESSAGES", "ERROR: No se encuentra el id del archivo en la tabla AFI_ARCHIVOS");
	
	} catch (Exception | Error e_tDie_4) {
	    globalMap.put("tDie_4_ERROR_MESSAGE",e_tDie_4.getMessage());
		logIgnoredError(String.format("tDie_4 - tDie failed to log message due to internal error: %s", e_tDie_4), e_tDie_4);
	}
	
	currentComponent = "tDie_4";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_4_DIE_CODE", errorCode);        

    
	if(true){	
		TDieException e_tDie_4 = new TDieException();

		

		throw e_tDie_4;
	}

 


	tos_count_tDie_4++;

/**
 * [tDie_4 main ] stop
 */
	
	/**
	 * [tDie_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_4";
	
	

 



/**
 * [tDie_4 process_data_begin ] stop
 */
	
	/**
	 * [tDie_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_4";
	
	

 



/**
 * [tDie_4 process_data_end ] stop
 */



	
	/**
	 * [tBufferOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_4";
	
	

 



/**
 * [tBufferOutput_4 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_9";
	
	

 



/**
 * [tFixedFlowInput_9 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_9 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_9";
	
	

        }
        globalMap.put("tFixedFlowInput_9_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_9", true);
end_Hash.put("tFixedFlowInput_9", System.currentTimeMillis());




/**
 * [tFixedFlowInput_9 end ] stop
 */

	
	/**
	 * [tBufferOutput_4 end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_4";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row20");
			  	}
			  	
 

ok_Hash.put("tBufferOutput_4", true);
end_Hash.put("tBufferOutput_4", System.currentTimeMillis());




/**
 * [tBufferOutput_4 end ] stop
 */

	
	/**
	 * [tDie_4 end ] start
	 */

	

	
	
	currentComponent="tDie_4";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row21");
			  	}
			  	
 

ok_Hash.put("tDie_4", true);
end_Hash.put("tDie_4", System.currentTimeMillis());




/**
 * [tDie_4 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_9 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_9";
	
	

 



/**
 * [tFixedFlowInput_9 finally ] stop
 */

	
	/**
	 * [tBufferOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tBufferOutput_4";
	
	

 



/**
 * [tBufferOutput_4 finally ] stop
 */

	
	/**
	 * [tDie_4 finally ] start
	 */

	

	
	
	currentComponent="tDie_4";
	
	

 



/**
 * [tDie_4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer archivos_id_;

				public Integer getArchivos_id_ () {
					return this.archivos_id_;
				}

				public Boolean archivos_id_IsNullable(){
				    return true;
				}
				public Boolean archivos_id_IsKey(){
				    return false;
				}
				public Integer archivos_id_Length(){
				    return null;
				}
				public Integer archivos_id_Precision(){
				    return null;
				}
				public String archivos_id_Default(){
				
					return null;
				
				}
				public String archivos_id_Comment(){
				
				    return "";
				
				}
				public String archivos_id_Pattern(){
				
					return "";
				
				}
				public String archivos_id_OriginalDbColumnName(){
				
					return "archivos_id_";
				
				}

				
			    public Integer estado_;

				public Integer getEstado_ () {
					return this.estado_;
				}

				public Boolean estado_IsNullable(){
				    return true;
				}
				public Boolean estado_IsKey(){
				    return false;
				}
				public Integer estado_Length(){
				    return null;
				}
				public Integer estado_Precision(){
				    return null;
				}
				public String estado_Default(){
				
					return null;
				
				}
				public String estado_Comment(){
				
				    return "";
				
				}
				public String estado_Pattern(){
				
					return "";
				
				}
				public String estado_OriginalDbColumnName(){
				
					return "estado_";
				
				}

				
			    public java.util.Date finicio_;

				public java.util.Date getFinicio_ () {
					return this.finicio_;
				}

				public Boolean finicio_IsNullable(){
				    return true;
				}
				public Boolean finicio_IsKey(){
				    return false;
				}
				public Integer finicio_Length(){
				    return null;
				}
				public Integer finicio_Precision(){
				    return null;
				}
				public String finicio_Default(){
				
					return null;
				
				}
				public String finicio_Comment(){
				
				    return "";
				
				}
				public String finicio_Pattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String finicio_OriginalDbColumnName(){
				
					return "finicio_";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.archivos_id_ = readInteger(dis);
					
						this.estado_ = readInteger(dis);
					
					this.finicio_ = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.archivos_id_ = readInteger(dis);
					
						this.estado_ = readInteger(dis);
					
					this.finicio_ = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.archivos_id_,dos);
					
					// Integer
				
						writeInteger(this.estado_,dos);
					
					// java.util.Date
				
						writeDate(this.finicio_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.archivos_id_,dos);
					
					// Integer
				
						writeInteger(this.estado_,dos);
					
					// java.util.Date
				
						writeDate(this.finicio_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("archivos_id_="+String.valueOf(archivos_id_));
		sb.append(",estado_="+String.valueOf(estado_));
		sb.append(",finicio_="+String.valueOf(finicio_));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row13Struct row13 = new row13Struct();




	
	/**
	 * [tOracleSP_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_3", false);
		start_Hash.put("tOracleSP_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tOracleSP_3 = 0;
		

	java.sql.Connection connection_tOracleSP_3 = null;
	connection_tOracleSP_3 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_1");
	

java.sql.CallableStatement statement_tOracleSP_3 = connection_tOracleSP_3.prepareCall("{call " + "cms2.updestadoarchivo" + "(?,?,?)}");

java.sql.Timestamp tmpDate_tOracleSP_3;
String tmpString_tOracleSP_3;

 



/**
 * [tOracleSP_3 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_6", false);
		start_Hash.put("tFixedFlowInput_6", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_6";
	
	
		int tos_count_tFixedFlowInput_6 = 0;
		

	    for (int i_tFixedFlowInput_6 = 0 ; i_tFixedFlowInput_6 < 1 ; i_tFixedFlowInput_6++) {
	                	            	
    	            		row13.archivos_id_ = context.vafiarchivos_id;
    	            	        	            	
    	            		row13.estado_ = 7;
    	            	        	            	
    	            		row13.finicio_ = context.vfinicio;
    	            	

 



/**
 * [tFixedFlowInput_6 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_6 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_6";
	
	

 


	tos_count_tFixedFlowInput_6++;

/**
 * [tFixedFlowInput_6 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_6";
	
	

 



/**
 * [tFixedFlowInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tOracleSP_3 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row13"
						
						);
					}
					

			// code for the argument 1 (archivos_id_) of type 'IN AUTOMAPPING'
    					if (row13.archivos_id_ == null) {
    						statement_tOracleSP_3.setNull(1, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_3.setInt(1, row13.archivos_id_);
    					}
    					
			// code for the argument 2 (estado_) of type 'IN AUTOMAPPING'
    					if (row13.estado_ == null) {
    						statement_tOracleSP_3.setNull(2, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_3.setInt(2, row13.estado_);
    					}
    					
			// code for the argument 3 (finicio_) of type 'IN TIMESTAMP'
    					if (row13.finicio_ == null) {
    						statement_tOracleSP_3.setNull(3, java.sql.Types.DATE);
    					} else {
    					
    					statement_tOracleSP_3.setTimestamp(3, new java.sql.Timestamp(row13.finicio_.getTime()));
    					
    					}
    					
		statement_tOracleSP_3.execute();
		

 


	tos_count_tOracleSP_3++;

/**
 * [tOracleSP_3 main ] stop
 */
	
	/**
	 * [tOracleSP_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_3";
	
	

 



/**
 * [tOracleSP_3 process_data_begin ] stop
 */
	
	/**
	 * [tOracleSP_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_3";
	
	

 



/**
 * [tOracleSP_3 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_6";
	
	

 



/**
 * [tFixedFlowInput_6 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_6 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_6";
	
	

        }
        globalMap.put("tFixedFlowInput_6_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_6", true);
end_Hash.put("tFixedFlowInput_6", System.currentTimeMillis());




/**
 * [tFixedFlowInput_6 end ] stop
 */

	
	/**
	 * [tOracleSP_3 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_3";
	
	


	statement_tOracleSP_3.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tOracleSP_3", true);
end_Hash.put("tOracleSP_3", System.currentTimeMillis());

   			if (context.vcontenido == null) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If9", 0, "true");
					}
				tFixedFlowInput_7Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If9", 0, "false");
					}   	 
   				}



/**
 * [tOracleSP_3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_6 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_6";
	
	

 



/**
 * [tFixedFlowInput_6 finally ] stop
 */

	
	/**
	 * [tOracleSP_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_3";
	
	

 



/**
 * [tOracleSP_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public String respuesta;

				public String getRespuesta () {
					return this.respuesta;
				}

				public Boolean respuestaIsNullable(){
				    return true;
				}
				public Boolean respuestaIsKey(){
				    return false;
				}
				public Integer respuestaLength(){
				    return null;
				}
				public Integer respuestaPrecision(){
				    return null;
				}
				public String respuestaDefault(){
				
					return null;
				
				}
				public String respuestaComment(){
				
				    return "";
				
				}
				public String respuestaPattern(){
				
					return "";
				
				}
				public String respuestaOriginalDbColumnName(){
				
					return "respuesta";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.respuesta = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.respuesta = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.respuesta,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.respuesta,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("respuesta="+respuesta);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public String respuesta;

				public String getRespuesta () {
					return this.respuesta;
				}

				public Boolean respuestaIsNullable(){
				    return true;
				}
				public Boolean respuestaIsKey(){
				    return false;
				}
				public Integer respuestaLength(){
				    return null;
				}
				public Integer respuestaPrecision(){
				    return null;
				}
				public String respuestaDefault(){
				
					return null;
				
				}
				public String respuestaComment(){
				
				    return "";
				
				}
				public String respuestaPattern(){
				
					return "";
				
				}
				public String respuestaOriginalDbColumnName(){
				
					return "respuesta";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.respuesta = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.respuesta = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.respuesta,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.respuesta,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("respuesta="+respuesta);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row14Struct row14 = new row14Struct();
row14Struct row15 = row14;





	
	/**
	 * [tDie_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_3", false);
		start_Hash.put("tDie_3", System.currentTimeMillis());
		
	
	currentComponent="tDie_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row15");
					}
				
		int tos_count_tDie_3 = 0;
		

 



/**
 * [tDie_3 begin ] stop
 */



	
	/**
	 * [tBufferOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tBufferOutput_3", false);
		start_Hash.put("tBufferOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tBufferOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tBufferOutput_3 = 0;
		

 



/**
 * [tBufferOutput_3 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_7", false);
		start_Hash.put("tFixedFlowInput_7", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_7";
	
	
		int tos_count_tFixedFlowInput_7 = 0;
		

	    for (int i_tFixedFlowInput_7 = 0 ; i_tFixedFlowInput_7 < 1 ; i_tFixedFlowInput_7++) {
	                	            	
    	            		row14.respuesta = "ERROR: El archivo se encuentra vacío";
    	            	

 



/**
 * [tFixedFlowInput_7 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_7 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_7";
	
	

 


	tos_count_tFixedFlowInput_7++;

/**
 * [tFixedFlowInput_7 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_7";
	
	

 



/**
 * [tFixedFlowInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tBufferOutput_3 main ] start
	 */

	

	
	
	currentComponent="tBufferOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row14"
						
						);
					}
					



String[] row_tBufferOutput_3=new String[]{"",};		
	    if(row14.respuesta != null){
	        
	            row_tBufferOutput_3[0] = row14.respuesta;
	                        			    
	    }else{
	    	row_tBufferOutput_3[0] = null;
	    }
	globalBuffer.add(row_tBufferOutput_3);	
	
 
     row15 = row14;


	tos_count_tBufferOutput_3++;

/**
 * [tBufferOutput_3 main ] stop
 */
	
	/**
	 * [tBufferOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tBufferOutput_3";
	
	

 



/**
 * [tBufferOutput_3 process_data_begin ] stop
 */

	
	/**
	 * [tDie_3 main ] start
	 */

	

	
	
	currentComponent="tDie_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row15"
						
						);
					}
					

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_3", 5, "ERROR: El archivo se encuentra vacío", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_3_DIE_PRIORITY", 5);
	System.err.println("ERROR: El archivo se encuentra vacío");
	
	globalMap.put("tDie_3_DIE_MESSAGE", "ERROR: El archivo se encuentra vacío");
	globalMap.put("tDie_3_DIE_MESSAGES", "ERROR: El archivo se encuentra vacío");
	
	} catch (Exception | Error e_tDie_3) {
	    globalMap.put("tDie_3_ERROR_MESSAGE",e_tDie_3.getMessage());
		logIgnoredError(String.format("tDie_3 - tDie failed to log message due to internal error: %s", e_tDie_3), e_tDie_3);
	}
	
	currentComponent = "tDie_3";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_3_DIE_CODE", errorCode);        

    
	if(true){	
		TDieException e_tDie_3 = new TDieException();

		

		throw e_tDie_3;
	}

 


	tos_count_tDie_3++;

/**
 * [tDie_3 main ] stop
 */
	
	/**
	 * [tDie_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_3";
	
	

 



/**
 * [tDie_3 process_data_begin ] stop
 */
	
	/**
	 * [tDie_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_3";
	
	

 



/**
 * [tDie_3 process_data_end ] stop
 */



	
	/**
	 * [tBufferOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_3";
	
	

 



/**
 * [tBufferOutput_3 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_7";
	
	

 



/**
 * [tFixedFlowInput_7 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_7 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_7";
	
	

        }
        globalMap.put("tFixedFlowInput_7_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_7", true);
end_Hash.put("tFixedFlowInput_7", System.currentTimeMillis());




/**
 * [tFixedFlowInput_7 end ] stop
 */

	
	/**
	 * [tBufferOutput_3 end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_3";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tBufferOutput_3", true);
end_Hash.put("tBufferOutput_3", System.currentTimeMillis());




/**
 * [tBufferOutput_3 end ] stop
 */

	
	/**
	 * [tDie_3 end ] start
	 */

	

	
	
	currentComponent="tDie_3";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row15");
			  	}
			  	
 

ok_Hash.put("tDie_3", true);
end_Hash.put("tDie_3", System.currentTimeMillis());




/**
 * [tDie_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_7 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_7";
	
	

 



/**
 * [tFixedFlowInput_7 finally ] stop
 */

	
	/**
	 * [tBufferOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tBufferOutput_3";
	
	

 



/**
 * [tBufferOutput_3 finally ] stop
 */

	
	/**
	 * [tDie_3 finally ] start
	 */

	

	
	
	currentComponent="tDie_3";
	
	

 



/**
 * [tDie_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_7_SUBPROCESS_STATE", 1);
	}
	


public void tOracleRow_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleRow_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleRow_3", false);
		start_Hash.put("tOracleRow_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleRow_3";
	
	
		int tos_count_tOracleRow_3 = 0;
		

	java.sql.Connection conn_tOracleRow_3 = null;
	String query_tOracleRow_3 = "";
	boolean whetherReject_tOracleRow_3 = false;
	int count_tOracleRow_3 = 0;
				conn_tOracleRow_3 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
			
        resourceMap.put("conn_tOracleRow_3", conn_tOracleRow_3);
        java.sql.Statement stmt_tOracleRow_3 = conn_tOracleRow_3.createStatement();
        resourceMap.put("stmt_tOracleRow_3", stmt_tOracleRow_3);

 



/**
 * [tOracleRow_3 begin ] stop
 */
	
	/**
	 * [tOracleRow_3 main ] start
	 */

	

	
	
	currentComponent="tOracleRow_3";
	
	

query_tOracleRow_3 = "truncate table tst_errcmasivo";
whetherReject_tOracleRow_3 = false;
globalMap.put("tOracleRow_3_QUERY",query_tOracleRow_3);
try {
		stmt_tOracleRow_3.execute(query_tOracleRow_3);
		
	} catch (java.lang.Exception e) {
globalMap.put("tOracleRow_3_ERROR_MESSAGE",e.getMessage());
		whetherReject_tOracleRow_3 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tOracleRow_3) {
		
	}
	

 


	tos_count_tOracleRow_3++;

/**
 * [tOracleRow_3 main ] stop
 */
	
	/**
	 * [tOracleRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleRow_3";
	
	

 



/**
 * [tOracleRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tOracleRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleRow_3";
	
	

 



/**
 * [tOracleRow_3 process_data_end ] stop
 */
	
	/**
	 * [tOracleRow_3 end ] start
	 */

	

	
	
	currentComponent="tOracleRow_3";
	
	

	globalMap.put("tOracleRow_3_NB_LINE", count_tOracleRow_3);
        stmt_tOracleRow_3.close();
        resourceMap.remove("stmt_tOracleRow_3");
    resourceMap.put("statementClosed_tOracleRow_3", true);
    resourceMap.put("finish_tOracleRow_3", true);

 

ok_Hash.put("tOracleRow_3", true);
end_Hash.put("tOracleRow_3", System.currentTimeMillis());




/**
 * [tOracleRow_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleRow_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tOracleInput_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleRow_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleRow_3";
	
	

    if (resourceMap.get("statementClosed_tOracleRow_3") == null) {
            java.sql.Statement stmtToClose_tOracleRow_3 = null;
            if ((stmtToClose_tOracleRow_3 = (java.sql.Statement) resourceMap.remove("stmt_tOracleRow_3")) != null) {
                stmtToClose_tOracleRow_3.close();
            }
    }
 



/**
 * [tOracleRow_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleRow_3_SUBPROCESS_STATE", 1);
	}
	


public static class row26Struct implements routines.system.IPersistableRow<row26Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 400;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return 0;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return null;
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return true;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",MENSAJE="+MENSAJE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row26Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class ErroresStruct implements routines.system.IPersistableRow<ErroresStruct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 400;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return 0;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return null;
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return true;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return null;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return null;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return null;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return null;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public BigDecimal ID_UNICO_PERSONA;

				public BigDecimal getID_UNICO_PERSONA () {
					return this.ID_UNICO_PERSONA;
				}

				public Boolean ID_UNICO_PERSONAIsNullable(){
				    return true;
				}
				public Boolean ID_UNICO_PERSONAIsKey(){
				    return false;
				}
				public Integer ID_UNICO_PERSONALength(){
				    return null;
				}
				public Integer ID_UNICO_PERSONAPrecision(){
				    return null;
				}
				public String ID_UNICO_PERSONADefault(){
				
					return null;
				
				}
				public String ID_UNICO_PERSONAComment(){
				
				    return "";
				
				}
				public String ID_UNICO_PERSONAPattern(){
				
					return "";
				
				}
				public String ID_UNICO_PERSONAOriginalDbColumnName(){
				
					return "ID_UNICO_PERSONA";
				
				}

				
			    public BigDecimal ID_UNICO_AFILIADO;

				public BigDecimal getID_UNICO_AFILIADO () {
					return this.ID_UNICO_AFILIADO;
				}

				public Boolean ID_UNICO_AFILIADOIsNullable(){
				    return true;
				}
				public Boolean ID_UNICO_AFILIADOIsKey(){
				    return false;
				}
				public Integer ID_UNICO_AFILIADOLength(){
				    return null;
				}
				public Integer ID_UNICO_AFILIADOPrecision(){
				    return null;
				}
				public String ID_UNICO_AFILIADODefault(){
				
					return null;
				
				}
				public String ID_UNICO_AFILIADOComment(){
				
				    return "";
				
				}
				public String ID_UNICO_AFILIADOPattern(){
				
					return "";
				
				}
				public String ID_UNICO_AFILIADOOriginalDbColumnName(){
				
					return "ID_UNICO_AFILIADO";
				
				}

				
			    public String FECHA_CADUCIDAD;

				public String getFECHA_CADUCIDAD () {
					return this.FECHA_CADUCIDAD;
				}

				public Boolean FECHA_CADUCIDADIsNullable(){
				    return true;
				}
				public Boolean FECHA_CADUCIDADIsKey(){
				    return false;
				}
				public Integer FECHA_CADUCIDADLength(){
				    return null;
				}
				public Integer FECHA_CADUCIDADPrecision(){
				    return null;
				}
				public String FECHA_CADUCIDADDefault(){
				
					return null;
				
				}
				public String FECHA_CADUCIDADComment(){
				
				    return "";
				
				}
				public String FECHA_CADUCIDADPattern(){
				
					return "";
				
				}
				public String FECHA_CADUCIDADOriginalDbColumnName(){
				
					return "FECHA_CADUCIDAD";
				
				}

				
			    public String FECHA_NACIMIENTO;

				public String getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return null;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return null;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public String FECHA_VINCULACION;

				public String getFECHA_VINCULACION () {
					return this.FECHA_VINCULACION;
				}

				public Boolean FECHA_VINCULACIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_VINCULACIONIsKey(){
				    return false;
				}
				public Integer FECHA_VINCULACIONLength(){
				    return null;
				}
				public Integer FECHA_VINCULACIONPrecision(){
				    return null;
				}
				public String FECHA_VINCULACIONDefault(){
				
					return null;
				
				}
				public String FECHA_VINCULACIONComment(){
				
				    return "";
				
				}
				public String FECHA_VINCULACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_VINCULACIONOriginalDbColumnName(){
				
					return "FECHA_VINCULACION";
				
				}

				
			    public BigDecimal ID_UNICO_ENTIDAD;

				public BigDecimal getID_UNICO_ENTIDAD () {
					return this.ID_UNICO_ENTIDAD;
				}

				public Boolean ID_UNICO_ENTIDADIsNullable(){
				    return true;
				}
				public Boolean ID_UNICO_ENTIDADIsKey(){
				    return false;
				}
				public Integer ID_UNICO_ENTIDADLength(){
				    return null;
				}
				public Integer ID_UNICO_ENTIDADPrecision(){
				    return null;
				}
				public String ID_UNICO_ENTIDADDefault(){
				
					return null;
				
				}
				public String ID_UNICO_ENTIDADComment(){
				
				    return "";
				
				}
				public String ID_UNICO_ENTIDADPattern(){
				
					return "";
				
				}
				public String ID_UNICO_ENTIDADOriginalDbColumnName(){
				
					return "ID_UNICO_ENTIDAD";
				
				}

				
			    public String FECHA_EXPEDICION_DOCUMENTO;

				public String getFECHA_EXPEDICION_DOCUMENTO () {
					return this.FECHA_EXPEDICION_DOCUMENTO;
				}

				public Boolean FECHA_EXPEDICION_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_EXPEDICION_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer FECHA_EXPEDICION_DOCUMENTOLength(){
				    return null;
				}
				public Integer FECHA_EXPEDICION_DOCUMENTOPrecision(){
				    return null;
				}
				public String FECHA_EXPEDICION_DOCUMENTODefault(){
				
					return null;
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOOriginalDbColumnName(){
				
					return "FECHA_EXPEDICION_DOCUMENTO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
						this.ID_UNICO_PERSONA = (BigDecimal) dis.readObject();
					
						this.ID_UNICO_AFILIADO = (BigDecimal) dis.readObject();
					
					this.FECHA_CADUCIDAD = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.FECHA_VINCULACION = readString(dis);
					
						this.ID_UNICO_ENTIDAD = (BigDecimal) dis.readObject();
					
					this.FECHA_EXPEDICION_DOCUMENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
						this.ID_UNICO_PERSONA = (BigDecimal) dis.readObject();
					
						this.ID_UNICO_AFILIADO = (BigDecimal) dis.readObject();
					
					this.FECHA_CADUCIDAD = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.FECHA_VINCULACION = readString(dis);
					
						this.ID_UNICO_ENTIDAD = (BigDecimal) dis.readObject();
					
					this.FECHA_EXPEDICION_DOCUMENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ID_UNICO_PERSONA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ID_UNICO_AFILIADO);
					
					// String
				
						writeString(this.FECHA_CADUCIDAD,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.FECHA_VINCULACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ID_UNICO_ENTIDAD);
					
					// String
				
						writeString(this.FECHA_EXPEDICION_DOCUMENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID_UNICO_PERSONA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID_UNICO_AFILIADO);
					
					// String
				
						writeString(this.FECHA_CADUCIDAD,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.FECHA_VINCULACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID_UNICO_ENTIDAD);
					
					// String
				
						writeString(this.FECHA_EXPEDICION_DOCUMENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",MENSAJE="+MENSAJE);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",ID_UNICO_PERSONA="+String.valueOf(ID_UNICO_PERSONA));
		sb.append(",ID_UNICO_AFILIADO="+String.valueOf(ID_UNICO_AFILIADO));
		sb.append(",FECHA_CADUCIDAD="+FECHA_CADUCIDAD);
		sb.append(",FECHA_NACIMIENTO="+FECHA_NACIMIENTO);
		sb.append(",FECHA_VINCULACION="+FECHA_VINCULACION);
		sb.append(",ID_UNICO_ENTIDAD="+String.valueOf(ID_UNICO_ENTIDAD));
		sb.append(",FECHA_EXPEDICION_DOCUMENTO="+FECHA_EXPEDICION_DOCUMENTO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ErroresStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class ActualizablesStruct implements routines.system.IPersistableRow<ActualizablesStruct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 400;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 400;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 400;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 400;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 400;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return 0;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return null;
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer LUGAR_EXP_DOC;

				public Integer getLUGAR_EXP_DOC () {
					return this.LUGAR_EXP_DOC;
				}

				public Boolean LUGAR_EXP_DOCIsNullable(){
				    return true;
				}
				public Boolean LUGAR_EXP_DOCIsKey(){
				    return false;
				}
				public Integer LUGAR_EXP_DOCLength(){
				    return null;
				}
				public Integer LUGAR_EXP_DOCPrecision(){
				    return null;
				}
				public String LUGAR_EXP_DOCDefault(){
				
					return null;
				
				}
				public String LUGAR_EXP_DOCComment(){
				
				    return "";
				
				}
				public String LUGAR_EXP_DOCPattern(){
				
					return "";
				
				}
				public String LUGAR_EXP_DOCOriginalDbColumnName(){
				
					return "LUGAR_EXP_DOC";
				
				}

				
			    public java.util.Date FECHA_EXPEDICION_DOCUMENTO;

				public java.util.Date getFECHA_EXPEDICION_DOCUMENTO () {
					return this.FECHA_EXPEDICION_DOCUMENTO;
				}

				public Boolean FECHA_EXPEDICION_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_EXPEDICION_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer FECHA_EXPEDICION_DOCUMENTOLength(){
				    return 400;
				}
				public Integer FECHA_EXPEDICION_DOCUMENTOPrecision(){
				    return 0;
				}
				public String FECHA_EXPEDICION_DOCUMENTODefault(){
				
					return null;
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOOriginalDbColumnName(){
				
					return "FECHA_EXPEDICION_DOCUMENTO";
				
				}

				
			    public java.util.Date FECHA_NACIMIENTO;

				public java.util.Date getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return 400;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return 0;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public Integer LUGAR_NACIMIENTO;

				public Integer getLUGAR_NACIMIENTO () {
					return this.LUGAR_NACIMIENTO;
				}

				public Boolean LUGAR_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean LUGAR_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer LUGAR_NACIMIENTOLength(){
				    return null;
				}
				public Integer LUGAR_NACIMIENTOPrecision(){
				    return null;
				}
				public String LUGAR_NACIMIENTODefault(){
				
					return null;
				
				}
				public String LUGAR_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String LUGAR_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String LUGAR_NACIMIENTOOriginalDbColumnName(){
				
					return "LUGAR_NACIMIENTO";
				
				}

				
			    public Integer SEXOS_ID;

				public Integer getSEXOS_ID () {
					return this.SEXOS_ID;
				}

				public Boolean SEXOS_IDIsNullable(){
				    return true;
				}
				public Boolean SEXOS_IDIsKey(){
				    return false;
				}
				public Integer SEXOS_IDLength(){
				    return 400;
				}
				public Integer SEXOS_IDPrecision(){
				    return 0;
				}
				public String SEXOS_IDDefault(){
				
					return null;
				
				}
				public String SEXOS_IDComment(){
				
				    return "";
				
				}
				public String SEXOS_IDPattern(){
				
					return "";
				
				}
				public String SEXOS_IDOriginalDbColumnName(){
				
					return "SEXOS_ID";
				
				}

				
			    public String DIRECCION;

				public String getDIRECCION () {
					return this.DIRECCION;
				}

				public Boolean DIRECCIONIsNullable(){
				    return true;
				}
				public Boolean DIRECCIONIsKey(){
				    return false;
				}
				public Integer DIRECCIONLength(){
				    return 400;
				}
				public Integer DIRECCIONPrecision(){
				    return 0;
				}
				public String DIRECCIONDefault(){
				
					return null;
				
				}
				public String DIRECCIONComment(){
				
				    return "";
				
				}
				public String DIRECCIONPattern(){
				
					return "";
				
				}
				public String DIRECCIONOriginalDbColumnName(){
				
					return "DIRECCION";
				
				}

				
			    public String TELEFONO;

				public String getTELEFONO () {
					return this.TELEFONO;
				}

				public Boolean TELEFONOIsNullable(){
				    return true;
				}
				public Boolean TELEFONOIsKey(){
				    return false;
				}
				public Integer TELEFONOLength(){
				    return 400;
				}
				public Integer TELEFONOPrecision(){
				    return 0;
				}
				public String TELEFONODefault(){
				
					return null;
				
				}
				public String TELEFONOComment(){
				
				    return "";
				
				}
				public String TELEFONOPattern(){
				
					return "";
				
				}
				public String TELEFONOOriginalDbColumnName(){
				
					return "TELEFONO";
				
				}

				
			    public Integer LUGAR_RESIDENCIA;

				public Integer getLUGAR_RESIDENCIA () {
					return this.LUGAR_RESIDENCIA;
				}

				public Boolean LUGAR_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean LUGAR_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer LUGAR_RESIDENCIALength(){
				    return 400;
				}
				public Integer LUGAR_RESIDENCIAPrecision(){
				    return 0;
				}
				public String LUGAR_RESIDENCIADefault(){
				
					return null;
				
				}
				public String LUGAR_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String LUGAR_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String LUGAR_RESIDENCIAOriginalDbColumnName(){
				
					return "LUGAR_RESIDENCIA";
				
				}

				
			    public Integer LOCALIDADES_ID;

				public Integer getLOCALIDADES_ID () {
					return this.LOCALIDADES_ID;
				}

				public Boolean LOCALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean LOCALIDADES_IDIsKey(){
				    return false;
				}
				public Integer LOCALIDADES_IDLength(){
				    return 400;
				}
				public Integer LOCALIDADES_IDPrecision(){
				    return 0;
				}
				public String LOCALIDADES_IDDefault(){
				
					return null;
				
				}
				public String LOCALIDADES_IDComment(){
				
				    return "";
				
				}
				public String LOCALIDADES_IDPattern(){
				
					return "";
				
				}
				public String LOCALIDADES_IDOriginalDbColumnName(){
				
					return "LOCALIDADES_ID";
				
				}

				
			    public Integer GSANGUINEOS_ID;

				public Integer getGSANGUINEOS_ID () {
					return this.GSANGUINEOS_ID;
				}

				public Boolean GSANGUINEOS_IDIsNullable(){
				    return true;
				}
				public Boolean GSANGUINEOS_IDIsKey(){
				    return false;
				}
				public Integer GSANGUINEOS_IDLength(){
				    return 400;
				}
				public Integer GSANGUINEOS_IDPrecision(){
				    return 0;
				}
				public String GSANGUINEOS_IDDefault(){
				
					return null;
				
				}
				public String GSANGUINEOS_IDComment(){
				
				    return "";
				
				}
				public String GSANGUINEOS_IDPattern(){
				
					return "";
				
				}
				public String GSANGUINEOS_IDOriginalDbColumnName(){
				
					return "GSANGUINEOS_ID";
				
				}

				
			    public Double ESTATURA;

				public Double getESTATURA () {
					return this.ESTATURA;
				}

				public Boolean ESTATURAIsNullable(){
				    return true;
				}
				public Boolean ESTATURAIsKey(){
				    return false;
				}
				public Integer ESTATURALength(){
				    return 400;
				}
				public Integer ESTATURAPrecision(){
				    return 0;
				}
				public String ESTATURADefault(){
				
					return null;
				
				}
				public String ESTATURAComment(){
				
				    return "";
				
				}
				public String ESTATURAPattern(){
				
					return "";
				
				}
				public String ESTATURAOriginalDbColumnName(){
				
					return "ESTATURA";
				
				}

				
			    public Integer OCUPACIONES_ID;

				public Integer getOCUPACIONES_ID () {
					return this.OCUPACIONES_ID;
				}

				public Boolean OCUPACIONES_IDIsNullable(){
				    return true;
				}
				public Boolean OCUPACIONES_IDIsKey(){
				    return false;
				}
				public Integer OCUPACIONES_IDLength(){
				    return 400;
				}
				public Integer OCUPACIONES_IDPrecision(){
				    return 0;
				}
				public String OCUPACIONES_IDDefault(){
				
					return null;
				
				}
				public String OCUPACIONES_IDComment(){
				
				    return "";
				
				}
				public String OCUPACIONES_IDPattern(){
				
					return "";
				
				}
				public String OCUPACIONES_IDOriginalDbColumnName(){
				
					return "OCUPACIONES_ID";
				
				}

				
			    public Integer ETNICAS_ID;

				public Integer getETNICAS_ID () {
					return this.ETNICAS_ID;
				}

				public Boolean ETNICAS_IDIsNullable(){
				    return true;
				}
				public Boolean ETNICAS_IDIsKey(){
				    return false;
				}
				public Integer ETNICAS_IDLength(){
				    return 400;
				}
				public Integer ETNICAS_IDPrecision(){
				    return 0;
				}
				public String ETNICAS_IDDefault(){
				
					return null;
				
				}
				public String ETNICAS_IDComment(){
				
				    return "";
				
				}
				public String ETNICAS_IDPattern(){
				
					return "";
				
				}
				public String ETNICAS_IDOriginalDbColumnName(){
				
					return "ETNICAS_ID";
				
				}

				
			    public Integer NSOCIOECONOMICOS_ID;

				public Integer getNSOCIOECONOMICOS_ID () {
					return this.NSOCIOECONOMICOS_ID;
				}

				public Boolean NSOCIOECONOMICOS_IDIsNullable(){
				    return true;
				}
				public Boolean NSOCIOECONOMICOS_IDIsKey(){
				    return false;
				}
				public Integer NSOCIOECONOMICOS_IDLength(){
				    return 400;
				}
				public Integer NSOCIOECONOMICOS_IDPrecision(){
				    return 0;
				}
				public String NSOCIOECONOMICOS_IDDefault(){
				
					return null;
				
				}
				public String NSOCIOECONOMICOS_IDComment(){
				
				    return "";
				
				}
				public String NSOCIOECONOMICOS_IDPattern(){
				
					return "";
				
				}
				public String NSOCIOECONOMICOS_IDOriginalDbColumnName(){
				
					return "NSOCIOECONOMICOS_ID";
				
				}

				
			    public Integer TVIVIENDA_ID;

				public Integer getTVIVIENDA_ID () {
					return this.TVIVIENDA_ID;
				}

				public Boolean TVIVIENDA_IDIsNullable(){
				    return true;
				}
				public Boolean TVIVIENDA_IDIsKey(){
				    return false;
				}
				public Integer TVIVIENDA_IDLength(){
				    return 400;
				}
				public Integer TVIVIENDA_IDPrecision(){
				    return 0;
				}
				public String TVIVIENDA_IDDefault(){
				
					return null;
				
				}
				public String TVIVIENDA_IDComment(){
				
				    return "";
				
				}
				public String TVIVIENDA_IDPattern(){
				
					return "";
				
				}
				public String TVIVIENDA_IDOriginalDbColumnName(){
				
					return "TVIVIENDA_ID";
				
				}

				
			    public Integer NEDUCATIVOS_ID;

				public Integer getNEDUCATIVOS_ID () {
					return this.NEDUCATIVOS_ID;
				}

				public Boolean NEDUCATIVOS_IDIsNullable(){
				    return true;
				}
				public Boolean NEDUCATIVOS_IDIsKey(){
				    return false;
				}
				public Integer NEDUCATIVOS_IDLength(){
				    return 400;
				}
				public Integer NEDUCATIVOS_IDPrecision(){
				    return 0;
				}
				public String NEDUCATIVOS_IDDefault(){
				
					return null;
				
				}
				public String NEDUCATIVOS_IDComment(){
				
				    return "";
				
				}
				public String NEDUCATIVOS_IDPattern(){
				
					return "";
				
				}
				public String NEDUCATIVOS_IDOriginalDbColumnName(){
				
					return "NEDUCATIVOS_ID";
				
				}

				
			    public Integer ESMADSCRITO;

				public Integer getESMADSCRITO () {
					return this.ESMADSCRITO;
				}

				public Boolean ESMADSCRITOIsNullable(){
				    return true;
				}
				public Boolean ESMADSCRITOIsKey(){
				    return false;
				}
				public Integer ESMADSCRITOLength(){
				    return 400;
				}
				public Integer ESMADSCRITOPrecision(){
				    return 0;
				}
				public String ESMADSCRITODefault(){
				
					return null;
				
				}
				public String ESMADSCRITOComment(){
				
				    return "";
				
				}
				public String ESMADSCRITOPattern(){
				
					return "";
				
				}
				public String ESMADSCRITOOriginalDbColumnName(){
				
					return "ESMADSCRITO";
				
				}

				
			    public String OBSERVACIONES;

				public String getOBSERVACIONES () {
					return this.OBSERVACIONES;
				}

				public Boolean OBSERVACIONESIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONESIsKey(){
				    return false;
				}
				public Integer OBSERVACIONESLength(){
				    return 35;
				}
				public Integer OBSERVACIONESPrecision(){
				    return 0;
				}
				public String OBSERVACIONESDefault(){
				
					return null;
				
				}
				public String OBSERVACIONESComment(){
				
				    return "";
				
				}
				public String OBSERVACIONESPattern(){
				
					return "";
				
				}
				public String OBSERVACIONESOriginalDbColumnName(){
				
					return "OBSERVACIONES";
				
				}

				
			    public Integer ENTAPORTANTES_ID;

				public Integer getENTAPORTANTES_ID () {
					return this.ENTAPORTANTES_ID;
				}

				public Boolean ENTAPORTANTES_IDIsNullable(){
				    return true;
				}
				public Boolean ENTAPORTANTES_IDIsKey(){
				    return false;
				}
				public Integer ENTAPORTANTES_IDLength(){
				    return 400;
				}
				public Integer ENTAPORTANTES_IDPrecision(){
				    return 0;
				}
				public String ENTAPORTANTES_IDDefault(){
				
					return null;
				
				}
				public String ENTAPORTANTES_IDComment(){
				
				    return "";
				
				}
				public String ENTAPORTANTES_IDPattern(){
				
					return "";
				
				}
				public String ENTAPORTANTES_IDOriginalDbColumnName(){
				
					return "ENTAPORTANTES_ID";
				
				}

				
			    public Integer GRDMILITARES_ID;

				public Integer getGRDMILITARES_ID () {
					return this.GRDMILITARES_ID;
				}

				public Boolean GRDMILITARES_IDIsNullable(){
				    return true;
				}
				public Boolean GRDMILITARES_IDIsKey(){
				    return false;
				}
				public Integer GRDMILITARES_IDLength(){
				    return 400;
				}
				public Integer GRDMILITARES_IDPrecision(){
				    return 0;
				}
				public String GRDMILITARES_IDDefault(){
				
					return null;
				
				}
				public String GRDMILITARES_IDComment(){
				
				    return "";
				
				}
				public String GRDMILITARES_IDPattern(){
				
					return "";
				
				}
				public String GRDMILITARES_IDOriginalDbColumnName(){
				
					return "GRDMILITARES_ID";
				
				}

				
			    public Integer FUERZAS_ID;

				public Integer getFUERZAS_ID () {
					return this.FUERZAS_ID;
				}

				public Boolean FUERZAS_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZAS_IDIsKey(){
				    return false;
				}
				public Integer FUERZAS_IDLength(){
				    return 400;
				}
				public Integer FUERZAS_IDPrecision(){
				    return 0;
				}
				public String FUERZAS_IDDefault(){
				
					return null;
				
				}
				public String FUERZAS_IDComment(){
				
				    return "";
				
				}
				public String FUERZAS_IDPattern(){
				
					return "";
				
				}
				public String FUERZAS_IDOriginalDbColumnName(){
				
					return "FUERZAS_ID";
				
				}

				
			    public Integer UMILITARES_ID;

				public Integer getUMILITARES_ID () {
					return this.UMILITARES_ID;
				}

				public Boolean UMILITARES_IDIsNullable(){
				    return true;
				}
				public Boolean UMILITARES_IDIsKey(){
				    return false;
				}
				public Integer UMILITARES_IDLength(){
				    return 400;
				}
				public Integer UMILITARES_IDPrecision(){
				    return 0;
				}
				public String UMILITARES_IDDefault(){
				
					return null;
				
				}
				public String UMILITARES_IDComment(){
				
				    return "";
				
				}
				public String UMILITARES_IDPattern(){
				
					return "";
				
				}
				public String UMILITARES_IDOriginalDbColumnName(){
				
					return "UMILITARES_ID";
				
				}

				
			    public Integer TVINCULACIONES_ID;

				public Integer getTVINCULACIONES_ID () {
					return this.TVINCULACIONES_ID;
				}

				public Boolean TVINCULACIONES_IDIsNullable(){
				    return true;
				}
				public Boolean TVINCULACIONES_IDIsKey(){
				    return false;
				}
				public Integer TVINCULACIONES_IDLength(){
				    return 400;
				}
				public Integer TVINCULACIONES_IDPrecision(){
				    return 0;
				}
				public String TVINCULACIONES_IDDefault(){
				
					return null;
				
				}
				public String TVINCULACIONES_IDComment(){
				
				    return "";
				
				}
				public String TVINCULACIONES_IDPattern(){
				
					return "";
				
				}
				public String TVINCULACIONES_IDOriginalDbColumnName(){
				
					return "TVINCULACIONES_ID";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return true;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 0;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 400;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public Integer ESTADOS_ID;

				public Integer getESTADOS_ID () {
					return this.ESTADOS_ID;
				}

				public Boolean ESTADOS_IDIsNullable(){
				    return true;
				}
				public Boolean ESTADOS_IDIsKey(){
				    return false;
				}
				public Integer ESTADOS_IDLength(){
				    return 400;
				}
				public Integer ESTADOS_IDPrecision(){
				    return 0;
				}
				public String ESTADOS_IDDefault(){
				
					return null;
				
				}
				public String ESTADOS_IDComment(){
				
				    return "";
				
				}
				public String ESTADOS_IDPattern(){
				
					return "";
				
				}
				public String ESTADOS_IDOriginalDbColumnName(){
				
					return "ESTADOS_ID";
				
				}

				
			    public BigDecimal MOTIVOSESTADO_ID;

				public BigDecimal getMOTIVOSESTADO_ID () {
					return this.MOTIVOSESTADO_ID;
				}

				public Boolean MOTIVOSESTADO_IDIsNullable(){
				    return true;
				}
				public Boolean MOTIVOSESTADO_IDIsKey(){
				    return false;
				}
				public Integer MOTIVOSESTADO_IDLength(){
				    return 400;
				}
				public Integer MOTIVOSESTADO_IDPrecision(){
				    return 0;
				}
				public String MOTIVOSESTADO_IDDefault(){
				
					return null;
				
				}
				public String MOTIVOSESTADO_IDComment(){
				
				    return "";
				
				}
				public String MOTIVOSESTADO_IDPattern(){
				
					return "";
				
				}
				public String MOTIVOSESTADO_IDOriginalDbColumnName(){
				
					return "MOTIVOSESTADO_ID";
				
				}

				
			    public String MOTIVO;

				public String getMOTIVO () {
					return this.MOTIVO;
				}

				public Boolean MOTIVOIsNullable(){
				    return true;
				}
				public Boolean MOTIVOIsKey(){
				    return false;
				}
				public Integer MOTIVOLength(){
				    return 400;
				}
				public Integer MOTIVOPrecision(){
				    return 0;
				}
				public String MOTIVODefault(){
				
					return null;
				
				}
				public String MOTIVOComment(){
				
				    return "";
				
				}
				public String MOTIVOPattern(){
				
					return "";
				
				}
				public String MOTIVOOriginalDbColumnName(){
				
					return "MOTIVO";
				
				}

				
			    public BigDecimal RNOVEDADES_ID;

				public BigDecimal getRNOVEDADES_ID () {
					return this.RNOVEDADES_ID;
				}

				public Boolean RNOVEDADES_IDIsNullable(){
				    return true;
				}
				public Boolean RNOVEDADES_IDIsKey(){
				    return false;
				}
				public Integer RNOVEDADES_IDLength(){
				    return 0;
				}
				public Integer RNOVEDADES_IDPrecision(){
				    return null;
				}
				public String RNOVEDADES_IDDefault(){
				
					return "";
				
				}
				public String RNOVEDADES_IDComment(){
				
				    return "";
				
				}
				public String RNOVEDADES_IDPattern(){
				
					return "";
				
				}
				public String RNOVEDADES_IDOriginalDbColumnName(){
				
					return "RNOVEDADES_ID";
				
				}

				
			    public java.util.Date FECHA_CADUCIDAD;

				public java.util.Date getFECHA_CADUCIDAD () {
					return this.FECHA_CADUCIDAD;
				}

				public Boolean FECHA_CADUCIDADIsNullable(){
				    return true;
				}
				public Boolean FECHA_CADUCIDADIsKey(){
				    return false;
				}
				public Integer FECHA_CADUCIDADLength(){
				    return 400;
				}
				public Integer FECHA_CADUCIDADPrecision(){
				    return 0;
				}
				public String FECHA_CADUCIDADDefault(){
				
					return null;
				
				}
				public String FECHA_CADUCIDADComment(){
				
				    return "";
				
				}
				public String FECHA_CADUCIDADPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_CADUCIDADOriginalDbColumnName(){
				
					return "FECHA_CADUCIDAD";
				
				}

				
			    public java.util.Date FECHA_VINCULACION;

				public java.util.Date getFECHA_VINCULACION () {
					return this.FECHA_VINCULACION;
				}

				public Boolean FECHA_VINCULACIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_VINCULACIONIsKey(){
				    return false;
				}
				public Integer FECHA_VINCULACIONLength(){
				    return null;
				}
				public Integer FECHA_VINCULACIONPrecision(){
				    return null;
				}
				public String FECHA_VINCULACIONDefault(){
				
					return null;
				
				}
				public String FECHA_VINCULACIONComment(){
				
				    return "";
				
				}
				public String FECHA_VINCULACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_VINCULACIONOriginalDbColumnName(){
				
					return "FECHA_VINCULACION";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return null;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return null;
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public BigDecimal AFILIADO_ID;

				public BigDecimal getAFILIADO_ID () {
					return this.AFILIADO_ID;
				}

				public Boolean AFILIADO_IDIsNullable(){
				    return true;
				}
				public Boolean AFILIADO_IDIsKey(){
				    return false;
				}
				public Integer AFILIADO_IDLength(){
				    return null;
				}
				public Integer AFILIADO_IDPrecision(){
				    return null;
				}
				public String AFILIADO_IDDefault(){
				
					return null;
				
				}
				public String AFILIADO_IDComment(){
				
				    return "";
				
				}
				public String AFILIADO_IDPattern(){
				
					return "";
				
				}
				public String AFILIADO_IDOriginalDbColumnName(){
				
					return "AFILIADO_ID";
				
				}

				
			    public String TIPO_AFILIADO;

				public String getTIPO_AFILIADO () {
					return this.TIPO_AFILIADO;
				}

				public Boolean TIPO_AFILIADOIsNullable(){
				    return true;
				}
				public Boolean TIPO_AFILIADOIsKey(){
				    return false;
				}
				public Integer TIPO_AFILIADOLength(){
				    return null;
				}
				public Integer TIPO_AFILIADOPrecision(){
				    return null;
				}
				public String TIPO_AFILIADODefault(){
				
					return null;
				
				}
				public String TIPO_AFILIADOComment(){
				
				    return "";
				
				}
				public String TIPO_AFILIADOPattern(){
				
					return "";
				
				}
				public String TIPO_AFILIADOOriginalDbColumnName(){
				
					return "TIPO_AFILIADO";
				
				}

				
			    public String ESTADO_ENTIDAD;

				public String getESTADO_ENTIDAD () {
					return this.ESTADO_ENTIDAD;
				}

				public Boolean ESTADO_ENTIDADIsNullable(){
				    return true;
				}
				public Boolean ESTADO_ENTIDADIsKey(){
				    return false;
				}
				public Integer ESTADO_ENTIDADLength(){
				    return null;
				}
				public Integer ESTADO_ENTIDADPrecision(){
				    return null;
				}
				public String ESTADO_ENTIDADDefault(){
				
					return null;
				
				}
				public String ESTADO_ENTIDADComment(){
				
				    return "";
				
				}
				public String ESTADO_ENTIDADPattern(){
				
					return "";
				
				}
				public String ESTADO_ENTIDADOriginalDbColumnName(){
				
					return "ESTADO_ENTIDAD";
				
				}

				
			    public Integer ENTIDAD_PRINCIPAL;

				public Integer getENTIDAD_PRINCIPAL () {
					return this.ENTIDAD_PRINCIPAL;
				}

				public Boolean ENTIDAD_PRINCIPALIsNullable(){
				    return true;
				}
				public Boolean ENTIDAD_PRINCIPALIsKey(){
				    return false;
				}
				public Integer ENTIDAD_PRINCIPALLength(){
				    return null;
				}
				public Integer ENTIDAD_PRINCIPALPrecision(){
				    return null;
				}
				public String ENTIDAD_PRINCIPALDefault(){
				
					return null;
				
				}
				public String ENTIDAD_PRINCIPALComment(){
				
				    return "";
				
				}
				public String ENTIDAD_PRINCIPALPattern(){
				
					return "";
				
				}
				public String ENTIDAD_PRINCIPALOriginalDbColumnName(){
				
					return "ENTIDAD_PRINCIPAL";
				
				}

				
			    public Integer TREGIMEN_ID;

				public Integer getTREGIMEN_ID () {
					return this.TREGIMEN_ID;
				}

				public Boolean TREGIMEN_IDIsNullable(){
				    return true;
				}
				public Boolean TREGIMEN_IDIsKey(){
				    return false;
				}
				public Integer TREGIMEN_IDLength(){
				    return null;
				}
				public Integer TREGIMEN_IDPrecision(){
				    return null;
				}
				public String TREGIMEN_IDDefault(){
				
					return null;
				
				}
				public String TREGIMEN_IDComment(){
				
				    return "";
				
				}
				public String TREGIMEN_IDPattern(){
				
					return "";
				
				}
				public String TREGIMEN_IDOriginalDbColumnName(){
				
					return "TREGIMEN_ID";
				
				}

				
			    public BigDecimal ID_UNICO_ENTIDAD;

				public BigDecimal getID_UNICO_ENTIDAD () {
					return this.ID_UNICO_ENTIDAD;
				}

				public Boolean ID_UNICO_ENTIDADIsNullable(){
				    return true;
				}
				public Boolean ID_UNICO_ENTIDADIsKey(){
				    return false;
				}
				public Integer ID_UNICO_ENTIDADLength(){
				    return null;
				}
				public Integer ID_UNICO_ENTIDADPrecision(){
				    return null;
				}
				public String ID_UNICO_ENTIDADDefault(){
				
					return null;
				
				}
				public String ID_UNICO_ENTIDADComment(){
				
				    return "";
				
				}
				public String ID_UNICO_ENTIDADPattern(){
				
					return "";
				
				}
				public String ID_UNICO_ENTIDADOriginalDbColumnName(){
				
					return "ID_UNICO_ENTIDAD";
				
				}

				
			    public String CORREO_ELECTRONICO;

				public String getCORREO_ELECTRONICO () {
					return this.CORREO_ELECTRONICO;
				}

				public Boolean CORREO_ELECTRONICOIsNullable(){
				    return true;
				}
				public Boolean CORREO_ELECTRONICOIsKey(){
				    return false;
				}
				public Integer CORREO_ELECTRONICOLength(){
				    return null;
				}
				public Integer CORREO_ELECTRONICOPrecision(){
				    return null;
				}
				public String CORREO_ELECTRONICODefault(){
				
					return null;
				
				}
				public String CORREO_ELECTRONICOComment(){
				
				    return "";
				
				}
				public String CORREO_ELECTRONICOPattern(){
				
					return "";
				
				}
				public String CORREO_ELECTRONICOOriginalDbColumnName(){
				
					return "CORREO_ELECTRONICO";
				
				}

				
			    public String CELULAR;

				public String getCELULAR () {
					return this.CELULAR;
				}

				public Boolean CELULARIsNullable(){
				    return true;
				}
				public Boolean CELULARIsKey(){
				    return false;
				}
				public Integer CELULARLength(){
				    return null;
				}
				public Integer CELULARPrecision(){
				    return null;
				}
				public String CELULARDefault(){
				
					return null;
				
				}
				public String CELULARComment(){
				
				    return "";
				
				}
				public String CELULARPattern(){
				
					return "";
				
				}
				public String CELULAROriginalDbColumnName(){
				
					return "CELULAR";
				
				}

				
			    public java.util.Date FECHA_DEFUNCION;

				public java.util.Date getFECHA_DEFUNCION () {
					return this.FECHA_DEFUNCION;
				}

				public Boolean FECHA_DEFUNCIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_DEFUNCIONIsKey(){
				    return false;
				}
				public Integer FECHA_DEFUNCIONLength(){
				    return null;
				}
				public Integer FECHA_DEFUNCIONPrecision(){
				    return null;
				}
				public String FECHA_DEFUNCIONDefault(){
				
					return null;
				
				}
				public String FECHA_DEFUNCIONComment(){
				
				    return "";
				
				}
				public String FECHA_DEFUNCIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_DEFUNCIONOriginalDbColumnName(){
				
					return "FECHA_DEFUNCION";
				
				}

				
			    public Integer PLANAFILIACIONES_ID;

				public Integer getPLANAFILIACIONES_ID () {
					return this.PLANAFILIACIONES_ID;
				}

				public Boolean PLANAFILIACIONES_IDIsNullable(){
				    return true;
				}
				public Boolean PLANAFILIACIONES_IDIsKey(){
				    return false;
				}
				public Integer PLANAFILIACIONES_IDLength(){
				    return null;
				}
				public Integer PLANAFILIACIONES_IDPrecision(){
				    return null;
				}
				public String PLANAFILIACIONES_IDDefault(){
				
					return null;
				
				}
				public String PLANAFILIACIONES_IDComment(){
				
				    return "";
				
				}
				public String PLANAFILIACIONES_IDPattern(){
				
					return "";
				
				}
				public String PLANAFILIACIONES_IDOriginalDbColumnName(){
				
					return "PLANAFILIACIONES_ID";
				
				}

				
			    public BigDecimal ID_BDUA;

				public BigDecimal getID_BDUA () {
					return this.ID_BDUA;
				}

				public Boolean ID_BDUAIsNullable(){
				    return true;
				}
				public Boolean ID_BDUAIsKey(){
				    return false;
				}
				public Integer ID_BDUALength(){
				    return null;
				}
				public Integer ID_BDUAPrecision(){
				    return null;
				}
				public String ID_BDUADefault(){
				
					return null;
				
				}
				public String ID_BDUAComment(){
				
				    return "";
				
				}
				public String ID_BDUAPattern(){
				
					return "";
				
				}
				public String ID_BDUAOriginalDbColumnName(){
				
					return "ID_BDUA";
				
				}

				
			    public String MOTIVO_CAMBIO_ESTADO;

				public String getMOTIVO_CAMBIO_ESTADO () {
					return this.MOTIVO_CAMBIO_ESTADO;
				}

				public Boolean MOTIVO_CAMBIO_ESTADOIsNullable(){
				    return true;
				}
				public Boolean MOTIVO_CAMBIO_ESTADOIsKey(){
				    return false;
				}
				public Integer MOTIVO_CAMBIO_ESTADOLength(){
				    return null;
				}
				public Integer MOTIVO_CAMBIO_ESTADOPrecision(){
				    return null;
				}
				public String MOTIVO_CAMBIO_ESTADODefault(){
				
					return null;
				
				}
				public String MOTIVO_CAMBIO_ESTADOComment(){
				
				    return "";
				
				}
				public String MOTIVO_CAMBIO_ESTADOPattern(){
				
					return "";
				
				}
				public String MOTIVO_CAMBIO_ESTADOOriginalDbColumnName(){
				
					return "MOTIVO_CAMBIO_ESTADO";
				
				}

				
			    public String MOTIVO_CAMBIO_ESM;

				public String getMOTIVO_CAMBIO_ESM () {
					return this.MOTIVO_CAMBIO_ESM;
				}

				public Boolean MOTIVO_CAMBIO_ESMIsNullable(){
				    return true;
				}
				public Boolean MOTIVO_CAMBIO_ESMIsKey(){
				    return false;
				}
				public Integer MOTIVO_CAMBIO_ESMLength(){
				    return null;
				}
				public Integer MOTIVO_CAMBIO_ESMPrecision(){
				    return null;
				}
				public String MOTIVO_CAMBIO_ESMDefault(){
				
					return null;
				
				}
				public String MOTIVO_CAMBIO_ESMComment(){
				
				    return "";
				
				}
				public String MOTIVO_CAMBIO_ESMPattern(){
				
					return "";
				
				}
				public String MOTIVO_CAMBIO_ESMOriginalDbColumnName(){
				
					return "MOTIVO_CAMBIO_ESM";
				
				}

				
			    public Integer TDISCAPACIDADES_ID;

				public Integer getTDISCAPACIDADES_ID () {
					return this.TDISCAPACIDADES_ID;
				}

				public Boolean TDISCAPACIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean TDISCAPACIDADES_IDIsKey(){
				    return false;
				}
				public Integer TDISCAPACIDADES_IDLength(){
				    return null;
				}
				public Integer TDISCAPACIDADES_IDPrecision(){
				    return null;
				}
				public String TDISCAPACIDADES_IDDefault(){
				
					return null;
				
				}
				public String TDISCAPACIDADES_IDComment(){
				
				    return "";
				
				}
				public String TDISCAPACIDADES_IDPattern(){
				
					return "";
				
				}
				public String TDISCAPACIDADES_IDOriginalDbColumnName(){
				
					return "TDISCAPACIDADES_ID";
				
				}

				
			    public Integer PESPECIAL_ID;

				public Integer getPESPECIAL_ID () {
					return this.PESPECIAL_ID;
				}

				public Boolean PESPECIAL_IDIsNullable(){
				    return true;
				}
				public Boolean PESPECIAL_IDIsKey(){
				    return false;
				}
				public Integer PESPECIAL_IDLength(){
				    return null;
				}
				public Integer PESPECIAL_IDPrecision(){
				    return null;
				}
				public String PESPECIAL_IDDefault(){
				
					return null;
				
				}
				public String PESPECIAL_IDComment(){
				
				    return "";
				
				}
				public String PESPECIAL_IDPattern(){
				
					return "";
				
				}
				public String PESPECIAL_IDOriginalDbColumnName(){
				
					return "PESPECIAL_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.LUGAR_EXP_DOC = readInteger(dis);
					
					this.FECHA_EXPEDICION_DOCUMENTO = readDate(dis);
					
					this.FECHA_NACIMIENTO = readDate(dis);
					
						this.LUGAR_NACIMIENTO = readInteger(dis);
					
						this.SEXOS_ID = readInteger(dis);
					
					this.DIRECCION = readString(dis);
					
					this.TELEFONO = readString(dis);
					
						this.LUGAR_RESIDENCIA = readInteger(dis);
					
						this.LOCALIDADES_ID = readInteger(dis);
					
						this.GSANGUINEOS_ID = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ESTATURA = null;
           				} else {
           			    	this.ESTATURA = dis.readDouble();
           				}
					
						this.OCUPACIONES_ID = readInteger(dis);
					
						this.ETNICAS_ID = readInteger(dis);
					
						this.NSOCIOECONOMICOS_ID = readInteger(dis);
					
						this.TVIVIENDA_ID = readInteger(dis);
					
						this.NEDUCATIVOS_ID = readInteger(dis);
					
						this.ESMADSCRITO = readInteger(dis);
					
					this.OBSERVACIONES = readString(dis);
					
						this.ENTAPORTANTES_ID = readInteger(dis);
					
						this.GRDMILITARES_ID = readInteger(dis);
					
						this.FUERZAS_ID = readInteger(dis);
					
						this.UMILITARES_ID = readInteger(dis);
					
						this.TVINCULACIONES_ID = readInteger(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
						this.ESTADOS_ID = readInteger(dis);
					
						this.MOTIVOSESTADO_ID = (BigDecimal) dis.readObject();
					
					this.MOTIVO = readString(dis);
					
						this.RNOVEDADES_ID = (BigDecimal) dis.readObject();
					
					this.FECHA_CADUCIDAD = readDate(dis);
					
					this.FECHA_VINCULACION = readDate(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.AFILIADO_ID = (BigDecimal) dis.readObject();
					
					this.TIPO_AFILIADO = readString(dis);
					
					this.ESTADO_ENTIDAD = readString(dis);
					
						this.ENTIDAD_PRINCIPAL = readInteger(dis);
					
						this.TREGIMEN_ID = readInteger(dis);
					
						this.ID_UNICO_ENTIDAD = (BigDecimal) dis.readObject();
					
					this.CORREO_ELECTRONICO = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.FECHA_DEFUNCION = readDate(dis);
					
						this.PLANAFILIACIONES_ID = readInteger(dis);
					
						this.ID_BDUA = (BigDecimal) dis.readObject();
					
					this.MOTIVO_CAMBIO_ESTADO = readString(dis);
					
					this.MOTIVO_CAMBIO_ESM = readString(dis);
					
						this.TDISCAPACIDADES_ID = readInteger(dis);
					
						this.PESPECIAL_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.LUGAR_EXP_DOC = readInteger(dis);
					
					this.FECHA_EXPEDICION_DOCUMENTO = readDate(dis);
					
					this.FECHA_NACIMIENTO = readDate(dis);
					
						this.LUGAR_NACIMIENTO = readInteger(dis);
					
						this.SEXOS_ID = readInteger(dis);
					
					this.DIRECCION = readString(dis);
					
					this.TELEFONO = readString(dis);
					
						this.LUGAR_RESIDENCIA = readInteger(dis);
					
						this.LOCALIDADES_ID = readInteger(dis);
					
						this.GSANGUINEOS_ID = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ESTATURA = null;
           				} else {
           			    	this.ESTATURA = dis.readDouble();
           				}
					
						this.OCUPACIONES_ID = readInteger(dis);
					
						this.ETNICAS_ID = readInteger(dis);
					
						this.NSOCIOECONOMICOS_ID = readInteger(dis);
					
						this.TVIVIENDA_ID = readInteger(dis);
					
						this.NEDUCATIVOS_ID = readInteger(dis);
					
						this.ESMADSCRITO = readInteger(dis);
					
					this.OBSERVACIONES = readString(dis);
					
						this.ENTAPORTANTES_ID = readInteger(dis);
					
						this.GRDMILITARES_ID = readInteger(dis);
					
						this.FUERZAS_ID = readInteger(dis);
					
						this.UMILITARES_ID = readInteger(dis);
					
						this.TVINCULACIONES_ID = readInteger(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
						this.ESTADOS_ID = readInteger(dis);
					
						this.MOTIVOSESTADO_ID = (BigDecimal) dis.readObject();
					
					this.MOTIVO = readString(dis);
					
						this.RNOVEDADES_ID = (BigDecimal) dis.readObject();
					
					this.FECHA_CADUCIDAD = readDate(dis);
					
					this.FECHA_VINCULACION = readDate(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.AFILIADO_ID = (BigDecimal) dis.readObject();
					
					this.TIPO_AFILIADO = readString(dis);
					
					this.ESTADO_ENTIDAD = readString(dis);
					
						this.ENTIDAD_PRINCIPAL = readInteger(dis);
					
						this.TREGIMEN_ID = readInteger(dis);
					
						this.ID_UNICO_ENTIDAD = (BigDecimal) dis.readObject();
					
					this.CORREO_ELECTRONICO = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.FECHA_DEFUNCION = readDate(dis);
					
						this.PLANAFILIACIONES_ID = readInteger(dis);
					
						this.ID_BDUA = (BigDecimal) dis.readObject();
					
					this.MOTIVO_CAMBIO_ESTADO = readString(dis);
					
					this.MOTIVO_CAMBIO_ESM = readString(dis);
					
						this.TDISCAPACIDADES_ID = readInteger(dis);
					
						this.PESPECIAL_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_EXP_DOC,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_EXPEDICION_DOCUMENTO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_NACIMIENTO,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_NACIMIENTO,dos);
					
					// Integer
				
						writeInteger(this.SEXOS_ID,dos);
					
					// String
				
						writeString(this.DIRECCION,dos);
					
					// String
				
						writeString(this.TELEFONO,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_RESIDENCIA,dos);
					
					// Integer
				
						writeInteger(this.LOCALIDADES_ID,dos);
					
					// Integer
				
						writeInteger(this.GSANGUINEOS_ID,dos);
					
					// Double
				
						if(this.ESTATURA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ESTATURA);
		            	}
					
					// Integer
				
						writeInteger(this.OCUPACIONES_ID,dos);
					
					// Integer
				
						writeInteger(this.ETNICAS_ID,dos);
					
					// Integer
				
						writeInteger(this.NSOCIOECONOMICOS_ID,dos);
					
					// Integer
				
						writeInteger(this.TVIVIENDA_ID,dos);
					
					// Integer
				
						writeInteger(this.NEDUCATIVOS_ID,dos);
					
					// Integer
				
						writeInteger(this.ESMADSCRITO,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// Integer
				
						writeInteger(this.ENTAPORTANTES_ID,dos);
					
					// Integer
				
						writeInteger(this.GRDMILITARES_ID,dos);
					
					// Integer
				
						writeInteger(this.FUERZAS_ID,dos);
					
					// Integer
				
						writeInteger(this.UMILITARES_ID,dos);
					
					// Integer
				
						writeInteger(this.TVINCULACIONES_ID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// Integer
				
						writeInteger(this.ESTADOS_ID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MOTIVOSESTADO_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RNOVEDADES_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA_CADUCIDAD,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_VINCULACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.AFILIADO_ID);
					
					// String
				
						writeString(this.TIPO_AFILIADO,dos);
					
					// String
				
						writeString(this.ESTADO_ENTIDAD,dos);
					
					// Integer
				
						writeInteger(this.ENTIDAD_PRINCIPAL,dos);
					
					// Integer
				
						writeInteger(this.TREGIMEN_ID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ID_UNICO_ENTIDAD);
					
					// String
				
						writeString(this.CORREO_ELECTRONICO,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_DEFUNCION,dos);
					
					// Integer
				
						writeInteger(this.PLANAFILIACIONES_ID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ID_BDUA);
					
					// String
				
						writeString(this.MOTIVO_CAMBIO_ESTADO,dos);
					
					// String
				
						writeString(this.MOTIVO_CAMBIO_ESM,dos);
					
					// Integer
				
						writeInteger(this.TDISCAPACIDADES_ID,dos);
					
					// Integer
				
						writeInteger(this.PESPECIAL_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_EXP_DOC,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_EXPEDICION_DOCUMENTO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_NACIMIENTO,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_NACIMIENTO,dos);
					
					// Integer
				
						writeInteger(this.SEXOS_ID,dos);
					
					// String
				
						writeString(this.DIRECCION,dos);
					
					// String
				
						writeString(this.TELEFONO,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_RESIDENCIA,dos);
					
					// Integer
				
						writeInteger(this.LOCALIDADES_ID,dos);
					
					// Integer
				
						writeInteger(this.GSANGUINEOS_ID,dos);
					
					// Double
				
						if(this.ESTATURA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ESTATURA);
		            	}
					
					// Integer
				
						writeInteger(this.OCUPACIONES_ID,dos);
					
					// Integer
				
						writeInteger(this.ETNICAS_ID,dos);
					
					// Integer
				
						writeInteger(this.NSOCIOECONOMICOS_ID,dos);
					
					// Integer
				
						writeInteger(this.TVIVIENDA_ID,dos);
					
					// Integer
				
						writeInteger(this.NEDUCATIVOS_ID,dos);
					
					// Integer
				
						writeInteger(this.ESMADSCRITO,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// Integer
				
						writeInteger(this.ENTAPORTANTES_ID,dos);
					
					// Integer
				
						writeInteger(this.GRDMILITARES_ID,dos);
					
					// Integer
				
						writeInteger(this.FUERZAS_ID,dos);
					
					// Integer
				
						writeInteger(this.UMILITARES_ID,dos);
					
					// Integer
				
						writeInteger(this.TVINCULACIONES_ID,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// Integer
				
						writeInteger(this.ESTADOS_ID,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.MOTIVOSESTADO_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RNOVEDADES_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA_CADUCIDAD,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_VINCULACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AFILIADO_ID);
					
					// String
				
						writeString(this.TIPO_AFILIADO,dos);
					
					// String
				
						writeString(this.ESTADO_ENTIDAD,dos);
					
					// Integer
				
						writeInteger(this.ENTIDAD_PRINCIPAL,dos);
					
					// Integer
				
						writeInteger(this.TREGIMEN_ID,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID_UNICO_ENTIDAD);
					
					// String
				
						writeString(this.CORREO_ELECTRONICO,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_DEFUNCION,dos);
					
					// Integer
				
						writeInteger(this.PLANAFILIACIONES_ID,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID_BDUA);
					
					// String
				
						writeString(this.MOTIVO_CAMBIO_ESTADO,dos);
					
					// String
				
						writeString(this.MOTIVO_CAMBIO_ESM,dos);
					
					// Integer
				
						writeInteger(this.TDISCAPACIDADES_ID,dos);
					
					// Integer
				
						writeInteger(this.PESPECIAL_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",LUGAR_EXP_DOC="+String.valueOf(LUGAR_EXP_DOC));
		sb.append(",FECHA_EXPEDICION_DOCUMENTO="+String.valueOf(FECHA_EXPEDICION_DOCUMENTO));
		sb.append(",FECHA_NACIMIENTO="+String.valueOf(FECHA_NACIMIENTO));
		sb.append(",LUGAR_NACIMIENTO="+String.valueOf(LUGAR_NACIMIENTO));
		sb.append(",SEXOS_ID="+String.valueOf(SEXOS_ID));
		sb.append(",DIRECCION="+DIRECCION);
		sb.append(",TELEFONO="+TELEFONO);
		sb.append(",LUGAR_RESIDENCIA="+String.valueOf(LUGAR_RESIDENCIA));
		sb.append(",LOCALIDADES_ID="+String.valueOf(LOCALIDADES_ID));
		sb.append(",GSANGUINEOS_ID="+String.valueOf(GSANGUINEOS_ID));
		sb.append(",ESTATURA="+String.valueOf(ESTATURA));
		sb.append(",OCUPACIONES_ID="+String.valueOf(OCUPACIONES_ID));
		sb.append(",ETNICAS_ID="+String.valueOf(ETNICAS_ID));
		sb.append(",NSOCIOECONOMICOS_ID="+String.valueOf(NSOCIOECONOMICOS_ID));
		sb.append(",TVIVIENDA_ID="+String.valueOf(TVIVIENDA_ID));
		sb.append(",NEDUCATIVOS_ID="+String.valueOf(NEDUCATIVOS_ID));
		sb.append(",ESMADSCRITO="+String.valueOf(ESMADSCRITO));
		sb.append(",OBSERVACIONES="+OBSERVACIONES);
		sb.append(",ENTAPORTANTES_ID="+String.valueOf(ENTAPORTANTES_ID));
		sb.append(",GRDMILITARES_ID="+String.valueOf(GRDMILITARES_ID));
		sb.append(",FUERZAS_ID="+String.valueOf(FUERZAS_ID));
		sb.append(",UMILITARES_ID="+String.valueOf(UMILITARES_ID));
		sb.append(",TVINCULACIONES_ID="+String.valueOf(TVINCULACIONES_ID));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",ESTADOS_ID="+String.valueOf(ESTADOS_ID));
		sb.append(",MOTIVOSESTADO_ID="+String.valueOf(MOTIVOSESTADO_ID));
		sb.append(",MOTIVO="+MOTIVO);
		sb.append(",RNOVEDADES_ID="+String.valueOf(RNOVEDADES_ID));
		sb.append(",FECHA_CADUCIDAD="+String.valueOf(FECHA_CADUCIDAD));
		sb.append(",FECHA_VINCULACION="+String.valueOf(FECHA_VINCULACION));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",AFILIADO_ID="+String.valueOf(AFILIADO_ID));
		sb.append(",TIPO_AFILIADO="+TIPO_AFILIADO);
		sb.append(",ESTADO_ENTIDAD="+ESTADO_ENTIDAD);
		sb.append(",ENTIDAD_PRINCIPAL="+String.valueOf(ENTIDAD_PRINCIPAL));
		sb.append(",TREGIMEN_ID="+String.valueOf(TREGIMEN_ID));
		sb.append(",ID_UNICO_ENTIDAD="+String.valueOf(ID_UNICO_ENTIDAD));
		sb.append(",CORREO_ELECTRONICO="+CORREO_ELECTRONICO);
		sb.append(",CELULAR="+CELULAR);
		sb.append(",FECHA_DEFUNCION="+String.valueOf(FECHA_DEFUNCION));
		sb.append(",PLANAFILIACIONES_ID="+String.valueOf(PLANAFILIACIONES_ID));
		sb.append(",ID_BDUA="+String.valueOf(ID_BDUA));
		sb.append(",MOTIVO_CAMBIO_ESTADO="+MOTIVO_CAMBIO_ESTADO);
		sb.append(",MOTIVO_CAMBIO_ESM="+MOTIVO_CAMBIO_ESM);
		sb.append(",TDISCAPACIDADES_ID="+String.valueOf(TDISCAPACIDADES_ID));
		sb.append(",PESPECIAL_ID="+String.valueOf(PESPECIAL_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ActualizablesStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row24Struct implements routines.system.IPersistableRow<row24Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 400;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 400;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 400;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 400;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String SIGLA_DOCUMENTO;

				public String getSIGLA_DOCUMENTO () {
					return this.SIGLA_DOCUMENTO;
				}

				public Boolean SIGLA_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean SIGLA_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer SIGLA_DOCUMENTOLength(){
				    return 400;
				}
				public Integer SIGLA_DOCUMENTOPrecision(){
				    return 0;
				}
				public String SIGLA_DOCUMENTODefault(){
				
					return null;
				
				}
				public String SIGLA_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String SIGLA_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String SIGLA_DOCUMENTOOriginalDbColumnName(){
				
					return "SIGLA_DOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PAIS_EXP_DOCUMENTO;

				public String getPAIS_EXP_DOCUMENTO () {
					return this.PAIS_EXP_DOCUMENTO;
				}

				public Boolean PAIS_EXP_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean PAIS_EXP_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer PAIS_EXP_DOCUMENTOLength(){
				    return 400;
				}
				public Integer PAIS_EXP_DOCUMENTOPrecision(){
				    return 0;
				}
				public String PAIS_EXP_DOCUMENTODefault(){
				
					return null;
				
				}
				public String PAIS_EXP_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String PAIS_EXP_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String PAIS_EXP_DOCUMENTOOriginalDbColumnName(){
				
					return "PAIS_EXP_DOCUMENTO";
				
				}

				
			    public String DEPTO_EXP_DOCUMENTO;

				public String getDEPTO_EXP_DOCUMENTO () {
					return this.DEPTO_EXP_DOCUMENTO;
				}

				public Boolean DEPTO_EXP_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DEPTO_EXP_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DEPTO_EXP_DOCUMENTOLength(){
				    return 400;
				}
				public Integer DEPTO_EXP_DOCUMENTOPrecision(){
				    return 0;
				}
				public String DEPTO_EXP_DOCUMENTODefault(){
				
					return null;
				
				}
				public String DEPTO_EXP_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DEPTO_EXP_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DEPTO_EXP_DOCUMENTOOriginalDbColumnName(){
				
					return "DEPTO_EXP_DOCUMENTO";
				
				}

				
			    public String MUNICIPIO_EXP_DOCUMENTO;

				public String getMUNICIPIO_EXP_DOCUMENTO () {
					return this.MUNICIPIO_EXP_DOCUMENTO;
				}

				public Boolean MUNICIPIO_EXP_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean MUNICIPIO_EXP_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer MUNICIPIO_EXP_DOCUMENTOLength(){
				    return 400;
				}
				public Integer MUNICIPIO_EXP_DOCUMENTOPrecision(){
				    return 0;
				}
				public String MUNICIPIO_EXP_DOCUMENTODefault(){
				
					return null;
				
				}
				public String MUNICIPIO_EXP_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String MUNICIPIO_EXP_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String MUNICIPIO_EXP_DOCUMENTOOriginalDbColumnName(){
				
					return "MUNICIPIO_EXP_DOCUMENTO";
				
				}

				
			    public String FECHA_EXPEDICION_DOCUMENTO;

				public String getFECHA_EXPEDICION_DOCUMENTO () {
					return this.FECHA_EXPEDICION_DOCUMENTO;
				}

				public Boolean FECHA_EXPEDICION_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_EXPEDICION_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer FECHA_EXPEDICION_DOCUMENTOLength(){
				    return null;
				}
				public Integer FECHA_EXPEDICION_DOCUMENTOPrecision(){
				    return null;
				}
				public String FECHA_EXPEDICION_DOCUMENTODefault(){
				
					return null;
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOOriginalDbColumnName(){
				
					return "FECHA_EXPEDICION_DOCUMENTO";
				
				}

				
			    public String FECHA_NACIMIENTO;

				public String getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return 400;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return 0;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public String PAIS_NACIMIENTO;

				public String getPAIS_NACIMIENTO () {
					return this.PAIS_NACIMIENTO;
				}

				public Boolean PAIS_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean PAIS_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer PAIS_NACIMIENTOLength(){
				    return 400;
				}
				public Integer PAIS_NACIMIENTOPrecision(){
				    return 0;
				}
				public String PAIS_NACIMIENTODefault(){
				
					return null;
				
				}
				public String PAIS_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String PAIS_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String PAIS_NACIMIENTOOriginalDbColumnName(){
				
					return "PAIS_NACIMIENTO";
				
				}

				
			    public String DEPARTAMENTO_NACIMIENTO;

				public String getDEPARTAMENTO_NACIMIENTO () {
					return this.DEPARTAMENTO_NACIMIENTO;
				}

				public Boolean DEPARTAMENTO_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean DEPARTAMENTO_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer DEPARTAMENTO_NACIMIENTOLength(){
				    return 400;
				}
				public Integer DEPARTAMENTO_NACIMIENTOPrecision(){
				    return 0;
				}
				public String DEPARTAMENTO_NACIMIENTODefault(){
				
					return null;
				
				}
				public String DEPARTAMENTO_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String DEPARTAMENTO_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String DEPARTAMENTO_NACIMIENTOOriginalDbColumnName(){
				
					return "DEPARTAMENTO_NACIMIENTO";
				
				}

				
			    public String MUNICIPIO_NACIMIENTO;

				public String getMUNICIPIO_NACIMIENTO () {
					return this.MUNICIPIO_NACIMIENTO;
				}

				public Boolean MUNICIPIO_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean MUNICIPIO_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer MUNICIPIO_NACIMIENTOLength(){
				    return 400;
				}
				public Integer MUNICIPIO_NACIMIENTOPrecision(){
				    return 0;
				}
				public String MUNICIPIO_NACIMIENTODefault(){
				
					return null;
				
				}
				public String MUNICIPIO_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String MUNICIPIO_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String MUNICIPIO_NACIMIENTOOriginalDbColumnName(){
				
					return "MUNICIPIO_NACIMIENTO";
				
				}

				
			    public String SEXO;

				public String getSEXO () {
					return this.SEXO;
				}

				public Boolean SEXOIsNullable(){
				    return true;
				}
				public Boolean SEXOIsKey(){
				    return false;
				}
				public Integer SEXOLength(){
				    return 400;
				}
				public Integer SEXOPrecision(){
				    return 0;
				}
				public String SEXODefault(){
				
					return null;
				
				}
				public String SEXOComment(){
				
				    return "";
				
				}
				public String SEXOPattern(){
				
					return "";
				
				}
				public String SEXOOriginalDbColumnName(){
				
					return "SEXO";
				
				}

				
			    public String DIRECCION;

				public String getDIRECCION () {
					return this.DIRECCION;
				}

				public Boolean DIRECCIONIsNullable(){
				    return true;
				}
				public Boolean DIRECCIONIsKey(){
				    return false;
				}
				public Integer DIRECCIONLength(){
				    return 400;
				}
				public Integer DIRECCIONPrecision(){
				    return 0;
				}
				public String DIRECCIONDefault(){
				
					return null;
				
				}
				public String DIRECCIONComment(){
				
				    return "";
				
				}
				public String DIRECCIONPattern(){
				
					return "";
				
				}
				public String DIRECCIONOriginalDbColumnName(){
				
					return "DIRECCION";
				
				}

				
			    public String TELEFONO;

				public String getTELEFONO () {
					return this.TELEFONO;
				}

				public Boolean TELEFONOIsNullable(){
				    return true;
				}
				public Boolean TELEFONOIsKey(){
				    return false;
				}
				public Integer TELEFONOLength(){
				    return 400;
				}
				public Integer TELEFONOPrecision(){
				    return 0;
				}
				public String TELEFONODefault(){
				
					return null;
				
				}
				public String TELEFONOComment(){
				
				    return "";
				
				}
				public String TELEFONOPattern(){
				
					return "";
				
				}
				public String TELEFONOOriginalDbColumnName(){
				
					return "TELEFONO";
				
				}

				
			    public String PAIS_RESIDENCIA;

				public String getPAIS_RESIDENCIA () {
					return this.PAIS_RESIDENCIA;
				}

				public Boolean PAIS_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean PAIS_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer PAIS_RESIDENCIALength(){
				    return 400;
				}
				public Integer PAIS_RESIDENCIAPrecision(){
				    return 0;
				}
				public String PAIS_RESIDENCIADefault(){
				
					return null;
				
				}
				public String PAIS_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String PAIS_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String PAIS_RESIDENCIAOriginalDbColumnName(){
				
					return "PAIS_RESIDENCIA";
				
				}

				
			    public String DEPARTAMENTO_RESIDENCIA;

				public String getDEPARTAMENTO_RESIDENCIA () {
					return this.DEPARTAMENTO_RESIDENCIA;
				}

				public Boolean DEPARTAMENTO_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean DEPARTAMENTO_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer DEPARTAMENTO_RESIDENCIALength(){
				    return 400;
				}
				public Integer DEPARTAMENTO_RESIDENCIAPrecision(){
				    return 0;
				}
				public String DEPARTAMENTO_RESIDENCIADefault(){
				
					return null;
				
				}
				public String DEPARTAMENTO_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String DEPARTAMENTO_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String DEPARTAMENTO_RESIDENCIAOriginalDbColumnName(){
				
					return "DEPARTAMENTO_RESIDENCIA";
				
				}

				
			    public String MUNICIPIO_RESIDENCIA;

				public String getMUNICIPIO_RESIDENCIA () {
					return this.MUNICIPIO_RESIDENCIA;
				}

				public Boolean MUNICIPIO_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean MUNICIPIO_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer MUNICIPIO_RESIDENCIALength(){
				    return 400;
				}
				public Integer MUNICIPIO_RESIDENCIAPrecision(){
				    return 0;
				}
				public String MUNICIPIO_RESIDENCIADefault(){
				
					return null;
				
				}
				public String MUNICIPIO_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String MUNICIPIO_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String MUNICIPIO_RESIDENCIAOriginalDbColumnName(){
				
					return "MUNICIPIO_RESIDENCIA";
				
				}

				
			    public String LOCALIDAD_RESIDENCIA;

				public String getLOCALIDAD_RESIDENCIA () {
					return this.LOCALIDAD_RESIDENCIA;
				}

				public Boolean LOCALIDAD_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean LOCALIDAD_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer LOCALIDAD_RESIDENCIALength(){
				    return 400;
				}
				public Integer LOCALIDAD_RESIDENCIAPrecision(){
				    return 0;
				}
				public String LOCALIDAD_RESIDENCIADefault(){
				
					return null;
				
				}
				public String LOCALIDAD_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String LOCALIDAD_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String LOCALIDAD_RESIDENCIAOriginalDbColumnName(){
				
					return "LOCALIDAD_RESIDENCIA";
				
				}

				
			    public String GRUPO_SANGUINEO;

				public String getGRUPO_SANGUINEO () {
					return this.GRUPO_SANGUINEO;
				}

				public Boolean GRUPO_SANGUINEOIsNullable(){
				    return true;
				}
				public Boolean GRUPO_SANGUINEOIsKey(){
				    return false;
				}
				public Integer GRUPO_SANGUINEOLength(){
				    return 400;
				}
				public Integer GRUPO_SANGUINEOPrecision(){
				    return 0;
				}
				public String GRUPO_SANGUINEODefault(){
				
					return null;
				
				}
				public String GRUPO_SANGUINEOComment(){
				
				    return "";
				
				}
				public String GRUPO_SANGUINEOPattern(){
				
					return "";
				
				}
				public String GRUPO_SANGUINEOOriginalDbColumnName(){
				
					return "GRUPO_SANGUINEO";
				
				}

				
			    public String FACTOR_RH;

				public String getFACTOR_RH () {
					return this.FACTOR_RH;
				}

				public Boolean FACTOR_RHIsNullable(){
				    return true;
				}
				public Boolean FACTOR_RHIsKey(){
				    return false;
				}
				public Integer FACTOR_RHLength(){
				    return 400;
				}
				public Integer FACTOR_RHPrecision(){
				    return 0;
				}
				public String FACTOR_RHDefault(){
				
					return null;
				
				}
				public String FACTOR_RHComment(){
				
				    return "";
				
				}
				public String FACTOR_RHPattern(){
				
					return "";
				
				}
				public String FACTOR_RHOriginalDbColumnName(){
				
					return "FACTOR_RH";
				
				}

				
			    public String OCUPACION;

				public String getOCUPACION () {
					return this.OCUPACION;
				}

				public Boolean OCUPACIONIsNullable(){
				    return true;
				}
				public Boolean OCUPACIONIsKey(){
				    return false;
				}
				public Integer OCUPACIONLength(){
				    return 400;
				}
				public Integer OCUPACIONPrecision(){
				    return 0;
				}
				public String OCUPACIONDefault(){
				
					return null;
				
				}
				public String OCUPACIONComment(){
				
				    return "";
				
				}
				public String OCUPACIONPattern(){
				
					return "";
				
				}
				public String OCUPACIONOriginalDbColumnName(){
				
					return "OCUPACION";
				
				}

				
			    public String ESTATURA;

				public String getESTATURA () {
					return this.ESTATURA;
				}

				public Boolean ESTATURAIsNullable(){
				    return true;
				}
				public Boolean ESTATURAIsKey(){
				    return false;
				}
				public Integer ESTATURALength(){
				    return 40;
				}
				public Integer ESTATURAPrecision(){
				    return 0;
				}
				public String ESTATURADefault(){
				
					return null;
				
				}
				public String ESTATURAComment(){
				
				    return "";
				
				}
				public String ESTATURAPattern(){
				
					return "";
				
				}
				public String ESTATURAOriginalDbColumnName(){
				
					return "ESTATURA";
				
				}

				
			    public String GRUPO_ETNICO;

				public String getGRUPO_ETNICO () {
					return this.GRUPO_ETNICO;
				}

				public Boolean GRUPO_ETNICOIsNullable(){
				    return true;
				}
				public Boolean GRUPO_ETNICOIsKey(){
				    return false;
				}
				public Integer GRUPO_ETNICOLength(){
				    return 400;
				}
				public Integer GRUPO_ETNICOPrecision(){
				    return 0;
				}
				public String GRUPO_ETNICODefault(){
				
					return null;
				
				}
				public String GRUPO_ETNICOComment(){
				
				    return "";
				
				}
				public String GRUPO_ETNICOPattern(){
				
					return "";
				
				}
				public String GRUPO_ETNICOOriginalDbColumnName(){
				
					return "GRUPO_ETNICO";
				
				}

				
			    public String NSOCIOECONOMICO;

				public String getNSOCIOECONOMICO () {
					return this.NSOCIOECONOMICO;
				}

				public Boolean NSOCIOECONOMICOIsNullable(){
				    return true;
				}
				public Boolean NSOCIOECONOMICOIsKey(){
				    return false;
				}
				public Integer NSOCIOECONOMICOLength(){
				    return 400;
				}
				public Integer NSOCIOECONOMICOPrecision(){
				    return 0;
				}
				public String NSOCIOECONOMICODefault(){
				
					return null;
				
				}
				public String NSOCIOECONOMICOComment(){
				
				    return "";
				
				}
				public String NSOCIOECONOMICOPattern(){
				
					return "";
				
				}
				public String NSOCIOECONOMICOOriginalDbColumnName(){
				
					return "NSOCIOECONOMICO";
				
				}

				
			    public String TVIVIENDA;

				public String getTVIVIENDA () {
					return this.TVIVIENDA;
				}

				public Boolean TVIVIENDAIsNullable(){
				    return true;
				}
				public Boolean TVIVIENDAIsKey(){
				    return false;
				}
				public Integer TVIVIENDALength(){
				    return 400;
				}
				public Integer TVIVIENDAPrecision(){
				    return 0;
				}
				public String TVIVIENDADefault(){
				
					return null;
				
				}
				public String TVIVIENDAComment(){
				
				    return "";
				
				}
				public String TVIVIENDAPattern(){
				
					return "";
				
				}
				public String TVIVIENDAOriginalDbColumnName(){
				
					return "TVIVIENDA";
				
				}

				
			    public String NEDUCATIVOS;

				public String getNEDUCATIVOS () {
					return this.NEDUCATIVOS;
				}

				public Boolean NEDUCATIVOSIsNullable(){
				    return true;
				}
				public Boolean NEDUCATIVOSIsKey(){
				    return false;
				}
				public Integer NEDUCATIVOSLength(){
				    return 400;
				}
				public Integer NEDUCATIVOSPrecision(){
				    return 0;
				}
				public String NEDUCATIVOSDefault(){
				
					return null;
				
				}
				public String NEDUCATIVOSComment(){
				
				    return "";
				
				}
				public String NEDUCATIVOSPattern(){
				
					return "";
				
				}
				public String NEDUCATIVOSOriginalDbColumnName(){
				
					return "NEDUCATIVOS";
				
				}

				
			    public String CODIGO_ESTABLECIMIENTO;

				public String getCODIGO_ESTABLECIMIENTO () {
					return this.CODIGO_ESTABLECIMIENTO;
				}

				public Boolean CODIGO_ESTABLECIMIENTOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_ESTABLECIMIENTOIsKey(){
				    return false;
				}
				public Integer CODIGO_ESTABLECIMIENTOLength(){
				    return 400;
				}
				public Integer CODIGO_ESTABLECIMIENTOPrecision(){
				    return 0;
				}
				public String CODIGO_ESTABLECIMIENTODefault(){
				
					return null;
				
				}
				public String CODIGO_ESTABLECIMIENTOComment(){
				
				    return "";
				
				}
				public String CODIGO_ESTABLECIMIENTOPattern(){
				
					return "";
				
				}
				public String CODIGO_ESTABLECIMIENTOOriginalDbColumnName(){
				
					return "CODIGO_ESTABLECIMIENTO";
				
				}

				
			    public String ESTABLECIMIENTO_ADSCRITO;

				public String getESTABLECIMIENTO_ADSCRITO () {
					return this.ESTABLECIMIENTO_ADSCRITO;
				}

				public Boolean ESTABLECIMIENTO_ADSCRITOIsNullable(){
				    return true;
				}
				public Boolean ESTABLECIMIENTO_ADSCRITOIsKey(){
				    return false;
				}
				public Integer ESTABLECIMIENTO_ADSCRITOLength(){
				    return 400;
				}
				public Integer ESTABLECIMIENTO_ADSCRITOPrecision(){
				    return 0;
				}
				public String ESTABLECIMIENTO_ADSCRITODefault(){
				
					return null;
				
				}
				public String ESTABLECIMIENTO_ADSCRITOComment(){
				
				    return "";
				
				}
				public String ESTABLECIMIENTO_ADSCRITOPattern(){
				
					return "";
				
				}
				public String ESTABLECIMIENTO_ADSCRITOOriginalDbColumnName(){
				
					return "ESTABLECIMIENTO_ADSCRITO";
				
				}

				
			    public String ENTIDAD_APORTANTE;

				public String getENTIDAD_APORTANTE () {
					return this.ENTIDAD_APORTANTE;
				}

				public Boolean ENTIDAD_APORTANTEIsNullable(){
				    return true;
				}
				public Boolean ENTIDAD_APORTANTEIsKey(){
				    return false;
				}
				public Integer ENTIDAD_APORTANTELength(){
				    return 400;
				}
				public Integer ENTIDAD_APORTANTEPrecision(){
				    return 0;
				}
				public String ENTIDAD_APORTANTEDefault(){
				
					return null;
				
				}
				public String ENTIDAD_APORTANTEComment(){
				
				    return "";
				
				}
				public String ENTIDAD_APORTANTEPattern(){
				
					return "";
				
				}
				public String ENTIDAD_APORTANTEOriginalDbColumnName(){
				
					return "ENTIDAD_APORTANTE";
				
				}

				
			    public String CODIGO_GRDMILITAR;

				public String getCODIGO_GRDMILITAR () {
					return this.CODIGO_GRDMILITAR;
				}

				public Boolean CODIGO_GRDMILITARIsNullable(){
				    return true;
				}
				public Boolean CODIGO_GRDMILITARIsKey(){
				    return false;
				}
				public Integer CODIGO_GRDMILITARLength(){
				    return 400;
				}
				public Integer CODIGO_GRDMILITARPrecision(){
				    return 0;
				}
				public String CODIGO_GRDMILITARDefault(){
				
					return null;
				
				}
				public String CODIGO_GRDMILITARComment(){
				
				    return "";
				
				}
				public String CODIGO_GRDMILITARPattern(){
				
					return "";
				
				}
				public String CODIGO_GRDMILITAROriginalDbColumnName(){
				
					return "CODIGO_GRDMILITAR";
				
				}

				
			    public String SIGLA_GRDMILITAR;

				public String getSIGLA_GRDMILITAR () {
					return this.SIGLA_GRDMILITAR;
				}

				public Boolean SIGLA_GRDMILITARIsNullable(){
				    return true;
				}
				public Boolean SIGLA_GRDMILITARIsKey(){
				    return false;
				}
				public Integer SIGLA_GRDMILITARLength(){
				    return 400;
				}
				public Integer SIGLA_GRDMILITARPrecision(){
				    return 0;
				}
				public String SIGLA_GRDMILITARDefault(){
				
					return null;
				
				}
				public String SIGLA_GRDMILITARComment(){
				
				    return "";
				
				}
				public String SIGLA_GRDMILITARPattern(){
				
					return "";
				
				}
				public String SIGLA_GRDMILITAROriginalDbColumnName(){
				
					return "SIGLA_GRDMILITAR";
				
				}

				
			    public String FUERZA_MILITAR;

				public String getFUERZA_MILITAR () {
					return this.FUERZA_MILITAR;
				}

				public Boolean FUERZA_MILITARIsNullable(){
				    return true;
				}
				public Boolean FUERZA_MILITARIsKey(){
				    return false;
				}
				public Integer FUERZA_MILITARLength(){
				    return 400;
				}
				public Integer FUERZA_MILITARPrecision(){
				    return 0;
				}
				public String FUERZA_MILITARDefault(){
				
					return null;
				
				}
				public String FUERZA_MILITARComment(){
				
				    return "";
				
				}
				public String FUERZA_MILITARPattern(){
				
					return "";
				
				}
				public String FUERZA_MILITAROriginalDbColumnName(){
				
					return "FUERZA_MILITAR";
				
				}

				
			    public String CODIGO_UMILITAR;

				public String getCODIGO_UMILITAR () {
					return this.CODIGO_UMILITAR;
				}

				public Boolean CODIGO_UMILITARIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UMILITARIsKey(){
				    return false;
				}
				public Integer CODIGO_UMILITARLength(){
				    return 400;
				}
				public Integer CODIGO_UMILITARPrecision(){
				    return 0;
				}
				public String CODIGO_UMILITARDefault(){
				
					return null;
				
				}
				public String CODIGO_UMILITARComment(){
				
				    return "";
				
				}
				public String CODIGO_UMILITARPattern(){
				
					return "";
				
				}
				public String CODIGO_UMILITAROriginalDbColumnName(){
				
					return "CODIGO_UMILITAR";
				
				}

				
			    public String UNIDAD_MILITAR;

				public String getUNIDAD_MILITAR () {
					return this.UNIDAD_MILITAR;
				}

				public Boolean UNIDAD_MILITARIsNullable(){
				    return true;
				}
				public Boolean UNIDAD_MILITARIsKey(){
				    return false;
				}
				public Integer UNIDAD_MILITARLength(){
				    return 400;
				}
				public Integer UNIDAD_MILITARPrecision(){
				    return 0;
				}
				public String UNIDAD_MILITARDefault(){
				
					return null;
				
				}
				public String UNIDAD_MILITARComment(){
				
				    return "";
				
				}
				public String UNIDAD_MILITARPattern(){
				
					return "";
				
				}
				public String UNIDAD_MILITAROriginalDbColumnName(){
				
					return "UNIDAD_MILITAR";
				
				}

				
			    public String TIPO_DE_VINCULACION;

				public String getTIPO_DE_VINCULACION () {
					return this.TIPO_DE_VINCULACION;
				}

				public Boolean TIPO_DE_VINCULACIONIsNullable(){
				    return true;
				}
				public Boolean TIPO_DE_VINCULACIONIsKey(){
				    return false;
				}
				public Integer TIPO_DE_VINCULACIONLength(){
				    return 400;
				}
				public Integer TIPO_DE_VINCULACIONPrecision(){
				    return 0;
				}
				public String TIPO_DE_VINCULACIONDefault(){
				
					return null;
				
				}
				public String TIPO_DE_VINCULACIONComment(){
				
				    return "";
				
				}
				public String TIPO_DE_VINCULACIONPattern(){
				
					return "";
				
				}
				public String TIPO_DE_VINCULACIONOriginalDbColumnName(){
				
					return "TIPO_DE_VINCULACION";
				
				}

				
			    public String SIGLA_ESTADO;

				public String getSIGLA_ESTADO () {
					return this.SIGLA_ESTADO;
				}

				public Boolean SIGLA_ESTADOIsNullable(){
				    return true;
				}
				public Boolean SIGLA_ESTADOIsKey(){
				    return false;
				}
				public Integer SIGLA_ESTADOLength(){
				    return 400;
				}
				public Integer SIGLA_ESTADOPrecision(){
				    return 0;
				}
				public String SIGLA_ESTADODefault(){
				
					return null;
				
				}
				public String SIGLA_ESTADOComment(){
				
				    return "";
				
				}
				public String SIGLA_ESTADOPattern(){
				
					return "";
				
				}
				public String SIGLA_ESTADOOriginalDbColumnName(){
				
					return "SIGLA_ESTADO";
				
				}

				
			    public BigDecimal MOTIVOSESTADO_ID;

				public BigDecimal getMOTIVOSESTADO_ID () {
					return this.MOTIVOSESTADO_ID;
				}

				public Boolean MOTIVOSESTADO_IDIsNullable(){
				    return false;
				}
				public Boolean MOTIVOSESTADO_IDIsKey(){
				    return false;
				}
				public Integer MOTIVOSESTADO_IDLength(){
				    return 0;
				}
				public Integer MOTIVOSESTADO_IDPrecision(){
				    return null;
				}
				public String MOTIVOSESTADO_IDDefault(){
				
					return "";
				
				}
				public String MOTIVOSESTADO_IDComment(){
				
				    return "";
				
				}
				public String MOTIVOSESTADO_IDPattern(){
				
					return "";
				
				}
				public String MOTIVOSESTADO_IDOriginalDbColumnName(){
				
					return "MOTIVOSESTADO_ID";
				
				}

				
			    public String MOTIVO;

				public String getMOTIVO () {
					return this.MOTIVO;
				}

				public Boolean MOTIVOIsNullable(){
				    return false;
				}
				public Boolean MOTIVOIsKey(){
				    return false;
				}
				public Integer MOTIVOLength(){
				    return 250;
				}
				public Integer MOTIVOPrecision(){
				    return 0;
				}
				public String MOTIVODefault(){
				
					return null;
				
				}
				public String MOTIVOComment(){
				
				    return "";
				
				}
				public String MOTIVOPattern(){
				
					return "";
				
				}
				public String MOTIVOOriginalDbColumnName(){
				
					return "MOTIVO";
				
				}

				
			    public String FECHA_CADUCIDAD;

				public String getFECHA_CADUCIDAD () {
					return this.FECHA_CADUCIDAD;
				}

				public Boolean FECHA_CADUCIDADIsNullable(){
				    return true;
				}
				public Boolean FECHA_CADUCIDADIsKey(){
				    return false;
				}
				public Integer FECHA_CADUCIDADLength(){
				    return 400;
				}
				public Integer FECHA_CADUCIDADPrecision(){
				    return 0;
				}
				public String FECHA_CADUCIDADDefault(){
				
					return null;
				
				}
				public String FECHA_CADUCIDADComment(){
				
				    return "";
				
				}
				public String FECHA_CADUCIDADPattern(){
				
					return "";
				
				}
				public String FECHA_CADUCIDADOriginalDbColumnName(){
				
					return "FECHA_CADUCIDAD";
				
				}

				
			    public String FECHA_VINCULACION;

				public String getFECHA_VINCULACION () {
					return this.FECHA_VINCULACION;
				}

				public Boolean FECHA_VINCULACIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_VINCULACIONIsKey(){
				    return false;
				}
				public Integer FECHA_VINCULACIONLength(){
				    return 400;
				}
				public Integer FECHA_VINCULACIONPrecision(){
				    return 0;
				}
				public String FECHA_VINCULACIONDefault(){
				
					return null;
				
				}
				public String FECHA_VINCULACIONComment(){
				
				    return "";
				
				}
				public String FECHA_VINCULACIONPattern(){
				
					return "";
				
				}
				public String FECHA_VINCULACIONOriginalDbColumnName(){
				
					return "FECHA_VINCULACION";
				
				}

				
			    public BigDecimal ID_UNICO_PERSONA;

				public BigDecimal getID_UNICO_PERSONA () {
					return this.ID_UNICO_PERSONA;
				}

				public Boolean ID_UNICO_PERSONAIsNullable(){
				    return true;
				}
				public Boolean ID_UNICO_PERSONAIsKey(){
				    return false;
				}
				public Integer ID_UNICO_PERSONALength(){
				    return 0;
				}
				public Integer ID_UNICO_PERSONAPrecision(){
				    return null;
				}
				public String ID_UNICO_PERSONADefault(){
				
					return "";
				
				}
				public String ID_UNICO_PERSONAComment(){
				
				    return "";
				
				}
				public String ID_UNICO_PERSONAPattern(){
				
					return "";
				
				}
				public String ID_UNICO_PERSONAOriginalDbColumnName(){
				
					return "ID_UNICO_PERSONA";
				
				}

				
			    public BigDecimal ID_UNICO_AFILIADO;

				public BigDecimal getID_UNICO_AFILIADO () {
					return this.ID_UNICO_AFILIADO;
				}

				public Boolean ID_UNICO_AFILIADOIsNullable(){
				    return true;
				}
				public Boolean ID_UNICO_AFILIADOIsKey(){
				    return false;
				}
				public Integer ID_UNICO_AFILIADOLength(){
				    return 0;
				}
				public Integer ID_UNICO_AFILIADOPrecision(){
				    return null;
				}
				public String ID_UNICO_AFILIADODefault(){
				
					return "";
				
				}
				public String ID_UNICO_AFILIADOComment(){
				
				    return "";
				
				}
				public String ID_UNICO_AFILIADOPattern(){
				
					return "";
				
				}
				public String ID_UNICO_AFILIADOOriginalDbColumnName(){
				
					return "ID_UNICO_AFILIADO";
				
				}

				
			    public String OBSERVACIONES;

				public String getOBSERVACIONES () {
					return this.OBSERVACIONES;
				}

				public Boolean OBSERVACIONESIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONESIsKey(){
				    return false;
				}
				public Integer OBSERVACIONESLength(){
				    return 35;
				}
				public Integer OBSERVACIONESPrecision(){
				    return 0;
				}
				public String OBSERVACIONESDefault(){
				
					return null;
				
				}
				public String OBSERVACIONESComment(){
				
				    return "";
				
				}
				public String OBSERVACIONESPattern(){
				
					return "";
				
				}
				public String OBSERVACIONESOriginalDbColumnName(){
				
					return "OBSERVACIONES";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 0;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal RNOVEDADES_ID;

				public BigDecimal getRNOVEDADES_ID () {
					return this.RNOVEDADES_ID;
				}

				public Boolean RNOVEDADES_IDIsNullable(){
				    return false;
				}
				public Boolean RNOVEDADES_IDIsKey(){
				    return false;
				}
				public Integer RNOVEDADES_IDLength(){
				    return 0;
				}
				public Integer RNOVEDADES_IDPrecision(){
				    return null;
				}
				public String RNOVEDADES_IDDefault(){
				
					return "";
				
				}
				public String RNOVEDADES_IDComment(){
				
				    return "";
				
				}
				public String RNOVEDADES_IDPattern(){
				
					return "";
				
				}
				public String RNOVEDADES_IDOriginalDbColumnName(){
				
					return "RNOVEDADES_ID";
				
				}

				
			    public String TIPO_AFILIADO;

				public String getTIPO_AFILIADO () {
					return this.TIPO_AFILIADO;
				}

				public Boolean TIPO_AFILIADOIsNullable(){
				    return true;
				}
				public Boolean TIPO_AFILIADOIsKey(){
				    return false;
				}
				public Integer TIPO_AFILIADOLength(){
				    return null;
				}
				public Integer TIPO_AFILIADOPrecision(){
				    return null;
				}
				public String TIPO_AFILIADODefault(){
				
					return null;
				
				}
				public String TIPO_AFILIADOComment(){
				
				    return "";
				
				}
				public String TIPO_AFILIADOPattern(){
				
					return "";
				
				}
				public String TIPO_AFILIADOOriginalDbColumnName(){
				
					return "TIPO_AFILIADO";
				
				}

				
			    public String ESTADO_ENTIDAD;

				public String getESTADO_ENTIDAD () {
					return this.ESTADO_ENTIDAD;
				}

				public Boolean ESTADO_ENTIDADIsNullable(){
				    return true;
				}
				public Boolean ESTADO_ENTIDADIsKey(){
				    return false;
				}
				public Integer ESTADO_ENTIDADLength(){
				    return null;
				}
				public Integer ESTADO_ENTIDADPrecision(){
				    return null;
				}
				public String ESTADO_ENTIDADDefault(){
				
					return null;
				
				}
				public String ESTADO_ENTIDADComment(){
				
				    return "";
				
				}
				public String ESTADO_ENTIDADPattern(){
				
					return "";
				
				}
				public String ESTADO_ENTIDADOriginalDbColumnName(){
				
					return "ESTADO_ENTIDAD";
				
				}

				
			    public Integer ENTIDAD_PRINCIPAL;

				public Integer getENTIDAD_PRINCIPAL () {
					return this.ENTIDAD_PRINCIPAL;
				}

				public Boolean ENTIDAD_PRINCIPALIsNullable(){
				    return true;
				}
				public Boolean ENTIDAD_PRINCIPALIsKey(){
				    return false;
				}
				public Integer ENTIDAD_PRINCIPALLength(){
				    return null;
				}
				public Integer ENTIDAD_PRINCIPALPrecision(){
				    return null;
				}
				public String ENTIDAD_PRINCIPALDefault(){
				
					return null;
				
				}
				public String ENTIDAD_PRINCIPALComment(){
				
				    return "";
				
				}
				public String ENTIDAD_PRINCIPALPattern(){
				
					return "";
				
				}
				public String ENTIDAD_PRINCIPALOriginalDbColumnName(){
				
					return "ENTIDAD_PRINCIPAL";
				
				}

				
			    public String SIGLA_REGIMEN;

				public String getSIGLA_REGIMEN () {
					return this.SIGLA_REGIMEN;
				}

				public Boolean SIGLA_REGIMENIsNullable(){
				    return true;
				}
				public Boolean SIGLA_REGIMENIsKey(){
				    return false;
				}
				public Integer SIGLA_REGIMENLength(){
				    return null;
				}
				public Integer SIGLA_REGIMENPrecision(){
				    return null;
				}
				public String SIGLA_REGIMENDefault(){
				
					return null;
				
				}
				public String SIGLA_REGIMENComment(){
				
				    return "";
				
				}
				public String SIGLA_REGIMENPattern(){
				
					return "";
				
				}
				public String SIGLA_REGIMENOriginalDbColumnName(){
				
					return "SIGLA_REGIMEN";
				
				}

				
			    public BigDecimal ID_UNICO_ENTIDAD;

				public BigDecimal getID_UNICO_ENTIDAD () {
					return this.ID_UNICO_ENTIDAD;
				}

				public Boolean ID_UNICO_ENTIDADIsNullable(){
				    return true;
				}
				public Boolean ID_UNICO_ENTIDADIsKey(){
				    return false;
				}
				public Integer ID_UNICO_ENTIDADLength(){
				    return null;
				}
				public Integer ID_UNICO_ENTIDADPrecision(){
				    return null;
				}
				public String ID_UNICO_ENTIDADDefault(){
				
					return null;
				
				}
				public String ID_UNICO_ENTIDADComment(){
				
				    return "";
				
				}
				public String ID_UNICO_ENTIDADPattern(){
				
					return "";
				
				}
				public String ID_UNICO_ENTIDADOriginalDbColumnName(){
				
					return "ID_UNICO_ENTIDAD";
				
				}

				
			    public String CORREO_ELECTRONICO;

				public String getCORREO_ELECTRONICO () {
					return this.CORREO_ELECTRONICO;
				}

				public Boolean CORREO_ELECTRONICOIsNullable(){
				    return true;
				}
				public Boolean CORREO_ELECTRONICOIsKey(){
				    return false;
				}
				public Integer CORREO_ELECTRONICOLength(){
				    return null;
				}
				public Integer CORREO_ELECTRONICOPrecision(){
				    return null;
				}
				public String CORREO_ELECTRONICODefault(){
				
					return null;
				
				}
				public String CORREO_ELECTRONICOComment(){
				
				    return "";
				
				}
				public String CORREO_ELECTRONICOPattern(){
				
					return "";
				
				}
				public String CORREO_ELECTRONICOOriginalDbColumnName(){
				
					return "CORREO_ELECTRONICO";
				
				}

				
			    public String CELULAR;

				public String getCELULAR () {
					return this.CELULAR;
				}

				public Boolean CELULARIsNullable(){
				    return true;
				}
				public Boolean CELULARIsKey(){
				    return false;
				}
				public Integer CELULARLength(){
				    return null;
				}
				public Integer CELULARPrecision(){
				    return null;
				}
				public String CELULARDefault(){
				
					return null;
				
				}
				public String CELULARComment(){
				
				    return "";
				
				}
				public String CELULARPattern(){
				
					return "";
				
				}
				public String CELULAROriginalDbColumnName(){
				
					return "CELULAR";
				
				}

				
			    public String FECHA_DEFUNCION;

				public String getFECHA_DEFUNCION () {
					return this.FECHA_DEFUNCION;
				}

				public Boolean FECHA_DEFUNCIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_DEFUNCIONIsKey(){
				    return false;
				}
				public Integer FECHA_DEFUNCIONLength(){
				    return null;
				}
				public Integer FECHA_DEFUNCIONPrecision(){
				    return null;
				}
				public String FECHA_DEFUNCIONDefault(){
				
					return null;
				
				}
				public String FECHA_DEFUNCIONComment(){
				
				    return "";
				
				}
				public String FECHA_DEFUNCIONPattern(){
				
					return "";
				
				}
				public String FECHA_DEFUNCIONOriginalDbColumnName(){
				
					return "FECHA_DEFUNCION";
				
				}

				
			    public String PLANAFILIACION;

				public String getPLANAFILIACION () {
					return this.PLANAFILIACION;
				}

				public Boolean PLANAFILIACIONIsNullable(){
				    return true;
				}
				public Boolean PLANAFILIACIONIsKey(){
				    return false;
				}
				public Integer PLANAFILIACIONLength(){
				    return null;
				}
				public Integer PLANAFILIACIONPrecision(){
				    return null;
				}
				public String PLANAFILIACIONDefault(){
				
					return null;
				
				}
				public String PLANAFILIACIONComment(){
				
				    return "";
				
				}
				public String PLANAFILIACIONPattern(){
				
					return "";
				
				}
				public String PLANAFILIACIONOriginalDbColumnName(){
				
					return "PLANAFILIACION";
				
				}

				
			    public BigDecimal ID_BDUA;

				public BigDecimal getID_BDUA () {
					return this.ID_BDUA;
				}

				public Boolean ID_BDUAIsNullable(){
				    return true;
				}
				public Boolean ID_BDUAIsKey(){
				    return false;
				}
				public Integer ID_BDUALength(){
				    return null;
				}
				public Integer ID_BDUAPrecision(){
				    return null;
				}
				public String ID_BDUADefault(){
				
					return null;
				
				}
				public String ID_BDUAComment(){
				
				    return "";
				
				}
				public String ID_BDUAPattern(){
				
					return "";
				
				}
				public String ID_BDUAOriginalDbColumnName(){
				
					return "ID_BDUA";
				
				}

				
			    public String MOTIVO_CAMBIO_ESTADO;

				public String getMOTIVO_CAMBIO_ESTADO () {
					return this.MOTIVO_CAMBIO_ESTADO;
				}

				public Boolean MOTIVO_CAMBIO_ESTADOIsNullable(){
				    return true;
				}
				public Boolean MOTIVO_CAMBIO_ESTADOIsKey(){
				    return false;
				}
				public Integer MOTIVO_CAMBIO_ESTADOLength(){
				    return null;
				}
				public Integer MOTIVO_CAMBIO_ESTADOPrecision(){
				    return null;
				}
				public String MOTIVO_CAMBIO_ESTADODefault(){
				
					return null;
				
				}
				public String MOTIVO_CAMBIO_ESTADOComment(){
				
				    return "";
				
				}
				public String MOTIVO_CAMBIO_ESTADOPattern(){
				
					return "";
				
				}
				public String MOTIVO_CAMBIO_ESTADOOriginalDbColumnName(){
				
					return "MOTIVO_CAMBIO_ESTADO";
				
				}

				
			    public String MOTIVO_CAMBIO_ESM;

				public String getMOTIVO_CAMBIO_ESM () {
					return this.MOTIVO_CAMBIO_ESM;
				}

				public Boolean MOTIVO_CAMBIO_ESMIsNullable(){
				    return true;
				}
				public Boolean MOTIVO_CAMBIO_ESMIsKey(){
				    return false;
				}
				public Integer MOTIVO_CAMBIO_ESMLength(){
				    return null;
				}
				public Integer MOTIVO_CAMBIO_ESMPrecision(){
				    return null;
				}
				public String MOTIVO_CAMBIO_ESMDefault(){
				
					return null;
				
				}
				public String MOTIVO_CAMBIO_ESMComment(){
				
				    return "";
				
				}
				public String MOTIVO_CAMBIO_ESMPattern(){
				
					return "";
				
				}
				public String MOTIVO_CAMBIO_ESMOriginalDbColumnName(){
				
					return "MOTIVO_CAMBIO_ESM";
				
				}

				
			    public String DISCAPACIDAD;

				public String getDISCAPACIDAD () {
					return this.DISCAPACIDAD;
				}

				public Boolean DISCAPACIDADIsNullable(){
				    return true;
				}
				public Boolean DISCAPACIDADIsKey(){
				    return false;
				}
				public Integer DISCAPACIDADLength(){
				    return null;
				}
				public Integer DISCAPACIDADPrecision(){
				    return null;
				}
				public String DISCAPACIDADDefault(){
				
					return null;
				
				}
				public String DISCAPACIDADComment(){
				
				    return "";
				
				}
				public String DISCAPACIDADPattern(){
				
					return "";
				
				}
				public String DISCAPACIDADOriginalDbColumnName(){
				
					return "DISCAPACIDAD";
				
				}

				
			    public String POBLACION_ESPECIAL;

				public String getPOBLACION_ESPECIAL () {
					return this.POBLACION_ESPECIAL;
				}

				public Boolean POBLACION_ESPECIALIsNullable(){
				    return true;
				}
				public Boolean POBLACION_ESPECIALIsKey(){
				    return false;
				}
				public Integer POBLACION_ESPECIALLength(){
				    return null;
				}
				public Integer POBLACION_ESPECIALPrecision(){
				    return null;
				}
				public String POBLACION_ESPECIALDefault(){
				
					return null;
				
				}
				public String POBLACION_ESPECIALComment(){
				
				    return "";
				
				}
				public String POBLACION_ESPECIALPattern(){
				
					return "";
				
				}
				public String POBLACION_ESPECIALOriginalDbColumnName(){
				
					return "POBLACION_ESPECIAL";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.SIGLA_DOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PAIS_EXP_DOCUMENTO = readString(dis);
					
					this.DEPTO_EXP_DOCUMENTO = readString(dis);
					
					this.MUNICIPIO_EXP_DOCUMENTO = readString(dis);
					
					this.FECHA_EXPEDICION_DOCUMENTO = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.PAIS_NACIMIENTO = readString(dis);
					
					this.DEPARTAMENTO_NACIMIENTO = readString(dis);
					
					this.MUNICIPIO_NACIMIENTO = readString(dis);
					
					this.SEXO = readString(dis);
					
					this.DIRECCION = readString(dis);
					
					this.TELEFONO = readString(dis);
					
					this.PAIS_RESIDENCIA = readString(dis);
					
					this.DEPARTAMENTO_RESIDENCIA = readString(dis);
					
					this.MUNICIPIO_RESIDENCIA = readString(dis);
					
					this.LOCALIDAD_RESIDENCIA = readString(dis);
					
					this.GRUPO_SANGUINEO = readString(dis);
					
					this.FACTOR_RH = readString(dis);
					
					this.OCUPACION = readString(dis);
					
					this.ESTATURA = readString(dis);
					
					this.GRUPO_ETNICO = readString(dis);
					
					this.NSOCIOECONOMICO = readString(dis);
					
					this.TVIVIENDA = readString(dis);
					
					this.NEDUCATIVOS = readString(dis);
					
					this.CODIGO_ESTABLECIMIENTO = readString(dis);
					
					this.ESTABLECIMIENTO_ADSCRITO = readString(dis);
					
					this.ENTIDAD_APORTANTE = readString(dis);
					
					this.CODIGO_GRDMILITAR = readString(dis);
					
					this.SIGLA_GRDMILITAR = readString(dis);
					
					this.FUERZA_MILITAR = readString(dis);
					
					this.CODIGO_UMILITAR = readString(dis);
					
					this.UNIDAD_MILITAR = readString(dis);
					
					this.TIPO_DE_VINCULACION = readString(dis);
					
					this.SIGLA_ESTADO = readString(dis);
					
						this.MOTIVOSESTADO_ID = (BigDecimal) dis.readObject();
					
					this.MOTIVO = readString(dis);
					
					this.FECHA_CADUCIDAD = readString(dis);
					
					this.FECHA_VINCULACION = readString(dis);
					
						this.ID_UNICO_PERSONA = (BigDecimal) dis.readObject();
					
						this.ID_UNICO_AFILIADO = (BigDecimal) dis.readObject();
					
					this.OBSERVACIONES = readString(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.RNOVEDADES_ID = (BigDecimal) dis.readObject();
					
					this.TIPO_AFILIADO = readString(dis);
					
					this.ESTADO_ENTIDAD = readString(dis);
					
						this.ENTIDAD_PRINCIPAL = readInteger(dis);
					
					this.SIGLA_REGIMEN = readString(dis);
					
						this.ID_UNICO_ENTIDAD = (BigDecimal) dis.readObject();
					
					this.CORREO_ELECTRONICO = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.FECHA_DEFUNCION = readString(dis);
					
					this.PLANAFILIACION = readString(dis);
					
						this.ID_BDUA = (BigDecimal) dis.readObject();
					
					this.MOTIVO_CAMBIO_ESTADO = readString(dis);
					
					this.MOTIVO_CAMBIO_ESM = readString(dis);
					
					this.DISCAPACIDAD = readString(dis);
					
					this.POBLACION_ESPECIAL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.SIGLA_DOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PAIS_EXP_DOCUMENTO = readString(dis);
					
					this.DEPTO_EXP_DOCUMENTO = readString(dis);
					
					this.MUNICIPIO_EXP_DOCUMENTO = readString(dis);
					
					this.FECHA_EXPEDICION_DOCUMENTO = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.PAIS_NACIMIENTO = readString(dis);
					
					this.DEPARTAMENTO_NACIMIENTO = readString(dis);
					
					this.MUNICIPIO_NACIMIENTO = readString(dis);
					
					this.SEXO = readString(dis);
					
					this.DIRECCION = readString(dis);
					
					this.TELEFONO = readString(dis);
					
					this.PAIS_RESIDENCIA = readString(dis);
					
					this.DEPARTAMENTO_RESIDENCIA = readString(dis);
					
					this.MUNICIPIO_RESIDENCIA = readString(dis);
					
					this.LOCALIDAD_RESIDENCIA = readString(dis);
					
					this.GRUPO_SANGUINEO = readString(dis);
					
					this.FACTOR_RH = readString(dis);
					
					this.OCUPACION = readString(dis);
					
					this.ESTATURA = readString(dis);
					
					this.GRUPO_ETNICO = readString(dis);
					
					this.NSOCIOECONOMICO = readString(dis);
					
					this.TVIVIENDA = readString(dis);
					
					this.NEDUCATIVOS = readString(dis);
					
					this.CODIGO_ESTABLECIMIENTO = readString(dis);
					
					this.ESTABLECIMIENTO_ADSCRITO = readString(dis);
					
					this.ENTIDAD_APORTANTE = readString(dis);
					
					this.CODIGO_GRDMILITAR = readString(dis);
					
					this.SIGLA_GRDMILITAR = readString(dis);
					
					this.FUERZA_MILITAR = readString(dis);
					
					this.CODIGO_UMILITAR = readString(dis);
					
					this.UNIDAD_MILITAR = readString(dis);
					
					this.TIPO_DE_VINCULACION = readString(dis);
					
					this.SIGLA_ESTADO = readString(dis);
					
						this.MOTIVOSESTADO_ID = (BigDecimal) dis.readObject();
					
					this.MOTIVO = readString(dis);
					
					this.FECHA_CADUCIDAD = readString(dis);
					
					this.FECHA_VINCULACION = readString(dis);
					
						this.ID_UNICO_PERSONA = (BigDecimal) dis.readObject();
					
						this.ID_UNICO_AFILIADO = (BigDecimal) dis.readObject();
					
					this.OBSERVACIONES = readString(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.RNOVEDADES_ID = (BigDecimal) dis.readObject();
					
					this.TIPO_AFILIADO = readString(dis);
					
					this.ESTADO_ENTIDAD = readString(dis);
					
						this.ENTIDAD_PRINCIPAL = readInteger(dis);
					
					this.SIGLA_REGIMEN = readString(dis);
					
						this.ID_UNICO_ENTIDAD = (BigDecimal) dis.readObject();
					
					this.CORREO_ELECTRONICO = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.FECHA_DEFUNCION = readString(dis);
					
					this.PLANAFILIACION = readString(dis);
					
						this.ID_BDUA = (BigDecimal) dis.readObject();
					
					this.MOTIVO_CAMBIO_ESTADO = readString(dis);
					
					this.MOTIVO_CAMBIO_ESM = readString(dis);
					
					this.DISCAPACIDAD = readString(dis);
					
					this.POBLACION_ESPECIAL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.SIGLA_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PAIS_EXP_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DEPTO_EXP_DOCUMENTO,dos);
					
					// String
				
						writeString(this.MUNICIPIO_EXP_DOCUMENTO,dos);
					
					// String
				
						writeString(this.FECHA_EXPEDICION_DOCUMENTO,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.PAIS_NACIMIENTO,dos);
					
					// String
				
						writeString(this.DEPARTAMENTO_NACIMIENTO,dos);
					
					// String
				
						writeString(this.MUNICIPIO_NACIMIENTO,dos);
					
					// String
				
						writeString(this.SEXO,dos);
					
					// String
				
						writeString(this.DIRECCION,dos);
					
					// String
				
						writeString(this.TELEFONO,dos);
					
					// String
				
						writeString(this.PAIS_RESIDENCIA,dos);
					
					// String
				
						writeString(this.DEPARTAMENTO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.MUNICIPIO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.LOCALIDAD_RESIDENCIA,dos);
					
					// String
				
						writeString(this.GRUPO_SANGUINEO,dos);
					
					// String
				
						writeString(this.FACTOR_RH,dos);
					
					// String
				
						writeString(this.OCUPACION,dos);
					
					// String
				
						writeString(this.ESTATURA,dos);
					
					// String
				
						writeString(this.GRUPO_ETNICO,dos);
					
					// String
				
						writeString(this.NSOCIOECONOMICO,dos);
					
					// String
				
						writeString(this.TVIVIENDA,dos);
					
					// String
				
						writeString(this.NEDUCATIVOS,dos);
					
					// String
				
						writeString(this.CODIGO_ESTABLECIMIENTO,dos);
					
					// String
				
						writeString(this.ESTABLECIMIENTO_ADSCRITO,dos);
					
					// String
				
						writeString(this.ENTIDAD_APORTANTE,dos);
					
					// String
				
						writeString(this.CODIGO_GRDMILITAR,dos);
					
					// String
				
						writeString(this.SIGLA_GRDMILITAR,dos);
					
					// String
				
						writeString(this.FUERZA_MILITAR,dos);
					
					// String
				
						writeString(this.CODIGO_UMILITAR,dos);
					
					// String
				
						writeString(this.UNIDAD_MILITAR,dos);
					
					// String
				
						writeString(this.TIPO_DE_VINCULACION,dos);
					
					// String
				
						writeString(this.SIGLA_ESTADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MOTIVOSESTADO_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// String
				
						writeString(this.FECHA_CADUCIDAD,dos);
					
					// String
				
						writeString(this.FECHA_VINCULACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ID_UNICO_PERSONA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ID_UNICO_AFILIADO);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RNOVEDADES_ID);
					
					// String
				
						writeString(this.TIPO_AFILIADO,dos);
					
					// String
				
						writeString(this.ESTADO_ENTIDAD,dos);
					
					// Integer
				
						writeInteger(this.ENTIDAD_PRINCIPAL,dos);
					
					// String
				
						writeString(this.SIGLA_REGIMEN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ID_UNICO_ENTIDAD);
					
					// String
				
						writeString(this.CORREO_ELECTRONICO,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// String
				
						writeString(this.FECHA_DEFUNCION,dos);
					
					// String
				
						writeString(this.PLANAFILIACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ID_BDUA);
					
					// String
				
						writeString(this.MOTIVO_CAMBIO_ESTADO,dos);
					
					// String
				
						writeString(this.MOTIVO_CAMBIO_ESM,dos);
					
					// String
				
						writeString(this.DISCAPACIDAD,dos);
					
					// String
				
						writeString(this.POBLACION_ESPECIAL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.SIGLA_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PAIS_EXP_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DEPTO_EXP_DOCUMENTO,dos);
					
					// String
				
						writeString(this.MUNICIPIO_EXP_DOCUMENTO,dos);
					
					// String
				
						writeString(this.FECHA_EXPEDICION_DOCUMENTO,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.PAIS_NACIMIENTO,dos);
					
					// String
				
						writeString(this.DEPARTAMENTO_NACIMIENTO,dos);
					
					// String
				
						writeString(this.MUNICIPIO_NACIMIENTO,dos);
					
					// String
				
						writeString(this.SEXO,dos);
					
					// String
				
						writeString(this.DIRECCION,dos);
					
					// String
				
						writeString(this.TELEFONO,dos);
					
					// String
				
						writeString(this.PAIS_RESIDENCIA,dos);
					
					// String
				
						writeString(this.DEPARTAMENTO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.MUNICIPIO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.LOCALIDAD_RESIDENCIA,dos);
					
					// String
				
						writeString(this.GRUPO_SANGUINEO,dos);
					
					// String
				
						writeString(this.FACTOR_RH,dos);
					
					// String
				
						writeString(this.OCUPACION,dos);
					
					// String
				
						writeString(this.ESTATURA,dos);
					
					// String
				
						writeString(this.GRUPO_ETNICO,dos);
					
					// String
				
						writeString(this.NSOCIOECONOMICO,dos);
					
					// String
				
						writeString(this.TVIVIENDA,dos);
					
					// String
				
						writeString(this.NEDUCATIVOS,dos);
					
					// String
				
						writeString(this.CODIGO_ESTABLECIMIENTO,dos);
					
					// String
				
						writeString(this.ESTABLECIMIENTO_ADSCRITO,dos);
					
					// String
				
						writeString(this.ENTIDAD_APORTANTE,dos);
					
					// String
				
						writeString(this.CODIGO_GRDMILITAR,dos);
					
					// String
				
						writeString(this.SIGLA_GRDMILITAR,dos);
					
					// String
				
						writeString(this.FUERZA_MILITAR,dos);
					
					// String
				
						writeString(this.CODIGO_UMILITAR,dos);
					
					// String
				
						writeString(this.UNIDAD_MILITAR,dos);
					
					// String
				
						writeString(this.TIPO_DE_VINCULACION,dos);
					
					// String
				
						writeString(this.SIGLA_ESTADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.MOTIVOSESTADO_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// String
				
						writeString(this.FECHA_CADUCIDAD,dos);
					
					// String
				
						writeString(this.FECHA_VINCULACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID_UNICO_PERSONA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID_UNICO_AFILIADO);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RNOVEDADES_ID);
					
					// String
				
						writeString(this.TIPO_AFILIADO,dos);
					
					// String
				
						writeString(this.ESTADO_ENTIDAD,dos);
					
					// Integer
				
						writeInteger(this.ENTIDAD_PRINCIPAL,dos);
					
					// String
				
						writeString(this.SIGLA_REGIMEN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID_UNICO_ENTIDAD);
					
					// String
				
						writeString(this.CORREO_ELECTRONICO,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// String
				
						writeString(this.FECHA_DEFUNCION,dos);
					
					// String
				
						writeString(this.PLANAFILIACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID_BDUA);
					
					// String
				
						writeString(this.MOTIVO_CAMBIO_ESTADO,dos);
					
					// String
				
						writeString(this.MOTIVO_CAMBIO_ESM,dos);
					
					// String
				
						writeString(this.DISCAPACIDAD,dos);
					
					// String
				
						writeString(this.POBLACION_ESPECIAL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",SIGLA_DOCUMENTO="+SIGLA_DOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PAIS_EXP_DOCUMENTO="+PAIS_EXP_DOCUMENTO);
		sb.append(",DEPTO_EXP_DOCUMENTO="+DEPTO_EXP_DOCUMENTO);
		sb.append(",MUNICIPIO_EXP_DOCUMENTO="+MUNICIPIO_EXP_DOCUMENTO);
		sb.append(",FECHA_EXPEDICION_DOCUMENTO="+FECHA_EXPEDICION_DOCUMENTO);
		sb.append(",FECHA_NACIMIENTO="+FECHA_NACIMIENTO);
		sb.append(",PAIS_NACIMIENTO="+PAIS_NACIMIENTO);
		sb.append(",DEPARTAMENTO_NACIMIENTO="+DEPARTAMENTO_NACIMIENTO);
		sb.append(",MUNICIPIO_NACIMIENTO="+MUNICIPIO_NACIMIENTO);
		sb.append(",SEXO="+SEXO);
		sb.append(",DIRECCION="+DIRECCION);
		sb.append(",TELEFONO="+TELEFONO);
		sb.append(",PAIS_RESIDENCIA="+PAIS_RESIDENCIA);
		sb.append(",DEPARTAMENTO_RESIDENCIA="+DEPARTAMENTO_RESIDENCIA);
		sb.append(",MUNICIPIO_RESIDENCIA="+MUNICIPIO_RESIDENCIA);
		sb.append(",LOCALIDAD_RESIDENCIA="+LOCALIDAD_RESIDENCIA);
		sb.append(",GRUPO_SANGUINEO="+GRUPO_SANGUINEO);
		sb.append(",FACTOR_RH="+FACTOR_RH);
		sb.append(",OCUPACION="+OCUPACION);
		sb.append(",ESTATURA="+ESTATURA);
		sb.append(",GRUPO_ETNICO="+GRUPO_ETNICO);
		sb.append(",NSOCIOECONOMICO="+NSOCIOECONOMICO);
		sb.append(",TVIVIENDA="+TVIVIENDA);
		sb.append(",NEDUCATIVOS="+NEDUCATIVOS);
		sb.append(",CODIGO_ESTABLECIMIENTO="+CODIGO_ESTABLECIMIENTO);
		sb.append(",ESTABLECIMIENTO_ADSCRITO="+ESTABLECIMIENTO_ADSCRITO);
		sb.append(",ENTIDAD_APORTANTE="+ENTIDAD_APORTANTE);
		sb.append(",CODIGO_GRDMILITAR="+CODIGO_GRDMILITAR);
		sb.append(",SIGLA_GRDMILITAR="+SIGLA_GRDMILITAR);
		sb.append(",FUERZA_MILITAR="+FUERZA_MILITAR);
		sb.append(",CODIGO_UMILITAR="+CODIGO_UMILITAR);
		sb.append(",UNIDAD_MILITAR="+UNIDAD_MILITAR);
		sb.append(",TIPO_DE_VINCULACION="+TIPO_DE_VINCULACION);
		sb.append(",SIGLA_ESTADO="+SIGLA_ESTADO);
		sb.append(",MOTIVOSESTADO_ID="+String.valueOf(MOTIVOSESTADO_ID));
		sb.append(",MOTIVO="+MOTIVO);
		sb.append(",FECHA_CADUCIDAD="+FECHA_CADUCIDAD);
		sb.append(",FECHA_VINCULACION="+FECHA_VINCULACION);
		sb.append(",ID_UNICO_PERSONA="+String.valueOf(ID_UNICO_PERSONA));
		sb.append(",ID_UNICO_AFILIADO="+String.valueOf(ID_UNICO_AFILIADO));
		sb.append(",OBSERVACIONES="+OBSERVACIONES);
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",RNOVEDADES_ID="+String.valueOf(RNOVEDADES_ID));
		sb.append(",TIPO_AFILIADO="+TIPO_AFILIADO);
		sb.append(",ESTADO_ENTIDAD="+ESTADO_ENTIDAD);
		sb.append(",ENTIDAD_PRINCIPAL="+String.valueOf(ENTIDAD_PRINCIPAL));
		sb.append(",SIGLA_REGIMEN="+SIGLA_REGIMEN);
		sb.append(",ID_UNICO_ENTIDAD="+String.valueOf(ID_UNICO_ENTIDAD));
		sb.append(",CORREO_ELECTRONICO="+CORREO_ELECTRONICO);
		sb.append(",CELULAR="+CELULAR);
		sb.append(",FECHA_DEFUNCION="+FECHA_DEFUNCION);
		sb.append(",PLANAFILIACION="+PLANAFILIACION);
		sb.append(",ID_BDUA="+String.valueOf(ID_BDUA));
		sb.append(",MOTIVO_CAMBIO_ESTADO="+MOTIVO_CAMBIO_ESTADO);
		sb.append(",MOTIVO_CAMBIO_ESM="+MOTIVO_CAMBIO_ESM);
		sb.append(",DISCAPACIDAD="+DISCAPACIDAD);
		sb.append(",POBLACION_ESPECIAL="+POBLACION_ESPECIAL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row24Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_4Struct implements routines.system.IPersistableRow<after_tOracleInput_4Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 400;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 400;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 400;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 400;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String SIGLA_DOCUMENTO;

				public String getSIGLA_DOCUMENTO () {
					return this.SIGLA_DOCUMENTO;
				}

				public Boolean SIGLA_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean SIGLA_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer SIGLA_DOCUMENTOLength(){
				    return 400;
				}
				public Integer SIGLA_DOCUMENTOPrecision(){
				    return 0;
				}
				public String SIGLA_DOCUMENTODefault(){
				
					return null;
				
				}
				public String SIGLA_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String SIGLA_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String SIGLA_DOCUMENTOOriginalDbColumnName(){
				
					return "SIGLA_DOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PAIS_EXP_DOCUMENTO;

				public String getPAIS_EXP_DOCUMENTO () {
					return this.PAIS_EXP_DOCUMENTO;
				}

				public Boolean PAIS_EXP_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean PAIS_EXP_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer PAIS_EXP_DOCUMENTOLength(){
				    return 400;
				}
				public Integer PAIS_EXP_DOCUMENTOPrecision(){
				    return 0;
				}
				public String PAIS_EXP_DOCUMENTODefault(){
				
					return null;
				
				}
				public String PAIS_EXP_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String PAIS_EXP_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String PAIS_EXP_DOCUMENTOOriginalDbColumnName(){
				
					return "PAIS_EXP_DOCUMENTO";
				
				}

				
			    public String DEPTO_EXP_DOCUMENTO;

				public String getDEPTO_EXP_DOCUMENTO () {
					return this.DEPTO_EXP_DOCUMENTO;
				}

				public Boolean DEPTO_EXP_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DEPTO_EXP_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DEPTO_EXP_DOCUMENTOLength(){
				    return 400;
				}
				public Integer DEPTO_EXP_DOCUMENTOPrecision(){
				    return 0;
				}
				public String DEPTO_EXP_DOCUMENTODefault(){
				
					return null;
				
				}
				public String DEPTO_EXP_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DEPTO_EXP_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DEPTO_EXP_DOCUMENTOOriginalDbColumnName(){
				
					return "DEPTO_EXP_DOCUMENTO";
				
				}

				
			    public String MUNICIPIO_EXP_DOCUMENTO;

				public String getMUNICIPIO_EXP_DOCUMENTO () {
					return this.MUNICIPIO_EXP_DOCUMENTO;
				}

				public Boolean MUNICIPIO_EXP_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean MUNICIPIO_EXP_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer MUNICIPIO_EXP_DOCUMENTOLength(){
				    return 400;
				}
				public Integer MUNICIPIO_EXP_DOCUMENTOPrecision(){
				    return 0;
				}
				public String MUNICIPIO_EXP_DOCUMENTODefault(){
				
					return null;
				
				}
				public String MUNICIPIO_EXP_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String MUNICIPIO_EXP_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String MUNICIPIO_EXP_DOCUMENTOOriginalDbColumnName(){
				
					return "MUNICIPIO_EXP_DOCUMENTO";
				
				}

				
			    public String FECHA_EXPEDICION_DOCUMENTO;

				public String getFECHA_EXPEDICION_DOCUMENTO () {
					return this.FECHA_EXPEDICION_DOCUMENTO;
				}

				public Boolean FECHA_EXPEDICION_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_EXPEDICION_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer FECHA_EXPEDICION_DOCUMENTOLength(){
				    return null;
				}
				public Integer FECHA_EXPEDICION_DOCUMENTOPrecision(){
				    return null;
				}
				public String FECHA_EXPEDICION_DOCUMENTODefault(){
				
					return null;
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOOriginalDbColumnName(){
				
					return "FECHA_EXPEDICION_DOCUMENTO";
				
				}

				
			    public String FECHA_NACIMIENTO;

				public String getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return 400;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return 0;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public String PAIS_NACIMIENTO;

				public String getPAIS_NACIMIENTO () {
					return this.PAIS_NACIMIENTO;
				}

				public Boolean PAIS_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean PAIS_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer PAIS_NACIMIENTOLength(){
				    return 400;
				}
				public Integer PAIS_NACIMIENTOPrecision(){
				    return 0;
				}
				public String PAIS_NACIMIENTODefault(){
				
					return null;
				
				}
				public String PAIS_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String PAIS_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String PAIS_NACIMIENTOOriginalDbColumnName(){
				
					return "PAIS_NACIMIENTO";
				
				}

				
			    public String DEPARTAMENTO_NACIMIENTO;

				public String getDEPARTAMENTO_NACIMIENTO () {
					return this.DEPARTAMENTO_NACIMIENTO;
				}

				public Boolean DEPARTAMENTO_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean DEPARTAMENTO_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer DEPARTAMENTO_NACIMIENTOLength(){
				    return 400;
				}
				public Integer DEPARTAMENTO_NACIMIENTOPrecision(){
				    return 0;
				}
				public String DEPARTAMENTO_NACIMIENTODefault(){
				
					return null;
				
				}
				public String DEPARTAMENTO_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String DEPARTAMENTO_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String DEPARTAMENTO_NACIMIENTOOriginalDbColumnName(){
				
					return "DEPARTAMENTO_NACIMIENTO";
				
				}

				
			    public String MUNICIPIO_NACIMIENTO;

				public String getMUNICIPIO_NACIMIENTO () {
					return this.MUNICIPIO_NACIMIENTO;
				}

				public Boolean MUNICIPIO_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean MUNICIPIO_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer MUNICIPIO_NACIMIENTOLength(){
				    return 400;
				}
				public Integer MUNICIPIO_NACIMIENTOPrecision(){
				    return 0;
				}
				public String MUNICIPIO_NACIMIENTODefault(){
				
					return null;
				
				}
				public String MUNICIPIO_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String MUNICIPIO_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String MUNICIPIO_NACIMIENTOOriginalDbColumnName(){
				
					return "MUNICIPIO_NACIMIENTO";
				
				}

				
			    public String SEXO;

				public String getSEXO () {
					return this.SEXO;
				}

				public Boolean SEXOIsNullable(){
				    return true;
				}
				public Boolean SEXOIsKey(){
				    return false;
				}
				public Integer SEXOLength(){
				    return 400;
				}
				public Integer SEXOPrecision(){
				    return 0;
				}
				public String SEXODefault(){
				
					return null;
				
				}
				public String SEXOComment(){
				
				    return "";
				
				}
				public String SEXOPattern(){
				
					return "";
				
				}
				public String SEXOOriginalDbColumnName(){
				
					return "SEXO";
				
				}

				
			    public String DIRECCION;

				public String getDIRECCION () {
					return this.DIRECCION;
				}

				public Boolean DIRECCIONIsNullable(){
				    return true;
				}
				public Boolean DIRECCIONIsKey(){
				    return false;
				}
				public Integer DIRECCIONLength(){
				    return 400;
				}
				public Integer DIRECCIONPrecision(){
				    return 0;
				}
				public String DIRECCIONDefault(){
				
					return null;
				
				}
				public String DIRECCIONComment(){
				
				    return "";
				
				}
				public String DIRECCIONPattern(){
				
					return "";
				
				}
				public String DIRECCIONOriginalDbColumnName(){
				
					return "DIRECCION";
				
				}

				
			    public String TELEFONO;

				public String getTELEFONO () {
					return this.TELEFONO;
				}

				public Boolean TELEFONOIsNullable(){
				    return true;
				}
				public Boolean TELEFONOIsKey(){
				    return false;
				}
				public Integer TELEFONOLength(){
				    return 400;
				}
				public Integer TELEFONOPrecision(){
				    return 0;
				}
				public String TELEFONODefault(){
				
					return null;
				
				}
				public String TELEFONOComment(){
				
				    return "";
				
				}
				public String TELEFONOPattern(){
				
					return "";
				
				}
				public String TELEFONOOriginalDbColumnName(){
				
					return "TELEFONO";
				
				}

				
			    public String PAIS_RESIDENCIA;

				public String getPAIS_RESIDENCIA () {
					return this.PAIS_RESIDENCIA;
				}

				public Boolean PAIS_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean PAIS_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer PAIS_RESIDENCIALength(){
				    return 400;
				}
				public Integer PAIS_RESIDENCIAPrecision(){
				    return 0;
				}
				public String PAIS_RESIDENCIADefault(){
				
					return null;
				
				}
				public String PAIS_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String PAIS_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String PAIS_RESIDENCIAOriginalDbColumnName(){
				
					return "PAIS_RESIDENCIA";
				
				}

				
			    public String DEPARTAMENTO_RESIDENCIA;

				public String getDEPARTAMENTO_RESIDENCIA () {
					return this.DEPARTAMENTO_RESIDENCIA;
				}

				public Boolean DEPARTAMENTO_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean DEPARTAMENTO_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer DEPARTAMENTO_RESIDENCIALength(){
				    return 400;
				}
				public Integer DEPARTAMENTO_RESIDENCIAPrecision(){
				    return 0;
				}
				public String DEPARTAMENTO_RESIDENCIADefault(){
				
					return null;
				
				}
				public String DEPARTAMENTO_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String DEPARTAMENTO_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String DEPARTAMENTO_RESIDENCIAOriginalDbColumnName(){
				
					return "DEPARTAMENTO_RESIDENCIA";
				
				}

				
			    public String MUNICIPIO_RESIDENCIA;

				public String getMUNICIPIO_RESIDENCIA () {
					return this.MUNICIPIO_RESIDENCIA;
				}

				public Boolean MUNICIPIO_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean MUNICIPIO_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer MUNICIPIO_RESIDENCIALength(){
				    return 400;
				}
				public Integer MUNICIPIO_RESIDENCIAPrecision(){
				    return 0;
				}
				public String MUNICIPIO_RESIDENCIADefault(){
				
					return null;
				
				}
				public String MUNICIPIO_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String MUNICIPIO_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String MUNICIPIO_RESIDENCIAOriginalDbColumnName(){
				
					return "MUNICIPIO_RESIDENCIA";
				
				}

				
			    public String LOCALIDAD_RESIDENCIA;

				public String getLOCALIDAD_RESIDENCIA () {
					return this.LOCALIDAD_RESIDENCIA;
				}

				public Boolean LOCALIDAD_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean LOCALIDAD_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer LOCALIDAD_RESIDENCIALength(){
				    return 400;
				}
				public Integer LOCALIDAD_RESIDENCIAPrecision(){
				    return 0;
				}
				public String LOCALIDAD_RESIDENCIADefault(){
				
					return null;
				
				}
				public String LOCALIDAD_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String LOCALIDAD_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String LOCALIDAD_RESIDENCIAOriginalDbColumnName(){
				
					return "LOCALIDAD_RESIDENCIA";
				
				}

				
			    public String GRUPO_SANGUINEO;

				public String getGRUPO_SANGUINEO () {
					return this.GRUPO_SANGUINEO;
				}

				public Boolean GRUPO_SANGUINEOIsNullable(){
				    return true;
				}
				public Boolean GRUPO_SANGUINEOIsKey(){
				    return false;
				}
				public Integer GRUPO_SANGUINEOLength(){
				    return 400;
				}
				public Integer GRUPO_SANGUINEOPrecision(){
				    return 0;
				}
				public String GRUPO_SANGUINEODefault(){
				
					return null;
				
				}
				public String GRUPO_SANGUINEOComment(){
				
				    return "";
				
				}
				public String GRUPO_SANGUINEOPattern(){
				
					return "";
				
				}
				public String GRUPO_SANGUINEOOriginalDbColumnName(){
				
					return "GRUPO_SANGUINEO";
				
				}

				
			    public String FACTOR_RH;

				public String getFACTOR_RH () {
					return this.FACTOR_RH;
				}

				public Boolean FACTOR_RHIsNullable(){
				    return true;
				}
				public Boolean FACTOR_RHIsKey(){
				    return false;
				}
				public Integer FACTOR_RHLength(){
				    return 400;
				}
				public Integer FACTOR_RHPrecision(){
				    return 0;
				}
				public String FACTOR_RHDefault(){
				
					return null;
				
				}
				public String FACTOR_RHComment(){
				
				    return "";
				
				}
				public String FACTOR_RHPattern(){
				
					return "";
				
				}
				public String FACTOR_RHOriginalDbColumnName(){
				
					return "FACTOR_RH";
				
				}

				
			    public String OCUPACION;

				public String getOCUPACION () {
					return this.OCUPACION;
				}

				public Boolean OCUPACIONIsNullable(){
				    return true;
				}
				public Boolean OCUPACIONIsKey(){
				    return false;
				}
				public Integer OCUPACIONLength(){
				    return 400;
				}
				public Integer OCUPACIONPrecision(){
				    return 0;
				}
				public String OCUPACIONDefault(){
				
					return null;
				
				}
				public String OCUPACIONComment(){
				
				    return "";
				
				}
				public String OCUPACIONPattern(){
				
					return "";
				
				}
				public String OCUPACIONOriginalDbColumnName(){
				
					return "OCUPACION";
				
				}

				
			    public String ESTATURA;

				public String getESTATURA () {
					return this.ESTATURA;
				}

				public Boolean ESTATURAIsNullable(){
				    return true;
				}
				public Boolean ESTATURAIsKey(){
				    return false;
				}
				public Integer ESTATURALength(){
				    return 40;
				}
				public Integer ESTATURAPrecision(){
				    return 0;
				}
				public String ESTATURADefault(){
				
					return null;
				
				}
				public String ESTATURAComment(){
				
				    return "";
				
				}
				public String ESTATURAPattern(){
				
					return "";
				
				}
				public String ESTATURAOriginalDbColumnName(){
				
					return "ESTATURA";
				
				}

				
			    public String GRUPO_ETNICO;

				public String getGRUPO_ETNICO () {
					return this.GRUPO_ETNICO;
				}

				public Boolean GRUPO_ETNICOIsNullable(){
				    return true;
				}
				public Boolean GRUPO_ETNICOIsKey(){
				    return false;
				}
				public Integer GRUPO_ETNICOLength(){
				    return 400;
				}
				public Integer GRUPO_ETNICOPrecision(){
				    return 0;
				}
				public String GRUPO_ETNICODefault(){
				
					return null;
				
				}
				public String GRUPO_ETNICOComment(){
				
				    return "";
				
				}
				public String GRUPO_ETNICOPattern(){
				
					return "";
				
				}
				public String GRUPO_ETNICOOriginalDbColumnName(){
				
					return "GRUPO_ETNICO";
				
				}

				
			    public String NSOCIOECONOMICO;

				public String getNSOCIOECONOMICO () {
					return this.NSOCIOECONOMICO;
				}

				public Boolean NSOCIOECONOMICOIsNullable(){
				    return true;
				}
				public Boolean NSOCIOECONOMICOIsKey(){
				    return false;
				}
				public Integer NSOCIOECONOMICOLength(){
				    return 400;
				}
				public Integer NSOCIOECONOMICOPrecision(){
				    return 0;
				}
				public String NSOCIOECONOMICODefault(){
				
					return null;
				
				}
				public String NSOCIOECONOMICOComment(){
				
				    return "";
				
				}
				public String NSOCIOECONOMICOPattern(){
				
					return "";
				
				}
				public String NSOCIOECONOMICOOriginalDbColumnName(){
				
					return "NSOCIOECONOMICO";
				
				}

				
			    public String TVIVIENDA;

				public String getTVIVIENDA () {
					return this.TVIVIENDA;
				}

				public Boolean TVIVIENDAIsNullable(){
				    return true;
				}
				public Boolean TVIVIENDAIsKey(){
				    return false;
				}
				public Integer TVIVIENDALength(){
				    return 400;
				}
				public Integer TVIVIENDAPrecision(){
				    return 0;
				}
				public String TVIVIENDADefault(){
				
					return null;
				
				}
				public String TVIVIENDAComment(){
				
				    return "";
				
				}
				public String TVIVIENDAPattern(){
				
					return "";
				
				}
				public String TVIVIENDAOriginalDbColumnName(){
				
					return "TVIVIENDA";
				
				}

				
			    public String NEDUCATIVOS;

				public String getNEDUCATIVOS () {
					return this.NEDUCATIVOS;
				}

				public Boolean NEDUCATIVOSIsNullable(){
				    return true;
				}
				public Boolean NEDUCATIVOSIsKey(){
				    return false;
				}
				public Integer NEDUCATIVOSLength(){
				    return 400;
				}
				public Integer NEDUCATIVOSPrecision(){
				    return 0;
				}
				public String NEDUCATIVOSDefault(){
				
					return null;
				
				}
				public String NEDUCATIVOSComment(){
				
				    return "";
				
				}
				public String NEDUCATIVOSPattern(){
				
					return "";
				
				}
				public String NEDUCATIVOSOriginalDbColumnName(){
				
					return "NEDUCATIVOS";
				
				}

				
			    public String CODIGO_ESTABLECIMIENTO;

				public String getCODIGO_ESTABLECIMIENTO () {
					return this.CODIGO_ESTABLECIMIENTO;
				}

				public Boolean CODIGO_ESTABLECIMIENTOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_ESTABLECIMIENTOIsKey(){
				    return false;
				}
				public Integer CODIGO_ESTABLECIMIENTOLength(){
				    return 400;
				}
				public Integer CODIGO_ESTABLECIMIENTOPrecision(){
				    return 0;
				}
				public String CODIGO_ESTABLECIMIENTODefault(){
				
					return null;
				
				}
				public String CODIGO_ESTABLECIMIENTOComment(){
				
				    return "";
				
				}
				public String CODIGO_ESTABLECIMIENTOPattern(){
				
					return "";
				
				}
				public String CODIGO_ESTABLECIMIENTOOriginalDbColumnName(){
				
					return "CODIGO_ESTABLECIMIENTO";
				
				}

				
			    public String ESTABLECIMIENTO_ADSCRITO;

				public String getESTABLECIMIENTO_ADSCRITO () {
					return this.ESTABLECIMIENTO_ADSCRITO;
				}

				public Boolean ESTABLECIMIENTO_ADSCRITOIsNullable(){
				    return true;
				}
				public Boolean ESTABLECIMIENTO_ADSCRITOIsKey(){
				    return false;
				}
				public Integer ESTABLECIMIENTO_ADSCRITOLength(){
				    return 400;
				}
				public Integer ESTABLECIMIENTO_ADSCRITOPrecision(){
				    return 0;
				}
				public String ESTABLECIMIENTO_ADSCRITODefault(){
				
					return null;
				
				}
				public String ESTABLECIMIENTO_ADSCRITOComment(){
				
				    return "";
				
				}
				public String ESTABLECIMIENTO_ADSCRITOPattern(){
				
					return "";
				
				}
				public String ESTABLECIMIENTO_ADSCRITOOriginalDbColumnName(){
				
					return "ESTABLECIMIENTO_ADSCRITO";
				
				}

				
			    public String ENTIDAD_APORTANTE;

				public String getENTIDAD_APORTANTE () {
					return this.ENTIDAD_APORTANTE;
				}

				public Boolean ENTIDAD_APORTANTEIsNullable(){
				    return true;
				}
				public Boolean ENTIDAD_APORTANTEIsKey(){
				    return false;
				}
				public Integer ENTIDAD_APORTANTELength(){
				    return 400;
				}
				public Integer ENTIDAD_APORTANTEPrecision(){
				    return 0;
				}
				public String ENTIDAD_APORTANTEDefault(){
				
					return null;
				
				}
				public String ENTIDAD_APORTANTEComment(){
				
				    return "";
				
				}
				public String ENTIDAD_APORTANTEPattern(){
				
					return "";
				
				}
				public String ENTIDAD_APORTANTEOriginalDbColumnName(){
				
					return "ENTIDAD_APORTANTE";
				
				}

				
			    public String CODIGO_GRDMILITAR;

				public String getCODIGO_GRDMILITAR () {
					return this.CODIGO_GRDMILITAR;
				}

				public Boolean CODIGO_GRDMILITARIsNullable(){
				    return true;
				}
				public Boolean CODIGO_GRDMILITARIsKey(){
				    return false;
				}
				public Integer CODIGO_GRDMILITARLength(){
				    return 400;
				}
				public Integer CODIGO_GRDMILITARPrecision(){
				    return 0;
				}
				public String CODIGO_GRDMILITARDefault(){
				
					return null;
				
				}
				public String CODIGO_GRDMILITARComment(){
				
				    return "";
				
				}
				public String CODIGO_GRDMILITARPattern(){
				
					return "";
				
				}
				public String CODIGO_GRDMILITAROriginalDbColumnName(){
				
					return "CODIGO_GRDMILITAR";
				
				}

				
			    public String SIGLA_GRDMILITAR;

				public String getSIGLA_GRDMILITAR () {
					return this.SIGLA_GRDMILITAR;
				}

				public Boolean SIGLA_GRDMILITARIsNullable(){
				    return true;
				}
				public Boolean SIGLA_GRDMILITARIsKey(){
				    return false;
				}
				public Integer SIGLA_GRDMILITARLength(){
				    return 400;
				}
				public Integer SIGLA_GRDMILITARPrecision(){
				    return 0;
				}
				public String SIGLA_GRDMILITARDefault(){
				
					return null;
				
				}
				public String SIGLA_GRDMILITARComment(){
				
				    return "";
				
				}
				public String SIGLA_GRDMILITARPattern(){
				
					return "";
				
				}
				public String SIGLA_GRDMILITAROriginalDbColumnName(){
				
					return "SIGLA_GRDMILITAR";
				
				}

				
			    public String FUERZA_MILITAR;

				public String getFUERZA_MILITAR () {
					return this.FUERZA_MILITAR;
				}

				public Boolean FUERZA_MILITARIsNullable(){
				    return true;
				}
				public Boolean FUERZA_MILITARIsKey(){
				    return false;
				}
				public Integer FUERZA_MILITARLength(){
				    return 400;
				}
				public Integer FUERZA_MILITARPrecision(){
				    return 0;
				}
				public String FUERZA_MILITARDefault(){
				
					return null;
				
				}
				public String FUERZA_MILITARComment(){
				
				    return "";
				
				}
				public String FUERZA_MILITARPattern(){
				
					return "";
				
				}
				public String FUERZA_MILITAROriginalDbColumnName(){
				
					return "FUERZA_MILITAR";
				
				}

				
			    public String CODIGO_UMILITAR;

				public String getCODIGO_UMILITAR () {
					return this.CODIGO_UMILITAR;
				}

				public Boolean CODIGO_UMILITARIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UMILITARIsKey(){
				    return false;
				}
				public Integer CODIGO_UMILITARLength(){
				    return 400;
				}
				public Integer CODIGO_UMILITARPrecision(){
				    return 0;
				}
				public String CODIGO_UMILITARDefault(){
				
					return null;
				
				}
				public String CODIGO_UMILITARComment(){
				
				    return "";
				
				}
				public String CODIGO_UMILITARPattern(){
				
					return "";
				
				}
				public String CODIGO_UMILITAROriginalDbColumnName(){
				
					return "CODIGO_UMILITAR";
				
				}

				
			    public String UNIDAD_MILITAR;

				public String getUNIDAD_MILITAR () {
					return this.UNIDAD_MILITAR;
				}

				public Boolean UNIDAD_MILITARIsNullable(){
				    return true;
				}
				public Boolean UNIDAD_MILITARIsKey(){
				    return false;
				}
				public Integer UNIDAD_MILITARLength(){
				    return 400;
				}
				public Integer UNIDAD_MILITARPrecision(){
				    return 0;
				}
				public String UNIDAD_MILITARDefault(){
				
					return null;
				
				}
				public String UNIDAD_MILITARComment(){
				
				    return "";
				
				}
				public String UNIDAD_MILITARPattern(){
				
					return "";
				
				}
				public String UNIDAD_MILITAROriginalDbColumnName(){
				
					return "UNIDAD_MILITAR";
				
				}

				
			    public String TIPO_DE_VINCULACION;

				public String getTIPO_DE_VINCULACION () {
					return this.TIPO_DE_VINCULACION;
				}

				public Boolean TIPO_DE_VINCULACIONIsNullable(){
				    return true;
				}
				public Boolean TIPO_DE_VINCULACIONIsKey(){
				    return false;
				}
				public Integer TIPO_DE_VINCULACIONLength(){
				    return 400;
				}
				public Integer TIPO_DE_VINCULACIONPrecision(){
				    return 0;
				}
				public String TIPO_DE_VINCULACIONDefault(){
				
					return null;
				
				}
				public String TIPO_DE_VINCULACIONComment(){
				
				    return "";
				
				}
				public String TIPO_DE_VINCULACIONPattern(){
				
					return "";
				
				}
				public String TIPO_DE_VINCULACIONOriginalDbColumnName(){
				
					return "TIPO_DE_VINCULACION";
				
				}

				
			    public String SIGLA_ESTADO;

				public String getSIGLA_ESTADO () {
					return this.SIGLA_ESTADO;
				}

				public Boolean SIGLA_ESTADOIsNullable(){
				    return true;
				}
				public Boolean SIGLA_ESTADOIsKey(){
				    return false;
				}
				public Integer SIGLA_ESTADOLength(){
				    return 400;
				}
				public Integer SIGLA_ESTADOPrecision(){
				    return 0;
				}
				public String SIGLA_ESTADODefault(){
				
					return null;
				
				}
				public String SIGLA_ESTADOComment(){
				
				    return "";
				
				}
				public String SIGLA_ESTADOPattern(){
				
					return "";
				
				}
				public String SIGLA_ESTADOOriginalDbColumnName(){
				
					return "SIGLA_ESTADO";
				
				}

				
			    public BigDecimal MOTIVOSESTADO_ID;

				public BigDecimal getMOTIVOSESTADO_ID () {
					return this.MOTIVOSESTADO_ID;
				}

				public Boolean MOTIVOSESTADO_IDIsNullable(){
				    return false;
				}
				public Boolean MOTIVOSESTADO_IDIsKey(){
				    return false;
				}
				public Integer MOTIVOSESTADO_IDLength(){
				    return 0;
				}
				public Integer MOTIVOSESTADO_IDPrecision(){
				    return null;
				}
				public String MOTIVOSESTADO_IDDefault(){
				
					return "";
				
				}
				public String MOTIVOSESTADO_IDComment(){
				
				    return "";
				
				}
				public String MOTIVOSESTADO_IDPattern(){
				
					return "";
				
				}
				public String MOTIVOSESTADO_IDOriginalDbColumnName(){
				
					return "MOTIVOSESTADO_ID";
				
				}

				
			    public String MOTIVO;

				public String getMOTIVO () {
					return this.MOTIVO;
				}

				public Boolean MOTIVOIsNullable(){
				    return false;
				}
				public Boolean MOTIVOIsKey(){
				    return false;
				}
				public Integer MOTIVOLength(){
				    return 250;
				}
				public Integer MOTIVOPrecision(){
				    return 0;
				}
				public String MOTIVODefault(){
				
					return null;
				
				}
				public String MOTIVOComment(){
				
				    return "";
				
				}
				public String MOTIVOPattern(){
				
					return "";
				
				}
				public String MOTIVOOriginalDbColumnName(){
				
					return "MOTIVO";
				
				}

				
			    public String FECHA_CADUCIDAD;

				public String getFECHA_CADUCIDAD () {
					return this.FECHA_CADUCIDAD;
				}

				public Boolean FECHA_CADUCIDADIsNullable(){
				    return true;
				}
				public Boolean FECHA_CADUCIDADIsKey(){
				    return false;
				}
				public Integer FECHA_CADUCIDADLength(){
				    return 400;
				}
				public Integer FECHA_CADUCIDADPrecision(){
				    return 0;
				}
				public String FECHA_CADUCIDADDefault(){
				
					return null;
				
				}
				public String FECHA_CADUCIDADComment(){
				
				    return "";
				
				}
				public String FECHA_CADUCIDADPattern(){
				
					return "";
				
				}
				public String FECHA_CADUCIDADOriginalDbColumnName(){
				
					return "FECHA_CADUCIDAD";
				
				}

				
			    public String FECHA_VINCULACION;

				public String getFECHA_VINCULACION () {
					return this.FECHA_VINCULACION;
				}

				public Boolean FECHA_VINCULACIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_VINCULACIONIsKey(){
				    return false;
				}
				public Integer FECHA_VINCULACIONLength(){
				    return 400;
				}
				public Integer FECHA_VINCULACIONPrecision(){
				    return 0;
				}
				public String FECHA_VINCULACIONDefault(){
				
					return null;
				
				}
				public String FECHA_VINCULACIONComment(){
				
				    return "";
				
				}
				public String FECHA_VINCULACIONPattern(){
				
					return "";
				
				}
				public String FECHA_VINCULACIONOriginalDbColumnName(){
				
					return "FECHA_VINCULACION";
				
				}

				
			    public BigDecimal ID_UNICO_PERSONA;

				public BigDecimal getID_UNICO_PERSONA () {
					return this.ID_UNICO_PERSONA;
				}

				public Boolean ID_UNICO_PERSONAIsNullable(){
				    return true;
				}
				public Boolean ID_UNICO_PERSONAIsKey(){
				    return false;
				}
				public Integer ID_UNICO_PERSONALength(){
				    return 0;
				}
				public Integer ID_UNICO_PERSONAPrecision(){
				    return null;
				}
				public String ID_UNICO_PERSONADefault(){
				
					return "";
				
				}
				public String ID_UNICO_PERSONAComment(){
				
				    return "";
				
				}
				public String ID_UNICO_PERSONAPattern(){
				
					return "";
				
				}
				public String ID_UNICO_PERSONAOriginalDbColumnName(){
				
					return "ID_UNICO_PERSONA";
				
				}

				
			    public BigDecimal ID_UNICO_AFILIADO;

				public BigDecimal getID_UNICO_AFILIADO () {
					return this.ID_UNICO_AFILIADO;
				}

				public Boolean ID_UNICO_AFILIADOIsNullable(){
				    return true;
				}
				public Boolean ID_UNICO_AFILIADOIsKey(){
				    return false;
				}
				public Integer ID_UNICO_AFILIADOLength(){
				    return 0;
				}
				public Integer ID_UNICO_AFILIADOPrecision(){
				    return null;
				}
				public String ID_UNICO_AFILIADODefault(){
				
					return "";
				
				}
				public String ID_UNICO_AFILIADOComment(){
				
				    return "";
				
				}
				public String ID_UNICO_AFILIADOPattern(){
				
					return "";
				
				}
				public String ID_UNICO_AFILIADOOriginalDbColumnName(){
				
					return "ID_UNICO_AFILIADO";
				
				}

				
			    public String OBSERVACIONES;

				public String getOBSERVACIONES () {
					return this.OBSERVACIONES;
				}

				public Boolean OBSERVACIONESIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONESIsKey(){
				    return false;
				}
				public Integer OBSERVACIONESLength(){
				    return 35;
				}
				public Integer OBSERVACIONESPrecision(){
				    return 0;
				}
				public String OBSERVACIONESDefault(){
				
					return null;
				
				}
				public String OBSERVACIONESComment(){
				
				    return "";
				
				}
				public String OBSERVACIONESPattern(){
				
					return "";
				
				}
				public String OBSERVACIONESOriginalDbColumnName(){
				
					return "OBSERVACIONES";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 0;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal RNOVEDADES_ID;

				public BigDecimal getRNOVEDADES_ID () {
					return this.RNOVEDADES_ID;
				}

				public Boolean RNOVEDADES_IDIsNullable(){
				    return false;
				}
				public Boolean RNOVEDADES_IDIsKey(){
				    return false;
				}
				public Integer RNOVEDADES_IDLength(){
				    return 0;
				}
				public Integer RNOVEDADES_IDPrecision(){
				    return null;
				}
				public String RNOVEDADES_IDDefault(){
				
					return "";
				
				}
				public String RNOVEDADES_IDComment(){
				
				    return "";
				
				}
				public String RNOVEDADES_IDPattern(){
				
					return "";
				
				}
				public String RNOVEDADES_IDOriginalDbColumnName(){
				
					return "RNOVEDADES_ID";
				
				}

				
			    public String TIPO_AFILIADO;

				public String getTIPO_AFILIADO () {
					return this.TIPO_AFILIADO;
				}

				public Boolean TIPO_AFILIADOIsNullable(){
				    return true;
				}
				public Boolean TIPO_AFILIADOIsKey(){
				    return false;
				}
				public Integer TIPO_AFILIADOLength(){
				    return null;
				}
				public Integer TIPO_AFILIADOPrecision(){
				    return null;
				}
				public String TIPO_AFILIADODefault(){
				
					return null;
				
				}
				public String TIPO_AFILIADOComment(){
				
				    return "";
				
				}
				public String TIPO_AFILIADOPattern(){
				
					return "";
				
				}
				public String TIPO_AFILIADOOriginalDbColumnName(){
				
					return "TIPO_AFILIADO";
				
				}

				
			    public String ESTADO_ENTIDAD;

				public String getESTADO_ENTIDAD () {
					return this.ESTADO_ENTIDAD;
				}

				public Boolean ESTADO_ENTIDADIsNullable(){
				    return true;
				}
				public Boolean ESTADO_ENTIDADIsKey(){
				    return false;
				}
				public Integer ESTADO_ENTIDADLength(){
				    return null;
				}
				public Integer ESTADO_ENTIDADPrecision(){
				    return null;
				}
				public String ESTADO_ENTIDADDefault(){
				
					return null;
				
				}
				public String ESTADO_ENTIDADComment(){
				
				    return "";
				
				}
				public String ESTADO_ENTIDADPattern(){
				
					return "";
				
				}
				public String ESTADO_ENTIDADOriginalDbColumnName(){
				
					return "ESTADO_ENTIDAD";
				
				}

				
			    public Integer ENTIDAD_PRINCIPAL;

				public Integer getENTIDAD_PRINCIPAL () {
					return this.ENTIDAD_PRINCIPAL;
				}

				public Boolean ENTIDAD_PRINCIPALIsNullable(){
				    return true;
				}
				public Boolean ENTIDAD_PRINCIPALIsKey(){
				    return false;
				}
				public Integer ENTIDAD_PRINCIPALLength(){
				    return null;
				}
				public Integer ENTIDAD_PRINCIPALPrecision(){
				    return null;
				}
				public String ENTIDAD_PRINCIPALDefault(){
				
					return null;
				
				}
				public String ENTIDAD_PRINCIPALComment(){
				
				    return "";
				
				}
				public String ENTIDAD_PRINCIPALPattern(){
				
					return "";
				
				}
				public String ENTIDAD_PRINCIPALOriginalDbColumnName(){
				
					return "ENTIDAD_PRINCIPAL";
				
				}

				
			    public String SIGLA_REGIMEN;

				public String getSIGLA_REGIMEN () {
					return this.SIGLA_REGIMEN;
				}

				public Boolean SIGLA_REGIMENIsNullable(){
				    return true;
				}
				public Boolean SIGLA_REGIMENIsKey(){
				    return false;
				}
				public Integer SIGLA_REGIMENLength(){
				    return null;
				}
				public Integer SIGLA_REGIMENPrecision(){
				    return null;
				}
				public String SIGLA_REGIMENDefault(){
				
					return null;
				
				}
				public String SIGLA_REGIMENComment(){
				
				    return "";
				
				}
				public String SIGLA_REGIMENPattern(){
				
					return "";
				
				}
				public String SIGLA_REGIMENOriginalDbColumnName(){
				
					return "SIGLA_REGIMEN";
				
				}

				
			    public BigDecimal ID_UNICO_ENTIDAD;

				public BigDecimal getID_UNICO_ENTIDAD () {
					return this.ID_UNICO_ENTIDAD;
				}

				public Boolean ID_UNICO_ENTIDADIsNullable(){
				    return true;
				}
				public Boolean ID_UNICO_ENTIDADIsKey(){
				    return false;
				}
				public Integer ID_UNICO_ENTIDADLength(){
				    return null;
				}
				public Integer ID_UNICO_ENTIDADPrecision(){
				    return null;
				}
				public String ID_UNICO_ENTIDADDefault(){
				
					return null;
				
				}
				public String ID_UNICO_ENTIDADComment(){
				
				    return "";
				
				}
				public String ID_UNICO_ENTIDADPattern(){
				
					return "";
				
				}
				public String ID_UNICO_ENTIDADOriginalDbColumnName(){
				
					return "ID_UNICO_ENTIDAD";
				
				}

				
			    public String CORREO_ELECTRONICO;

				public String getCORREO_ELECTRONICO () {
					return this.CORREO_ELECTRONICO;
				}

				public Boolean CORREO_ELECTRONICOIsNullable(){
				    return true;
				}
				public Boolean CORREO_ELECTRONICOIsKey(){
				    return false;
				}
				public Integer CORREO_ELECTRONICOLength(){
				    return null;
				}
				public Integer CORREO_ELECTRONICOPrecision(){
				    return null;
				}
				public String CORREO_ELECTRONICODefault(){
				
					return null;
				
				}
				public String CORREO_ELECTRONICOComment(){
				
				    return "";
				
				}
				public String CORREO_ELECTRONICOPattern(){
				
					return "";
				
				}
				public String CORREO_ELECTRONICOOriginalDbColumnName(){
				
					return "CORREO_ELECTRONICO";
				
				}

				
			    public String CELULAR;

				public String getCELULAR () {
					return this.CELULAR;
				}

				public Boolean CELULARIsNullable(){
				    return true;
				}
				public Boolean CELULARIsKey(){
				    return false;
				}
				public Integer CELULARLength(){
				    return null;
				}
				public Integer CELULARPrecision(){
				    return null;
				}
				public String CELULARDefault(){
				
					return null;
				
				}
				public String CELULARComment(){
				
				    return "";
				
				}
				public String CELULARPattern(){
				
					return "";
				
				}
				public String CELULAROriginalDbColumnName(){
				
					return "CELULAR";
				
				}

				
			    public String FECHA_DEFUNCION;

				public String getFECHA_DEFUNCION () {
					return this.FECHA_DEFUNCION;
				}

				public Boolean FECHA_DEFUNCIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_DEFUNCIONIsKey(){
				    return false;
				}
				public Integer FECHA_DEFUNCIONLength(){
				    return null;
				}
				public Integer FECHA_DEFUNCIONPrecision(){
				    return null;
				}
				public String FECHA_DEFUNCIONDefault(){
				
					return null;
				
				}
				public String FECHA_DEFUNCIONComment(){
				
				    return "";
				
				}
				public String FECHA_DEFUNCIONPattern(){
				
					return "";
				
				}
				public String FECHA_DEFUNCIONOriginalDbColumnName(){
				
					return "FECHA_DEFUNCION";
				
				}

				
			    public String PLANAFILIACION;

				public String getPLANAFILIACION () {
					return this.PLANAFILIACION;
				}

				public Boolean PLANAFILIACIONIsNullable(){
				    return true;
				}
				public Boolean PLANAFILIACIONIsKey(){
				    return false;
				}
				public Integer PLANAFILIACIONLength(){
				    return null;
				}
				public Integer PLANAFILIACIONPrecision(){
				    return null;
				}
				public String PLANAFILIACIONDefault(){
				
					return null;
				
				}
				public String PLANAFILIACIONComment(){
				
				    return "";
				
				}
				public String PLANAFILIACIONPattern(){
				
					return "";
				
				}
				public String PLANAFILIACIONOriginalDbColumnName(){
				
					return "PLANAFILIACION";
				
				}

				
			    public BigDecimal ID_BDUA;

				public BigDecimal getID_BDUA () {
					return this.ID_BDUA;
				}

				public Boolean ID_BDUAIsNullable(){
				    return true;
				}
				public Boolean ID_BDUAIsKey(){
				    return false;
				}
				public Integer ID_BDUALength(){
				    return null;
				}
				public Integer ID_BDUAPrecision(){
				    return null;
				}
				public String ID_BDUADefault(){
				
					return null;
				
				}
				public String ID_BDUAComment(){
				
				    return "";
				
				}
				public String ID_BDUAPattern(){
				
					return "";
				
				}
				public String ID_BDUAOriginalDbColumnName(){
				
					return "ID_BDUA";
				
				}

				
			    public String MOTIVO_CAMBIO_ESTADO;

				public String getMOTIVO_CAMBIO_ESTADO () {
					return this.MOTIVO_CAMBIO_ESTADO;
				}

				public Boolean MOTIVO_CAMBIO_ESTADOIsNullable(){
				    return true;
				}
				public Boolean MOTIVO_CAMBIO_ESTADOIsKey(){
				    return false;
				}
				public Integer MOTIVO_CAMBIO_ESTADOLength(){
				    return null;
				}
				public Integer MOTIVO_CAMBIO_ESTADOPrecision(){
				    return null;
				}
				public String MOTIVO_CAMBIO_ESTADODefault(){
				
					return null;
				
				}
				public String MOTIVO_CAMBIO_ESTADOComment(){
				
				    return "";
				
				}
				public String MOTIVO_CAMBIO_ESTADOPattern(){
				
					return "";
				
				}
				public String MOTIVO_CAMBIO_ESTADOOriginalDbColumnName(){
				
					return "MOTIVO_CAMBIO_ESTADO";
				
				}

				
			    public String MOTIVO_CAMBIO_ESM;

				public String getMOTIVO_CAMBIO_ESM () {
					return this.MOTIVO_CAMBIO_ESM;
				}

				public Boolean MOTIVO_CAMBIO_ESMIsNullable(){
				    return true;
				}
				public Boolean MOTIVO_CAMBIO_ESMIsKey(){
				    return false;
				}
				public Integer MOTIVO_CAMBIO_ESMLength(){
				    return null;
				}
				public Integer MOTIVO_CAMBIO_ESMPrecision(){
				    return null;
				}
				public String MOTIVO_CAMBIO_ESMDefault(){
				
					return null;
				
				}
				public String MOTIVO_CAMBIO_ESMComment(){
				
				    return "";
				
				}
				public String MOTIVO_CAMBIO_ESMPattern(){
				
					return "";
				
				}
				public String MOTIVO_CAMBIO_ESMOriginalDbColumnName(){
				
					return "MOTIVO_CAMBIO_ESM";
				
				}

				
			    public String DISCAPACIDAD;

				public String getDISCAPACIDAD () {
					return this.DISCAPACIDAD;
				}

				public Boolean DISCAPACIDADIsNullable(){
				    return true;
				}
				public Boolean DISCAPACIDADIsKey(){
				    return false;
				}
				public Integer DISCAPACIDADLength(){
				    return null;
				}
				public Integer DISCAPACIDADPrecision(){
				    return null;
				}
				public String DISCAPACIDADDefault(){
				
					return null;
				
				}
				public String DISCAPACIDADComment(){
				
				    return "";
				
				}
				public String DISCAPACIDADPattern(){
				
					return "";
				
				}
				public String DISCAPACIDADOriginalDbColumnName(){
				
					return "DISCAPACIDAD";
				
				}

				
			    public String POBLACION_ESPECIAL;

				public String getPOBLACION_ESPECIAL () {
					return this.POBLACION_ESPECIAL;
				}

				public Boolean POBLACION_ESPECIALIsNullable(){
				    return true;
				}
				public Boolean POBLACION_ESPECIALIsKey(){
				    return false;
				}
				public Integer POBLACION_ESPECIALLength(){
				    return null;
				}
				public Integer POBLACION_ESPECIALPrecision(){
				    return null;
				}
				public String POBLACION_ESPECIALDefault(){
				
					return null;
				
				}
				public String POBLACION_ESPECIALComment(){
				
				    return "";
				
				}
				public String POBLACION_ESPECIALPattern(){
				
					return "";
				
				}
				public String POBLACION_ESPECIALOriginalDbColumnName(){
				
					return "POBLACION_ESPECIAL";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.SIGLA_DOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PAIS_EXP_DOCUMENTO = readString(dis);
					
					this.DEPTO_EXP_DOCUMENTO = readString(dis);
					
					this.MUNICIPIO_EXP_DOCUMENTO = readString(dis);
					
					this.FECHA_EXPEDICION_DOCUMENTO = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.PAIS_NACIMIENTO = readString(dis);
					
					this.DEPARTAMENTO_NACIMIENTO = readString(dis);
					
					this.MUNICIPIO_NACIMIENTO = readString(dis);
					
					this.SEXO = readString(dis);
					
					this.DIRECCION = readString(dis);
					
					this.TELEFONO = readString(dis);
					
					this.PAIS_RESIDENCIA = readString(dis);
					
					this.DEPARTAMENTO_RESIDENCIA = readString(dis);
					
					this.MUNICIPIO_RESIDENCIA = readString(dis);
					
					this.LOCALIDAD_RESIDENCIA = readString(dis);
					
					this.GRUPO_SANGUINEO = readString(dis);
					
					this.FACTOR_RH = readString(dis);
					
					this.OCUPACION = readString(dis);
					
					this.ESTATURA = readString(dis);
					
					this.GRUPO_ETNICO = readString(dis);
					
					this.NSOCIOECONOMICO = readString(dis);
					
					this.TVIVIENDA = readString(dis);
					
					this.NEDUCATIVOS = readString(dis);
					
					this.CODIGO_ESTABLECIMIENTO = readString(dis);
					
					this.ESTABLECIMIENTO_ADSCRITO = readString(dis);
					
					this.ENTIDAD_APORTANTE = readString(dis);
					
					this.CODIGO_GRDMILITAR = readString(dis);
					
					this.SIGLA_GRDMILITAR = readString(dis);
					
					this.FUERZA_MILITAR = readString(dis);
					
					this.CODIGO_UMILITAR = readString(dis);
					
					this.UNIDAD_MILITAR = readString(dis);
					
					this.TIPO_DE_VINCULACION = readString(dis);
					
					this.SIGLA_ESTADO = readString(dis);
					
						this.MOTIVOSESTADO_ID = (BigDecimal) dis.readObject();
					
					this.MOTIVO = readString(dis);
					
					this.FECHA_CADUCIDAD = readString(dis);
					
					this.FECHA_VINCULACION = readString(dis);
					
						this.ID_UNICO_PERSONA = (BigDecimal) dis.readObject();
					
						this.ID_UNICO_AFILIADO = (BigDecimal) dis.readObject();
					
					this.OBSERVACIONES = readString(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.RNOVEDADES_ID = (BigDecimal) dis.readObject();
					
					this.TIPO_AFILIADO = readString(dis);
					
					this.ESTADO_ENTIDAD = readString(dis);
					
						this.ENTIDAD_PRINCIPAL = readInteger(dis);
					
					this.SIGLA_REGIMEN = readString(dis);
					
						this.ID_UNICO_ENTIDAD = (BigDecimal) dis.readObject();
					
					this.CORREO_ELECTRONICO = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.FECHA_DEFUNCION = readString(dis);
					
					this.PLANAFILIACION = readString(dis);
					
						this.ID_BDUA = (BigDecimal) dis.readObject();
					
					this.MOTIVO_CAMBIO_ESTADO = readString(dis);
					
					this.MOTIVO_CAMBIO_ESM = readString(dis);
					
					this.DISCAPACIDAD = readString(dis);
					
					this.POBLACION_ESPECIAL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.SIGLA_DOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PAIS_EXP_DOCUMENTO = readString(dis);
					
					this.DEPTO_EXP_DOCUMENTO = readString(dis);
					
					this.MUNICIPIO_EXP_DOCUMENTO = readString(dis);
					
					this.FECHA_EXPEDICION_DOCUMENTO = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.PAIS_NACIMIENTO = readString(dis);
					
					this.DEPARTAMENTO_NACIMIENTO = readString(dis);
					
					this.MUNICIPIO_NACIMIENTO = readString(dis);
					
					this.SEXO = readString(dis);
					
					this.DIRECCION = readString(dis);
					
					this.TELEFONO = readString(dis);
					
					this.PAIS_RESIDENCIA = readString(dis);
					
					this.DEPARTAMENTO_RESIDENCIA = readString(dis);
					
					this.MUNICIPIO_RESIDENCIA = readString(dis);
					
					this.LOCALIDAD_RESIDENCIA = readString(dis);
					
					this.GRUPO_SANGUINEO = readString(dis);
					
					this.FACTOR_RH = readString(dis);
					
					this.OCUPACION = readString(dis);
					
					this.ESTATURA = readString(dis);
					
					this.GRUPO_ETNICO = readString(dis);
					
					this.NSOCIOECONOMICO = readString(dis);
					
					this.TVIVIENDA = readString(dis);
					
					this.NEDUCATIVOS = readString(dis);
					
					this.CODIGO_ESTABLECIMIENTO = readString(dis);
					
					this.ESTABLECIMIENTO_ADSCRITO = readString(dis);
					
					this.ENTIDAD_APORTANTE = readString(dis);
					
					this.CODIGO_GRDMILITAR = readString(dis);
					
					this.SIGLA_GRDMILITAR = readString(dis);
					
					this.FUERZA_MILITAR = readString(dis);
					
					this.CODIGO_UMILITAR = readString(dis);
					
					this.UNIDAD_MILITAR = readString(dis);
					
					this.TIPO_DE_VINCULACION = readString(dis);
					
					this.SIGLA_ESTADO = readString(dis);
					
						this.MOTIVOSESTADO_ID = (BigDecimal) dis.readObject();
					
					this.MOTIVO = readString(dis);
					
					this.FECHA_CADUCIDAD = readString(dis);
					
					this.FECHA_VINCULACION = readString(dis);
					
						this.ID_UNICO_PERSONA = (BigDecimal) dis.readObject();
					
						this.ID_UNICO_AFILIADO = (BigDecimal) dis.readObject();
					
					this.OBSERVACIONES = readString(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.RNOVEDADES_ID = (BigDecimal) dis.readObject();
					
					this.TIPO_AFILIADO = readString(dis);
					
					this.ESTADO_ENTIDAD = readString(dis);
					
						this.ENTIDAD_PRINCIPAL = readInteger(dis);
					
					this.SIGLA_REGIMEN = readString(dis);
					
						this.ID_UNICO_ENTIDAD = (BigDecimal) dis.readObject();
					
					this.CORREO_ELECTRONICO = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.FECHA_DEFUNCION = readString(dis);
					
					this.PLANAFILIACION = readString(dis);
					
						this.ID_BDUA = (BigDecimal) dis.readObject();
					
					this.MOTIVO_CAMBIO_ESTADO = readString(dis);
					
					this.MOTIVO_CAMBIO_ESM = readString(dis);
					
					this.DISCAPACIDAD = readString(dis);
					
					this.POBLACION_ESPECIAL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.SIGLA_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PAIS_EXP_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DEPTO_EXP_DOCUMENTO,dos);
					
					// String
				
						writeString(this.MUNICIPIO_EXP_DOCUMENTO,dos);
					
					// String
				
						writeString(this.FECHA_EXPEDICION_DOCUMENTO,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.PAIS_NACIMIENTO,dos);
					
					// String
				
						writeString(this.DEPARTAMENTO_NACIMIENTO,dos);
					
					// String
				
						writeString(this.MUNICIPIO_NACIMIENTO,dos);
					
					// String
				
						writeString(this.SEXO,dos);
					
					// String
				
						writeString(this.DIRECCION,dos);
					
					// String
				
						writeString(this.TELEFONO,dos);
					
					// String
				
						writeString(this.PAIS_RESIDENCIA,dos);
					
					// String
				
						writeString(this.DEPARTAMENTO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.MUNICIPIO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.LOCALIDAD_RESIDENCIA,dos);
					
					// String
				
						writeString(this.GRUPO_SANGUINEO,dos);
					
					// String
				
						writeString(this.FACTOR_RH,dos);
					
					// String
				
						writeString(this.OCUPACION,dos);
					
					// String
				
						writeString(this.ESTATURA,dos);
					
					// String
				
						writeString(this.GRUPO_ETNICO,dos);
					
					// String
				
						writeString(this.NSOCIOECONOMICO,dos);
					
					// String
				
						writeString(this.TVIVIENDA,dos);
					
					// String
				
						writeString(this.NEDUCATIVOS,dos);
					
					// String
				
						writeString(this.CODIGO_ESTABLECIMIENTO,dos);
					
					// String
				
						writeString(this.ESTABLECIMIENTO_ADSCRITO,dos);
					
					// String
				
						writeString(this.ENTIDAD_APORTANTE,dos);
					
					// String
				
						writeString(this.CODIGO_GRDMILITAR,dos);
					
					// String
				
						writeString(this.SIGLA_GRDMILITAR,dos);
					
					// String
				
						writeString(this.FUERZA_MILITAR,dos);
					
					// String
				
						writeString(this.CODIGO_UMILITAR,dos);
					
					// String
				
						writeString(this.UNIDAD_MILITAR,dos);
					
					// String
				
						writeString(this.TIPO_DE_VINCULACION,dos);
					
					// String
				
						writeString(this.SIGLA_ESTADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MOTIVOSESTADO_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// String
				
						writeString(this.FECHA_CADUCIDAD,dos);
					
					// String
				
						writeString(this.FECHA_VINCULACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ID_UNICO_PERSONA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ID_UNICO_AFILIADO);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RNOVEDADES_ID);
					
					// String
				
						writeString(this.TIPO_AFILIADO,dos);
					
					// String
				
						writeString(this.ESTADO_ENTIDAD,dos);
					
					// Integer
				
						writeInteger(this.ENTIDAD_PRINCIPAL,dos);
					
					// String
				
						writeString(this.SIGLA_REGIMEN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ID_UNICO_ENTIDAD);
					
					// String
				
						writeString(this.CORREO_ELECTRONICO,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// String
				
						writeString(this.FECHA_DEFUNCION,dos);
					
					// String
				
						writeString(this.PLANAFILIACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ID_BDUA);
					
					// String
				
						writeString(this.MOTIVO_CAMBIO_ESTADO,dos);
					
					// String
				
						writeString(this.MOTIVO_CAMBIO_ESM,dos);
					
					// String
				
						writeString(this.DISCAPACIDAD,dos);
					
					// String
				
						writeString(this.POBLACION_ESPECIAL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.SIGLA_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PAIS_EXP_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DEPTO_EXP_DOCUMENTO,dos);
					
					// String
				
						writeString(this.MUNICIPIO_EXP_DOCUMENTO,dos);
					
					// String
				
						writeString(this.FECHA_EXPEDICION_DOCUMENTO,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.PAIS_NACIMIENTO,dos);
					
					// String
				
						writeString(this.DEPARTAMENTO_NACIMIENTO,dos);
					
					// String
				
						writeString(this.MUNICIPIO_NACIMIENTO,dos);
					
					// String
				
						writeString(this.SEXO,dos);
					
					// String
				
						writeString(this.DIRECCION,dos);
					
					// String
				
						writeString(this.TELEFONO,dos);
					
					// String
				
						writeString(this.PAIS_RESIDENCIA,dos);
					
					// String
				
						writeString(this.DEPARTAMENTO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.MUNICIPIO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.LOCALIDAD_RESIDENCIA,dos);
					
					// String
				
						writeString(this.GRUPO_SANGUINEO,dos);
					
					// String
				
						writeString(this.FACTOR_RH,dos);
					
					// String
				
						writeString(this.OCUPACION,dos);
					
					// String
				
						writeString(this.ESTATURA,dos);
					
					// String
				
						writeString(this.GRUPO_ETNICO,dos);
					
					// String
				
						writeString(this.NSOCIOECONOMICO,dos);
					
					// String
				
						writeString(this.TVIVIENDA,dos);
					
					// String
				
						writeString(this.NEDUCATIVOS,dos);
					
					// String
				
						writeString(this.CODIGO_ESTABLECIMIENTO,dos);
					
					// String
				
						writeString(this.ESTABLECIMIENTO_ADSCRITO,dos);
					
					// String
				
						writeString(this.ENTIDAD_APORTANTE,dos);
					
					// String
				
						writeString(this.CODIGO_GRDMILITAR,dos);
					
					// String
				
						writeString(this.SIGLA_GRDMILITAR,dos);
					
					// String
				
						writeString(this.FUERZA_MILITAR,dos);
					
					// String
				
						writeString(this.CODIGO_UMILITAR,dos);
					
					// String
				
						writeString(this.UNIDAD_MILITAR,dos);
					
					// String
				
						writeString(this.TIPO_DE_VINCULACION,dos);
					
					// String
				
						writeString(this.SIGLA_ESTADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.MOTIVOSESTADO_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// String
				
						writeString(this.FECHA_CADUCIDAD,dos);
					
					// String
				
						writeString(this.FECHA_VINCULACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID_UNICO_PERSONA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID_UNICO_AFILIADO);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RNOVEDADES_ID);
					
					// String
				
						writeString(this.TIPO_AFILIADO,dos);
					
					// String
				
						writeString(this.ESTADO_ENTIDAD,dos);
					
					// Integer
				
						writeInteger(this.ENTIDAD_PRINCIPAL,dos);
					
					// String
				
						writeString(this.SIGLA_REGIMEN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID_UNICO_ENTIDAD);
					
					// String
				
						writeString(this.CORREO_ELECTRONICO,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// String
				
						writeString(this.FECHA_DEFUNCION,dos);
					
					// String
				
						writeString(this.PLANAFILIACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID_BDUA);
					
					// String
				
						writeString(this.MOTIVO_CAMBIO_ESTADO,dos);
					
					// String
				
						writeString(this.MOTIVO_CAMBIO_ESM,dos);
					
					// String
				
						writeString(this.DISCAPACIDAD,dos);
					
					// String
				
						writeString(this.POBLACION_ESPECIAL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",SIGLA_DOCUMENTO="+SIGLA_DOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PAIS_EXP_DOCUMENTO="+PAIS_EXP_DOCUMENTO);
		sb.append(",DEPTO_EXP_DOCUMENTO="+DEPTO_EXP_DOCUMENTO);
		sb.append(",MUNICIPIO_EXP_DOCUMENTO="+MUNICIPIO_EXP_DOCUMENTO);
		sb.append(",FECHA_EXPEDICION_DOCUMENTO="+FECHA_EXPEDICION_DOCUMENTO);
		sb.append(",FECHA_NACIMIENTO="+FECHA_NACIMIENTO);
		sb.append(",PAIS_NACIMIENTO="+PAIS_NACIMIENTO);
		sb.append(",DEPARTAMENTO_NACIMIENTO="+DEPARTAMENTO_NACIMIENTO);
		sb.append(",MUNICIPIO_NACIMIENTO="+MUNICIPIO_NACIMIENTO);
		sb.append(",SEXO="+SEXO);
		sb.append(",DIRECCION="+DIRECCION);
		sb.append(",TELEFONO="+TELEFONO);
		sb.append(",PAIS_RESIDENCIA="+PAIS_RESIDENCIA);
		sb.append(",DEPARTAMENTO_RESIDENCIA="+DEPARTAMENTO_RESIDENCIA);
		sb.append(",MUNICIPIO_RESIDENCIA="+MUNICIPIO_RESIDENCIA);
		sb.append(",LOCALIDAD_RESIDENCIA="+LOCALIDAD_RESIDENCIA);
		sb.append(",GRUPO_SANGUINEO="+GRUPO_SANGUINEO);
		sb.append(",FACTOR_RH="+FACTOR_RH);
		sb.append(",OCUPACION="+OCUPACION);
		sb.append(",ESTATURA="+ESTATURA);
		sb.append(",GRUPO_ETNICO="+GRUPO_ETNICO);
		sb.append(",NSOCIOECONOMICO="+NSOCIOECONOMICO);
		sb.append(",TVIVIENDA="+TVIVIENDA);
		sb.append(",NEDUCATIVOS="+NEDUCATIVOS);
		sb.append(",CODIGO_ESTABLECIMIENTO="+CODIGO_ESTABLECIMIENTO);
		sb.append(",ESTABLECIMIENTO_ADSCRITO="+ESTABLECIMIENTO_ADSCRITO);
		sb.append(",ENTIDAD_APORTANTE="+ENTIDAD_APORTANTE);
		sb.append(",CODIGO_GRDMILITAR="+CODIGO_GRDMILITAR);
		sb.append(",SIGLA_GRDMILITAR="+SIGLA_GRDMILITAR);
		sb.append(",FUERZA_MILITAR="+FUERZA_MILITAR);
		sb.append(",CODIGO_UMILITAR="+CODIGO_UMILITAR);
		sb.append(",UNIDAD_MILITAR="+UNIDAD_MILITAR);
		sb.append(",TIPO_DE_VINCULACION="+TIPO_DE_VINCULACION);
		sb.append(",SIGLA_ESTADO="+SIGLA_ESTADO);
		sb.append(",MOTIVOSESTADO_ID="+String.valueOf(MOTIVOSESTADO_ID));
		sb.append(",MOTIVO="+MOTIVO);
		sb.append(",FECHA_CADUCIDAD="+FECHA_CADUCIDAD);
		sb.append(",FECHA_VINCULACION="+FECHA_VINCULACION);
		sb.append(",ID_UNICO_PERSONA="+String.valueOf(ID_UNICO_PERSONA));
		sb.append(",ID_UNICO_AFILIADO="+String.valueOf(ID_UNICO_AFILIADO));
		sb.append(",OBSERVACIONES="+OBSERVACIONES);
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",RNOVEDADES_ID="+String.valueOf(RNOVEDADES_ID));
		sb.append(",TIPO_AFILIADO="+TIPO_AFILIADO);
		sb.append(",ESTADO_ENTIDAD="+ESTADO_ENTIDAD);
		sb.append(",ENTIDAD_PRINCIPAL="+String.valueOf(ENTIDAD_PRINCIPAL));
		sb.append(",SIGLA_REGIMEN="+SIGLA_REGIMEN);
		sb.append(",ID_UNICO_ENTIDAD="+String.valueOf(ID_UNICO_ENTIDAD));
		sb.append(",CORREO_ELECTRONICO="+CORREO_ELECTRONICO);
		sb.append(",CELULAR="+CELULAR);
		sb.append(",FECHA_DEFUNCION="+FECHA_DEFUNCION);
		sb.append(",PLANAFILIACION="+PLANAFILIACION);
		sb.append(",ID_BDUA="+String.valueOf(ID_BDUA));
		sb.append(",MOTIVO_CAMBIO_ESTADO="+MOTIVO_CAMBIO_ESTADO);
		sb.append(",MOTIVO_CAMBIO_ESM="+MOTIVO_CAMBIO_ESM);
		sb.append(",DISCAPACIDAD="+DISCAPACIDAD);
		sb.append(",POBLACION_ESPECIAL="+POBLACION_ESPECIAL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_10Process(globalMap);
		tHashInput_1Process(globalMap);
		tHashInput_2Process(globalMap);
		tHashInput_3Process(globalMap);
		tHashInput_4Process(globalMap);
		tHashInput_5Process(globalMap);
		tHashInput_6Process(globalMap);
		tHashInput_7Process(globalMap);
		tHashInput_8Process(globalMap);
		tHashInput_9Process(globalMap);
		tHashInput_11Process(globalMap);
		tHashInput_12Process(globalMap);
		tHashInput_13Process(globalMap);
		tHashInput_14Process(globalMap);
		tHashInput_15Process(globalMap);
		tHashInput_16Process(globalMap);
		tHashInput_17Process(globalMap);
		tHashInput_18Process(globalMap);
		tHashInput_19Process(globalMap);
		tHashInput_20Process(globalMap);
		tHashInput_27Process(globalMap);
		tHashInput_31Process(globalMap);
		tHashInput_32Process(globalMap);

		row24Struct row24 = new row24Struct();
ErroresStruct Errores = new ErroresStruct();
row26Struct row26 = new row26Struct();
ActualizablesStruct Actualizables = new ActualizablesStruct();






	
	/**
	 * [tOracleOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_2", false);
		start_Hash.put("tOracleOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row26");
					}
				
		int tos_count_tOracleOutput_2 = 0;
		






    
    int nb_line_tOracleOutput_2 = 0;
    int nb_line_update_tOracleOutput_2 = 0;
    int nb_line_inserted_tOracleOutput_2 = 0;
    int nb_line_deleted_tOracleOutput_2 = 0;
    int nb_line_rejected_tOracleOutput_2 = 0;

    int tmp_batchUpdateCount_tOracleOutput_2 = 0;

    int deletedCount_tOracleOutput_2=0;
    int updatedCount_tOracleOutput_2=0;
    int insertedCount_tOracleOutput_2=0;
    int rowsToCommitCount_tOracleOutput_2=0;
    int rejectedCount_tOracleOutput_2=0;

    boolean whetherReject_tOracleOutput_2 = false;

    java.sql.Connection conn_tOracleOutput_2 = null;

    //optional table
    String dbschema_tOracleOutput_2 = null;
    String tableName_tOracleOutput_2 = null;
        dbschema_tOracleOutput_2 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_2=0;

        if(dbschema_tOracleOutput_2 == null || dbschema_tOracleOutput_2.trim().length() == 0) {
            tableName_tOracleOutput_2 = ("TST_ERRCMASIVO");
        } else {
            tableName_tOracleOutput_2 = dbschema_tOracleOutput_2 + "." + ("TST_ERRCMASIVO");
        }
                String insert_tOracleOutput_2 = "INSERT INTO " + tableName_tOracleOutput_2 + " (TDOCUMENTOS_ID,DOCUMENTO,MENSAJE) VALUES (?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_2 = conn_tOracleOutput_2.prepareStatement(insert_tOracleOutput_2);
                        resourceMap.put("pstmt_tOracleOutput_2", pstmt_tOracleOutput_2);





 



/**
 * [tOracleOutput_2 begin ] stop
 */



	
	/**
	 * [tJavaRow_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_8", false);
		start_Hash.put("tJavaRow_8", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Errores");
					}
				
		int tos_count_tJavaRow_8 = 0;
		

int nb_line_tJavaRow_8 = 0;

 



/**
 * [tJavaRow_8 begin ] stop
 */




	
	/**
	 * [tOracleOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_3", false);
		start_Hash.put("tOracleOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Actualizables");
					}
				
		int tos_count_tOracleOutput_3 = 0;
		






    
    int nb_line_tOracleOutput_3 = 0;
    int nb_line_update_tOracleOutput_3 = 0;
    int nb_line_inserted_tOracleOutput_3 = 0;
    int nb_line_deleted_tOracleOutput_3 = 0;
    int nb_line_rejected_tOracleOutput_3 = 0;

    int tmp_batchUpdateCount_tOracleOutput_3 = 0;

    int deletedCount_tOracleOutput_3=0;
    int updatedCount_tOracleOutput_3=0;
    int insertedCount_tOracleOutput_3=0;
    int rowsToCommitCount_tOracleOutput_3=0;
    int rejectedCount_tOracleOutput_3=0;

    boolean whetherReject_tOracleOutput_3 = false;

    java.sql.Connection conn_tOracleOutput_3 = null;

    //optional table
    String dbschema_tOracleOutput_3 = null;
    String tableName_tOracleOutput_3 = null;
        dbschema_tOracleOutput_3 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_3 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_3=0;

        if(dbschema_tOracleOutput_3 == null || dbschema_tOracleOutput_3.trim().length() == 0) {
            tableName_tOracleOutput_3 = ("TST_CARGUEMASIVO");
        } else {
            tableName_tOracleOutput_3 = dbschema_tOracleOutput_3 + "." + ("TST_CARGUEMASIVO");
        }
            int rsTruncCountNumber_tOracleOutput_3 = 0;
            try(java.sql.Statement stmtTruncCount_tOracleOutput_3 = conn_tOracleOutput_3.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tOracleOutput_3 = stmtTruncCount_tOracleOutput_3.executeQuery("SELECT COUNT(1) FROM " + tableName_tOracleOutput_3 + "")) {
                    if(rsTruncCount_tOracleOutput_3.next()) {
                        rsTruncCountNumber_tOracleOutput_3 = rsTruncCount_tOracleOutput_3.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tOracleOutput_3 = conn_tOracleOutput_3.createStatement()) {
                stmtTrunc_tOracleOutput_3.executeUpdate("TRUNCATE TABLE " + tableName_tOracleOutput_3 + "");
                deletedCount_tOracleOutput_3 += rsTruncCountNumber_tOracleOutput_3;
            }
                String insert_tOracleOutput_3 = "INSERT INTO " + tableName_tOracleOutput_3 + " (PRIMER_NOMBRE,SEGUNDO_NOMBRE,PRIMER_APELLIDO,SEGUNDO_APELLIDO,TDOCUMENTOS_ID,DOCUMENTO,LUGAR_EXP_DOC,FECHA_EXPEDICION_DOCUMENTO,FECHA_NACIMIENTO,LUGAR_NACIMIENTO,SEXOS_ID,DIRECCION,TELEFONO,LUGAR_RESIDENCIA,LOCALIDADES_ID,GSANGUINEOS_ID,ESTATURA,OCUPACIONES_ID,ETNICAS_ID,NSOCIOECONOMICOS_ID,TVIVIENDA_ID,NEDUCATIVOS_ID,ESMADSCRITO,OBSERVACIONES,ENTAPORTANTES_ID,GRDMILITARES_ID,FUERZAS_ID,UMILITARES_ID,TVINCULACIONES_ID,USUARIOS_ID,ESTADO,ESTADOS_ID,MOTIVOSESTADO_ID,MOTIVO,RNOVEDADES_ID,FECHA_CADUCIDAD,FECHA_VINCULACION,PERSONAS_ID,AFILIADO_ID,TIPO_AFILIADO,ESTADO_ENTIDAD,ENTIDAD_PRINCIPAL,TREGIMEN_ID,ID_UNICO_ENTIDAD,CORREO_ELECTRONICO,CELULAR,FECHA_DEFUNCION,PLANAFILIACIONES_ID,ID_BDUA,MOTIVO_CAMBIO_ESTADO,MOTIVO_CAMBIO_ESM,TDISCAPACIDADES_ID,PESPECIAL_ID) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_3 = conn_tOracleOutput_3.prepareStatement(insert_tOracleOutput_3);
                        resourceMap.put("pstmt_tOracleOutput_3", pstmt_tOracleOutput_3);





 



/**
 * [tOracleOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row24");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct> tHash_Lookup_row25 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct>) 
					globalMap.get( "tHash_Lookup_row25" ))
					;					
					
	

row25Struct row25HashKey = new row25Struct();
row25Struct row25Default = new row25Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row64Struct> tHash_Lookup_row64 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row64Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row64Struct>) 
					globalMap.get( "tHash_Lookup_row64" ))
					;					
					
	

row64Struct row64HashKey = new row64Struct();
row64Struct row64Default = new row64Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row65Struct> tHash_Lookup_row65 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row65Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row65Struct>) 
					globalMap.get( "tHash_Lookup_row65" ))
					;					
					
	

row65Struct row65HashKey = new row65Struct();
row65Struct row65Default = new row65Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row66Struct> tHash_Lookup_row66 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row66Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row66Struct>) 
					globalMap.get( "tHash_Lookup_row66" ))
					;					
					
	

row66Struct row66HashKey = new row66Struct();
row66Struct row66Default = new row66Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row67Struct> tHash_Lookup_row67 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row67Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row67Struct>) 
					globalMap.get( "tHash_Lookup_row67" ))
					;					
					
	

row67Struct row67HashKey = new row67Struct();
row67Struct row67Default = new row67Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row68Struct> tHash_Lookup_row68 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row68Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row68Struct>) 
					globalMap.get( "tHash_Lookup_row68" ))
					;					
					
	

row68Struct row68HashKey = new row68Struct();
row68Struct row68Default = new row68Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row69Struct> tHash_Lookup_row69 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row69Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row69Struct>) 
					globalMap.get( "tHash_Lookup_row69" ))
					;					
					
	

row69Struct row69HashKey = new row69Struct();
row69Struct row69Default = new row69Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row70Struct> tHash_Lookup_row70 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row70Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row70Struct>) 
					globalMap.get( "tHash_Lookup_row70" ))
					;					
					
	

row70Struct row70HashKey = new row70Struct();
row70Struct row70Default = new row70Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row71Struct> tHash_Lookup_row71 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row71Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row71Struct>) 
					globalMap.get( "tHash_Lookup_row71" ))
					;					
					
	

row71Struct row71HashKey = new row71Struct();
row71Struct row71Default = new row71Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row72Struct> tHash_Lookup_row72 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row72Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row72Struct>) 
					globalMap.get( "tHash_Lookup_row72" ))
					;					
					
	

row72Struct row72HashKey = new row72Struct();
row72Struct row72Default = new row72Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row73Struct> tHash_Lookup_row73 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row73Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row73Struct>) 
					globalMap.get( "tHash_Lookup_row73" ))
					;					
					
	

row73Struct row73HashKey = new row73Struct();
row73Struct row73Default = new row73Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row74Struct> tHash_Lookup_row74 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row74Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row74Struct>) 
					globalMap.get( "tHash_Lookup_row74" ))
					;					
					
	

row74Struct row74HashKey = new row74Struct();
row74Struct row74Default = new row74Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row75Struct> tHash_Lookup_row75 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row75Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row75Struct>) 
					globalMap.get( "tHash_Lookup_row75" ))
					;					
					
	

row75Struct row75HashKey = new row75Struct();
row75Struct row75Default = new row75Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row76Struct> tHash_Lookup_row76 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row76Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row76Struct>) 
					globalMap.get( "tHash_Lookup_row76" ))
					;					
					
	

row76Struct row76HashKey = new row76Struct();
row76Struct row76Default = new row76Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row77Struct> tHash_Lookup_row77 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row77Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row77Struct>) 
					globalMap.get( "tHash_Lookup_row77" ))
					;					
					
	

row77Struct row77HashKey = new row77Struct();
row77Struct row77Default = new row77Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row79Struct> tHash_Lookup_row79 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row79Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row79Struct>) 
					globalMap.get( "tHash_Lookup_row79" ))
					;					
					
	

row79Struct row79HashKey = new row79Struct();
row79Struct row79Default = new row79Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row80Struct> tHash_Lookup_row80 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row80Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row80Struct>) 
					globalMap.get( "tHash_Lookup_row80" ))
					;					
					
	

row80Struct row80HashKey = new row80Struct();
row80Struct row80Default = new row80Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row81Struct> tHash_Lookup_row81 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row81Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row81Struct>) 
					globalMap.get( "tHash_Lookup_row81" ))
					;					
					
	

row81Struct row81HashKey = new row81Struct();
row81Struct row81Default = new row81Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row82Struct> tHash_Lookup_row82 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row82Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row82Struct>) 
					globalMap.get( "tHash_Lookup_row82" ))
					;					
					
	

row82Struct row82HashKey = new row82Struct();
row82Struct row82Default = new row82Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row46Struct> tHash_Lookup_row46 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row46Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row46Struct>) 
					globalMap.get( "tHash_Lookup_row46" ))
					;					
					
	

row46Struct row46HashKey = new row46Struct();
row46Struct row46Default = new row46Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row127Struct> tHash_Lookup_row127 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row127Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row127Struct>) 
					globalMap.get( "tHash_Lookup_row127" ))
					;					
					
	

row127Struct row127HashKey = new row127Struct();
row127Struct row127Default = new row127Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row152Struct> tHash_Lookup_row152 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row152Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row152Struct>) 
					globalMap.get( "tHash_Lookup_row152" ))
					;					
					
	

row152Struct row152HashKey = new row152Struct();
row152Struct row152Default = new row152Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row154Struct> tHash_Lookup_row154 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row154Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row154Struct>) 
					globalMap.get( "tHash_Lookup_row154" ))
					;					
					
	

row154Struct row154HashKey = new row154Struct();
row154Struct row154Default = new row154Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
ErroresStruct Errores_tmp = new ErroresStruct();
ActualizablesStruct Actualizables_tmp = new ActualizablesStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tOracleInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_4", false);
		start_Hash.put("tOracleInput_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_4";
	
	
		int tos_count_tOracleInput_4 = 0;
		
	


	
		    int nb_line_tOracleInput_4 = 0;
		    java.sql.Connection conn_tOracleInput_4 = null;
				conn_tOracleInput_4 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_4 = false;
				boolean isConnectionWrapped_tOracleInput_4 = !(conn_tOracleInput_4 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_4.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_4 = null;
                if (isConnectionWrapped_tOracleInput_4) {
					unwrappedOraConn_tOracleInput_4 = conn_tOracleInput_4.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_4 != null) {
                        isTimeZoneNull_tOracleInput_4 = (unwrappedOraConn_tOracleInput_4.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_4 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_4).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_4) {
					java.sql.Statement stmtGetTZ_tOracleInput_4 = conn_tOracleInput_4.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_4 = stmtGetTZ_tOracleInput_4.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_4 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_4.next()) {
						sessionTimezone_tOracleInput_4 = rsGetTZ_tOracleInput_4.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_4 && unwrappedOraConn_tOracleInput_4 != null) {
                        unwrappedOraConn_tOracleInput_4.setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_4).setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_4 = conn_tOracleInput_4.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_4.setFetchSize(1000);


		    String dbquery_tOracleInput_4 = "SELECT TA.PRIMER_NOMBRE,\n       TA.SEGUNDO_NOMBRE,\n       TA.PRIMER_APELLIDO,\n       TA.SEGUNDO_APELLIDO,\n       TA"
+".TIPO_DE_DOCUMENTO AS SIGLA_DOCUMENTO,\n       TA.DOCUMENTO,\n       TA.PAIS_EXP_DOCUMENTO,\n       TA.DEPTO_EXP_DOCUMEN"
+"TO,\n       TA.MUNICIPIO_EXP_DOCUMENTO,\n       TA.FECHA_EXPEDICION_DOCUMENTO,\n       TA.FECHA_NACIMIENTO,\n       TA.P"
+"AIS_NACIMIENTO,\n       TA.DEPARTAMENTO_NACIMIENTO,\n       TA.MUNICIPIO_NACIMIENTO,\n       TA.SEXO,\n       TA.DIRECCI"
+"ON,\n       TA.TELEFONO,\n       TA.PAIS_RESIDENCIA,\n       TA.DEPARTAMENTO_RESIDENCIA,\n       TA.MUNICIPIO_RESIDENCIA"
+",\n       TA.LOCALIDAD_RESIDENCIA,\n       TA.GRUPO_SANGUINEO,\n       TA.FACTOR_RH,\n       TA.OCUPACION,\n       DECOD"
+"E(TA.ESTATURA,NULL,NULL,TA.ESTATURA) AS ESTATURA,\n       TA.GRUPO_ETNICO,\n       TA.NSOCIOECONOMICO,\n       TA.TVIVIE"
+"NDA,\n       TA.NEDUCATIVOS,\n       TA.CODIGO_ESTABLECIMIENTO,\n       TA.ESTABLECIMIENTO_ADSCRITO,\n       TA.ENTIDAD_"
+"APORTANTE,\n       TA.CODIGO_GRDMILITAR,\n       TA.SIGLA_GRDMILITAR,\n       TA.FUERZA_MILITAR,\n       TA.CODIGO_UMILI"
+"TAR,\n       TA.UNIDAD_MILITAR,\n       TA.TIPO_DE_VINCULACION,\n       TA.ESTADO_AFILIACION AS SIGLA_ESTADO,\n       AM"
+".ID AS MOTIVOSESTADO_ID,\n       AM.NOMBRE AS MOTIVO,\n       TA.FECHA_FIN_AFILIACION AS FECHA_CADUCIDAD,\n       TA.FEC"
+"HA_VINCULACION,       \n       TA.ID_UNICO_PERSONA,\n       TA.ID_UNICO_AFILIADO,     \n       TA.OBSERVACIONES,        "
+"      \n       GUS.ID AS USUARIOS_ID,              \n       ARN.ID AS RNOVEDADES_ID,\n	   TA.TIPO_AFILIADO,\n	   TA.ESTA"
+"DO_ENTIDAD,\n	   TA.ENTIDAD_PRINCIPAL,\n	   TA.SIGLA_REGIMEN,\n	   TA.ID_UNICO_ENTIDAD,\n	   TA.CORREO_ELECTRONICO,\n	  "
+" TA.CELULAR,\n	   TA.FECHA_DEFUNCION,\n	   TA.PLANAFILIACION,\n	   TA.ID_BDUA,\n	   TA.MOTIVO_CAMBIO_ESTADO,\n       TA."
+"MOTIVO_CAMBIO_ESM,\n       TA.DISCAPACIDAD,\n       TA.POBLACION_ESPECIAL   \nFROM TST_ARCHIVO TA\nINNER JOIN GEN_USUARI"
+"OS GUS ON GUS.USUARIO = 'AFI_CARGUEMASIVO' AND GUS.ESTREGISTRO_ID = 1\nINNER JOIN AFI_RNOVEDADES ARN ON ARN.CODIGO = 'S1"
+"7' AND ARN.ESTREGISTRO_ID = 1\nINNER JOIN AFI_MOTIVOSESTADO AM ON AM.SIGLA = 'CAM5' AND AM.ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_4_QUERY",dbquery_tOracleInput_4);

		    java.sql.ResultSet rs_tOracleInput_4 = null;

		    try {
		    	rs_tOracleInput_4 = stmt_tOracleInput_4.executeQuery(dbquery_tOracleInput_4);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_4 = rs_tOracleInput_4.getMetaData();
		    	int colQtyInRs_tOracleInput_4 = rsmd_tOracleInput_4.getColumnCount();

		    String tmpContent_tOracleInput_4 = null;
		    
		    
		    while (rs_tOracleInput_4.next()) {
		        nb_line_tOracleInput_4++;
		        
							if(colQtyInRs_tOracleInput_4 < 1) {
								row24.PRIMER_NOMBRE = null;
							} else {
	                         		
        	row24.PRIMER_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 2) {
								row24.SEGUNDO_NOMBRE = null;
							} else {
	                         		
        	row24.SEGUNDO_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 3) {
								row24.PRIMER_APELLIDO = null;
							} else {
	                         		
        	row24.PRIMER_APELLIDO = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 4) {
								row24.SEGUNDO_APELLIDO = null;
							} else {
	                         		
        	row24.SEGUNDO_APELLIDO = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 5) {
								row24.SIGLA_DOCUMENTO = null;
							} else {
	                         		
        	row24.SIGLA_DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 6) {
								row24.DOCUMENTO = null;
							} else {
	                         		
        	row24.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 7) {
								row24.PAIS_EXP_DOCUMENTO = null;
							} else {
	                         		
        	row24.PAIS_EXP_DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 8) {
								row24.DEPTO_EXP_DOCUMENTO = null;
							} else {
	                         		
        	row24.DEPTO_EXP_DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 9) {
								row24.MUNICIPIO_EXP_DOCUMENTO = null;
							} else {
	                         		
        	row24.MUNICIPIO_EXP_DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 9, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 10) {
								row24.FECHA_EXPEDICION_DOCUMENTO = null;
							} else {
	                         		
        	row24.FECHA_EXPEDICION_DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 10, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 11) {
								row24.FECHA_NACIMIENTO = null;
							} else {
	                         		
        	row24.FECHA_NACIMIENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 11, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 12) {
								row24.PAIS_NACIMIENTO = null;
							} else {
	                         		
        	row24.PAIS_NACIMIENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 12, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 13) {
								row24.DEPARTAMENTO_NACIMIENTO = null;
							} else {
	                         		
        	row24.DEPARTAMENTO_NACIMIENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 13, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 14) {
								row24.MUNICIPIO_NACIMIENTO = null;
							} else {
	                         		
        	row24.MUNICIPIO_NACIMIENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 14, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 15) {
								row24.SEXO = null;
							} else {
	                         		
        	row24.SEXO = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 15, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 16) {
								row24.DIRECCION = null;
							} else {
	                         		
        	row24.DIRECCION = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 16, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 17) {
								row24.TELEFONO = null;
							} else {
	                         		
        	row24.TELEFONO = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 17, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 18) {
								row24.PAIS_RESIDENCIA = null;
							} else {
	                         		
        	row24.PAIS_RESIDENCIA = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 18, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 19) {
								row24.DEPARTAMENTO_RESIDENCIA = null;
							} else {
	                         		
        	row24.DEPARTAMENTO_RESIDENCIA = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 19, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 20) {
								row24.MUNICIPIO_RESIDENCIA = null;
							} else {
	                         		
        	row24.MUNICIPIO_RESIDENCIA = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 20, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 21) {
								row24.LOCALIDAD_RESIDENCIA = null;
							} else {
	                         		
        	row24.LOCALIDAD_RESIDENCIA = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 21, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 22) {
								row24.GRUPO_SANGUINEO = null;
							} else {
	                         		
        	row24.GRUPO_SANGUINEO = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 22, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 23) {
								row24.FACTOR_RH = null;
							} else {
	                         		
        	row24.FACTOR_RH = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 23, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 24) {
								row24.OCUPACION = null;
							} else {
	                         		
        	row24.OCUPACION = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 24, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 25) {
								row24.ESTATURA = null;
							} else {
	                         		
        	row24.ESTATURA = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 25, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 26) {
								row24.GRUPO_ETNICO = null;
							} else {
	                         		
        	row24.GRUPO_ETNICO = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 26, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 27) {
								row24.NSOCIOECONOMICO = null;
							} else {
	                         		
        	row24.NSOCIOECONOMICO = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 27, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 28) {
								row24.TVIVIENDA = null;
							} else {
	                         		
        	row24.TVIVIENDA = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 28, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 29) {
								row24.NEDUCATIVOS = null;
							} else {
	                         		
        	row24.NEDUCATIVOS = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 29, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 30) {
								row24.CODIGO_ESTABLECIMIENTO = null;
							} else {
	                         		
        	row24.CODIGO_ESTABLECIMIENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 30, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 31) {
								row24.ESTABLECIMIENTO_ADSCRITO = null;
							} else {
	                         		
        	row24.ESTABLECIMIENTO_ADSCRITO = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 31, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 32) {
								row24.ENTIDAD_APORTANTE = null;
							} else {
	                         		
        	row24.ENTIDAD_APORTANTE = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 32, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 33) {
								row24.CODIGO_GRDMILITAR = null;
							} else {
	                         		
        	row24.CODIGO_GRDMILITAR = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 33, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 34) {
								row24.SIGLA_GRDMILITAR = null;
							} else {
	                         		
        	row24.SIGLA_GRDMILITAR = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 34, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 35) {
								row24.FUERZA_MILITAR = null;
							} else {
	                         		
        	row24.FUERZA_MILITAR = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 35, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 36) {
								row24.CODIGO_UMILITAR = null;
							} else {
	                         		
        	row24.CODIGO_UMILITAR = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 36, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 37) {
								row24.UNIDAD_MILITAR = null;
							} else {
	                         		
        	row24.UNIDAD_MILITAR = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 37, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 38) {
								row24.TIPO_DE_VINCULACION = null;
							} else {
	                         		
        	row24.TIPO_DE_VINCULACION = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 38, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 39) {
								row24.SIGLA_ESTADO = null;
							} else {
	                         		
        	row24.SIGLA_ESTADO = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 39, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 40) {
								row24.MOTIVOSESTADO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(40) != null) {
						row24.MOTIVOSESTADO_ID = rs_tOracleInput_4.getBigDecimal(40);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 41) {
								row24.MOTIVO = null;
							} else {
	                         		
        	row24.MOTIVO = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 41, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 42) {
								row24.FECHA_CADUCIDAD = null;
							} else {
	                         		
        	row24.FECHA_CADUCIDAD = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 42, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 43) {
								row24.FECHA_VINCULACION = null;
							} else {
	                         		
        	row24.FECHA_VINCULACION = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 43, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 44) {
								row24.ID_UNICO_PERSONA = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(44) != null) {
						row24.ID_UNICO_PERSONA = rs_tOracleInput_4.getBigDecimal(44);
					} else {
				
						row24.ID_UNICO_PERSONA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 45) {
								row24.ID_UNICO_AFILIADO = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(45) != null) {
						row24.ID_UNICO_AFILIADO = rs_tOracleInput_4.getBigDecimal(45);
					} else {
				
						row24.ID_UNICO_AFILIADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 46) {
								row24.OBSERVACIONES = null;
							} else {
	                         		
        	row24.OBSERVACIONES = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 46, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 47) {
								row24.USUARIOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(47) != null) {
						row24.USUARIOS_ID = rs_tOracleInput_4.getBigDecimal(47);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 48) {
								row24.RNOVEDADES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(48) != null) {
						row24.RNOVEDADES_ID = rs_tOracleInput_4.getBigDecimal(48);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 49) {
								row24.TIPO_AFILIADO = null;
							} else {
	                         		
        	row24.TIPO_AFILIADO = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 49, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 50) {
								row24.ESTADO_ENTIDAD = null;
							} else {
	                         		
        	row24.ESTADO_ENTIDAD = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 50, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 51) {
								row24.ENTIDAD_PRINCIPAL = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(51) != null) {
						row24.ENTIDAD_PRINCIPAL = rs_tOracleInput_4.getInt(51);
					} else {
				
						row24.ENTIDAD_PRINCIPAL = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 52) {
								row24.SIGLA_REGIMEN = null;
							} else {
	                         		
        	row24.SIGLA_REGIMEN = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 52, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 53) {
								row24.ID_UNICO_ENTIDAD = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(53) != null) {
						row24.ID_UNICO_ENTIDAD = rs_tOracleInput_4.getBigDecimal(53);
					} else {
				
						row24.ID_UNICO_ENTIDAD = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 54) {
								row24.CORREO_ELECTRONICO = null;
							} else {
	                         		
        	row24.CORREO_ELECTRONICO = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 54, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 55) {
								row24.CELULAR = null;
							} else {
	                         		
        	row24.CELULAR = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 55, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 56) {
								row24.FECHA_DEFUNCION = null;
							} else {
	                         		
        	row24.FECHA_DEFUNCION = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 56, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 57) {
								row24.PLANAFILIACION = null;
							} else {
	                         		
        	row24.PLANAFILIACION = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 57, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 58) {
								row24.ID_BDUA = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(58) != null) {
						row24.ID_BDUA = rs_tOracleInput_4.getBigDecimal(58);
					} else {
				
						row24.ID_BDUA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 59) {
								row24.MOTIVO_CAMBIO_ESTADO = null;
							} else {
	                         		
        	row24.MOTIVO_CAMBIO_ESTADO = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 59, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 60) {
								row24.MOTIVO_CAMBIO_ESM = null;
							} else {
	                         		
        	row24.MOTIVO_CAMBIO_ESM = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 60, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 61) {
								row24.DISCAPACIDAD = null;
							} else {
	                         		
        	row24.DISCAPACIDAD = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 61, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 62) {
								row24.POBLACION_ESPECIAL = null;
							} else {
	                         		
        	row24.POBLACION_ESPECIAL = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 62, false);
		                    }
					




 



/**
 * [tOracleInput_4 begin ] stop
 */
	
	/**
	 * [tOracleInput_4 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 


	tos_count_tOracleInput_4++;

/**
 * [tOracleInput_4 main ] stop
 */
	
	/**
	 * [tOracleInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row24"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
						row25Struct row25 = null;
					
						row64Struct row64 = null;
					
						row65Struct row65 = null;
					
						row66Struct row66 = null;
					
						row67Struct row67 = null;
					
						row68Struct row68 = null;
					
						row69Struct row69 = null;
					
						row70Struct row70 = null;
					
						row71Struct row71 = null;
					
						row72Struct row72 = null;
					
						row73Struct row73 = null;
					
						row74Struct row74 = null;
					
						row75Struct row75 = null;
					
						row76Struct row76 = null;
					
						row77Struct row77 = null;
					
						row79Struct row79 = null;
					
						row80Struct row80 = null;
					
						row81Struct row81 = null;
					
						row82Struct row82 = null;
					
						row46Struct row46 = null;
					
						row127Struct row127 = null;
					
						row152Struct row152 = null;
					
						row154Struct row154 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row25" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow25 = false;
       		  	    	
       		  	    	
 							row25Struct row25ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row25HashKey.SIGLA = row24.SIGLA_DOCUMENTO ;
                        		    		

								
		                        	row25HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row25.lookup( row25HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row25 != null && tHash_Lookup_row25.getCount(row25HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row25' and it contains more one result from keys :  row25.SIGLA = '" + row25HashKey.SIGLA + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row25Struct fromLookup_row25 = null;
							row25 = row25Default;
										 
							
								 
							
							
								if (tHash_Lookup_row25 !=null && tHash_Lookup_row25.hasNext()) { // G 099
								
							
								
								fromLookup_row25 = tHash_Lookup_row25.next();

							
							
								} // G 099
							
							

							if(fromLookup_row25 != null) {
								row25 = fromLookup_row25;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row64" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow64 = false;
       		  	    	
       		  	    	
 							row64Struct row64ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row64HashKey.SIGLA = row24.SEXO ;
                        		    		

								
		                        	row64HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row64.lookup( row64HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row64 != null && tHash_Lookup_row64.getCount(row64HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row64' and it contains more one result from keys :  row64.SIGLA = '" + row64HashKey.SIGLA + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row64Struct fromLookup_row64 = null;
							row64 = row64Default;
										 
							
								 
							
							
								if (tHash_Lookup_row64 !=null && tHash_Lookup_row64.hasNext()) { // G 099
								
							
								
								fromLookup_row64 = tHash_Lookup_row64.next();

							
							
								} // G 099
							
							

							if(fromLookup_row64 != null) {
								row64 = fromLookup_row64;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row65" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow65 = false;
       		  	    	
       		  	    	
 							row65Struct row65ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row65HashKey.NOMBRE = row24.GRUPO_SANGUINEO+row24.FACTOR_RH ;
                        		    		

								
		                        	row65HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row65.lookup( row65HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row65 != null && tHash_Lookup_row65.getCount(row65HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row65' and it contains more one result from keys :  row65.NOMBRE = '" + row65HashKey.NOMBRE + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row65Struct fromLookup_row65 = null;
							row65 = row65Default;
										 
							
								 
							
							
								if (tHash_Lookup_row65 !=null && tHash_Lookup_row65.hasNext()) { // G 099
								
							
								
								fromLookup_row65 = tHash_Lookup_row65.next();

							
							
								} // G 099
							
							

							if(fromLookup_row65 != null) {
								row65 = fromLookup_row65;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row66" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow66 = false;
       		  	    	
       		  	    	
 							row66Struct row66ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row66HashKey.SIGLA = row24.OCUPACION;
                        		    		

								
		                        	row66HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row66.lookup( row66HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row66 != null && tHash_Lookup_row66.getCount(row66HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row66' and it contains more one result from keys :  row66.SIGLA = '" + row66HashKey.SIGLA + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row66Struct fromLookup_row66 = null;
							row66 = row66Default;
										 
							
								 
							
							
								if (tHash_Lookup_row66 !=null && tHash_Lookup_row66.hasNext()) { // G 099
								
							
								
								fromLookup_row66 = tHash_Lookup_row66.next();

							
							
								} // G 099
							
							

							if(fromLookup_row66 != null) {
								row66 = fromLookup_row66;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row67" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow67 = false;
       		  	    	
       		  	    	
 							row67Struct row67ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row67HashKey.CODIGO = row24.GRUPO_ETNICO ;
                        		    		

								
		                        	row67HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row67.lookup( row67HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row67 != null && tHash_Lookup_row67.getCount(row67HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row67' and it contains more one result from keys :  row67.CODIGO = '" + row67HashKey.CODIGO + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row67Struct fromLookup_row67 = null;
							row67 = row67Default;
										 
							
								 
							
							
								if (tHash_Lookup_row67 !=null && tHash_Lookup_row67.hasNext()) { // G 099
								
							
								
								fromLookup_row67 = tHash_Lookup_row67.next();

							
							
								} // G 099
							
							

							if(fromLookup_row67 != null) {
								row67 = fromLookup_row67;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row68" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow68 = false;
       		  	    	
       		  	    	
 							row68Struct row68ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row68HashKey.NOMBRE = row24.NSOCIOECONOMICO ;
                        		    		

								
		                        	row68HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row68.lookup( row68HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row68 != null && tHash_Lookup_row68.getCount(row68HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row68' and it contains more one result from keys :  row68.NOMBRE = '" + row68HashKey.NOMBRE + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row68Struct fromLookup_row68 = null;
							row68 = row68Default;
										 
							
								 
							
							
								if (tHash_Lookup_row68 !=null && tHash_Lookup_row68.hasNext()) { // G 099
								
							
								
								fromLookup_row68 = tHash_Lookup_row68.next();

							
							
								} // G 099
							
							

							if(fromLookup_row68 != null) {
								row68 = fromLookup_row68;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row69" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow69 = false;
       		  	    	
       		  	    	
 							row69Struct row69ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row69HashKey.SIGLA = row24.TVIVIENDA ;
                        		    		

								
		                        	row69HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row69.lookup( row69HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row69 != null && tHash_Lookup_row69.getCount(row69HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row69' and it contains more one result from keys :  row69.SIGLA = '" + row69HashKey.SIGLA + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row69Struct fromLookup_row69 = null;
							row69 = row69Default;
										 
							
								 
							
							
								if (tHash_Lookup_row69 !=null && tHash_Lookup_row69.hasNext()) { // G 099
								
							
								
								fromLookup_row69 = tHash_Lookup_row69.next();

							
							
								} // G 099
							
							

							if(fromLookup_row69 != null) {
								row69 = fromLookup_row69;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row70" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow70 = false;
       		  	    	
       		  	    	
 							row70Struct row70ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row70HashKey.SIGLA = row24.NEDUCATIVOS ;
                        		    		

								
		                        	row70HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row70.lookup( row70HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row70 != null && tHash_Lookup_row70.getCount(row70HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row70' and it contains more one result from keys :  row70.SIGLA = '" + row70HashKey.SIGLA + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row70Struct fromLookup_row70 = null;
							row70 = row70Default;
										 
							
								 
							
							
								if (tHash_Lookup_row70 !=null && tHash_Lookup_row70.hasNext()) { // G 099
								
							
								
								fromLookup_row70 = tHash_Lookup_row70.next();

							
							
								} // G 099
							
							

							if(fromLookup_row70 != null) {
								row70 = fromLookup_row70;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row71" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow71 = false;
       		  	    	
       		  	    	
 							row71Struct row71ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row71HashKey.SIGLA = row24.ESTABLECIMIENTO_ADSCRITO ;
                        		    		
                        		    		    row71HashKey.CODIGO = row24.CODIGO_ESTABLECIMIENTO ;
                        		    		

								
		                        	row71HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row71.lookup( row71HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row71 != null && tHash_Lookup_row71.getCount(row71HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row71' and it contains more one result from keys :  row71.SIGLA = '" + row71HashKey.SIGLA + "', row71.CODIGO = '" + row71HashKey.CODIGO + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row71Struct fromLookup_row71 = null;
							row71 = row71Default;
										 
							
								 
							
							
								if (tHash_Lookup_row71 !=null && tHash_Lookup_row71.hasNext()) { // G 099
								
							
								
								fromLookup_row71 = tHash_Lookup_row71.next();

							
							
								} // G 099
							
							

							if(fromLookup_row71 != null) {
								row71 = fromLookup_row71;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row72" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow72 = false;
       		  	    	
       		  	    	
 							row72Struct row72ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row72HashKey.DOCUMENTO = row24.ENTIDAD_APORTANTE ;
                        		    		

								
		                        	row72HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row72.lookup( row72HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row72 != null && tHash_Lookup_row72.getCount(row72HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row72' and it contains more one result from keys :  row72.DOCUMENTO = '" + row72HashKey.DOCUMENTO + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row72Struct fromLookup_row72 = null;
							row72 = row72Default;
										 
							
								 
							
							
								if (tHash_Lookup_row72 !=null && tHash_Lookup_row72.hasNext()) { // G 099
								
							
								
								fromLookup_row72 = tHash_Lookup_row72.next();

							
							
								} // G 099
							
							

							if(fromLookup_row72 != null) {
								row72 = fromLookup_row72;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row73" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow73 = false;
       		  	    	
       		  	    	
 							row73Struct row73ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row73HashKey.SIGLA = row24.SIGLA_ESTADO ;
                        		    		

								
		                        	row73HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row73.lookup( row73HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row73 != null && tHash_Lookup_row73.getCount(row73HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row73' and it contains more one result from keys :  row73.SIGLA = '" + row73HashKey.SIGLA + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row73Struct fromLookup_row73 = null;
							row73 = row73Default;
										 
							
								 
							
							
								if (tHash_Lookup_row73 !=null && tHash_Lookup_row73.hasNext()) { // G 099
								
							
								
								fromLookup_row73 = tHash_Lookup_row73.next();

							
							
								} // G 099
							
							

							if(fromLookup_row73 != null) {
								row73 = fromLookup_row73;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row74" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow74 = false;
       		  	    	
       		  	    	
 							row74Struct row74ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row74HashKey.SIGLA = row24.TIPO_DE_VINCULACION ;
                        		    		

								
		                        	row74HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row74.lookup( row74HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row74 != null && tHash_Lookup_row74.getCount(row74HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row74' and it contains more one result from keys :  row74.SIGLA = '" + row74HashKey.SIGLA + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row74Struct fromLookup_row74 = null;
							row74 = row74Default;
										 
							
								 
							
							
								if (tHash_Lookup_row74 !=null && tHash_Lookup_row74.hasNext()) { // G 099
								
							
								
								fromLookup_row74 = tHash_Lookup_row74.next();

							
							
								} // G 099
							
							

							if(fromLookup_row74 != null) {
								row74 = fromLookup_row74;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row75" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow75 = false;
       		  	    	
       		  	    	
 							row75Struct row75ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row75HashKey.SIGLA = row24.UNIDAD_MILITAR ;
                        		    		
                        		    		    row75HashKey.CODIGO = row24.CODIGO_UMILITAR ;
                        		    		

								
		                        	row75HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row75.lookup( row75HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row75 != null && tHash_Lookup_row75.getCount(row75HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row75' and it contains more one result from keys :  row75.SIGLA = '" + row75HashKey.SIGLA + "', row75.CODIGO = '" + row75HashKey.CODIGO + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row75Struct fromLookup_row75 = null;
							row75 = row75Default;
										 
							
								 
							
							
								if (tHash_Lookup_row75 !=null && tHash_Lookup_row75.hasNext()) { // G 099
								
							
								
								fromLookup_row75 = tHash_Lookup_row75.next();

							
							
								} // G 099
							
							

							if(fromLookup_row75 != null) {
								row75 = fromLookup_row75;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row76" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow76 = false;
       		  	    	
       		  	    	
 							row76Struct row76ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row76HashKey.SIGLA = row24.FUERZA_MILITAR ;
                        		    		

								
		                        	row76HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row76.lookup( row76HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row76 != null && tHash_Lookup_row76.getCount(row76HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row76' and it contains more one result from keys :  row76.SIGLA = '" + row76HashKey.SIGLA + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row76Struct fromLookup_row76 = null;
							row76 = row76Default;
										 
							
								 
							
							
								if (tHash_Lookup_row76 !=null && tHash_Lookup_row76.hasNext()) { // G 099
								
							
								
								fromLookup_row76 = tHash_Lookup_row76.next();

							
							
								} // G 099
							
							

							if(fromLookup_row76 != null) {
								row76 = fromLookup_row76;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row77" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow77 = false;
       		  	    	
       		  	    	
 							row77Struct row77ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row77HashKey.SIGLA = row24.SIGLA_GRDMILITAR ;
                        		    		
                        		    		    row77HashKey.CODIGO = row24.CODIGO_GRDMILITAR ;
                        		    		
                        		    		    row77HashKey.FUERZA_ID = row76.ID;
                        		    		

								
		                        	row77HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row77.lookup( row77HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row77 != null && tHash_Lookup_row77.getCount(row77HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row77' and it contains more one result from keys :  row77.SIGLA = '" + row77HashKey.SIGLA + "', row77.CODIGO = '" + row77HashKey.CODIGO + "', row77.FUERZA_ID = '" + row77HashKey.FUERZA_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row77Struct fromLookup_row77 = null;
							row77 = row77Default;
										 
							
								 
							
							
								if (tHash_Lookup_row77 !=null && tHash_Lookup_row77.hasNext()) { // G 099
								
							
								
								fromLookup_row77 = tHash_Lookup_row77.next();

							
							
								} // G 099
							
							

							if(fromLookup_row77 != null) {
								row77 = fromLookup_row77;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row79" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow79 = false;
       		  	    	
       		  	    	
 							row79Struct row79ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row79HashKey.CODPAIS = row24.PAIS_RESIDENCIA ;
                        		    		
                        		    		    row79HashKey.CODDEPTO = row24.DEPARTAMENTO_RESIDENCIA ;
                        		    		
                        		    		    row79HashKey.CODMCPIO = row24.MUNICIPIO_RESIDENCIA ;
                        		    		

								
		                        	row79HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row79.lookup( row79HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row79 != null && tHash_Lookup_row79.getCount(row79HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row79' and it contains more one result from keys :  row79.CODPAIS = '" + row79HashKey.CODPAIS + "', row79.CODDEPTO = '" + row79HashKey.CODDEPTO + "', row79.CODMCPIO = '" + row79HashKey.CODMCPIO + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row79Struct fromLookup_row79 = null;
							row79 = row79Default;
										 
							
								 
							
							
								if (tHash_Lookup_row79 !=null && tHash_Lookup_row79.hasNext()) { // G 099
								
							
								
								fromLookup_row79 = tHash_Lookup_row79.next();

							
							
								} // G 099
							
							

							if(fromLookup_row79 != null) {
								row79 = fromLookup_row79;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row80" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow80 = false;
       		  	    	
       		  	    	
 							row80Struct row80ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row80HashKey.CODIGO = row24.LOCALIDAD_RESIDENCIA;
                        		    		
                        		    		    row80HashKey.DIVIPOLA_ID = row79.ID;
                        		    		

								
		                        	row80HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row80.lookup( row80HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row80 != null && tHash_Lookup_row80.getCount(row80HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row80' and it contains more one result from keys :  row80.CODIGO = '" + row80HashKey.CODIGO + "', row80.DIVIPOLA_ID = '" + row80HashKey.DIVIPOLA_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row80Struct fromLookup_row80 = null;
							row80 = row80Default;
										 
							
								 
							
							
								if (tHash_Lookup_row80 !=null && tHash_Lookup_row80.hasNext()) { // G 099
								
							
								
								fromLookup_row80 = tHash_Lookup_row80.next();

							
							
								} // G 099
							
							

							if(fromLookup_row80 != null) {
								row80 = fromLookup_row80;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row81" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow81 = false;
       		  	    	
       		  	    	
 							row81Struct row81ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row81HashKey.CODPAIS = row24.PAIS_NACIMIENTO ;
                        		    		
                        		    		    row81HashKey.CODDEPTO = row24.DEPARTAMENTO_NACIMIENTO ;
                        		    		
                        		    		    row81HashKey.CODMCPIO = row24.MUNICIPIO_NACIMIENTO ;
                        		    		

								
		                        	row81HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row81.lookup( row81HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row81 != null && tHash_Lookup_row81.getCount(row81HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row81' and it contains more one result from keys :  row81.CODPAIS = '" + row81HashKey.CODPAIS + "', row81.CODDEPTO = '" + row81HashKey.CODDEPTO + "', row81.CODMCPIO = '" + row81HashKey.CODMCPIO + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row81Struct fromLookup_row81 = null;
							row81 = row81Default;
										 
							
								 
							
							
								if (tHash_Lookup_row81 !=null && tHash_Lookup_row81.hasNext()) { // G 099
								
							
								
								fromLookup_row81 = tHash_Lookup_row81.next();

							
							
								} // G 099
							
							

							if(fromLookup_row81 != null) {
								row81 = fromLookup_row81;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row82" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow82 = false;
       		  	    	
       		  	    	
 							row82Struct row82ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row82HashKey.CODPAIS = row24.PAIS_EXP_DOCUMENTO ;
                        		    		
                        		    		    row82HashKey.CODDEPTO = row24.DEPTO_EXP_DOCUMENTO ;
                        		    		
                        		    		    row82HashKey.CODMCPIO = row24.MUNICIPIO_EXP_DOCUMENTO ;
                        		    		

								
		                        	row82HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row82.lookup( row82HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row82 != null && tHash_Lookup_row82.getCount(row82HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row82' and it contains more one result from keys :  row82.CODPAIS = '" + row82HashKey.CODPAIS + "', row82.CODDEPTO = '" + row82HashKey.CODDEPTO + "', row82.CODMCPIO = '" + row82HashKey.CODMCPIO + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row82Struct fromLookup_row82 = null;
							row82 = row82Default;
										 
							
								 
							
							
								if (tHash_Lookup_row82 !=null && tHash_Lookup_row82.hasNext()) { // G 099
								
							
								
								fromLookup_row82 = tHash_Lookup_row82.next();

							
							
								} // G 099
							
							

							if(fromLookup_row82 != null) {
								row82 = fromLookup_row82;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row46" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow46 = false;
       		  	    	
       		  	    	
 							row46Struct row46ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row46HashKey.SIGLA = row24.SIGLA_REGIMEN;
                        		    		

								
		                        	row46HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row46.lookup( row46HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row46 != null && tHash_Lookup_row46.getCount(row46HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row46' and it contains more one result from keys :  row46.SIGLA = '" + row46HashKey.SIGLA + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row46Struct fromLookup_row46 = null;
							row46 = row46Default;
										 
							
								 
							
							
								if (tHash_Lookup_row46 !=null && tHash_Lookup_row46.hasNext()) { // G 099
								
							
								
								fromLookup_row46 = tHash_Lookup_row46.next();

							
							
								} // G 099
							
							

							if(fromLookup_row46 != null) {
								row46 = fromLookup_row46;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row127" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow127 = false;
       		  	    	
       		  	    	
 							row127Struct row127ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row127HashKey.DESCRIPCION = row24.PLANAFILIACION;
                        		    		

								
		                        	row127HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row127.lookup( row127HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row127 != null && tHash_Lookup_row127.getCount(row127HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row127' and it contains more one result from keys :  row127.DESCRIPCION = '" + row127HashKey.DESCRIPCION + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row127Struct fromLookup_row127 = null;
							row127 = row127Default;
										 
							
								 
							
							
								if (tHash_Lookup_row127 !=null && tHash_Lookup_row127.hasNext()) { // G 099
								
							
								
								fromLookup_row127 = tHash_Lookup_row127.next();

							
							
								} // G 099
							
							

							if(fromLookup_row127 != null) {
								row127 = fromLookup_row127;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row152" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow152 = false;
       		  	    	
       		  	    	
 							row152Struct row152ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row152HashKey.SIGLA = row24.DISCAPACIDAD;
                        		    		

								
		                        	row152HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row152.lookup( row152HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row152 != null && tHash_Lookup_row152.getCount(row152HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row152' and it contains more one result from keys :  row152.SIGLA = '" + row152HashKey.SIGLA + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row152Struct fromLookup_row152 = null;
							row152 = row152Default;
										 
							
								 
							
							
								if (tHash_Lookup_row152 !=null && tHash_Lookup_row152.hasNext()) { // G 099
								
							
								
								fromLookup_row152 = tHash_Lookup_row152.next();

							
							
								} // G 099
							
							

							if(fromLookup_row152 != null) {
								row152 = fromLookup_row152;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row154" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow154 = false;
       		  	    	
       		  	    	
 							row154Struct row154ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row154HashKey.SIGLA = row24.POBLACION_ESPECIAL;
                        		    		

								
		                        	row154HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row154.lookup( row154HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row154 != null && tHash_Lookup_row154.getCount(row154HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row154' and it contains more one result from keys :  row154.SIGLA = '" + row154HashKey.SIGLA + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row154Struct fromLookup_row154 = null;
							row154 = row154Default;
										 
							
								 
							
							
								if (tHash_Lookup_row154 !=null && tHash_Lookup_row154.hasNext()) { // G 099
								
							
								
								fromLookup_row154 = tHash_Lookup_row154.next();

							
							
								} // G 099
							
							

							if(fromLookup_row154 != null) {
								row154 = fromLookup_row154;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

Errores = null;
Actualizables = null;

boolean rejected_tMap_2 = true;

// # Output table : 'Errores'
// # Filter conditions 
if( 

row24.PRIMER_NOMBRE == null||
row24.PRIMER_APELLIDO == null||
row24.ID_UNICO_PERSONA == null||
row24.ID_UNICO_AFILIADO == null||
row24.ID_UNICO_ENTIDAD == null||
row25.ID == 0||
row24.DOCUMENTO == null||
((row24.FECHA_EXPEDICION_DOCUMENTO == null?0:(row24.FECHA_EXPEDICION_DOCUMENTO.equals("Invalida")?1:0)) == 1)||
/*((row24.FECHA_EXPEDICION_DOCUMENTO != null?(row24.FECHA_EXPEDICION_DOCUMENTO.equals("Invalida")?1:0):0) == 1)||*/
row24.FECHA_NACIMIENTO == null||
((row24.FECHA_NACIMIENTO != null?(row24.FECHA_NACIMIENTO.equals("Invalida")?1:0):0) == 1)||
row24.FECHA_VINCULACION == null||
((row24.FECHA_VINCULACION != null?(row24.FECHA_VINCULACION.equals("Invalida")?1:0):0) == 1)||
((row24.FECHA_CADUCIDAD != null?(row24.FECHA_CADUCIDAD.equals("Invalida")?1:0):0) == 1)

 ) {
rejected_tMap_2 = false;
Errores_tmp.TDOCUMENTOS_ID = row25.ID;
Errores_tmp.DOCUMENTO = row24.DOCUMENTO;
Errores_tmp.MENSAJE = null;
Errores_tmp.PRIMER_NOMBRE = row24.PRIMER_NOMBRE;
Errores_tmp.PRIMER_APELLIDO = row24.PRIMER_APELLIDO;
Errores_tmp.ID_UNICO_PERSONA = row24.ID_UNICO_PERSONA;
Errores_tmp.ID_UNICO_AFILIADO = row24.ID_UNICO_AFILIADO;
Errores_tmp.FECHA_CADUCIDAD = row24.FECHA_CADUCIDAD;
Errores_tmp.FECHA_NACIMIENTO = row24.FECHA_NACIMIENTO;
Errores_tmp.FECHA_VINCULACION = row24.FECHA_VINCULACION;
Errores_tmp.ID_UNICO_ENTIDAD = row24.ID_UNICO_ENTIDAD ;
Errores_tmp.FECHA_EXPEDICION_DOCUMENTO = row24.FECHA_EXPEDICION_DOCUMENTO ;
Errores = Errores_tmp;
} // closing filter/reject
// ###### START REJECTS ##### 

// # Output reject table : 'Actualizables'
// # Filter conditions 
if( rejected_tMap_2 ) {
Actualizables_tmp.PRIMER_NOMBRE = row24.PRIMER_NOMBRE;
Actualizables_tmp.SEGUNDO_NOMBRE = row24.SEGUNDO_NOMBRE;
Actualizables_tmp.PRIMER_APELLIDO = row24.PRIMER_APELLIDO;
Actualizables_tmp.SEGUNDO_APELLIDO = row24.SEGUNDO_APELLIDO;
Actualizables_tmp.TDOCUMENTOS_ID = row25.ID;
Actualizables_tmp.DOCUMENTO = row24.DOCUMENTO;
Actualizables_tmp.LUGAR_EXP_DOC = row82.ID;
Actualizables_tmp.FECHA_EXPEDICION_DOCUMENTO = row24.FECHA_EXPEDICION_DOCUMENTO == null?null:(row24.FECHA_EXPEDICION_DOCUMENTO.equals("")?null:new SimpleDateFormat("dd/MM/yyyy").parse(row24.FECHA_EXPEDICION_DOCUMENTO)) ;
Actualizables_tmp.FECHA_NACIMIENTO = (!row24.FECHA_NACIMIENTO.equals("") && row24.FECHA_NACIMIENTO != null)?
new SimpleDateFormat("dd/MM/yyyy").parse(row24.FECHA_NACIMIENTO): null ;
Actualizables_tmp.LUGAR_NACIMIENTO = row81.ID;
Actualizables_tmp.SEXOS_ID = row64.ID;
Actualizables_tmp.DIRECCION = row24.DIRECCION;
Actualizables_tmp.TELEFONO = row24.TELEFONO;
Actualizables_tmp.LUGAR_RESIDENCIA = row79.ID;
Actualizables_tmp.LOCALIDADES_ID = row80.ID;
Actualizables_tmp.GSANGUINEOS_ID = row65.ID;
Actualizables_tmp.ESTATURA = row24.ESTATURA != null? Double.parseDouble(row24.ESTATURA): null ;
Actualizables_tmp.OCUPACIONES_ID = row66.ID;
Actualizables_tmp.ETNICAS_ID = row67.ID;
Actualizables_tmp.NSOCIOECONOMICOS_ID = row68.ID;
Actualizables_tmp.TVIVIENDA_ID = row69.ID;
Actualizables_tmp.NEDUCATIVOS_ID = row70.ID;
Actualizables_tmp.ESMADSCRITO = row71.ID;
Actualizables_tmp.OBSERVACIONES = row24.OBSERVACIONES;
Actualizables_tmp.ENTAPORTANTES_ID = row72.ID;
Actualizables_tmp.GRDMILITARES_ID = row77.ID;
Actualizables_tmp.FUERZAS_ID = row76.ID;
Actualizables_tmp.UMILITARES_ID = row75.ID;
Actualizables_tmp.TVINCULACIONES_ID = row74.ID;
Actualizables_tmp.USUARIOS_ID = row24.USUARIOS_ID;
Actualizables_tmp.ESTADO = row24.SIGLA_ESTADO;
Actualizables_tmp.ESTADOS_ID = row73.ID;
Actualizables_tmp.MOTIVOSESTADO_ID = row24.MOTIVOSESTADO_ID ;
Actualizables_tmp.MOTIVO = row24.MOTIVO;
Actualizables_tmp.RNOVEDADES_ID = row24.RNOVEDADES_ID;
Actualizables_tmp.FECHA_CADUCIDAD = row24.FECHA_CADUCIDAD != null?
new SimpleDateFormat("dd/MM/yyyy").parse(row24.FECHA_CADUCIDAD): null ;
Actualizables_tmp.FECHA_VINCULACION = (!row24.FECHA_VINCULACION.equals("") && row24.FECHA_VINCULACION != null)?
new SimpleDateFormat("dd/MM/yyyy").parse(row24.FECHA_VINCULACION): null ;
Actualizables_tmp.PERSONAS_ID = row24.ID_UNICO_PERSONA;
Actualizables_tmp.AFILIADO_ID = row24.ID_UNICO_AFILIADO;
Actualizables_tmp.TIPO_AFILIADO = row24.TIPO_AFILIADO;
Actualizables_tmp.ESTADO_ENTIDAD = row24.ESTADO_ENTIDAD;
Actualizables_tmp.ENTIDAD_PRINCIPAL = row24.ENTIDAD_PRINCIPAL != null ? ((row24.ENTIDAD_PRINCIPAL == 1 || row24.ENTIDAD_PRINCIPAL == 2)? row24.ENTIDAD_PRINCIPAL : null) : null ;
Actualizables_tmp.TREGIMEN_ID = row46.ID;
Actualizables_tmp.ID_UNICO_ENTIDAD = row24.ID_UNICO_ENTIDAD;
Actualizables_tmp.CORREO_ELECTRONICO = row24.CORREO_ELECTRONICO ;
Actualizables_tmp.CELULAR = row24.CELULAR ;
Actualizables_tmp.FECHA_DEFUNCION =  (row24.FECHA_DEFUNCION != null && !row24.FECHA_DEFUNCION.equals(""))? new SimpleDateFormat("dd/MM/yyyy").parse(row24.FECHA_DEFUNCION): null;
Actualizables_tmp.PLANAFILIACIONES_ID = (row127.CODIGO == 1)?row127.ID:0 ;
Actualizables_tmp.ID_BDUA = row24.ID_BDUA ;
Actualizables_tmp.MOTIVO_CAMBIO_ESTADO = row24.MOTIVO_CAMBIO_ESTADO ;
Actualizables_tmp.MOTIVO_CAMBIO_ESM = row24.MOTIVO_CAMBIO_ESM ;
Actualizables_tmp.TDISCAPACIDADES_ID = row152.ID;
Actualizables_tmp.PESPECIAL_ID = row154.ID ;
Actualizables = Actualizables_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "Errores"
if(Errores != null) { 



	
	/**
	 * [tJavaRow_8 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Errores"
						
						);
					}
					

    //Code generate according to input schema and output schema
row26.TDOCUMENTOS_ID = Errores.TDOCUMENTOS_ID;
row26.DOCUMENTO = Errores.DOCUMENTO;

//Validaciones de los errores encontrados.
context.mensaje = null;

if (Errores.PRIMER_NOMBRE == null){ context.mensaje = "El campo primer nombre es obligatorio para identificar la persona";}   
   

if (Errores.PRIMER_APELLIDO == null){
   if (context.mensaje.equals("")){
   context.mensaje = "El campo primer apellido es obligatorio para identificar la persona";}
   else {
   context.mensaje = context.mensaje +" - El campo primer apellido es obligatorio para identificar la persona";
   }
   }    
     
if (Errores.DOCUMENTO == null){
   if (context.mensaje == null){
   context.mensaje = "El campo documento es obligatorio para identificar la persona";}
   else {
   context.mensaje = context.mensaje +" - El campo documento es obligatorio para identificar la persona";
   }
   }    

if (Errores.TDOCUMENTOS_ID == 0){
   if (context.mensaje == null){
   context.mensaje = "Tipo de documento no encontrado";}
   else {
   context.mensaje = context.mensaje +" - Tipo de documento no encontrado";
   }
   }  

if(Errores.FECHA_EXPEDICION_DOCUMENTO.equals("Invalida")){
   if (context.mensaje == null){
       context.mensaje = "La fecha de expedición del documento no es invalida";}
   else {
       context.mensaje = context.mensaje +" - La fecha de expedición del documento no es invalida";
   }
}
   
if (Errores.FECHA_NACIMIENTO == null){
   if (context.mensaje == null){
   context.mensaje = "El campo fecha de nacimiento es obligatorio para identificar la persona";}
   else {
   context.mensaje = context.mensaje +" - El campo fecha de nacimiento es obligatorio para identificar la persona";
   }
   }else{
   if(Errores.FECHA_NACIMIENTO.equals("Invalida")){
   if (context.mensaje == null){
   context.mensaje = "La fecha de nacimiento es invalida";}
   else {
   context.mensaje = context.mensaje +" - La fecha de nacimiento es invalida";
   }
   }   
   }               


if (Errores.FECHA_VINCULACION == null){
   if (context.mensaje == null){
   context.mensaje = "La fecha de vinculación se no puede ser nula";}
   else {
   context.mensaje = context.mensaje +" - La fecha de vinculación se no puede ser nula";
   }
   }else{
   if(Errores.FECHA_VINCULACION.equals("Invalida")){
   if (context.mensaje == null){
   context.mensaje = "La fecha de vinculación de la persona es invalida";}
   else {
   context.mensaje = context.mensaje +" - La fecha de vinculación de la persona es invalida";
   }
   }   
   }
   
   if(Errores.FECHA_CADUCIDAD != null){
   if (Errores.FECHA_CADUCIDAD.equals("Invalida")){
   if (context.mensaje == null){
   context.mensaje = "La fecha de caducidad es invalida";}
   else {
   context.mensaje = context.mensaje +" - La fecha de caducidad es invalida";
   }
   }
   }

if (Errores.ID_UNICO_AFILIADO == null){
   if (context.mensaje == null){
   context.mensaje = "El identificador único del afiliado se encuentra vacio";}
   else {
   context.mensaje = context.mensaje +" - El identificador único del afiliado se encuentra vacio";
   }
   }   
      
if (Errores.ID_UNICO_PERSONA == null){
   if (context.mensaje == null){
   context.mensaje = "El identificador único de la persona se encuentra vacio";}
   else {
   context.mensaje = context.mensaje +" - El identificador único de la persona se encuentra vacio";
   }
   } 
   
if (Errores.ID_UNICO_ENTIDAD == null){
   if (context.mensaje == null){
   context.mensaje = "El identificador único de la entidad se encuentra vacio";}
   else {
   context.mensaje = context.mensaje +" - El identificador único de la entidad se encuentra vacio";
   }
   } 
   
row26.MENSAJE = context.mensaje;

    nb_line_tJavaRow_8++;   

 


	tos_count_tJavaRow_8++;

/**
 * [tJavaRow_8 main ] stop
 */
	
	/**
	 * [tJavaRow_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	

 



/**
 * [tJavaRow_8 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row26"
						
						);
					}
					



        whetherReject_tOracleOutput_2 = false;
                        if(row26.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_2.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_2.setInt(1, row26.TDOCUMENTOS_ID);
}

                        if(row26.DOCUMENTO == null) {
pstmt_tOracleOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_2.setString(2, row26.DOCUMENTO);
}

                        if(row26.MENSAJE == null) {
pstmt_tOracleOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_2.setString(3, row26.MENSAJE);
}

                try {
                    nb_line_tOracleOutput_2++;
                    int processedCount_tOracleOutput_2 = pstmt_tOracleOutput_2.executeUpdate();
                    insertedCount_tOracleOutput_2 += processedCount_tOracleOutput_2;
                    rowsToCommitCount_tOracleOutput_2 += processedCount_tOracleOutput_2;
                } catch(java.lang.Exception e_tOracleOutput_2) {
globalMap.put("tOracleOutput_2_ERROR_MESSAGE",e_tOracleOutput_2.getMessage());
                    whetherReject_tOracleOutput_2 = true;
                            System.err.print(e_tOracleOutput_2.getMessage());
                }

 


	tos_count_tOracleOutput_2++;

/**
 * [tOracleOutput_2 main ] stop
 */
	
	/**
	 * [tOracleOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	

 



/**
 * [tOracleOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	

 



/**
 * [tOracleOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	

 



/**
 * [tJavaRow_8 process_data_end ] stop
 */

} // End of branch "Errores"




// Start of branch "Actualizables"
if(Actualizables != null) { 



	
	/**
	 * [tOracleOutput_3 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Actualizables"
						
						);
					}
					



        whetherReject_tOracleOutput_3 = false;
                        if(Actualizables.PRIMER_NOMBRE == null) {
pstmt_tOracleOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_3.setString(1, Actualizables.PRIMER_NOMBRE);
}

                        if(Actualizables.SEGUNDO_NOMBRE == null) {
pstmt_tOracleOutput_3.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_3.setString(2, Actualizables.SEGUNDO_NOMBRE);
}

                        if(Actualizables.PRIMER_APELLIDO == null) {
pstmt_tOracleOutput_3.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_3.setString(3, Actualizables.PRIMER_APELLIDO);
}

                        if(Actualizables.SEGUNDO_APELLIDO == null) {
pstmt_tOracleOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_3.setString(4, Actualizables.SEGUNDO_APELLIDO);
}

                        if(Actualizables.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_3.setNull(5, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(5, Actualizables.TDOCUMENTOS_ID);
}

                        if(Actualizables.DOCUMENTO == null) {
pstmt_tOracleOutput_3.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_3.setString(6, Actualizables.DOCUMENTO);
}

                        if(Actualizables.LUGAR_EXP_DOC == null) {
pstmt_tOracleOutput_3.setNull(7, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(7, Actualizables.LUGAR_EXP_DOC);
}

                        if(Actualizables.FECHA_EXPEDICION_DOCUMENTO != null) {
pstmt_tOracleOutput_3.setObject(8, new java.sql.Timestamp(Actualizables.FECHA_EXPEDICION_DOCUMENTO.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_3.setNull(8, java.sql.Types.DATE);
}

                        if(Actualizables.FECHA_NACIMIENTO != null) {
pstmt_tOracleOutput_3.setObject(9, new java.sql.Timestamp(Actualizables.FECHA_NACIMIENTO.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_3.setNull(9, java.sql.Types.DATE);
}

                        if(Actualizables.LUGAR_NACIMIENTO == null) {
pstmt_tOracleOutput_3.setNull(10, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(10, Actualizables.LUGAR_NACIMIENTO);
}

                        if(Actualizables.SEXOS_ID == null) {
pstmt_tOracleOutput_3.setNull(11, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(11, Actualizables.SEXOS_ID);
}

                        if(Actualizables.DIRECCION == null) {
pstmt_tOracleOutput_3.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_3.setString(12, Actualizables.DIRECCION);
}

                        if(Actualizables.TELEFONO == null) {
pstmt_tOracleOutput_3.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_3.setString(13, Actualizables.TELEFONO);
}

                        if(Actualizables.LUGAR_RESIDENCIA == null) {
pstmt_tOracleOutput_3.setNull(14, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(14, Actualizables.LUGAR_RESIDENCIA);
}

                        if(Actualizables.LOCALIDADES_ID == null) {
pstmt_tOracleOutput_3.setNull(15, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(15, Actualizables.LOCALIDADES_ID);
}

                        if(Actualizables.GSANGUINEOS_ID == null) {
pstmt_tOracleOutput_3.setNull(16, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(16, Actualizables.GSANGUINEOS_ID);
}

                        if(Actualizables.ESTATURA == null) {
pstmt_tOracleOutput_3.setNull(17, java.sql.Types.DOUBLE);
} else {pstmt_tOracleOutput_3.setDouble(17, Actualizables.ESTATURA);
}

                        if(Actualizables.OCUPACIONES_ID == null) {
pstmt_tOracleOutput_3.setNull(18, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(18, Actualizables.OCUPACIONES_ID);
}

                        if(Actualizables.ETNICAS_ID == null) {
pstmt_tOracleOutput_3.setNull(19, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(19, Actualizables.ETNICAS_ID);
}

                        if(Actualizables.NSOCIOECONOMICOS_ID == null) {
pstmt_tOracleOutput_3.setNull(20, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(20, Actualizables.NSOCIOECONOMICOS_ID);
}

                        if(Actualizables.TVIVIENDA_ID == null) {
pstmt_tOracleOutput_3.setNull(21, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(21, Actualizables.TVIVIENDA_ID);
}

                        if(Actualizables.NEDUCATIVOS_ID == null) {
pstmt_tOracleOutput_3.setNull(22, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(22, Actualizables.NEDUCATIVOS_ID);
}

                        if(Actualizables.ESMADSCRITO == null) {
pstmt_tOracleOutput_3.setNull(23, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(23, Actualizables.ESMADSCRITO);
}

                        if(Actualizables.OBSERVACIONES == null) {
pstmt_tOracleOutput_3.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_3.setString(24, Actualizables.OBSERVACIONES);
}

                        if(Actualizables.ENTAPORTANTES_ID == null) {
pstmt_tOracleOutput_3.setNull(25, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(25, Actualizables.ENTAPORTANTES_ID);
}

                        if(Actualizables.GRDMILITARES_ID == null) {
pstmt_tOracleOutput_3.setNull(26, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(26, Actualizables.GRDMILITARES_ID);
}

                        if(Actualizables.FUERZAS_ID == null) {
pstmt_tOracleOutput_3.setNull(27, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(27, Actualizables.FUERZAS_ID);
}

                        if(Actualizables.UMILITARES_ID == null) {
pstmt_tOracleOutput_3.setNull(28, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(28, Actualizables.UMILITARES_ID);
}

                        if(Actualizables.TVINCULACIONES_ID == null) {
pstmt_tOracleOutput_3.setNull(29, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(29, Actualizables.TVINCULACIONES_ID);
}

                        pstmt_tOracleOutput_3.setBigDecimal(30, Actualizables.USUARIOS_ID);

                        if(Actualizables.ESTADO == null) {
pstmt_tOracleOutput_3.setNull(31, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_3.setString(31, Actualizables.ESTADO);
}

                        if(Actualizables.ESTADOS_ID == null) {
pstmt_tOracleOutput_3.setNull(32, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(32, Actualizables.ESTADOS_ID);
}

                        pstmt_tOracleOutput_3.setBigDecimal(33, Actualizables.MOTIVOSESTADO_ID);

                        if(Actualizables.MOTIVO == null) {
pstmt_tOracleOutput_3.setNull(34, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_3.setString(34, Actualizables.MOTIVO);
}

                        pstmt_tOracleOutput_3.setBigDecimal(35, Actualizables.RNOVEDADES_ID);

                        if(Actualizables.FECHA_CADUCIDAD != null) {
pstmt_tOracleOutput_3.setObject(36, new java.sql.Timestamp(Actualizables.FECHA_CADUCIDAD.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_3.setNull(36, java.sql.Types.DATE);
}

                        if(Actualizables.FECHA_VINCULACION != null) {
pstmt_tOracleOutput_3.setObject(37, new java.sql.Timestamp(Actualizables.FECHA_VINCULACION.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_3.setNull(37, java.sql.Types.DATE);
}

                        pstmt_tOracleOutput_3.setBigDecimal(38, Actualizables.PERSONAS_ID);

                        pstmt_tOracleOutput_3.setBigDecimal(39, Actualizables.AFILIADO_ID);

                        if(Actualizables.TIPO_AFILIADO == null) {
pstmt_tOracleOutput_3.setNull(40, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_3.setString(40, Actualizables.TIPO_AFILIADO);
}

                        if(Actualizables.ESTADO_ENTIDAD == null) {
pstmt_tOracleOutput_3.setNull(41, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_3.setString(41, Actualizables.ESTADO_ENTIDAD);
}

                        if(Actualizables.ENTIDAD_PRINCIPAL == null) {
pstmt_tOracleOutput_3.setNull(42, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(42, Actualizables.ENTIDAD_PRINCIPAL);
}

                        if(Actualizables.TREGIMEN_ID == null) {
pstmt_tOracleOutput_3.setNull(43, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(43, Actualizables.TREGIMEN_ID);
}

                        pstmt_tOracleOutput_3.setBigDecimal(44, Actualizables.ID_UNICO_ENTIDAD);

                        if(Actualizables.CORREO_ELECTRONICO == null) {
pstmt_tOracleOutput_3.setNull(45, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_3.setString(45, Actualizables.CORREO_ELECTRONICO);
}

                        if(Actualizables.CELULAR == null) {
pstmt_tOracleOutput_3.setNull(46, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_3.setString(46, Actualizables.CELULAR);
}

                        if(Actualizables.FECHA_DEFUNCION != null) {
pstmt_tOracleOutput_3.setObject(47, new java.sql.Timestamp(Actualizables.FECHA_DEFUNCION.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_3.setNull(47, java.sql.Types.DATE);
}

                        if(Actualizables.PLANAFILIACIONES_ID == null) {
pstmt_tOracleOutput_3.setNull(48, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(48, Actualizables.PLANAFILIACIONES_ID);
}

                        pstmt_tOracleOutput_3.setBigDecimal(49, Actualizables.ID_BDUA);

                        if(Actualizables.MOTIVO_CAMBIO_ESTADO == null) {
pstmt_tOracleOutput_3.setNull(50, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_3.setString(50, Actualizables.MOTIVO_CAMBIO_ESTADO);
}

                        if(Actualizables.MOTIVO_CAMBIO_ESM == null) {
pstmt_tOracleOutput_3.setNull(51, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_3.setString(51, Actualizables.MOTIVO_CAMBIO_ESM);
}

                        if(Actualizables.TDISCAPACIDADES_ID == null) {
pstmt_tOracleOutput_3.setNull(52, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(52, Actualizables.TDISCAPACIDADES_ID);
}

                        if(Actualizables.PESPECIAL_ID == null) {
pstmt_tOracleOutput_3.setNull(53, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(53, Actualizables.PESPECIAL_ID);
}

                try {
                    nb_line_tOracleOutput_3++;
                    int processedCount_tOracleOutput_3 = pstmt_tOracleOutput_3.executeUpdate();
                    insertedCount_tOracleOutput_3 += processedCount_tOracleOutput_3;
                    rowsToCommitCount_tOracleOutput_3 += processedCount_tOracleOutput_3;
                } catch(java.lang.Exception e_tOracleOutput_3) {
globalMap.put("tOracleOutput_3_ERROR_MESSAGE",e_tOracleOutput_3.getMessage());
                    whetherReject_tOracleOutput_3 = true;
                            System.err.print(e_tOracleOutput_3.getMessage());
                }

 


	tos_count_tOracleOutput_3++;

/**
 * [tOracleOutput_3 main ] stop
 */
	
	/**
	 * [tOracleOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	

 



/**
 * [tOracleOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	

 



/**
 * [tOracleOutput_3 process_data_end ] stop
 */

} // End of branch "Actualizables"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_4 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

}
}finally{
	if (rs_tOracleInput_4 != null) {
		rs_tOracleInput_4.close();
	}
	if (stmt_tOracleInput_4 != null) {
		stmt_tOracleInput_4.close();
	}
}

globalMap.put("tOracleInput_4_NB_LINE",nb_line_tOracleInput_4);
 

ok_Hash.put("tOracleInput_4", true);
end_Hash.put("tOracleInput_4", System.currentTimeMillis());




/**
 * [tOracleInput_4 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row25 != null) {
						tHash_Lookup_row25.endGet();
					}
					globalMap.remove( "tHash_Lookup_row25" );

					
					
				
					if(tHash_Lookup_row64 != null) {
						tHash_Lookup_row64.endGet();
					}
					globalMap.remove( "tHash_Lookup_row64" );

					
					
				
					if(tHash_Lookup_row65 != null) {
						tHash_Lookup_row65.endGet();
					}
					globalMap.remove( "tHash_Lookup_row65" );

					
					
				
					if(tHash_Lookup_row66 != null) {
						tHash_Lookup_row66.endGet();
					}
					globalMap.remove( "tHash_Lookup_row66" );

					
					
				
					if(tHash_Lookup_row67 != null) {
						tHash_Lookup_row67.endGet();
					}
					globalMap.remove( "tHash_Lookup_row67" );

					
					
				
					if(tHash_Lookup_row68 != null) {
						tHash_Lookup_row68.endGet();
					}
					globalMap.remove( "tHash_Lookup_row68" );

					
					
				
					if(tHash_Lookup_row69 != null) {
						tHash_Lookup_row69.endGet();
					}
					globalMap.remove( "tHash_Lookup_row69" );

					
					
				
					if(tHash_Lookup_row70 != null) {
						tHash_Lookup_row70.endGet();
					}
					globalMap.remove( "tHash_Lookup_row70" );

					
					
				
					if(tHash_Lookup_row71 != null) {
						tHash_Lookup_row71.endGet();
					}
					globalMap.remove( "tHash_Lookup_row71" );

					
					
				
					if(tHash_Lookup_row72 != null) {
						tHash_Lookup_row72.endGet();
					}
					globalMap.remove( "tHash_Lookup_row72" );

					
					
				
					if(tHash_Lookup_row73 != null) {
						tHash_Lookup_row73.endGet();
					}
					globalMap.remove( "tHash_Lookup_row73" );

					
					
				
					if(tHash_Lookup_row74 != null) {
						tHash_Lookup_row74.endGet();
					}
					globalMap.remove( "tHash_Lookup_row74" );

					
					
				
					if(tHash_Lookup_row75 != null) {
						tHash_Lookup_row75.endGet();
					}
					globalMap.remove( "tHash_Lookup_row75" );

					
					
				
					if(tHash_Lookup_row76 != null) {
						tHash_Lookup_row76.endGet();
					}
					globalMap.remove( "tHash_Lookup_row76" );

					
					
				
					if(tHash_Lookup_row77 != null) {
						tHash_Lookup_row77.endGet();
					}
					globalMap.remove( "tHash_Lookup_row77" );

					
					
				
					if(tHash_Lookup_row79 != null) {
						tHash_Lookup_row79.endGet();
					}
					globalMap.remove( "tHash_Lookup_row79" );

					
					
				
					if(tHash_Lookup_row80 != null) {
						tHash_Lookup_row80.endGet();
					}
					globalMap.remove( "tHash_Lookup_row80" );

					
					
				
					if(tHash_Lookup_row81 != null) {
						tHash_Lookup_row81.endGet();
					}
					globalMap.remove( "tHash_Lookup_row81" );

					
					
				
					if(tHash_Lookup_row82 != null) {
						tHash_Lookup_row82.endGet();
					}
					globalMap.remove( "tHash_Lookup_row82" );

					
					
				
					if(tHash_Lookup_row46 != null) {
						tHash_Lookup_row46.endGet();
					}
					globalMap.remove( "tHash_Lookup_row46" );

					
					
				
					if(tHash_Lookup_row127 != null) {
						tHash_Lookup_row127.endGet();
					}
					globalMap.remove( "tHash_Lookup_row127" );

					
					
				
					if(tHash_Lookup_row152 != null) {
						tHash_Lookup_row152.endGet();
					}
					globalMap.remove( "tHash_Lookup_row152" );

					
					
				
					if(tHash_Lookup_row154 != null) {
						tHash_Lookup_row154.endGet();
					}
					globalMap.remove( "tHash_Lookup_row154" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row24");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tJavaRow_8 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	

globalMap.put("tJavaRow_8_NB_LINE",nb_line_tJavaRow_8);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Errores");
			  	}
			  	
 

ok_Hash.put("tJavaRow_8", true);
end_Hash.put("tJavaRow_8", System.currentTimeMillis());




/**
 * [tJavaRow_8 end ] stop
 */

	
	/**
	 * [tOracleOutput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	
	



	
        if(pstmt_tOracleOutput_2 != null) {
			
				pstmt_tOracleOutput_2.close();
				resourceMap.remove("pstmt_tOracleOutput_2");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_2", true);

	
	nb_line_deleted_tOracleOutput_2=nb_line_deleted_tOracleOutput_2+ deletedCount_tOracleOutput_2;
	nb_line_update_tOracleOutput_2=nb_line_update_tOracleOutput_2 + updatedCount_tOracleOutput_2;
	nb_line_inserted_tOracleOutput_2=nb_line_inserted_tOracleOutput_2 + insertedCount_tOracleOutput_2;
	nb_line_rejected_tOracleOutput_2=nb_line_rejected_tOracleOutput_2 + rejectedCount_tOracleOutput_2;
	
        globalMap.put("tOracleOutput_2_NB_LINE",nb_line_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_UPDATED",nb_line_update_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_2);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row26");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_2", true);
end_Hash.put("tOracleOutput_2", System.currentTimeMillis());




/**
 * [tOracleOutput_2 end ] stop
 */







	
	/**
	 * [tOracleOutput_3 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	
	



	
        if(pstmt_tOracleOutput_3 != null) {
			
				pstmt_tOracleOutput_3.close();
				resourceMap.remove("pstmt_tOracleOutput_3");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_3", true);

	
	nb_line_deleted_tOracleOutput_3=nb_line_deleted_tOracleOutput_3+ deletedCount_tOracleOutput_3;
	nb_line_update_tOracleOutput_3=nb_line_update_tOracleOutput_3 + updatedCount_tOracleOutput_3;
	nb_line_inserted_tOracleOutput_3=nb_line_inserted_tOracleOutput_3 + insertedCount_tOracleOutput_3;
	nb_line_rejected_tOracleOutput_3=nb_line_rejected_tOracleOutput_3 + rejectedCount_tOracleOutput_3;
	
        globalMap.put("tOracleOutput_3_NB_LINE",nb_line_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_UPDATED",nb_line_update_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_3);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Actualizables");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_3", true);
end_Hash.put("tOracleOutput_3", System.currentTimeMillis());




/**
 * [tOracleOutput_3 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tOracleCommit_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row25"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row64"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row65"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row66"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row67"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row68"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row69"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row70"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row71"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row72"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row73"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row74"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row75"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row76"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row77"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row79"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row80"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row81"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row82"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row46"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row127"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row152"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row154"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_8 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	

 



/**
 * [tJavaRow_8 finally ] stop
 */

	
	/**
	 * [tOracleOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_2 = null;
                if ((pstmtToClose_tOracleOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_2")) != null) {
                    pstmtToClose_tOracleOutput_2.close();
                }
    }
 



/**
 * [tOracleOutput_2 finally ] stop
 */







	
	/**
	 * [tOracleOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_3 = null;
                if ((pstmtToClose_tOracleOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_3")) != null) {
                    pstmtToClose_tOracleOutput_3.close();
                }
    }
 



/**
 * [tOracleOutput_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 1);
	}
	


public void tOracleCommit_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleCommit_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleCommit_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleCommit_1", false);
		start_Hash.put("tOracleCommit_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleCommit_1";
	
	
		int tos_count_tOracleCommit_1 = 0;
		

 



/**
 * [tOracleCommit_1 begin ] stop
 */
	
	/**
	 * [tOracleCommit_1 main ] start
	 */

	

	
	
	currentComponent="tOracleCommit_1";
	
	

	java.sql.Connection conn_tOracleCommit_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");

if(conn_tOracleCommit_1 != null && !conn_tOracleCommit_1.isClosed()) {
	
			
			conn_tOracleCommit_1.commit();
			
	
}

 


	tos_count_tOracleCommit_1++;

/**
 * [tOracleCommit_1 main ] stop
 */
	
	/**
	 * [tOracleCommit_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleCommit_1";
	
	

 



/**
 * [tOracleCommit_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleCommit_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleCommit_1";
	
	

 



/**
 * [tOracleCommit_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleCommit_1 end ] start
	 */

	

	
	
	currentComponent="tOracleCommit_1";
	
	

 

ok_Hash.put("tOracleCommit_1", true);
end_Hash.put("tOracleCommit_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk12", 0, "ok");
				}
				tOracleInput_5Process(globalMap);



/**
 * [tOracleCommit_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleCommit_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleCommit_1";
	
	

 



/**
 * [tOracleCommit_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleCommit_1_SUBPROCESS_STATE", 1);
	}
	


public static class row27Struct implements routines.system.IPersistableRow<row27Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer REGISTROS;

				public Integer getREGISTROS () {
					return this.REGISTROS;
				}

				public Boolean REGISTROSIsNullable(){
				    return true;
				}
				public Boolean REGISTROSIsKey(){
				    return false;
				}
				public Integer REGISTROSLength(){
				    return null;
				}
				public Integer REGISTROSPrecision(){
				    return null;
				}
				public String REGISTROSDefault(){
				
					return null;
				
				}
				public String REGISTROSComment(){
				
				    return "";
				
				}
				public String REGISTROSPattern(){
				
					return "";
				
				}
				public String REGISTROSOriginalDbColumnName(){
				
					return "REGISTROS";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.REGISTROS = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.REGISTROS = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.REGISTROS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.REGISTROS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("REGISTROS="+String.valueOf(REGISTROS));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row27Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row27Struct row27 = new row27Struct();




	
	/**
	 * [tJavaRow_29 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_29", false);
		start_Hash.put("tJavaRow_29", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_29";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row27");
					}
				
		int tos_count_tJavaRow_29 = 0;
		

int nb_line_tJavaRow_29 = 0;

 



/**
 * [tJavaRow_29 begin ] stop
 */



	
	/**
	 * [tOracleInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_5", false);
		start_Hash.put("tOracleInput_5", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_5";
	
	
		int tos_count_tOracleInput_5 = 0;
		
	


	
		    int nb_line_tOracleInput_5 = 0;
		    java.sql.Connection conn_tOracleInput_5 = null;
				conn_tOracleInput_5 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_5 = false;
				boolean isConnectionWrapped_tOracleInput_5 = !(conn_tOracleInput_5 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_5.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_5 = null;
                if (isConnectionWrapped_tOracleInput_5) {
					unwrappedOraConn_tOracleInput_5 = conn_tOracleInput_5.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_5 != null) {
                        isTimeZoneNull_tOracleInput_5 = (unwrappedOraConn_tOracleInput_5.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_5 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_5).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_5) {
					java.sql.Statement stmtGetTZ_tOracleInput_5 = conn_tOracleInput_5.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_5 = stmtGetTZ_tOracleInput_5.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_5 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_5.next()) {
						sessionTimezone_tOracleInput_5 = rsGetTZ_tOracleInput_5.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_5 && unwrappedOraConn_tOracleInput_5 != null) {
                        unwrappedOraConn_tOracleInput_5.setSessionTimeZone(sessionTimezone_tOracleInput_5);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_5).setSessionTimeZone(sessionTimezone_tOracleInput_5);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_5 = conn_tOracleInput_5.createStatement();

		    String dbquery_tOracleInput_5 = "SELECT COUNT(1) REGISTROS\n  FROM TST_ERRCMASIVO";
		    

		    globalMap.put("tOracleInput_5_QUERY",dbquery_tOracleInput_5);

		    java.sql.ResultSet rs_tOracleInput_5 = null;

		    try {
		    	rs_tOracleInput_5 = stmt_tOracleInput_5.executeQuery(dbquery_tOracleInput_5);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_5 = rs_tOracleInput_5.getMetaData();
		    	int colQtyInRs_tOracleInput_5 = rsmd_tOracleInput_5.getColumnCount();

		    String tmpContent_tOracleInput_5 = null;
		    
		    
		    while (rs_tOracleInput_5.next()) {
		        nb_line_tOracleInput_5++;
		        
							if(colQtyInRs_tOracleInput_5 < 1) {
								row27.REGISTROS = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(1) != null) {
						row27.REGISTROS = rs_tOracleInput_5.getInt(1);
					} else {
				
						row27.REGISTROS = null;
					}
		                    }
					




 



/**
 * [tOracleInput_5 begin ] stop
 */
	
	/**
	 * [tOracleInput_5 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 


	tos_count_tOracleInput_5++;

/**
 * [tOracleInput_5 main ] stop
 */
	
	/**
	 * [tOracleInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_29 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_29";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row27"
						
						);
					}
					

    //Code generate according to input schema and output schema
context.verror_datos = row27.REGISTROS;

    nb_line_tJavaRow_29++;   

 


	tos_count_tJavaRow_29++;

/**
 * [tJavaRow_29 main ] stop
 */
	
	/**
	 * [tJavaRow_29 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_29";
	
	

 



/**
 * [tJavaRow_29 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_29 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_29";
	
	

 



/**
 * [tJavaRow_29 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_5 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

}
}finally{
	if (rs_tOracleInput_5 != null) {
		rs_tOracleInput_5.close();
	}
	if (stmt_tOracleInput_5 != null) {
		stmt_tOracleInput_5.close();
	}
}

globalMap.put("tOracleInput_5_NB_LINE",nb_line_tOracleInput_5);
 

ok_Hash.put("tOracleInput_5", true);
end_Hash.put("tOracleInput_5", System.currentTimeMillis());




/**
 * [tOracleInput_5 end ] stop
 */

	
	/**
	 * [tJavaRow_29 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_29";
	
	

globalMap.put("tJavaRow_29_NB_LINE",nb_line_tJavaRow_29);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row27");
			  	}
			  	
 

ok_Hash.put("tJavaRow_29", true);
end_Hash.put("tJavaRow_29", System.currentTimeMillis());

   			if (context.vcount_registros == context.verror_datos) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If13", 0, "true");
					}
				tFixedFlowInput_11Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If13", 0, "false");
					}   	 
   				}
   			if (context.verror_datos < context.vcount_registros
) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If14", 0, "true");
					}
				tOracleInput_6Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If14", 0, "false");
					}   	 
   				}



/**
 * [tJavaRow_29 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_5 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 finally ] stop
 */

	
	/**
	 * [tJavaRow_29 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_29";
	
	

 



/**
 * [tJavaRow_29 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row28Struct implements routines.system.IPersistableRow<row28Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer archivos_id_;

				public Integer getArchivos_id_ () {
					return this.archivos_id_;
				}

				public Boolean archivos_id_IsNullable(){
				    return true;
				}
				public Boolean archivos_id_IsKey(){
				    return false;
				}
				public Integer archivos_id_Length(){
				    return null;
				}
				public Integer archivos_id_Precision(){
				    return null;
				}
				public String archivos_id_Default(){
				
					return null;
				
				}
				public String archivos_id_Comment(){
				
				    return "";
				
				}
				public String archivos_id_Pattern(){
				
					return "";
				
				}
				public String archivos_id_OriginalDbColumnName(){
				
					return "archivos_id_";
				
				}

				
			    public Integer estado_;

				public Integer getEstado_ () {
					return this.estado_;
				}

				public Boolean estado_IsNullable(){
				    return true;
				}
				public Boolean estado_IsKey(){
				    return false;
				}
				public Integer estado_Length(){
				    return null;
				}
				public Integer estado_Precision(){
				    return null;
				}
				public String estado_Default(){
				
					return null;
				
				}
				public String estado_Comment(){
				
				    return "";
				
				}
				public String estado_Pattern(){
				
					return "";
				
				}
				public String estado_OriginalDbColumnName(){
				
					return "estado_";
				
				}

				
			    public java.util.Date finicio_;

				public java.util.Date getFinicio_ () {
					return this.finicio_;
				}

				public Boolean finicio_IsNullable(){
				    return true;
				}
				public Boolean finicio_IsKey(){
				    return false;
				}
				public Integer finicio_Length(){
				    return null;
				}
				public Integer finicio_Precision(){
				    return null;
				}
				public String finicio_Default(){
				
					return null;
				
				}
				public String finicio_Comment(){
				
				    return "";
				
				}
				public String finicio_Pattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String finicio_OriginalDbColumnName(){
				
					return "finicio_";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.archivos_id_ = readInteger(dis);
					
						this.estado_ = readInteger(dis);
					
					this.finicio_ = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.archivos_id_ = readInteger(dis);
					
						this.estado_ = readInteger(dis);
					
					this.finicio_ = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.archivos_id_,dos);
					
					// Integer
				
						writeInteger(this.estado_,dos);
					
					// java.util.Date
				
						writeDate(this.finicio_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.archivos_id_,dos);
					
					// Integer
				
						writeInteger(this.estado_,dos);
					
					// java.util.Date
				
						writeDate(this.finicio_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("archivos_id_="+String.valueOf(archivos_id_));
		sb.append(",estado_="+String.valueOf(estado_));
		sb.append(",finicio_="+String.valueOf(finicio_));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row28Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row28Struct row28 = new row28Struct();




	
	/**
	 * [tOracleSP_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_6", false);
		start_Hash.put("tOracleSP_6", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row28");
					}
				
		int tos_count_tOracleSP_6 = 0;
		

	java.sql.Connection connection_tOracleSP_6 = null;
	connection_tOracleSP_6 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_1");
	

java.sql.CallableStatement statement_tOracleSP_6 = connection_tOracleSP_6.prepareCall("{call " + "cms2.updestadoarchivo" + "(?,?,?)}");

java.sql.Timestamp tmpDate_tOracleSP_6;
String tmpString_tOracleSP_6;

 



/**
 * [tOracleSP_6 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_11", false);
		start_Hash.put("tFixedFlowInput_11", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_11";
	
	
		int tos_count_tFixedFlowInput_11 = 0;
		

	    for (int i_tFixedFlowInput_11 = 0 ; i_tFixedFlowInput_11 < 1 ; i_tFixedFlowInput_11++) {
	                	            	
    	            		row28.archivos_id_ = context.vafiarchivos_id;
    	            	        	            	
    	            		row28.estado_ = 8;
    	            	        	            	
    	            		row28.finicio_ = context.vfinicio;
    	            	

 



/**
 * [tFixedFlowInput_11 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_11 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_11";
	
	

 


	tos_count_tFixedFlowInput_11++;

/**
 * [tFixedFlowInput_11 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_11";
	
	

 



/**
 * [tFixedFlowInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tOracleSP_6 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row28"
						
						);
					}
					

			// code for the argument 1 (archivos_id_) of type 'IN AUTOMAPPING'
    					if (row28.archivos_id_ == null) {
    						statement_tOracleSP_6.setNull(1, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_6.setInt(1, row28.archivos_id_);
    					}
    					
			// code for the argument 2 (estado_) of type 'IN AUTOMAPPING'
    					if (row28.estado_ == null) {
    						statement_tOracleSP_6.setNull(2, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_6.setInt(2, row28.estado_);
    					}
    					
			// code for the argument 3 (finicio_) of type 'IN TIMESTAMP'
    					if (row28.finicio_ == null) {
    						statement_tOracleSP_6.setNull(3, java.sql.Types.DATE);
    					} else {
    					
    					statement_tOracleSP_6.setTimestamp(3, new java.sql.Timestamp(row28.finicio_.getTime()));
    					
    					}
    					
		statement_tOracleSP_6.execute();
		

 


	tos_count_tOracleSP_6++;

/**
 * [tOracleSP_6 main ] stop
 */
	
	/**
	 * [tOracleSP_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_6";
	
	

 



/**
 * [tOracleSP_6 process_data_begin ] stop
 */
	
	/**
	 * [tOracleSP_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_6";
	
	

 



/**
 * [tOracleSP_6 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_11";
	
	

 



/**
 * [tFixedFlowInput_11 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_11 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_11";
	
	

        }
        globalMap.put("tFixedFlowInput_11_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_11", true);
end_Hash.put("tFixedFlowInput_11", System.currentTimeMillis());




/**
 * [tFixedFlowInput_11 end ] stop
 */

	
	/**
	 * [tOracleSP_6 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_6";
	
	


	statement_tOracleSP_6.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row28");
			  	}
			  	
 

ok_Hash.put("tOracleSP_6", true);
end_Hash.put("tOracleSP_6", System.currentTimeMillis());




/**
 * [tOracleSP_6 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_11 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_11";
	
	

 



/**
 * [tFixedFlowInput_11 finally ] stop
 */

	
	/**
	 * [tOracleSP_6 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_6";
	
	

 



/**
 * [tOracleSP_6 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_11_SUBPROCESS_STATE", 1);
	}
	


public static class row29Struct implements routines.system.IPersistableRow<row29Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer REGISTROS;

				public Integer getREGISTROS () {
					return this.REGISTROS;
				}

				public Boolean REGISTROSIsNullable(){
				    return true;
				}
				public Boolean REGISTROSIsKey(){
				    return false;
				}
				public Integer REGISTROSLength(){
				    return null;
				}
				public Integer REGISTROSPrecision(){
				    return null;
				}
				public String REGISTROSDefault(){
				
					return null;
				
				}
				public String REGISTROSComment(){
				
				    return "";
				
				}
				public String REGISTROSPattern(){
				
					return "";
				
				}
				public String REGISTROSOriginalDbColumnName(){
				
					return "REGISTROS";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.REGISTROS = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.REGISTROS = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.REGISTROS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.REGISTROS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("REGISTROS="+String.valueOf(REGISTROS));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row29Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row29Struct row29 = new row29Struct();




	
	/**
	 * [tJavaRow_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_9", false);
		start_Hash.put("tJavaRow_9", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row29");
					}
				
		int tos_count_tJavaRow_9 = 0;
		

int nb_line_tJavaRow_9 = 0;

 



/**
 * [tJavaRow_9 begin ] stop
 */



	
	/**
	 * [tOracleInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_6", false);
		start_Hash.put("tOracleInput_6", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_6";
	
	
		int tos_count_tOracleInput_6 = 0;
		
	


	
		    int nb_line_tOracleInput_6 = 0;
		    java.sql.Connection conn_tOracleInput_6 = null;
				conn_tOracleInput_6 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_6 = false;
				boolean isConnectionWrapped_tOracleInput_6 = !(conn_tOracleInput_6 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_6.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_6 = null;
                if (isConnectionWrapped_tOracleInput_6) {
					unwrappedOraConn_tOracleInput_6 = conn_tOracleInput_6.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_6 != null) {
                        isTimeZoneNull_tOracleInput_6 = (unwrappedOraConn_tOracleInput_6.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_6 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_6).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_6) {
					java.sql.Statement stmtGetTZ_tOracleInput_6 = conn_tOracleInput_6.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_6 = stmtGetTZ_tOracleInput_6.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_6 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_6.next()) {
						sessionTimezone_tOracleInput_6 = rsGetTZ_tOracleInput_6.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_6 && unwrappedOraConn_tOracleInput_6 != null) {
                        unwrappedOraConn_tOracleInput_6.setSessionTimeZone(sessionTimezone_tOracleInput_6);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_6).setSessionTimeZone(sessionTimezone_tOracleInput_6);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_6 = conn_tOracleInput_6.createStatement();

		    String dbquery_tOracleInput_6 = "SELECT  COUNT(1) REGISTROS\nFROM TST_CARGUEMASIVO";
		    

		    globalMap.put("tOracleInput_6_QUERY",dbquery_tOracleInput_6);

		    java.sql.ResultSet rs_tOracleInput_6 = null;

		    try {
		    	rs_tOracleInput_6 = stmt_tOracleInput_6.executeQuery(dbquery_tOracleInput_6);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_6 = rs_tOracleInput_6.getMetaData();
		    	int colQtyInRs_tOracleInput_6 = rsmd_tOracleInput_6.getColumnCount();

		    String tmpContent_tOracleInput_6 = null;
		    
		    
		    while (rs_tOracleInput_6.next()) {
		        nb_line_tOracleInput_6++;
		        
							if(colQtyInRs_tOracleInput_6 < 1) {
								row29.REGISTROS = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(1) != null) {
						row29.REGISTROS = rs_tOracleInput_6.getInt(1);
					} else {
				
						row29.REGISTROS = null;
					}
		                    }
					




 



/**
 * [tOracleInput_6 begin ] stop
 */
	
	/**
	 * [tOracleInput_6 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 


	tos_count_tOracleInput_6++;

/**
 * [tOracleInput_6 main ] stop
 */
	
	/**
	 * [tOracleInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_9 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row29"
						
						);
					}
					

    //Code generate according to input schema and output schema
context.vcount_registros = row29.REGISTROS;

    nb_line_tJavaRow_9++;   

 


	tos_count_tJavaRow_9++;

/**
 * [tJavaRow_9 main ] stop
 */
	
	/**
	 * [tJavaRow_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";
	
	

 



/**
 * [tJavaRow_9 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";
	
	

 



/**
 * [tJavaRow_9 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_6 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

}
}finally{
	if (rs_tOracleInput_6 != null) {
		rs_tOracleInput_6.close();
	}
	if (stmt_tOracleInput_6 != null) {
		stmt_tOracleInput_6.close();
	}
}

globalMap.put("tOracleInput_6_NB_LINE",nb_line_tOracleInput_6);
 

ok_Hash.put("tOracleInput_6", true);
end_Hash.put("tOracleInput_6", System.currentTimeMillis());




/**
 * [tOracleInput_6 end ] stop
 */

	
	/**
	 * [tJavaRow_9 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";
	
	

globalMap.put("tJavaRow_9_NB_LINE",nb_line_tJavaRow_9);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row29");
			  	}
			  	
 

ok_Hash.put("tJavaRow_9", true);
end_Hash.put("tJavaRow_9", System.currentTimeMillis());

   			if (context.vcount_registros == 0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If16", 0, "true");
					}
				tFixedFlowInput_12Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If16", 0, "false");
					}   	 
   				}
   			if (context.vcount_registros > 0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If17", 0, "true");
					}
				tOracleInput_7Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If17", 0, "false");
					}   	 
   				}



/**
 * [tJavaRow_9 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_6 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 finally ] stop
 */

	
	/**
	 * [tJavaRow_9 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";
	
	

 



/**
 * [tJavaRow_9 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row30Struct implements routines.system.IPersistableRow<row30Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer archivos_id_;

				public Integer getArchivos_id_ () {
					return this.archivos_id_;
				}

				public Boolean archivos_id_IsNullable(){
				    return true;
				}
				public Boolean archivos_id_IsKey(){
				    return false;
				}
				public Integer archivos_id_Length(){
				    return null;
				}
				public Integer archivos_id_Precision(){
				    return null;
				}
				public String archivos_id_Default(){
				
					return null;
				
				}
				public String archivos_id_Comment(){
				
				    return "";
				
				}
				public String archivos_id_Pattern(){
				
					return "";
				
				}
				public String archivos_id_OriginalDbColumnName(){
				
					return "archivos_id_";
				
				}

				
			    public Integer estado_;

				public Integer getEstado_ () {
					return this.estado_;
				}

				public Boolean estado_IsNullable(){
				    return true;
				}
				public Boolean estado_IsKey(){
				    return false;
				}
				public Integer estado_Length(){
				    return null;
				}
				public Integer estado_Precision(){
				    return null;
				}
				public String estado_Default(){
				
					return null;
				
				}
				public String estado_Comment(){
				
				    return "";
				
				}
				public String estado_Pattern(){
				
					return "";
				
				}
				public String estado_OriginalDbColumnName(){
				
					return "estado_";
				
				}

				
			    public java.util.Date finicio_;

				public java.util.Date getFinicio_ () {
					return this.finicio_;
				}

				public Boolean finicio_IsNullable(){
				    return true;
				}
				public Boolean finicio_IsKey(){
				    return false;
				}
				public Integer finicio_Length(){
				    return null;
				}
				public Integer finicio_Precision(){
				    return null;
				}
				public String finicio_Default(){
				
					return null;
				
				}
				public String finicio_Comment(){
				
				    return "";
				
				}
				public String finicio_Pattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String finicio_OriginalDbColumnName(){
				
					return "finicio_";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.archivos_id_ = readInteger(dis);
					
						this.estado_ = readInteger(dis);
					
					this.finicio_ = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.archivos_id_ = readInteger(dis);
					
						this.estado_ = readInteger(dis);
					
					this.finicio_ = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.archivos_id_,dos);
					
					// Integer
				
						writeInteger(this.estado_,dos);
					
					// java.util.Date
				
						writeDate(this.finicio_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.archivos_id_,dos);
					
					// Integer
				
						writeInteger(this.estado_,dos);
					
					// java.util.Date
				
						writeDate(this.finicio_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("archivos_id_="+String.valueOf(archivos_id_));
		sb.append(",estado_="+String.valueOf(estado_));
		sb.append(",finicio_="+String.valueOf(finicio_));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row30Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row30Struct row30 = new row30Struct();




	
	/**
	 * [tOracleSP_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_7", false);
		start_Hash.put("tOracleSP_7", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row30");
					}
				
		int tos_count_tOracleSP_7 = 0;
		

	java.sql.Connection connection_tOracleSP_7 = null;
	connection_tOracleSP_7 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_1");
	

java.sql.CallableStatement statement_tOracleSP_7 = connection_tOracleSP_7.prepareCall("{call " + "cms2.updestadoarchivo" + "(?,?,?)}");

java.sql.Timestamp tmpDate_tOracleSP_7;
String tmpString_tOracleSP_7;

 



/**
 * [tOracleSP_7 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_12", false);
		start_Hash.put("tFixedFlowInput_12", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_12";
	
	
		int tos_count_tFixedFlowInput_12 = 0;
		

	    for (int i_tFixedFlowInput_12 = 0 ; i_tFixedFlowInput_12 < 1 ; i_tFixedFlowInput_12++) {
	                	            	
    	            		row30.archivos_id_ = context.vafiarchivos_id;
    	            	        	            	
    	            		row30.estado_ = 8;
    	            	        	            	
    	            		row30.finicio_ = context.vfinicio;
    	            	

 



/**
 * [tFixedFlowInput_12 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_12 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_12";
	
	

 


	tos_count_tFixedFlowInput_12++;

/**
 * [tFixedFlowInput_12 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_12";
	
	

 



/**
 * [tFixedFlowInput_12 process_data_begin ] stop
 */

	
	/**
	 * [tOracleSP_7 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row30"
						
						);
					}
					

			// code for the argument 1 (archivos_id_) of type 'IN AUTOMAPPING'
    					if (row30.archivos_id_ == null) {
    						statement_tOracleSP_7.setNull(1, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_7.setInt(1, row30.archivos_id_);
    					}
    					
			// code for the argument 2 (estado_) of type 'IN AUTOMAPPING'
    					if (row30.estado_ == null) {
    						statement_tOracleSP_7.setNull(2, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_7.setInt(2, row30.estado_);
    					}
    					
			// code for the argument 3 (finicio_) of type 'IN TIMESTAMP'
    					if (row30.finicio_ == null) {
    						statement_tOracleSP_7.setNull(3, java.sql.Types.DATE);
    					} else {
    					
    					statement_tOracleSP_7.setTimestamp(3, new java.sql.Timestamp(row30.finicio_.getTime()));
    					
    					}
    					
		statement_tOracleSP_7.execute();
		

 


	tos_count_tOracleSP_7++;

/**
 * [tOracleSP_7 main ] stop
 */
	
	/**
	 * [tOracleSP_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_7";
	
	

 



/**
 * [tOracleSP_7 process_data_begin ] stop
 */
	
	/**
	 * [tOracleSP_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_7";
	
	

 



/**
 * [tOracleSP_7 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_12";
	
	

 



/**
 * [tFixedFlowInput_12 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_12 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_12";
	
	

        }
        globalMap.put("tFixedFlowInput_12_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_12", true);
end_Hash.put("tFixedFlowInput_12", System.currentTimeMillis());




/**
 * [tFixedFlowInput_12 end ] stop
 */

	
	/**
	 * [tOracleSP_7 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_7";
	
	


	statement_tOracleSP_7.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row30");
			  	}
			  	
 

ok_Hash.put("tOracleSP_7", true);
end_Hash.put("tOracleSP_7", System.currentTimeMillis());

   			if (context.vcount_registros == 0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If15", 0, "true");
					}
				tFixedFlowInput_13Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If15", 0, "false");
					}   	 
   				}



/**
 * [tOracleSP_7 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_12 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_12";
	
	

 



/**
 * [tFixedFlowInput_12 finally ] stop
 */

	
	/**
	 * [tOracleSP_7 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_7";
	
	

 



/**
 * [tOracleSP_7 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_12_SUBPROCESS_STATE", 1);
	}
	


public static class row32Struct implements routines.system.IPersistableRow<row32Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public String respuesta;

				public String getRespuesta () {
					return this.respuesta;
				}

				public Boolean respuestaIsNullable(){
				    return true;
				}
				public Boolean respuestaIsKey(){
				    return false;
				}
				public Integer respuestaLength(){
				    return null;
				}
				public Integer respuestaPrecision(){
				    return null;
				}
				public String respuestaDefault(){
				
					return null;
				
				}
				public String respuestaComment(){
				
				    return "";
				
				}
				public String respuestaPattern(){
				
					return "";
				
				}
				public String respuestaOriginalDbColumnName(){
				
					return "respuesta";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.respuesta = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.respuesta = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.respuesta,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.respuesta,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("respuesta="+respuesta);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row32Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row311Struct implements routines.system.IPersistableRow<row311Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public String respuesta;

				public String getRespuesta () {
					return this.respuesta;
				}

				public Boolean respuestaIsNullable(){
				    return true;
				}
				public Boolean respuestaIsKey(){
				    return false;
				}
				public Integer respuestaLength(){
				    return null;
				}
				public Integer respuestaPrecision(){
				    return null;
				}
				public String respuestaDefault(){
				
					return null;
				
				}
				public String respuestaComment(){
				
				    return "";
				
				}
				public String respuestaPattern(){
				
					return "";
				
				}
				public String respuestaOriginalDbColumnName(){
				
					return "respuesta";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.respuesta = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.respuesta = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.respuesta,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.respuesta,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("respuesta="+respuesta);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row311Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row311Struct row311 = new row311Struct();
row311Struct row32 = row311;





	
	/**
	 * [tDie_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_5", false);
		start_Hash.put("tDie_5", System.currentTimeMillis());
		
	
	currentComponent="tDie_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row32");
					}
				
		int tos_count_tDie_5 = 0;
		

 



/**
 * [tDie_5 begin ] stop
 */



	
	/**
	 * [tBufferOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tBufferOutput_5", false);
		start_Hash.put("tBufferOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tBufferOutput_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row311");
					}
				
		int tos_count_tBufferOutput_5 = 0;
		

 



/**
 * [tBufferOutput_5 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_13", false);
		start_Hash.put("tFixedFlowInput_13", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_13";
	
	
		int tos_count_tFixedFlowInput_13 = 0;
		

	    for (int i_tFixedFlowInput_13 = 0 ; i_tFixedFlowInput_13 < 1 ; i_tFixedFlowInput_13++) {
	                	            	
    	            		row311.respuesta = "ERROR: El arhivo no supera las validaciones de estructura";
    	            	

 



/**
 * [tFixedFlowInput_13 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_13 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_13";
	
	

 


	tos_count_tFixedFlowInput_13++;

/**
 * [tFixedFlowInput_13 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_13";
	
	

 



/**
 * [tFixedFlowInput_13 process_data_begin ] stop
 */

	
	/**
	 * [tBufferOutput_5 main ] start
	 */

	

	
	
	currentComponent="tBufferOutput_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row311"
						
						);
					}
					



String[] row_tBufferOutput_5=new String[]{"",};		
	    if(row311.respuesta != null){
	        
	            row_tBufferOutput_5[0] = row311.respuesta;
	                        			    
	    }else{
	    	row_tBufferOutput_5[0] = null;
	    }
	globalBuffer.add(row_tBufferOutput_5);	
	
 
     row32 = row311;


	tos_count_tBufferOutput_5++;

/**
 * [tBufferOutput_5 main ] stop
 */
	
	/**
	 * [tBufferOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tBufferOutput_5";
	
	

 



/**
 * [tBufferOutput_5 process_data_begin ] stop
 */

	
	/**
	 * [tDie_5 main ] start
	 */

	

	
	
	currentComponent="tDie_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row32"
						
						);
					}
					

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_5", 5, "ERROR: El archivo no supera las validaciones de estructura", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_5_DIE_PRIORITY", 5);
	System.err.println("ERROR: El archivo no supera las validaciones de estructura");
	
	globalMap.put("tDie_5_DIE_MESSAGE", "ERROR: El archivo no supera las validaciones de estructura");
	globalMap.put("tDie_5_DIE_MESSAGES", "ERROR: El archivo no supera las validaciones de estructura");
	
	} catch (Exception | Error e_tDie_5) {
	    globalMap.put("tDie_5_ERROR_MESSAGE",e_tDie_5.getMessage());
		logIgnoredError(String.format("tDie_5 - tDie failed to log message due to internal error: %s", e_tDie_5), e_tDie_5);
	}
	
	currentComponent = "tDie_5";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_5_DIE_CODE", errorCode);        

    
	if(true){	
		TDieException e_tDie_5 = new TDieException();

		

		throw e_tDie_5;
	}

 


	tos_count_tDie_5++;

/**
 * [tDie_5 main ] stop
 */
	
	/**
	 * [tDie_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_5";
	
	

 



/**
 * [tDie_5 process_data_begin ] stop
 */
	
	/**
	 * [tDie_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_5";
	
	

 



/**
 * [tDie_5 process_data_end ] stop
 */



	
	/**
	 * [tBufferOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_5";
	
	

 



/**
 * [tBufferOutput_5 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_13";
	
	

 



/**
 * [tFixedFlowInput_13 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_13 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_13";
	
	

        }
        globalMap.put("tFixedFlowInput_13_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_13", true);
end_Hash.put("tFixedFlowInput_13", System.currentTimeMillis());




/**
 * [tFixedFlowInput_13 end ] stop
 */

	
	/**
	 * [tBufferOutput_5 end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_5";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row311");
			  	}
			  	
 

ok_Hash.put("tBufferOutput_5", true);
end_Hash.put("tBufferOutput_5", System.currentTimeMillis());




/**
 * [tBufferOutput_5 end ] stop
 */

	
	/**
	 * [tDie_5 end ] start
	 */

	

	
	
	currentComponent="tDie_5";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row32");
			  	}
			  	
 

ok_Hash.put("tDie_5", true);
end_Hash.put("tDie_5", System.currentTimeMillis());




/**
 * [tDie_5 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_13 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_13";
	
	

 



/**
 * [tFixedFlowInput_13 finally ] stop
 */

	
	/**
	 * [tBufferOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tBufferOutput_5";
	
	

 



/**
 * [tBufferOutput_5 finally ] stop
 */

	
	/**
	 * [tDie_5 finally ] start
	 */

	

	
	
	currentComponent="tDie_5";
	
	

 



/**
 * [tDie_5 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_13_SUBPROCESS_STATE", 1);
	}
	


public static class row42Struct implements routines.system.IPersistableRow<row42Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return null;
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer PROCESADO;

				public Integer getPROCESADO () {
					return this.PROCESADO;
				}

				public Boolean PROCESADOIsNullable(){
				    return true;
				}
				public Boolean PROCESADOIsKey(){
				    return false;
				}
				public Integer PROCESADOLength(){
				    return null;
				}
				public Integer PROCESADOPrecision(){
				    return null;
				}
				public String PROCESADODefault(){
				
					return null;
				
				}
				public String PROCESADOComment(){
				
				    return "";
				
				}
				public String PROCESADOPattern(){
				
					return "";
				
				}
				public String PROCESADOOriginalDbColumnName(){
				
					return "PROCESADO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PROCESADO="+String.valueOf(PROCESADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row42Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row37Struct implements routines.system.IPersistableRow<row37Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return null;
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer PROCESADO;

				public Integer getPROCESADO () {
					return this.PROCESADO;
				}

				public Boolean PROCESADOIsNullable(){
				    return true;
				}
				public Boolean PROCESADOIsKey(){
				    return false;
				}
				public Integer PROCESADOLength(){
				    return null;
				}
				public Integer PROCESADOPrecision(){
				    return null;
				}
				public String PROCESADODefault(){
				
					return null;
				
				}
				public String PROCESADOComment(){
				
				    return "";
				
				}
				public String PROCESADOPattern(){
				
					return "";
				
				}
				public String PROCESADOOriginalDbColumnName(){
				
					return "PROCESADO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PROCESADO="+String.valueOf(PROCESADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row37Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row36Struct implements routines.system.IPersistableRow<row36Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return null;
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return true;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",MENSAJE="+MENSAJE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row36Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row34Struct implements routines.system.IPersistableRow<row34Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return null;
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return true;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",MENSAJE="+MENSAJE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row34Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row33Struct implements routines.system.IPersistableRow<row33Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TOTAL;

				public Integer getTOTAL () {
					return this.TOTAL;
				}

				public Boolean TOTALIsNullable(){
				    return true;
				}
				public Boolean TOTALIsKey(){
				    return false;
				}
				public Integer TOTALLength(){
				    return null;
				}
				public Integer TOTALPrecision(){
				    return null;
				}
				public String TOTALDefault(){
				
					return null;
				
				}
				public String TOTALComment(){
				
				    return "";
				
				}
				public String TOTALPattern(){
				
					return "";
				
				}
				public String TOTALOriginalDbColumnName(){
				
					return "TOTAL";
				
				}

				
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return null;
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TOTAL = readInteger(dis);
					
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TOTAL = readInteger(dis);
					
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TOTAL,dos);
					
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TOTAL,dos);
					
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TOTAL="+String.valueOf(TOTAL));
		sb.append(",TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row33Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row33Struct row33 = new row33Struct();
row34Struct row34 = new row34Struct();
row36Struct row36 = new row36Struct();
row37Struct row37 = new row37Struct();
row42Struct row42 = new row42Struct();








	
	/**
	 * [tOracleCommit_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleCommit_2", false);
		start_Hash.put("tOracleCommit_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleCommit_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row42");
					}
				
		int tos_count_tOracleCommit_2 = 0;
		

 



/**
 * [tOracleCommit_2 begin ] stop
 */



	
	/**
	 * [tOracleOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_5", false);
		start_Hash.put("tOracleOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row37");
					}
				
		int tos_count_tOracleOutput_5 = 0;
		






        int updateKeyCount_tOracleOutput_5 = 2;
        if(updateKeyCount_tOracleOutput_5 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_5 == 3 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_5 = 0;
    int nb_line_update_tOracleOutput_5 = 0;
    int nb_line_inserted_tOracleOutput_5 = 0;
    int nb_line_deleted_tOracleOutput_5 = 0;
    int nb_line_rejected_tOracleOutput_5 = 0;

    int tmp_batchUpdateCount_tOracleOutput_5 = 0;

    int deletedCount_tOracleOutput_5=0;
    int updatedCount_tOracleOutput_5=0;
    int insertedCount_tOracleOutput_5=0;
    int rowsToCommitCount_tOracleOutput_5=0;
    int rejectedCount_tOracleOutput_5=0;

    boolean whetherReject_tOracleOutput_5 = false;

    java.sql.Connection conn_tOracleOutput_5 = null;

    //optional table
    String dbschema_tOracleOutput_5 = null;
    String tableName_tOracleOutput_5 = null;
        dbschema_tOracleOutput_5 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_5 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_5=0;

        if(dbschema_tOracleOutput_5 == null || dbschema_tOracleOutput_5.trim().length() == 0) {
            tableName_tOracleOutput_5 = ("TST_CARGUEMASIVO");
        } else {
            tableName_tOracleOutput_5 = dbschema_tOracleOutput_5 + "." + ("TST_CARGUEMASIVO");
        }
                String update_tOracleOutput_5 = "UPDATE " + tableName_tOracleOutput_5 + " SET PROCESADO = ? WHERE TDOCUMENTOS_ID = ? AND DOCUMENTO = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_5 = conn_tOracleOutput_5.prepareStatement(update_tOracleOutput_5);
                resourceMap.put("pstmt_tOracleOutput_5", pstmt_tOracleOutput_5);





 



/**
 * [tOracleOutput_5 begin ] stop
 */



	
	/**
	 * [tJavaRow_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_11", false);
		start_Hash.put("tJavaRow_11", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_11";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row36");
					}
				
		int tos_count_tJavaRow_11 = 0;
		

int nb_line_tJavaRow_11 = 0;

 



/**
 * [tJavaRow_11 begin ] stop
 */



	
	/**
	 * [tOracleOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_4", false);
		start_Hash.put("tOracleOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row34");
					}
				
		int tos_count_tOracleOutput_4 = 0;
		






    
    int nb_line_tOracleOutput_4 = 0;
    int nb_line_update_tOracleOutput_4 = 0;
    int nb_line_inserted_tOracleOutput_4 = 0;
    int nb_line_deleted_tOracleOutput_4 = 0;
    int nb_line_rejected_tOracleOutput_4 = 0;

    int tmp_batchUpdateCount_tOracleOutput_4 = 0;

    int deletedCount_tOracleOutput_4=0;
    int updatedCount_tOracleOutput_4=0;
    int insertedCount_tOracleOutput_4=0;
    int rowsToCommitCount_tOracleOutput_4=0;
    int rejectedCount_tOracleOutput_4=0;

    boolean whetherReject_tOracleOutput_4 = false;

    java.sql.Connection conn_tOracleOutput_4 = null;

    //optional table
    String dbschema_tOracleOutput_4 = null;
    String tableName_tOracleOutput_4 = null;
        dbschema_tOracleOutput_4 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_4 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_4=0;

        if(dbschema_tOracleOutput_4 == null || dbschema_tOracleOutput_4.trim().length() == 0) {
            tableName_tOracleOutput_4 = ("TST_ERRCMASIVO");
        } else {
            tableName_tOracleOutput_4 = dbschema_tOracleOutput_4 + "." + ("TST_ERRCMASIVO");
        }
                String insert_tOracleOutput_4 = "INSERT INTO " + tableName_tOracleOutput_4 + " (TDOCUMENTOS_ID,DOCUMENTO,MENSAJE) VALUES (?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_4 = conn_tOracleOutput_4.prepareStatement(insert_tOracleOutput_4);
                        resourceMap.put("pstmt_tOracleOutput_4", pstmt_tOracleOutput_4);





 



/**
 * [tOracleOutput_4 begin ] stop
 */



	
	/**
	 * [tJavaRow_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_10", false);
		start_Hash.put("tJavaRow_10", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_10";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row33");
					}
				
		int tos_count_tJavaRow_10 = 0;
		

int nb_line_tJavaRow_10 = 0;

 



/**
 * [tJavaRow_10 begin ] stop
 */



	
	/**
	 * [tOracleInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_7", false);
		start_Hash.put("tOracleInput_7", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_7";
	
	
		int tos_count_tOracleInput_7 = 0;
		
	


	
		    int nb_line_tOracleInput_7 = 0;
		    java.sql.Connection conn_tOracleInput_7 = null;
				conn_tOracleInput_7 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_7 = false;
				boolean isConnectionWrapped_tOracleInput_7 = !(conn_tOracleInput_7 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_7.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_7 = null;
                if (isConnectionWrapped_tOracleInput_7) {
					unwrappedOraConn_tOracleInput_7 = conn_tOracleInput_7.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_7 != null) {
                        isTimeZoneNull_tOracleInput_7 = (unwrappedOraConn_tOracleInput_7.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_7 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_7).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_7) {
					java.sql.Statement stmtGetTZ_tOracleInput_7 = conn_tOracleInput_7.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_7 = stmtGetTZ_tOracleInput_7.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_7 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_7.next()) {
						sessionTimezone_tOracleInput_7 = rsGetTZ_tOracleInput_7.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_7 && unwrappedOraConn_tOracleInput_7 != null) {
                        unwrappedOraConn_tOracleInput_7.setSessionTimeZone(sessionTimezone_tOracleInput_7);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_7).setSessionTimeZone(sessionTimezone_tOracleInput_7);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_7 = conn_tOracleInput_7.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_7.setFetchSize(1000);


		    String dbquery_tOracleInput_7 = "SELECT COUNT(1) AS TOTAL, \n       TC.TDOCUMENTOS_ID, \n       TC.DOCUMENTO       \nFROM TST_CARGUEMASIVO TC\nGROUP BY "
+"TC.TDOCUMENTOS_ID, TC.DOCUMENTO\nHAVING COUNT(1) > 1";
		    

		    globalMap.put("tOracleInput_7_QUERY",dbquery_tOracleInput_7);

		    java.sql.ResultSet rs_tOracleInput_7 = null;

		    try {
		    	rs_tOracleInput_7 = stmt_tOracleInput_7.executeQuery(dbquery_tOracleInput_7);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_7 = rs_tOracleInput_7.getMetaData();
		    	int colQtyInRs_tOracleInput_7 = rsmd_tOracleInput_7.getColumnCount();

		    String tmpContent_tOracleInput_7 = null;
		    
		    
		    while (rs_tOracleInput_7.next()) {
		        nb_line_tOracleInput_7++;
		        
							if(colQtyInRs_tOracleInput_7 < 1) {
								row33.TOTAL = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(1) != null) {
						row33.TOTAL = rs_tOracleInput_7.getInt(1);
					} else {
				
						row33.TOTAL = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 2) {
								row33.TDOCUMENTOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(2) != null) {
						row33.TDOCUMENTOS_ID = rs_tOracleInput_7.getInt(2);
					} else {
				
						row33.TDOCUMENTOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 3) {
								row33.DOCUMENTO = null;
							} else {
	                         		
        	row33.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 3, false);
		                    }
					




 



/**
 * [tOracleInput_7 begin ] stop
 */
	
	/**
	 * [tOracleInput_7 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 


	tos_count_tOracleInput_7++;

/**
 * [tOracleInput_7 main ] stop
 */
	
	/**
	 * [tOracleInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_10 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row33"
						
						);
					}
					

    //Code generate according to input schema and output schema
row34.TDOCUMENTOS_ID = row33.TDOCUMENTOS_ID;
row34.DOCUMENTO = row33.DOCUMENTO;
row34.MENSAJE = "La persona se encuentra " + row33.TOTAL + " veces en el archivo plano con tipo y número de documento igual";
    nb_line_tJavaRow_10++;   

 


	tos_count_tJavaRow_10++;

/**
 * [tJavaRow_10 main ] stop
 */
	
	/**
	 * [tJavaRow_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";
	
	

 



/**
 * [tJavaRow_10 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_4 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row34"
						
						);
					}
					



            row36 = null;
        whetherReject_tOracleOutput_4 = false;
                        if(row34.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_4.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_4.setInt(1, row34.TDOCUMENTOS_ID);
}

                        if(row34.DOCUMENTO == null) {
pstmt_tOracleOutput_4.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_4.setString(2, row34.DOCUMENTO);
}

                        if(row34.MENSAJE == null) {
pstmt_tOracleOutput_4.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_4.setString(3, row34.MENSAJE);
}

                try {
                    nb_line_tOracleOutput_4++;
                    int processedCount_tOracleOutput_4 = pstmt_tOracleOutput_4.executeUpdate();
                    insertedCount_tOracleOutput_4 += processedCount_tOracleOutput_4;
                    rowsToCommitCount_tOracleOutput_4 += processedCount_tOracleOutput_4;
                } catch(java.lang.Exception e_tOracleOutput_4) {
globalMap.put("tOracleOutput_4_ERROR_MESSAGE",e_tOracleOutput_4.getMessage());
                    whetherReject_tOracleOutput_4 = true;
                            System.err.print(e_tOracleOutput_4.getMessage());
                }
            if(!whetherReject_tOracleOutput_4) {
                            row36 = new row36Struct();
                                row36.TDOCUMENTOS_ID = row34.TDOCUMENTOS_ID;
                                row36.DOCUMENTO = row34.DOCUMENTO;
                                row36.MENSAJE = row34.MENSAJE;
            }

 


	tos_count_tOracleOutput_4++;

/**
 * [tOracleOutput_4 main ] stop
 */
	
	/**
	 * [tOracleOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	

 



/**
 * [tOracleOutput_4 process_data_begin ] stop
 */
// Start of branch "row36"
if(row36 != null) { 



	
	/**
	 * [tJavaRow_11 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_11";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row36"
						
						);
					}
					

    //Code generate according to input schema and output schema
row37.TDOCUMENTOS_ID = row36.TDOCUMENTOS_ID;
row37.DOCUMENTO = row36.DOCUMENTO;
row37.PROCESADO = 1;//Código de procesado con duplicados en el archivo con tipo y número de documento.


    nb_line_tJavaRow_11++;   

 


	tos_count_tJavaRow_11++;

/**
 * [tJavaRow_11 main ] stop
 */
	
	/**
	 * [tJavaRow_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_11";
	
	

 



/**
 * [tJavaRow_11 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_5 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row37"
						
						);
					}
					



            row42 = null;
        whetherReject_tOracleOutput_5 = false;
                    if(row37.PROCESADO == null) {
pstmt_tOracleOutput_5.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_5.setInt(1, row37.PROCESADO);
}


                    if(row37.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_5.setNull(2 + count_tOracleOutput_5, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_5.setInt(2 + count_tOracleOutput_5, row37.TDOCUMENTOS_ID);
}


                    if(row37.DOCUMENTO == null) {
pstmt_tOracleOutput_5.setNull(3 + count_tOracleOutput_5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_5.setString(3 + count_tOracleOutput_5, row37.DOCUMENTO);
}

                try {
                    nb_line_tOracleOutput_5++;
                    int processedCount_tOracleOutput_5 = pstmt_tOracleOutput_5.executeUpdate();
                    updatedCount_tOracleOutput_5 += processedCount_tOracleOutput_5;
                    rowsToCommitCount_tOracleOutput_5 += processedCount_tOracleOutput_5;
                } catch(java.lang.Exception e_tOracleOutput_5) {
globalMap.put("tOracleOutput_5_ERROR_MESSAGE",e_tOracleOutput_5.getMessage());
                    whetherReject_tOracleOutput_5 = true;
                            System.err.print(e_tOracleOutput_5.getMessage());
                }
            if(!whetherReject_tOracleOutput_5) {
                            row42 = new row42Struct();
                                row42.TDOCUMENTOS_ID = row37.TDOCUMENTOS_ID;
                                row42.DOCUMENTO = row37.DOCUMENTO;
                                row42.PROCESADO = row37.PROCESADO;
            }

 


	tos_count_tOracleOutput_5++;

/**
 * [tOracleOutput_5 main ] stop
 */
	
	/**
	 * [tOracleOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	

 



/**
 * [tOracleOutput_5 process_data_begin ] stop
 */
// Start of branch "row42"
if(row42 != null) { 



	
	/**
	 * [tOracleCommit_2 main ] start
	 */

	

	
	
	currentComponent="tOracleCommit_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row42"
						
						);
					}
					

	java.sql.Connection conn_tOracleCommit_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");

if(conn_tOracleCommit_2 != null && !conn_tOracleCommit_2.isClosed()) {
	
			
			conn_tOracleCommit_2.commit();
			
	
}

 


	tos_count_tOracleCommit_2++;

/**
 * [tOracleCommit_2 main ] stop
 */
	
	/**
	 * [tOracleCommit_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleCommit_2";
	
	

 



/**
 * [tOracleCommit_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleCommit_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleCommit_2";
	
	

 



/**
 * [tOracleCommit_2 process_data_end ] stop
 */

} // End of branch "row42"




	
	/**
	 * [tOracleOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	

 



/**
 * [tOracleOutput_5 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_11";
	
	

 



/**
 * [tJavaRow_11 process_data_end ] stop
 */

} // End of branch "row36"




	
	/**
	 * [tOracleOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	

 



/**
 * [tOracleOutput_4 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";
	
	

 



/**
 * [tJavaRow_10 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_7 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

}
}finally{
	if (rs_tOracleInput_7 != null) {
		rs_tOracleInput_7.close();
	}
	if (stmt_tOracleInput_7 != null) {
		stmt_tOracleInput_7.close();
	}
}

globalMap.put("tOracleInput_7_NB_LINE",nb_line_tOracleInput_7);
 

ok_Hash.put("tOracleInput_7", true);
end_Hash.put("tOracleInput_7", System.currentTimeMillis());




/**
 * [tOracleInput_7 end ] stop
 */

	
	/**
	 * [tJavaRow_10 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";
	
	

globalMap.put("tJavaRow_10_NB_LINE",nb_line_tJavaRow_10);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row33");
			  	}
			  	
 

ok_Hash.put("tJavaRow_10", true);
end_Hash.put("tJavaRow_10", System.currentTimeMillis());




/**
 * [tJavaRow_10 end ] stop
 */

	
	/**
	 * [tOracleOutput_4 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	
	



	
        if(pstmt_tOracleOutput_4 != null) {
			
				pstmt_tOracleOutput_4.close();
				resourceMap.remove("pstmt_tOracleOutput_4");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_4", true);

	
	nb_line_deleted_tOracleOutput_4=nb_line_deleted_tOracleOutput_4+ deletedCount_tOracleOutput_4;
	nb_line_update_tOracleOutput_4=nb_line_update_tOracleOutput_4 + updatedCount_tOracleOutput_4;
	nb_line_inserted_tOracleOutput_4=nb_line_inserted_tOracleOutput_4 + insertedCount_tOracleOutput_4;
	nb_line_rejected_tOracleOutput_4=nb_line_rejected_tOracleOutput_4 + rejectedCount_tOracleOutput_4;
	
        globalMap.put("tOracleOutput_4_NB_LINE",nb_line_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_UPDATED",nb_line_update_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_4);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row34");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_4", true);
end_Hash.put("tOracleOutput_4", System.currentTimeMillis());




/**
 * [tOracleOutput_4 end ] stop
 */

	
	/**
	 * [tJavaRow_11 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_11";
	
	

globalMap.put("tJavaRow_11_NB_LINE",nb_line_tJavaRow_11);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row36");
			  	}
			  	
 

ok_Hash.put("tJavaRow_11", true);
end_Hash.put("tJavaRow_11", System.currentTimeMillis());




/**
 * [tJavaRow_11 end ] stop
 */

	
	/**
	 * [tOracleOutput_5 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	
	



	
        if(pstmt_tOracleOutput_5 != null) {
			
				pstmt_tOracleOutput_5.close();
				resourceMap.remove("pstmt_tOracleOutput_5");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_5", true);

	
	nb_line_deleted_tOracleOutput_5=nb_line_deleted_tOracleOutput_5+ deletedCount_tOracleOutput_5;
	nb_line_update_tOracleOutput_5=nb_line_update_tOracleOutput_5 + updatedCount_tOracleOutput_5;
	nb_line_inserted_tOracleOutput_5=nb_line_inserted_tOracleOutput_5 + insertedCount_tOracleOutput_5;
	nb_line_rejected_tOracleOutput_5=nb_line_rejected_tOracleOutput_5 + rejectedCount_tOracleOutput_5;
	
        globalMap.put("tOracleOutput_5_NB_LINE",nb_line_tOracleOutput_5);
        globalMap.put("tOracleOutput_5_NB_LINE_UPDATED",nb_line_update_tOracleOutput_5);
        globalMap.put("tOracleOutput_5_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_5);
        globalMap.put("tOracleOutput_5_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_5);
        globalMap.put("tOracleOutput_5_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_5);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row37");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_5", true);
end_Hash.put("tOracleOutput_5", System.currentTimeMillis());




/**
 * [tOracleOutput_5 end ] stop
 */

	
	/**
	 * [tOracleCommit_2 end ] start
	 */

	

	
	
	currentComponent="tOracleCommit_2";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row42");
			  	}
			  	
 

ok_Hash.put("tOracleCommit_2", true);
end_Hash.put("tOracleCommit_2", System.currentTimeMillis());




/**
 * [tOracleCommit_2 end ] stop
 */















				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_7:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tOracleInput_29Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_7 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 finally ] stop
 */

	
	/**
	 * [tJavaRow_10 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";
	
	

 



/**
 * [tJavaRow_10 finally ] stop
 */

	
	/**
	 * [tOracleOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_4") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_4 = null;
                if ((pstmtToClose_tOracleOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_4")) != null) {
                    pstmtToClose_tOracleOutput_4.close();
                }
    }
 



/**
 * [tOracleOutput_4 finally ] stop
 */

	
	/**
	 * [tJavaRow_11 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_11";
	
	

 



/**
 * [tJavaRow_11 finally ] stop
 */

	
	/**
	 * [tOracleOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_5") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_5 = null;
                if ((pstmtToClose_tOracleOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_5")) != null) {
                    pstmtToClose_tOracleOutput_5.close();
                }
    }
 



/**
 * [tOracleOutput_5 finally ] stop
 */

	
	/**
	 * [tOracleCommit_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleCommit_2";
	
	

 



/**
 * [tOracleCommit_2 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class row87Struct implements routines.system.IPersistableRow<row87Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return null;
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer PROCESADO;

				public Integer getPROCESADO () {
					return this.PROCESADO;
				}

				public Boolean PROCESADOIsNullable(){
				    return true;
				}
				public Boolean PROCESADOIsKey(){
				    return false;
				}
				public Integer PROCESADOLength(){
				    return null;
				}
				public Integer PROCESADOPrecision(){
				    return null;
				}
				public String PROCESADODefault(){
				
					return null;
				
				}
				public String PROCESADOComment(){
				
				    return "";
				
				}
				public String PROCESADOPattern(){
				
					return "";
				
				}
				public String PROCESADOOriginalDbColumnName(){
				
					return "PROCESADO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PROCESADO="+String.valueOf(PROCESADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row87Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row86Struct implements routines.system.IPersistableRow<row86Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return null;
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer PROCESADO;

				public Integer getPROCESADO () {
					return this.PROCESADO;
				}

				public Boolean PROCESADOIsNullable(){
				    return true;
				}
				public Boolean PROCESADOIsKey(){
				    return false;
				}
				public Integer PROCESADOLength(){
				    return null;
				}
				public Integer PROCESADOPrecision(){
				    return null;
				}
				public String PROCESADODefault(){
				
					return null;
				
				}
				public String PROCESADOComment(){
				
				    return "";
				
				}
				public String PROCESADOPattern(){
				
					return "";
				
				}
				public String PROCESADOOriginalDbColumnName(){
				
					return "PROCESADO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PROCESADO="+String.valueOf(PROCESADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row86Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row85Struct implements routines.system.IPersistableRow<row85Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return true;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",MENSAJE="+MENSAJE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row85Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row84Struct implements routines.system.IPersistableRow<row84Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return true;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",MENSAJE="+MENSAJE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row84Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row83Struct implements routines.system.IPersistableRow<row83Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TOTAL;

				public Integer getTOTAL () {
					return this.TOTAL;
				}

				public Boolean TOTALIsNullable(){
				    return true;
				}
				public Boolean TOTALIsKey(){
				    return false;
				}
				public Integer TOTALLength(){
				    return 0;
				}
				public Integer TOTALPrecision(){
				    return null;
				}
				public String TOTALDefault(){
				
					return "";
				
				}
				public String TOTALComment(){
				
				    return "";
				
				}
				public String TOTALPattern(){
				
					return "";
				
				}
				public String TOTALOriginalDbColumnName(){
				
					return "TOTAL";
				
				}

				
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TOTAL = readInteger(dis);
					
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TOTAL = readInteger(dis);
					
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TOTAL,dos);
					
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TOTAL,dos);
					
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TOTAL="+String.valueOf(TOTAL));
		sb.append(",TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row83Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_29Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_29_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row83Struct row83 = new row83Struct();
row84Struct row84 = new row84Struct();
row85Struct row85 = new row85Struct();
row86Struct row86 = new row86Struct();
row87Struct row87 = new row87Struct();








	
	/**
	 * [tOracleCommit_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleCommit_5", false);
		start_Hash.put("tOracleCommit_5", System.currentTimeMillis());
		
	
	currentComponent="tOracleCommit_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row87");
					}
				
		int tos_count_tOracleCommit_5 = 0;
		

 



/**
 * [tOracleCommit_5 begin ] stop
 */



	
	/**
	 * [tOracleOutput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_11", false);
		start_Hash.put("tOracleOutput_11", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_11";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row86");
					}
				
		int tos_count_tOracleOutput_11 = 0;
		






        int updateKeyCount_tOracleOutput_11 = 2;
        if(updateKeyCount_tOracleOutput_11 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_11 == 3 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_11 = 0;
    int nb_line_update_tOracleOutput_11 = 0;
    int nb_line_inserted_tOracleOutput_11 = 0;
    int nb_line_deleted_tOracleOutput_11 = 0;
    int nb_line_rejected_tOracleOutput_11 = 0;

    int tmp_batchUpdateCount_tOracleOutput_11 = 0;

    int deletedCount_tOracleOutput_11=0;
    int updatedCount_tOracleOutput_11=0;
    int insertedCount_tOracleOutput_11=0;
    int rowsToCommitCount_tOracleOutput_11=0;
    int rejectedCount_tOracleOutput_11=0;

    boolean whetherReject_tOracleOutput_11 = false;

    java.sql.Connection conn_tOracleOutput_11 = null;

    //optional table
    String dbschema_tOracleOutput_11 = null;
    String tableName_tOracleOutput_11 = null;
        dbschema_tOracleOutput_11 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_11 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_11=0;

        if(dbschema_tOracleOutput_11 == null || dbschema_tOracleOutput_11.trim().length() == 0) {
            tableName_tOracleOutput_11 = ("TST_CARGUEMASIVO");
        } else {
            tableName_tOracleOutput_11 = dbschema_tOracleOutput_11 + "." + ("TST_CARGUEMASIVO");
        }
                String update_tOracleOutput_11 = "UPDATE " + tableName_tOracleOutput_11 + " SET PROCESADO = ? WHERE TDOCUMENTOS_ID = ? AND DOCUMENTO = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_11 = conn_tOracleOutput_11.prepareStatement(update_tOracleOutput_11);
                resourceMap.put("pstmt_tOracleOutput_11", pstmt_tOracleOutput_11);





 



/**
 * [tOracleOutput_11 begin ] stop
 */



	
	/**
	 * [tJavaRow_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_7", false);
		start_Hash.put("tJavaRow_7", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row85");
					}
				
		int tos_count_tJavaRow_7 = 0;
		

int nb_line_tJavaRow_7 = 0;

 



/**
 * [tJavaRow_7 begin ] stop
 */



	
	/**
	 * [tOracleOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_1", false);
		start_Hash.put("tOracleOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row84");
					}
				
		int tos_count_tOracleOutput_1 = 0;
		






    
    int nb_line_tOracleOutput_1 = 0;
    int nb_line_update_tOracleOutput_1 = 0;
    int nb_line_inserted_tOracleOutput_1 = 0;
    int nb_line_deleted_tOracleOutput_1 = 0;
    int nb_line_rejected_tOracleOutput_1 = 0;

    int tmp_batchUpdateCount_tOracleOutput_1 = 0;

    int deletedCount_tOracleOutput_1=0;
    int updatedCount_tOracleOutput_1=0;
    int insertedCount_tOracleOutput_1=0;
    int rowsToCommitCount_tOracleOutput_1=0;
    int rejectedCount_tOracleOutput_1=0;

    boolean whetherReject_tOracleOutput_1 = false;

    java.sql.Connection conn_tOracleOutput_1 = null;

    //optional table
    String dbschema_tOracleOutput_1 = null;
    String tableName_tOracleOutput_1 = null;
        dbschema_tOracleOutput_1 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_1=0;

        if(dbschema_tOracleOutput_1 == null || dbschema_tOracleOutput_1.trim().length() == 0) {
            tableName_tOracleOutput_1 = ("TST_ERRCMASIVO");
        } else {
            tableName_tOracleOutput_1 = dbschema_tOracleOutput_1 + "." + ("TST_ERRCMASIVO");
        }
                String insert_tOracleOutput_1 = "INSERT INTO " + tableName_tOracleOutput_1 + " (TDOCUMENTOS_ID,DOCUMENTO,MENSAJE) VALUES (?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_1 = conn_tOracleOutput_1.prepareStatement(insert_tOracleOutput_1);
                        resourceMap.put("pstmt_tOracleOutput_1", pstmt_tOracleOutput_1);





 



/**
 * [tOracleOutput_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_4", false);
		start_Hash.put("tJavaRow_4", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row83");
					}
				
		int tos_count_tJavaRow_4 = 0;
		

int nb_line_tJavaRow_4 = 0;

 



/**
 * [tJavaRow_4 begin ] stop
 */



	
	/**
	 * [tOracleInput_29 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_29", false);
		start_Hash.put("tOracleInput_29", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_29";
	
	
		int tos_count_tOracleInput_29 = 0;
		
	


	
		    int nb_line_tOracleInput_29 = 0;
		    java.sql.Connection conn_tOracleInput_29 = null;
				conn_tOracleInput_29 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_29 = false;
				boolean isConnectionWrapped_tOracleInput_29 = !(conn_tOracleInput_29 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_29.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_29 = null;
                if (isConnectionWrapped_tOracleInput_29) {
					unwrappedOraConn_tOracleInput_29 = conn_tOracleInput_29.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_29 != null) {
                        isTimeZoneNull_tOracleInput_29 = (unwrappedOraConn_tOracleInput_29.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_29 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_29).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_29) {
					java.sql.Statement stmtGetTZ_tOracleInput_29 = conn_tOracleInput_29.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_29 = stmtGetTZ_tOracleInput_29.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_29 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_29.next()) {
						sessionTimezone_tOracleInput_29 = rsGetTZ_tOracleInput_29.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_29 && unwrappedOraConn_tOracleInput_29 != null) {
                        unwrappedOraConn_tOracleInput_29.setSessionTimeZone(sessionTimezone_tOracleInput_29);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_29).setSessionTimeZone(sessionTimezone_tOracleInput_29);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_29 = conn_tOracleInput_29.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_29.setFetchSize(1000);


		    String dbquery_tOracleInput_29 = "SELECT 1 AS TOTAL,\n       TSC.TDOCUMENTOS_ID,\n       TSC.DOCUMENTO\nFROM TST_CARGUEMASIVO TSC\nWHERE TSC.PROCESADO IS"
+" NULL \nAND TSC.PERSONAS_ID IN(SELECT TC.PERSONAS_ID      \n                   FROM TST_CARGUEMASIVO TC\n               "
+"    GROUP BY TC.PERSONAS_ID\n                   HAVING COUNT(1) > 1)";
		    

		    globalMap.put("tOracleInput_29_QUERY",dbquery_tOracleInput_29);

		    java.sql.ResultSet rs_tOracleInput_29 = null;

		    try {
		    	rs_tOracleInput_29 = stmt_tOracleInput_29.executeQuery(dbquery_tOracleInput_29);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_29 = rs_tOracleInput_29.getMetaData();
		    	int colQtyInRs_tOracleInput_29 = rsmd_tOracleInput_29.getColumnCount();

		    String tmpContent_tOracleInput_29 = null;
		    
		    
		    while (rs_tOracleInput_29.next()) {
		        nb_line_tOracleInput_29++;
		        
							if(colQtyInRs_tOracleInput_29 < 1) {
								row83.TOTAL = null;
							} else {
		                          
					if(rs_tOracleInput_29.getObject(1) != null) {
						row83.TOTAL = rs_tOracleInput_29.getInt(1);
					} else {
				
						row83.TOTAL = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_29 < 2) {
								row83.TDOCUMENTOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_29.getObject(2) != null) {
						row83.TDOCUMENTOS_ID = rs_tOracleInput_29.getInt(2);
					} else {
				
						row83.TDOCUMENTOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_29 < 3) {
								row83.DOCUMENTO = null;
							} else {
	                         		
        	row83.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_29, 3, false);
		                    }
					




 



/**
 * [tOracleInput_29 begin ] stop
 */
	
	/**
	 * [tOracleInput_29 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_29";
	
	

 


	tos_count_tOracleInput_29++;

/**
 * [tOracleInput_29 main ] stop
 */
	
	/**
	 * [tOracleInput_29 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_29";
	
	

 



/**
 * [tOracleInput_29 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_4 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row83"
						
						);
					}
					

    //Code generate according to input schema and output schema
row84.TDOCUMENTOS_ID = row83.TDOCUMENTOS_ID;
row84.DOCUMENTO = row83.DOCUMENTO;
row84.MENSAJE = "La persona se encuentra " + row83.TOTAL + " veces en el archivo plano con el identificador único de la persona";
    nb_line_tJavaRow_4++;   

 


	tos_count_tJavaRow_4++;

/**
 * [tJavaRow_4 main ] stop
 */
	
	/**
	 * [tJavaRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row84"
						
						);
					}
					



            row85 = null;
        whetherReject_tOracleOutput_1 = false;
                        if(row84.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_1.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_1.setInt(1, row84.TDOCUMENTOS_ID);
}

                        if(row84.DOCUMENTO == null) {
pstmt_tOracleOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(2, row84.DOCUMENTO);
}

                        if(row84.MENSAJE == null) {
pstmt_tOracleOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(3, row84.MENSAJE);
}

                try {
                    nb_line_tOracleOutput_1++;
                    int processedCount_tOracleOutput_1 = pstmt_tOracleOutput_1.executeUpdate();
                    insertedCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                    rowsToCommitCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                } catch(java.lang.Exception e_tOracleOutput_1) {
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
                    whetherReject_tOracleOutput_1 = true;
                            System.err.print(e_tOracleOutput_1.getMessage());
                }
            if(!whetherReject_tOracleOutput_1) {
                            row85 = new row85Struct();
                                row85.TDOCUMENTOS_ID = row84.TDOCUMENTOS_ID;
                                row85.DOCUMENTO = row84.DOCUMENTO;
                                row85.MENSAJE = row84.MENSAJE;
            }

 


	tos_count_tOracleOutput_1++;

/**
 * [tOracleOutput_1 main ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_begin ] stop
 */
// Start of branch "row85"
if(row85 != null) { 



	
	/**
	 * [tJavaRow_7 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row85"
						
						);
					}
					

    //Code generate according to input schema and output schema
row86.TDOCUMENTOS_ID = row85.TDOCUMENTOS_ID;
row86.DOCUMENTO = row85.DOCUMENTO;
row86.PROCESADO = 2;//Código de procesado con duplicados en el mismo identificador único de persona.


    nb_line_tJavaRow_7++;   

 


	tos_count_tJavaRow_7++;

/**
 * [tJavaRow_7 main ] stop
 */
	
	/**
	 * [tJavaRow_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_11 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_11";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row86"
						
						);
					}
					



            row87 = null;
        whetherReject_tOracleOutput_11 = false;
                    if(row86.PROCESADO == null) {
pstmt_tOracleOutput_11.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_11.setInt(1, row86.PROCESADO);
}


                    if(row86.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_11.setNull(2 + count_tOracleOutput_11, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_11.setInt(2 + count_tOracleOutput_11, row86.TDOCUMENTOS_ID);
}


                    if(row86.DOCUMENTO == null) {
pstmt_tOracleOutput_11.setNull(3 + count_tOracleOutput_11, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_11.setString(3 + count_tOracleOutput_11, row86.DOCUMENTO);
}

                try {
                    nb_line_tOracleOutput_11++;
                    int processedCount_tOracleOutput_11 = pstmt_tOracleOutput_11.executeUpdate();
                    updatedCount_tOracleOutput_11 += processedCount_tOracleOutput_11;
                    rowsToCommitCount_tOracleOutput_11 += processedCount_tOracleOutput_11;
                } catch(java.lang.Exception e_tOracleOutput_11) {
globalMap.put("tOracleOutput_11_ERROR_MESSAGE",e_tOracleOutput_11.getMessage());
                    whetherReject_tOracleOutput_11 = true;
                            System.err.print(e_tOracleOutput_11.getMessage());
                }
            if(!whetherReject_tOracleOutput_11) {
                            row87 = new row87Struct();
                                row87.TDOCUMENTOS_ID = row86.TDOCUMENTOS_ID;
                                row87.DOCUMENTO = row86.DOCUMENTO;
                                row87.PROCESADO = row86.PROCESADO;
            }

 


	tos_count_tOracleOutput_11++;

/**
 * [tOracleOutput_11 main ] stop
 */
	
	/**
	 * [tOracleOutput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_11";
	
	

 



/**
 * [tOracleOutput_11 process_data_begin ] stop
 */
// Start of branch "row87"
if(row87 != null) { 



	
	/**
	 * [tOracleCommit_5 main ] start
	 */

	

	
	
	currentComponent="tOracleCommit_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row87"
						
						);
					}
					

	java.sql.Connection conn_tOracleCommit_5 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");

if(conn_tOracleCommit_5 != null && !conn_tOracleCommit_5.isClosed()) {
	
			
			conn_tOracleCommit_5.commit();
			
	
}

 


	tos_count_tOracleCommit_5++;

/**
 * [tOracleCommit_5 main ] stop
 */
	
	/**
	 * [tOracleCommit_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleCommit_5";
	
	

 



/**
 * [tOracleCommit_5 process_data_begin ] stop
 */
	
	/**
	 * [tOracleCommit_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleCommit_5";
	
	

 



/**
 * [tOracleCommit_5 process_data_end ] stop
 */

} // End of branch "row87"




	
	/**
	 * [tOracleOutput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_11";
	
	

 



/**
 * [tOracleOutput_11 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 process_data_end ] stop
 */

} // End of branch "row85"




	
	/**
	 * [tOracleOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_29 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_29";
	
	

 



/**
 * [tOracleInput_29 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_29 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_29";
	
	

}
}finally{
	if (rs_tOracleInput_29 != null) {
		rs_tOracleInput_29.close();
	}
	if (stmt_tOracleInput_29 != null) {
		stmt_tOracleInput_29.close();
	}
}

globalMap.put("tOracleInput_29_NB_LINE",nb_line_tOracleInput_29);
 

ok_Hash.put("tOracleInput_29", true);
end_Hash.put("tOracleInput_29", System.currentTimeMillis());




/**
 * [tOracleInput_29 end ] stop
 */

	
	/**
	 * [tJavaRow_4 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

globalMap.put("tJavaRow_4_NB_LINE",nb_line_tJavaRow_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row83");
			  	}
			  	
 

ok_Hash.put("tJavaRow_4", true);
end_Hash.put("tJavaRow_4", System.currentTimeMillis());




/**
 * [tJavaRow_4 end ] stop
 */

	
	/**
	 * [tOracleOutput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
	



	
        if(pstmt_tOracleOutput_1 != null) {
			
				pstmt_tOracleOutput_1.close();
				resourceMap.remove("pstmt_tOracleOutput_1");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_1", true);

	
	nb_line_deleted_tOracleOutput_1=nb_line_deleted_tOracleOutput_1+ deletedCount_tOracleOutput_1;
	nb_line_update_tOracleOutput_1=nb_line_update_tOracleOutput_1 + updatedCount_tOracleOutput_1;
	nb_line_inserted_tOracleOutput_1=nb_line_inserted_tOracleOutput_1 + insertedCount_tOracleOutput_1;
	nb_line_rejected_tOracleOutput_1=nb_line_rejected_tOracleOutput_1 + rejectedCount_tOracleOutput_1;
	
        globalMap.put("tOracleOutput_1_NB_LINE",nb_line_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_UPDATED",nb_line_update_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_1);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row84");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_1", true);
end_Hash.put("tOracleOutput_1", System.currentTimeMillis());




/**
 * [tOracleOutput_1 end ] stop
 */

	
	/**
	 * [tJavaRow_7 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

globalMap.put("tJavaRow_7_NB_LINE",nb_line_tJavaRow_7);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row85");
			  	}
			  	
 

ok_Hash.put("tJavaRow_7", true);
end_Hash.put("tJavaRow_7", System.currentTimeMillis());




/**
 * [tJavaRow_7 end ] stop
 */

	
	/**
	 * [tOracleOutput_11 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_11";
	
	
	



	
        if(pstmt_tOracleOutput_11 != null) {
			
				pstmt_tOracleOutput_11.close();
				resourceMap.remove("pstmt_tOracleOutput_11");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_11", true);

	
	nb_line_deleted_tOracleOutput_11=nb_line_deleted_tOracleOutput_11+ deletedCount_tOracleOutput_11;
	nb_line_update_tOracleOutput_11=nb_line_update_tOracleOutput_11 + updatedCount_tOracleOutput_11;
	nb_line_inserted_tOracleOutput_11=nb_line_inserted_tOracleOutput_11 + insertedCount_tOracleOutput_11;
	nb_line_rejected_tOracleOutput_11=nb_line_rejected_tOracleOutput_11 + rejectedCount_tOracleOutput_11;
	
        globalMap.put("tOracleOutput_11_NB_LINE",nb_line_tOracleOutput_11);
        globalMap.put("tOracleOutput_11_NB_LINE_UPDATED",nb_line_update_tOracleOutput_11);
        globalMap.put("tOracleOutput_11_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_11);
        globalMap.put("tOracleOutput_11_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_11);
        globalMap.put("tOracleOutput_11_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_11);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row86");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_11", true);
end_Hash.put("tOracleOutput_11", System.currentTimeMillis());




/**
 * [tOracleOutput_11 end ] stop
 */

	
	/**
	 * [tOracleCommit_5 end ] start
	 */

	

	
	
	currentComponent="tOracleCommit_5";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row87");
			  	}
			  	
 

ok_Hash.put("tOracleCommit_5", true);
end_Hash.put("tOracleCommit_5", System.currentTimeMillis());




/**
 * [tOracleCommit_5 end ] stop
 */















				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_29:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk13", 0, "ok");
								} 
							
							tOracleInput_30Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_29 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_29";
	
	

 



/**
 * [tOracleInput_29 finally ] stop
 */

	
	/**
	 * [tJavaRow_4 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 finally ] stop
 */

	
	/**
	 * [tOracleOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_1 = null;
                if ((pstmtToClose_tOracleOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_1")) != null) {
                    pstmtToClose_tOracleOutput_1.close();
                }
    }
 



/**
 * [tOracleOutput_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_7 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 finally ] stop
 */

	
	/**
	 * [tOracleOutput_11 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_11";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_11") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_11 = null;
                if ((pstmtToClose_tOracleOutput_11 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_11")) != null) {
                    pstmtToClose_tOracleOutput_11.close();
                }
    }
 



/**
 * [tOracleOutput_11 finally ] stop
 */

	
	/**
	 * [tOracleCommit_5 finally ] start
	 */

	

	
	
	currentComponent="tOracleCommit_5";
	
	

 



/**
 * [tOracleCommit_5 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_29_SUBPROCESS_STATE", 1);
	}
	


public static class row92Struct implements routines.system.IPersistableRow<row92Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return null;
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer PROCESADO;

				public Integer getPROCESADO () {
					return this.PROCESADO;
				}

				public Boolean PROCESADOIsNullable(){
				    return true;
				}
				public Boolean PROCESADOIsKey(){
				    return false;
				}
				public Integer PROCESADOLength(){
				    return null;
				}
				public Integer PROCESADOPrecision(){
				    return null;
				}
				public String PROCESADODefault(){
				
					return null;
				
				}
				public String PROCESADOComment(){
				
				    return "";
				
				}
				public String PROCESADOPattern(){
				
					return "";
				
				}
				public String PROCESADOOriginalDbColumnName(){
				
					return "PROCESADO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PROCESADO="+String.valueOf(PROCESADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row92Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row91Struct implements routines.system.IPersistableRow<row91Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return null;
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer PROCESADO;

				public Integer getPROCESADO () {
					return this.PROCESADO;
				}

				public Boolean PROCESADOIsNullable(){
				    return true;
				}
				public Boolean PROCESADOIsKey(){
				    return false;
				}
				public Integer PROCESADOLength(){
				    return null;
				}
				public Integer PROCESADOPrecision(){
				    return null;
				}
				public String PROCESADODefault(){
				
					return null;
				
				}
				public String PROCESADOComment(){
				
				    return "";
				
				}
				public String PROCESADOPattern(){
				
					return "";
				
				}
				public String PROCESADOOriginalDbColumnName(){
				
					return "PROCESADO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PROCESADO="+String.valueOf(PROCESADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row91Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row90Struct implements routines.system.IPersistableRow<row90Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return true;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",MENSAJE="+MENSAJE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row90Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row89Struct implements routines.system.IPersistableRow<row89Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return true;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",MENSAJE="+MENSAJE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row89Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row88Struct implements routines.system.IPersistableRow<row88Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TOTAL;

				public Integer getTOTAL () {
					return this.TOTAL;
				}

				public Boolean TOTALIsNullable(){
				    return true;
				}
				public Boolean TOTALIsKey(){
				    return false;
				}
				public Integer TOTALLength(){
				    return 0;
				}
				public Integer TOTALPrecision(){
				    return null;
				}
				public String TOTALDefault(){
				
					return "";
				
				}
				public String TOTALComment(){
				
				    return "";
				
				}
				public String TOTALPattern(){
				
					return "";
				
				}
				public String TOTALOriginalDbColumnName(){
				
					return "TOTAL";
				
				}

				
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TOTAL = readInteger(dis);
					
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TOTAL = readInteger(dis);
					
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TOTAL,dos);
					
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TOTAL,dos);
					
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TOTAL="+String.valueOf(TOTAL));
		sb.append(",TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row88Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_30Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_30_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row88Struct row88 = new row88Struct();
row89Struct row89 = new row89Struct();
row90Struct row90 = new row90Struct();
row91Struct row91 = new row91Struct();
row92Struct row92 = new row92Struct();








	
	/**
	 * [tOracleCommit_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleCommit_6", false);
		start_Hash.put("tOracleCommit_6", System.currentTimeMillis());
		
	
	currentComponent="tOracleCommit_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row92");
					}
				
		int tos_count_tOracleCommit_6 = 0;
		

 



/**
 * [tOracleCommit_6 begin ] stop
 */



	
	/**
	 * [tOracleOutput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_13", false);
		start_Hash.put("tOracleOutput_13", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_13";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row91");
					}
				
		int tos_count_tOracleOutput_13 = 0;
		






        int updateKeyCount_tOracleOutput_13 = 2;
        if(updateKeyCount_tOracleOutput_13 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_13 == 3 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_13 = 0;
    int nb_line_update_tOracleOutput_13 = 0;
    int nb_line_inserted_tOracleOutput_13 = 0;
    int nb_line_deleted_tOracleOutput_13 = 0;
    int nb_line_rejected_tOracleOutput_13 = 0;

    int tmp_batchUpdateCount_tOracleOutput_13 = 0;

    int deletedCount_tOracleOutput_13=0;
    int updatedCount_tOracleOutput_13=0;
    int insertedCount_tOracleOutput_13=0;
    int rowsToCommitCount_tOracleOutput_13=0;
    int rejectedCount_tOracleOutput_13=0;

    boolean whetherReject_tOracleOutput_13 = false;

    java.sql.Connection conn_tOracleOutput_13 = null;

    //optional table
    String dbschema_tOracleOutput_13 = null;
    String tableName_tOracleOutput_13 = null;
        dbschema_tOracleOutput_13 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_13 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_13=0;

        if(dbschema_tOracleOutput_13 == null || dbschema_tOracleOutput_13.trim().length() == 0) {
            tableName_tOracleOutput_13 = ("TST_CARGUEMASIVO");
        } else {
            tableName_tOracleOutput_13 = dbschema_tOracleOutput_13 + "." + ("TST_CARGUEMASIVO");
        }
                String update_tOracleOutput_13 = "UPDATE " + tableName_tOracleOutput_13 + " SET PROCESADO = ? WHERE TDOCUMENTOS_ID = ? AND DOCUMENTO = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_13 = conn_tOracleOutput_13.prepareStatement(update_tOracleOutput_13);
                resourceMap.put("pstmt_tOracleOutput_13", pstmt_tOracleOutput_13);





 



/**
 * [tOracleOutput_13 begin ] stop
 */



	
	/**
	 * [tJavaRow_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_17", false);
		start_Hash.put("tJavaRow_17", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_17";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row90");
					}
				
		int tos_count_tJavaRow_17 = 0;
		

int nb_line_tJavaRow_17 = 0;

 



/**
 * [tJavaRow_17 begin ] stop
 */



	
	/**
	 * [tOracleOutput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_12", false);
		start_Hash.put("tOracleOutput_12", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_12";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row89");
					}
				
		int tos_count_tOracleOutput_12 = 0;
		






    
    int nb_line_tOracleOutput_12 = 0;
    int nb_line_update_tOracleOutput_12 = 0;
    int nb_line_inserted_tOracleOutput_12 = 0;
    int nb_line_deleted_tOracleOutput_12 = 0;
    int nb_line_rejected_tOracleOutput_12 = 0;

    int tmp_batchUpdateCount_tOracleOutput_12 = 0;

    int deletedCount_tOracleOutput_12=0;
    int updatedCount_tOracleOutput_12=0;
    int insertedCount_tOracleOutput_12=0;
    int rowsToCommitCount_tOracleOutput_12=0;
    int rejectedCount_tOracleOutput_12=0;

    boolean whetherReject_tOracleOutput_12 = false;

    java.sql.Connection conn_tOracleOutput_12 = null;

    //optional table
    String dbschema_tOracleOutput_12 = null;
    String tableName_tOracleOutput_12 = null;
        dbschema_tOracleOutput_12 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_12 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_12=0;

        if(dbschema_tOracleOutput_12 == null || dbschema_tOracleOutput_12.trim().length() == 0) {
            tableName_tOracleOutput_12 = ("TST_ERRCMASIVO");
        } else {
            tableName_tOracleOutput_12 = dbschema_tOracleOutput_12 + "." + ("TST_ERRCMASIVO");
        }
                String insert_tOracleOutput_12 = "INSERT INTO " + tableName_tOracleOutput_12 + " (TDOCUMENTOS_ID,DOCUMENTO,MENSAJE) VALUES (?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_12 = conn_tOracleOutput_12.prepareStatement(insert_tOracleOutput_12);
                        resourceMap.put("pstmt_tOracleOutput_12", pstmt_tOracleOutput_12);





 



/**
 * [tOracleOutput_12 begin ] stop
 */



	
	/**
	 * [tJavaRow_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_16", false);
		start_Hash.put("tJavaRow_16", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_16";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row88");
					}
				
		int tos_count_tJavaRow_16 = 0;
		

int nb_line_tJavaRow_16 = 0;

 



/**
 * [tJavaRow_16 begin ] stop
 */



	
	/**
	 * [tOracleInput_30 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_30", false);
		start_Hash.put("tOracleInput_30", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_30";
	
	
		int tos_count_tOracleInput_30 = 0;
		
	


	
		    int nb_line_tOracleInput_30 = 0;
		    java.sql.Connection conn_tOracleInput_30 = null;
				conn_tOracleInput_30 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_30 = false;
				boolean isConnectionWrapped_tOracleInput_30 = !(conn_tOracleInput_30 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_30.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_30 = null;
                if (isConnectionWrapped_tOracleInput_30) {
					unwrappedOraConn_tOracleInput_30 = conn_tOracleInput_30.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_30 != null) {
                        isTimeZoneNull_tOracleInput_30 = (unwrappedOraConn_tOracleInput_30.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_30 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_30).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_30) {
					java.sql.Statement stmtGetTZ_tOracleInput_30 = conn_tOracleInput_30.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_30 = stmtGetTZ_tOracleInput_30.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_30 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_30.next()) {
						sessionTimezone_tOracleInput_30 = rsGetTZ_tOracleInput_30.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_30 && unwrappedOraConn_tOracleInput_30 != null) {
                        unwrappedOraConn_tOracleInput_30.setSessionTimeZone(sessionTimezone_tOracleInput_30);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_30).setSessionTimeZone(sessionTimezone_tOracleInput_30);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_30 = conn_tOracleInput_30.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_30.setFetchSize(1000);


		    String dbquery_tOracleInput_30 = "SELECT 1 AS TOTAL,\n       TSC.TDOCUMENTOS_ID,\n       TSC.DOCUMENTO\nFROM TST_CARGUEMASIVO TSC\nWHERE TSC.PROCESADO IS"
+" NULL\nAND TSC.AFILIADO_ID IN(SELECT TC.AFILIADO_ID      \n                   FROM TST_CARGUEMASIVO TC\n                "
+"   GROUP BY TC.AFILIADO_ID\n                   HAVING COUNT(1) > 1)";
		    

		    globalMap.put("tOracleInput_30_QUERY",dbquery_tOracleInput_30);

		    java.sql.ResultSet rs_tOracleInput_30 = null;

		    try {
		    	rs_tOracleInput_30 = stmt_tOracleInput_30.executeQuery(dbquery_tOracleInput_30);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_30 = rs_tOracleInput_30.getMetaData();
		    	int colQtyInRs_tOracleInput_30 = rsmd_tOracleInput_30.getColumnCount();

		    String tmpContent_tOracleInput_30 = null;
		    
		    
		    while (rs_tOracleInput_30.next()) {
		        nb_line_tOracleInput_30++;
		        
							if(colQtyInRs_tOracleInput_30 < 1) {
								row88.TOTAL = null;
							} else {
		                          
					if(rs_tOracleInput_30.getObject(1) != null) {
						row88.TOTAL = rs_tOracleInput_30.getInt(1);
					} else {
				
						row88.TOTAL = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_30 < 2) {
								row88.TDOCUMENTOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_30.getObject(2) != null) {
						row88.TDOCUMENTOS_ID = rs_tOracleInput_30.getInt(2);
					} else {
				
						row88.TDOCUMENTOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_30 < 3) {
								row88.DOCUMENTO = null;
							} else {
	                         		
        	row88.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_30, 3, false);
		                    }
					




 



/**
 * [tOracleInput_30 begin ] stop
 */
	
	/**
	 * [tOracleInput_30 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_30";
	
	

 


	tos_count_tOracleInput_30++;

/**
 * [tOracleInput_30 main ] stop
 */
	
	/**
	 * [tOracleInput_30 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_30";
	
	

 



/**
 * [tOracleInput_30 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_16 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_16";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row88"
						
						);
					}
					

    //Code generate according to input schema and output schema
row89.TDOCUMENTOS_ID = row88.TDOCUMENTOS_ID;
row89.DOCUMENTO = row88.DOCUMENTO;
row89.MENSAJE = "La persona se encuentra " + row88.TOTAL + " veces en el archivo plano con el identificador único del afiliado";
    nb_line_tJavaRow_16++;   

 


	tos_count_tJavaRow_16++;

/**
 * [tJavaRow_16 main ] stop
 */
	
	/**
	 * [tJavaRow_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_16";
	
	

 



/**
 * [tJavaRow_16 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_12 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_12";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row89"
						
						);
					}
					



            row90 = null;
        whetherReject_tOracleOutput_12 = false;
                        if(row89.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_12.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_12.setInt(1, row89.TDOCUMENTOS_ID);
}

                        if(row89.DOCUMENTO == null) {
pstmt_tOracleOutput_12.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_12.setString(2, row89.DOCUMENTO);
}

                        if(row89.MENSAJE == null) {
pstmt_tOracleOutput_12.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_12.setString(3, row89.MENSAJE);
}

                try {
                    nb_line_tOracleOutput_12++;
                    int processedCount_tOracleOutput_12 = pstmt_tOracleOutput_12.executeUpdate();
                    insertedCount_tOracleOutput_12 += processedCount_tOracleOutput_12;
                    rowsToCommitCount_tOracleOutput_12 += processedCount_tOracleOutput_12;
                } catch(java.lang.Exception e_tOracleOutput_12) {
globalMap.put("tOracleOutput_12_ERROR_MESSAGE",e_tOracleOutput_12.getMessage());
                    whetherReject_tOracleOutput_12 = true;
                            System.err.print(e_tOracleOutput_12.getMessage());
                }
            if(!whetherReject_tOracleOutput_12) {
                            row90 = new row90Struct();
                                row90.TDOCUMENTOS_ID = row89.TDOCUMENTOS_ID;
                                row90.DOCUMENTO = row89.DOCUMENTO;
                                row90.MENSAJE = row89.MENSAJE;
            }

 


	tos_count_tOracleOutput_12++;

/**
 * [tOracleOutput_12 main ] stop
 */
	
	/**
	 * [tOracleOutput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_12";
	
	

 



/**
 * [tOracleOutput_12 process_data_begin ] stop
 */
// Start of branch "row90"
if(row90 != null) { 



	
	/**
	 * [tJavaRow_17 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_17";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row90"
						
						);
					}
					

    //Code generate according to input schema and output schema
row91.TDOCUMENTOS_ID = row90.TDOCUMENTOS_ID;
row91.DOCUMENTO = row90.DOCUMENTO;
row91.PROCESADO = 3;//Código de procesado con duplicados en el archivo con el mismo identificador único de afiliado.


    nb_line_tJavaRow_17++;   

 


	tos_count_tJavaRow_17++;

/**
 * [tJavaRow_17 main ] stop
 */
	
	/**
	 * [tJavaRow_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_17";
	
	

 



/**
 * [tJavaRow_17 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_13 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_13";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row91"
						
						);
					}
					



            row92 = null;
        whetherReject_tOracleOutput_13 = false;
                    if(row91.PROCESADO == null) {
pstmt_tOracleOutput_13.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_13.setInt(1, row91.PROCESADO);
}


                    if(row91.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_13.setNull(2 + count_tOracleOutput_13, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_13.setInt(2 + count_tOracleOutput_13, row91.TDOCUMENTOS_ID);
}


                    if(row91.DOCUMENTO == null) {
pstmt_tOracleOutput_13.setNull(3 + count_tOracleOutput_13, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_13.setString(3 + count_tOracleOutput_13, row91.DOCUMENTO);
}

                try {
                    nb_line_tOracleOutput_13++;
                    int processedCount_tOracleOutput_13 = pstmt_tOracleOutput_13.executeUpdate();
                    updatedCount_tOracleOutput_13 += processedCount_tOracleOutput_13;
                    rowsToCommitCount_tOracleOutput_13 += processedCount_tOracleOutput_13;
                } catch(java.lang.Exception e_tOracleOutput_13) {
globalMap.put("tOracleOutput_13_ERROR_MESSAGE",e_tOracleOutput_13.getMessage());
                    whetherReject_tOracleOutput_13 = true;
                            System.err.print(e_tOracleOutput_13.getMessage());
                }
            if(!whetherReject_tOracleOutput_13) {
                            row92 = new row92Struct();
                                row92.TDOCUMENTOS_ID = row91.TDOCUMENTOS_ID;
                                row92.DOCUMENTO = row91.DOCUMENTO;
                                row92.PROCESADO = row91.PROCESADO;
            }

 


	tos_count_tOracleOutput_13++;

/**
 * [tOracleOutput_13 main ] stop
 */
	
	/**
	 * [tOracleOutput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_13";
	
	

 



/**
 * [tOracleOutput_13 process_data_begin ] stop
 */
// Start of branch "row92"
if(row92 != null) { 



	
	/**
	 * [tOracleCommit_6 main ] start
	 */

	

	
	
	currentComponent="tOracleCommit_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row92"
						
						);
					}
					

	java.sql.Connection conn_tOracleCommit_6 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");

if(conn_tOracleCommit_6 != null && !conn_tOracleCommit_6.isClosed()) {
	
			
			conn_tOracleCommit_6.commit();
			
	
}

 


	tos_count_tOracleCommit_6++;

/**
 * [tOracleCommit_6 main ] stop
 */
	
	/**
	 * [tOracleCommit_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleCommit_6";
	
	

 



/**
 * [tOracleCommit_6 process_data_begin ] stop
 */
	
	/**
	 * [tOracleCommit_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleCommit_6";
	
	

 



/**
 * [tOracleCommit_6 process_data_end ] stop
 */

} // End of branch "row92"




	
	/**
	 * [tOracleOutput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_13";
	
	

 



/**
 * [tOracleOutput_13 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_17";
	
	

 



/**
 * [tJavaRow_17 process_data_end ] stop
 */

} // End of branch "row90"




	
	/**
	 * [tOracleOutput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_12";
	
	

 



/**
 * [tOracleOutput_12 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_16";
	
	

 



/**
 * [tJavaRow_16 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_30 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_30";
	
	

 



/**
 * [tOracleInput_30 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_30 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_30";
	
	

}
}finally{
	if (rs_tOracleInput_30 != null) {
		rs_tOracleInput_30.close();
	}
	if (stmt_tOracleInput_30 != null) {
		stmt_tOracleInput_30.close();
	}
}

globalMap.put("tOracleInput_30_NB_LINE",nb_line_tOracleInput_30);
 

ok_Hash.put("tOracleInput_30", true);
end_Hash.put("tOracleInput_30", System.currentTimeMillis());




/**
 * [tOracleInput_30 end ] stop
 */

	
	/**
	 * [tJavaRow_16 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_16";
	
	

globalMap.put("tJavaRow_16_NB_LINE",nb_line_tJavaRow_16);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row88");
			  	}
			  	
 

ok_Hash.put("tJavaRow_16", true);
end_Hash.put("tJavaRow_16", System.currentTimeMillis());




/**
 * [tJavaRow_16 end ] stop
 */

	
	/**
	 * [tOracleOutput_12 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_12";
	
	
	



	
        if(pstmt_tOracleOutput_12 != null) {
			
				pstmt_tOracleOutput_12.close();
				resourceMap.remove("pstmt_tOracleOutput_12");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_12", true);

	
	nb_line_deleted_tOracleOutput_12=nb_line_deleted_tOracleOutput_12+ deletedCount_tOracleOutput_12;
	nb_line_update_tOracleOutput_12=nb_line_update_tOracleOutput_12 + updatedCount_tOracleOutput_12;
	nb_line_inserted_tOracleOutput_12=nb_line_inserted_tOracleOutput_12 + insertedCount_tOracleOutput_12;
	nb_line_rejected_tOracleOutput_12=nb_line_rejected_tOracleOutput_12 + rejectedCount_tOracleOutput_12;
	
        globalMap.put("tOracleOutput_12_NB_LINE",nb_line_tOracleOutput_12);
        globalMap.put("tOracleOutput_12_NB_LINE_UPDATED",nb_line_update_tOracleOutput_12);
        globalMap.put("tOracleOutput_12_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_12);
        globalMap.put("tOracleOutput_12_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_12);
        globalMap.put("tOracleOutput_12_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_12);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row89");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_12", true);
end_Hash.put("tOracleOutput_12", System.currentTimeMillis());




/**
 * [tOracleOutput_12 end ] stop
 */

	
	/**
	 * [tJavaRow_17 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_17";
	
	

globalMap.put("tJavaRow_17_NB_LINE",nb_line_tJavaRow_17);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row90");
			  	}
			  	
 

ok_Hash.put("tJavaRow_17", true);
end_Hash.put("tJavaRow_17", System.currentTimeMillis());




/**
 * [tJavaRow_17 end ] stop
 */

	
	/**
	 * [tOracleOutput_13 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_13";
	
	
	



	
        if(pstmt_tOracleOutput_13 != null) {
			
				pstmt_tOracleOutput_13.close();
				resourceMap.remove("pstmt_tOracleOutput_13");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_13", true);

	
	nb_line_deleted_tOracleOutput_13=nb_line_deleted_tOracleOutput_13+ deletedCount_tOracleOutput_13;
	nb_line_update_tOracleOutput_13=nb_line_update_tOracleOutput_13 + updatedCount_tOracleOutput_13;
	nb_line_inserted_tOracleOutput_13=nb_line_inserted_tOracleOutput_13 + insertedCount_tOracleOutput_13;
	nb_line_rejected_tOracleOutput_13=nb_line_rejected_tOracleOutput_13 + rejectedCount_tOracleOutput_13;
	
        globalMap.put("tOracleOutput_13_NB_LINE",nb_line_tOracleOutput_13);
        globalMap.put("tOracleOutput_13_NB_LINE_UPDATED",nb_line_update_tOracleOutput_13);
        globalMap.put("tOracleOutput_13_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_13);
        globalMap.put("tOracleOutput_13_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_13);
        globalMap.put("tOracleOutput_13_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_13);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row91");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_13", true);
end_Hash.put("tOracleOutput_13", System.currentTimeMillis());




/**
 * [tOracleOutput_13 end ] stop
 */

	
	/**
	 * [tOracleCommit_6 end ] start
	 */

	

	
	
	currentComponent="tOracleCommit_6";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row92");
			  	}
			  	
 

ok_Hash.put("tOracleCommit_6", true);
end_Hash.put("tOracleCommit_6", System.currentTimeMillis());




/**
 * [tOracleCommit_6 end ] stop
 */















				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_30:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk14", 0, "ok");
								} 
							
							tOracleInput_38Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_30 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_30";
	
	

 



/**
 * [tOracleInput_30 finally ] stop
 */

	
	/**
	 * [tJavaRow_16 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_16";
	
	

 



/**
 * [tJavaRow_16 finally ] stop
 */

	
	/**
	 * [tOracleOutput_12 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_12";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_12") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_12 = null;
                if ((pstmtToClose_tOracleOutput_12 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_12")) != null) {
                    pstmtToClose_tOracleOutput_12.close();
                }
    }
 



/**
 * [tOracleOutput_12 finally ] stop
 */

	
	/**
	 * [tJavaRow_17 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_17";
	
	

 



/**
 * [tJavaRow_17 finally ] stop
 */

	
	/**
	 * [tOracleOutput_13 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_13";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_13") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_13 = null;
                if ((pstmtToClose_tOracleOutput_13 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_13")) != null) {
                    pstmtToClose_tOracleOutput_13.close();
                }
    }
 



/**
 * [tOracleOutput_13 finally ] stop
 */

	
	/**
	 * [tOracleCommit_6 finally ] start
	 */

	

	
	
	currentComponent="tOracleCommit_6";
	
	

 



/**
 * [tOracleCommit_6 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_30_SUBPROCESS_STATE", 1);
	}
	


public static class row134Struct implements routines.system.IPersistableRow<row134Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return null;
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer PROCESADO;

				public Integer getPROCESADO () {
					return this.PROCESADO;
				}

				public Boolean PROCESADOIsNullable(){
				    return true;
				}
				public Boolean PROCESADOIsKey(){
				    return false;
				}
				public Integer PROCESADOLength(){
				    return null;
				}
				public Integer PROCESADOPrecision(){
				    return null;
				}
				public String PROCESADODefault(){
				
					return null;
				
				}
				public String PROCESADOComment(){
				
				    return "";
				
				}
				public String PROCESADOPattern(){
				
					return "";
				
				}
				public String PROCESADOOriginalDbColumnName(){
				
					return "PROCESADO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PROCESADO="+String.valueOf(PROCESADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row134Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row133Struct implements routines.system.IPersistableRow<row133Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return null;
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer PROCESADO;

				public Integer getPROCESADO () {
					return this.PROCESADO;
				}

				public Boolean PROCESADOIsNullable(){
				    return true;
				}
				public Boolean PROCESADOIsKey(){
				    return false;
				}
				public Integer PROCESADOLength(){
				    return null;
				}
				public Integer PROCESADOPrecision(){
				    return null;
				}
				public String PROCESADODefault(){
				
					return null;
				
				}
				public String PROCESADOComment(){
				
				    return "";
				
				}
				public String PROCESADOPattern(){
				
					return "";
				
				}
				public String PROCESADOOriginalDbColumnName(){
				
					return "PROCESADO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PROCESADO="+String.valueOf(PROCESADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row133Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row132Struct implements routines.system.IPersistableRow<row132Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return true;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",MENSAJE="+MENSAJE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row132Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row131Struct implements routines.system.IPersistableRow<row131Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return true;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",MENSAJE="+MENSAJE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row131Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row130Struct implements routines.system.IPersistableRow<row130Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TOTAL;

				public Integer getTOTAL () {
					return this.TOTAL;
				}

				public Boolean TOTALIsNullable(){
				    return true;
				}
				public Boolean TOTALIsKey(){
				    return false;
				}
				public Integer TOTALLength(){
				    return 0;
				}
				public Integer TOTALPrecision(){
				    return null;
				}
				public String TOTALDefault(){
				
					return "";
				
				}
				public String TOTALComment(){
				
				    return "";
				
				}
				public String TOTALPattern(){
				
					return "";
				
				}
				public String TOTALOriginalDbColumnName(){
				
					return "TOTAL";
				
				}

				
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TOTAL = readInteger(dis);
					
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TOTAL = readInteger(dis);
					
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TOTAL,dos);
					
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TOTAL,dos);
					
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TOTAL="+String.valueOf(TOTAL));
		sb.append(",TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row130Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_38Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_38_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row130Struct row130 = new row130Struct();
row131Struct row131 = new row131Struct();
row132Struct row132 = new row132Struct();
row133Struct row133 = new row133Struct();
row134Struct row134 = new row134Struct();








	
	/**
	 * [tOracleCommit_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleCommit_11", false);
		start_Hash.put("tOracleCommit_11", System.currentTimeMillis());
		
	
	currentComponent="tOracleCommit_11";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row134");
					}
				
		int tos_count_tOracleCommit_11 = 0;
		

 



/**
 * [tOracleCommit_11 begin ] stop
 */



	
	/**
	 * [tOracleOutput_42 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_42", false);
		start_Hash.put("tOracleOutput_42", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_42";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row133");
					}
				
		int tos_count_tOracleOutput_42 = 0;
		






        int updateKeyCount_tOracleOutput_42 = 2;
        if(updateKeyCount_tOracleOutput_42 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_42 == 3 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_42 = 0;
    int nb_line_update_tOracleOutput_42 = 0;
    int nb_line_inserted_tOracleOutput_42 = 0;
    int nb_line_deleted_tOracleOutput_42 = 0;
    int nb_line_rejected_tOracleOutput_42 = 0;

    int tmp_batchUpdateCount_tOracleOutput_42 = 0;

    int deletedCount_tOracleOutput_42=0;
    int updatedCount_tOracleOutput_42=0;
    int insertedCount_tOracleOutput_42=0;
    int rowsToCommitCount_tOracleOutput_42=0;
    int rejectedCount_tOracleOutput_42=0;

    boolean whetherReject_tOracleOutput_42 = false;

    java.sql.Connection conn_tOracleOutput_42 = null;

    //optional table
    String dbschema_tOracleOutput_42 = null;
    String tableName_tOracleOutput_42 = null;
        dbschema_tOracleOutput_42 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_42 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_42=0;

        if(dbschema_tOracleOutput_42 == null || dbschema_tOracleOutput_42.trim().length() == 0) {
            tableName_tOracleOutput_42 = ("TST_CARGUEMASIVO");
        } else {
            tableName_tOracleOutput_42 = dbschema_tOracleOutput_42 + "." + ("TST_CARGUEMASIVO");
        }
                String update_tOracleOutput_42 = "UPDATE " + tableName_tOracleOutput_42 + " SET PROCESADO = ? WHERE TDOCUMENTOS_ID = ? AND DOCUMENTO = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_42 = conn_tOracleOutput_42.prepareStatement(update_tOracleOutput_42);
                resourceMap.put("pstmt_tOracleOutput_42", pstmt_tOracleOutput_42);





 



/**
 * [tOracleOutput_42 begin ] stop
 */



	
	/**
	 * [tJavaRow_26 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_26", false);
		start_Hash.put("tJavaRow_26", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_26";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row132");
					}
				
		int tos_count_tJavaRow_26 = 0;
		

int nb_line_tJavaRow_26 = 0;

 



/**
 * [tJavaRow_26 begin ] stop
 */



	
	/**
	 * [tOracleOutput_41 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_41", false);
		start_Hash.put("tOracleOutput_41", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_41";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row131");
					}
				
		int tos_count_tOracleOutput_41 = 0;
		






    
    int nb_line_tOracleOutput_41 = 0;
    int nb_line_update_tOracleOutput_41 = 0;
    int nb_line_inserted_tOracleOutput_41 = 0;
    int nb_line_deleted_tOracleOutput_41 = 0;
    int nb_line_rejected_tOracleOutput_41 = 0;

    int tmp_batchUpdateCount_tOracleOutput_41 = 0;

    int deletedCount_tOracleOutput_41=0;
    int updatedCount_tOracleOutput_41=0;
    int insertedCount_tOracleOutput_41=0;
    int rowsToCommitCount_tOracleOutput_41=0;
    int rejectedCount_tOracleOutput_41=0;

    boolean whetherReject_tOracleOutput_41 = false;

    java.sql.Connection conn_tOracleOutput_41 = null;

    //optional table
    String dbschema_tOracleOutput_41 = null;
    String tableName_tOracleOutput_41 = null;
        dbschema_tOracleOutput_41 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_41 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_41=0;

        if(dbschema_tOracleOutput_41 == null || dbschema_tOracleOutput_41.trim().length() == 0) {
            tableName_tOracleOutput_41 = ("TST_ERRCMASIVO");
        } else {
            tableName_tOracleOutput_41 = dbschema_tOracleOutput_41 + "." + ("TST_ERRCMASIVO");
        }
                String insert_tOracleOutput_41 = "INSERT INTO " + tableName_tOracleOutput_41 + " (TDOCUMENTOS_ID,DOCUMENTO,MENSAJE) VALUES (?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_41 = conn_tOracleOutput_41.prepareStatement(insert_tOracleOutput_41);
                        resourceMap.put("pstmt_tOracleOutput_41", pstmt_tOracleOutput_41);





 



/**
 * [tOracleOutput_41 begin ] stop
 */



	
	/**
	 * [tJavaRow_25 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_25", false);
		start_Hash.put("tJavaRow_25", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_25";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row130");
					}
				
		int tos_count_tJavaRow_25 = 0;
		

int nb_line_tJavaRow_25 = 0;

 



/**
 * [tJavaRow_25 begin ] stop
 */



	
	/**
	 * [tOracleInput_38 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_38", false);
		start_Hash.put("tOracleInput_38", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_38";
	
	
		int tos_count_tOracleInput_38 = 0;
		
	


	
		    int nb_line_tOracleInput_38 = 0;
		    java.sql.Connection conn_tOracleInput_38 = null;
				conn_tOracleInput_38 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_38 = false;
				boolean isConnectionWrapped_tOracleInput_38 = !(conn_tOracleInput_38 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_38.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_38 = null;
                if (isConnectionWrapped_tOracleInput_38) {
					unwrappedOraConn_tOracleInput_38 = conn_tOracleInput_38.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_38 != null) {
                        isTimeZoneNull_tOracleInput_38 = (unwrappedOraConn_tOracleInput_38.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_38 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_38).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_38) {
					java.sql.Statement stmtGetTZ_tOracleInput_38 = conn_tOracleInput_38.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_38 = stmtGetTZ_tOracleInput_38.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_38 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_38.next()) {
						sessionTimezone_tOracleInput_38 = rsGetTZ_tOracleInput_38.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_38 && unwrappedOraConn_tOracleInput_38 != null) {
                        unwrappedOraConn_tOracleInput_38.setSessionTimeZone(sessionTimezone_tOracleInput_38);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_38).setSessionTimeZone(sessionTimezone_tOracleInput_38);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_38 = conn_tOracleInput_38.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_38.setFetchSize(1000);


		    String dbquery_tOracleInput_38 = "SELECT 1 AS TOTAL,\n       TSC.TDOCUMENTOS_ID,\n       TSC.DOCUMENTO\nFROM TST_CARGUEMASIVO TSC\nWHERE TSC.PROCESADO IS"
+" NULL\nAND TSC.ID_BDUA IN(SELECT TC.ID_BDUA      \n                   FROM TST_CARGUEMASIVO TC\n                   GROUP"
+" BY TC.ID_BDUA\n                   HAVING COUNT(1) > 1)";
		    

		    globalMap.put("tOracleInput_38_QUERY",dbquery_tOracleInput_38);

		    java.sql.ResultSet rs_tOracleInput_38 = null;

		    try {
		    	rs_tOracleInput_38 = stmt_tOracleInput_38.executeQuery(dbquery_tOracleInput_38);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_38 = rs_tOracleInput_38.getMetaData();
		    	int colQtyInRs_tOracleInput_38 = rsmd_tOracleInput_38.getColumnCount();

		    String tmpContent_tOracleInput_38 = null;
		    
		    
		    while (rs_tOracleInput_38.next()) {
		        nb_line_tOracleInput_38++;
		        
							if(colQtyInRs_tOracleInput_38 < 1) {
								row130.TOTAL = null;
							} else {
		                          
					if(rs_tOracleInput_38.getObject(1) != null) {
						row130.TOTAL = rs_tOracleInput_38.getInt(1);
					} else {
				
						row130.TOTAL = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_38 < 2) {
								row130.TDOCUMENTOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_38.getObject(2) != null) {
						row130.TDOCUMENTOS_ID = rs_tOracleInput_38.getInt(2);
					} else {
				
						row130.TDOCUMENTOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_38 < 3) {
								row130.DOCUMENTO = null;
							} else {
	                         		
        	row130.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_38, 3, false);
		                    }
					




 



/**
 * [tOracleInput_38 begin ] stop
 */
	
	/**
	 * [tOracleInput_38 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_38";
	
	

 


	tos_count_tOracleInput_38++;

/**
 * [tOracleInput_38 main ] stop
 */
	
	/**
	 * [tOracleInput_38 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_38";
	
	

 



/**
 * [tOracleInput_38 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_25 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_25";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row130"
						
						);
					}
					

    //Code generate according to input schema and output schema
row131.TDOCUMENTOS_ID = row130.TDOCUMENTOS_ID;
row131.DOCUMENTO = row130.DOCUMENTO;
row131.MENSAJE = "La persona tiene duplicado " + row130.TOTAL + " veces el ID_BDUA en el archivo plano";
    nb_line_tJavaRow_25++;   

 


	tos_count_tJavaRow_25++;

/**
 * [tJavaRow_25 main ] stop
 */
	
	/**
	 * [tJavaRow_25 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_25";
	
	

 



/**
 * [tJavaRow_25 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_41 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_41";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row131"
						
						);
					}
					



            row132 = null;
        whetherReject_tOracleOutput_41 = false;
                        if(row131.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_41.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_41.setInt(1, row131.TDOCUMENTOS_ID);
}

                        if(row131.DOCUMENTO == null) {
pstmt_tOracleOutput_41.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_41.setString(2, row131.DOCUMENTO);
}

                        if(row131.MENSAJE == null) {
pstmt_tOracleOutput_41.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_41.setString(3, row131.MENSAJE);
}

                try {
                    nb_line_tOracleOutput_41++;
                    int processedCount_tOracleOutput_41 = pstmt_tOracleOutput_41.executeUpdate();
                    insertedCount_tOracleOutput_41 += processedCount_tOracleOutput_41;
                    rowsToCommitCount_tOracleOutput_41 += processedCount_tOracleOutput_41;
                } catch(java.lang.Exception e_tOracleOutput_41) {
globalMap.put("tOracleOutput_41_ERROR_MESSAGE",e_tOracleOutput_41.getMessage());
                    whetherReject_tOracleOutput_41 = true;
                            System.err.print(e_tOracleOutput_41.getMessage());
                }
            if(!whetherReject_tOracleOutput_41) {
                            row132 = new row132Struct();
                                row132.TDOCUMENTOS_ID = row131.TDOCUMENTOS_ID;
                                row132.DOCUMENTO = row131.DOCUMENTO;
                                row132.MENSAJE = row131.MENSAJE;
            }

 


	tos_count_tOracleOutput_41++;

/**
 * [tOracleOutput_41 main ] stop
 */
	
	/**
	 * [tOracleOutput_41 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_41";
	
	

 



/**
 * [tOracleOutput_41 process_data_begin ] stop
 */
// Start of branch "row132"
if(row132 != null) { 



	
	/**
	 * [tJavaRow_26 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_26";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row132"
						
						);
					}
					

    //Code generate according to input schema and output schema
row133.TDOCUMENTOS_ID = row132.TDOCUMENTOS_ID;
row133.DOCUMENTO = row132.DOCUMENTO;
row133.PROCESADO = 9;//Código de procesado con duplicados en el archivo con el mismo ID_BDUA.


    nb_line_tJavaRow_26++;   

 


	tos_count_tJavaRow_26++;

/**
 * [tJavaRow_26 main ] stop
 */
	
	/**
	 * [tJavaRow_26 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_26";
	
	

 



/**
 * [tJavaRow_26 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_42 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_42";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row133"
						
						);
					}
					



            row134 = null;
        whetherReject_tOracleOutput_42 = false;
                    if(row133.PROCESADO == null) {
pstmt_tOracleOutput_42.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_42.setInt(1, row133.PROCESADO);
}


                    if(row133.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_42.setNull(2 + count_tOracleOutput_42, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_42.setInt(2 + count_tOracleOutput_42, row133.TDOCUMENTOS_ID);
}


                    if(row133.DOCUMENTO == null) {
pstmt_tOracleOutput_42.setNull(3 + count_tOracleOutput_42, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_42.setString(3 + count_tOracleOutput_42, row133.DOCUMENTO);
}

                try {
                    nb_line_tOracleOutput_42++;
                    int processedCount_tOracleOutput_42 = pstmt_tOracleOutput_42.executeUpdate();
                    updatedCount_tOracleOutput_42 += processedCount_tOracleOutput_42;
                    rowsToCommitCount_tOracleOutput_42 += processedCount_tOracleOutput_42;
                } catch(java.lang.Exception e_tOracleOutput_42) {
globalMap.put("tOracleOutput_42_ERROR_MESSAGE",e_tOracleOutput_42.getMessage());
                    whetherReject_tOracleOutput_42 = true;
                            System.err.print(e_tOracleOutput_42.getMessage());
                }
            if(!whetherReject_tOracleOutput_42) {
                            row134 = new row134Struct();
                                row134.TDOCUMENTOS_ID = row133.TDOCUMENTOS_ID;
                                row134.DOCUMENTO = row133.DOCUMENTO;
                                row134.PROCESADO = row133.PROCESADO;
            }

 


	tos_count_tOracleOutput_42++;

/**
 * [tOracleOutput_42 main ] stop
 */
	
	/**
	 * [tOracleOutput_42 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_42";
	
	

 



/**
 * [tOracleOutput_42 process_data_begin ] stop
 */
// Start of branch "row134"
if(row134 != null) { 



	
	/**
	 * [tOracleCommit_11 main ] start
	 */

	

	
	
	currentComponent="tOracleCommit_11";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row134"
						
						);
					}
					

	java.sql.Connection conn_tOracleCommit_11 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");

if(conn_tOracleCommit_11 != null && !conn_tOracleCommit_11.isClosed()) {
	
			
			conn_tOracleCommit_11.commit();
			
	
}

 


	tos_count_tOracleCommit_11++;

/**
 * [tOracleCommit_11 main ] stop
 */
	
	/**
	 * [tOracleCommit_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleCommit_11";
	
	

 



/**
 * [tOracleCommit_11 process_data_begin ] stop
 */
	
	/**
	 * [tOracleCommit_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleCommit_11";
	
	

 



/**
 * [tOracleCommit_11 process_data_end ] stop
 */

} // End of branch "row134"




	
	/**
	 * [tOracleOutput_42 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_42";
	
	

 



/**
 * [tOracleOutput_42 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_26 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_26";
	
	

 



/**
 * [tJavaRow_26 process_data_end ] stop
 */

} // End of branch "row132"




	
	/**
	 * [tOracleOutput_41 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_41";
	
	

 



/**
 * [tOracleOutput_41 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_25 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_25";
	
	

 



/**
 * [tJavaRow_25 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_38 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_38";
	
	

 



/**
 * [tOracleInput_38 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_38 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_38";
	
	

}
}finally{
	if (rs_tOracleInput_38 != null) {
		rs_tOracleInput_38.close();
	}
	if (stmt_tOracleInput_38 != null) {
		stmt_tOracleInput_38.close();
	}
}

globalMap.put("tOracleInput_38_NB_LINE",nb_line_tOracleInput_38);
 

ok_Hash.put("tOracleInput_38", true);
end_Hash.put("tOracleInput_38", System.currentTimeMillis());




/**
 * [tOracleInput_38 end ] stop
 */

	
	/**
	 * [tJavaRow_25 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_25";
	
	

globalMap.put("tJavaRow_25_NB_LINE",nb_line_tJavaRow_25);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row130");
			  	}
			  	
 

ok_Hash.put("tJavaRow_25", true);
end_Hash.put("tJavaRow_25", System.currentTimeMillis());




/**
 * [tJavaRow_25 end ] stop
 */

	
	/**
	 * [tOracleOutput_41 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_41";
	
	
	



	
        if(pstmt_tOracleOutput_41 != null) {
			
				pstmt_tOracleOutput_41.close();
				resourceMap.remove("pstmt_tOracleOutput_41");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_41", true);

	
	nb_line_deleted_tOracleOutput_41=nb_line_deleted_tOracleOutput_41+ deletedCount_tOracleOutput_41;
	nb_line_update_tOracleOutput_41=nb_line_update_tOracleOutput_41 + updatedCount_tOracleOutput_41;
	nb_line_inserted_tOracleOutput_41=nb_line_inserted_tOracleOutput_41 + insertedCount_tOracleOutput_41;
	nb_line_rejected_tOracleOutput_41=nb_line_rejected_tOracleOutput_41 + rejectedCount_tOracleOutput_41;
	
        globalMap.put("tOracleOutput_41_NB_LINE",nb_line_tOracleOutput_41);
        globalMap.put("tOracleOutput_41_NB_LINE_UPDATED",nb_line_update_tOracleOutput_41);
        globalMap.put("tOracleOutput_41_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_41);
        globalMap.put("tOracleOutput_41_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_41);
        globalMap.put("tOracleOutput_41_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_41);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row131");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_41", true);
end_Hash.put("tOracleOutput_41", System.currentTimeMillis());




/**
 * [tOracleOutput_41 end ] stop
 */

	
	/**
	 * [tJavaRow_26 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_26";
	
	

globalMap.put("tJavaRow_26_NB_LINE",nb_line_tJavaRow_26);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row132");
			  	}
			  	
 

ok_Hash.put("tJavaRow_26", true);
end_Hash.put("tJavaRow_26", System.currentTimeMillis());




/**
 * [tJavaRow_26 end ] stop
 */

	
	/**
	 * [tOracleOutput_42 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_42";
	
	
	



	
        if(pstmt_tOracleOutput_42 != null) {
			
				pstmt_tOracleOutput_42.close();
				resourceMap.remove("pstmt_tOracleOutput_42");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_42", true);

	
	nb_line_deleted_tOracleOutput_42=nb_line_deleted_tOracleOutput_42+ deletedCount_tOracleOutput_42;
	nb_line_update_tOracleOutput_42=nb_line_update_tOracleOutput_42 + updatedCount_tOracleOutput_42;
	nb_line_inserted_tOracleOutput_42=nb_line_inserted_tOracleOutput_42 + insertedCount_tOracleOutput_42;
	nb_line_rejected_tOracleOutput_42=nb_line_rejected_tOracleOutput_42 + rejectedCount_tOracleOutput_42;
	
        globalMap.put("tOracleOutput_42_NB_LINE",nb_line_tOracleOutput_42);
        globalMap.put("tOracleOutput_42_NB_LINE_UPDATED",nb_line_update_tOracleOutput_42);
        globalMap.put("tOracleOutput_42_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_42);
        globalMap.put("tOracleOutput_42_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_42);
        globalMap.put("tOracleOutput_42_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_42);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row133");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_42", true);
end_Hash.put("tOracleOutput_42", System.currentTimeMillis());




/**
 * [tOracleOutput_42 end ] stop
 */

	
	/**
	 * [tOracleCommit_11 end ] start
	 */

	

	
	
	currentComponent="tOracleCommit_11";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row134");
			  	}
			  	
 

ok_Hash.put("tOracleCommit_11", true);
end_Hash.put("tOracleCommit_11", System.currentTimeMillis());




/**
 * [tOracleCommit_11 end ] stop
 */















				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_38:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk25", 0, "ok");
								} 
							
							tOracleInput_39Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_38 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_38";
	
	

 



/**
 * [tOracleInput_38 finally ] stop
 */

	
	/**
	 * [tJavaRow_25 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_25";
	
	

 



/**
 * [tJavaRow_25 finally ] stop
 */

	
	/**
	 * [tOracleOutput_41 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_41";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_41") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_41 = null;
                if ((pstmtToClose_tOracleOutput_41 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_41")) != null) {
                    pstmtToClose_tOracleOutput_41.close();
                }
    }
 



/**
 * [tOracleOutput_41 finally ] stop
 */

	
	/**
	 * [tJavaRow_26 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_26";
	
	

 



/**
 * [tJavaRow_26 finally ] stop
 */

	
	/**
	 * [tOracleOutput_42 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_42";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_42") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_42 = null;
                if ((pstmtToClose_tOracleOutput_42 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_42")) != null) {
                    pstmtToClose_tOracleOutput_42.close();
                }
    }
 



/**
 * [tOracleOutput_42 finally ] stop
 */

	
	/**
	 * [tOracleCommit_11 finally ] start
	 */

	

	
	
	currentComponent="tOracleCommit_11";
	
	

 



/**
 * [tOracleCommit_11 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_38_SUBPROCESS_STATE", 1);
	}
	


public static class row139Struct implements routines.system.IPersistableRow<row139Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return null;
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer PROCESADO;

				public Integer getPROCESADO () {
					return this.PROCESADO;
				}

				public Boolean PROCESADOIsNullable(){
				    return true;
				}
				public Boolean PROCESADOIsKey(){
				    return false;
				}
				public Integer PROCESADOLength(){
				    return null;
				}
				public Integer PROCESADOPrecision(){
				    return null;
				}
				public String PROCESADODefault(){
				
					return null;
				
				}
				public String PROCESADOComment(){
				
				    return "";
				
				}
				public String PROCESADOPattern(){
				
					return "";
				
				}
				public String PROCESADOOriginalDbColumnName(){
				
					return "PROCESADO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PROCESADO="+String.valueOf(PROCESADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row139Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row138Struct implements routines.system.IPersistableRow<row138Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return null;
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer PROCESADO;

				public Integer getPROCESADO () {
					return this.PROCESADO;
				}

				public Boolean PROCESADOIsNullable(){
				    return true;
				}
				public Boolean PROCESADOIsKey(){
				    return false;
				}
				public Integer PROCESADOLength(){
				    return null;
				}
				public Integer PROCESADOPrecision(){
				    return null;
				}
				public String PROCESADODefault(){
				
					return null;
				
				}
				public String PROCESADOComment(){
				
				    return "";
				
				}
				public String PROCESADOPattern(){
				
					return "";
				
				}
				public String PROCESADOOriginalDbColumnName(){
				
					return "PROCESADO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PROCESADO="+String.valueOf(PROCESADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row138Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row137Struct implements routines.system.IPersistableRow<row137Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return true;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",MENSAJE="+MENSAJE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row137Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row136Struct implements routines.system.IPersistableRow<row136Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return true;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",MENSAJE="+MENSAJE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row136Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row135Struct implements routines.system.IPersistableRow<row135Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TOTAL;

				public Integer getTOTAL () {
					return this.TOTAL;
				}

				public Boolean TOTALIsNullable(){
				    return true;
				}
				public Boolean TOTALIsKey(){
				    return false;
				}
				public Integer TOTALLength(){
				    return 0;
				}
				public Integer TOTALPrecision(){
				    return null;
				}
				public String TOTALDefault(){
				
					return "";
				
				}
				public String TOTALComment(){
				
				    return "";
				
				}
				public String TOTALPattern(){
				
					return "";
				
				}
				public String TOTALOriginalDbColumnName(){
				
					return "TOTAL";
				
				}

				
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TOTAL = readInteger(dis);
					
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TOTAL = readInteger(dis);
					
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TOTAL,dos);
					
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TOTAL,dos);
					
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TOTAL="+String.valueOf(TOTAL));
		sb.append(",TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row135Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_39Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_39_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row135Struct row135 = new row135Struct();
row136Struct row136 = new row136Struct();
row137Struct row137 = new row137Struct();
row138Struct row138 = new row138Struct();
row139Struct row139 = new row139Struct();








	
	/**
	 * [tOracleCommit_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleCommit_12", false);
		start_Hash.put("tOracleCommit_12", System.currentTimeMillis());
		
	
	currentComponent="tOracleCommit_12";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row139");
					}
				
		int tos_count_tOracleCommit_12 = 0;
		

 



/**
 * [tOracleCommit_12 begin ] stop
 */



	
	/**
	 * [tOracleOutput_44 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_44", false);
		start_Hash.put("tOracleOutput_44", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_44";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row138");
					}
				
		int tos_count_tOracleOutput_44 = 0;
		






        int updateKeyCount_tOracleOutput_44 = 2;
        if(updateKeyCount_tOracleOutput_44 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_44 == 3 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_44 = 0;
    int nb_line_update_tOracleOutput_44 = 0;
    int nb_line_inserted_tOracleOutput_44 = 0;
    int nb_line_deleted_tOracleOutput_44 = 0;
    int nb_line_rejected_tOracleOutput_44 = 0;

    int tmp_batchUpdateCount_tOracleOutput_44 = 0;

    int deletedCount_tOracleOutput_44=0;
    int updatedCount_tOracleOutput_44=0;
    int insertedCount_tOracleOutput_44=0;
    int rowsToCommitCount_tOracleOutput_44=0;
    int rejectedCount_tOracleOutput_44=0;

    boolean whetherReject_tOracleOutput_44 = false;

    java.sql.Connection conn_tOracleOutput_44 = null;

    //optional table
    String dbschema_tOracleOutput_44 = null;
    String tableName_tOracleOutput_44 = null;
        dbschema_tOracleOutput_44 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_44 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_44=0;

        if(dbschema_tOracleOutput_44 == null || dbschema_tOracleOutput_44.trim().length() == 0) {
            tableName_tOracleOutput_44 = ("TST_CARGUEMASIVO");
        } else {
            tableName_tOracleOutput_44 = dbschema_tOracleOutput_44 + "." + ("TST_CARGUEMASIVO");
        }
                String update_tOracleOutput_44 = "UPDATE " + tableName_tOracleOutput_44 + " SET PROCESADO = ? WHERE TDOCUMENTOS_ID = ? AND DOCUMENTO = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_44 = conn_tOracleOutput_44.prepareStatement(update_tOracleOutput_44);
                resourceMap.put("pstmt_tOracleOutput_44", pstmt_tOracleOutput_44);





 



/**
 * [tOracleOutput_44 begin ] stop
 */



	
	/**
	 * [tJavaRow_28 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_28", false);
		start_Hash.put("tJavaRow_28", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_28";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row137");
					}
				
		int tos_count_tJavaRow_28 = 0;
		

int nb_line_tJavaRow_28 = 0;

 



/**
 * [tJavaRow_28 begin ] stop
 */



	
	/**
	 * [tOracleOutput_43 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_43", false);
		start_Hash.put("tOracleOutput_43", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_43";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row136");
					}
				
		int tos_count_tOracleOutput_43 = 0;
		






    
    int nb_line_tOracleOutput_43 = 0;
    int nb_line_update_tOracleOutput_43 = 0;
    int nb_line_inserted_tOracleOutput_43 = 0;
    int nb_line_deleted_tOracleOutput_43 = 0;
    int nb_line_rejected_tOracleOutput_43 = 0;

    int tmp_batchUpdateCount_tOracleOutput_43 = 0;

    int deletedCount_tOracleOutput_43=0;
    int updatedCount_tOracleOutput_43=0;
    int insertedCount_tOracleOutput_43=0;
    int rowsToCommitCount_tOracleOutput_43=0;
    int rejectedCount_tOracleOutput_43=0;

    boolean whetherReject_tOracleOutput_43 = false;

    java.sql.Connection conn_tOracleOutput_43 = null;

    //optional table
    String dbschema_tOracleOutput_43 = null;
    String tableName_tOracleOutput_43 = null;
        dbschema_tOracleOutput_43 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_43 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_43=0;

        if(dbschema_tOracleOutput_43 == null || dbschema_tOracleOutput_43.trim().length() == 0) {
            tableName_tOracleOutput_43 = ("TST_ERRCMASIVO");
        } else {
            tableName_tOracleOutput_43 = dbschema_tOracleOutput_43 + "." + ("TST_ERRCMASIVO");
        }
                String insert_tOracleOutput_43 = "INSERT INTO " + tableName_tOracleOutput_43 + " (TDOCUMENTOS_ID,DOCUMENTO,MENSAJE) VALUES (?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_43 = conn_tOracleOutput_43.prepareStatement(insert_tOracleOutput_43);
                        resourceMap.put("pstmt_tOracleOutput_43", pstmt_tOracleOutput_43);





 



/**
 * [tOracleOutput_43 begin ] stop
 */



	
	/**
	 * [tJavaRow_27 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_27", false);
		start_Hash.put("tJavaRow_27", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_27";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row135");
					}
				
		int tos_count_tJavaRow_27 = 0;
		

int nb_line_tJavaRow_27 = 0;

 



/**
 * [tJavaRow_27 begin ] stop
 */



	
	/**
	 * [tOracleInput_39 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_39", false);
		start_Hash.put("tOracleInput_39", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_39";
	
	
		int tos_count_tOracleInput_39 = 0;
		
	


	
		    int nb_line_tOracleInput_39 = 0;
		    java.sql.Connection conn_tOracleInput_39 = null;
				conn_tOracleInput_39 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_39 = false;
				boolean isConnectionWrapped_tOracleInput_39 = !(conn_tOracleInput_39 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_39.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_39 = null;
                if (isConnectionWrapped_tOracleInput_39) {
					unwrappedOraConn_tOracleInput_39 = conn_tOracleInput_39.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_39 != null) {
                        isTimeZoneNull_tOracleInput_39 = (unwrappedOraConn_tOracleInput_39.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_39 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_39).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_39) {
					java.sql.Statement stmtGetTZ_tOracleInput_39 = conn_tOracleInput_39.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_39 = stmtGetTZ_tOracleInput_39.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_39 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_39.next()) {
						sessionTimezone_tOracleInput_39 = rsGetTZ_tOracleInput_39.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_39 && unwrappedOraConn_tOracleInput_39 != null) {
                        unwrappedOraConn_tOracleInput_39.setSessionTimeZone(sessionTimezone_tOracleInput_39);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_39).setSessionTimeZone(sessionTimezone_tOracleInput_39);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_39 = conn_tOracleInput_39.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_39.setFetchSize(1000);


		    String dbquery_tOracleInput_39 = "SELECT 1 AS TOTAL,\n       TSC.TDOCUMENTOS_ID,\n       TSC.DOCUMENTO\nFROM TST_CARGUEMASIVO TSC\nWHERE TSC.PROCESADO IS"
+" NULL\nAND TSC.ID_BDUA IN(SELECT TC.ID_BDUA      \n                   FROM TST_CARGUEMASIVO TC\n                   GROUP"
+" BY TC.ID_BDUA\n                   HAVING COUNT(1) > 1)";
		    

		    globalMap.put("tOracleInput_39_QUERY",dbquery_tOracleInput_39);

		    java.sql.ResultSet rs_tOracleInput_39 = null;

		    try {
		    	rs_tOracleInput_39 = stmt_tOracleInput_39.executeQuery(dbquery_tOracleInput_39);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_39 = rs_tOracleInput_39.getMetaData();
		    	int colQtyInRs_tOracleInput_39 = rsmd_tOracleInput_39.getColumnCount();

		    String tmpContent_tOracleInput_39 = null;
		    
		    
		    while (rs_tOracleInput_39.next()) {
		        nb_line_tOracleInput_39++;
		        
							if(colQtyInRs_tOracleInput_39 < 1) {
								row135.TOTAL = null;
							} else {
		                          
					if(rs_tOracleInput_39.getObject(1) != null) {
						row135.TOTAL = rs_tOracleInput_39.getInt(1);
					} else {
				
						row135.TOTAL = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_39 < 2) {
								row135.TDOCUMENTOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_39.getObject(2) != null) {
						row135.TDOCUMENTOS_ID = rs_tOracleInput_39.getInt(2);
					} else {
				
						row135.TDOCUMENTOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_39 < 3) {
								row135.DOCUMENTO = null;
							} else {
	                         		
        	row135.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_39, 3, false);
		                    }
					




 



/**
 * [tOracleInput_39 begin ] stop
 */
	
	/**
	 * [tOracleInput_39 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_39";
	
	

 


	tos_count_tOracleInput_39++;

/**
 * [tOracleInput_39 main ] stop
 */
	
	/**
	 * [tOracleInput_39 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_39";
	
	

 



/**
 * [tOracleInput_39 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_27 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_27";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row135"
						
						);
					}
					

    //Code generate according to input schema and output schema
row136.TDOCUMENTOS_ID = row135.TDOCUMENTOS_ID;
row136.DOCUMENTO = row135.DOCUMENTO;
row136.MENSAJE = "El ID_BDUA de la persona ya se encuentra registrado en el sistema";
    nb_line_tJavaRow_27++;   

 


	tos_count_tJavaRow_27++;

/**
 * [tJavaRow_27 main ] stop
 */
	
	/**
	 * [tJavaRow_27 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_27";
	
	

 



/**
 * [tJavaRow_27 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_43 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_43";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row136"
						
						);
					}
					



            row137 = null;
        whetherReject_tOracleOutput_43 = false;
                        if(row136.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_43.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_43.setInt(1, row136.TDOCUMENTOS_ID);
}

                        if(row136.DOCUMENTO == null) {
pstmt_tOracleOutput_43.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_43.setString(2, row136.DOCUMENTO);
}

                        if(row136.MENSAJE == null) {
pstmt_tOracleOutput_43.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_43.setString(3, row136.MENSAJE);
}

                try {
                    nb_line_tOracleOutput_43++;
                    int processedCount_tOracleOutput_43 = pstmt_tOracleOutput_43.executeUpdate();
                    insertedCount_tOracleOutput_43 += processedCount_tOracleOutput_43;
                    rowsToCommitCount_tOracleOutput_43 += processedCount_tOracleOutput_43;
                } catch(java.lang.Exception e_tOracleOutput_43) {
globalMap.put("tOracleOutput_43_ERROR_MESSAGE",e_tOracleOutput_43.getMessage());
                    whetherReject_tOracleOutput_43 = true;
                            System.err.print(e_tOracleOutput_43.getMessage());
                }
            if(!whetherReject_tOracleOutput_43) {
                            row137 = new row137Struct();
                                row137.TDOCUMENTOS_ID = row136.TDOCUMENTOS_ID;
                                row137.DOCUMENTO = row136.DOCUMENTO;
                                row137.MENSAJE = row136.MENSAJE;
            }

 


	tos_count_tOracleOutput_43++;

/**
 * [tOracleOutput_43 main ] stop
 */
	
	/**
	 * [tOracleOutput_43 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_43";
	
	

 



/**
 * [tOracleOutput_43 process_data_begin ] stop
 */
// Start of branch "row137"
if(row137 != null) { 



	
	/**
	 * [tJavaRow_28 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_28";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row137"
						
						);
					}
					

    //Code generate according to input schema and output schema
row138.TDOCUMENTOS_ID = row137.TDOCUMENTOS_ID;
row138.DOCUMENTO = row137.DOCUMENTO;
row138.PROCESADO = 10;//Código de procesado con duplicados en el sistema con el mismo ID_BDUA.


    nb_line_tJavaRow_28++;   

 


	tos_count_tJavaRow_28++;

/**
 * [tJavaRow_28 main ] stop
 */
	
	/**
	 * [tJavaRow_28 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_28";
	
	

 



/**
 * [tJavaRow_28 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_44 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_44";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row138"
						
						);
					}
					



            row139 = null;
        whetherReject_tOracleOutput_44 = false;
                    if(row138.PROCESADO == null) {
pstmt_tOracleOutput_44.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_44.setInt(1, row138.PROCESADO);
}


                    if(row138.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_44.setNull(2 + count_tOracleOutput_44, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_44.setInt(2 + count_tOracleOutput_44, row138.TDOCUMENTOS_ID);
}


                    if(row138.DOCUMENTO == null) {
pstmt_tOracleOutput_44.setNull(3 + count_tOracleOutput_44, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_44.setString(3 + count_tOracleOutput_44, row138.DOCUMENTO);
}

                try {
                    nb_line_tOracleOutput_44++;
                    int processedCount_tOracleOutput_44 = pstmt_tOracleOutput_44.executeUpdate();
                    updatedCount_tOracleOutput_44 += processedCount_tOracleOutput_44;
                    rowsToCommitCount_tOracleOutput_44 += processedCount_tOracleOutput_44;
                } catch(java.lang.Exception e_tOracleOutput_44) {
globalMap.put("tOracleOutput_44_ERROR_MESSAGE",e_tOracleOutput_44.getMessage());
                    whetherReject_tOracleOutput_44 = true;
                            System.err.print(e_tOracleOutput_44.getMessage());
                }
            if(!whetherReject_tOracleOutput_44) {
                            row139 = new row139Struct();
                                row139.TDOCUMENTOS_ID = row138.TDOCUMENTOS_ID;
                                row139.DOCUMENTO = row138.DOCUMENTO;
                                row139.PROCESADO = row138.PROCESADO;
            }

 


	tos_count_tOracleOutput_44++;

/**
 * [tOracleOutput_44 main ] stop
 */
	
	/**
	 * [tOracleOutput_44 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_44";
	
	

 



/**
 * [tOracleOutput_44 process_data_begin ] stop
 */
// Start of branch "row139"
if(row139 != null) { 



	
	/**
	 * [tOracleCommit_12 main ] start
	 */

	

	
	
	currentComponent="tOracleCommit_12";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row139"
						
						);
					}
					

	java.sql.Connection conn_tOracleCommit_12 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");

if(conn_tOracleCommit_12 != null && !conn_tOracleCommit_12.isClosed()) {
	
			
			conn_tOracleCommit_12.commit();
			
	
}

 


	tos_count_tOracleCommit_12++;

/**
 * [tOracleCommit_12 main ] stop
 */
	
	/**
	 * [tOracleCommit_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleCommit_12";
	
	

 



/**
 * [tOracleCommit_12 process_data_begin ] stop
 */
	
	/**
	 * [tOracleCommit_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleCommit_12";
	
	

 



/**
 * [tOracleCommit_12 process_data_end ] stop
 */

} // End of branch "row139"




	
	/**
	 * [tOracleOutput_44 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_44";
	
	

 



/**
 * [tOracleOutput_44 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_28 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_28";
	
	

 



/**
 * [tJavaRow_28 process_data_end ] stop
 */

} // End of branch "row137"




	
	/**
	 * [tOracleOutput_43 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_43";
	
	

 



/**
 * [tOracleOutput_43 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_27 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_27";
	
	

 



/**
 * [tJavaRow_27 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_39 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_39";
	
	

 



/**
 * [tOracleInput_39 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_39 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_39";
	
	

}
}finally{
	if (rs_tOracleInput_39 != null) {
		rs_tOracleInput_39.close();
	}
	if (stmt_tOracleInput_39 != null) {
		stmt_tOracleInput_39.close();
	}
}

globalMap.put("tOracleInput_39_NB_LINE",nb_line_tOracleInput_39);
 

ok_Hash.put("tOracleInput_39", true);
end_Hash.put("tOracleInput_39", System.currentTimeMillis());




/**
 * [tOracleInput_39 end ] stop
 */

	
	/**
	 * [tJavaRow_27 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_27";
	
	

globalMap.put("tJavaRow_27_NB_LINE",nb_line_tJavaRow_27);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row135");
			  	}
			  	
 

ok_Hash.put("tJavaRow_27", true);
end_Hash.put("tJavaRow_27", System.currentTimeMillis());




/**
 * [tJavaRow_27 end ] stop
 */

	
	/**
	 * [tOracleOutput_43 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_43";
	
	
	



	
        if(pstmt_tOracleOutput_43 != null) {
			
				pstmt_tOracleOutput_43.close();
				resourceMap.remove("pstmt_tOracleOutput_43");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_43", true);

	
	nb_line_deleted_tOracleOutput_43=nb_line_deleted_tOracleOutput_43+ deletedCount_tOracleOutput_43;
	nb_line_update_tOracleOutput_43=nb_line_update_tOracleOutput_43 + updatedCount_tOracleOutput_43;
	nb_line_inserted_tOracleOutput_43=nb_line_inserted_tOracleOutput_43 + insertedCount_tOracleOutput_43;
	nb_line_rejected_tOracleOutput_43=nb_line_rejected_tOracleOutput_43 + rejectedCount_tOracleOutput_43;
	
        globalMap.put("tOracleOutput_43_NB_LINE",nb_line_tOracleOutput_43);
        globalMap.put("tOracleOutput_43_NB_LINE_UPDATED",nb_line_update_tOracleOutput_43);
        globalMap.put("tOracleOutput_43_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_43);
        globalMap.put("tOracleOutput_43_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_43);
        globalMap.put("tOracleOutput_43_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_43);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row136");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_43", true);
end_Hash.put("tOracleOutput_43", System.currentTimeMillis());




/**
 * [tOracleOutput_43 end ] stop
 */

	
	/**
	 * [tJavaRow_28 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_28";
	
	

globalMap.put("tJavaRow_28_NB_LINE",nb_line_tJavaRow_28);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row137");
			  	}
			  	
 

ok_Hash.put("tJavaRow_28", true);
end_Hash.put("tJavaRow_28", System.currentTimeMillis());




/**
 * [tJavaRow_28 end ] stop
 */

	
	/**
	 * [tOracleOutput_44 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_44";
	
	
	



	
        if(pstmt_tOracleOutput_44 != null) {
			
				pstmt_tOracleOutput_44.close();
				resourceMap.remove("pstmt_tOracleOutput_44");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_44", true);

	
	nb_line_deleted_tOracleOutput_44=nb_line_deleted_tOracleOutput_44+ deletedCount_tOracleOutput_44;
	nb_line_update_tOracleOutput_44=nb_line_update_tOracleOutput_44 + updatedCount_tOracleOutput_44;
	nb_line_inserted_tOracleOutput_44=nb_line_inserted_tOracleOutput_44 + insertedCount_tOracleOutput_44;
	nb_line_rejected_tOracleOutput_44=nb_line_rejected_tOracleOutput_44 + rejectedCount_tOracleOutput_44;
	
        globalMap.put("tOracleOutput_44_NB_LINE",nb_line_tOracleOutput_44);
        globalMap.put("tOracleOutput_44_NB_LINE_UPDATED",nb_line_update_tOracleOutput_44);
        globalMap.put("tOracleOutput_44_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_44);
        globalMap.put("tOracleOutput_44_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_44);
        globalMap.put("tOracleOutput_44_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_44);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row138");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_44", true);
end_Hash.put("tOracleOutput_44", System.currentTimeMillis());




/**
 * [tOracleOutput_44 end ] stop
 */

	
	/**
	 * [tOracleCommit_12 end ] start
	 */

	

	
	
	currentComponent="tOracleCommit_12";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row139");
			  	}
			  	
 

ok_Hash.put("tOracleCommit_12", true);
end_Hash.put("tOracleCommit_12", System.currentTimeMillis());




/**
 * [tOracleCommit_12 end ] stop
 */















				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_39:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk26", 0, "ok");
								} 
							
							tOracleInput_31Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_39 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_39";
	
	

 



/**
 * [tOracleInput_39 finally ] stop
 */

	
	/**
	 * [tJavaRow_27 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_27";
	
	

 



/**
 * [tJavaRow_27 finally ] stop
 */

	
	/**
	 * [tOracleOutput_43 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_43";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_43") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_43 = null;
                if ((pstmtToClose_tOracleOutput_43 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_43")) != null) {
                    pstmtToClose_tOracleOutput_43.close();
                }
    }
 



/**
 * [tOracleOutput_43 finally ] stop
 */

	
	/**
	 * [tJavaRow_28 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_28";
	
	

 



/**
 * [tJavaRow_28 finally ] stop
 */

	
	/**
	 * [tOracleOutput_44 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_44";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_44") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_44 = null;
                if ((pstmtToClose_tOracleOutput_44 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_44")) != null) {
                    pstmtToClose_tOracleOutput_44.close();
                }
    }
 



/**
 * [tOracleOutput_44 finally ] stop
 */

	
	/**
	 * [tOracleCommit_12 finally ] start
	 */

	

	
	
	currentComponent="tOracleCommit_12";
	
	

 



/**
 * [tOracleCommit_12 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_39_SUBPROCESS_STATE", 1);
	}
	


public static class row97Struct implements routines.system.IPersistableRow<row97Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return null;
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer PROCESADO;

				public Integer getPROCESADO () {
					return this.PROCESADO;
				}

				public Boolean PROCESADOIsNullable(){
				    return true;
				}
				public Boolean PROCESADOIsKey(){
				    return false;
				}
				public Integer PROCESADOLength(){
				    return null;
				}
				public Integer PROCESADOPrecision(){
				    return null;
				}
				public String PROCESADODefault(){
				
					return null;
				
				}
				public String PROCESADOComment(){
				
				    return "";
				
				}
				public String PROCESADOPattern(){
				
					return "";
				
				}
				public String PROCESADOOriginalDbColumnName(){
				
					return "PROCESADO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PROCESADO="+String.valueOf(PROCESADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row97Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row96Struct implements routines.system.IPersistableRow<row96Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return null;
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer PROCESADO;

				public Integer getPROCESADO () {
					return this.PROCESADO;
				}

				public Boolean PROCESADOIsNullable(){
				    return true;
				}
				public Boolean PROCESADOIsKey(){
				    return false;
				}
				public Integer PROCESADOLength(){
				    return null;
				}
				public Integer PROCESADOPrecision(){
				    return null;
				}
				public String PROCESADODefault(){
				
					return null;
				
				}
				public String PROCESADOComment(){
				
				    return "";
				
				}
				public String PROCESADOPattern(){
				
					return "";
				
				}
				public String PROCESADOOriginalDbColumnName(){
				
					return "PROCESADO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PROCESADO="+String.valueOf(PROCESADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row96Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row95Struct implements routines.system.IPersistableRow<row95Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return true;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",MENSAJE="+MENSAJE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row95Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row94Struct implements routines.system.IPersistableRow<row94Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return true;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",MENSAJE="+MENSAJE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row94Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row93Struct implements routines.system.IPersistableRow<row93Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public BigDecimal TOTAL;

				public BigDecimal getTOTAL () {
					return this.TOTAL;
				}

				public Boolean TOTALIsNullable(){
				    return true;
				}
				public Boolean TOTALIsKey(){
				    return false;
				}
				public Integer TOTALLength(){
				    return null;
				}
				public Integer TOTALPrecision(){
				    return null;
				}
				public String TOTALDefault(){
				
					return "";
				
				}
				public String TOTALComment(){
				
				    return "";
				
				}
				public String TOTALPattern(){
				
					return "";
				
				}
				public String TOTALOriginalDbColumnName(){
				
					return "TOTAL";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TOTAL = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TOTAL = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",TOTAL="+String.valueOf(TOTAL));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row93Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_31Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_31_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row93Struct row93 = new row93Struct();
row94Struct row94 = new row94Struct();
row95Struct row95 = new row95Struct();
row96Struct row96 = new row96Struct();
row97Struct row97 = new row97Struct();








	
	/**
	 * [tOracleCommit_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleCommit_7", false);
		start_Hash.put("tOracleCommit_7", System.currentTimeMillis());
		
	
	currentComponent="tOracleCommit_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row97");
					}
				
		int tos_count_tOracleCommit_7 = 0;
		

 



/**
 * [tOracleCommit_7 begin ] stop
 */



	
	/**
	 * [tOracleOutput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_15", false);
		start_Hash.put("tOracleOutput_15", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_15";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row96");
					}
				
		int tos_count_tOracleOutput_15 = 0;
		






        int updateKeyCount_tOracleOutput_15 = 2;
        if(updateKeyCount_tOracleOutput_15 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_15 == 3 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_15 = 0;
    int nb_line_update_tOracleOutput_15 = 0;
    int nb_line_inserted_tOracleOutput_15 = 0;
    int nb_line_deleted_tOracleOutput_15 = 0;
    int nb_line_rejected_tOracleOutput_15 = 0;

    int tmp_batchUpdateCount_tOracleOutput_15 = 0;

    int deletedCount_tOracleOutput_15=0;
    int updatedCount_tOracleOutput_15=0;
    int insertedCount_tOracleOutput_15=0;
    int rowsToCommitCount_tOracleOutput_15=0;
    int rejectedCount_tOracleOutput_15=0;

    boolean whetherReject_tOracleOutput_15 = false;

    java.sql.Connection conn_tOracleOutput_15 = null;

    //optional table
    String dbschema_tOracleOutput_15 = null;
    String tableName_tOracleOutput_15 = null;
        dbschema_tOracleOutput_15 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_15 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_15=0;

        if(dbschema_tOracleOutput_15 == null || dbschema_tOracleOutput_15.trim().length() == 0) {
            tableName_tOracleOutput_15 = ("TST_CARGUEMASIVO");
        } else {
            tableName_tOracleOutput_15 = dbschema_tOracleOutput_15 + "." + ("TST_CARGUEMASIVO");
        }
                String update_tOracleOutput_15 = "UPDATE " + tableName_tOracleOutput_15 + " SET PROCESADO = ? WHERE TDOCUMENTOS_ID = ? AND DOCUMENTO = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_15 = conn_tOracleOutput_15.prepareStatement(update_tOracleOutput_15);
                resourceMap.put("pstmt_tOracleOutput_15", pstmt_tOracleOutput_15);





 



/**
 * [tOracleOutput_15 begin ] stop
 */



	
	/**
	 * [tJavaRow_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_19", false);
		start_Hash.put("tJavaRow_19", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_19";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row95");
					}
				
		int tos_count_tJavaRow_19 = 0;
		

int nb_line_tJavaRow_19 = 0;

 



/**
 * [tJavaRow_19 begin ] stop
 */



	
	/**
	 * [tOracleOutput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_14", false);
		start_Hash.put("tOracleOutput_14", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_14";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row94");
					}
				
		int tos_count_tOracleOutput_14 = 0;
		






    
    int nb_line_tOracleOutput_14 = 0;
    int nb_line_update_tOracleOutput_14 = 0;
    int nb_line_inserted_tOracleOutput_14 = 0;
    int nb_line_deleted_tOracleOutput_14 = 0;
    int nb_line_rejected_tOracleOutput_14 = 0;

    int tmp_batchUpdateCount_tOracleOutput_14 = 0;

    int deletedCount_tOracleOutput_14=0;
    int updatedCount_tOracleOutput_14=0;
    int insertedCount_tOracleOutput_14=0;
    int rowsToCommitCount_tOracleOutput_14=0;
    int rejectedCount_tOracleOutput_14=0;

    boolean whetherReject_tOracleOutput_14 = false;

    java.sql.Connection conn_tOracleOutput_14 = null;

    //optional table
    String dbschema_tOracleOutput_14 = null;
    String tableName_tOracleOutput_14 = null;
        dbschema_tOracleOutput_14 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_14 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_14=0;

        if(dbschema_tOracleOutput_14 == null || dbschema_tOracleOutput_14.trim().length() == 0) {
            tableName_tOracleOutput_14 = ("TST_ERRCMASIVO");
        } else {
            tableName_tOracleOutput_14 = dbschema_tOracleOutput_14 + "." + ("TST_ERRCMASIVO");
        }
                String insert_tOracleOutput_14 = "INSERT INTO " + tableName_tOracleOutput_14 + " (TDOCUMENTOS_ID,DOCUMENTO,MENSAJE) VALUES (?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_14 = conn_tOracleOutput_14.prepareStatement(insert_tOracleOutput_14);
                        resourceMap.put("pstmt_tOracleOutput_14", pstmt_tOracleOutput_14);





 



/**
 * [tOracleOutput_14 begin ] stop
 */



	
	/**
	 * [tJavaRow_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_18", false);
		start_Hash.put("tJavaRow_18", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_18";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row93");
					}
				
		int tos_count_tJavaRow_18 = 0;
		

int nb_line_tJavaRow_18 = 0;

 



/**
 * [tJavaRow_18 begin ] stop
 */



	
	/**
	 * [tOracleInput_31 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_31", false);
		start_Hash.put("tOracleInput_31", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_31";
	
	
		int tos_count_tOracleInput_31 = 0;
		
	


	
		    int nb_line_tOracleInput_31 = 0;
		    java.sql.Connection conn_tOracleInput_31 = null;
				conn_tOracleInput_31 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_31 = false;
				boolean isConnectionWrapped_tOracleInput_31 = !(conn_tOracleInput_31 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_31.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_31 = null;
                if (isConnectionWrapped_tOracleInput_31) {
					unwrappedOraConn_tOracleInput_31 = conn_tOracleInput_31.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_31 != null) {
                        isTimeZoneNull_tOracleInput_31 = (unwrappedOraConn_tOracleInput_31.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_31 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_31).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_31) {
					java.sql.Statement stmtGetTZ_tOracleInput_31 = conn_tOracleInput_31.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_31 = stmtGetTZ_tOracleInput_31.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_31 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_31.next()) {
						sessionTimezone_tOracleInput_31 = rsGetTZ_tOracleInput_31.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_31 && unwrappedOraConn_tOracleInput_31 != null) {
                        unwrappedOraConn_tOracleInput_31.setSessionTimeZone(sessionTimezone_tOracleInput_31);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_31).setSessionTimeZone(sessionTimezone_tOracleInput_31);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_31 = conn_tOracleInput_31.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_31.setFetchSize(1000);


		    String dbquery_tOracleInput_31 = "SELECT TSC.TDOCUMENTOS_ID,\n       TSC.DOCUMENTO,\n       TCS.TOTAL\nFROM TST_CARGUEMASIVO TSC\nINNER JOIN (SELECT TC.P"
+"RIMER_NOMBRE, \n                   TC.PRIMER_APELLIDO, \n                   TC.DOCUMENTO, \n                   COUNT(*) "
+"AS TOTAL \n            FROM TST_CARGUEMASIVO TC \n            WHERE TC.PROCESADO IS NULL \n            GROUP BY TC.PRIME"
+"R_NOMBRE, \n                     TC.PRIMER_APELLIDO, \n                     TC.DOCUMENTO HAVING COUNT(1) > 1) TCS ON TSC"
+".PRIMER_NOMBRE = TCS.PRIMER_NOMBRE                  \nWHERE TSC.PROCESADO IS  NULL      \n      AND TSC.PRIMER_APELLIDO "
+"= TCS.PRIMER_APELLIDO\n      AND TSC.DOCUMENTO = TCS.DOCUMENTO";
		    

		    globalMap.put("tOracleInput_31_QUERY",dbquery_tOracleInput_31);

		    java.sql.ResultSet rs_tOracleInput_31 = null;

		    try {
		    	rs_tOracleInput_31 = stmt_tOracleInput_31.executeQuery(dbquery_tOracleInput_31);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_31 = rs_tOracleInput_31.getMetaData();
		    	int colQtyInRs_tOracleInput_31 = rsmd_tOracleInput_31.getColumnCount();

		    String tmpContent_tOracleInput_31 = null;
		    
		    
		    while (rs_tOracleInput_31.next()) {
		        nb_line_tOracleInput_31++;
		        
							if(colQtyInRs_tOracleInput_31 < 1) {
								row93.TDOCUMENTOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_31.getObject(1) != null) {
						row93.TDOCUMENTOS_ID = rs_tOracleInput_31.getInt(1);
					} else {
				
						row93.TDOCUMENTOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_31 < 2) {
								row93.DOCUMENTO = null;
							} else {
	                         		
        	row93.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_31, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_31 < 3) {
								row93.TOTAL = null;
							} else {
		                          
					if(rs_tOracleInput_31.getObject(3) != null) {
						row93.TOTAL = rs_tOracleInput_31.getBigDecimal(3);
					} else {
				
						row93.TOTAL = null;
					}
		                    }
					




 



/**
 * [tOracleInput_31 begin ] stop
 */
	
	/**
	 * [tOracleInput_31 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_31";
	
	

 


	tos_count_tOracleInput_31++;

/**
 * [tOracleInput_31 main ] stop
 */
	
	/**
	 * [tOracleInput_31 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_31";
	
	

 



/**
 * [tOracleInput_31 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_18 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_18";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row93"
						
						);
					}
					

    row94.TDOCUMENTOS_ID = row93.TDOCUMENTOS_ID;
row94.DOCUMENTO = row93.DOCUMENTO;
row94.MENSAJE = "La persona se encuentra " + row93.TOTAL + " veces en el archivo plano con el mismo primer nombre, primer apellido y número de documento";


    nb_line_tJavaRow_18++;   

 


	tos_count_tJavaRow_18++;

/**
 * [tJavaRow_18 main ] stop
 */
	
	/**
	 * [tJavaRow_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_18";
	
	

 



/**
 * [tJavaRow_18 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_14 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_14";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row94"
						
						);
					}
					



            row95 = null;
        whetherReject_tOracleOutput_14 = false;
                        if(row94.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_14.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_14.setInt(1, row94.TDOCUMENTOS_ID);
}

                        if(row94.DOCUMENTO == null) {
pstmt_tOracleOutput_14.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_14.setString(2, row94.DOCUMENTO);
}

                        if(row94.MENSAJE == null) {
pstmt_tOracleOutput_14.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_14.setString(3, row94.MENSAJE);
}

                try {
                    nb_line_tOracleOutput_14++;
                    int processedCount_tOracleOutput_14 = pstmt_tOracleOutput_14.executeUpdate();
                    insertedCount_tOracleOutput_14 += processedCount_tOracleOutput_14;
                    rowsToCommitCount_tOracleOutput_14 += processedCount_tOracleOutput_14;
                } catch(java.lang.Exception e_tOracleOutput_14) {
globalMap.put("tOracleOutput_14_ERROR_MESSAGE",e_tOracleOutput_14.getMessage());
                    whetherReject_tOracleOutput_14 = true;
                            System.err.print(e_tOracleOutput_14.getMessage());
                }
            if(!whetherReject_tOracleOutput_14) {
                            row95 = new row95Struct();
                                row95.TDOCUMENTOS_ID = row94.TDOCUMENTOS_ID;
                                row95.DOCUMENTO = row94.DOCUMENTO;
                                row95.MENSAJE = row94.MENSAJE;
            }

 


	tos_count_tOracleOutput_14++;

/**
 * [tOracleOutput_14 main ] stop
 */
	
	/**
	 * [tOracleOutput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_14";
	
	

 



/**
 * [tOracleOutput_14 process_data_begin ] stop
 */
// Start of branch "row95"
if(row95 != null) { 



	
	/**
	 * [tJavaRow_19 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_19";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row95"
						
						);
					}
					

    //Code generate according to input schema and output schema
row96.TDOCUMENTOS_ID = row95.TDOCUMENTOS_ID;
row96.DOCUMENTO = row95.DOCUMENTO;
row96.PROCESADO = 7;//Código de procesado con duplicados en el archivo con el mismo primer nombre, primer apellido y número de documento.


    nb_line_tJavaRow_19++;   

 


	tos_count_tJavaRow_19++;

/**
 * [tJavaRow_19 main ] stop
 */
	
	/**
	 * [tJavaRow_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_19";
	
	

 



/**
 * [tJavaRow_19 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_15 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_15";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row96"
						
						);
					}
					



            row97 = null;
        whetherReject_tOracleOutput_15 = false;
                    if(row96.PROCESADO == null) {
pstmt_tOracleOutput_15.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_15.setInt(1, row96.PROCESADO);
}


                    if(row96.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_15.setNull(2 + count_tOracleOutput_15, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_15.setInt(2 + count_tOracleOutput_15, row96.TDOCUMENTOS_ID);
}


                    if(row96.DOCUMENTO == null) {
pstmt_tOracleOutput_15.setNull(3 + count_tOracleOutput_15, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(3 + count_tOracleOutput_15, row96.DOCUMENTO);
}

                try {
                    nb_line_tOracleOutput_15++;
                    int processedCount_tOracleOutput_15 = pstmt_tOracleOutput_15.executeUpdate();
                    updatedCount_tOracleOutput_15 += processedCount_tOracleOutput_15;
                    rowsToCommitCount_tOracleOutput_15 += processedCount_tOracleOutput_15;
                } catch(java.lang.Exception e_tOracleOutput_15) {
globalMap.put("tOracleOutput_15_ERROR_MESSAGE",e_tOracleOutput_15.getMessage());
                    whetherReject_tOracleOutput_15 = true;
                            System.err.print(e_tOracleOutput_15.getMessage());
                }
            if(!whetherReject_tOracleOutput_15) {
                            row97 = new row97Struct();
                                row97.TDOCUMENTOS_ID = row96.TDOCUMENTOS_ID;
                                row97.DOCUMENTO = row96.DOCUMENTO;
                                row97.PROCESADO = row96.PROCESADO;
            }

 


	tos_count_tOracleOutput_15++;

/**
 * [tOracleOutput_15 main ] stop
 */
	
	/**
	 * [tOracleOutput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_15";
	
	

 



/**
 * [tOracleOutput_15 process_data_begin ] stop
 */
// Start of branch "row97"
if(row97 != null) { 



	
	/**
	 * [tOracleCommit_7 main ] start
	 */

	

	
	
	currentComponent="tOracleCommit_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row97"
						
						);
					}
					

	java.sql.Connection conn_tOracleCommit_7 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");

if(conn_tOracleCommit_7 != null && !conn_tOracleCommit_7.isClosed()) {
	
			
			conn_tOracleCommit_7.commit();
			
	
}

 


	tos_count_tOracleCommit_7++;

/**
 * [tOracleCommit_7 main ] stop
 */
	
	/**
	 * [tOracleCommit_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleCommit_7";
	
	

 



/**
 * [tOracleCommit_7 process_data_begin ] stop
 */
	
	/**
	 * [tOracleCommit_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleCommit_7";
	
	

 



/**
 * [tOracleCommit_7 process_data_end ] stop
 */

} // End of branch "row97"




	
	/**
	 * [tOracleOutput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_15";
	
	

 



/**
 * [tOracleOutput_15 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_19";
	
	

 



/**
 * [tJavaRow_19 process_data_end ] stop
 */

} // End of branch "row95"




	
	/**
	 * [tOracleOutput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_14";
	
	

 



/**
 * [tOracleOutput_14 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_18";
	
	

 



/**
 * [tJavaRow_18 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_31 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_31";
	
	

 



/**
 * [tOracleInput_31 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_31 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_31";
	
	

}
}finally{
	if (rs_tOracleInput_31 != null) {
		rs_tOracleInput_31.close();
	}
	if (stmt_tOracleInput_31 != null) {
		stmt_tOracleInput_31.close();
	}
}

globalMap.put("tOracleInput_31_NB_LINE",nb_line_tOracleInput_31);
 

ok_Hash.put("tOracleInput_31", true);
end_Hash.put("tOracleInput_31", System.currentTimeMillis());




/**
 * [tOracleInput_31 end ] stop
 */

	
	/**
	 * [tJavaRow_18 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_18";
	
	

globalMap.put("tJavaRow_18_NB_LINE",nb_line_tJavaRow_18);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row93");
			  	}
			  	
 

ok_Hash.put("tJavaRow_18", true);
end_Hash.put("tJavaRow_18", System.currentTimeMillis());




/**
 * [tJavaRow_18 end ] stop
 */

	
	/**
	 * [tOracleOutput_14 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_14";
	
	
	



	
        if(pstmt_tOracleOutput_14 != null) {
			
				pstmt_tOracleOutput_14.close();
				resourceMap.remove("pstmt_tOracleOutput_14");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_14", true);

	
	nb_line_deleted_tOracleOutput_14=nb_line_deleted_tOracleOutput_14+ deletedCount_tOracleOutput_14;
	nb_line_update_tOracleOutput_14=nb_line_update_tOracleOutput_14 + updatedCount_tOracleOutput_14;
	nb_line_inserted_tOracleOutput_14=nb_line_inserted_tOracleOutput_14 + insertedCount_tOracleOutput_14;
	nb_line_rejected_tOracleOutput_14=nb_line_rejected_tOracleOutput_14 + rejectedCount_tOracleOutput_14;
	
        globalMap.put("tOracleOutput_14_NB_LINE",nb_line_tOracleOutput_14);
        globalMap.put("tOracleOutput_14_NB_LINE_UPDATED",nb_line_update_tOracleOutput_14);
        globalMap.put("tOracleOutput_14_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_14);
        globalMap.put("tOracleOutput_14_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_14);
        globalMap.put("tOracleOutput_14_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_14);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row94");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_14", true);
end_Hash.put("tOracleOutput_14", System.currentTimeMillis());




/**
 * [tOracleOutput_14 end ] stop
 */

	
	/**
	 * [tJavaRow_19 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_19";
	
	

globalMap.put("tJavaRow_19_NB_LINE",nb_line_tJavaRow_19);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row95");
			  	}
			  	
 

ok_Hash.put("tJavaRow_19", true);
end_Hash.put("tJavaRow_19", System.currentTimeMillis());




/**
 * [tJavaRow_19 end ] stop
 */

	
	/**
	 * [tOracleOutput_15 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_15";
	
	
	



	
        if(pstmt_tOracleOutput_15 != null) {
			
				pstmt_tOracleOutput_15.close();
				resourceMap.remove("pstmt_tOracleOutput_15");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_15", true);

	
	nb_line_deleted_tOracleOutput_15=nb_line_deleted_tOracleOutput_15+ deletedCount_tOracleOutput_15;
	nb_line_update_tOracleOutput_15=nb_line_update_tOracleOutput_15 + updatedCount_tOracleOutput_15;
	nb_line_inserted_tOracleOutput_15=nb_line_inserted_tOracleOutput_15 + insertedCount_tOracleOutput_15;
	nb_line_rejected_tOracleOutput_15=nb_line_rejected_tOracleOutput_15 + rejectedCount_tOracleOutput_15;
	
        globalMap.put("tOracleOutput_15_NB_LINE",nb_line_tOracleOutput_15);
        globalMap.put("tOracleOutput_15_NB_LINE_UPDATED",nb_line_update_tOracleOutput_15);
        globalMap.put("tOracleOutput_15_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_15);
        globalMap.put("tOracleOutput_15_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_15);
        globalMap.put("tOracleOutput_15_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_15);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row96");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_15", true);
end_Hash.put("tOracleOutput_15", System.currentTimeMillis());




/**
 * [tOracleOutput_15 end ] stop
 */

	
	/**
	 * [tOracleCommit_7 end ] start
	 */

	

	
	
	currentComponent="tOracleCommit_7";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row97");
			  	}
			  	
 

ok_Hash.put("tOracleCommit_7", true);
end_Hash.put("tOracleCommit_7", System.currentTimeMillis());




/**
 * [tOracleCommit_7 end ] stop
 */















				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_31:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk16", 0, "ok");
								} 
							
							tOracleInput_32Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_31 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_31";
	
	

 



/**
 * [tOracleInput_31 finally ] stop
 */

	
	/**
	 * [tJavaRow_18 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_18";
	
	

 



/**
 * [tJavaRow_18 finally ] stop
 */

	
	/**
	 * [tOracleOutput_14 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_14";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_14") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_14 = null;
                if ((pstmtToClose_tOracleOutput_14 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_14")) != null) {
                    pstmtToClose_tOracleOutput_14.close();
                }
    }
 



/**
 * [tOracleOutput_14 finally ] stop
 */

	
	/**
	 * [tJavaRow_19 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_19";
	
	

 



/**
 * [tJavaRow_19 finally ] stop
 */

	
	/**
	 * [tOracleOutput_15 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_15";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_15") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_15 = null;
                if ((pstmtToClose_tOracleOutput_15 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_15")) != null) {
                    pstmtToClose_tOracleOutput_15.close();
                }
    }
 



/**
 * [tOracleOutput_15 finally ] stop
 */

	
	/**
	 * [tOracleCommit_7 finally ] start
	 */

	

	
	
	currentComponent="tOracleCommit_7";
	
	

 



/**
 * [tOracleCommit_7 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_31_SUBPROCESS_STATE", 1);
	}
	


public static class row102Struct implements routines.system.IPersistableRow<row102Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return null;
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer PROCESADO;

				public Integer getPROCESADO () {
					return this.PROCESADO;
				}

				public Boolean PROCESADOIsNullable(){
				    return true;
				}
				public Boolean PROCESADOIsKey(){
				    return false;
				}
				public Integer PROCESADOLength(){
				    return null;
				}
				public Integer PROCESADOPrecision(){
				    return null;
				}
				public String PROCESADODefault(){
				
					return null;
				
				}
				public String PROCESADOComment(){
				
				    return "";
				
				}
				public String PROCESADOPattern(){
				
					return "";
				
				}
				public String PROCESADOOriginalDbColumnName(){
				
					return "PROCESADO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PROCESADO="+String.valueOf(PROCESADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row102Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row101Struct implements routines.system.IPersistableRow<row101Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return null;
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer PROCESADO;

				public Integer getPROCESADO () {
					return this.PROCESADO;
				}

				public Boolean PROCESADOIsNullable(){
				    return true;
				}
				public Boolean PROCESADOIsKey(){
				    return false;
				}
				public Integer PROCESADOLength(){
				    return null;
				}
				public Integer PROCESADOPrecision(){
				    return null;
				}
				public String PROCESADODefault(){
				
					return null;
				
				}
				public String PROCESADOComment(){
				
				    return "";
				
				}
				public String PROCESADOPattern(){
				
					return "";
				
				}
				public String PROCESADOOriginalDbColumnName(){
				
					return "PROCESADO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PROCESADO="+String.valueOf(PROCESADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row101Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row100Struct implements routines.system.IPersistableRow<row100Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return true;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",MENSAJE="+MENSAJE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row100Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row99Struct implements routines.system.IPersistableRow<row99Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return true;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",MENSAJE="+MENSAJE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row99Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row98Struct implements routines.system.IPersistableRow<row98Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public BigDecimal TOTAL;

				public BigDecimal getTOTAL () {
					return this.TOTAL;
				}

				public Boolean TOTALIsNullable(){
				    return true;
				}
				public Boolean TOTALIsKey(){
				    return false;
				}
				public Integer TOTALLength(){
				    return null;
				}
				public Integer TOTALPrecision(){
				    return null;
				}
				public String TOTALDefault(){
				
					return "";
				
				}
				public String TOTALComment(){
				
				    return "";
				
				}
				public String TOTALPattern(){
				
					return "";
				
				}
				public String TOTALOriginalDbColumnName(){
				
					return "TOTAL";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TOTAL = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TOTAL = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",TOTAL="+String.valueOf(TOTAL));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row98Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_32Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_32_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row98Struct row98 = new row98Struct();
row99Struct row99 = new row99Struct();
row100Struct row100 = new row100Struct();
row101Struct row101 = new row101Struct();
row102Struct row102 = new row102Struct();








	
	/**
	 * [tOracleCommit_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleCommit_8", false);
		start_Hash.put("tOracleCommit_8", System.currentTimeMillis());
		
	
	currentComponent="tOracleCommit_8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row102");
					}
				
		int tos_count_tOracleCommit_8 = 0;
		

 



/**
 * [tOracleCommit_8 begin ] stop
 */



	
	/**
	 * [tOracleOutput_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_17", false);
		start_Hash.put("tOracleOutput_17", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_17";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row101");
					}
				
		int tos_count_tOracleOutput_17 = 0;
		






        int updateKeyCount_tOracleOutput_17 = 2;
        if(updateKeyCount_tOracleOutput_17 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_17 == 3 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_17 = 0;
    int nb_line_update_tOracleOutput_17 = 0;
    int nb_line_inserted_tOracleOutput_17 = 0;
    int nb_line_deleted_tOracleOutput_17 = 0;
    int nb_line_rejected_tOracleOutput_17 = 0;

    int tmp_batchUpdateCount_tOracleOutput_17 = 0;

    int deletedCount_tOracleOutput_17=0;
    int updatedCount_tOracleOutput_17=0;
    int insertedCount_tOracleOutput_17=0;
    int rowsToCommitCount_tOracleOutput_17=0;
    int rejectedCount_tOracleOutput_17=0;

    boolean whetherReject_tOracleOutput_17 = false;

    java.sql.Connection conn_tOracleOutput_17 = null;

    //optional table
    String dbschema_tOracleOutput_17 = null;
    String tableName_tOracleOutput_17 = null;
        dbschema_tOracleOutput_17 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_17 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_17=0;

        if(dbschema_tOracleOutput_17 == null || dbschema_tOracleOutput_17.trim().length() == 0) {
            tableName_tOracleOutput_17 = ("TST_CARGUEMASIVO");
        } else {
            tableName_tOracleOutput_17 = dbschema_tOracleOutput_17 + "." + ("TST_CARGUEMASIVO");
        }
                String update_tOracleOutput_17 = "UPDATE " + tableName_tOracleOutput_17 + " SET PROCESADO = ? WHERE TDOCUMENTOS_ID = ? AND DOCUMENTO = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_17 = conn_tOracleOutput_17.prepareStatement(update_tOracleOutput_17);
                resourceMap.put("pstmt_tOracleOutput_17", pstmt_tOracleOutput_17);





 



/**
 * [tOracleOutput_17 begin ] stop
 */



	
	/**
	 * [tJavaRow_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_21", false);
		start_Hash.put("tJavaRow_21", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_21";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row100");
					}
				
		int tos_count_tJavaRow_21 = 0;
		

int nb_line_tJavaRow_21 = 0;

 



/**
 * [tJavaRow_21 begin ] stop
 */



	
	/**
	 * [tOracleOutput_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_16", false);
		start_Hash.put("tOracleOutput_16", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_16";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row99");
					}
				
		int tos_count_tOracleOutput_16 = 0;
		






    
    int nb_line_tOracleOutput_16 = 0;
    int nb_line_update_tOracleOutput_16 = 0;
    int nb_line_inserted_tOracleOutput_16 = 0;
    int nb_line_deleted_tOracleOutput_16 = 0;
    int nb_line_rejected_tOracleOutput_16 = 0;

    int tmp_batchUpdateCount_tOracleOutput_16 = 0;

    int deletedCount_tOracleOutput_16=0;
    int updatedCount_tOracleOutput_16=0;
    int insertedCount_tOracleOutput_16=0;
    int rowsToCommitCount_tOracleOutput_16=0;
    int rejectedCount_tOracleOutput_16=0;

    boolean whetherReject_tOracleOutput_16 = false;

    java.sql.Connection conn_tOracleOutput_16 = null;

    //optional table
    String dbschema_tOracleOutput_16 = null;
    String tableName_tOracleOutput_16 = null;
        dbschema_tOracleOutput_16 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_16 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_16=0;

        if(dbschema_tOracleOutput_16 == null || dbschema_tOracleOutput_16.trim().length() == 0) {
            tableName_tOracleOutput_16 = ("TST_ERRCMASIVO");
        } else {
            tableName_tOracleOutput_16 = dbschema_tOracleOutput_16 + "." + ("TST_ERRCMASIVO");
        }
                String insert_tOracleOutput_16 = "INSERT INTO " + tableName_tOracleOutput_16 + " (TDOCUMENTOS_ID,DOCUMENTO,MENSAJE) VALUES (?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_16 = conn_tOracleOutput_16.prepareStatement(insert_tOracleOutput_16);
                        resourceMap.put("pstmt_tOracleOutput_16", pstmt_tOracleOutput_16);





 



/**
 * [tOracleOutput_16 begin ] stop
 */



	
	/**
	 * [tJavaRow_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_20", false);
		start_Hash.put("tJavaRow_20", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_20";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row98");
					}
				
		int tos_count_tJavaRow_20 = 0;
		

int nb_line_tJavaRow_20 = 0;

 



/**
 * [tJavaRow_20 begin ] stop
 */



	
	/**
	 * [tOracleInput_32 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_32", false);
		start_Hash.put("tOracleInput_32", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_32";
	
	
		int tos_count_tOracleInput_32 = 0;
		
	


	
		    int nb_line_tOracleInput_32 = 0;
		    java.sql.Connection conn_tOracleInput_32 = null;
				conn_tOracleInput_32 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_32 = false;
				boolean isConnectionWrapped_tOracleInput_32 = !(conn_tOracleInput_32 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_32.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_32 = null;
                if (isConnectionWrapped_tOracleInput_32) {
					unwrappedOraConn_tOracleInput_32 = conn_tOracleInput_32.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_32 != null) {
                        isTimeZoneNull_tOracleInput_32 = (unwrappedOraConn_tOracleInput_32.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_32 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_32).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_32) {
					java.sql.Statement stmtGetTZ_tOracleInput_32 = conn_tOracleInput_32.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_32 = stmtGetTZ_tOracleInput_32.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_32 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_32.next()) {
						sessionTimezone_tOracleInput_32 = rsGetTZ_tOracleInput_32.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_32 && unwrappedOraConn_tOracleInput_32 != null) {
                        unwrappedOraConn_tOracleInput_32.setSessionTimeZone(sessionTimezone_tOracleInput_32);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_32).setSessionTimeZone(sessionTimezone_tOracleInput_32);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_32 = conn_tOracleInput_32.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_32.setFetchSize(1000);


		    String dbquery_tOracleInput_32 = "SELECT TSC.TDOCUMENTOS_ID,\n       TSC.DOCUMENTO,\n       TCS.TOTAL\nFROM TST_CARGUEMASIVO TSC\nINNER JOIN (SELECT TC.P"
+"RIMER_NOMBRE,\n                          TC.SEGUNDO_NOMBRE,\n                          TC.PRIMER_APELLIDO,\n            "
+"              TC.SEGUNDO_APELLIDO,\n                          TC.FECHA_NACIMIENTO,\n                          COUNT(*) A"
+"S TOTAL      \n                   FROM TST_CARGUEMASIVO TC\n                   WHERE TC.PROCESADO IS NULL\n             "
+"      GROUP BY TC.PRIMER_NOMBRE,\n                            TC.SEGUNDO_NOMBRE,\n                            TC.PRIMER_"
+"APELLIDO,\n                            TC.SEGUNDO_APELLIDO,\n                            TC.FECHA_NACIMIENTO\n          "
+"         HAVING COUNT(1) > 1) TCS ON TSC.PRIMER_NOMBRE = TCS.PRIMER_NOMBRE                  \nWHERE TSC.PROCESADO IS NUL"
+"L      \n      AND TSC.PRIMER_NOMBRE = TCS.PRIMER_NOMBRE\n      AND TSC.SEGUNDO_NOMBRE = TCS.SEGUNDO_NOMBRE\n      AND T"
+"SC.PRIMER_APELLIDO = TCS.PRIMER_APELLIDO\n      AND TSC.SEGUNDO_APELLIDO = TCS.SEGUNDO_APELLIDO\n      AND TSC.FECHA_NAC"
+"IMIENTO = TCS.FECHA_NACIMIENTO";
		    

		    globalMap.put("tOracleInput_32_QUERY",dbquery_tOracleInput_32);

		    java.sql.ResultSet rs_tOracleInput_32 = null;

		    try {
		    	rs_tOracleInput_32 = stmt_tOracleInput_32.executeQuery(dbquery_tOracleInput_32);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_32 = rs_tOracleInput_32.getMetaData();
		    	int colQtyInRs_tOracleInput_32 = rsmd_tOracleInput_32.getColumnCount();

		    String tmpContent_tOracleInput_32 = null;
		    
		    
		    while (rs_tOracleInput_32.next()) {
		        nb_line_tOracleInput_32++;
		        
							if(colQtyInRs_tOracleInput_32 < 1) {
								row98.TDOCUMENTOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_32.getObject(1) != null) {
						row98.TDOCUMENTOS_ID = rs_tOracleInput_32.getInt(1);
					} else {
				
						row98.TDOCUMENTOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_32 < 2) {
								row98.DOCUMENTO = null;
							} else {
	                         		
        	row98.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_32, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_32 < 3) {
								row98.TOTAL = null;
							} else {
		                          
					if(rs_tOracleInput_32.getObject(3) != null) {
						row98.TOTAL = rs_tOracleInput_32.getBigDecimal(3);
					} else {
				
						row98.TOTAL = null;
					}
		                    }
					




 



/**
 * [tOracleInput_32 begin ] stop
 */
	
	/**
	 * [tOracleInput_32 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_32";
	
	

 


	tos_count_tOracleInput_32++;

/**
 * [tOracleInput_32 main ] stop
 */
	
	/**
	 * [tOracleInput_32 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_32";
	
	

 



/**
 * [tOracleInput_32 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_20 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_20";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row98"
						
						);
					}
					

    //Code generate according to input schema and output schema
row99.TDOCUMENTOS_ID = row98.TDOCUMENTOS_ID;
row99.DOCUMENTO = row98.DOCUMENTO;
row99.MENSAJE = "La persona se encuentra " + row98.TOTAL + " veces en el archivo plano con el mismo primer nombre, segundo nombre, primer apellido, segundo apellido y fecha de nacimiento";
    nb_line_tJavaRow_20++;   

 


	tos_count_tJavaRow_20++;

/**
 * [tJavaRow_20 main ] stop
 */
	
	/**
	 * [tJavaRow_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_20";
	
	

 



/**
 * [tJavaRow_20 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_16 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_16";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row99"
						
						);
					}
					



            row100 = null;
        whetherReject_tOracleOutput_16 = false;
                        if(row99.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_16.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_16.setInt(1, row99.TDOCUMENTOS_ID);
}

                        if(row99.DOCUMENTO == null) {
pstmt_tOracleOutput_16.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_16.setString(2, row99.DOCUMENTO);
}

                        if(row99.MENSAJE == null) {
pstmt_tOracleOutput_16.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_16.setString(3, row99.MENSAJE);
}

                try {
                    nb_line_tOracleOutput_16++;
                    int processedCount_tOracleOutput_16 = pstmt_tOracleOutput_16.executeUpdate();
                    insertedCount_tOracleOutput_16 += processedCount_tOracleOutput_16;
                    rowsToCommitCount_tOracleOutput_16 += processedCount_tOracleOutput_16;
                } catch(java.lang.Exception e_tOracleOutput_16) {
globalMap.put("tOracleOutput_16_ERROR_MESSAGE",e_tOracleOutput_16.getMessage());
                    whetherReject_tOracleOutput_16 = true;
                            System.err.print(e_tOracleOutput_16.getMessage());
                }
            if(!whetherReject_tOracleOutput_16) {
                            row100 = new row100Struct();
                                row100.TDOCUMENTOS_ID = row99.TDOCUMENTOS_ID;
                                row100.DOCUMENTO = row99.DOCUMENTO;
                                row100.MENSAJE = row99.MENSAJE;
            }

 


	tos_count_tOracleOutput_16++;

/**
 * [tOracleOutput_16 main ] stop
 */
	
	/**
	 * [tOracleOutput_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_16";
	
	

 



/**
 * [tOracleOutput_16 process_data_begin ] stop
 */
// Start of branch "row100"
if(row100 != null) { 



	
	/**
	 * [tJavaRow_21 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_21";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row100"
						
						);
					}
					

    //Code generate according to input schema and output schema
row101.TDOCUMENTOS_ID = row100.TDOCUMENTOS_ID;
row101.DOCUMENTO = row100.DOCUMENTO;
row101.PROCESADO = 4;//Código de procesado con duplicados en el archivo con el mismo primer nombre, segundo nombre, primer apellido, segundo apellido y fecha de nacimiento.


    nb_line_tJavaRow_21++;   

 


	tos_count_tJavaRow_21++;

/**
 * [tJavaRow_21 main ] stop
 */
	
	/**
	 * [tJavaRow_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_21";
	
	

 



/**
 * [tJavaRow_21 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_17 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_17";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row101"
						
						);
					}
					



            row102 = null;
        whetherReject_tOracleOutput_17 = false;
                    if(row101.PROCESADO == null) {
pstmt_tOracleOutput_17.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_17.setInt(1, row101.PROCESADO);
}


                    if(row101.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_17.setNull(2 + count_tOracleOutput_17, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_17.setInt(2 + count_tOracleOutput_17, row101.TDOCUMENTOS_ID);
}


                    if(row101.DOCUMENTO == null) {
pstmt_tOracleOutput_17.setNull(3 + count_tOracleOutput_17, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_17.setString(3 + count_tOracleOutput_17, row101.DOCUMENTO);
}

                try {
                    nb_line_tOracleOutput_17++;
                    int processedCount_tOracleOutput_17 = pstmt_tOracleOutput_17.executeUpdate();
                    updatedCount_tOracleOutput_17 += processedCount_tOracleOutput_17;
                    rowsToCommitCount_tOracleOutput_17 += processedCount_tOracleOutput_17;
                } catch(java.lang.Exception e_tOracleOutput_17) {
globalMap.put("tOracleOutput_17_ERROR_MESSAGE",e_tOracleOutput_17.getMessage());
                    whetherReject_tOracleOutput_17 = true;
                            System.err.print(e_tOracleOutput_17.getMessage());
                }
            if(!whetherReject_tOracleOutput_17) {
                            row102 = new row102Struct();
                                row102.TDOCUMENTOS_ID = row101.TDOCUMENTOS_ID;
                                row102.DOCUMENTO = row101.DOCUMENTO;
                                row102.PROCESADO = row101.PROCESADO;
            }

 


	tos_count_tOracleOutput_17++;

/**
 * [tOracleOutput_17 main ] stop
 */
	
	/**
	 * [tOracleOutput_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_17";
	
	

 



/**
 * [tOracleOutput_17 process_data_begin ] stop
 */
// Start of branch "row102"
if(row102 != null) { 



	
	/**
	 * [tOracleCommit_8 main ] start
	 */

	

	
	
	currentComponent="tOracleCommit_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row102"
						
						);
					}
					

	java.sql.Connection conn_tOracleCommit_8 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");

if(conn_tOracleCommit_8 != null && !conn_tOracleCommit_8.isClosed()) {
	
			
			conn_tOracleCommit_8.commit();
			
	
}

 


	tos_count_tOracleCommit_8++;

/**
 * [tOracleCommit_8 main ] stop
 */
	
	/**
	 * [tOracleCommit_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleCommit_8";
	
	

 



/**
 * [tOracleCommit_8 process_data_begin ] stop
 */
	
	/**
	 * [tOracleCommit_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleCommit_8";
	
	

 



/**
 * [tOracleCommit_8 process_data_end ] stop
 */

} // End of branch "row102"




	
	/**
	 * [tOracleOutput_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_17";
	
	

 



/**
 * [tOracleOutput_17 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_21";
	
	

 



/**
 * [tJavaRow_21 process_data_end ] stop
 */

} // End of branch "row100"




	
	/**
	 * [tOracleOutput_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_16";
	
	

 



/**
 * [tOracleOutput_16 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_20";
	
	

 



/**
 * [tJavaRow_20 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_32 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_32";
	
	

 



/**
 * [tOracleInput_32 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_32 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_32";
	
	

}
}finally{
	if (rs_tOracleInput_32 != null) {
		rs_tOracleInput_32.close();
	}
	if (stmt_tOracleInput_32 != null) {
		stmt_tOracleInput_32.close();
	}
}

globalMap.put("tOracleInput_32_NB_LINE",nb_line_tOracleInput_32);
 

ok_Hash.put("tOracleInput_32", true);
end_Hash.put("tOracleInput_32", System.currentTimeMillis());




/**
 * [tOracleInput_32 end ] stop
 */

	
	/**
	 * [tJavaRow_20 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_20";
	
	

globalMap.put("tJavaRow_20_NB_LINE",nb_line_tJavaRow_20);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row98");
			  	}
			  	
 

ok_Hash.put("tJavaRow_20", true);
end_Hash.put("tJavaRow_20", System.currentTimeMillis());




/**
 * [tJavaRow_20 end ] stop
 */

	
	/**
	 * [tOracleOutput_16 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_16";
	
	
	



	
        if(pstmt_tOracleOutput_16 != null) {
			
				pstmt_tOracleOutput_16.close();
				resourceMap.remove("pstmt_tOracleOutput_16");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_16", true);

	
	nb_line_deleted_tOracleOutput_16=nb_line_deleted_tOracleOutput_16+ deletedCount_tOracleOutput_16;
	nb_line_update_tOracleOutput_16=nb_line_update_tOracleOutput_16 + updatedCount_tOracleOutput_16;
	nb_line_inserted_tOracleOutput_16=nb_line_inserted_tOracleOutput_16 + insertedCount_tOracleOutput_16;
	nb_line_rejected_tOracleOutput_16=nb_line_rejected_tOracleOutput_16 + rejectedCount_tOracleOutput_16;
	
        globalMap.put("tOracleOutput_16_NB_LINE",nb_line_tOracleOutput_16);
        globalMap.put("tOracleOutput_16_NB_LINE_UPDATED",nb_line_update_tOracleOutput_16);
        globalMap.put("tOracleOutput_16_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_16);
        globalMap.put("tOracleOutput_16_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_16);
        globalMap.put("tOracleOutput_16_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_16);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row99");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_16", true);
end_Hash.put("tOracleOutput_16", System.currentTimeMillis());




/**
 * [tOracleOutput_16 end ] stop
 */

	
	/**
	 * [tJavaRow_21 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_21";
	
	

globalMap.put("tJavaRow_21_NB_LINE",nb_line_tJavaRow_21);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row100");
			  	}
			  	
 

ok_Hash.put("tJavaRow_21", true);
end_Hash.put("tJavaRow_21", System.currentTimeMillis());




/**
 * [tJavaRow_21 end ] stop
 */

	
	/**
	 * [tOracleOutput_17 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_17";
	
	
	



	
        if(pstmt_tOracleOutput_17 != null) {
			
				pstmt_tOracleOutput_17.close();
				resourceMap.remove("pstmt_tOracleOutput_17");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_17", true);

	
	nb_line_deleted_tOracleOutput_17=nb_line_deleted_tOracleOutput_17+ deletedCount_tOracleOutput_17;
	nb_line_update_tOracleOutput_17=nb_line_update_tOracleOutput_17 + updatedCount_tOracleOutput_17;
	nb_line_inserted_tOracleOutput_17=nb_line_inserted_tOracleOutput_17 + insertedCount_tOracleOutput_17;
	nb_line_rejected_tOracleOutput_17=nb_line_rejected_tOracleOutput_17 + rejectedCount_tOracleOutput_17;
	
        globalMap.put("tOracleOutput_17_NB_LINE",nb_line_tOracleOutput_17);
        globalMap.put("tOracleOutput_17_NB_LINE_UPDATED",nb_line_update_tOracleOutput_17);
        globalMap.put("tOracleOutput_17_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_17);
        globalMap.put("tOracleOutput_17_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_17);
        globalMap.put("tOracleOutput_17_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_17);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row101");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_17", true);
end_Hash.put("tOracleOutput_17", System.currentTimeMillis());




/**
 * [tOracleOutput_17 end ] stop
 */

	
	/**
	 * [tOracleCommit_8 end ] start
	 */

	

	
	
	currentComponent="tOracleCommit_8";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row102");
			  	}
			  	
 

ok_Hash.put("tOracleCommit_8", true);
end_Hash.put("tOracleCommit_8", System.currentTimeMillis());




/**
 * [tOracleCommit_8 end ] stop
 */















				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_32:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk17", 0, "ok");
								} 
							
							tOracleInput_8Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_32 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_32";
	
	

 



/**
 * [tOracleInput_32 finally ] stop
 */

	
	/**
	 * [tJavaRow_20 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_20";
	
	

 



/**
 * [tJavaRow_20 finally ] stop
 */

	
	/**
	 * [tOracleOutput_16 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_16";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_16") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_16 = null;
                if ((pstmtToClose_tOracleOutput_16 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_16")) != null) {
                    pstmtToClose_tOracleOutput_16.close();
                }
    }
 



/**
 * [tOracleOutput_16 finally ] stop
 */

	
	/**
	 * [tJavaRow_21 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_21";
	
	

 



/**
 * [tJavaRow_21 finally ] stop
 */

	
	/**
	 * [tOracleOutput_17 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_17";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_17") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_17 = null;
                if ((pstmtToClose_tOracleOutput_17 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_17")) != null) {
                    pstmtToClose_tOracleOutput_17.close();
                }
    }
 



/**
 * [tOracleOutput_17 finally ] stop
 */

	
	/**
	 * [tOracleCommit_8 finally ] start
	 */

	

	
	
	currentComponent="tOracleCommit_8";
	
	

 



/**
 * [tOracleCommit_8 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_32_SUBPROCESS_STATE", 1);
	}
	


public static class row43Struct implements routines.system.IPersistableRow<row43Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return null;
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer PROCESADO;

				public Integer getPROCESADO () {
					return this.PROCESADO;
				}

				public Boolean PROCESADOIsNullable(){
				    return true;
				}
				public Boolean PROCESADOIsKey(){
				    return false;
				}
				public Integer PROCESADOLength(){
				    return null;
				}
				public Integer PROCESADOPrecision(){
				    return null;
				}
				public String PROCESADODefault(){
				
					return null;
				
				}
				public String PROCESADOComment(){
				
				    return "";
				
				}
				public String PROCESADOPattern(){
				
					return "";
				
				}
				public String PROCESADOOriginalDbColumnName(){
				
					return "PROCESADO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PROCESADO="+String.valueOf(PROCESADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row43Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row40Struct implements routines.system.IPersistableRow<row40Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return null;
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer PROCESADO;

				public Integer getPROCESADO () {
					return this.PROCESADO;
				}

				public Boolean PROCESADOIsNullable(){
				    return true;
				}
				public Boolean PROCESADOIsKey(){
				    return false;
				}
				public Integer PROCESADOLength(){
				    return null;
				}
				public Integer PROCESADOPrecision(){
				    return null;
				}
				public String PROCESADODefault(){
				
					return null;
				
				}
				public String PROCESADOComment(){
				
				    return "";
				
				}
				public String PROCESADOPattern(){
				
					return "";
				
				}
				public String PROCESADOOriginalDbColumnName(){
				
					return "PROCESADO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PROCESADO="+String.valueOf(PROCESADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row40Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row41Struct implements routines.system.IPersistableRow<row41Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return true;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",MENSAJE="+MENSAJE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row41Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row38Struct implements routines.system.IPersistableRow<row38Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return true;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",MENSAJE="+MENSAJE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row38Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class ERROR_DUPLICADOSStruct implements routines.system.IPersistableRow<ERROR_DUPLICADOSStruct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer ERR_TD;

				public Integer getERR_TD () {
					return this.ERR_TD;
				}

				public Boolean ERR_TDIsNullable(){
				    return true;
				}
				public Boolean ERR_TDIsKey(){
				    return false;
				}
				public Integer ERR_TDLength(){
				    return 0;
				}
				public Integer ERR_TDPrecision(){
				    return 0;
				}
				public String ERR_TDDefault(){
				
					return "";
				
				}
				public String ERR_TDComment(){
				
				    return "";
				
				}
				public String ERR_TDPattern(){
				
					return "";
				
				}
				public String ERR_TDOriginalDbColumnName(){
				
					return "ERR_TD";
				
				}

				
			    public Integer ERR_NAC;

				public Integer getERR_NAC () {
					return this.ERR_NAC;
				}

				public Boolean ERR_NACIsNullable(){
				    return true;
				}
				public Boolean ERR_NACIsKey(){
				    return false;
				}
				public Integer ERR_NACLength(){
				    return 0;
				}
				public Integer ERR_NACPrecision(){
				    return 0;
				}
				public String ERR_NACDefault(){
				
					return "";
				
				}
				public String ERR_NACComment(){
				
				    return "";
				
				}
				public String ERR_NACPattern(){
				
					return "";
				
				}
				public String ERR_NACOriginalDbColumnName(){
				
					return "ERR_NAC";
				
				}

				
			    public Integer ERR_NAF;

				public Integer getERR_NAF () {
					return this.ERR_NAF;
				}

				public Boolean ERR_NAFIsNullable(){
				    return true;
				}
				public Boolean ERR_NAFIsKey(){
				    return false;
				}
				public Integer ERR_NAFLength(){
				    return 0;
				}
				public Integer ERR_NAFPrecision(){
				    return 0;
				}
				public String ERR_NAFDefault(){
				
					return "";
				
				}
				public String ERR_NAFComment(){
				
				    return "";
				
				}
				public String ERR_NAFPattern(){
				
					return "";
				
				}
				public String ERR_NAFOriginalDbColumnName(){
				
					return "ERR_NAF";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.ERR_TD = readInteger(dis);
					
						this.ERR_NAC = readInteger(dis);
					
						this.ERR_NAF = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.ERR_TD = readInteger(dis);
					
						this.ERR_NAC = readInteger(dis);
					
						this.ERR_NAF = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.ERR_TD,dos);
					
					// Integer
				
						writeInteger(this.ERR_NAC,dos);
					
					// Integer
				
						writeInteger(this.ERR_NAF,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.ERR_TD,dos);
					
					// Integer
				
						writeInteger(this.ERR_NAC,dos);
					
					// Integer
				
						writeInteger(this.ERR_NAF,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",ERR_TD="+String.valueOf(ERR_TD));
		sb.append(",ERR_NAC="+String.valueOf(ERR_NAC));
		sb.append(",ERR_NAF="+String.valueOf(ERR_NAF));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ERROR_DUPLICADOSStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row39Struct implements routines.system.IPersistableRow<row39Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer ERR_TD;

				public Integer getERR_TD () {
					return this.ERR_TD;
				}

				public Boolean ERR_TDIsNullable(){
				    return true;
				}
				public Boolean ERR_TDIsKey(){
				    return false;
				}
				public Integer ERR_TDLength(){
				    return 0;
				}
				public Integer ERR_TDPrecision(){
				    return 0;
				}
				public String ERR_TDDefault(){
				
					return "";
				
				}
				public String ERR_TDComment(){
				
				    return "";
				
				}
				public String ERR_TDPattern(){
				
					return "";
				
				}
				public String ERR_TDOriginalDbColumnName(){
				
					return "ERR_TD";
				
				}

				
			    public Integer ERR_NAC;

				public Integer getERR_NAC () {
					return this.ERR_NAC;
				}

				public Boolean ERR_NACIsNullable(){
				    return true;
				}
				public Boolean ERR_NACIsKey(){
				    return false;
				}
				public Integer ERR_NACLength(){
				    return 0;
				}
				public Integer ERR_NACPrecision(){
				    return 0;
				}
				public String ERR_NACDefault(){
				
					return "";
				
				}
				public String ERR_NACComment(){
				
				    return "";
				
				}
				public String ERR_NACPattern(){
				
					return "";
				
				}
				public String ERR_NACOriginalDbColumnName(){
				
					return "ERR_NAC";
				
				}

				
			    public Integer ERR_NAF;

				public Integer getERR_NAF () {
					return this.ERR_NAF;
				}

				public Boolean ERR_NAFIsNullable(){
				    return true;
				}
				public Boolean ERR_NAFIsKey(){
				    return false;
				}
				public Integer ERR_NAFLength(){
				    return 0;
				}
				public Integer ERR_NAFPrecision(){
				    return 0;
				}
				public String ERR_NAFDefault(){
				
					return "";
				
				}
				public String ERR_NAFComment(){
				
				    return "";
				
				}
				public String ERR_NAFPattern(){
				
					return "";
				
				}
				public String ERR_NAFOriginalDbColumnName(){
				
					return "ERR_NAF";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.ERR_TD = readInteger(dis);
					
						this.ERR_NAC = readInteger(dis);
					
						this.ERR_NAF = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.ERR_TD = readInteger(dis);
					
						this.ERR_NAC = readInteger(dis);
					
						this.ERR_NAF = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.ERR_TD,dos);
					
					// Integer
				
						writeInteger(this.ERR_NAC,dos);
					
					// Integer
				
						writeInteger(this.ERR_NAF,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.ERR_TD,dos);
					
					// Integer
				
						writeInteger(this.ERR_NAC,dos);
					
					// Integer
				
						writeInteger(this.ERR_NAF,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",ERR_TD="+String.valueOf(ERR_TD));
		sb.append(",ERR_NAC="+String.valueOf(ERR_NAC));
		sb.append(",ERR_NAF="+String.valueOf(ERR_NAF));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row39Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row39Struct row39 = new row39Struct();
ERROR_DUPLICADOSStruct ERROR_DUPLICADOS = new ERROR_DUPLICADOSStruct();
row38Struct row38 = new row38Struct();
row41Struct row41 = new row41Struct();
row40Struct row40 = new row40Struct();
row43Struct row43 = new row43Struct();









	
	/**
	 * [tOracleCommit_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleCommit_3", false);
		start_Hash.put("tOracleCommit_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleCommit_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row43");
					}
				
		int tos_count_tOracleCommit_3 = 0;
		

 



/**
 * [tOracleCommit_3 begin ] stop
 */



	
	/**
	 * [tOracleOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_7", false);
		start_Hash.put("tOracleOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row40");
					}
				
		int tos_count_tOracleOutput_7 = 0;
		






        int updateKeyCount_tOracleOutput_7 = 2;
        if(updateKeyCount_tOracleOutput_7 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_7 == 3 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_7 = 0;
    int nb_line_update_tOracleOutput_7 = 0;
    int nb_line_inserted_tOracleOutput_7 = 0;
    int nb_line_deleted_tOracleOutput_7 = 0;
    int nb_line_rejected_tOracleOutput_7 = 0;

    int tmp_batchUpdateCount_tOracleOutput_7 = 0;

    int deletedCount_tOracleOutput_7=0;
    int updatedCount_tOracleOutput_7=0;
    int insertedCount_tOracleOutput_7=0;
    int rowsToCommitCount_tOracleOutput_7=0;
    int rejectedCount_tOracleOutput_7=0;

    boolean whetherReject_tOracleOutput_7 = false;

    java.sql.Connection conn_tOracleOutput_7 = null;

    //optional table
    String dbschema_tOracleOutput_7 = null;
    String tableName_tOracleOutput_7 = null;
        dbschema_tOracleOutput_7 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_7 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_7=0;

        if(dbschema_tOracleOutput_7 == null || dbschema_tOracleOutput_7.trim().length() == 0) {
            tableName_tOracleOutput_7 = ("TST_CARGUEMASIVO");
        } else {
            tableName_tOracleOutput_7 = dbschema_tOracleOutput_7 + "." + ("TST_CARGUEMASIVO");
        }
                String update_tOracleOutput_7 = "UPDATE " + tableName_tOracleOutput_7 + " SET PROCESADO = ? WHERE TDOCUMENTOS_ID = ? AND DOCUMENTO = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_7 = conn_tOracleOutput_7.prepareStatement(update_tOracleOutput_7);
                resourceMap.put("pstmt_tOracleOutput_7", pstmt_tOracleOutput_7);





 



/**
 * [tOracleOutput_7 begin ] stop
 */



	
	/**
	 * [tJavaRow_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_13", false);
		start_Hash.put("tJavaRow_13", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_13";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row41");
					}
				
		int tos_count_tJavaRow_13 = 0;
		

int nb_line_tJavaRow_13 = 0;

 



/**
 * [tJavaRow_13 begin ] stop
 */



	
	/**
	 * [tOracleOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_6", false);
		start_Hash.put("tOracleOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row38");
					}
				
		int tos_count_tOracleOutput_6 = 0;
		






    
    int nb_line_tOracleOutput_6 = 0;
    int nb_line_update_tOracleOutput_6 = 0;
    int nb_line_inserted_tOracleOutput_6 = 0;
    int nb_line_deleted_tOracleOutput_6 = 0;
    int nb_line_rejected_tOracleOutput_6 = 0;

    int tmp_batchUpdateCount_tOracleOutput_6 = 0;

    int deletedCount_tOracleOutput_6=0;
    int updatedCount_tOracleOutput_6=0;
    int insertedCount_tOracleOutput_6=0;
    int rowsToCommitCount_tOracleOutput_6=0;
    int rejectedCount_tOracleOutput_6=0;

    boolean whetherReject_tOracleOutput_6 = false;

    java.sql.Connection conn_tOracleOutput_6 = null;

    //optional table
    String dbschema_tOracleOutput_6 = null;
    String tableName_tOracleOutput_6 = null;
        dbschema_tOracleOutput_6 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_6 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_6=0;

        if(dbschema_tOracleOutput_6 == null || dbschema_tOracleOutput_6.trim().length() == 0) {
            tableName_tOracleOutput_6 = ("TST_ERRCMASIVO");
        } else {
            tableName_tOracleOutput_6 = dbschema_tOracleOutput_6 + "." + ("TST_ERRCMASIVO");
        }
                String insert_tOracleOutput_6 = "INSERT INTO " + tableName_tOracleOutput_6 + " (TDOCUMENTOS_ID,DOCUMENTO,MENSAJE) VALUES (?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_6 = conn_tOracleOutput_6.prepareStatement(insert_tOracleOutput_6);
                        resourceMap.put("pstmt_tOracleOutput_6", pstmt_tOracleOutput_6);





 



/**
 * [tOracleOutput_6 begin ] stop
 */



	
	/**
	 * [tJavaRow_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_12", false);
		start_Hash.put("tJavaRow_12", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_12";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"ERROR_DUPLICADOS");
					}
				
		int tos_count_tJavaRow_12 = 0;
		

int nb_line_tJavaRow_12 = 0;

 



/**
 * [tJavaRow_12 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row39");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
ERROR_DUPLICADOSStruct ERROR_DUPLICADOS_tmp = new ERROR_DUPLICADOSStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tOracleInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_8", false);
		start_Hash.put("tOracleInput_8", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_8";
	
	
		int tos_count_tOracleInput_8 = 0;
		
	


	
		    int nb_line_tOracleInput_8 = 0;
		    java.sql.Connection conn_tOracleInput_8 = null;
				conn_tOracleInput_8 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_8 = false;
				boolean isConnectionWrapped_tOracleInput_8 = !(conn_tOracleInput_8 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_8.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_8 = null;
                if (isConnectionWrapped_tOracleInput_8) {
					unwrappedOraConn_tOracleInput_8 = conn_tOracleInput_8.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_8 != null) {
                        isTimeZoneNull_tOracleInput_8 = (unwrappedOraConn_tOracleInput_8.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_8 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_8).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_8) {
					java.sql.Statement stmtGetTZ_tOracleInput_8 = conn_tOracleInput_8.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_8 = stmtGetTZ_tOracleInput_8.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_8 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_8.next()) {
						sessionTimezone_tOracleInput_8 = rsGetTZ_tOracleInput_8.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_8 && unwrappedOraConn_tOracleInput_8 != null) {
                        unwrappedOraConn_tOracleInput_8.setSessionTimeZone(sessionTimezone_tOracleInput_8);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_8).setSessionTimeZone(sessionTimezone_tOracleInput_8);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_8 = conn_tOracleInput_8.createStatement();

		    String dbquery_tOracleInput_8 = "SELECT TSC.TDOCUMENTOS_ID,\n       TSC.DOCUMENTO,\n       SUM(CASE WHEN GP2.ID IS NOT NULL THEN 1 ELSE 0 END) AS ERR_TD"
+", \n       SUM(CASE WHEN GP3.ID IS NOT NULL THEN 1 ELSE 0 END) AS ERR_NAC, \n       SUM(CASE WHEN GP4.ID IS NOT NULL THE"
+"N 1 ELSE 0 END) AS ERR_NAF\nFROM TST_CARGUEMASIVO TSC\nLEFT JOIN GEN_PERSONAS GP ON TSC.PERSONAS_ID = GP.ID\nLEFT JOIN G"
+"EN_PERSONAS GP2 ON GP2.TDOCUMENTOS_ID = TSC.TDOCUMENTOS_ID AND GP2.DOCUMENTO = TSC.DOCUMENTO AND GP2.ID <> TSC.PERSONAS_"
+"ID\nLEFT JOIN GEN_PERSONAS GP3 ON GP3.DOCUMENTO = TSC.DOCUMENTO\n                              AND UPPER(TRIM(GP3.PRIMER"
+"_NOMBRE)) = TSC.PRIMER_NOMBRE\n                              AND UPPER(TRIM(GP3.PRIMER_APELLIDO)) = TSC.PRIMER_APELLIDO"
+"\n                              AND GP3.ID <> TSC.PERSONAS_ID\nLEFT JOIN GEN_PERSONAS GP4 ON TRUNC(GP4.FECHA_NACIMIENTO)="
+"TRUNC(TSC.FECHA_NACIMIENTO)\n                              AND UPPER(TRIM(GP4.PRIMER_NOMBRE)) = TSC.PRIMER_NOMBRE\n     "
+"                         AND NVL(UPPER(TRIM(GP4.SEGUNDO_NOMBRE)),' ') = NVL(TSC.SEGUNDO_NOMBRE,' ')\n                   "
+"           AND UPPER(TRIM(GP4.PRIMER_APELLIDO)) = TSC.PRIMER_APELLIDO\n                              AND NVL(UPPER(TRIM("
+"GP4.SEGUNDO_APELLIDO)),' ') = NVL(TSC.SEGUNDO_APELLIDO,' ')\n                              AND GP4.ID <> TSC.PERSONAS_ID"
+" \nWHERE TSC.PROCESADO IS NULL\nGROUP BY TSC.TDOCUMENTOS_ID,TSC.DOCUMENTO";
		    

		    globalMap.put("tOracleInput_8_QUERY",dbquery_tOracleInput_8);

		    java.sql.ResultSet rs_tOracleInput_8 = null;

		    try {
		    	rs_tOracleInput_8 = stmt_tOracleInput_8.executeQuery(dbquery_tOracleInput_8);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_8 = rs_tOracleInput_8.getMetaData();
		    	int colQtyInRs_tOracleInput_8 = rsmd_tOracleInput_8.getColumnCount();

		    String tmpContent_tOracleInput_8 = null;
		    
		    
		    while (rs_tOracleInput_8.next()) {
		        nb_line_tOracleInput_8++;
		        
							if(colQtyInRs_tOracleInput_8 < 1) {
								row39.TDOCUMENTOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(1) != null) {
						row39.TDOCUMENTOS_ID = rs_tOracleInput_8.getInt(1);
					} else {
				
						row39.TDOCUMENTOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 2) {
								row39.DOCUMENTO = null;
							} else {
	                         		
        	row39.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 3) {
								row39.ERR_TD = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(3) != null) {
						row39.ERR_TD = rs_tOracleInput_8.getInt(3);
					} else {
				
						row39.ERR_TD = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 4) {
								row39.ERR_NAC = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(4) != null) {
						row39.ERR_NAC = rs_tOracleInput_8.getInt(4);
					} else {
				
						row39.ERR_NAC = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 5) {
								row39.ERR_NAF = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(5) != null) {
						row39.ERR_NAF = rs_tOracleInput_8.getInt(5);
					} else {
				
						row39.ERR_NAF = null;
					}
		                    }
					




 



/**
 * [tOracleInput_8 begin ] stop
 */
	
	/**
	 * [tOracleInput_8 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 


	tos_count_tOracleInput_8++;

/**
 * [tOracleInput_8 main ] stop
 */
	
	/**
	 * [tOracleInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row39"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_4 = false;
		boolean mainRowRejected_tMap_4 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

ERROR_DUPLICADOS = null;


// # Output table : 'ERROR_DUPLICADOS'
// # Filter conditions 
if( 

row39.ERR_TD == 1||
row39.ERR_NAC == 1||
row39.ERR_NAF == 1

 ) {
ERROR_DUPLICADOS_tmp.TDOCUMENTOS_ID = row39.TDOCUMENTOS_ID;
ERROR_DUPLICADOS_tmp.DOCUMENTO = row39.DOCUMENTO;
ERROR_DUPLICADOS_tmp.ERR_TD = row39.ERR_TD ;
ERROR_DUPLICADOS_tmp.ERR_NAC = row39.ERR_NAC ;
ERROR_DUPLICADOS_tmp.ERR_NAF = row39.ERR_NAF ;
ERROR_DUPLICADOS = ERROR_DUPLICADOS_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "ERROR_DUPLICADOS"
if(ERROR_DUPLICADOS != null) { 



	
	/**
	 * [tJavaRow_12 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_12";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"ERROR_DUPLICADOS"
						
						);
					}
					

    //Code generate according to input schema and output schema
row38.TDOCUMENTOS_ID = ERROR_DUPLICADOS.TDOCUMENTOS_ID;
row38.DOCUMENTO = ERROR_DUPLICADOS.DOCUMENTO;


context.mensaje = "";

if (ERROR_DUPLICADOS.ERR_TD == 1){
	context.mensaje = "Existen personas en el sistema que concuerda con el mismo tipo y número de documento";
   }  

if (ERROR_DUPLICADOS.ERR_NAC == 1){
   if (context.mensaje.equals("")){
   context.mensaje = "Existen personas en el sistema que concuerda con el mismo primer nombre, primer apellido y número de documento";}
   else {
   context.mensaje = context.mensaje +" - Existen personas en el sistema que concuerda con el mismo primer nombre, primer apellido y número de documento";
   }
   }

if (ERROR_DUPLICADOS.ERR_NAF == 1){
   if (context.mensaje.equals("")){
   context.mensaje = "Existen personas en el sistema que concuerda con el mismo primer nombre, segundo apellido, primer apellido, segundo apellido y fecha de nacimiento";}
   else {
   context.mensaje = context.mensaje +" - Existen personas en el sistema que concuerda con el mismo primer nombre, segundo apellido, primer apellido, segundo apellido y fecha de nacimiento";
   }
   }      
   
row38.MENSAJE = context.mensaje;
    nb_line_tJavaRow_12++;   

 


	tos_count_tJavaRow_12++;

/**
 * [tJavaRow_12 main ] stop
 */
	
	/**
	 * [tJavaRow_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_12";
	
	

 



/**
 * [tJavaRow_12 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_6 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row38"
						
						);
					}
					



            row41 = null;
        whetherReject_tOracleOutput_6 = false;
                        if(row38.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_6.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_6.setInt(1, row38.TDOCUMENTOS_ID);
}

                        if(row38.DOCUMENTO == null) {
pstmt_tOracleOutput_6.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_6.setString(2, row38.DOCUMENTO);
}

                        if(row38.MENSAJE == null) {
pstmt_tOracleOutput_6.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_6.setString(3, row38.MENSAJE);
}

                try {
                    nb_line_tOracleOutput_6++;
                    int processedCount_tOracleOutput_6 = pstmt_tOracleOutput_6.executeUpdate();
                    insertedCount_tOracleOutput_6 += processedCount_tOracleOutput_6;
                    rowsToCommitCount_tOracleOutput_6 += processedCount_tOracleOutput_6;
                } catch(java.lang.Exception e_tOracleOutput_6) {
globalMap.put("tOracleOutput_6_ERROR_MESSAGE",e_tOracleOutput_6.getMessage());
                    whetherReject_tOracleOutput_6 = true;
                            System.err.print(e_tOracleOutput_6.getMessage());
                }
            if(!whetherReject_tOracleOutput_6) {
                            row41 = new row41Struct();
                                row41.TDOCUMENTOS_ID = row38.TDOCUMENTOS_ID;
                                row41.DOCUMENTO = row38.DOCUMENTO;
                                row41.MENSAJE = row38.MENSAJE;
            }

 


	tos_count_tOracleOutput_6++;

/**
 * [tOracleOutput_6 main ] stop
 */
	
	/**
	 * [tOracleOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	

 



/**
 * [tOracleOutput_6 process_data_begin ] stop
 */
// Start of branch "row41"
if(row41 != null) { 



	
	/**
	 * [tJavaRow_13 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_13";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row41"
						
						);
					}
					

    //Code generate according to input schema and output schema
row40.TDOCUMENTOS_ID = row41.TDOCUMENTOS_ID;
row40.DOCUMENTO = row41.DOCUMENTO;
row40.PROCESADO = 6;

    nb_line_tJavaRow_13++;   

 


	tos_count_tJavaRow_13++;

/**
 * [tJavaRow_13 main ] stop
 */
	
	/**
	 * [tJavaRow_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_13";
	
	

 



/**
 * [tJavaRow_13 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_7 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row40"
						
						);
					}
					



            row43 = null;
        whetherReject_tOracleOutput_7 = false;
                    if(row40.PROCESADO == null) {
pstmt_tOracleOutput_7.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_7.setInt(1, row40.PROCESADO);
}


                    if(row40.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_7.setNull(2 + count_tOracleOutput_7, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_7.setInt(2 + count_tOracleOutput_7, row40.TDOCUMENTOS_ID);
}


                    if(row40.DOCUMENTO == null) {
pstmt_tOracleOutput_7.setNull(3 + count_tOracleOutput_7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_7.setString(3 + count_tOracleOutput_7, row40.DOCUMENTO);
}

                try {
                    nb_line_tOracleOutput_7++;
                    int processedCount_tOracleOutput_7 = pstmt_tOracleOutput_7.executeUpdate();
                    updatedCount_tOracleOutput_7 += processedCount_tOracleOutput_7;
                    rowsToCommitCount_tOracleOutput_7 += processedCount_tOracleOutput_7;
                } catch(java.lang.Exception e_tOracleOutput_7) {
globalMap.put("tOracleOutput_7_ERROR_MESSAGE",e_tOracleOutput_7.getMessage());
                    whetherReject_tOracleOutput_7 = true;
                            System.err.print(e_tOracleOutput_7.getMessage());
                }
            if(!whetherReject_tOracleOutput_7) {
                            row43 = new row43Struct();
                                row43.TDOCUMENTOS_ID = row40.TDOCUMENTOS_ID;
                                row43.DOCUMENTO = row40.DOCUMENTO;
                                row43.PROCESADO = row40.PROCESADO;
            }

 


	tos_count_tOracleOutput_7++;

/**
 * [tOracleOutput_7 main ] stop
 */
	
	/**
	 * [tOracleOutput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_7";
	
	

 



/**
 * [tOracleOutput_7 process_data_begin ] stop
 */
// Start of branch "row43"
if(row43 != null) { 



	
	/**
	 * [tOracleCommit_3 main ] start
	 */

	

	
	
	currentComponent="tOracleCommit_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row43"
						
						);
					}
					

	java.sql.Connection conn_tOracleCommit_3 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");

if(conn_tOracleCommit_3 != null && !conn_tOracleCommit_3.isClosed()) {
	
			
			conn_tOracleCommit_3.commit();
			
	
}

 


	tos_count_tOracleCommit_3++;

/**
 * [tOracleCommit_3 main ] stop
 */
	
	/**
	 * [tOracleCommit_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleCommit_3";
	
	

 



/**
 * [tOracleCommit_3 process_data_begin ] stop
 */
	
	/**
	 * [tOracleCommit_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleCommit_3";
	
	

 



/**
 * [tOracleCommit_3 process_data_end ] stop
 */

} // End of branch "row43"




	
	/**
	 * [tOracleOutput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_7";
	
	

 



/**
 * [tOracleOutput_7 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_13";
	
	

 



/**
 * [tJavaRow_13 process_data_end ] stop
 */

} // End of branch "row41"




	
	/**
	 * [tOracleOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	

 



/**
 * [tOracleOutput_6 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_12";
	
	

 



/**
 * [tJavaRow_12 process_data_end ] stop
 */

} // End of branch "ERROR_DUPLICADOS"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_8 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

}
}finally{
	if (rs_tOracleInput_8 != null) {
		rs_tOracleInput_8.close();
	}
	if (stmt_tOracleInput_8 != null) {
		stmt_tOracleInput_8.close();
	}
}

globalMap.put("tOracleInput_8_NB_LINE",nb_line_tOracleInput_8);
 

ok_Hash.put("tOracleInput_8", true);
end_Hash.put("tOracleInput_8", System.currentTimeMillis());




/**
 * [tOracleInput_8 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row39");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tJavaRow_12 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_12";
	
	

globalMap.put("tJavaRow_12_NB_LINE",nb_line_tJavaRow_12);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"ERROR_DUPLICADOS");
			  	}
			  	
 

ok_Hash.put("tJavaRow_12", true);
end_Hash.put("tJavaRow_12", System.currentTimeMillis());




/**
 * [tJavaRow_12 end ] stop
 */

	
	/**
	 * [tOracleOutput_6 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	
	



	
        if(pstmt_tOracleOutput_6 != null) {
			
				pstmt_tOracleOutput_6.close();
				resourceMap.remove("pstmt_tOracleOutput_6");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_6", true);

	
	nb_line_deleted_tOracleOutput_6=nb_line_deleted_tOracleOutput_6+ deletedCount_tOracleOutput_6;
	nb_line_update_tOracleOutput_6=nb_line_update_tOracleOutput_6 + updatedCount_tOracleOutput_6;
	nb_line_inserted_tOracleOutput_6=nb_line_inserted_tOracleOutput_6 + insertedCount_tOracleOutput_6;
	nb_line_rejected_tOracleOutput_6=nb_line_rejected_tOracleOutput_6 + rejectedCount_tOracleOutput_6;
	
        globalMap.put("tOracleOutput_6_NB_LINE",nb_line_tOracleOutput_6);
        globalMap.put("tOracleOutput_6_NB_LINE_UPDATED",nb_line_update_tOracleOutput_6);
        globalMap.put("tOracleOutput_6_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_6);
        globalMap.put("tOracleOutput_6_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_6);
        globalMap.put("tOracleOutput_6_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_6);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row38");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_6", true);
end_Hash.put("tOracleOutput_6", System.currentTimeMillis());




/**
 * [tOracleOutput_6 end ] stop
 */

	
	/**
	 * [tJavaRow_13 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_13";
	
	

globalMap.put("tJavaRow_13_NB_LINE",nb_line_tJavaRow_13);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row41");
			  	}
			  	
 

ok_Hash.put("tJavaRow_13", true);
end_Hash.put("tJavaRow_13", System.currentTimeMillis());




/**
 * [tJavaRow_13 end ] stop
 */

	
	/**
	 * [tOracleOutput_7 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_7";
	
	
	



	
        if(pstmt_tOracleOutput_7 != null) {
			
				pstmt_tOracleOutput_7.close();
				resourceMap.remove("pstmt_tOracleOutput_7");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_7", true);

	
	nb_line_deleted_tOracleOutput_7=nb_line_deleted_tOracleOutput_7+ deletedCount_tOracleOutput_7;
	nb_line_update_tOracleOutput_7=nb_line_update_tOracleOutput_7 + updatedCount_tOracleOutput_7;
	nb_line_inserted_tOracleOutput_7=nb_line_inserted_tOracleOutput_7 + insertedCount_tOracleOutput_7;
	nb_line_rejected_tOracleOutput_7=nb_line_rejected_tOracleOutput_7 + rejectedCount_tOracleOutput_7;
	
        globalMap.put("tOracleOutput_7_NB_LINE",nb_line_tOracleOutput_7);
        globalMap.put("tOracleOutput_7_NB_LINE_UPDATED",nb_line_update_tOracleOutput_7);
        globalMap.put("tOracleOutput_7_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_7);
        globalMap.put("tOracleOutput_7_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_7);
        globalMap.put("tOracleOutput_7_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_7);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row40");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_7", true);
end_Hash.put("tOracleOutput_7", System.currentTimeMillis());




/**
 * [tOracleOutput_7 end ] stop
 */

	
	/**
	 * [tOracleCommit_3 end ] start
	 */

	

	
	
	currentComponent="tOracleCommit_3";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row43");
			  	}
			  	
 

ok_Hash.put("tOracleCommit_3", true);
end_Hash.put("tOracleCommit_3", System.currentTimeMillis());




/**
 * [tOracleCommit_3 end ] stop
 */


















				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_8:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tOracleInput_33Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_8 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tJavaRow_12 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_12";
	
	

 



/**
 * [tJavaRow_12 finally ] stop
 */

	
	/**
	 * [tOracleOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_6") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_6 = null;
                if ((pstmtToClose_tOracleOutput_6 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_6")) != null) {
                    pstmtToClose_tOracleOutput_6.close();
                }
    }
 



/**
 * [tOracleOutput_6 finally ] stop
 */

	
	/**
	 * [tJavaRow_13 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_13";
	
	

 



/**
 * [tJavaRow_13 finally ] stop
 */

	
	/**
	 * [tOracleOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_7";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_7") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_7 = null;
                if ((pstmtToClose_tOracleOutput_7 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_7")) != null) {
                    pstmtToClose_tOracleOutput_7.close();
                }
    }
 



/**
 * [tOracleOutput_7 finally ] stop
 */

	
	/**
	 * [tOracleCommit_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleCommit_3";
	
	

 



/**
 * [tOracleCommit_3 finally ] stop
 */


















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class row107Struct implements routines.system.IPersistableRow<row107Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return null;
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer PROCESADO;

				public Integer getPROCESADO () {
					return this.PROCESADO;
				}

				public Boolean PROCESADOIsNullable(){
				    return true;
				}
				public Boolean PROCESADOIsKey(){
				    return false;
				}
				public Integer PROCESADOLength(){
				    return null;
				}
				public Integer PROCESADOPrecision(){
				    return null;
				}
				public String PROCESADODefault(){
				
					return null;
				
				}
				public String PROCESADOComment(){
				
				    return "";
				
				}
				public String PROCESADOPattern(){
				
					return "";
				
				}
				public String PROCESADOOriginalDbColumnName(){
				
					return "PROCESADO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PROCESADO="+String.valueOf(PROCESADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row107Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row106Struct implements routines.system.IPersistableRow<row106Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return null;
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer PROCESADO;

				public Integer getPROCESADO () {
					return this.PROCESADO;
				}

				public Boolean PROCESADOIsNullable(){
				    return true;
				}
				public Boolean PROCESADOIsKey(){
				    return false;
				}
				public Integer PROCESADOLength(){
				    return null;
				}
				public Integer PROCESADOPrecision(){
				    return null;
				}
				public String PROCESADODefault(){
				
					return null;
				
				}
				public String PROCESADOComment(){
				
				    return "";
				
				}
				public String PROCESADOPattern(){
				
					return "";
				
				}
				public String PROCESADOOriginalDbColumnName(){
				
					return "PROCESADO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PROCESADO="+String.valueOf(PROCESADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row106Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row105Struct implements routines.system.IPersistableRow<row105Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return true;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",MENSAJE="+MENSAJE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row105Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row104Struct implements routines.system.IPersistableRow<row104Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return true;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",MENSAJE="+MENSAJE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row104Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class SIN_AFILIACIONStruct implements routines.system.IPersistableRow<SIN_AFILIACIONStruct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return true;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",MENSAJE="+MENSAJE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(SIN_AFILIACIONStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row103Struct implements routines.system.IPersistableRow<row103Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer TOTAL;

				public Integer getTOTAL () {
					return this.TOTAL;
				}

				public Boolean TOTALIsNullable(){
				    return true;
				}
				public Boolean TOTALIsKey(){
				    return false;
				}
				public Integer TOTALLength(){
				    return 0;
				}
				public Integer TOTALPrecision(){
				    return 0;
				}
				public String TOTALDefault(){
				
					return "";
				
				}
				public String TOTALComment(){
				
				    return "";
				
				}
				public String TOTALPattern(){
				
					return "";
				
				}
				public String TOTALOriginalDbColumnName(){
				
					return "TOTAL";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TOTAL = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TOTAL = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.TOTAL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.TOTAL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",TOTAL="+String.valueOf(TOTAL));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row103Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_33Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_33_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row103Struct row103 = new row103Struct();
SIN_AFILIACIONStruct SIN_AFILIACION = new SIN_AFILIACIONStruct();
row104Struct row104 = new row104Struct();
row105Struct row105 = new row105Struct();
row106Struct row106 = new row106Struct();
row107Struct row107 = new row107Struct();









	
	/**
	 * [tOracleCommit_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleCommit_9", false);
		start_Hash.put("tOracleCommit_9", System.currentTimeMillis());
		
	
	currentComponent="tOracleCommit_9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row107");
					}
				
		int tos_count_tOracleCommit_9 = 0;
		

 



/**
 * [tOracleCommit_9 begin ] stop
 */



	
	/**
	 * [tOracleOutput_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_19", false);
		start_Hash.put("tOracleOutput_19", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_19";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row106");
					}
				
		int tos_count_tOracleOutput_19 = 0;
		






        int updateKeyCount_tOracleOutput_19 = 2;
        if(updateKeyCount_tOracleOutput_19 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_19 == 3 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_19 = 0;
    int nb_line_update_tOracleOutput_19 = 0;
    int nb_line_inserted_tOracleOutput_19 = 0;
    int nb_line_deleted_tOracleOutput_19 = 0;
    int nb_line_rejected_tOracleOutput_19 = 0;

    int tmp_batchUpdateCount_tOracleOutput_19 = 0;

    int deletedCount_tOracleOutput_19=0;
    int updatedCount_tOracleOutput_19=0;
    int insertedCount_tOracleOutput_19=0;
    int rowsToCommitCount_tOracleOutput_19=0;
    int rejectedCount_tOracleOutput_19=0;

    boolean whetherReject_tOracleOutput_19 = false;

    java.sql.Connection conn_tOracleOutput_19 = null;

    //optional table
    String dbschema_tOracleOutput_19 = null;
    String tableName_tOracleOutput_19 = null;
        dbschema_tOracleOutput_19 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_19 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_19=0;

        if(dbschema_tOracleOutput_19 == null || dbschema_tOracleOutput_19.trim().length() == 0) {
            tableName_tOracleOutput_19 = ("TST_CARGUEMASIVO");
        } else {
            tableName_tOracleOutput_19 = dbschema_tOracleOutput_19 + "." + ("TST_CARGUEMASIVO");
        }
                String update_tOracleOutput_19 = "UPDATE " + tableName_tOracleOutput_19 + " SET PROCESADO = ? WHERE TDOCUMENTOS_ID = ? AND DOCUMENTO = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_19 = conn_tOracleOutput_19.prepareStatement(update_tOracleOutput_19);
                resourceMap.put("pstmt_tOracleOutput_19", pstmt_tOracleOutput_19);





 



/**
 * [tOracleOutput_19 begin ] stop
 */



	
	/**
	 * [tJavaRow_23 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_23", false);
		start_Hash.put("tJavaRow_23", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_23";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row105");
					}
				
		int tos_count_tJavaRow_23 = 0;
		

int nb_line_tJavaRow_23 = 0;

 



/**
 * [tJavaRow_23 begin ] stop
 */



	
	/**
	 * [tOracleOutput_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_18", false);
		start_Hash.put("tOracleOutput_18", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_18";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row104");
					}
				
		int tos_count_tOracleOutput_18 = 0;
		






    
    int nb_line_tOracleOutput_18 = 0;
    int nb_line_update_tOracleOutput_18 = 0;
    int nb_line_inserted_tOracleOutput_18 = 0;
    int nb_line_deleted_tOracleOutput_18 = 0;
    int nb_line_rejected_tOracleOutput_18 = 0;

    int tmp_batchUpdateCount_tOracleOutput_18 = 0;

    int deletedCount_tOracleOutput_18=0;
    int updatedCount_tOracleOutput_18=0;
    int insertedCount_tOracleOutput_18=0;
    int rowsToCommitCount_tOracleOutput_18=0;
    int rejectedCount_tOracleOutput_18=0;

    boolean whetherReject_tOracleOutput_18 = false;

    java.sql.Connection conn_tOracleOutput_18 = null;

    //optional table
    String dbschema_tOracleOutput_18 = null;
    String tableName_tOracleOutput_18 = null;
        dbschema_tOracleOutput_18 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_18 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_18=0;

        if(dbschema_tOracleOutput_18 == null || dbschema_tOracleOutput_18.trim().length() == 0) {
            tableName_tOracleOutput_18 = ("TST_ERRCMASIVO");
        } else {
            tableName_tOracleOutput_18 = dbschema_tOracleOutput_18 + "." + ("TST_ERRCMASIVO");
        }
                String insert_tOracleOutput_18 = "INSERT INTO " + tableName_tOracleOutput_18 + " (TDOCUMENTOS_ID,DOCUMENTO,MENSAJE) VALUES (?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_18 = conn_tOracleOutput_18.prepareStatement(insert_tOracleOutput_18);
                        resourceMap.put("pstmt_tOracleOutput_18", pstmt_tOracleOutput_18);





 



/**
 * [tOracleOutput_18 begin ] stop
 */



	
	/**
	 * [tJavaRow_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_22", false);
		start_Hash.put("tJavaRow_22", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_22";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"SIN_AFILIACION");
					}
				
		int tos_count_tJavaRow_22 = 0;
		

int nb_line_tJavaRow_22 = 0;

 



/**
 * [tJavaRow_22 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row103");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
SIN_AFILIACIONStruct SIN_AFILIACION_tmp = new SIN_AFILIACIONStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tOracleInput_33 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_33", false);
		start_Hash.put("tOracleInput_33", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_33";
	
	
		int tos_count_tOracleInput_33 = 0;
		
	


	
		    int nb_line_tOracleInput_33 = 0;
		    java.sql.Connection conn_tOracleInput_33 = null;
				conn_tOracleInput_33 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_33 = false;
				boolean isConnectionWrapped_tOracleInput_33 = !(conn_tOracleInput_33 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_33.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_33 = null;
                if (isConnectionWrapped_tOracleInput_33) {
					unwrappedOraConn_tOracleInput_33 = conn_tOracleInput_33.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_33 != null) {
                        isTimeZoneNull_tOracleInput_33 = (unwrappedOraConn_tOracleInput_33.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_33 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_33).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_33) {
					java.sql.Statement stmtGetTZ_tOracleInput_33 = conn_tOracleInput_33.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_33 = stmtGetTZ_tOracleInput_33.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_33 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_33.next()) {
						sessionTimezone_tOracleInput_33 = rsGetTZ_tOracleInput_33.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_33 && unwrappedOraConn_tOracleInput_33 != null) {
                        unwrappedOraConn_tOracleInput_33.setSessionTimeZone(sessionTimezone_tOracleInput_33);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_33).setSessionTimeZone(sessionTimezone_tOracleInput_33);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_33 = conn_tOracleInput_33.createStatement();

		    String dbquery_tOracleInput_33 = "SELECT TSC.TDOCUMENTOS_ID, \n       TSC.DOCUMENTO, \n       COUNT(1) AS TOTAL \nFROM TST_CARGUEMASIVO TSC\nINNER JOIN G"
+"EN_AFILIADOS GA ON GA.PERSONAS_ID = TSC.PERSONAS_ID                                \nWHERE TSC.PROCESADO IS NULL\n      "
+"AND GA.ID = TSC.AFILIADO_ID\n      AND GA.ESTREGISTRO_ID = 1\nGROUP BY TSC.TDOCUMENTOS_ID, TSC.DOCUMENTO";
		    

		    globalMap.put("tOracleInput_33_QUERY",dbquery_tOracleInput_33);

		    java.sql.ResultSet rs_tOracleInput_33 = null;

		    try {
		    	rs_tOracleInput_33 = stmt_tOracleInput_33.executeQuery(dbquery_tOracleInput_33);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_33 = rs_tOracleInput_33.getMetaData();
		    	int colQtyInRs_tOracleInput_33 = rsmd_tOracleInput_33.getColumnCount();

		    String tmpContent_tOracleInput_33 = null;
		    
		    
		    while (rs_tOracleInput_33.next()) {
		        nb_line_tOracleInput_33++;
		        
							if(colQtyInRs_tOracleInput_33 < 1) {
								row103.TDOCUMENTOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_33.getObject(1) != null) {
						row103.TDOCUMENTOS_ID = rs_tOracleInput_33.getInt(1);
					} else {
				
						row103.TDOCUMENTOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_33 < 2) {
								row103.DOCUMENTO = null;
							} else {
	                         		
        	row103.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_33, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_33 < 3) {
								row103.TOTAL = null;
							} else {
		                          
					if(rs_tOracleInput_33.getObject(3) != null) {
						row103.TOTAL = rs_tOracleInput_33.getInt(3);
					} else {
				
						row103.TOTAL = null;
					}
		                    }
					




 



/**
 * [tOracleInput_33 begin ] stop
 */
	
	/**
	 * [tOracleInput_33 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_33";
	
	

 


	tos_count_tOracleInput_33++;

/**
 * [tOracleInput_33 main ] stop
 */
	
	/**
	 * [tOracleInput_33 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_33";
	
	

 



/**
 * [tOracleInput_33 process_data_begin ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row103"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_5 = false;
		boolean mainRowRejected_tMap_5 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

SIN_AFILIACION = null;


// # Output table : 'SIN_AFILIACION'
// # Filter conditions 
if( 

row103.TOTAL == 0

 ) {
SIN_AFILIACION_tmp.TDOCUMENTOS_ID = row103.TDOCUMENTOS_ID;
SIN_AFILIACION_tmp.DOCUMENTO = row103.DOCUMENTO;
SIN_AFILIACION_tmp.MENSAJE = null;
SIN_AFILIACION = SIN_AFILIACION_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "SIN_AFILIACION"
if(SIN_AFILIACION != null) { 



	
	/**
	 * [tJavaRow_22 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_22";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"SIN_AFILIACION"
						
						);
					}
					

    //Code generate according to input schema and output schema
row104.TDOCUMENTOS_ID = SIN_AFILIACION.TDOCUMENTOS_ID;
row104.DOCUMENTO = SIN_AFILIACION.DOCUMENTO;
row104.MENSAJE = "El registro que se desea actualizar no cuenta con una afiliación";

    nb_line_tJavaRow_22++;   

 


	tos_count_tJavaRow_22++;

/**
 * [tJavaRow_22 main ] stop
 */
	
	/**
	 * [tJavaRow_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_22";
	
	

 



/**
 * [tJavaRow_22 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_18 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_18";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row104"
						
						);
					}
					



            row105 = null;
        whetherReject_tOracleOutput_18 = false;
                        if(row104.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_18.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_18.setInt(1, row104.TDOCUMENTOS_ID);
}

                        if(row104.DOCUMENTO == null) {
pstmt_tOracleOutput_18.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_18.setString(2, row104.DOCUMENTO);
}

                        if(row104.MENSAJE == null) {
pstmt_tOracleOutput_18.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_18.setString(3, row104.MENSAJE);
}

                try {
                    nb_line_tOracleOutput_18++;
                    int processedCount_tOracleOutput_18 = pstmt_tOracleOutput_18.executeUpdate();
                    insertedCount_tOracleOutput_18 += processedCount_tOracleOutput_18;
                    rowsToCommitCount_tOracleOutput_18 += processedCount_tOracleOutput_18;
                } catch(java.lang.Exception e_tOracleOutput_18) {
globalMap.put("tOracleOutput_18_ERROR_MESSAGE",e_tOracleOutput_18.getMessage());
                    whetherReject_tOracleOutput_18 = true;
                            System.err.print(e_tOracleOutput_18.getMessage());
                }
            if(!whetherReject_tOracleOutput_18) {
                            row105 = new row105Struct();
                                row105.TDOCUMENTOS_ID = row104.TDOCUMENTOS_ID;
                                row105.DOCUMENTO = row104.DOCUMENTO;
                                row105.MENSAJE = row104.MENSAJE;
            }

 


	tos_count_tOracleOutput_18++;

/**
 * [tOracleOutput_18 main ] stop
 */
	
	/**
	 * [tOracleOutput_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_18";
	
	

 



/**
 * [tOracleOutput_18 process_data_begin ] stop
 */
// Start of branch "row105"
if(row105 != null) { 



	
	/**
	 * [tJavaRow_23 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_23";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row105"
						
						);
					}
					

    //Code generate according to input schema and output schema
row106.TDOCUMENTOS_ID = row105.TDOCUMENTOS_ID;
row106.DOCUMENTO = row105.DOCUMENTO;
row106.PROCESADO = 5;//Código para indicar que el registro no cuenta con una afiliación.

    nb_line_tJavaRow_23++;   

 


	tos_count_tJavaRow_23++;

/**
 * [tJavaRow_23 main ] stop
 */
	
	/**
	 * [tJavaRow_23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_23";
	
	

 



/**
 * [tJavaRow_23 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_19 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_19";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row106"
						
						);
					}
					



            row107 = null;
        whetherReject_tOracleOutput_19 = false;
                    if(row106.PROCESADO == null) {
pstmt_tOracleOutput_19.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_19.setInt(1, row106.PROCESADO);
}


                    if(row106.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_19.setNull(2 + count_tOracleOutput_19, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_19.setInt(2 + count_tOracleOutput_19, row106.TDOCUMENTOS_ID);
}


                    if(row106.DOCUMENTO == null) {
pstmt_tOracleOutput_19.setNull(3 + count_tOracleOutput_19, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_19.setString(3 + count_tOracleOutput_19, row106.DOCUMENTO);
}

                try {
                    nb_line_tOracleOutput_19++;
                    int processedCount_tOracleOutput_19 = pstmt_tOracleOutput_19.executeUpdate();
                    updatedCount_tOracleOutput_19 += processedCount_tOracleOutput_19;
                    rowsToCommitCount_tOracleOutput_19 += processedCount_tOracleOutput_19;
                } catch(java.lang.Exception e_tOracleOutput_19) {
globalMap.put("tOracleOutput_19_ERROR_MESSAGE",e_tOracleOutput_19.getMessage());
                    whetherReject_tOracleOutput_19 = true;
                            System.err.print(e_tOracleOutput_19.getMessage());
                }
            if(!whetherReject_tOracleOutput_19) {
                            row107 = new row107Struct();
                                row107.TDOCUMENTOS_ID = row106.TDOCUMENTOS_ID;
                                row107.DOCUMENTO = row106.DOCUMENTO;
                                row107.PROCESADO = row106.PROCESADO;
            }

 


	tos_count_tOracleOutput_19++;

/**
 * [tOracleOutput_19 main ] stop
 */
	
	/**
	 * [tOracleOutput_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_19";
	
	

 



/**
 * [tOracleOutput_19 process_data_begin ] stop
 */
// Start of branch "row107"
if(row107 != null) { 



	
	/**
	 * [tOracleCommit_9 main ] start
	 */

	

	
	
	currentComponent="tOracleCommit_9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row107"
						
						);
					}
					

	java.sql.Connection conn_tOracleCommit_9 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");

if(conn_tOracleCommit_9 != null && !conn_tOracleCommit_9.isClosed()) {
	
			
			conn_tOracleCommit_9.commit();
			
	
}

 


	tos_count_tOracleCommit_9++;

/**
 * [tOracleCommit_9 main ] stop
 */
	
	/**
	 * [tOracleCommit_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleCommit_9";
	
	

 



/**
 * [tOracleCommit_9 process_data_begin ] stop
 */
	
	/**
	 * [tOracleCommit_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleCommit_9";
	
	

 



/**
 * [tOracleCommit_9 process_data_end ] stop
 */

} // End of branch "row107"




	
	/**
	 * [tOracleOutput_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_19";
	
	

 



/**
 * [tOracleOutput_19 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_23 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_23";
	
	

 



/**
 * [tJavaRow_23 process_data_end ] stop
 */

} // End of branch "row105"




	
	/**
	 * [tOracleOutput_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_18";
	
	

 



/**
 * [tOracleOutput_18 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_22";
	
	

 



/**
 * [tJavaRow_22 process_data_end ] stop
 */

} // End of branch "SIN_AFILIACION"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_33 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_33";
	
	

 



/**
 * [tOracleInput_33 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_33 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_33";
	
	

}
}finally{
	if (rs_tOracleInput_33 != null) {
		rs_tOracleInput_33.close();
	}
	if (stmt_tOracleInput_33 != null) {
		stmt_tOracleInput_33.close();
	}
}

globalMap.put("tOracleInput_33_NB_LINE",nb_line_tOracleInput_33);
 

ok_Hash.put("tOracleInput_33", true);
end_Hash.put("tOracleInput_33", System.currentTimeMillis());




/**
 * [tOracleInput_33 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row103");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tJavaRow_22 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_22";
	
	

globalMap.put("tJavaRow_22_NB_LINE",nb_line_tJavaRow_22);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"SIN_AFILIACION");
			  	}
			  	
 

ok_Hash.put("tJavaRow_22", true);
end_Hash.put("tJavaRow_22", System.currentTimeMillis());




/**
 * [tJavaRow_22 end ] stop
 */

	
	/**
	 * [tOracleOutput_18 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_18";
	
	
	



	
        if(pstmt_tOracleOutput_18 != null) {
			
				pstmt_tOracleOutput_18.close();
				resourceMap.remove("pstmt_tOracleOutput_18");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_18", true);

	
	nb_line_deleted_tOracleOutput_18=nb_line_deleted_tOracleOutput_18+ deletedCount_tOracleOutput_18;
	nb_line_update_tOracleOutput_18=nb_line_update_tOracleOutput_18 + updatedCount_tOracleOutput_18;
	nb_line_inserted_tOracleOutput_18=nb_line_inserted_tOracleOutput_18 + insertedCount_tOracleOutput_18;
	nb_line_rejected_tOracleOutput_18=nb_line_rejected_tOracleOutput_18 + rejectedCount_tOracleOutput_18;
	
        globalMap.put("tOracleOutput_18_NB_LINE",nb_line_tOracleOutput_18);
        globalMap.put("tOracleOutput_18_NB_LINE_UPDATED",nb_line_update_tOracleOutput_18);
        globalMap.put("tOracleOutput_18_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_18);
        globalMap.put("tOracleOutput_18_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_18);
        globalMap.put("tOracleOutput_18_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_18);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row104");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_18", true);
end_Hash.put("tOracleOutput_18", System.currentTimeMillis());




/**
 * [tOracleOutput_18 end ] stop
 */

	
	/**
	 * [tJavaRow_23 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_23";
	
	

globalMap.put("tJavaRow_23_NB_LINE",nb_line_tJavaRow_23);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row105");
			  	}
			  	
 

ok_Hash.put("tJavaRow_23", true);
end_Hash.put("tJavaRow_23", System.currentTimeMillis());




/**
 * [tJavaRow_23 end ] stop
 */

	
	/**
	 * [tOracleOutput_19 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_19";
	
	
	



	
        if(pstmt_tOracleOutput_19 != null) {
			
				pstmt_tOracleOutput_19.close();
				resourceMap.remove("pstmt_tOracleOutput_19");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_19", true);

	
	nb_line_deleted_tOracleOutput_19=nb_line_deleted_tOracleOutput_19+ deletedCount_tOracleOutput_19;
	nb_line_update_tOracleOutput_19=nb_line_update_tOracleOutput_19 + updatedCount_tOracleOutput_19;
	nb_line_inserted_tOracleOutput_19=nb_line_inserted_tOracleOutput_19 + insertedCount_tOracleOutput_19;
	nb_line_rejected_tOracleOutput_19=nb_line_rejected_tOracleOutput_19 + rejectedCount_tOracleOutput_19;
	
        globalMap.put("tOracleOutput_19_NB_LINE",nb_line_tOracleOutput_19);
        globalMap.put("tOracleOutput_19_NB_LINE_UPDATED",nb_line_update_tOracleOutput_19);
        globalMap.put("tOracleOutput_19_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_19);
        globalMap.put("tOracleOutput_19_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_19);
        globalMap.put("tOracleOutput_19_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_19);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row106");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_19", true);
end_Hash.put("tOracleOutput_19", System.currentTimeMillis());




/**
 * [tOracleOutput_19 end ] stop
 */

	
	/**
	 * [tOracleCommit_9 end ] start
	 */

	

	
	
	currentComponent="tOracleCommit_9";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row107");
			  	}
			  	
 

ok_Hash.put("tOracleCommit_9", true);
end_Hash.put("tOracleCommit_9", System.currentTimeMillis());




/**
 * [tOracleCommit_9 end ] stop
 */


















				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_33:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tOracleInput_10Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_33 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_33";
	
	

 



/**
 * [tOracleInput_33 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tJavaRow_22 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_22";
	
	

 



/**
 * [tJavaRow_22 finally ] stop
 */

	
	/**
	 * [tOracleOutput_18 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_18";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_18") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_18 = null;
                if ((pstmtToClose_tOracleOutput_18 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_18")) != null) {
                    pstmtToClose_tOracleOutput_18.close();
                }
    }
 



/**
 * [tOracleOutput_18 finally ] stop
 */

	
	/**
	 * [tJavaRow_23 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_23";
	
	

 



/**
 * [tJavaRow_23 finally ] stop
 */

	
	/**
	 * [tOracleOutput_19 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_19";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_19") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_19 = null;
                if ((pstmtToClose_tOracleOutput_19 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_19")) != null) {
                    pstmtToClose_tOracleOutput_19.close();
                }
    }
 



/**
 * [tOracleOutput_19 finally ] stop
 */

	
	/**
	 * [tOracleCommit_9 finally ] start
	 */

	

	
	
	currentComponent="tOracleCommit_9";
	
	

 



/**
 * [tOracleCommit_9 finally ] stop
 */


















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_33_SUBPROCESS_STATE", 1);
	}
	


public static class row109Struct implements routines.system.IPersistableRow<row109Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return null;
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer PROCESADO;

				public Integer getPROCESADO () {
					return this.PROCESADO;
				}

				public Boolean PROCESADOIsNullable(){
				    return true;
				}
				public Boolean PROCESADOIsKey(){
				    return false;
				}
				public Integer PROCESADOLength(){
				    return null;
				}
				public Integer PROCESADOPrecision(){
				    return null;
				}
				public String PROCESADODefault(){
				
					return null;
				
				}
				public String PROCESADOComment(){
				
				    return "";
				
				}
				public String PROCESADOPattern(){
				
					return "";
				
				}
				public String PROCESADOOriginalDbColumnName(){
				
					return "PROCESADO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PROCESADO="+String.valueOf(PROCESADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row109Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row108Struct implements routines.system.IPersistableRow<row108Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return null;
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer PROCESADO;

				public Integer getPROCESADO () {
					return this.PROCESADO;
				}

				public Boolean PROCESADOIsNullable(){
				    return true;
				}
				public Boolean PROCESADOIsKey(){
				    return false;
				}
				public Integer PROCESADOLength(){
				    return null;
				}
				public Integer PROCESADOPrecision(){
				    return null;
				}
				public String PROCESADODefault(){
				
					return null;
				
				}
				public String PROCESADOComment(){
				
				    return "";
				
				}
				public String PROCESADOPattern(){
				
					return "";
				
				}
				public String PROCESADOOriginalDbColumnName(){
				
					return "PROCESADO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PROCESADO="+String.valueOf(PROCESADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row108Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row49Struct implements routines.system.IPersistableRow<row49Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return true;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",MENSAJE="+MENSAJE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row49Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row48Struct implements routines.system.IPersistableRow<row48Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return true;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",MENSAJE="+MENSAJE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row48Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfSIN_AFILIACIONStruct implements routines.system.IPersistableRow<copyOfSIN_AFILIACIONStruct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return true;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",MENSAJE="+MENSAJE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfSIN_AFILIACIONStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row47Struct implements routines.system.IPersistableRow<row47Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer TOTAL;

				public Integer getTOTAL () {
					return this.TOTAL;
				}

				public Boolean TOTALIsNullable(){
				    return true;
				}
				public Boolean TOTALIsKey(){
				    return false;
				}
				public Integer TOTALLength(){
				    return 0;
				}
				public Integer TOTALPrecision(){
				    return 0;
				}
				public String TOTALDefault(){
				
					return "";
				
				}
				public String TOTALComment(){
				
				    return "";
				
				}
				public String TOTALPattern(){
				
					return "";
				
				}
				public String TOTALOriginalDbColumnName(){
				
					return "TOTAL";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TOTAL = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TOTAL = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.TOTAL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.TOTAL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",TOTAL="+String.valueOf(TOTAL));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row47Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row47Struct row47 = new row47Struct();
copyOfSIN_AFILIACIONStruct copyOfSIN_AFILIACION = new copyOfSIN_AFILIACIONStruct();
row48Struct row48 = new row48Struct();
row49Struct row49 = new row49Struct();
row108Struct row108 = new row108Struct();
row109Struct row109 = new row109Struct();









	
	/**
	 * [tOracleCommit_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleCommit_4", false);
		start_Hash.put("tOracleCommit_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleCommit_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row109");
					}
				
		int tos_count_tOracleCommit_4 = 0;
		

 



/**
 * [tOracleCommit_4 begin ] stop
 */



	
	/**
	 * [tOracleOutput_35 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_35", false);
		start_Hash.put("tOracleOutput_35", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_35";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row108");
					}
				
		int tos_count_tOracleOutput_35 = 0;
		






        int updateKeyCount_tOracleOutput_35 = 2;
        if(updateKeyCount_tOracleOutput_35 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_35 == 3 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_35 = 0;
    int nb_line_update_tOracleOutput_35 = 0;
    int nb_line_inserted_tOracleOutput_35 = 0;
    int nb_line_deleted_tOracleOutput_35 = 0;
    int nb_line_rejected_tOracleOutput_35 = 0;

    int tmp_batchUpdateCount_tOracleOutput_35 = 0;

    int deletedCount_tOracleOutput_35=0;
    int updatedCount_tOracleOutput_35=0;
    int insertedCount_tOracleOutput_35=0;
    int rowsToCommitCount_tOracleOutput_35=0;
    int rejectedCount_tOracleOutput_35=0;

    boolean whetherReject_tOracleOutput_35 = false;

    java.sql.Connection conn_tOracleOutput_35 = null;

    //optional table
    String dbschema_tOracleOutput_35 = null;
    String tableName_tOracleOutput_35 = null;
        dbschema_tOracleOutput_35 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_35 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_35=0;

        if(dbschema_tOracleOutput_35 == null || dbschema_tOracleOutput_35.trim().length() == 0) {
            tableName_tOracleOutput_35 = ("TST_CARGUEMASIVO");
        } else {
            tableName_tOracleOutput_35 = dbschema_tOracleOutput_35 + "." + ("TST_CARGUEMASIVO");
        }
                String update_tOracleOutput_35 = "UPDATE " + tableName_tOracleOutput_35 + " SET PROCESADO = ? WHERE TDOCUMENTOS_ID = ? AND DOCUMENTO = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_35 = conn_tOracleOutput_35.prepareStatement(update_tOracleOutput_35);
                resourceMap.put("pstmt_tOracleOutput_35", pstmt_tOracleOutput_35);





 



/**
 * [tOracleOutput_35 begin ] stop
 */



	
	/**
	 * [tJavaRow_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_15", false);
		start_Hash.put("tJavaRow_15", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_15";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row49");
					}
				
		int tos_count_tJavaRow_15 = 0;
		

int nb_line_tJavaRow_15 = 0;

 



/**
 * [tJavaRow_15 begin ] stop
 */



	
	/**
	 * [tOracleOutput_34 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_34", false);
		start_Hash.put("tOracleOutput_34", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_34";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row48");
					}
				
		int tos_count_tOracleOutput_34 = 0;
		






    
    int nb_line_tOracleOutput_34 = 0;
    int nb_line_update_tOracleOutput_34 = 0;
    int nb_line_inserted_tOracleOutput_34 = 0;
    int nb_line_deleted_tOracleOutput_34 = 0;
    int nb_line_rejected_tOracleOutput_34 = 0;

    int tmp_batchUpdateCount_tOracleOutput_34 = 0;

    int deletedCount_tOracleOutput_34=0;
    int updatedCount_tOracleOutput_34=0;
    int insertedCount_tOracleOutput_34=0;
    int rowsToCommitCount_tOracleOutput_34=0;
    int rejectedCount_tOracleOutput_34=0;

    boolean whetherReject_tOracleOutput_34 = false;

    java.sql.Connection conn_tOracleOutput_34 = null;

    //optional table
    String dbschema_tOracleOutput_34 = null;
    String tableName_tOracleOutput_34 = null;
        dbschema_tOracleOutput_34 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_34 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_34=0;

        if(dbschema_tOracleOutput_34 == null || dbschema_tOracleOutput_34.trim().length() == 0) {
            tableName_tOracleOutput_34 = ("TST_ERRCMASIVO");
        } else {
            tableName_tOracleOutput_34 = dbschema_tOracleOutput_34 + "." + ("TST_ERRCMASIVO");
        }
                String insert_tOracleOutput_34 = "INSERT INTO " + tableName_tOracleOutput_34 + " (TDOCUMENTOS_ID,DOCUMENTO,MENSAJE) VALUES (?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_34 = conn_tOracleOutput_34.prepareStatement(insert_tOracleOutput_34);
                        resourceMap.put("pstmt_tOracleOutput_34", pstmt_tOracleOutput_34);





 



/**
 * [tOracleOutput_34 begin ] stop
 */



	
	/**
	 * [tJavaRow_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_14", false);
		start_Hash.put("tJavaRow_14", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_14";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfSIN_AFILIACION");
					}
				
		int tos_count_tJavaRow_14 = 0;
		

int nb_line_tJavaRow_14 = 0;

 



/**
 * [tJavaRow_14 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row47");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfSIN_AFILIACIONStruct copyOfSIN_AFILIACION_tmp = new copyOfSIN_AFILIACIONStruct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tOracleInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_10", false);
		start_Hash.put("tOracleInput_10", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_10";
	
	
		int tos_count_tOracleInput_10 = 0;
		
	


	
		    int nb_line_tOracleInput_10 = 0;
		    java.sql.Connection conn_tOracleInput_10 = null;
				conn_tOracleInput_10 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_10 = false;
				boolean isConnectionWrapped_tOracleInput_10 = !(conn_tOracleInput_10 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_10.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_10 = null;
                if (isConnectionWrapped_tOracleInput_10) {
					unwrappedOraConn_tOracleInput_10 = conn_tOracleInput_10.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_10 != null) {
                        isTimeZoneNull_tOracleInput_10 = (unwrappedOraConn_tOracleInput_10.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_10 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_10).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_10) {
					java.sql.Statement stmtGetTZ_tOracleInput_10 = conn_tOracleInput_10.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_10 = stmtGetTZ_tOracleInput_10.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_10 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_10.next()) {
						sessionTimezone_tOracleInput_10 = rsGetTZ_tOracleInput_10.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_10 && unwrappedOraConn_tOracleInput_10 != null) {
                        unwrappedOraConn_tOracleInput_10.setSessionTimeZone(sessionTimezone_tOracleInput_10);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_10).setSessionTimeZone(sessionTimezone_tOracleInput_10);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_10 = conn_tOracleInput_10.createStatement();

		    String dbquery_tOracleInput_10 = "SELECT TSC.TDOCUMENTOS_ID, \n       TSC.DOCUMENTO, \n       COUNT(1) AS TOTAL \nFROM TST_CARGUEMASIVO TSC\nINNER JOIN G"
+"EN_AFILIADOS GA ON GA.PERSONAS_ID = TSC.PERSONAS_ID\nINNER JOIN GEN_AFILIADOS_ENTAPORTANTE GAE ON GAE.AFILIADOS_ID = GA."
+"ID                                \nWHERE TSC.PROCESADO IS NULL\n      AND GA.ID = TSC.AFILIADO_ID\n      AND GA.ESTREGI"
+"STRO_ID = 1\n      AND TSC.TIPO_AFILIADO = 'T'\nGROUP BY TSC.TDOCUMENTOS_ID, TSC.DOCUMENTO";
		    

		    globalMap.put("tOracleInput_10_QUERY",dbquery_tOracleInput_10);

		    java.sql.ResultSet rs_tOracleInput_10 = null;

		    try {
		    	rs_tOracleInput_10 = stmt_tOracleInput_10.executeQuery(dbquery_tOracleInput_10);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_10 = rs_tOracleInput_10.getMetaData();
		    	int colQtyInRs_tOracleInput_10 = rsmd_tOracleInput_10.getColumnCount();

		    String tmpContent_tOracleInput_10 = null;
		    
		    
		    while (rs_tOracleInput_10.next()) {
		        nb_line_tOracleInput_10++;
		        
							if(colQtyInRs_tOracleInput_10 < 1) {
								row47.TDOCUMENTOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(1) != null) {
						row47.TDOCUMENTOS_ID = rs_tOracleInput_10.getInt(1);
					} else {
				
						row47.TDOCUMENTOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 2) {
								row47.DOCUMENTO = null;
							} else {
	                         		
        	row47.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_10, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_10 < 3) {
								row47.TOTAL = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(3) != null) {
						row47.TOTAL = rs_tOracleInput_10.getInt(3);
					} else {
				
						row47.TOTAL = null;
					}
		                    }
					




 



/**
 * [tOracleInput_10 begin ] stop
 */
	
	/**
	 * [tOracleInput_10 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 


	tos_count_tOracleInput_10++;

/**
 * [tOracleInput_10 main ] stop
 */
	
	/**
	 * [tOracleInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 



/**
 * [tOracleInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row47"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_6 = false;
		boolean mainRowRejected_tMap_6 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

copyOfSIN_AFILIACION = null;


// # Output table : 'copyOfSIN_AFILIACION'
// # Filter conditions 
if( 

row47.TOTAL == 0

 ) {
copyOfSIN_AFILIACION_tmp.TDOCUMENTOS_ID = row47.TDOCUMENTOS_ID;
copyOfSIN_AFILIACION_tmp.DOCUMENTO = row47.DOCUMENTO;
copyOfSIN_AFILIACION_tmp.MENSAJE = null;
copyOfSIN_AFILIACION = copyOfSIN_AFILIACION_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "copyOfSIN_AFILIACION"
if(copyOfSIN_AFILIACION != null) { 



	
	/**
	 * [tJavaRow_14 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_14";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfSIN_AFILIACION"
						
						);
					}
					

    //Code generate according to input schema and output schema
row48.TDOCUMENTOS_ID = copyOfSIN_AFILIACION.TDOCUMENTOS_ID;
row48.DOCUMENTO = copyOfSIN_AFILIACION.DOCUMENTO;
row48.MENSAJE = "El afiliado no cuenta con entidad aportante registrada";

    nb_line_tJavaRow_14++;   

 


	tos_count_tJavaRow_14++;

/**
 * [tJavaRow_14 main ] stop
 */
	
	/**
	 * [tJavaRow_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_14";
	
	

 



/**
 * [tJavaRow_14 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_34 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_34";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row48"
						
						);
					}
					



            row49 = null;
        whetherReject_tOracleOutput_34 = false;
                        if(row48.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_34.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_34.setInt(1, row48.TDOCUMENTOS_ID);
}

                        if(row48.DOCUMENTO == null) {
pstmt_tOracleOutput_34.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_34.setString(2, row48.DOCUMENTO);
}

                        if(row48.MENSAJE == null) {
pstmt_tOracleOutput_34.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_34.setString(3, row48.MENSAJE);
}

                try {
                    nb_line_tOracleOutput_34++;
                    int processedCount_tOracleOutput_34 = pstmt_tOracleOutput_34.executeUpdate();
                    insertedCount_tOracleOutput_34 += processedCount_tOracleOutput_34;
                    rowsToCommitCount_tOracleOutput_34 += processedCount_tOracleOutput_34;
                } catch(java.lang.Exception e_tOracleOutput_34) {
globalMap.put("tOracleOutput_34_ERROR_MESSAGE",e_tOracleOutput_34.getMessage());
                    whetherReject_tOracleOutput_34 = true;
                            System.err.print(e_tOracleOutput_34.getMessage());
                }
            if(!whetherReject_tOracleOutput_34) {
                            row49 = new row49Struct();
                                row49.TDOCUMENTOS_ID = row48.TDOCUMENTOS_ID;
                                row49.DOCUMENTO = row48.DOCUMENTO;
                                row49.MENSAJE = row48.MENSAJE;
            }

 


	tos_count_tOracleOutput_34++;

/**
 * [tOracleOutput_34 main ] stop
 */
	
	/**
	 * [tOracleOutput_34 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_34";
	
	

 



/**
 * [tOracleOutput_34 process_data_begin ] stop
 */
// Start of branch "row49"
if(row49 != null) { 



	
	/**
	 * [tJavaRow_15 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_15";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row49"
						
						);
					}
					

    //Code generate according to input schema and output schema
row108.TDOCUMENTOS_ID = row49.TDOCUMENTOS_ID;
row108.DOCUMENTO = row49.DOCUMENTO;
row108.PROCESADO = 8;//Código para indicar que el registro no cuenta con una afiliación.

    nb_line_tJavaRow_15++;   

 


	tos_count_tJavaRow_15++;

/**
 * [tJavaRow_15 main ] stop
 */
	
	/**
	 * [tJavaRow_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_15";
	
	

 



/**
 * [tJavaRow_15 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_35 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_35";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row108"
						
						);
					}
					



            row109 = null;
        whetherReject_tOracleOutput_35 = false;
                    if(row108.PROCESADO == null) {
pstmt_tOracleOutput_35.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_35.setInt(1, row108.PROCESADO);
}


                    if(row108.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_35.setNull(2 + count_tOracleOutput_35, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_35.setInt(2 + count_tOracleOutput_35, row108.TDOCUMENTOS_ID);
}


                    if(row108.DOCUMENTO == null) {
pstmt_tOracleOutput_35.setNull(3 + count_tOracleOutput_35, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_35.setString(3 + count_tOracleOutput_35, row108.DOCUMENTO);
}

                try {
                    nb_line_tOracleOutput_35++;
                    int processedCount_tOracleOutput_35 = pstmt_tOracleOutput_35.executeUpdate();
                    updatedCount_tOracleOutput_35 += processedCount_tOracleOutput_35;
                    rowsToCommitCount_tOracleOutput_35 += processedCount_tOracleOutput_35;
                } catch(java.lang.Exception e_tOracleOutput_35) {
globalMap.put("tOracleOutput_35_ERROR_MESSAGE",e_tOracleOutput_35.getMessage());
                    whetherReject_tOracleOutput_35 = true;
                            System.err.print(e_tOracleOutput_35.getMessage());
                }
            if(!whetherReject_tOracleOutput_35) {
                            row109 = new row109Struct();
                                row109.TDOCUMENTOS_ID = row108.TDOCUMENTOS_ID;
                                row109.DOCUMENTO = row108.DOCUMENTO;
                                row109.PROCESADO = row108.PROCESADO;
            }

 


	tos_count_tOracleOutput_35++;

/**
 * [tOracleOutput_35 main ] stop
 */
	
	/**
	 * [tOracleOutput_35 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_35";
	
	

 



/**
 * [tOracleOutput_35 process_data_begin ] stop
 */
// Start of branch "row109"
if(row109 != null) { 



	
	/**
	 * [tOracleCommit_4 main ] start
	 */

	

	
	
	currentComponent="tOracleCommit_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row109"
						
						);
					}
					

	java.sql.Connection conn_tOracleCommit_4 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");

if(conn_tOracleCommit_4 != null && !conn_tOracleCommit_4.isClosed()) {
	
			
			conn_tOracleCommit_4.commit();
			
	
}

 


	tos_count_tOracleCommit_4++;

/**
 * [tOracleCommit_4 main ] stop
 */
	
	/**
	 * [tOracleCommit_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleCommit_4";
	
	

 



/**
 * [tOracleCommit_4 process_data_begin ] stop
 */
	
	/**
	 * [tOracleCommit_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleCommit_4";
	
	

 



/**
 * [tOracleCommit_4 process_data_end ] stop
 */

} // End of branch "row109"




	
	/**
	 * [tOracleOutput_35 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_35";
	
	

 



/**
 * [tOracleOutput_35 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_15";
	
	

 



/**
 * [tJavaRow_15 process_data_end ] stop
 */

} // End of branch "row49"




	
	/**
	 * [tOracleOutput_34 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_34";
	
	

 



/**
 * [tOracleOutput_34 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_14";
	
	

 



/**
 * [tJavaRow_14 process_data_end ] stop
 */

} // End of branch "copyOfSIN_AFILIACION"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 



/**
 * [tOracleInput_10 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_10 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

}
}finally{
	if (rs_tOracleInput_10 != null) {
		rs_tOracleInput_10.close();
	}
	if (stmt_tOracleInput_10 != null) {
		stmt_tOracleInput_10.close();
	}
}

globalMap.put("tOracleInput_10_NB_LINE",nb_line_tOracleInput_10);
 

ok_Hash.put("tOracleInput_10", true);
end_Hash.put("tOracleInput_10", System.currentTimeMillis());




/**
 * [tOracleInput_10 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row47");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tJavaRow_14 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_14";
	
	

globalMap.put("tJavaRow_14_NB_LINE",nb_line_tJavaRow_14);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfSIN_AFILIACION");
			  	}
			  	
 

ok_Hash.put("tJavaRow_14", true);
end_Hash.put("tJavaRow_14", System.currentTimeMillis());




/**
 * [tJavaRow_14 end ] stop
 */

	
	/**
	 * [tOracleOutput_34 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_34";
	
	
	



	
        if(pstmt_tOracleOutput_34 != null) {
			
				pstmt_tOracleOutput_34.close();
				resourceMap.remove("pstmt_tOracleOutput_34");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_34", true);

	
	nb_line_deleted_tOracleOutput_34=nb_line_deleted_tOracleOutput_34+ deletedCount_tOracleOutput_34;
	nb_line_update_tOracleOutput_34=nb_line_update_tOracleOutput_34 + updatedCount_tOracleOutput_34;
	nb_line_inserted_tOracleOutput_34=nb_line_inserted_tOracleOutput_34 + insertedCount_tOracleOutput_34;
	nb_line_rejected_tOracleOutput_34=nb_line_rejected_tOracleOutput_34 + rejectedCount_tOracleOutput_34;
	
        globalMap.put("tOracleOutput_34_NB_LINE",nb_line_tOracleOutput_34);
        globalMap.put("tOracleOutput_34_NB_LINE_UPDATED",nb_line_update_tOracleOutput_34);
        globalMap.put("tOracleOutput_34_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_34);
        globalMap.put("tOracleOutput_34_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_34);
        globalMap.put("tOracleOutput_34_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_34);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row48");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_34", true);
end_Hash.put("tOracleOutput_34", System.currentTimeMillis());




/**
 * [tOracleOutput_34 end ] stop
 */

	
	/**
	 * [tJavaRow_15 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_15";
	
	

globalMap.put("tJavaRow_15_NB_LINE",nb_line_tJavaRow_15);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row49");
			  	}
			  	
 

ok_Hash.put("tJavaRow_15", true);
end_Hash.put("tJavaRow_15", System.currentTimeMillis());




/**
 * [tJavaRow_15 end ] stop
 */

	
	/**
	 * [tOracleOutput_35 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_35";
	
	
	



	
        if(pstmt_tOracleOutput_35 != null) {
			
				pstmt_tOracleOutput_35.close();
				resourceMap.remove("pstmt_tOracleOutput_35");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_35", true);

	
	nb_line_deleted_tOracleOutput_35=nb_line_deleted_tOracleOutput_35+ deletedCount_tOracleOutput_35;
	nb_line_update_tOracleOutput_35=nb_line_update_tOracleOutput_35 + updatedCount_tOracleOutput_35;
	nb_line_inserted_tOracleOutput_35=nb_line_inserted_tOracleOutput_35 + insertedCount_tOracleOutput_35;
	nb_line_rejected_tOracleOutput_35=nb_line_rejected_tOracleOutput_35 + rejectedCount_tOracleOutput_35;
	
        globalMap.put("tOracleOutput_35_NB_LINE",nb_line_tOracleOutput_35);
        globalMap.put("tOracleOutput_35_NB_LINE_UPDATED",nb_line_update_tOracleOutput_35);
        globalMap.put("tOracleOutput_35_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_35);
        globalMap.put("tOracleOutput_35_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_35);
        globalMap.put("tOracleOutput_35_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_35);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row108");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_35", true);
end_Hash.put("tOracleOutput_35", System.currentTimeMillis());




/**
 * [tOracleOutput_35 end ] stop
 */

	
	/**
	 * [tOracleCommit_4 end ] start
	 */

	

	
	
	currentComponent="tOracleCommit_4";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row109");
			  	}
			  	
 

ok_Hash.put("tOracleCommit_4", true);
end_Hash.put("tOracleCommit_4", System.currentTimeMillis());




/**
 * [tOracleCommit_4 end ] stop
 */


















				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_10:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk19", 0, "ok");
								} 
							
							tOracleInput_40Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_10 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 



/**
 * [tOracleInput_10 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tJavaRow_14 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_14";
	
	

 



/**
 * [tJavaRow_14 finally ] stop
 */

	
	/**
	 * [tOracleOutput_34 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_34";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_34") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_34 = null;
                if ((pstmtToClose_tOracleOutput_34 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_34")) != null) {
                    pstmtToClose_tOracleOutput_34.close();
                }
    }
 



/**
 * [tOracleOutput_34 finally ] stop
 */

	
	/**
	 * [tJavaRow_15 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_15";
	
	

 



/**
 * [tJavaRow_15 finally ] stop
 */

	
	/**
	 * [tOracleOutput_35 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_35";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_35") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_35 = null;
                if ((pstmtToClose_tOracleOutput_35 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_35")) != null) {
                    pstmtToClose_tOracleOutput_35.close();
                }
    }
 



/**
 * [tOracleOutput_35 finally ] stop
 */

	
	/**
	 * [tOracleCommit_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleCommit_4";
	
	

 



/**
 * [tOracleCommit_4 finally ] stop
 */


















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_10_SUBPROCESS_STATE", 1);
	}
	


public static class row144Struct implements routines.system.IPersistableRow<row144Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return null;
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer PROCESADO;

				public Integer getPROCESADO () {
					return this.PROCESADO;
				}

				public Boolean PROCESADOIsNullable(){
				    return true;
				}
				public Boolean PROCESADOIsKey(){
				    return false;
				}
				public Integer PROCESADOLength(){
				    return null;
				}
				public Integer PROCESADOPrecision(){
				    return null;
				}
				public String PROCESADODefault(){
				
					return null;
				
				}
				public String PROCESADOComment(){
				
				    return "";
				
				}
				public String PROCESADOPattern(){
				
					return "";
				
				}
				public String PROCESADOOriginalDbColumnName(){
				
					return "PROCESADO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PROCESADO="+String.valueOf(PROCESADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row144Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row143Struct implements routines.system.IPersistableRow<row143Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return null;
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer PROCESADO;

				public Integer getPROCESADO () {
					return this.PROCESADO;
				}

				public Boolean PROCESADOIsNullable(){
				    return true;
				}
				public Boolean PROCESADOIsKey(){
				    return false;
				}
				public Integer PROCESADOLength(){
				    return null;
				}
				public Integer PROCESADOPrecision(){
				    return null;
				}
				public String PROCESADODefault(){
				
					return null;
				
				}
				public String PROCESADOComment(){
				
				    return "";
				
				}
				public String PROCESADOPattern(){
				
					return "";
				
				}
				public String PROCESADOOriginalDbColumnName(){
				
					return "PROCESADO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PROCESADO="+String.valueOf(PROCESADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row143Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row142Struct implements routines.system.IPersistableRow<row142Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return true;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",MENSAJE="+MENSAJE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row142Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row141Struct implements routines.system.IPersistableRow<row141Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return true;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",MENSAJE="+MENSAJE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row141Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfSIN_AFILIACIONStruct implements routines.system.IPersistableRow<copyOfcopyOfSIN_AFILIACIONStruct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return true;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",MENSAJE="+MENSAJE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfSIN_AFILIACIONStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row140Struct implements routines.system.IPersistableRow<row140Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer TOTAL;

				public Integer getTOTAL () {
					return this.TOTAL;
				}

				public Boolean TOTALIsNullable(){
				    return true;
				}
				public Boolean TOTALIsKey(){
				    return false;
				}
				public Integer TOTALLength(){
				    return 0;
				}
				public Integer TOTALPrecision(){
				    return 0;
				}
				public String TOTALDefault(){
				
					return "";
				
				}
				public String TOTALComment(){
				
				    return "";
				
				}
				public String TOTALPattern(){
				
					return "";
				
				}
				public String TOTALOriginalDbColumnName(){
				
					return "TOTAL";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TOTAL = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TOTAL = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.TOTAL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.TOTAL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",TOTAL="+String.valueOf(TOTAL));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row140Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_40Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_40_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row140Struct row140 = new row140Struct();
copyOfcopyOfSIN_AFILIACIONStruct copyOfcopyOfSIN_AFILIACION = new copyOfcopyOfSIN_AFILIACIONStruct();
row141Struct row141 = new row141Struct();
row142Struct row142 = new row142Struct();
row143Struct row143 = new row143Struct();
row144Struct row144 = new row144Struct();









	
	/**
	 * [tOracleCommit_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleCommit_13", false);
		start_Hash.put("tOracleCommit_13", System.currentTimeMillis());
		
	
	currentComponent="tOracleCommit_13";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row144");
					}
				
		int tos_count_tOracleCommit_13 = 0;
		

 



/**
 * [tOracleCommit_13 begin ] stop
 */



	
	/**
	 * [tOracleOutput_46 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_46", false);
		start_Hash.put("tOracleOutput_46", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_46";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row143");
					}
				
		int tos_count_tOracleOutput_46 = 0;
		






        int updateKeyCount_tOracleOutput_46 = 2;
        if(updateKeyCount_tOracleOutput_46 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_46 == 3 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_46 = 0;
    int nb_line_update_tOracleOutput_46 = 0;
    int nb_line_inserted_tOracleOutput_46 = 0;
    int nb_line_deleted_tOracleOutput_46 = 0;
    int nb_line_rejected_tOracleOutput_46 = 0;

    int tmp_batchUpdateCount_tOracleOutput_46 = 0;

    int deletedCount_tOracleOutput_46=0;
    int updatedCount_tOracleOutput_46=0;
    int insertedCount_tOracleOutput_46=0;
    int rowsToCommitCount_tOracleOutput_46=0;
    int rejectedCount_tOracleOutput_46=0;

    boolean whetherReject_tOracleOutput_46 = false;

    java.sql.Connection conn_tOracleOutput_46 = null;

    //optional table
    String dbschema_tOracleOutput_46 = null;
    String tableName_tOracleOutput_46 = null;
        dbschema_tOracleOutput_46 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_46 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_46=0;

        if(dbschema_tOracleOutput_46 == null || dbschema_tOracleOutput_46.trim().length() == 0) {
            tableName_tOracleOutput_46 = ("TST_CARGUEMASIVO");
        } else {
            tableName_tOracleOutput_46 = dbschema_tOracleOutput_46 + "." + ("TST_CARGUEMASIVO");
        }
                String update_tOracleOutput_46 = "UPDATE " + tableName_tOracleOutput_46 + " SET PROCESADO = ? WHERE TDOCUMENTOS_ID = ? AND DOCUMENTO = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_46 = conn_tOracleOutput_46.prepareStatement(update_tOracleOutput_46);
                resourceMap.put("pstmt_tOracleOutput_46", pstmt_tOracleOutput_46);





 



/**
 * [tOracleOutput_46 begin ] stop
 */



	
	/**
	 * [tJavaRow_31 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_31", false);
		start_Hash.put("tJavaRow_31", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_31";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row142");
					}
				
		int tos_count_tJavaRow_31 = 0;
		

int nb_line_tJavaRow_31 = 0;

 



/**
 * [tJavaRow_31 begin ] stop
 */



	
	/**
	 * [tOracleOutput_45 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_45", false);
		start_Hash.put("tOracleOutput_45", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_45";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row141");
					}
				
		int tos_count_tOracleOutput_45 = 0;
		






    
    int nb_line_tOracleOutput_45 = 0;
    int nb_line_update_tOracleOutput_45 = 0;
    int nb_line_inserted_tOracleOutput_45 = 0;
    int nb_line_deleted_tOracleOutput_45 = 0;
    int nb_line_rejected_tOracleOutput_45 = 0;

    int tmp_batchUpdateCount_tOracleOutput_45 = 0;

    int deletedCount_tOracleOutput_45=0;
    int updatedCount_tOracleOutput_45=0;
    int insertedCount_tOracleOutput_45=0;
    int rowsToCommitCount_tOracleOutput_45=0;
    int rejectedCount_tOracleOutput_45=0;

    boolean whetherReject_tOracleOutput_45 = false;

    java.sql.Connection conn_tOracleOutput_45 = null;

    //optional table
    String dbschema_tOracleOutput_45 = null;
    String tableName_tOracleOutput_45 = null;
        dbschema_tOracleOutput_45 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_45 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_45=0;

        if(dbschema_tOracleOutput_45 == null || dbschema_tOracleOutput_45.trim().length() == 0) {
            tableName_tOracleOutput_45 = ("TST_ERRCMASIVO");
        } else {
            tableName_tOracleOutput_45 = dbschema_tOracleOutput_45 + "." + ("TST_ERRCMASIVO");
        }
                String insert_tOracleOutput_45 = "INSERT INTO " + tableName_tOracleOutput_45 + " (TDOCUMENTOS_ID,DOCUMENTO,MENSAJE) VALUES (?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_45 = conn_tOracleOutput_45.prepareStatement(insert_tOracleOutput_45);
                        resourceMap.put("pstmt_tOracleOutput_45", pstmt_tOracleOutput_45);





 



/**
 * [tOracleOutput_45 begin ] stop
 */



	
	/**
	 * [tJavaRow_30 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_30", false);
		start_Hash.put("tJavaRow_30", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_30";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfSIN_AFILIACION");
					}
				
		int tos_count_tJavaRow_30 = 0;
		

int nb_line_tJavaRow_30 = 0;

 



/**
 * [tJavaRow_30 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row140");
					}
				
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfSIN_AFILIACIONStruct copyOfcopyOfSIN_AFILIACION_tmp = new copyOfcopyOfSIN_AFILIACIONStruct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tOracleInput_40 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_40", false);
		start_Hash.put("tOracleInput_40", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_40";
	
	
		int tos_count_tOracleInput_40 = 0;
		
	


	
		    int nb_line_tOracleInput_40 = 0;
		    java.sql.Connection conn_tOracleInput_40 = null;
				conn_tOracleInput_40 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_40 = false;
				boolean isConnectionWrapped_tOracleInput_40 = !(conn_tOracleInput_40 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_40.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_40 = null;
                if (isConnectionWrapped_tOracleInput_40) {
					unwrappedOraConn_tOracleInput_40 = conn_tOracleInput_40.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_40 != null) {
                        isTimeZoneNull_tOracleInput_40 = (unwrappedOraConn_tOracleInput_40.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_40 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_40).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_40) {
					java.sql.Statement stmtGetTZ_tOracleInput_40 = conn_tOracleInput_40.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_40 = stmtGetTZ_tOracleInput_40.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_40 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_40.next()) {
						sessionTimezone_tOracleInput_40 = rsGetTZ_tOracleInput_40.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_40 && unwrappedOraConn_tOracleInput_40 != null) {
                        unwrappedOraConn_tOracleInput_40.setSessionTimeZone(sessionTimezone_tOracleInput_40);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_40).setSessionTimeZone(sessionTimezone_tOracleInput_40);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_40 = conn_tOracleInput_40.createStatement();

		    String dbquery_tOracleInput_40 = "SELECT ts.TDOCUMENTOS_ID, \n	   ts.DOCUMENTO, 	     \n	   CASE\n	   WHEN ts.ESMADSCRITO <> gp.ESMADSCRITO THEN\n       "
+"decode(ts.MOTIVO_CAMBIO_ESM,NULL,1,'',1,0)\n	   ELSE\n	   0\n       END AS TOTAL\nFROM TST_CARGUEMASIVO ts\nINNER JOIN G"
+"EN_PERSONAS gp ON gp.ID = ts.PERSONAS_ID \nWHERE ts.PROCESADO IS NULL";
		    

		    globalMap.put("tOracleInput_40_QUERY",dbquery_tOracleInput_40);

		    java.sql.ResultSet rs_tOracleInput_40 = null;

		    try {
		    	rs_tOracleInput_40 = stmt_tOracleInput_40.executeQuery(dbquery_tOracleInput_40);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_40 = rs_tOracleInput_40.getMetaData();
		    	int colQtyInRs_tOracleInput_40 = rsmd_tOracleInput_40.getColumnCount();

		    String tmpContent_tOracleInput_40 = null;
		    
		    
		    while (rs_tOracleInput_40.next()) {
		        nb_line_tOracleInput_40++;
		        
							if(colQtyInRs_tOracleInput_40 < 1) {
								row140.TDOCUMENTOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_40.getObject(1) != null) {
						row140.TDOCUMENTOS_ID = rs_tOracleInput_40.getInt(1);
					} else {
				
						row140.TDOCUMENTOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_40 < 2) {
								row140.DOCUMENTO = null;
							} else {
	                         		
        	row140.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_40, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_40 < 3) {
								row140.TOTAL = null;
							} else {
		                          
					if(rs_tOracleInput_40.getObject(3) != null) {
						row140.TOTAL = rs_tOracleInput_40.getInt(3);
					} else {
				
						row140.TOTAL = null;
					}
		                    }
					




 



/**
 * [tOracleInput_40 begin ] stop
 */
	
	/**
	 * [tOracleInput_40 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_40";
	
	

 


	tos_count_tOracleInput_40++;

/**
 * [tOracleInput_40 main ] stop
 */
	
	/**
	 * [tOracleInput_40 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_40";
	
	

 



/**
 * [tOracleInput_40 process_data_begin ] stop
 */

	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row140"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_7 = false;
		boolean mainRowRejected_tMap_7 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfSIN_AFILIACION = null;


// # Output table : 'copyOfcopyOfSIN_AFILIACION'
// # Filter conditions 
if( 

row140.TOTAL == 1

 ) {
copyOfcopyOfSIN_AFILIACION_tmp.TDOCUMENTOS_ID = row140.TDOCUMENTOS_ID;
copyOfcopyOfSIN_AFILIACION_tmp.DOCUMENTO = row140.DOCUMENTO;
copyOfcopyOfSIN_AFILIACION_tmp.MENSAJE = null;
copyOfcopyOfSIN_AFILIACION = copyOfcopyOfSIN_AFILIACION_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfSIN_AFILIACION"
if(copyOfcopyOfSIN_AFILIACION != null) { 



	
	/**
	 * [tJavaRow_30 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_30";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfcopyOfSIN_AFILIACION"
						
						);
					}
					

    //Code generate according to input schema and output schema
row141.TDOCUMENTOS_ID = copyOfcopyOfSIN_AFILIACION.TDOCUMENTOS_ID;
row141.DOCUMENTO = copyOfcopyOfSIN_AFILIACION.DOCUMENTO;
row141.MENSAJE = "El afiliado no cuenta con un motivo para elcambio de ESM";

    nb_line_tJavaRow_30++;   

 


	tos_count_tJavaRow_30++;

/**
 * [tJavaRow_30 main ] stop
 */
	
	/**
	 * [tJavaRow_30 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_30";
	
	

 



/**
 * [tJavaRow_30 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_45 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_45";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row141"
						
						);
					}
					



            row142 = null;
        whetherReject_tOracleOutput_45 = false;
                        if(row141.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_45.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_45.setInt(1, row141.TDOCUMENTOS_ID);
}

                        if(row141.DOCUMENTO == null) {
pstmt_tOracleOutput_45.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_45.setString(2, row141.DOCUMENTO);
}

                        if(row141.MENSAJE == null) {
pstmt_tOracleOutput_45.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_45.setString(3, row141.MENSAJE);
}

                try {
                    nb_line_tOracleOutput_45++;
                    int processedCount_tOracleOutput_45 = pstmt_tOracleOutput_45.executeUpdate();
                    insertedCount_tOracleOutput_45 += processedCount_tOracleOutput_45;
                    rowsToCommitCount_tOracleOutput_45 += processedCount_tOracleOutput_45;
                } catch(java.lang.Exception e_tOracleOutput_45) {
globalMap.put("tOracleOutput_45_ERROR_MESSAGE",e_tOracleOutput_45.getMessage());
                    whetherReject_tOracleOutput_45 = true;
                            System.err.print(e_tOracleOutput_45.getMessage());
                }
            if(!whetherReject_tOracleOutput_45) {
                            row142 = new row142Struct();
                                row142.TDOCUMENTOS_ID = row141.TDOCUMENTOS_ID;
                                row142.DOCUMENTO = row141.DOCUMENTO;
                                row142.MENSAJE = row141.MENSAJE;
            }

 


	tos_count_tOracleOutput_45++;

/**
 * [tOracleOutput_45 main ] stop
 */
	
	/**
	 * [tOracleOutput_45 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_45";
	
	

 



/**
 * [tOracleOutput_45 process_data_begin ] stop
 */
// Start of branch "row142"
if(row142 != null) { 



	
	/**
	 * [tJavaRow_31 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_31";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row142"
						
						);
					}
					

    //Code generate according to input schema and output schema
row143.TDOCUMENTOS_ID = row142.TDOCUMENTOS_ID;
row143.DOCUMENTO = row142.DOCUMENTO;
row143.PROCESADO = 11;//Código para indicar que no se cuenta con un motivo para el cambio de ESM.

    nb_line_tJavaRow_31++;   

 


	tos_count_tJavaRow_31++;

/**
 * [tJavaRow_31 main ] stop
 */
	
	/**
	 * [tJavaRow_31 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_31";
	
	

 



/**
 * [tJavaRow_31 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_46 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_46";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row143"
						
						);
					}
					



            row144 = null;
        whetherReject_tOracleOutput_46 = false;
                    if(row143.PROCESADO == null) {
pstmt_tOracleOutput_46.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_46.setInt(1, row143.PROCESADO);
}


                    if(row143.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_46.setNull(2 + count_tOracleOutput_46, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_46.setInt(2 + count_tOracleOutput_46, row143.TDOCUMENTOS_ID);
}


                    if(row143.DOCUMENTO == null) {
pstmt_tOracleOutput_46.setNull(3 + count_tOracleOutput_46, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_46.setString(3 + count_tOracleOutput_46, row143.DOCUMENTO);
}

                try {
                    nb_line_tOracleOutput_46++;
                    int processedCount_tOracleOutput_46 = pstmt_tOracleOutput_46.executeUpdate();
                    updatedCount_tOracleOutput_46 += processedCount_tOracleOutput_46;
                    rowsToCommitCount_tOracleOutput_46 += processedCount_tOracleOutput_46;
                } catch(java.lang.Exception e_tOracleOutput_46) {
globalMap.put("tOracleOutput_46_ERROR_MESSAGE",e_tOracleOutput_46.getMessage());
                    whetherReject_tOracleOutput_46 = true;
                            System.err.print(e_tOracleOutput_46.getMessage());
                }
            if(!whetherReject_tOracleOutput_46) {
                            row144 = new row144Struct();
                                row144.TDOCUMENTOS_ID = row143.TDOCUMENTOS_ID;
                                row144.DOCUMENTO = row143.DOCUMENTO;
                                row144.PROCESADO = row143.PROCESADO;
            }

 


	tos_count_tOracleOutput_46++;

/**
 * [tOracleOutput_46 main ] stop
 */
	
	/**
	 * [tOracleOutput_46 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_46";
	
	

 



/**
 * [tOracleOutput_46 process_data_begin ] stop
 */
// Start of branch "row144"
if(row144 != null) { 



	
	/**
	 * [tOracleCommit_13 main ] start
	 */

	

	
	
	currentComponent="tOracleCommit_13";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row144"
						
						);
					}
					

	java.sql.Connection conn_tOracleCommit_13 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");

if(conn_tOracleCommit_13 != null && !conn_tOracleCommit_13.isClosed()) {
	
			
			conn_tOracleCommit_13.commit();
			
	
}

 


	tos_count_tOracleCommit_13++;

/**
 * [tOracleCommit_13 main ] stop
 */
	
	/**
	 * [tOracleCommit_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleCommit_13";
	
	

 



/**
 * [tOracleCommit_13 process_data_begin ] stop
 */
	
	/**
	 * [tOracleCommit_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleCommit_13";
	
	

 



/**
 * [tOracleCommit_13 process_data_end ] stop
 */

} // End of branch "row144"




	
	/**
	 * [tOracleOutput_46 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_46";
	
	

 



/**
 * [tOracleOutput_46 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_31 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_31";
	
	

 



/**
 * [tJavaRow_31 process_data_end ] stop
 */

} // End of branch "row142"




	
	/**
	 * [tOracleOutput_45 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_45";
	
	

 



/**
 * [tOracleOutput_45 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_30 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_30";
	
	

 



/**
 * [tJavaRow_30 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfSIN_AFILIACION"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_40 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_40";
	
	

 



/**
 * [tOracleInput_40 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_40 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_40";
	
	

}
}finally{
	if (rs_tOracleInput_40 != null) {
		rs_tOracleInput_40.close();
	}
	if (stmt_tOracleInput_40 != null) {
		stmt_tOracleInput_40.close();
	}
}

globalMap.put("tOracleInput_40_NB_LINE",nb_line_tOracleInput_40);
 

ok_Hash.put("tOracleInput_40", true);
end_Hash.put("tOracleInput_40", System.currentTimeMillis());




/**
 * [tOracleInput_40 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row140");
			  	}
			  	
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tJavaRow_30 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_30";
	
	

globalMap.put("tJavaRow_30_NB_LINE",nb_line_tJavaRow_30);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfSIN_AFILIACION");
			  	}
			  	
 

ok_Hash.put("tJavaRow_30", true);
end_Hash.put("tJavaRow_30", System.currentTimeMillis());




/**
 * [tJavaRow_30 end ] stop
 */

	
	/**
	 * [tOracleOutput_45 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_45";
	
	
	



	
        if(pstmt_tOracleOutput_45 != null) {
			
				pstmt_tOracleOutput_45.close();
				resourceMap.remove("pstmt_tOracleOutput_45");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_45", true);

	
	nb_line_deleted_tOracleOutput_45=nb_line_deleted_tOracleOutput_45+ deletedCount_tOracleOutput_45;
	nb_line_update_tOracleOutput_45=nb_line_update_tOracleOutput_45 + updatedCount_tOracleOutput_45;
	nb_line_inserted_tOracleOutput_45=nb_line_inserted_tOracleOutput_45 + insertedCount_tOracleOutput_45;
	nb_line_rejected_tOracleOutput_45=nb_line_rejected_tOracleOutput_45 + rejectedCount_tOracleOutput_45;
	
        globalMap.put("tOracleOutput_45_NB_LINE",nb_line_tOracleOutput_45);
        globalMap.put("tOracleOutput_45_NB_LINE_UPDATED",nb_line_update_tOracleOutput_45);
        globalMap.put("tOracleOutput_45_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_45);
        globalMap.put("tOracleOutput_45_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_45);
        globalMap.put("tOracleOutput_45_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_45);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row141");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_45", true);
end_Hash.put("tOracleOutput_45", System.currentTimeMillis());




/**
 * [tOracleOutput_45 end ] stop
 */

	
	/**
	 * [tJavaRow_31 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_31";
	
	

globalMap.put("tJavaRow_31_NB_LINE",nb_line_tJavaRow_31);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row142");
			  	}
			  	
 

ok_Hash.put("tJavaRow_31", true);
end_Hash.put("tJavaRow_31", System.currentTimeMillis());




/**
 * [tJavaRow_31 end ] stop
 */

	
	/**
	 * [tOracleOutput_46 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_46";
	
	
	



	
        if(pstmt_tOracleOutput_46 != null) {
			
				pstmt_tOracleOutput_46.close();
				resourceMap.remove("pstmt_tOracleOutput_46");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_46", true);

	
	nb_line_deleted_tOracleOutput_46=nb_line_deleted_tOracleOutput_46+ deletedCount_tOracleOutput_46;
	nb_line_update_tOracleOutput_46=nb_line_update_tOracleOutput_46 + updatedCount_tOracleOutput_46;
	nb_line_inserted_tOracleOutput_46=nb_line_inserted_tOracleOutput_46 + insertedCount_tOracleOutput_46;
	nb_line_rejected_tOracleOutput_46=nb_line_rejected_tOracleOutput_46 + rejectedCount_tOracleOutput_46;
	
        globalMap.put("tOracleOutput_46_NB_LINE",nb_line_tOracleOutput_46);
        globalMap.put("tOracleOutput_46_NB_LINE_UPDATED",nb_line_update_tOracleOutput_46);
        globalMap.put("tOracleOutput_46_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_46);
        globalMap.put("tOracleOutput_46_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_46);
        globalMap.put("tOracleOutput_46_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_46);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row143");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_46", true);
end_Hash.put("tOracleOutput_46", System.currentTimeMillis());




/**
 * [tOracleOutput_46 end ] stop
 */

	
	/**
	 * [tOracleCommit_13 end ] start
	 */

	

	
	
	currentComponent="tOracleCommit_13";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row144");
			  	}
			  	
 

ok_Hash.put("tOracleCommit_13", true);
end_Hash.put("tOracleCommit_13", System.currentTimeMillis());




/**
 * [tOracleCommit_13 end ] stop
 */


















				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_40:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk27", 0, "ok");
								} 
							
							tOracleInput_41Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_40 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_40";
	
	

 



/**
 * [tOracleInput_40 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tJavaRow_30 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_30";
	
	

 



/**
 * [tJavaRow_30 finally ] stop
 */

	
	/**
	 * [tOracleOutput_45 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_45";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_45") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_45 = null;
                if ((pstmtToClose_tOracleOutput_45 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_45")) != null) {
                    pstmtToClose_tOracleOutput_45.close();
                }
    }
 



/**
 * [tOracleOutput_45 finally ] stop
 */

	
	/**
	 * [tJavaRow_31 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_31";
	
	

 



/**
 * [tJavaRow_31 finally ] stop
 */

	
	/**
	 * [tOracleOutput_46 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_46";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_46") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_46 = null;
                if ((pstmtToClose_tOracleOutput_46 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_46")) != null) {
                    pstmtToClose_tOracleOutput_46.close();
                }
    }
 



/**
 * [tOracleOutput_46 finally ] stop
 */

	
	/**
	 * [tOracleCommit_13 finally ] start
	 */

	

	
	
	currentComponent="tOracleCommit_13";
	
	

 



/**
 * [tOracleCommit_13 finally ] stop
 */


















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_40_SUBPROCESS_STATE", 1);
	}
	


public static class row149Struct implements routines.system.IPersistableRow<row149Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return null;
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer PROCESADO;

				public Integer getPROCESADO () {
					return this.PROCESADO;
				}

				public Boolean PROCESADOIsNullable(){
				    return true;
				}
				public Boolean PROCESADOIsKey(){
				    return false;
				}
				public Integer PROCESADOLength(){
				    return null;
				}
				public Integer PROCESADOPrecision(){
				    return null;
				}
				public String PROCESADODefault(){
				
					return null;
				
				}
				public String PROCESADOComment(){
				
				    return "";
				
				}
				public String PROCESADOPattern(){
				
					return "";
				
				}
				public String PROCESADOOriginalDbColumnName(){
				
					return "PROCESADO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PROCESADO="+String.valueOf(PROCESADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row149Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row148Struct implements routines.system.IPersistableRow<row148Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return null;
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer PROCESADO;

				public Integer getPROCESADO () {
					return this.PROCESADO;
				}

				public Boolean PROCESADOIsNullable(){
				    return true;
				}
				public Boolean PROCESADOIsKey(){
				    return false;
				}
				public Integer PROCESADOLength(){
				    return null;
				}
				public Integer PROCESADOPrecision(){
				    return null;
				}
				public String PROCESADODefault(){
				
					return null;
				
				}
				public String PROCESADOComment(){
				
				    return "";
				
				}
				public String PROCESADOPattern(){
				
					return "";
				
				}
				public String PROCESADOOriginalDbColumnName(){
				
					return "PROCESADO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PROCESADO="+String.valueOf(PROCESADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row148Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row147Struct implements routines.system.IPersistableRow<row147Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return true;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",MENSAJE="+MENSAJE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row147Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row146Struct implements routines.system.IPersistableRow<row146Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return true;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",MENSAJE="+MENSAJE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row146Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfSIN_AFILIACIONStruct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfSIN_AFILIACIONStruct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return true;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",MENSAJE="+MENSAJE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfSIN_AFILIACIONStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row145Struct implements routines.system.IPersistableRow<row145Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer TOTAL;

				public Integer getTOTAL () {
					return this.TOTAL;
				}

				public Boolean TOTALIsNullable(){
				    return true;
				}
				public Boolean TOTALIsKey(){
				    return false;
				}
				public Integer TOTALLength(){
				    return 0;
				}
				public Integer TOTALPrecision(){
				    return 0;
				}
				public String TOTALDefault(){
				
					return "";
				
				}
				public String TOTALComment(){
				
				    return "";
				
				}
				public String TOTALPattern(){
				
					return "";
				
				}
				public String TOTALOriginalDbColumnName(){
				
					return "TOTAL";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TOTAL = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TOTAL = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.TOTAL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.TOTAL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",TOTAL="+String.valueOf(TOTAL));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row145Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_41Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_41_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row145Struct row145 = new row145Struct();
copyOfcopyOfcopyOfSIN_AFILIACIONStruct copyOfcopyOfcopyOfSIN_AFILIACION = new copyOfcopyOfcopyOfSIN_AFILIACIONStruct();
row146Struct row146 = new row146Struct();
row147Struct row147 = new row147Struct();
row148Struct row148 = new row148Struct();
row149Struct row149 = new row149Struct();









	
	/**
	 * [tOracleCommit_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleCommit_14", false);
		start_Hash.put("tOracleCommit_14", System.currentTimeMillis());
		
	
	currentComponent="tOracleCommit_14";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row149");
					}
				
		int tos_count_tOracleCommit_14 = 0;
		

 



/**
 * [tOracleCommit_14 begin ] stop
 */



	
	/**
	 * [tOracleOutput_48 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_48", false);
		start_Hash.put("tOracleOutput_48", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_48";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row148");
					}
				
		int tos_count_tOracleOutput_48 = 0;
		






        int updateKeyCount_tOracleOutput_48 = 2;
        if(updateKeyCount_tOracleOutput_48 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_48 == 3 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_48 = 0;
    int nb_line_update_tOracleOutput_48 = 0;
    int nb_line_inserted_tOracleOutput_48 = 0;
    int nb_line_deleted_tOracleOutput_48 = 0;
    int nb_line_rejected_tOracleOutput_48 = 0;

    int tmp_batchUpdateCount_tOracleOutput_48 = 0;

    int deletedCount_tOracleOutput_48=0;
    int updatedCount_tOracleOutput_48=0;
    int insertedCount_tOracleOutput_48=0;
    int rowsToCommitCount_tOracleOutput_48=0;
    int rejectedCount_tOracleOutput_48=0;

    boolean whetherReject_tOracleOutput_48 = false;

    java.sql.Connection conn_tOracleOutput_48 = null;

    //optional table
    String dbschema_tOracleOutput_48 = null;
    String tableName_tOracleOutput_48 = null;
        dbschema_tOracleOutput_48 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_48 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_48=0;

        if(dbschema_tOracleOutput_48 == null || dbschema_tOracleOutput_48.trim().length() == 0) {
            tableName_tOracleOutput_48 = ("TST_CARGUEMASIVO");
        } else {
            tableName_tOracleOutput_48 = dbschema_tOracleOutput_48 + "." + ("TST_CARGUEMASIVO");
        }
                String update_tOracleOutput_48 = "UPDATE " + tableName_tOracleOutput_48 + " SET PROCESADO = ? WHERE TDOCUMENTOS_ID = ? AND DOCUMENTO = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_48 = conn_tOracleOutput_48.prepareStatement(update_tOracleOutput_48);
                resourceMap.put("pstmt_tOracleOutput_48", pstmt_tOracleOutput_48);





 



/**
 * [tOracleOutput_48 begin ] stop
 */



	
	/**
	 * [tJavaRow_33 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_33", false);
		start_Hash.put("tJavaRow_33", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_33";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row147");
					}
				
		int tos_count_tJavaRow_33 = 0;
		

int nb_line_tJavaRow_33 = 0;

 



/**
 * [tJavaRow_33 begin ] stop
 */



	
	/**
	 * [tOracleOutput_47 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_47", false);
		start_Hash.put("tOracleOutput_47", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_47";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row146");
					}
				
		int tos_count_tOracleOutput_47 = 0;
		






    
    int nb_line_tOracleOutput_47 = 0;
    int nb_line_update_tOracleOutput_47 = 0;
    int nb_line_inserted_tOracleOutput_47 = 0;
    int nb_line_deleted_tOracleOutput_47 = 0;
    int nb_line_rejected_tOracleOutput_47 = 0;

    int tmp_batchUpdateCount_tOracleOutput_47 = 0;

    int deletedCount_tOracleOutput_47=0;
    int updatedCount_tOracleOutput_47=0;
    int insertedCount_tOracleOutput_47=0;
    int rowsToCommitCount_tOracleOutput_47=0;
    int rejectedCount_tOracleOutput_47=0;

    boolean whetherReject_tOracleOutput_47 = false;

    java.sql.Connection conn_tOracleOutput_47 = null;

    //optional table
    String dbschema_tOracleOutput_47 = null;
    String tableName_tOracleOutput_47 = null;
        dbschema_tOracleOutput_47 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_47 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_47=0;

        if(dbschema_tOracleOutput_47 == null || dbschema_tOracleOutput_47.trim().length() == 0) {
            tableName_tOracleOutput_47 = ("TST_ERRCMASIVO");
        } else {
            tableName_tOracleOutput_47 = dbschema_tOracleOutput_47 + "." + ("TST_ERRCMASIVO");
        }
                String insert_tOracleOutput_47 = "INSERT INTO " + tableName_tOracleOutput_47 + " (TDOCUMENTOS_ID,DOCUMENTO,MENSAJE) VALUES (?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_47 = conn_tOracleOutput_47.prepareStatement(insert_tOracleOutput_47);
                        resourceMap.put("pstmt_tOracleOutput_47", pstmt_tOracleOutput_47);





 



/**
 * [tOracleOutput_47 begin ] stop
 */



	
	/**
	 * [tJavaRow_32 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_32", false);
		start_Hash.put("tJavaRow_32", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_32";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfSIN_AFILIACION");
					}
				
		int tos_count_tJavaRow_32 = 0;
		

int nb_line_tJavaRow_32 = 0;

 



/**
 * [tJavaRow_32 begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row145");
					}
				
		int tos_count_tMap_8 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfSIN_AFILIACIONStruct copyOfcopyOfcopyOfSIN_AFILIACION_tmp = new copyOfcopyOfcopyOfSIN_AFILIACIONStruct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */



	
	/**
	 * [tOracleInput_41 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_41", false);
		start_Hash.put("tOracleInput_41", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_41";
	
	
		int tos_count_tOracleInput_41 = 0;
		
	


	
		    int nb_line_tOracleInput_41 = 0;
		    java.sql.Connection conn_tOracleInput_41 = null;
				conn_tOracleInput_41 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_41 = false;
				boolean isConnectionWrapped_tOracleInput_41 = !(conn_tOracleInput_41 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_41.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_41 = null;
                if (isConnectionWrapped_tOracleInput_41) {
					unwrappedOraConn_tOracleInput_41 = conn_tOracleInput_41.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_41 != null) {
                        isTimeZoneNull_tOracleInput_41 = (unwrappedOraConn_tOracleInput_41.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_41 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_41).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_41) {
					java.sql.Statement stmtGetTZ_tOracleInput_41 = conn_tOracleInput_41.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_41 = stmtGetTZ_tOracleInput_41.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_41 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_41.next()) {
						sessionTimezone_tOracleInput_41 = rsGetTZ_tOracleInput_41.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_41 && unwrappedOraConn_tOracleInput_41 != null) {
                        unwrappedOraConn_tOracleInput_41.setSessionTimeZone(sessionTimezone_tOracleInput_41);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_41).setSessionTimeZone(sessionTimezone_tOracleInput_41);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_41 = conn_tOracleInput_41.createStatement();

		    String dbquery_tOracleInput_41 = "SELECT ts.TDOCUMENTOS_ID, \n	   ts.DOCUMENTO, 	     \n	   CASE\n	   WHEN ts.ESTADO  <> ae.SIGLA  THEN\n       decode(ts"
+".MOTIVO_CAMBIO_ESTADO,NULL,1,'',1,0)\n	   ELSE\n	   0\n       END AS TOTAL\nFROM TST_CARGUEMASIVO ts\nINNER JOIN GEN_AFI"
+"LIADOS ga ON ga.ID = ts.AFILIADO_ID\nINNER JOIN AFI_ESTADOS ae ON ae.NOMBRE = ga.ESTAFILIACION\nWHERE ts.PROCESADO IS NU"
+"LL";
		    

		    globalMap.put("tOracleInput_41_QUERY",dbquery_tOracleInput_41);

		    java.sql.ResultSet rs_tOracleInput_41 = null;

		    try {
		    	rs_tOracleInput_41 = stmt_tOracleInput_41.executeQuery(dbquery_tOracleInput_41);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_41 = rs_tOracleInput_41.getMetaData();
		    	int colQtyInRs_tOracleInput_41 = rsmd_tOracleInput_41.getColumnCount();

		    String tmpContent_tOracleInput_41 = null;
		    
		    
		    while (rs_tOracleInput_41.next()) {
		        nb_line_tOracleInput_41++;
		        
							if(colQtyInRs_tOracleInput_41 < 1) {
								row145.TDOCUMENTOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_41.getObject(1) != null) {
						row145.TDOCUMENTOS_ID = rs_tOracleInput_41.getInt(1);
					} else {
				
						row145.TDOCUMENTOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_41 < 2) {
								row145.DOCUMENTO = null;
							} else {
	                         		
        	row145.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_41, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_41 < 3) {
								row145.TOTAL = null;
							} else {
		                          
					if(rs_tOracleInput_41.getObject(3) != null) {
						row145.TOTAL = rs_tOracleInput_41.getInt(3);
					} else {
				
						row145.TOTAL = null;
					}
		                    }
					




 



/**
 * [tOracleInput_41 begin ] stop
 */
	
	/**
	 * [tOracleInput_41 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_41";
	
	

 


	tos_count_tOracleInput_41++;

/**
 * [tOracleInput_41 main ] stop
 */
	
	/**
	 * [tOracleInput_41 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_41";
	
	

 



/**
 * [tOracleInput_41 process_data_begin ] stop
 */

	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row145"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_8 = false;
		boolean mainRowRejected_tMap_8 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfSIN_AFILIACION = null;


// # Output table : 'copyOfcopyOfcopyOfSIN_AFILIACION'
// # Filter conditions 
if( 

row145.TOTAL == 1

 ) {
copyOfcopyOfcopyOfSIN_AFILIACION_tmp.TDOCUMENTOS_ID = row145.TDOCUMENTOS_ID;
copyOfcopyOfcopyOfSIN_AFILIACION_tmp.DOCUMENTO = row145.DOCUMENTO;
copyOfcopyOfcopyOfSIN_AFILIACION_tmp.MENSAJE = null;
copyOfcopyOfcopyOfSIN_AFILIACION = copyOfcopyOfcopyOfSIN_AFILIACION_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfSIN_AFILIACION"
if(copyOfcopyOfcopyOfSIN_AFILIACION != null) { 



	
	/**
	 * [tJavaRow_32 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_32";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfcopyOfcopyOfSIN_AFILIACION"
						
						);
					}
					

    //Code generate according to input schema and output schema
row146.TDOCUMENTOS_ID = copyOfcopyOfcopyOfSIN_AFILIACION.TDOCUMENTOS_ID;
row146.DOCUMENTO = copyOfcopyOfcopyOfSIN_AFILIACION.DOCUMENTO;
row146.MENSAJE = "El afiliado no cuenta con un motivo para el cambio de estado";

    nb_line_tJavaRow_32++;   

 


	tos_count_tJavaRow_32++;

/**
 * [tJavaRow_32 main ] stop
 */
	
	/**
	 * [tJavaRow_32 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_32";
	
	

 



/**
 * [tJavaRow_32 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_47 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_47";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row146"
						
						);
					}
					



            row147 = null;
        whetherReject_tOracleOutput_47 = false;
                        if(row146.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_47.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_47.setInt(1, row146.TDOCUMENTOS_ID);
}

                        if(row146.DOCUMENTO == null) {
pstmt_tOracleOutput_47.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_47.setString(2, row146.DOCUMENTO);
}

                        if(row146.MENSAJE == null) {
pstmt_tOracleOutput_47.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_47.setString(3, row146.MENSAJE);
}

                try {
                    nb_line_tOracleOutput_47++;
                    int processedCount_tOracleOutput_47 = pstmt_tOracleOutput_47.executeUpdate();
                    insertedCount_tOracleOutput_47 += processedCount_tOracleOutput_47;
                    rowsToCommitCount_tOracleOutput_47 += processedCount_tOracleOutput_47;
                } catch(java.lang.Exception e_tOracleOutput_47) {
globalMap.put("tOracleOutput_47_ERROR_MESSAGE",e_tOracleOutput_47.getMessage());
                    whetherReject_tOracleOutput_47 = true;
                            System.err.print(e_tOracleOutput_47.getMessage());
                }
            if(!whetherReject_tOracleOutput_47) {
                            row147 = new row147Struct();
                                row147.TDOCUMENTOS_ID = row146.TDOCUMENTOS_ID;
                                row147.DOCUMENTO = row146.DOCUMENTO;
                                row147.MENSAJE = row146.MENSAJE;
            }

 


	tos_count_tOracleOutput_47++;

/**
 * [tOracleOutput_47 main ] stop
 */
	
	/**
	 * [tOracleOutput_47 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_47";
	
	

 



/**
 * [tOracleOutput_47 process_data_begin ] stop
 */
// Start of branch "row147"
if(row147 != null) { 



	
	/**
	 * [tJavaRow_33 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_33";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row147"
						
						);
					}
					

    //Code generate according to input schema and output schema
row148.TDOCUMENTOS_ID = row147.TDOCUMENTOS_ID;
row148.DOCUMENTO = row147.DOCUMENTO;
row148.PROCESADO = 12;//Código para indicar que no se cuenta con un motivo para el cambio de estado.

    nb_line_tJavaRow_33++;   

 


	tos_count_tJavaRow_33++;

/**
 * [tJavaRow_33 main ] stop
 */
	
	/**
	 * [tJavaRow_33 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_33";
	
	

 



/**
 * [tJavaRow_33 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_48 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_48";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row148"
						
						);
					}
					



            row149 = null;
        whetherReject_tOracleOutput_48 = false;
                    if(row148.PROCESADO == null) {
pstmt_tOracleOutput_48.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_48.setInt(1, row148.PROCESADO);
}


                    if(row148.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_48.setNull(2 + count_tOracleOutput_48, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_48.setInt(2 + count_tOracleOutput_48, row148.TDOCUMENTOS_ID);
}


                    if(row148.DOCUMENTO == null) {
pstmt_tOracleOutput_48.setNull(3 + count_tOracleOutput_48, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_48.setString(3 + count_tOracleOutput_48, row148.DOCUMENTO);
}

                try {
                    nb_line_tOracleOutput_48++;
                    int processedCount_tOracleOutput_48 = pstmt_tOracleOutput_48.executeUpdate();
                    updatedCount_tOracleOutput_48 += processedCount_tOracleOutput_48;
                    rowsToCommitCount_tOracleOutput_48 += processedCount_tOracleOutput_48;
                } catch(java.lang.Exception e_tOracleOutput_48) {
globalMap.put("tOracleOutput_48_ERROR_MESSAGE",e_tOracleOutput_48.getMessage());
                    whetherReject_tOracleOutput_48 = true;
                            System.err.print(e_tOracleOutput_48.getMessage());
                }
            if(!whetherReject_tOracleOutput_48) {
                            row149 = new row149Struct();
                                row149.TDOCUMENTOS_ID = row148.TDOCUMENTOS_ID;
                                row149.DOCUMENTO = row148.DOCUMENTO;
                                row149.PROCESADO = row148.PROCESADO;
            }

 


	tos_count_tOracleOutput_48++;

/**
 * [tOracleOutput_48 main ] stop
 */
	
	/**
	 * [tOracleOutput_48 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_48";
	
	

 



/**
 * [tOracleOutput_48 process_data_begin ] stop
 */
// Start of branch "row149"
if(row149 != null) { 



	
	/**
	 * [tOracleCommit_14 main ] start
	 */

	

	
	
	currentComponent="tOracleCommit_14";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row149"
						
						);
					}
					

	java.sql.Connection conn_tOracleCommit_14 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");

if(conn_tOracleCommit_14 != null && !conn_tOracleCommit_14.isClosed()) {
	
			
			conn_tOracleCommit_14.commit();
			
	
}

 


	tos_count_tOracleCommit_14++;

/**
 * [tOracleCommit_14 main ] stop
 */
	
	/**
	 * [tOracleCommit_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleCommit_14";
	
	

 



/**
 * [tOracleCommit_14 process_data_begin ] stop
 */
	
	/**
	 * [tOracleCommit_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleCommit_14";
	
	

 



/**
 * [tOracleCommit_14 process_data_end ] stop
 */

} // End of branch "row149"




	
	/**
	 * [tOracleOutput_48 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_48";
	
	

 



/**
 * [tOracleOutput_48 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_33 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_33";
	
	

 



/**
 * [tJavaRow_33 process_data_end ] stop
 */

} // End of branch "row147"




	
	/**
	 * [tOracleOutput_47 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_47";
	
	

 



/**
 * [tOracleOutput_47 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_32 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_32";
	
	

 



/**
 * [tJavaRow_32 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfSIN_AFILIACION"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	

 



/**
 * [tMap_8 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_41 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_41";
	
	

 



/**
 * [tOracleInput_41 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_41 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_41";
	
	

}
}finally{
	if (rs_tOracleInput_41 != null) {
		rs_tOracleInput_41.close();
	}
	if (stmt_tOracleInput_41 != null) {
		stmt_tOracleInput_41.close();
	}
}

globalMap.put("tOracleInput_41_NB_LINE",nb_line_tOracleInput_41);
 

ok_Hash.put("tOracleInput_41", true);
end_Hash.put("tOracleInput_41", System.currentTimeMillis());




/**
 * [tOracleInput_41 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row145");
			  	}
			  	
 

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tJavaRow_32 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_32";
	
	

globalMap.put("tJavaRow_32_NB_LINE",nb_line_tJavaRow_32);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfSIN_AFILIACION");
			  	}
			  	
 

ok_Hash.put("tJavaRow_32", true);
end_Hash.put("tJavaRow_32", System.currentTimeMillis());




/**
 * [tJavaRow_32 end ] stop
 */

	
	/**
	 * [tOracleOutput_47 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_47";
	
	
	



	
        if(pstmt_tOracleOutput_47 != null) {
			
				pstmt_tOracleOutput_47.close();
				resourceMap.remove("pstmt_tOracleOutput_47");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_47", true);

	
	nb_line_deleted_tOracleOutput_47=nb_line_deleted_tOracleOutput_47+ deletedCount_tOracleOutput_47;
	nb_line_update_tOracleOutput_47=nb_line_update_tOracleOutput_47 + updatedCount_tOracleOutput_47;
	nb_line_inserted_tOracleOutput_47=nb_line_inserted_tOracleOutput_47 + insertedCount_tOracleOutput_47;
	nb_line_rejected_tOracleOutput_47=nb_line_rejected_tOracleOutput_47 + rejectedCount_tOracleOutput_47;
	
        globalMap.put("tOracleOutput_47_NB_LINE",nb_line_tOracleOutput_47);
        globalMap.put("tOracleOutput_47_NB_LINE_UPDATED",nb_line_update_tOracleOutput_47);
        globalMap.put("tOracleOutput_47_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_47);
        globalMap.put("tOracleOutput_47_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_47);
        globalMap.put("tOracleOutput_47_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_47);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row146");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_47", true);
end_Hash.put("tOracleOutput_47", System.currentTimeMillis());




/**
 * [tOracleOutput_47 end ] stop
 */

	
	/**
	 * [tJavaRow_33 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_33";
	
	

globalMap.put("tJavaRow_33_NB_LINE",nb_line_tJavaRow_33);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row147");
			  	}
			  	
 

ok_Hash.put("tJavaRow_33", true);
end_Hash.put("tJavaRow_33", System.currentTimeMillis());




/**
 * [tJavaRow_33 end ] stop
 */

	
	/**
	 * [tOracleOutput_48 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_48";
	
	
	



	
        if(pstmt_tOracleOutput_48 != null) {
			
				pstmt_tOracleOutput_48.close();
				resourceMap.remove("pstmt_tOracleOutput_48");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_48", true);

	
	nb_line_deleted_tOracleOutput_48=nb_line_deleted_tOracleOutput_48+ deletedCount_tOracleOutput_48;
	nb_line_update_tOracleOutput_48=nb_line_update_tOracleOutput_48 + updatedCount_tOracleOutput_48;
	nb_line_inserted_tOracleOutput_48=nb_line_inserted_tOracleOutput_48 + insertedCount_tOracleOutput_48;
	nb_line_rejected_tOracleOutput_48=nb_line_rejected_tOracleOutput_48 + rejectedCount_tOracleOutput_48;
	
        globalMap.put("tOracleOutput_48_NB_LINE",nb_line_tOracleOutput_48);
        globalMap.put("tOracleOutput_48_NB_LINE_UPDATED",nb_line_update_tOracleOutput_48);
        globalMap.put("tOracleOutput_48_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_48);
        globalMap.put("tOracleOutput_48_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_48);
        globalMap.put("tOracleOutput_48_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_48);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row148");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_48", true);
end_Hash.put("tOracleOutput_48", System.currentTimeMillis());




/**
 * [tOracleOutput_48 end ] stop
 */

	
	/**
	 * [tOracleCommit_14 end ] start
	 */

	

	
	
	currentComponent="tOracleCommit_14";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row149");
			  	}
			  	
 

ok_Hash.put("tOracleCommit_14", true);
end_Hash.put("tOracleCommit_14", System.currentTimeMillis());




/**
 * [tOracleCommit_14 end ] stop
 */


















				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_41:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk28", 0, "ok");
								} 
							
							tOracleInput_34Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_41 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_41";
	
	

 



/**
 * [tOracleInput_41 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tJavaRow_32 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_32";
	
	

 



/**
 * [tJavaRow_32 finally ] stop
 */

	
	/**
	 * [tOracleOutput_47 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_47";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_47") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_47 = null;
                if ((pstmtToClose_tOracleOutput_47 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_47")) != null) {
                    pstmtToClose_tOracleOutput_47.close();
                }
    }
 



/**
 * [tOracleOutput_47 finally ] stop
 */

	
	/**
	 * [tJavaRow_33 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_33";
	
	

 



/**
 * [tJavaRow_33 finally ] stop
 */

	
	/**
	 * [tOracleOutput_48 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_48";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_48") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_48 = null;
                if ((pstmtToClose_tOracleOutput_48 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_48")) != null) {
                    pstmtToClose_tOracleOutput_48.close();
                }
    }
 



/**
 * [tOracleOutput_48 finally ] stop
 */

	
	/**
	 * [tOracleCommit_14 finally ] start
	 */

	

	
	
	currentComponent="tOracleCommit_14";
	
	

 



/**
 * [tOracleCommit_14 finally ] stop
 */


















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_41_SUBPROCESS_STATE", 1);
	}
	


public static class ACTUALIZAR_PERSONASStruct implements routines.system.IPersistableRow<ACTUALIZAR_PERSONASStruct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 400;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 400;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 400;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 400;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer LUGAR_EXPEDICION;

				public Integer getLUGAR_EXPEDICION () {
					return this.LUGAR_EXPEDICION;
				}

				public Boolean LUGAR_EXPEDICIONIsNullable(){
				    return true;
				}
				public Boolean LUGAR_EXPEDICIONIsKey(){
				    return false;
				}
				public Integer LUGAR_EXPEDICIONLength(){
				    return 0;
				}
				public Integer LUGAR_EXPEDICIONPrecision(){
				    return null;
				}
				public String LUGAR_EXPEDICIONDefault(){
				
					return "";
				
				}
				public String LUGAR_EXPEDICIONComment(){
				
				    return "";
				
				}
				public String LUGAR_EXPEDICIONPattern(){
				
					return "";
				
				}
				public String LUGAR_EXPEDICIONOriginalDbColumnName(){
				
					return "LUGAR_EXPEDICION";
				
				}

				
			    public Integer SEXO_ID;

				public Integer getSEXO_ID () {
					return this.SEXO_ID;
				}

				public Boolean SEXO_IDIsNullable(){
				    return true;
				}
				public Boolean SEXO_IDIsKey(){
				    return false;
				}
				public Integer SEXO_IDLength(){
				    return 0;
				}
				public Integer SEXO_IDPrecision(){
				    return null;
				}
				public String SEXO_IDDefault(){
				
					return "";
				
				}
				public String SEXO_IDComment(){
				
				    return "";
				
				}
				public String SEXO_IDPattern(){
				
					return "";
				
				}
				public String SEXO_IDOriginalDbColumnName(){
				
					return "SEXO_ID";
				
				}

				
			    public Float ESTATURA;

				public Float getESTATURA () {
					return this.ESTATURA;
				}

				public Boolean ESTATURAIsNullable(){
				    return true;
				}
				public Boolean ESTATURAIsKey(){
				    return false;
				}
				public Integer ESTATURALength(){
				    return 10;
				}
				public Integer ESTATURAPrecision(){
				    return 2;
				}
				public String ESTATURADefault(){
				
					return "";
				
				}
				public String ESTATURAComment(){
				
				    return "";
				
				}
				public String ESTATURAPattern(){
				
					return "";
				
				}
				public String ESTATURAOriginalDbColumnName(){
				
					return "ESTATURA";
				
				}

				
			    public java.util.Date FECHA_EXPEDICION;

				public java.util.Date getFECHA_EXPEDICION () {
					return this.FECHA_EXPEDICION;
				}

				public Boolean FECHA_EXPEDICIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_EXPEDICIONIsKey(){
				    return false;
				}
				public Integer FECHA_EXPEDICIONLength(){
				    return null;
				}
				public Integer FECHA_EXPEDICIONPrecision(){
				    return null;
				}
				public String FECHA_EXPEDICIONDefault(){
				
					return null;
				
				}
				public String FECHA_EXPEDICIONComment(){
				
				    return "";
				
				}
				public String FECHA_EXPEDICIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_EXPEDICIONOriginalDbColumnName(){
				
					return "FECHA_EXPEDICION";
				
				}

				
			    public java.util.Date FECHA_NACIMIENTO;

				public java.util.Date getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return 0;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return 0;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public Integer LUGAR_NACIMIENTO;

				public Integer getLUGAR_NACIMIENTO () {
					return this.LUGAR_NACIMIENTO;
				}

				public Boolean LUGAR_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean LUGAR_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer LUGAR_NACIMIENTOLength(){
				    return 0;
				}
				public Integer LUGAR_NACIMIENTOPrecision(){
				    return null;
				}
				public String LUGAR_NACIMIENTODefault(){
				
					return "";
				
				}
				public String LUGAR_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String LUGAR_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String LUGAR_NACIMIENTOOriginalDbColumnName(){
				
					return "LUGAR_NACIMIENTO";
				
				}

				
			    public String DIRECCION;

				public String getDIRECCION () {
					return this.DIRECCION;
				}

				public Boolean DIRECCIONIsNullable(){
				    return true;
				}
				public Boolean DIRECCIONIsKey(){
				    return false;
				}
				public Integer DIRECCIONLength(){
				    return 400;
				}
				public Integer DIRECCIONPrecision(){
				    return 0;
				}
				public String DIRECCIONDefault(){
				
					return null;
				
				}
				public String DIRECCIONComment(){
				
				    return "";
				
				}
				public String DIRECCIONPattern(){
				
					return "";
				
				}
				public String DIRECCIONOriginalDbColumnName(){
				
					return "DIRECCION";
				
				}

				
			    public Integer LUGAR_RESIDENCIA;

				public Integer getLUGAR_RESIDENCIA () {
					return this.LUGAR_RESIDENCIA;
				}

				public Boolean LUGAR_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean LUGAR_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer LUGAR_RESIDENCIALength(){
				    return 0;
				}
				public Integer LUGAR_RESIDENCIAPrecision(){
				    return null;
				}
				public String LUGAR_RESIDENCIADefault(){
				
					return "";
				
				}
				public String LUGAR_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String LUGAR_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String LUGAR_RESIDENCIAOriginalDbColumnName(){
				
					return "LUGAR_RESIDENCIA";
				
				}

				
			    public Integer LOCALIDADES_ID;

				public Integer getLOCALIDADES_ID () {
					return this.LOCALIDADES_ID;
				}

				public Boolean LOCALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean LOCALIDADES_IDIsKey(){
				    return false;
				}
				public Integer LOCALIDADES_IDLength(){
				    return 0;
				}
				public Integer LOCALIDADES_IDPrecision(){
				    return null;
				}
				public String LOCALIDADES_IDDefault(){
				
					return "";
				
				}
				public String LOCALIDADES_IDComment(){
				
				    return "";
				
				}
				public String LOCALIDADES_IDPattern(){
				
					return "";
				
				}
				public String LOCALIDADES_IDOriginalDbColumnName(){
				
					return "LOCALIDADES_ID";
				
				}

				
			    public Integer GSANGUINEOS_ID;

				public Integer getGSANGUINEOS_ID () {
					return this.GSANGUINEOS_ID;
				}

				public Boolean GSANGUINEOS_IDIsNullable(){
				    return true;
				}
				public Boolean GSANGUINEOS_IDIsKey(){
				    return false;
				}
				public Integer GSANGUINEOS_IDLength(){
				    return 0;
				}
				public Integer GSANGUINEOS_IDPrecision(){
				    return null;
				}
				public String GSANGUINEOS_IDDefault(){
				
					return "";
				
				}
				public String GSANGUINEOS_IDComment(){
				
				    return "";
				
				}
				public String GSANGUINEOS_IDPattern(){
				
					return "";
				
				}
				public String GSANGUINEOS_IDOriginalDbColumnName(){
				
					return "GSANGUINEOS_ID";
				
				}

				
			    public String TELEFONO;

				public String getTELEFONO () {
					return this.TELEFONO;
				}

				public Boolean TELEFONOIsNullable(){
				    return true;
				}
				public Boolean TELEFONOIsKey(){
				    return false;
				}
				public Integer TELEFONOLength(){
				    return 400;
				}
				public Integer TELEFONOPrecision(){
				    return 0;
				}
				public String TELEFONODefault(){
				
					return null;
				
				}
				public String TELEFONOComment(){
				
				    return "";
				
				}
				public String TELEFONOPattern(){
				
					return "";
				
				}
				public String TELEFONOOriginalDbColumnName(){
				
					return "TELEFONO";
				
				}

				
			    public Integer OCUPACIONES_ID;

				public Integer getOCUPACIONES_ID () {
					return this.OCUPACIONES_ID;
				}

				public Boolean OCUPACIONES_IDIsNullable(){
				    return true;
				}
				public Boolean OCUPACIONES_IDIsKey(){
				    return false;
				}
				public Integer OCUPACIONES_IDLength(){
				    return 0;
				}
				public Integer OCUPACIONES_IDPrecision(){
				    return null;
				}
				public String OCUPACIONES_IDDefault(){
				
					return "";
				
				}
				public String OCUPACIONES_IDComment(){
				
				    return "";
				
				}
				public String OCUPACIONES_IDPattern(){
				
					return "";
				
				}
				public String OCUPACIONES_IDOriginalDbColumnName(){
				
					return "OCUPACIONES_ID";
				
				}

				
			    public Integer ETNICAS_ID;

				public Integer getETNICAS_ID () {
					return this.ETNICAS_ID;
				}

				public Boolean ETNICAS_IDIsNullable(){
				    return true;
				}
				public Boolean ETNICAS_IDIsKey(){
				    return false;
				}
				public Integer ETNICAS_IDLength(){
				    return 0;
				}
				public Integer ETNICAS_IDPrecision(){
				    return null;
				}
				public String ETNICAS_IDDefault(){
				
					return "";
				
				}
				public String ETNICAS_IDComment(){
				
				    return "";
				
				}
				public String ETNICAS_IDPattern(){
				
					return "";
				
				}
				public String ETNICAS_IDOriginalDbColumnName(){
				
					return "ETNICAS_ID";
				
				}

				
			    public Integer NSOCIOECONOMICOS_ID;

				public Integer getNSOCIOECONOMICOS_ID () {
					return this.NSOCIOECONOMICOS_ID;
				}

				public Boolean NSOCIOECONOMICOS_IDIsNullable(){
				    return true;
				}
				public Boolean NSOCIOECONOMICOS_IDIsKey(){
				    return false;
				}
				public Integer NSOCIOECONOMICOS_IDLength(){
				    return 0;
				}
				public Integer NSOCIOECONOMICOS_IDPrecision(){
				    return null;
				}
				public String NSOCIOECONOMICOS_IDDefault(){
				
					return "";
				
				}
				public String NSOCIOECONOMICOS_IDComment(){
				
				    return "";
				
				}
				public String NSOCIOECONOMICOS_IDPattern(){
				
					return "";
				
				}
				public String NSOCIOECONOMICOS_IDOriginalDbColumnName(){
				
					return "NSOCIOECONOMICOS_ID";
				
				}

				
			    public Integer TVIVIENDA_ID;

				public Integer getTVIVIENDA_ID () {
					return this.TVIVIENDA_ID;
				}

				public Boolean TVIVIENDA_IDIsNullable(){
				    return true;
				}
				public Boolean TVIVIENDA_IDIsKey(){
				    return false;
				}
				public Integer TVIVIENDA_IDLength(){
				    return 0;
				}
				public Integer TVIVIENDA_IDPrecision(){
				    return null;
				}
				public String TVIVIENDA_IDDefault(){
				
					return "";
				
				}
				public String TVIVIENDA_IDComment(){
				
				    return "";
				
				}
				public String TVIVIENDA_IDPattern(){
				
					return "";
				
				}
				public String TVIVIENDA_IDOriginalDbColumnName(){
				
					return "TVIVIENDA_ID";
				
				}

				
			    public Integer NEDUCATIVOS_ID;

				public Integer getNEDUCATIVOS_ID () {
					return this.NEDUCATIVOS_ID;
				}

				public Boolean NEDUCATIVOS_IDIsNullable(){
				    return true;
				}
				public Boolean NEDUCATIVOS_IDIsKey(){
				    return false;
				}
				public Integer NEDUCATIVOS_IDLength(){
				    return 0;
				}
				public Integer NEDUCATIVOS_IDPrecision(){
				    return null;
				}
				public String NEDUCATIVOS_IDDefault(){
				
					return "";
				
				}
				public String NEDUCATIVOS_IDComment(){
				
				    return "";
				
				}
				public String NEDUCATIVOS_IDPattern(){
				
					return "";
				
				}
				public String NEDUCATIVOS_IDOriginalDbColumnName(){
				
					return "NEDUCATIVOS_ID";
				
				}

				
			    public Integer ESMADSCRITO;

				public Integer getESMADSCRITO () {
					return this.ESMADSCRITO;
				}

				public Boolean ESMADSCRITOIsNullable(){
				    return true;
				}
				public Boolean ESMADSCRITOIsKey(){
				    return false;
				}
				public Integer ESMADSCRITOLength(){
				    return 0;
				}
				public Integer ESMADSCRITOPrecision(){
				    return null;
				}
				public String ESMADSCRITODefault(){
				
					return "";
				
				}
				public String ESMADSCRITOComment(){
				
				    return "";
				
				}
				public String ESMADSCRITOPattern(){
				
					return "";
				
				}
				public String ESMADSCRITOOriginalDbColumnName(){
				
					return "ESMADSCRITO";
				
				}

				
			    public Integer ID;

				public Integer getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String CELULAR;

				public String getCELULAR () {
					return this.CELULAR;
				}

				public Boolean CELULARIsNullable(){
				    return true;
				}
				public Boolean CELULARIsKey(){
				    return false;
				}
				public Integer CELULARLength(){
				    return null;
				}
				public Integer CELULARPrecision(){
				    return null;
				}
				public String CELULARDefault(){
				
					return null;
				
				}
				public String CELULARComment(){
				
				    return "";
				
				}
				public String CELULARPattern(){
				
					return "";
				
				}
				public String CELULAROriginalDbColumnName(){
				
					return "CELULAR";
				
				}

				
			    public String EMAIL;

				public String getEMAIL () {
					return this.EMAIL;
				}

				public Boolean EMAILIsNullable(){
				    return true;
				}
				public Boolean EMAILIsKey(){
				    return false;
				}
				public Integer EMAILLength(){
				    return null;
				}
				public Integer EMAILPrecision(){
				    return null;
				}
				public String EMAILDefault(){
				
					return null;
				
				}
				public String EMAILComment(){
				
				    return "";
				
				}
				public String EMAILPattern(){
				
					return "";
				
				}
				public String EMAILOriginalDbColumnName(){
				
					return "EMAIL";
				
				}

				
			    public java.util.Date FECHA_DEFUNCION;

				public java.util.Date getFECHA_DEFUNCION () {
					return this.FECHA_DEFUNCION;
				}

				public Boolean FECHA_DEFUNCIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_DEFUNCIONIsKey(){
				    return false;
				}
				public Integer FECHA_DEFUNCIONLength(){
				    return null;
				}
				public Integer FECHA_DEFUNCIONPrecision(){
				    return null;
				}
				public String FECHA_DEFUNCIONDefault(){
				
					return null;
				
				}
				public String FECHA_DEFUNCIONComment(){
				
				    return "";
				
				}
				public String FECHA_DEFUNCIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_DEFUNCIONOriginalDbColumnName(){
				
					return "FECHA_DEFUNCION";
				
				}

				
			    public Integer ID_BDUA;

				public Integer getID_BDUA () {
					return this.ID_BDUA;
				}

				public Boolean ID_BDUAIsNullable(){
				    return true;
				}
				public Boolean ID_BDUAIsKey(){
				    return false;
				}
				public Integer ID_BDUALength(){
				    return null;
				}
				public Integer ID_BDUAPrecision(){
				    return null;
				}
				public String ID_BDUADefault(){
				
					return null;
				
				}
				public String ID_BDUAComment(){
				
				    return "";
				
				}
				public String ID_BDUAPattern(){
				
					return "";
				
				}
				public String ID_BDUAOriginalDbColumnName(){
				
					return "ID_BDUA";
				
				}

				
			    public Integer TDISCAPACIDADES_ID;

				public Integer getTDISCAPACIDADES_ID () {
					return this.TDISCAPACIDADES_ID;
				}

				public Boolean TDISCAPACIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean TDISCAPACIDADES_IDIsKey(){
				    return false;
				}
				public Integer TDISCAPACIDADES_IDLength(){
				    return null;
				}
				public Integer TDISCAPACIDADES_IDPrecision(){
				    return null;
				}
				public String TDISCAPACIDADES_IDDefault(){
				
					return null;
				
				}
				public String TDISCAPACIDADES_IDComment(){
				
				    return "";
				
				}
				public String TDISCAPACIDADES_IDPattern(){
				
					return "";
				
				}
				public String TDISCAPACIDADES_IDOriginalDbColumnName(){
				
					return "TDISCAPACIDADES_ID";
				
				}

				
			    public Integer PESPECIAL_ID;

				public Integer getPESPECIAL_ID () {
					return this.PESPECIAL_ID;
				}

				public Boolean PESPECIAL_IDIsNullable(){
				    return true;
				}
				public Boolean PESPECIAL_IDIsKey(){
				    return false;
				}
				public Integer PESPECIAL_IDLength(){
				    return null;
				}
				public Integer PESPECIAL_IDPrecision(){
				    return null;
				}
				public String PESPECIAL_IDDefault(){
				
					return null;
				
				}
				public String PESPECIAL_IDComment(){
				
				    return "";
				
				}
				public String PESPECIAL_IDPattern(){
				
					return "";
				
				}
				public String PESPECIAL_IDOriginalDbColumnName(){
				
					return "PESPECIAL_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.LUGAR_EXPEDICION = readInteger(dis);
					
						this.SEXO_ID = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ESTATURA = null;
           				} else {
           			    	this.ESTATURA = dis.readFloat();
           				}
					
					this.FECHA_EXPEDICION = readDate(dis);
					
					this.FECHA_NACIMIENTO = readDate(dis);
					
						this.LUGAR_NACIMIENTO = readInteger(dis);
					
					this.DIRECCION = readString(dis);
					
						this.LUGAR_RESIDENCIA = readInteger(dis);
					
						this.LOCALIDADES_ID = readInteger(dis);
					
						this.GSANGUINEOS_ID = readInteger(dis);
					
					this.TELEFONO = readString(dis);
					
						this.OCUPACIONES_ID = readInteger(dis);
					
						this.ETNICAS_ID = readInteger(dis);
					
						this.NSOCIOECONOMICOS_ID = readInteger(dis);
					
						this.TVIVIENDA_ID = readInteger(dis);
					
						this.NEDUCATIVOS_ID = readInteger(dis);
					
						this.ESMADSCRITO = readInteger(dis);
					
						this.ID = readInteger(dis);
					
					this.CELULAR = readString(dis);
					
					this.EMAIL = readString(dis);
					
					this.FECHA_DEFUNCION = readDate(dis);
					
						this.ID_BDUA = readInteger(dis);
					
						this.TDISCAPACIDADES_ID = readInteger(dis);
					
						this.PESPECIAL_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.LUGAR_EXPEDICION = readInteger(dis);
					
						this.SEXO_ID = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ESTATURA = null;
           				} else {
           			    	this.ESTATURA = dis.readFloat();
           				}
					
					this.FECHA_EXPEDICION = readDate(dis);
					
					this.FECHA_NACIMIENTO = readDate(dis);
					
						this.LUGAR_NACIMIENTO = readInteger(dis);
					
					this.DIRECCION = readString(dis);
					
						this.LUGAR_RESIDENCIA = readInteger(dis);
					
						this.LOCALIDADES_ID = readInteger(dis);
					
						this.GSANGUINEOS_ID = readInteger(dis);
					
					this.TELEFONO = readString(dis);
					
						this.OCUPACIONES_ID = readInteger(dis);
					
						this.ETNICAS_ID = readInteger(dis);
					
						this.NSOCIOECONOMICOS_ID = readInteger(dis);
					
						this.TVIVIENDA_ID = readInteger(dis);
					
						this.NEDUCATIVOS_ID = readInteger(dis);
					
						this.ESMADSCRITO = readInteger(dis);
					
						this.ID = readInteger(dis);
					
					this.CELULAR = readString(dis);
					
					this.EMAIL = readString(dis);
					
					this.FECHA_DEFUNCION = readDate(dis);
					
						this.ID_BDUA = readInteger(dis);
					
						this.TDISCAPACIDADES_ID = readInteger(dis);
					
						this.PESPECIAL_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_EXPEDICION,dos);
					
					// Integer
				
						writeInteger(this.SEXO_ID,dos);
					
					// Float
				
						if(this.ESTATURA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ESTATURA);
		            	}
					
					// java.util.Date
				
						writeDate(this.FECHA_EXPEDICION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_NACIMIENTO,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_NACIMIENTO,dos);
					
					// String
				
						writeString(this.DIRECCION,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_RESIDENCIA,dos);
					
					// Integer
				
						writeInteger(this.LOCALIDADES_ID,dos);
					
					// Integer
				
						writeInteger(this.GSANGUINEOS_ID,dos);
					
					// String
				
						writeString(this.TELEFONO,dos);
					
					// Integer
				
						writeInteger(this.OCUPACIONES_ID,dos);
					
					// Integer
				
						writeInteger(this.ETNICAS_ID,dos);
					
					// Integer
				
						writeInteger(this.NSOCIOECONOMICOS_ID,dos);
					
					// Integer
				
						writeInteger(this.TVIVIENDA_ID,dos);
					
					// Integer
				
						writeInteger(this.NEDUCATIVOS_ID,dos);
					
					// Integer
				
						writeInteger(this.ESMADSCRITO,dos);
					
					// Integer
				
						writeInteger(this.ID,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// String
				
						writeString(this.EMAIL,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_DEFUNCION,dos);
					
					// Integer
				
						writeInteger(this.ID_BDUA,dos);
					
					// Integer
				
						writeInteger(this.TDISCAPACIDADES_ID,dos);
					
					// Integer
				
						writeInteger(this.PESPECIAL_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_EXPEDICION,dos);
					
					// Integer
				
						writeInteger(this.SEXO_ID,dos);
					
					// Float
				
						if(this.ESTATURA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ESTATURA);
		            	}
					
					// java.util.Date
				
						writeDate(this.FECHA_EXPEDICION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_NACIMIENTO,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_NACIMIENTO,dos);
					
					// String
				
						writeString(this.DIRECCION,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_RESIDENCIA,dos);
					
					// Integer
				
						writeInteger(this.LOCALIDADES_ID,dos);
					
					// Integer
				
						writeInteger(this.GSANGUINEOS_ID,dos);
					
					// String
				
						writeString(this.TELEFONO,dos);
					
					// Integer
				
						writeInteger(this.OCUPACIONES_ID,dos);
					
					// Integer
				
						writeInteger(this.ETNICAS_ID,dos);
					
					// Integer
				
						writeInteger(this.NSOCIOECONOMICOS_ID,dos);
					
					// Integer
				
						writeInteger(this.TVIVIENDA_ID,dos);
					
					// Integer
				
						writeInteger(this.NEDUCATIVOS_ID,dos);
					
					// Integer
				
						writeInteger(this.ESMADSCRITO,dos);
					
					// Integer
				
						writeInteger(this.ID,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// String
				
						writeString(this.EMAIL,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_DEFUNCION,dos);
					
					// Integer
				
						writeInteger(this.ID_BDUA,dos);
					
					// Integer
				
						writeInteger(this.TDISCAPACIDADES_ID,dos);
					
					// Integer
				
						writeInteger(this.PESPECIAL_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",LUGAR_EXPEDICION="+String.valueOf(LUGAR_EXPEDICION));
		sb.append(",SEXO_ID="+String.valueOf(SEXO_ID));
		sb.append(",ESTATURA="+String.valueOf(ESTATURA));
		sb.append(",FECHA_EXPEDICION="+String.valueOf(FECHA_EXPEDICION));
		sb.append(",FECHA_NACIMIENTO="+String.valueOf(FECHA_NACIMIENTO));
		sb.append(",LUGAR_NACIMIENTO="+String.valueOf(LUGAR_NACIMIENTO));
		sb.append(",DIRECCION="+DIRECCION);
		sb.append(",LUGAR_RESIDENCIA="+String.valueOf(LUGAR_RESIDENCIA));
		sb.append(",LOCALIDADES_ID="+String.valueOf(LOCALIDADES_ID));
		sb.append(",GSANGUINEOS_ID="+String.valueOf(GSANGUINEOS_ID));
		sb.append(",TELEFONO="+TELEFONO);
		sb.append(",OCUPACIONES_ID="+String.valueOf(OCUPACIONES_ID));
		sb.append(",ETNICAS_ID="+String.valueOf(ETNICAS_ID));
		sb.append(",NSOCIOECONOMICOS_ID="+String.valueOf(NSOCIOECONOMICOS_ID));
		sb.append(",TVIVIENDA_ID="+String.valueOf(TVIVIENDA_ID));
		sb.append(",NEDUCATIVOS_ID="+String.valueOf(NEDUCATIVOS_ID));
		sb.append(",ESMADSCRITO="+String.valueOf(ESMADSCRITO));
		sb.append(",ID="+String.valueOf(ID));
		sb.append(",CELULAR="+CELULAR);
		sb.append(",EMAIL="+EMAIL);
		sb.append(",FECHA_DEFUNCION="+String.valueOf(FECHA_DEFUNCION));
		sb.append(",ID_BDUA="+String.valueOf(ID_BDUA));
		sb.append(",TDISCAPACIDADES_ID="+String.valueOf(TDISCAPACIDADES_ID));
		sb.append(",PESPECIAL_ID="+String.valueOf(PESPECIAL_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ACTUALIZAR_PERSONASStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class CAMBIO_TDOCUMENTOS_IDStruct implements routines.system.IPersistableRow<CAMBIO_TDOCUMENTOS_IDStruct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public int AFILIADOS_ID;

				public int getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 0;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return null;
				}
				public String AFILIADOS_IDDefault(){
				
					return "";
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "FK - GEN_AFILIADOS";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public int PROCESOS_ID;

				public int getPROCESOS_ID () {
					return this.PROCESOS_ID;
				}

				public Boolean PROCESOS_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESOS_IDIsKey(){
				    return false;
				}
				public Integer PROCESOS_IDLength(){
				    return 0;
				}
				public Integer PROCESOS_IDPrecision(){
				    return null;
				}
				public String PROCESOS_IDDefault(){
				
					return "";
				
				}
				public String PROCESOS_IDComment(){
				
				    return "FK - AFI_PROCESOS";
				
				}
				public String PROCESOS_IDPattern(){
				
					return "";
				
				}
				public String PROCESOS_IDOriginalDbColumnName(){
				
					return "PROCESOS_ID";
				
				}

				
			    public String MOTIVO;

				public String getMOTIVO () {
					return this.MOTIVO;
				}

				public Boolean MOTIVOIsNullable(){
				    return true;
				}
				public Boolean MOTIVOIsKey(){
				    return false;
				}
				public Integer MOTIVOLength(){
				    return 500;
				}
				public Integer MOTIVOPrecision(){
				    return 0;
				}
				public String MOTIVODefault(){
				
					return null;
				
				}
				public String MOTIVOComment(){
				
				    return "Motivo de la edici\u00F3n";
				
				}
				public String MOTIVOPattern(){
				
					return "";
				
				}
				public String MOTIVOOriginalDbColumnName(){
				
					return "MOTIVO";
				
				}

				
			    public int RNOVEDADES_ID;

				public int getRNOVEDADES_ID () {
					return this.RNOVEDADES_ID;
				}

				public Boolean RNOVEDADES_IDIsNullable(){
				    return false;
				}
				public Boolean RNOVEDADES_IDIsKey(){
				    return false;
				}
				public Integer RNOVEDADES_IDLength(){
				    return 0;
				}
				public Integer RNOVEDADES_IDPrecision(){
				    return null;
				}
				public String RNOVEDADES_IDDefault(){
				
					return "";
				
				}
				public String RNOVEDADES_IDComment(){
				
				    return "FK - AFI_NOVEDADES";
				
				}
				public String RNOVEDADES_IDPattern(){
				
					return "";
				
				}
				public String RNOVEDADES_IDOriginalDbColumnName(){
				
					return "RNOVEDADES_ID";
				
				}

				
			    public String VANTERIOR;

				public String getVANTERIOR () {
					return this.VANTERIOR;
				}

				public Boolean VANTERIORIsNullable(){
				    return true;
				}
				public Boolean VANTERIORIsKey(){
				    return false;
				}
				public Integer VANTERIORLength(){
				    return 2000;
				}
				public Integer VANTERIORPrecision(){
				    return 0;
				}
				public String VANTERIORDefault(){
				
					return null;
				
				}
				public String VANTERIORComment(){
				
				    return "Valor anterior";
				
				}
				public String VANTERIORPattern(){
				
					return "";
				
				}
				public String VANTERIOROriginalDbColumnName(){
				
					return "VANTERIOR";
				
				}

				
			    public String VACTUAL;

				public String getVACTUAL () {
					return this.VACTUAL;
				}

				public Boolean VACTUALIsNullable(){
				    return true;
				}
				public Boolean VACTUALIsKey(){
				    return false;
				}
				public Integer VACTUALLength(){
				    return 2000;
				}
				public Integer VACTUALPrecision(){
				    return 0;
				}
				public String VACTUALDefault(){
				
					return null;
				
				}
				public String VACTUALComment(){
				
				    return "Valor actual";
				
				}
				public String VACTUALPattern(){
				
					return "";
				
				}
				public String VACTUALOriginalDbColumnName(){
				
					return "VACTUAL";
				
				}

				
			    public String CAMPO;

				public String getCAMPO () {
					return this.CAMPO;
				}

				public Boolean CAMPOIsNullable(){
				    return true;
				}
				public Boolean CAMPOIsKey(){
				    return false;
				}
				public Integer CAMPOLength(){
				    return 150;
				}
				public Integer CAMPOPrecision(){
				    return 0;
				}
				public String CAMPODefault(){
				
					return null;
				
				}
				public String CAMPOComment(){
				
				    return "Campo afectado por el historico";
				
				}
				public String CAMPOPattern(){
				
					return "";
				
				}
				public String CAMPOOriginalDbColumnName(){
				
					return "CAMPO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.PROCESOS_ID = dis.readInt();
					
					this.MOTIVO = readString(dis);
					
			        this.RNOVEDADES_ID = dis.readInt();
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.CAMPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.PROCESOS_ID = dis.readInt();
					
					this.MOTIVO = readString(dis);
					
			        this.RNOVEDADES_ID = dis.readInt();
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.CAMPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESOS_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// int
				
		            	dos.writeInt(this.RNOVEDADES_ID);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.CAMPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESOS_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// int
				
		            	dos.writeInt(this.RNOVEDADES_ID);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.CAMPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",PROCESOS_ID="+String.valueOf(PROCESOS_ID));
		sb.append(",MOTIVO="+MOTIVO);
		sb.append(",RNOVEDADES_ID="+String.valueOf(RNOVEDADES_ID));
		sb.append(",VANTERIOR="+VANTERIOR);
		sb.append(",VACTUAL="+VACTUAL);
		sb.append(",CAMPO="+CAMPO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(CAMBIO_TDOCUMENTOS_IDStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class CAMBIO_DOCUMENTOStruct implements routines.system.IPersistableRow<CAMBIO_DOCUMENTOStruct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public int AFILIADOS_ID;

				public int getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 0;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return null;
				}
				public String AFILIADOS_IDDefault(){
				
					return "";
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "FK - GEN_AFILIADOS";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public int PROCESOS_ID;

				public int getPROCESOS_ID () {
					return this.PROCESOS_ID;
				}

				public Boolean PROCESOS_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESOS_IDIsKey(){
				    return false;
				}
				public Integer PROCESOS_IDLength(){
				    return 0;
				}
				public Integer PROCESOS_IDPrecision(){
				    return null;
				}
				public String PROCESOS_IDDefault(){
				
					return "";
				
				}
				public String PROCESOS_IDComment(){
				
				    return "FK - AFI_PROCESOS";
				
				}
				public String PROCESOS_IDPattern(){
				
					return "";
				
				}
				public String PROCESOS_IDOriginalDbColumnName(){
				
					return "PROCESOS_ID";
				
				}

				
			    public String MOTIVO;

				public String getMOTIVO () {
					return this.MOTIVO;
				}

				public Boolean MOTIVOIsNullable(){
				    return true;
				}
				public Boolean MOTIVOIsKey(){
				    return false;
				}
				public Integer MOTIVOLength(){
				    return 500;
				}
				public Integer MOTIVOPrecision(){
				    return 0;
				}
				public String MOTIVODefault(){
				
					return null;
				
				}
				public String MOTIVOComment(){
				
				    return "Motivo de la edici\u00F3n";
				
				}
				public String MOTIVOPattern(){
				
					return "";
				
				}
				public String MOTIVOOriginalDbColumnName(){
				
					return "MOTIVO";
				
				}

				
			    public int RNOVEDADES_ID;

				public int getRNOVEDADES_ID () {
					return this.RNOVEDADES_ID;
				}

				public Boolean RNOVEDADES_IDIsNullable(){
				    return false;
				}
				public Boolean RNOVEDADES_IDIsKey(){
				    return false;
				}
				public Integer RNOVEDADES_IDLength(){
				    return 0;
				}
				public Integer RNOVEDADES_IDPrecision(){
				    return null;
				}
				public String RNOVEDADES_IDDefault(){
				
					return "";
				
				}
				public String RNOVEDADES_IDComment(){
				
				    return "FK - AFI_NOVEDADES";
				
				}
				public String RNOVEDADES_IDPattern(){
				
					return "";
				
				}
				public String RNOVEDADES_IDOriginalDbColumnName(){
				
					return "RNOVEDADES_ID";
				
				}

				
			    public String VANTERIOR;

				public String getVANTERIOR () {
					return this.VANTERIOR;
				}

				public Boolean VANTERIORIsNullable(){
				    return true;
				}
				public Boolean VANTERIORIsKey(){
				    return false;
				}
				public Integer VANTERIORLength(){
				    return 2000;
				}
				public Integer VANTERIORPrecision(){
				    return 0;
				}
				public String VANTERIORDefault(){
				
					return null;
				
				}
				public String VANTERIORComment(){
				
				    return "Valor anterior";
				
				}
				public String VANTERIORPattern(){
				
					return "";
				
				}
				public String VANTERIOROriginalDbColumnName(){
				
					return "VANTERIOR";
				
				}

				
			    public String VACTUAL;

				public String getVACTUAL () {
					return this.VACTUAL;
				}

				public Boolean VACTUALIsNullable(){
				    return true;
				}
				public Boolean VACTUALIsKey(){
				    return false;
				}
				public Integer VACTUALLength(){
				    return 2000;
				}
				public Integer VACTUALPrecision(){
				    return 0;
				}
				public String VACTUALDefault(){
				
					return null;
				
				}
				public String VACTUALComment(){
				
				    return "Valor actual";
				
				}
				public String VACTUALPattern(){
				
					return "";
				
				}
				public String VACTUALOriginalDbColumnName(){
				
					return "VACTUAL";
				
				}

				
			    public String CAMPO;

				public String getCAMPO () {
					return this.CAMPO;
				}

				public Boolean CAMPOIsNullable(){
				    return true;
				}
				public Boolean CAMPOIsKey(){
				    return false;
				}
				public Integer CAMPOLength(){
				    return 150;
				}
				public Integer CAMPOPrecision(){
				    return 0;
				}
				public String CAMPODefault(){
				
					return null;
				
				}
				public String CAMPOComment(){
				
				    return "Campo afectado por el historico";
				
				}
				public String CAMPOPattern(){
				
					return "";
				
				}
				public String CAMPOOriginalDbColumnName(){
				
					return "CAMPO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.PROCESOS_ID = dis.readInt();
					
					this.MOTIVO = readString(dis);
					
			        this.RNOVEDADES_ID = dis.readInt();
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.CAMPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.PROCESOS_ID = dis.readInt();
					
					this.MOTIVO = readString(dis);
					
			        this.RNOVEDADES_ID = dis.readInt();
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.CAMPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESOS_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// int
				
		            	dos.writeInt(this.RNOVEDADES_ID);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.CAMPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESOS_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// int
				
		            	dos.writeInt(this.RNOVEDADES_ID);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.CAMPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",PROCESOS_ID="+String.valueOf(PROCESOS_ID));
		sb.append(",MOTIVO="+MOTIVO);
		sb.append(",RNOVEDADES_ID="+String.valueOf(RNOVEDADES_ID));
		sb.append(",VANTERIOR="+VANTERIOR);
		sb.append(",VACTUAL="+VACTUAL);
		sb.append(",CAMPO="+CAMPO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(CAMBIO_DOCUMENTOStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class CAMBIO_PRIMER_NOMBREStruct implements routines.system.IPersistableRow<CAMBIO_PRIMER_NOMBREStruct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public int AFILIADOS_ID;

				public int getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 0;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return null;
				}
				public String AFILIADOS_IDDefault(){
				
					return "";
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "FK - GEN_AFILIADOS";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public int PROCESOS_ID;

				public int getPROCESOS_ID () {
					return this.PROCESOS_ID;
				}

				public Boolean PROCESOS_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESOS_IDIsKey(){
				    return false;
				}
				public Integer PROCESOS_IDLength(){
				    return 0;
				}
				public Integer PROCESOS_IDPrecision(){
				    return null;
				}
				public String PROCESOS_IDDefault(){
				
					return "";
				
				}
				public String PROCESOS_IDComment(){
				
				    return "FK - AFI_PROCESOS";
				
				}
				public String PROCESOS_IDPattern(){
				
					return "";
				
				}
				public String PROCESOS_IDOriginalDbColumnName(){
				
					return "PROCESOS_ID";
				
				}

				
			    public String MOTIVO;

				public String getMOTIVO () {
					return this.MOTIVO;
				}

				public Boolean MOTIVOIsNullable(){
				    return true;
				}
				public Boolean MOTIVOIsKey(){
				    return false;
				}
				public Integer MOTIVOLength(){
				    return 500;
				}
				public Integer MOTIVOPrecision(){
				    return 0;
				}
				public String MOTIVODefault(){
				
					return null;
				
				}
				public String MOTIVOComment(){
				
				    return "Motivo de la edici\u00F3n";
				
				}
				public String MOTIVOPattern(){
				
					return "";
				
				}
				public String MOTIVOOriginalDbColumnName(){
				
					return "MOTIVO";
				
				}

				
			    public int RNOVEDADES_ID;

				public int getRNOVEDADES_ID () {
					return this.RNOVEDADES_ID;
				}

				public Boolean RNOVEDADES_IDIsNullable(){
				    return false;
				}
				public Boolean RNOVEDADES_IDIsKey(){
				    return false;
				}
				public Integer RNOVEDADES_IDLength(){
				    return 0;
				}
				public Integer RNOVEDADES_IDPrecision(){
				    return null;
				}
				public String RNOVEDADES_IDDefault(){
				
					return "";
				
				}
				public String RNOVEDADES_IDComment(){
				
				    return "FK - AFI_NOVEDADES";
				
				}
				public String RNOVEDADES_IDPattern(){
				
					return "";
				
				}
				public String RNOVEDADES_IDOriginalDbColumnName(){
				
					return "RNOVEDADES_ID";
				
				}

				
			    public String VANTERIOR;

				public String getVANTERIOR () {
					return this.VANTERIOR;
				}

				public Boolean VANTERIORIsNullable(){
				    return true;
				}
				public Boolean VANTERIORIsKey(){
				    return false;
				}
				public Integer VANTERIORLength(){
				    return 2000;
				}
				public Integer VANTERIORPrecision(){
				    return 0;
				}
				public String VANTERIORDefault(){
				
					return null;
				
				}
				public String VANTERIORComment(){
				
				    return "Valor anterior";
				
				}
				public String VANTERIORPattern(){
				
					return "";
				
				}
				public String VANTERIOROriginalDbColumnName(){
				
					return "VANTERIOR";
				
				}

				
			    public String VACTUAL;

				public String getVACTUAL () {
					return this.VACTUAL;
				}

				public Boolean VACTUALIsNullable(){
				    return true;
				}
				public Boolean VACTUALIsKey(){
				    return false;
				}
				public Integer VACTUALLength(){
				    return 2000;
				}
				public Integer VACTUALPrecision(){
				    return 0;
				}
				public String VACTUALDefault(){
				
					return null;
				
				}
				public String VACTUALComment(){
				
				    return "Valor actual";
				
				}
				public String VACTUALPattern(){
				
					return "";
				
				}
				public String VACTUALOriginalDbColumnName(){
				
					return "VACTUAL";
				
				}

				
			    public String CAMPO;

				public String getCAMPO () {
					return this.CAMPO;
				}

				public Boolean CAMPOIsNullable(){
				    return true;
				}
				public Boolean CAMPOIsKey(){
				    return false;
				}
				public Integer CAMPOLength(){
				    return 150;
				}
				public Integer CAMPOPrecision(){
				    return 0;
				}
				public String CAMPODefault(){
				
					return null;
				
				}
				public String CAMPOComment(){
				
				    return "Campo afectado por el historico";
				
				}
				public String CAMPOPattern(){
				
					return "";
				
				}
				public String CAMPOOriginalDbColumnName(){
				
					return "CAMPO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.PROCESOS_ID = dis.readInt();
					
					this.MOTIVO = readString(dis);
					
			        this.RNOVEDADES_ID = dis.readInt();
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.CAMPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.PROCESOS_ID = dis.readInt();
					
					this.MOTIVO = readString(dis);
					
			        this.RNOVEDADES_ID = dis.readInt();
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.CAMPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESOS_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// int
				
		            	dos.writeInt(this.RNOVEDADES_ID);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.CAMPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESOS_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// int
				
		            	dos.writeInt(this.RNOVEDADES_ID);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.CAMPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",PROCESOS_ID="+String.valueOf(PROCESOS_ID));
		sb.append(",MOTIVO="+MOTIVO);
		sb.append(",RNOVEDADES_ID="+String.valueOf(RNOVEDADES_ID));
		sb.append(",VANTERIOR="+VANTERIOR);
		sb.append(",VACTUAL="+VACTUAL);
		sb.append(",CAMPO="+CAMPO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(CAMBIO_PRIMER_NOMBREStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class CAMBIO_SEGUNDO_NOMBREStruct implements routines.system.IPersistableRow<CAMBIO_SEGUNDO_NOMBREStruct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public int AFILIADOS_ID;

				public int getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 0;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return null;
				}
				public String AFILIADOS_IDDefault(){
				
					return "";
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "FK - GEN_AFILIADOS";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public int PROCESOS_ID;

				public int getPROCESOS_ID () {
					return this.PROCESOS_ID;
				}

				public Boolean PROCESOS_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESOS_IDIsKey(){
				    return false;
				}
				public Integer PROCESOS_IDLength(){
				    return 0;
				}
				public Integer PROCESOS_IDPrecision(){
				    return null;
				}
				public String PROCESOS_IDDefault(){
				
					return "";
				
				}
				public String PROCESOS_IDComment(){
				
				    return "FK - AFI_PROCESOS";
				
				}
				public String PROCESOS_IDPattern(){
				
					return "";
				
				}
				public String PROCESOS_IDOriginalDbColumnName(){
				
					return "PROCESOS_ID";
				
				}

				
			    public String MOTIVO;

				public String getMOTIVO () {
					return this.MOTIVO;
				}

				public Boolean MOTIVOIsNullable(){
				    return true;
				}
				public Boolean MOTIVOIsKey(){
				    return false;
				}
				public Integer MOTIVOLength(){
				    return 500;
				}
				public Integer MOTIVOPrecision(){
				    return 0;
				}
				public String MOTIVODefault(){
				
					return null;
				
				}
				public String MOTIVOComment(){
				
				    return "Motivo de la edici\u00F3n";
				
				}
				public String MOTIVOPattern(){
				
					return "";
				
				}
				public String MOTIVOOriginalDbColumnName(){
				
					return "MOTIVO";
				
				}

				
			    public int RNOVEDADES_ID;

				public int getRNOVEDADES_ID () {
					return this.RNOVEDADES_ID;
				}

				public Boolean RNOVEDADES_IDIsNullable(){
				    return false;
				}
				public Boolean RNOVEDADES_IDIsKey(){
				    return false;
				}
				public Integer RNOVEDADES_IDLength(){
				    return 0;
				}
				public Integer RNOVEDADES_IDPrecision(){
				    return null;
				}
				public String RNOVEDADES_IDDefault(){
				
					return "";
				
				}
				public String RNOVEDADES_IDComment(){
				
				    return "FK - AFI_NOVEDADES";
				
				}
				public String RNOVEDADES_IDPattern(){
				
					return "";
				
				}
				public String RNOVEDADES_IDOriginalDbColumnName(){
				
					return "RNOVEDADES_ID";
				
				}

				
			    public String VANTERIOR;

				public String getVANTERIOR () {
					return this.VANTERIOR;
				}

				public Boolean VANTERIORIsNullable(){
				    return true;
				}
				public Boolean VANTERIORIsKey(){
				    return false;
				}
				public Integer VANTERIORLength(){
				    return 2000;
				}
				public Integer VANTERIORPrecision(){
				    return 0;
				}
				public String VANTERIORDefault(){
				
					return null;
				
				}
				public String VANTERIORComment(){
				
				    return "Valor anterior";
				
				}
				public String VANTERIORPattern(){
				
					return "";
				
				}
				public String VANTERIOROriginalDbColumnName(){
				
					return "VANTERIOR";
				
				}

				
			    public String VACTUAL;

				public String getVACTUAL () {
					return this.VACTUAL;
				}

				public Boolean VACTUALIsNullable(){
				    return true;
				}
				public Boolean VACTUALIsKey(){
				    return false;
				}
				public Integer VACTUALLength(){
				    return 2000;
				}
				public Integer VACTUALPrecision(){
				    return 0;
				}
				public String VACTUALDefault(){
				
					return null;
				
				}
				public String VACTUALComment(){
				
				    return "Valor actual";
				
				}
				public String VACTUALPattern(){
				
					return "";
				
				}
				public String VACTUALOriginalDbColumnName(){
				
					return "VACTUAL";
				
				}

				
			    public String CAMPO;

				public String getCAMPO () {
					return this.CAMPO;
				}

				public Boolean CAMPOIsNullable(){
				    return true;
				}
				public Boolean CAMPOIsKey(){
				    return false;
				}
				public Integer CAMPOLength(){
				    return 150;
				}
				public Integer CAMPOPrecision(){
				    return 0;
				}
				public String CAMPODefault(){
				
					return null;
				
				}
				public String CAMPOComment(){
				
				    return "Campo afectado por el historico";
				
				}
				public String CAMPOPattern(){
				
					return "";
				
				}
				public String CAMPOOriginalDbColumnName(){
				
					return "CAMPO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.PROCESOS_ID = dis.readInt();
					
					this.MOTIVO = readString(dis);
					
			        this.RNOVEDADES_ID = dis.readInt();
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.CAMPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.PROCESOS_ID = dis.readInt();
					
					this.MOTIVO = readString(dis);
					
			        this.RNOVEDADES_ID = dis.readInt();
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.CAMPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESOS_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// int
				
		            	dos.writeInt(this.RNOVEDADES_ID);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.CAMPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESOS_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// int
				
		            	dos.writeInt(this.RNOVEDADES_ID);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.CAMPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",PROCESOS_ID="+String.valueOf(PROCESOS_ID));
		sb.append(",MOTIVO="+MOTIVO);
		sb.append(",RNOVEDADES_ID="+String.valueOf(RNOVEDADES_ID));
		sb.append(",VANTERIOR="+VANTERIOR);
		sb.append(",VACTUAL="+VACTUAL);
		sb.append(",CAMPO="+CAMPO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(CAMBIO_SEGUNDO_NOMBREStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class CAMBIO_PRIMER_APELLIDOStruct implements routines.system.IPersistableRow<CAMBIO_PRIMER_APELLIDOStruct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public int AFILIADOS_ID;

				public int getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 0;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return null;
				}
				public String AFILIADOS_IDDefault(){
				
					return "";
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "FK - GEN_AFILIADOS";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public int PROCESOS_ID;

				public int getPROCESOS_ID () {
					return this.PROCESOS_ID;
				}

				public Boolean PROCESOS_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESOS_IDIsKey(){
				    return false;
				}
				public Integer PROCESOS_IDLength(){
				    return 0;
				}
				public Integer PROCESOS_IDPrecision(){
				    return null;
				}
				public String PROCESOS_IDDefault(){
				
					return "";
				
				}
				public String PROCESOS_IDComment(){
				
				    return "FK - AFI_PROCESOS";
				
				}
				public String PROCESOS_IDPattern(){
				
					return "";
				
				}
				public String PROCESOS_IDOriginalDbColumnName(){
				
					return "PROCESOS_ID";
				
				}

				
			    public String MOTIVO;

				public String getMOTIVO () {
					return this.MOTIVO;
				}

				public Boolean MOTIVOIsNullable(){
				    return true;
				}
				public Boolean MOTIVOIsKey(){
				    return false;
				}
				public Integer MOTIVOLength(){
				    return 500;
				}
				public Integer MOTIVOPrecision(){
				    return 0;
				}
				public String MOTIVODefault(){
				
					return null;
				
				}
				public String MOTIVOComment(){
				
				    return "Motivo de la edici\u00F3n";
				
				}
				public String MOTIVOPattern(){
				
					return "";
				
				}
				public String MOTIVOOriginalDbColumnName(){
				
					return "MOTIVO";
				
				}

				
			    public int RNOVEDADES_ID;

				public int getRNOVEDADES_ID () {
					return this.RNOVEDADES_ID;
				}

				public Boolean RNOVEDADES_IDIsNullable(){
				    return false;
				}
				public Boolean RNOVEDADES_IDIsKey(){
				    return false;
				}
				public Integer RNOVEDADES_IDLength(){
				    return 0;
				}
				public Integer RNOVEDADES_IDPrecision(){
				    return null;
				}
				public String RNOVEDADES_IDDefault(){
				
					return "";
				
				}
				public String RNOVEDADES_IDComment(){
				
				    return "FK - AFI_NOVEDADES";
				
				}
				public String RNOVEDADES_IDPattern(){
				
					return "";
				
				}
				public String RNOVEDADES_IDOriginalDbColumnName(){
				
					return "RNOVEDADES_ID";
				
				}

				
			    public String VANTERIOR;

				public String getVANTERIOR () {
					return this.VANTERIOR;
				}

				public Boolean VANTERIORIsNullable(){
				    return true;
				}
				public Boolean VANTERIORIsKey(){
				    return false;
				}
				public Integer VANTERIORLength(){
				    return 2000;
				}
				public Integer VANTERIORPrecision(){
				    return 0;
				}
				public String VANTERIORDefault(){
				
					return null;
				
				}
				public String VANTERIORComment(){
				
				    return "Valor anterior";
				
				}
				public String VANTERIORPattern(){
				
					return "";
				
				}
				public String VANTERIOROriginalDbColumnName(){
				
					return "VANTERIOR";
				
				}

				
			    public String VACTUAL;

				public String getVACTUAL () {
					return this.VACTUAL;
				}

				public Boolean VACTUALIsNullable(){
				    return true;
				}
				public Boolean VACTUALIsKey(){
				    return false;
				}
				public Integer VACTUALLength(){
				    return 2000;
				}
				public Integer VACTUALPrecision(){
				    return 0;
				}
				public String VACTUALDefault(){
				
					return null;
				
				}
				public String VACTUALComment(){
				
				    return "Valor actual";
				
				}
				public String VACTUALPattern(){
				
					return "";
				
				}
				public String VACTUALOriginalDbColumnName(){
				
					return "VACTUAL";
				
				}

				
			    public String CAMPO;

				public String getCAMPO () {
					return this.CAMPO;
				}

				public Boolean CAMPOIsNullable(){
				    return true;
				}
				public Boolean CAMPOIsKey(){
				    return false;
				}
				public Integer CAMPOLength(){
				    return 150;
				}
				public Integer CAMPOPrecision(){
				    return 0;
				}
				public String CAMPODefault(){
				
					return null;
				
				}
				public String CAMPOComment(){
				
				    return "Campo afectado por el historico";
				
				}
				public String CAMPOPattern(){
				
					return "";
				
				}
				public String CAMPOOriginalDbColumnName(){
				
					return "CAMPO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.PROCESOS_ID = dis.readInt();
					
					this.MOTIVO = readString(dis);
					
			        this.RNOVEDADES_ID = dis.readInt();
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.CAMPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.PROCESOS_ID = dis.readInt();
					
					this.MOTIVO = readString(dis);
					
			        this.RNOVEDADES_ID = dis.readInt();
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.CAMPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESOS_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// int
				
		            	dos.writeInt(this.RNOVEDADES_ID);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.CAMPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESOS_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// int
				
		            	dos.writeInt(this.RNOVEDADES_ID);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.CAMPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",PROCESOS_ID="+String.valueOf(PROCESOS_ID));
		sb.append(",MOTIVO="+MOTIVO);
		sb.append(",RNOVEDADES_ID="+String.valueOf(RNOVEDADES_ID));
		sb.append(",VANTERIOR="+VANTERIOR);
		sb.append(",VACTUAL="+VACTUAL);
		sb.append(",CAMPO="+CAMPO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(CAMBIO_PRIMER_APELLIDOStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class CAMBIO_SEGUNDO_APELLIDOStruct implements routines.system.IPersistableRow<CAMBIO_SEGUNDO_APELLIDOStruct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public int AFILIADOS_ID;

				public int getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 0;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return null;
				}
				public String AFILIADOS_IDDefault(){
				
					return "";
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "FK - GEN_AFILIADOS";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public int PROCESOS_ID;

				public int getPROCESOS_ID () {
					return this.PROCESOS_ID;
				}

				public Boolean PROCESOS_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESOS_IDIsKey(){
				    return false;
				}
				public Integer PROCESOS_IDLength(){
				    return 0;
				}
				public Integer PROCESOS_IDPrecision(){
				    return null;
				}
				public String PROCESOS_IDDefault(){
				
					return "";
				
				}
				public String PROCESOS_IDComment(){
				
				    return "FK - AFI_PROCESOS";
				
				}
				public String PROCESOS_IDPattern(){
				
					return "";
				
				}
				public String PROCESOS_IDOriginalDbColumnName(){
				
					return "PROCESOS_ID";
				
				}

				
			    public String MOTIVO;

				public String getMOTIVO () {
					return this.MOTIVO;
				}

				public Boolean MOTIVOIsNullable(){
				    return true;
				}
				public Boolean MOTIVOIsKey(){
				    return false;
				}
				public Integer MOTIVOLength(){
				    return 500;
				}
				public Integer MOTIVOPrecision(){
				    return 0;
				}
				public String MOTIVODefault(){
				
					return null;
				
				}
				public String MOTIVOComment(){
				
				    return "Motivo de la edici\u00F3n";
				
				}
				public String MOTIVOPattern(){
				
					return "";
				
				}
				public String MOTIVOOriginalDbColumnName(){
				
					return "MOTIVO";
				
				}

				
			    public int RNOVEDADES_ID;

				public int getRNOVEDADES_ID () {
					return this.RNOVEDADES_ID;
				}

				public Boolean RNOVEDADES_IDIsNullable(){
				    return false;
				}
				public Boolean RNOVEDADES_IDIsKey(){
				    return false;
				}
				public Integer RNOVEDADES_IDLength(){
				    return 0;
				}
				public Integer RNOVEDADES_IDPrecision(){
				    return null;
				}
				public String RNOVEDADES_IDDefault(){
				
					return "";
				
				}
				public String RNOVEDADES_IDComment(){
				
				    return "FK - AFI_NOVEDADES";
				
				}
				public String RNOVEDADES_IDPattern(){
				
					return "";
				
				}
				public String RNOVEDADES_IDOriginalDbColumnName(){
				
					return "RNOVEDADES_ID";
				
				}

				
			    public String VANTERIOR;

				public String getVANTERIOR () {
					return this.VANTERIOR;
				}

				public Boolean VANTERIORIsNullable(){
				    return true;
				}
				public Boolean VANTERIORIsKey(){
				    return false;
				}
				public Integer VANTERIORLength(){
				    return 2000;
				}
				public Integer VANTERIORPrecision(){
				    return 0;
				}
				public String VANTERIORDefault(){
				
					return null;
				
				}
				public String VANTERIORComment(){
				
				    return "Valor anterior";
				
				}
				public String VANTERIORPattern(){
				
					return "";
				
				}
				public String VANTERIOROriginalDbColumnName(){
				
					return "VANTERIOR";
				
				}

				
			    public String VACTUAL;

				public String getVACTUAL () {
					return this.VACTUAL;
				}

				public Boolean VACTUALIsNullable(){
				    return true;
				}
				public Boolean VACTUALIsKey(){
				    return false;
				}
				public Integer VACTUALLength(){
				    return 2000;
				}
				public Integer VACTUALPrecision(){
				    return 0;
				}
				public String VACTUALDefault(){
				
					return null;
				
				}
				public String VACTUALComment(){
				
				    return "Valor actual";
				
				}
				public String VACTUALPattern(){
				
					return "";
				
				}
				public String VACTUALOriginalDbColumnName(){
				
					return "VACTUAL";
				
				}

				
			    public String CAMPO;

				public String getCAMPO () {
					return this.CAMPO;
				}

				public Boolean CAMPOIsNullable(){
				    return true;
				}
				public Boolean CAMPOIsKey(){
				    return false;
				}
				public Integer CAMPOLength(){
				    return 150;
				}
				public Integer CAMPOPrecision(){
				    return 0;
				}
				public String CAMPODefault(){
				
					return null;
				
				}
				public String CAMPOComment(){
				
				    return "Campo afectado por el historico";
				
				}
				public String CAMPOPattern(){
				
					return "";
				
				}
				public String CAMPOOriginalDbColumnName(){
				
					return "CAMPO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.PROCESOS_ID = dis.readInt();
					
					this.MOTIVO = readString(dis);
					
			        this.RNOVEDADES_ID = dis.readInt();
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.CAMPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.PROCESOS_ID = dis.readInt();
					
					this.MOTIVO = readString(dis);
					
			        this.RNOVEDADES_ID = dis.readInt();
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.CAMPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESOS_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// int
				
		            	dos.writeInt(this.RNOVEDADES_ID);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.CAMPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESOS_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// int
				
		            	dos.writeInt(this.RNOVEDADES_ID);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.CAMPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",PROCESOS_ID="+String.valueOf(PROCESOS_ID));
		sb.append(",MOTIVO="+MOTIVO);
		sb.append(",RNOVEDADES_ID="+String.valueOf(RNOVEDADES_ID));
		sb.append(",VANTERIOR="+VANTERIOR);
		sb.append(",VACTUAL="+VACTUAL);
		sb.append(",CAMPO="+CAMPO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(CAMBIO_SEGUNDO_APELLIDOStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class CAMBIO_FECHA_NACIMIENTOStruct implements routines.system.IPersistableRow<CAMBIO_FECHA_NACIMIENTOStruct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public int AFILIADOS_ID;

				public int getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 0;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return null;
				}
				public String AFILIADOS_IDDefault(){
				
					return "";
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "FK - GEN_AFILIADOS";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public int PROCESOS_ID;

				public int getPROCESOS_ID () {
					return this.PROCESOS_ID;
				}

				public Boolean PROCESOS_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESOS_IDIsKey(){
				    return false;
				}
				public Integer PROCESOS_IDLength(){
				    return 0;
				}
				public Integer PROCESOS_IDPrecision(){
				    return null;
				}
				public String PROCESOS_IDDefault(){
				
					return "";
				
				}
				public String PROCESOS_IDComment(){
				
				    return "FK - AFI_PROCESOS";
				
				}
				public String PROCESOS_IDPattern(){
				
					return "";
				
				}
				public String PROCESOS_IDOriginalDbColumnName(){
				
					return "PROCESOS_ID";
				
				}

				
			    public String MOTIVO;

				public String getMOTIVO () {
					return this.MOTIVO;
				}

				public Boolean MOTIVOIsNullable(){
				    return true;
				}
				public Boolean MOTIVOIsKey(){
				    return false;
				}
				public Integer MOTIVOLength(){
				    return 500;
				}
				public Integer MOTIVOPrecision(){
				    return 0;
				}
				public String MOTIVODefault(){
				
					return null;
				
				}
				public String MOTIVOComment(){
				
				    return "Motivo de la edici\u00F3n";
				
				}
				public String MOTIVOPattern(){
				
					return "";
				
				}
				public String MOTIVOOriginalDbColumnName(){
				
					return "MOTIVO";
				
				}

				
			    public int RNOVEDADES_ID;

				public int getRNOVEDADES_ID () {
					return this.RNOVEDADES_ID;
				}

				public Boolean RNOVEDADES_IDIsNullable(){
				    return false;
				}
				public Boolean RNOVEDADES_IDIsKey(){
				    return false;
				}
				public Integer RNOVEDADES_IDLength(){
				    return 0;
				}
				public Integer RNOVEDADES_IDPrecision(){
				    return null;
				}
				public String RNOVEDADES_IDDefault(){
				
					return "";
				
				}
				public String RNOVEDADES_IDComment(){
				
				    return "FK - AFI_NOVEDADES";
				
				}
				public String RNOVEDADES_IDPattern(){
				
					return "";
				
				}
				public String RNOVEDADES_IDOriginalDbColumnName(){
				
					return "RNOVEDADES_ID";
				
				}

				
			    public String VANTERIOR;

				public String getVANTERIOR () {
					return this.VANTERIOR;
				}

				public Boolean VANTERIORIsNullable(){
				    return true;
				}
				public Boolean VANTERIORIsKey(){
				    return false;
				}
				public Integer VANTERIORLength(){
				    return 2000;
				}
				public Integer VANTERIORPrecision(){
				    return 0;
				}
				public String VANTERIORDefault(){
				
					return null;
				
				}
				public String VANTERIORComment(){
				
				    return "Valor anterior";
				
				}
				public String VANTERIORPattern(){
				
					return "";
				
				}
				public String VANTERIOROriginalDbColumnName(){
				
					return "VANTERIOR";
				
				}

				
			    public String VACTUAL;

				public String getVACTUAL () {
					return this.VACTUAL;
				}

				public Boolean VACTUALIsNullable(){
				    return true;
				}
				public Boolean VACTUALIsKey(){
				    return false;
				}
				public Integer VACTUALLength(){
				    return 2000;
				}
				public Integer VACTUALPrecision(){
				    return 0;
				}
				public String VACTUALDefault(){
				
					return null;
				
				}
				public String VACTUALComment(){
				
				    return "Valor actual";
				
				}
				public String VACTUALPattern(){
				
					return "";
				
				}
				public String VACTUALOriginalDbColumnName(){
				
					return "VACTUAL";
				
				}

				
			    public String CAMPO;

				public String getCAMPO () {
					return this.CAMPO;
				}

				public Boolean CAMPOIsNullable(){
				    return true;
				}
				public Boolean CAMPOIsKey(){
				    return false;
				}
				public Integer CAMPOLength(){
				    return 150;
				}
				public Integer CAMPOPrecision(){
				    return 0;
				}
				public String CAMPODefault(){
				
					return null;
				
				}
				public String CAMPOComment(){
				
				    return "Campo afectado por el historico";
				
				}
				public String CAMPOPattern(){
				
					return "";
				
				}
				public String CAMPOOriginalDbColumnName(){
				
					return "CAMPO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.PROCESOS_ID = dis.readInt();
					
					this.MOTIVO = readString(dis);
					
			        this.RNOVEDADES_ID = dis.readInt();
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.CAMPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.PROCESOS_ID = dis.readInt();
					
					this.MOTIVO = readString(dis);
					
			        this.RNOVEDADES_ID = dis.readInt();
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.CAMPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESOS_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// int
				
		            	dos.writeInt(this.RNOVEDADES_ID);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.CAMPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESOS_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// int
				
		            	dos.writeInt(this.RNOVEDADES_ID);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.CAMPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",PROCESOS_ID="+String.valueOf(PROCESOS_ID));
		sb.append(",MOTIVO="+MOTIVO);
		sb.append(",RNOVEDADES_ID="+String.valueOf(RNOVEDADES_ID));
		sb.append(",VANTERIOR="+VANTERIOR);
		sb.append(",VACTUAL="+VACTUAL);
		sb.append(",CAMPO="+CAMPO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(CAMBIO_FECHA_NACIMIENTOStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class CAMBIO_SEXO_IDStruct implements routines.system.IPersistableRow<CAMBIO_SEXO_IDStruct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public int AFILIADOS_ID;

				public int getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 0;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return null;
				}
				public String AFILIADOS_IDDefault(){
				
					return "";
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "FK - GEN_AFILIADOS";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public int PROCESOS_ID;

				public int getPROCESOS_ID () {
					return this.PROCESOS_ID;
				}

				public Boolean PROCESOS_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESOS_IDIsKey(){
				    return false;
				}
				public Integer PROCESOS_IDLength(){
				    return 0;
				}
				public Integer PROCESOS_IDPrecision(){
				    return null;
				}
				public String PROCESOS_IDDefault(){
				
					return "";
				
				}
				public String PROCESOS_IDComment(){
				
				    return "FK - AFI_PROCESOS";
				
				}
				public String PROCESOS_IDPattern(){
				
					return "";
				
				}
				public String PROCESOS_IDOriginalDbColumnName(){
				
					return "PROCESOS_ID";
				
				}

				
			    public String MOTIVO;

				public String getMOTIVO () {
					return this.MOTIVO;
				}

				public Boolean MOTIVOIsNullable(){
				    return true;
				}
				public Boolean MOTIVOIsKey(){
				    return false;
				}
				public Integer MOTIVOLength(){
				    return 500;
				}
				public Integer MOTIVOPrecision(){
				    return 0;
				}
				public String MOTIVODefault(){
				
					return null;
				
				}
				public String MOTIVOComment(){
				
				    return "Motivo de la edici\u00F3n";
				
				}
				public String MOTIVOPattern(){
				
					return "";
				
				}
				public String MOTIVOOriginalDbColumnName(){
				
					return "MOTIVO";
				
				}

				
			    public int RNOVEDADES_ID;

				public int getRNOVEDADES_ID () {
					return this.RNOVEDADES_ID;
				}

				public Boolean RNOVEDADES_IDIsNullable(){
				    return false;
				}
				public Boolean RNOVEDADES_IDIsKey(){
				    return false;
				}
				public Integer RNOVEDADES_IDLength(){
				    return 0;
				}
				public Integer RNOVEDADES_IDPrecision(){
				    return null;
				}
				public String RNOVEDADES_IDDefault(){
				
					return "";
				
				}
				public String RNOVEDADES_IDComment(){
				
				    return "FK - AFI_NOVEDADES";
				
				}
				public String RNOVEDADES_IDPattern(){
				
					return "";
				
				}
				public String RNOVEDADES_IDOriginalDbColumnName(){
				
					return "RNOVEDADES_ID";
				
				}

				
			    public String VANTERIOR;

				public String getVANTERIOR () {
					return this.VANTERIOR;
				}

				public Boolean VANTERIORIsNullable(){
				    return true;
				}
				public Boolean VANTERIORIsKey(){
				    return false;
				}
				public Integer VANTERIORLength(){
				    return 2000;
				}
				public Integer VANTERIORPrecision(){
				    return 0;
				}
				public String VANTERIORDefault(){
				
					return null;
				
				}
				public String VANTERIORComment(){
				
				    return "Valor anterior";
				
				}
				public String VANTERIORPattern(){
				
					return "";
				
				}
				public String VANTERIOROriginalDbColumnName(){
				
					return "VANTERIOR";
				
				}

				
			    public String VACTUAL;

				public String getVACTUAL () {
					return this.VACTUAL;
				}

				public Boolean VACTUALIsNullable(){
				    return true;
				}
				public Boolean VACTUALIsKey(){
				    return false;
				}
				public Integer VACTUALLength(){
				    return 2000;
				}
				public Integer VACTUALPrecision(){
				    return 0;
				}
				public String VACTUALDefault(){
				
					return null;
				
				}
				public String VACTUALComment(){
				
				    return "Valor actual";
				
				}
				public String VACTUALPattern(){
				
					return "";
				
				}
				public String VACTUALOriginalDbColumnName(){
				
					return "VACTUAL";
				
				}

				
			    public String CAMPO;

				public String getCAMPO () {
					return this.CAMPO;
				}

				public Boolean CAMPOIsNullable(){
				    return true;
				}
				public Boolean CAMPOIsKey(){
				    return false;
				}
				public Integer CAMPOLength(){
				    return 150;
				}
				public Integer CAMPOPrecision(){
				    return 0;
				}
				public String CAMPODefault(){
				
					return null;
				
				}
				public String CAMPOComment(){
				
				    return "Campo afectado por el historico";
				
				}
				public String CAMPOPattern(){
				
					return "";
				
				}
				public String CAMPOOriginalDbColumnName(){
				
					return "CAMPO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.PROCESOS_ID = dis.readInt();
					
					this.MOTIVO = readString(dis);
					
			        this.RNOVEDADES_ID = dis.readInt();
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.CAMPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.PROCESOS_ID = dis.readInt();
					
					this.MOTIVO = readString(dis);
					
			        this.RNOVEDADES_ID = dis.readInt();
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.CAMPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESOS_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// int
				
		            	dos.writeInt(this.RNOVEDADES_ID);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.CAMPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESOS_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// int
				
		            	dos.writeInt(this.RNOVEDADES_ID);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.CAMPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",PROCESOS_ID="+String.valueOf(PROCESOS_ID));
		sb.append(",MOTIVO="+MOTIVO);
		sb.append(",RNOVEDADES_ID="+String.valueOf(RNOVEDADES_ID));
		sb.append(",VANTERIOR="+VANTERIOR);
		sb.append(",VACTUAL="+VACTUAL);
		sb.append(",CAMPO="+CAMPO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(CAMBIO_SEXO_IDStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class CAMBIO_DIRECCIONStruct implements routines.system.IPersistableRow<CAMBIO_DIRECCIONStruct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public int AFILIADOS_ID;

				public int getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 0;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return null;
				}
				public String AFILIADOS_IDDefault(){
				
					return "";
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "FK - GEN_AFILIADOS";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public int PROCESOS_ID;

				public int getPROCESOS_ID () {
					return this.PROCESOS_ID;
				}

				public Boolean PROCESOS_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESOS_IDIsKey(){
				    return false;
				}
				public Integer PROCESOS_IDLength(){
				    return 0;
				}
				public Integer PROCESOS_IDPrecision(){
				    return null;
				}
				public String PROCESOS_IDDefault(){
				
					return "";
				
				}
				public String PROCESOS_IDComment(){
				
				    return "FK - AFI_PROCESOS";
				
				}
				public String PROCESOS_IDPattern(){
				
					return "";
				
				}
				public String PROCESOS_IDOriginalDbColumnName(){
				
					return "PROCESOS_ID";
				
				}

				
			    public String MOTIVO;

				public String getMOTIVO () {
					return this.MOTIVO;
				}

				public Boolean MOTIVOIsNullable(){
				    return true;
				}
				public Boolean MOTIVOIsKey(){
				    return false;
				}
				public Integer MOTIVOLength(){
				    return 500;
				}
				public Integer MOTIVOPrecision(){
				    return 0;
				}
				public String MOTIVODefault(){
				
					return null;
				
				}
				public String MOTIVOComment(){
				
				    return "Motivo de la edici\u00F3n";
				
				}
				public String MOTIVOPattern(){
				
					return "";
				
				}
				public String MOTIVOOriginalDbColumnName(){
				
					return "MOTIVO";
				
				}

				
			    public int RNOVEDADES_ID;

				public int getRNOVEDADES_ID () {
					return this.RNOVEDADES_ID;
				}

				public Boolean RNOVEDADES_IDIsNullable(){
				    return false;
				}
				public Boolean RNOVEDADES_IDIsKey(){
				    return false;
				}
				public Integer RNOVEDADES_IDLength(){
				    return 0;
				}
				public Integer RNOVEDADES_IDPrecision(){
				    return null;
				}
				public String RNOVEDADES_IDDefault(){
				
					return "";
				
				}
				public String RNOVEDADES_IDComment(){
				
				    return "FK - AFI_NOVEDADES";
				
				}
				public String RNOVEDADES_IDPattern(){
				
					return "";
				
				}
				public String RNOVEDADES_IDOriginalDbColumnName(){
				
					return "RNOVEDADES_ID";
				
				}

				
			    public String VANTERIOR;

				public String getVANTERIOR () {
					return this.VANTERIOR;
				}

				public Boolean VANTERIORIsNullable(){
				    return true;
				}
				public Boolean VANTERIORIsKey(){
				    return false;
				}
				public Integer VANTERIORLength(){
				    return 2000;
				}
				public Integer VANTERIORPrecision(){
				    return 0;
				}
				public String VANTERIORDefault(){
				
					return null;
				
				}
				public String VANTERIORComment(){
				
				    return "Valor anterior";
				
				}
				public String VANTERIORPattern(){
				
					return "";
				
				}
				public String VANTERIOROriginalDbColumnName(){
				
					return "VANTERIOR";
				
				}

				
			    public String VACTUAL;

				public String getVACTUAL () {
					return this.VACTUAL;
				}

				public Boolean VACTUALIsNullable(){
				    return true;
				}
				public Boolean VACTUALIsKey(){
				    return false;
				}
				public Integer VACTUALLength(){
				    return 2000;
				}
				public Integer VACTUALPrecision(){
				    return 0;
				}
				public String VACTUALDefault(){
				
					return null;
				
				}
				public String VACTUALComment(){
				
				    return "Valor actual";
				
				}
				public String VACTUALPattern(){
				
					return "";
				
				}
				public String VACTUALOriginalDbColumnName(){
				
					return "VACTUAL";
				
				}

				
			    public String CAMPO;

				public String getCAMPO () {
					return this.CAMPO;
				}

				public Boolean CAMPOIsNullable(){
				    return true;
				}
				public Boolean CAMPOIsKey(){
				    return false;
				}
				public Integer CAMPOLength(){
				    return 150;
				}
				public Integer CAMPOPrecision(){
				    return 0;
				}
				public String CAMPODefault(){
				
					return null;
				
				}
				public String CAMPOComment(){
				
				    return "Campo afectado por el historico";
				
				}
				public String CAMPOPattern(){
				
					return "";
				
				}
				public String CAMPOOriginalDbColumnName(){
				
					return "CAMPO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.PROCESOS_ID = dis.readInt();
					
					this.MOTIVO = readString(dis);
					
			        this.RNOVEDADES_ID = dis.readInt();
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.CAMPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.PROCESOS_ID = dis.readInt();
					
					this.MOTIVO = readString(dis);
					
			        this.RNOVEDADES_ID = dis.readInt();
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.CAMPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESOS_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// int
				
		            	dos.writeInt(this.RNOVEDADES_ID);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.CAMPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESOS_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// int
				
		            	dos.writeInt(this.RNOVEDADES_ID);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.CAMPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",PROCESOS_ID="+String.valueOf(PROCESOS_ID));
		sb.append(",MOTIVO="+MOTIVO);
		sb.append(",RNOVEDADES_ID="+String.valueOf(RNOVEDADES_ID));
		sb.append(",VANTERIOR="+VANTERIOR);
		sb.append(",VACTUAL="+VACTUAL);
		sb.append(",CAMPO="+CAMPO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(CAMBIO_DIRECCIONStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class CAMBIO_LUGAR_RESIDENCIAStruct implements routines.system.IPersistableRow<CAMBIO_LUGAR_RESIDENCIAStruct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public int AFILIADOS_ID;

				public int getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 0;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return null;
				}
				public String AFILIADOS_IDDefault(){
				
					return "";
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "FK - GEN_AFILIADOS";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public int PROCESOS_ID;

				public int getPROCESOS_ID () {
					return this.PROCESOS_ID;
				}

				public Boolean PROCESOS_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESOS_IDIsKey(){
				    return false;
				}
				public Integer PROCESOS_IDLength(){
				    return 0;
				}
				public Integer PROCESOS_IDPrecision(){
				    return null;
				}
				public String PROCESOS_IDDefault(){
				
					return "";
				
				}
				public String PROCESOS_IDComment(){
				
				    return "FK - AFI_PROCESOS";
				
				}
				public String PROCESOS_IDPattern(){
				
					return "";
				
				}
				public String PROCESOS_IDOriginalDbColumnName(){
				
					return "PROCESOS_ID";
				
				}

				
			    public String MOTIVO;

				public String getMOTIVO () {
					return this.MOTIVO;
				}

				public Boolean MOTIVOIsNullable(){
				    return true;
				}
				public Boolean MOTIVOIsKey(){
				    return false;
				}
				public Integer MOTIVOLength(){
				    return 500;
				}
				public Integer MOTIVOPrecision(){
				    return 0;
				}
				public String MOTIVODefault(){
				
					return null;
				
				}
				public String MOTIVOComment(){
				
				    return "Motivo de la edici\u00F3n";
				
				}
				public String MOTIVOPattern(){
				
					return "";
				
				}
				public String MOTIVOOriginalDbColumnName(){
				
					return "MOTIVO";
				
				}

				
			    public int RNOVEDADES_ID;

				public int getRNOVEDADES_ID () {
					return this.RNOVEDADES_ID;
				}

				public Boolean RNOVEDADES_IDIsNullable(){
				    return false;
				}
				public Boolean RNOVEDADES_IDIsKey(){
				    return false;
				}
				public Integer RNOVEDADES_IDLength(){
				    return 0;
				}
				public Integer RNOVEDADES_IDPrecision(){
				    return null;
				}
				public String RNOVEDADES_IDDefault(){
				
					return "";
				
				}
				public String RNOVEDADES_IDComment(){
				
				    return "FK - AFI_NOVEDADES";
				
				}
				public String RNOVEDADES_IDPattern(){
				
					return "";
				
				}
				public String RNOVEDADES_IDOriginalDbColumnName(){
				
					return "RNOVEDADES_ID";
				
				}

				
			    public String VANTERIOR;

				public String getVANTERIOR () {
					return this.VANTERIOR;
				}

				public Boolean VANTERIORIsNullable(){
				    return true;
				}
				public Boolean VANTERIORIsKey(){
				    return false;
				}
				public Integer VANTERIORLength(){
				    return 2000;
				}
				public Integer VANTERIORPrecision(){
				    return 0;
				}
				public String VANTERIORDefault(){
				
					return null;
				
				}
				public String VANTERIORComment(){
				
				    return "Valor anterior";
				
				}
				public String VANTERIORPattern(){
				
					return "";
				
				}
				public String VANTERIOROriginalDbColumnName(){
				
					return "VANTERIOR";
				
				}

				
			    public String VACTUAL;

				public String getVACTUAL () {
					return this.VACTUAL;
				}

				public Boolean VACTUALIsNullable(){
				    return true;
				}
				public Boolean VACTUALIsKey(){
				    return false;
				}
				public Integer VACTUALLength(){
				    return 2000;
				}
				public Integer VACTUALPrecision(){
				    return 0;
				}
				public String VACTUALDefault(){
				
					return null;
				
				}
				public String VACTUALComment(){
				
				    return "Valor actual";
				
				}
				public String VACTUALPattern(){
				
					return "";
				
				}
				public String VACTUALOriginalDbColumnName(){
				
					return "VACTUAL";
				
				}

				
			    public String CAMPO;

				public String getCAMPO () {
					return this.CAMPO;
				}

				public Boolean CAMPOIsNullable(){
				    return true;
				}
				public Boolean CAMPOIsKey(){
				    return false;
				}
				public Integer CAMPOLength(){
				    return 150;
				}
				public Integer CAMPOPrecision(){
				    return 0;
				}
				public String CAMPODefault(){
				
					return null;
				
				}
				public String CAMPOComment(){
				
				    return "Campo afectado por el historico";
				
				}
				public String CAMPOPattern(){
				
					return "";
				
				}
				public String CAMPOOriginalDbColumnName(){
				
					return "CAMPO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.PROCESOS_ID = dis.readInt();
					
					this.MOTIVO = readString(dis);
					
			        this.RNOVEDADES_ID = dis.readInt();
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.CAMPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.PROCESOS_ID = dis.readInt();
					
					this.MOTIVO = readString(dis);
					
			        this.RNOVEDADES_ID = dis.readInt();
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.CAMPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESOS_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// int
				
		            	dos.writeInt(this.RNOVEDADES_ID);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.CAMPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESOS_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// int
				
		            	dos.writeInt(this.RNOVEDADES_ID);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.CAMPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",PROCESOS_ID="+String.valueOf(PROCESOS_ID));
		sb.append(",MOTIVO="+MOTIVO);
		sb.append(",RNOVEDADES_ID="+String.valueOf(RNOVEDADES_ID));
		sb.append(",VANTERIOR="+VANTERIOR);
		sb.append(",VACTUAL="+VACTUAL);
		sb.append(",CAMPO="+CAMPO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(CAMBIO_LUGAR_RESIDENCIAStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class CAMBIO_ESMADSCRITOStruct implements routines.system.IPersistableRow<CAMBIO_ESMADSCRITOStruct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public int AFILIADOS_ID;

				public int getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 0;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return null;
				}
				public String AFILIADOS_IDDefault(){
				
					return "";
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "FK - GEN_AFILIADOS";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public int PROCESOS_ID;

				public int getPROCESOS_ID () {
					return this.PROCESOS_ID;
				}

				public Boolean PROCESOS_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESOS_IDIsKey(){
				    return false;
				}
				public Integer PROCESOS_IDLength(){
				    return 0;
				}
				public Integer PROCESOS_IDPrecision(){
				    return null;
				}
				public String PROCESOS_IDDefault(){
				
					return "";
				
				}
				public String PROCESOS_IDComment(){
				
				    return "FK - AFI_PROCESOS";
				
				}
				public String PROCESOS_IDPattern(){
				
					return "";
				
				}
				public String PROCESOS_IDOriginalDbColumnName(){
				
					return "PROCESOS_ID";
				
				}

				
			    public String MOTIVO;

				public String getMOTIVO () {
					return this.MOTIVO;
				}

				public Boolean MOTIVOIsNullable(){
				    return true;
				}
				public Boolean MOTIVOIsKey(){
				    return false;
				}
				public Integer MOTIVOLength(){
				    return 500;
				}
				public Integer MOTIVOPrecision(){
				    return 0;
				}
				public String MOTIVODefault(){
				
					return null;
				
				}
				public String MOTIVOComment(){
				
				    return "Motivo de la edici\u00F3n";
				
				}
				public String MOTIVOPattern(){
				
					return "";
				
				}
				public String MOTIVOOriginalDbColumnName(){
				
					return "MOTIVO";
				
				}

				
			    public int RNOVEDADES_ID;

				public int getRNOVEDADES_ID () {
					return this.RNOVEDADES_ID;
				}

				public Boolean RNOVEDADES_IDIsNullable(){
				    return false;
				}
				public Boolean RNOVEDADES_IDIsKey(){
				    return false;
				}
				public Integer RNOVEDADES_IDLength(){
				    return 0;
				}
				public Integer RNOVEDADES_IDPrecision(){
				    return null;
				}
				public String RNOVEDADES_IDDefault(){
				
					return "";
				
				}
				public String RNOVEDADES_IDComment(){
				
				    return "FK - AFI_NOVEDADES";
				
				}
				public String RNOVEDADES_IDPattern(){
				
					return "";
				
				}
				public String RNOVEDADES_IDOriginalDbColumnName(){
				
					return "RNOVEDADES_ID";
				
				}

				
			    public String VANTERIOR;

				public String getVANTERIOR () {
					return this.VANTERIOR;
				}

				public Boolean VANTERIORIsNullable(){
				    return true;
				}
				public Boolean VANTERIORIsKey(){
				    return false;
				}
				public Integer VANTERIORLength(){
				    return 2000;
				}
				public Integer VANTERIORPrecision(){
				    return 0;
				}
				public String VANTERIORDefault(){
				
					return null;
				
				}
				public String VANTERIORComment(){
				
				    return "Valor anterior";
				
				}
				public String VANTERIORPattern(){
				
					return "";
				
				}
				public String VANTERIOROriginalDbColumnName(){
				
					return "VANTERIOR";
				
				}

				
			    public String VACTUAL;

				public String getVACTUAL () {
					return this.VACTUAL;
				}

				public Boolean VACTUALIsNullable(){
				    return true;
				}
				public Boolean VACTUALIsKey(){
				    return false;
				}
				public Integer VACTUALLength(){
				    return 2000;
				}
				public Integer VACTUALPrecision(){
				    return 0;
				}
				public String VACTUALDefault(){
				
					return null;
				
				}
				public String VACTUALComment(){
				
				    return "Valor actual";
				
				}
				public String VACTUALPattern(){
				
					return "";
				
				}
				public String VACTUALOriginalDbColumnName(){
				
					return "VACTUAL";
				
				}

				
			    public String CAMPO;

				public String getCAMPO () {
					return this.CAMPO;
				}

				public Boolean CAMPOIsNullable(){
				    return true;
				}
				public Boolean CAMPOIsKey(){
				    return false;
				}
				public Integer CAMPOLength(){
				    return 150;
				}
				public Integer CAMPOPrecision(){
				    return 0;
				}
				public String CAMPODefault(){
				
					return null;
				
				}
				public String CAMPOComment(){
				
				    return "Campo afectado por el historico";
				
				}
				public String CAMPOPattern(){
				
					return "";
				
				}
				public String CAMPOOriginalDbColumnName(){
				
					return "CAMPO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.PROCESOS_ID = dis.readInt();
					
					this.MOTIVO = readString(dis);
					
			        this.RNOVEDADES_ID = dis.readInt();
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.CAMPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.PROCESOS_ID = dis.readInt();
					
					this.MOTIVO = readString(dis);
					
			        this.RNOVEDADES_ID = dis.readInt();
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.CAMPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESOS_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// int
				
		            	dos.writeInt(this.RNOVEDADES_ID);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.CAMPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESOS_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// int
				
		            	dos.writeInt(this.RNOVEDADES_ID);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.CAMPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",PROCESOS_ID="+String.valueOf(PROCESOS_ID));
		sb.append(",MOTIVO="+MOTIVO);
		sb.append(",RNOVEDADES_ID="+String.valueOf(RNOVEDADES_ID));
		sb.append(",VANTERIOR="+VANTERIOR);
		sb.append(",VACTUAL="+VACTUAL);
		sb.append(",CAMPO="+CAMPO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(CAMBIO_ESMADSCRITOStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class CAMBIO_ESTADOS_IDStruct implements routines.system.IPersistableRow<CAMBIO_ESTADOS_IDStruct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public int AFILIADOS_ID;

				public int getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 0;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return null;
				}
				public String AFILIADOS_IDDefault(){
				
					return "";
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "FK - GEN_AFILIADOS";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public int PROCESOS_ID;

				public int getPROCESOS_ID () {
					return this.PROCESOS_ID;
				}

				public Boolean PROCESOS_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESOS_IDIsKey(){
				    return false;
				}
				public Integer PROCESOS_IDLength(){
				    return 0;
				}
				public Integer PROCESOS_IDPrecision(){
				    return null;
				}
				public String PROCESOS_IDDefault(){
				
					return "";
				
				}
				public String PROCESOS_IDComment(){
				
				    return "FK - AFI_PROCESOS";
				
				}
				public String PROCESOS_IDPattern(){
				
					return "";
				
				}
				public String PROCESOS_IDOriginalDbColumnName(){
				
					return "PROCESOS_ID";
				
				}

				
			    public String MOTIVO;

				public String getMOTIVO () {
					return this.MOTIVO;
				}

				public Boolean MOTIVOIsNullable(){
				    return true;
				}
				public Boolean MOTIVOIsKey(){
				    return false;
				}
				public Integer MOTIVOLength(){
				    return 500;
				}
				public Integer MOTIVOPrecision(){
				    return 0;
				}
				public String MOTIVODefault(){
				
					return null;
				
				}
				public String MOTIVOComment(){
				
				    return "Motivo de la edici\u00F3n";
				
				}
				public String MOTIVOPattern(){
				
					return "";
				
				}
				public String MOTIVOOriginalDbColumnName(){
				
					return "MOTIVO";
				
				}

				
			    public int RNOVEDADES_ID;

				public int getRNOVEDADES_ID () {
					return this.RNOVEDADES_ID;
				}

				public Boolean RNOVEDADES_IDIsNullable(){
				    return false;
				}
				public Boolean RNOVEDADES_IDIsKey(){
				    return false;
				}
				public Integer RNOVEDADES_IDLength(){
				    return 0;
				}
				public Integer RNOVEDADES_IDPrecision(){
				    return null;
				}
				public String RNOVEDADES_IDDefault(){
				
					return "";
				
				}
				public String RNOVEDADES_IDComment(){
				
				    return "FK - AFI_NOVEDADES";
				
				}
				public String RNOVEDADES_IDPattern(){
				
					return "";
				
				}
				public String RNOVEDADES_IDOriginalDbColumnName(){
				
					return "RNOVEDADES_ID";
				
				}

				
			    public String VANTERIOR;

				public String getVANTERIOR () {
					return this.VANTERIOR;
				}

				public Boolean VANTERIORIsNullable(){
				    return true;
				}
				public Boolean VANTERIORIsKey(){
				    return false;
				}
				public Integer VANTERIORLength(){
				    return 2000;
				}
				public Integer VANTERIORPrecision(){
				    return 0;
				}
				public String VANTERIORDefault(){
				
					return null;
				
				}
				public String VANTERIORComment(){
				
				    return "Valor anterior";
				
				}
				public String VANTERIORPattern(){
				
					return "";
				
				}
				public String VANTERIOROriginalDbColumnName(){
				
					return "VANTERIOR";
				
				}

				
			    public String VACTUAL;

				public String getVACTUAL () {
					return this.VACTUAL;
				}

				public Boolean VACTUALIsNullable(){
				    return true;
				}
				public Boolean VACTUALIsKey(){
				    return false;
				}
				public Integer VACTUALLength(){
				    return 2000;
				}
				public Integer VACTUALPrecision(){
				    return 0;
				}
				public String VACTUALDefault(){
				
					return null;
				
				}
				public String VACTUALComment(){
				
				    return "Valor actual";
				
				}
				public String VACTUALPattern(){
				
					return "";
				
				}
				public String VACTUALOriginalDbColumnName(){
				
					return "VACTUAL";
				
				}

				
			    public String CAMPO;

				public String getCAMPO () {
					return this.CAMPO;
				}

				public Boolean CAMPOIsNullable(){
				    return true;
				}
				public Boolean CAMPOIsKey(){
				    return false;
				}
				public Integer CAMPOLength(){
				    return 150;
				}
				public Integer CAMPOPrecision(){
				    return 0;
				}
				public String CAMPODefault(){
				
					return null;
				
				}
				public String CAMPOComment(){
				
				    return "Campo afectado por el historico";
				
				}
				public String CAMPOPattern(){
				
					return "";
				
				}
				public String CAMPOOriginalDbColumnName(){
				
					return "CAMPO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.PROCESOS_ID = dis.readInt();
					
					this.MOTIVO = readString(dis);
					
			        this.RNOVEDADES_ID = dis.readInt();
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.CAMPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.PROCESOS_ID = dis.readInt();
					
					this.MOTIVO = readString(dis);
					
			        this.RNOVEDADES_ID = dis.readInt();
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.CAMPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESOS_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// int
				
		            	dos.writeInt(this.RNOVEDADES_ID);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.CAMPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESOS_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// int
				
		            	dos.writeInt(this.RNOVEDADES_ID);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.CAMPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",PROCESOS_ID="+String.valueOf(PROCESOS_ID));
		sb.append(",MOTIVO="+MOTIVO);
		sb.append(",RNOVEDADES_ID="+String.valueOf(RNOVEDADES_ID));
		sb.append(",VANTERIOR="+VANTERIOR);
		sb.append(",VACTUAL="+VACTUAL);
		sb.append(",CAMPO="+CAMPO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(CAMBIO_ESTADOS_IDStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class HESTADOSStruct implements routines.system.IPersistableRow<HESTADOSStruct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer USUARIOS_ID;

				public Integer getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return true;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 0;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "FK - GEN_USUARIOS";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public int AFILIADOS_ID;

				public int getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 0;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return null;
				}
				public String AFILIADOS_IDDefault(){
				
					return "";
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "FK - GEN_AFILIADOS";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public int ESTADOS_ID;

				public int getESTADOS_ID () {
					return this.ESTADOS_ID;
				}

				public Boolean ESTADOS_IDIsNullable(){
				    return false;
				}
				public Boolean ESTADOS_IDIsKey(){
				    return false;
				}
				public Integer ESTADOS_IDLength(){
				    return 0;
				}
				public Integer ESTADOS_IDPrecision(){
				    return null;
				}
				public String ESTADOS_IDDefault(){
				
					return "";
				
				}
				public String ESTADOS_IDComment(){
				
				    return "FK - AFI_ESTADOS";
				
				}
				public String ESTADOS_IDPattern(){
				
					return "";
				
				}
				public String ESTADOS_IDOriginalDbColumnName(){
				
					return "ESTADOS_ID";
				
				}

				
			    public Integer MOTIVOSESTADO_ID;

				public Integer getMOTIVOSESTADO_ID () {
					return this.MOTIVOSESTADO_ID;
				}

				public Boolean MOTIVOSESTADO_IDIsNullable(){
				    return true;
				}
				public Boolean MOTIVOSESTADO_IDIsKey(){
				    return false;
				}
				public Integer MOTIVOSESTADO_IDLength(){
				    return 0;
				}
				public Integer MOTIVOSESTADO_IDPrecision(){
				    return null;
				}
				public String MOTIVOSESTADO_IDDefault(){
				
					return "";
				
				}
				public String MOTIVOSESTADO_IDComment(){
				
				    return "FK - AFI_MOTIVOSESTADOS";
				
				}
				public String MOTIVOSESTADO_IDPattern(){
				
					return "";
				
				}
				public String MOTIVOSESTADO_IDOriginalDbColumnName(){
				
					return "MOTIVOSESTADO_ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return false;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 7;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "Fecha del cambio de estado";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.USUARIOS_ID = readInteger(dis);
					
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.ESTADOS_ID = dis.readInt();
					
						this.MOTIVOSESTADO_ID = readInteger(dis);
					
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.USUARIOS_ID = readInteger(dis);
					
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.ESTADOS_ID = dis.readInt();
					
						this.MOTIVOSESTADO_ID = readInteger(dis);
					
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.USUARIOS_ID,dos);
					
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.ESTADOS_ID);
					
					// Integer
				
						writeInteger(this.MOTIVOSESTADO_ID,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.USUARIOS_ID,dos);
					
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.ESTADOS_ID);
					
					// Integer
				
						writeInteger(this.MOTIVOSESTADO_ID,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",ESTADOS_ID="+String.valueOf(ESTADOS_ID));
		sb.append(",MOTIVOSESTADO_ID="+String.valueOf(MOTIVOSESTADO_ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(HESTADOSStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class ENTIDAD_APORTANTEStruct implements routines.system.IPersistableRow<ENTIDAD_APORTANTEStruct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "SALUDSIS\".\"ISEQ$$_100667\".nextval";
				
				}
				public String IDComment(){
				
				    return "PK-  Llave primaria";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public int AFILIADOS_ID;

				public int getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 0;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return null;
				}
				public String AFILIADOS_IDDefault(){
				
					return "";
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "FK - GEN_AFILIADOS (Llave foranea id del afiliado)";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public int ENTAPORTANTES_ID;

				public int getENTAPORTANTES_ID () {
					return this.ENTAPORTANTES_ID;
				}

				public Boolean ENTAPORTANTES_IDIsNullable(){
				    return false;
				}
				public Boolean ENTAPORTANTES_IDIsKey(){
				    return false;
				}
				public Integer ENTAPORTANTES_IDLength(){
				    return 0;
				}
				public Integer ENTAPORTANTES_IDPrecision(){
				    return null;
				}
				public String ENTAPORTANTES_IDDefault(){
				
					return "";
				
				}
				public String ENTAPORTANTES_IDComment(){
				
				    return "FK - GEN_ENTAPORTANTES (Llave foranea entidad aportantes)";
				
				}
				public String ENTAPORTANTES_IDPattern(){
				
					return "";
				
				}
				public String ENTAPORTANTES_IDOriginalDbColumnName(){
				
					return "ENTAPORTANTES_ID";
				
				}

				
			    public Integer GRDMILITARES_ID;

				public Integer getGRDMILITARES_ID () {
					return this.GRDMILITARES_ID;
				}

				public Boolean GRDMILITARES_IDIsNullable(){
				    return true;
				}
				public Boolean GRDMILITARES_IDIsKey(){
				    return false;
				}
				public Integer GRDMILITARES_IDLength(){
				    return 0;
				}
				public Integer GRDMILITARES_IDPrecision(){
				    return null;
				}
				public String GRDMILITARES_IDDefault(){
				
					return "";
				
				}
				public String GRDMILITARES_IDComment(){
				
				    return "FK - GEN_GRDMILITARES (Llave foranea Grados militares)";
				
				}
				public String GRDMILITARES_IDPattern(){
				
					return "";
				
				}
				public String GRDMILITARES_IDOriginalDbColumnName(){
				
					return "GRDMILITARES_ID";
				
				}

				
			    public Integer FUERZAS_ID;

				public Integer getFUERZAS_ID () {
					return this.FUERZAS_ID;
				}

				public Boolean FUERZAS_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZAS_IDIsKey(){
				    return false;
				}
				public Integer FUERZAS_IDLength(){
				    return 0;
				}
				public Integer FUERZAS_IDPrecision(){
				    return null;
				}
				public String FUERZAS_IDDefault(){
				
					return "";
				
				}
				public String FUERZAS_IDComment(){
				
				    return "FK - GEN_FUERZAS (Llave foranea fuerzas)";
				
				}
				public String FUERZAS_IDPattern(){
				
					return "";
				
				}
				public String FUERZAS_IDOriginalDbColumnName(){
				
					return "FUERZAS_ID";
				
				}

				
			    public Integer UMILITARES_ID;

				public Integer getUMILITARES_ID () {
					return this.UMILITARES_ID;
				}

				public Boolean UMILITARES_IDIsNullable(){
				    return true;
				}
				public Boolean UMILITARES_IDIsKey(){
				    return false;
				}
				public Integer UMILITARES_IDLength(){
				    return 0;
				}
				public Integer UMILITARES_IDPrecision(){
				    return null;
				}
				public String UMILITARES_IDDefault(){
				
					return "";
				
				}
				public String UMILITARES_IDComment(){
				
				    return "FK - GEN_UMILITARES (Llave forane fuerzas)";
				
				}
				public String UMILITARES_IDPattern(){
				
					return "";
				
				}
				public String UMILITARES_IDOriginalDbColumnName(){
				
					return "UMILITARES_ID";
				
				}

				
			    public int PRINCIPAL;

				public int getPRINCIPAL () {
					return this.PRINCIPAL;
				}

				public Boolean PRINCIPALIsNullable(){
				    return false;
				}
				public Boolean PRINCIPALIsKey(){
				    return false;
				}
				public Integer PRINCIPALLength(){
				    return 0;
				}
				public Integer PRINCIPALPrecision(){
				    return null;
				}
				public String PRINCIPALDefault(){
				
					return "2";
				
				}
				public String PRINCIPALComment(){
				
				    return "Es la entidad aportante principal (1 principal, 2 secundaria)";
				
				}
				public String PRINCIPALPattern(){
				
					return "";
				
				}
				public String PRINCIPALOriginalDbColumnName(){
				
					return "PRINCIPAL";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 8;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return "'Activo'";
				
				}
				public String ESTADOComment(){
				
				    return "Estado de la entidad aportante";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public Integer TVINCULACIONES_ID;

				public Integer getTVINCULACIONES_ID () {
					return this.TVINCULACIONES_ID;
				}

				public Boolean TVINCULACIONES_IDIsNullable(){
				    return true;
				}
				public Boolean TVINCULACIONES_IDIsKey(){
				    return false;
				}
				public Integer TVINCULACIONES_IDLength(){
				    return 0;
				}
				public Integer TVINCULACIONES_IDPrecision(){
				    return null;
				}
				public String TVINCULACIONES_IDDefault(){
				
					return "";
				
				}
				public String TVINCULACIONES_IDComment(){
				
				    return "FK - AFI_TVINCULACIONES (Llave forane tipo de vinculaciones)";
				
				}
				public String TVINCULACIONES_IDPattern(){
				
					return "";
				
				}
				public String TVINCULACIONES_IDOriginalDbColumnName(){
				
					return "TVINCULACIONES_ID";
				
				}

				
			    public java.util.Date FECHA_INGRESO;

				public java.util.Date getFECHA_INGRESO () {
					return this.FECHA_INGRESO;
				}

				public Boolean FECHA_INGRESOIsNullable(){
				    return true;
				}
				public Boolean FECHA_INGRESOIsKey(){
				    return false;
				}
				public Integer FECHA_INGRESOLength(){
				    return 7;
				}
				public Integer FECHA_INGRESOPrecision(){
				    return 0;
				}
				public String FECHA_INGRESODefault(){
				
					return null;
				
				}
				public String FECHA_INGRESOComment(){
				
				    return "Fecha de ingreso a la fuerza";
				
				}
				public String FECHA_INGRESOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_INGRESOOriginalDbColumnName(){
				
					return "FECHA_INGRESO";
				
				}

				
			    public Integer TREGIMEN_ID;

				public Integer getTREGIMEN_ID () {
					return this.TREGIMEN_ID;
				}

				public Boolean TREGIMEN_IDIsNullable(){
				    return true;
				}
				public Boolean TREGIMEN_IDIsKey(){
				    return false;
				}
				public Integer TREGIMEN_IDLength(){
				    return 0;
				}
				public Integer TREGIMEN_IDPrecision(){
				    return null;
				}
				public String TREGIMEN_IDDefault(){
				
					return "";
				
				}
				public String TREGIMEN_IDComment(){
				
				    return "Tipo de regimen";
				
				}
				public String TREGIMEN_IDPattern(){
				
					return "";
				
				}
				public String TREGIMEN_IDOriginalDbColumnName(){
				
					return "TREGIMEN_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ENTIDAD_APORTANTEStruct other = (ENTIDAD_APORTANTEStruct) obj;
		
						if (this.ID != other.ID)
							return false;
					

		return true;
    }

	public void copyDataTo(ENTIDAD_APORTANTEStruct other) {

		other.ID = this.ID;
	            other.AFILIADOS_ID = this.AFILIADOS_ID;
	            other.ENTAPORTANTES_ID = this.ENTAPORTANTES_ID;
	            other.GRDMILITARES_ID = this.GRDMILITARES_ID;
	            other.FUERZAS_ID = this.FUERZAS_ID;
	            other.UMILITARES_ID = this.UMILITARES_ID;
	            other.PRINCIPAL = this.PRINCIPAL;
	            other.ESTADO = this.ESTADO;
	            other.TVINCULACIONES_ID = this.TVINCULACIONES_ID;
	            other.FECHA_INGRESO = this.FECHA_INGRESO;
	            other.TREGIMEN_ID = this.TREGIMEN_ID;
	            
	}

	public void copyKeysDataTo(ENTIDAD_APORTANTEStruct other) {

		other.ID = this.ID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.ENTAPORTANTES_ID = dis.readInt();
					
						this.GRDMILITARES_ID = readInteger(dis);
					
						this.FUERZAS_ID = readInteger(dis);
					
						this.UMILITARES_ID = readInteger(dis);
					
			        this.PRINCIPAL = dis.readInt();
					
					this.ESTADO = readString(dis);
					
						this.TVINCULACIONES_ID = readInteger(dis);
					
					this.FECHA_INGRESO = readDate(dis);
					
						this.TREGIMEN_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.ENTAPORTANTES_ID = dis.readInt();
					
						this.GRDMILITARES_ID = readInteger(dis);
					
						this.FUERZAS_ID = readInteger(dis);
					
						this.UMILITARES_ID = readInteger(dis);
					
			        this.PRINCIPAL = dis.readInt();
					
					this.ESTADO = readString(dis);
					
						this.TVINCULACIONES_ID = readInteger(dis);
					
					this.FECHA_INGRESO = readDate(dis);
					
						this.TREGIMEN_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.ENTAPORTANTES_ID);
					
					// Integer
				
						writeInteger(this.GRDMILITARES_ID,dos);
					
					// Integer
				
						writeInteger(this.FUERZAS_ID,dos);
					
					// Integer
				
						writeInteger(this.UMILITARES_ID,dos);
					
					// int
				
		            	dos.writeInt(this.PRINCIPAL);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// Integer
				
						writeInteger(this.TVINCULACIONES_ID,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_INGRESO,dos);
					
					// Integer
				
						writeInteger(this.TREGIMEN_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.ENTAPORTANTES_ID);
					
					// Integer
				
						writeInteger(this.GRDMILITARES_ID,dos);
					
					// Integer
				
						writeInteger(this.FUERZAS_ID,dos);
					
					// Integer
				
						writeInteger(this.UMILITARES_ID,dos);
					
					// int
				
		            	dos.writeInt(this.PRINCIPAL);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// Integer
				
						writeInteger(this.TVINCULACIONES_ID,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_INGRESO,dos);
					
					// Integer
				
						writeInteger(this.TREGIMEN_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",ENTAPORTANTES_ID="+String.valueOf(ENTAPORTANTES_ID));
		sb.append(",GRDMILITARES_ID="+String.valueOf(GRDMILITARES_ID));
		sb.append(",FUERZAS_ID="+String.valueOf(FUERZAS_ID));
		sb.append(",UMILITARES_ID="+String.valueOf(UMILITARES_ID));
		sb.append(",PRINCIPAL="+String.valueOf(PRINCIPAL));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",TVINCULACIONES_ID="+String.valueOf(TVINCULACIONES_ID));
		sb.append(",FECHA_INGRESO="+String.valueOf(FECHA_INGRESO));
		sb.append(",TREGIMEN_ID="+String.valueOf(TREGIMEN_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ENTIDAD_APORTANTEStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class CAMBIOS_AFILIACIONStruct implements routines.system.IPersistableRow<CAMBIOS_AFILIACIONStruct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer ID;

				public Integer getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public java.util.Date FECHA_CADUCIDAD;

				public java.util.Date getFECHA_CADUCIDAD () {
					return this.FECHA_CADUCIDAD;
				}

				public Boolean FECHA_CADUCIDADIsNullable(){
				    return true;
				}
				public Boolean FECHA_CADUCIDADIsKey(){
				    return false;
				}
				public Integer FECHA_CADUCIDADLength(){
				    return null;
				}
				public Integer FECHA_CADUCIDADPrecision(){
				    return null;
				}
				public String FECHA_CADUCIDADDefault(){
				
					return null;
				
				}
				public String FECHA_CADUCIDADComment(){
				
				    return "";
				
				}
				public String FECHA_CADUCIDADPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_CADUCIDADOriginalDbColumnName(){
				
					return "FECHA_CADUCIDAD";
				
				}

				
			    public Integer PLANAFILIACIONES_ID;

				public Integer getPLANAFILIACIONES_ID () {
					return this.PLANAFILIACIONES_ID;
				}

				public Boolean PLANAFILIACIONES_IDIsNullable(){
				    return true;
				}
				public Boolean PLANAFILIACIONES_IDIsKey(){
				    return false;
				}
				public Integer PLANAFILIACIONES_IDLength(){
				    return null;
				}
				public Integer PLANAFILIACIONES_IDPrecision(){
				    return null;
				}
				public String PLANAFILIACIONES_IDDefault(){
				
					return null;
				
				}
				public String PLANAFILIACIONES_IDComment(){
				
				    return "";
				
				}
				public String PLANAFILIACIONES_IDPattern(){
				
					return "";
				
				}
				public String PLANAFILIACIONES_IDOriginalDbColumnName(){
				
					return "PLANAFILIACIONES_ID";
				
				}

				
			    public String OBSERVACIONES;

				public String getOBSERVACIONES () {
					return this.OBSERVACIONES;
				}

				public Boolean OBSERVACIONESIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONESIsKey(){
				    return false;
				}
				public Integer OBSERVACIONESLength(){
				    return null;
				}
				public Integer OBSERVACIONESPrecision(){
				    return null;
				}
				public String OBSERVACIONESDefault(){
				
					return null;
				
				}
				public String OBSERVACIONESComment(){
				
				    return "";
				
				}
				public String OBSERVACIONESPattern(){
				
					return "";
				
				}
				public String OBSERVACIONESOriginalDbColumnName(){
				
					return "OBSERVACIONES";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
					this.FECHA_CADUCIDAD = readDate(dis);
					
						this.PLANAFILIACIONES_ID = readInteger(dis);
					
					this.OBSERVACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
					this.FECHA_CADUCIDAD = readDate(dis);
					
						this.PLANAFILIACIONES_ID = readInteger(dis);
					
					this.OBSERVACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_CADUCIDAD,dos);
					
					// Integer
				
						writeInteger(this.PLANAFILIACIONES_ID,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_CADUCIDAD,dos);
					
					// Integer
				
						writeInteger(this.PLANAFILIACIONES_ID,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",FECHA_CADUCIDAD="+String.valueOf(FECHA_CADUCIDAD));
		sb.append(",PLANAFILIACIONES_ID="+String.valueOf(PLANAFILIACIONES_ID));
		sb.append(",OBSERVACIONES="+OBSERVACIONES);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(CAMBIOS_AFILIACIONStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class CAMBIO_FECHA_CADUCIDADStruct implements routines.system.IPersistableRow<CAMBIO_FECHA_CADUCIDADStruct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public int AFILIADOS_ID;

				public int getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 0;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return null;
				}
				public String AFILIADOS_IDDefault(){
				
					return "";
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "FK - GEN_AFILIADOS";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public int PROCESOS_ID;

				public int getPROCESOS_ID () {
					return this.PROCESOS_ID;
				}

				public Boolean PROCESOS_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESOS_IDIsKey(){
				    return false;
				}
				public Integer PROCESOS_IDLength(){
				    return 0;
				}
				public Integer PROCESOS_IDPrecision(){
				    return null;
				}
				public String PROCESOS_IDDefault(){
				
					return "";
				
				}
				public String PROCESOS_IDComment(){
				
				    return "FK - AFI_PROCESOS";
				
				}
				public String PROCESOS_IDPattern(){
				
					return "";
				
				}
				public String PROCESOS_IDOriginalDbColumnName(){
				
					return "PROCESOS_ID";
				
				}

				
			    public String MOTIVO;

				public String getMOTIVO () {
					return this.MOTIVO;
				}

				public Boolean MOTIVOIsNullable(){
				    return true;
				}
				public Boolean MOTIVOIsKey(){
				    return false;
				}
				public Integer MOTIVOLength(){
				    return 500;
				}
				public Integer MOTIVOPrecision(){
				    return 0;
				}
				public String MOTIVODefault(){
				
					return null;
				
				}
				public String MOTIVOComment(){
				
				    return "Motivo de la edici\u00F3n";
				
				}
				public String MOTIVOPattern(){
				
					return "";
				
				}
				public String MOTIVOOriginalDbColumnName(){
				
					return "MOTIVO";
				
				}

				
			    public int RNOVEDADES_ID;

				public int getRNOVEDADES_ID () {
					return this.RNOVEDADES_ID;
				}

				public Boolean RNOVEDADES_IDIsNullable(){
				    return false;
				}
				public Boolean RNOVEDADES_IDIsKey(){
				    return false;
				}
				public Integer RNOVEDADES_IDLength(){
				    return 0;
				}
				public Integer RNOVEDADES_IDPrecision(){
				    return null;
				}
				public String RNOVEDADES_IDDefault(){
				
					return "";
				
				}
				public String RNOVEDADES_IDComment(){
				
				    return "FK - AFI_NOVEDADES";
				
				}
				public String RNOVEDADES_IDPattern(){
				
					return "";
				
				}
				public String RNOVEDADES_IDOriginalDbColumnName(){
				
					return "RNOVEDADES_ID";
				
				}

				
			    public String VANTERIOR;

				public String getVANTERIOR () {
					return this.VANTERIOR;
				}

				public Boolean VANTERIORIsNullable(){
				    return true;
				}
				public Boolean VANTERIORIsKey(){
				    return false;
				}
				public Integer VANTERIORLength(){
				    return 2000;
				}
				public Integer VANTERIORPrecision(){
				    return 0;
				}
				public String VANTERIORDefault(){
				
					return null;
				
				}
				public String VANTERIORComment(){
				
				    return "Valor anterior";
				
				}
				public String VANTERIORPattern(){
				
					return "";
				
				}
				public String VANTERIOROriginalDbColumnName(){
				
					return "VANTERIOR";
				
				}

				
			    public String VACTUAL;

				public String getVACTUAL () {
					return this.VACTUAL;
				}

				public Boolean VACTUALIsNullable(){
				    return true;
				}
				public Boolean VACTUALIsKey(){
				    return false;
				}
				public Integer VACTUALLength(){
				    return 2000;
				}
				public Integer VACTUALPrecision(){
				    return 0;
				}
				public String VACTUALDefault(){
				
					return null;
				
				}
				public String VACTUALComment(){
				
				    return "Valor actual";
				
				}
				public String VACTUALPattern(){
				
					return "";
				
				}
				public String VACTUALOriginalDbColumnName(){
				
					return "VACTUAL";
				
				}

				
			    public String CAMPO;

				public String getCAMPO () {
					return this.CAMPO;
				}

				public Boolean CAMPOIsNullable(){
				    return true;
				}
				public Boolean CAMPOIsKey(){
				    return false;
				}
				public Integer CAMPOLength(){
				    return 150;
				}
				public Integer CAMPOPrecision(){
				    return 0;
				}
				public String CAMPODefault(){
				
					return null;
				
				}
				public String CAMPOComment(){
				
				    return "Campo afectado por el historico";
				
				}
				public String CAMPOPattern(){
				
					return "";
				
				}
				public String CAMPOOriginalDbColumnName(){
				
					return "CAMPO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.PROCESOS_ID = dis.readInt();
					
					this.MOTIVO = readString(dis);
					
			        this.RNOVEDADES_ID = dis.readInt();
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.CAMPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.PROCESOS_ID = dis.readInt();
					
					this.MOTIVO = readString(dis);
					
			        this.RNOVEDADES_ID = dis.readInt();
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.CAMPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESOS_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// int
				
		            	dos.writeInt(this.RNOVEDADES_ID);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.CAMPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESOS_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// int
				
		            	dos.writeInt(this.RNOVEDADES_ID);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.CAMPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",PROCESOS_ID="+String.valueOf(PROCESOS_ID));
		sb.append(",MOTIVO="+MOTIVO);
		sb.append(",RNOVEDADES_ID="+String.valueOf(RNOVEDADES_ID));
		sb.append(",VANTERIOR="+VANTERIOR);
		sb.append(",VACTUAL="+VACTUAL);
		sb.append(",CAMPO="+CAMPO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(CAMBIO_FECHA_CADUCIDADStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class CAMBIO_ENTIDAD_PRINCIPALStruct implements routines.system.IPersistableRow<CAMBIO_ENTIDAD_PRINCIPALStruct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public int afiliado_id_;

				public int getAfiliado_id_ () {
					return this.afiliado_id_;
				}

				public Boolean afiliado_id_IsNullable(){
				    return false;
				}
				public Boolean afiliado_id_IsKey(){
				    return false;
				}
				public Integer afiliado_id_Length(){
				    return null;
				}
				public Integer afiliado_id_Precision(){
				    return null;
				}
				public String afiliado_id_Default(){
				
					return null;
				
				}
				public String afiliado_id_Comment(){
				
				    return "";
				
				}
				public String afiliado_id_Pattern(){
				
					return "";
				
				}
				public String afiliado_id_OriginalDbColumnName(){
				
					return "afiliado_id_";
				
				}

				
			    public int entidad_id_;

				public int getEntidad_id_ () {
					return this.entidad_id_;
				}

				public Boolean entidad_id_IsNullable(){
				    return false;
				}
				public Boolean entidad_id_IsKey(){
				    return false;
				}
				public Integer entidad_id_Length(){
				    return null;
				}
				public Integer entidad_id_Precision(){
				    return null;
				}
				public String entidad_id_Default(){
				
					return null;
				
				}
				public String entidad_id_Comment(){
				
				    return "";
				
				}
				public String entidad_id_Pattern(){
				
					return "";
				
				}
				public String entidad_id_OriginalDbColumnName(){
				
					return "entidad_id_";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.afiliado_id_ = dis.readInt();
					
			        this.entidad_id_ = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.afiliado_id_ = dis.readInt();
					
			        this.entidad_id_ = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.afiliado_id_);
					
					// int
				
		            	dos.writeInt(this.entidad_id_);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.afiliado_id_);
					
					// int
				
		            	dos.writeInt(this.entidad_id_);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("afiliado_id_="+String.valueOf(afiliado_id_));
		sb.append(",entidad_id_="+String.valueOf(entidad_id_));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(CAMBIO_ENTIDAD_PRINCIPALStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class CAMBIO_PLAN_AFILIACIONStruct implements routines.system.IPersistableRow<CAMBIO_PLAN_AFILIACIONStruct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public int AFILIADOS_ID;

				public int getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 0;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return null;
				}
				public String AFILIADOS_IDDefault(){
				
					return "";
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "FK - GEN_AFILIADOS";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public int PROCESOS_ID;

				public int getPROCESOS_ID () {
					return this.PROCESOS_ID;
				}

				public Boolean PROCESOS_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESOS_IDIsKey(){
				    return false;
				}
				public Integer PROCESOS_IDLength(){
				    return 0;
				}
				public Integer PROCESOS_IDPrecision(){
				    return null;
				}
				public String PROCESOS_IDDefault(){
				
					return "";
				
				}
				public String PROCESOS_IDComment(){
				
				    return "FK - AFI_PROCESOS";
				
				}
				public String PROCESOS_IDPattern(){
				
					return "";
				
				}
				public String PROCESOS_IDOriginalDbColumnName(){
				
					return "PROCESOS_ID";
				
				}

				
			    public String MOTIVO;

				public String getMOTIVO () {
					return this.MOTIVO;
				}

				public Boolean MOTIVOIsNullable(){
				    return true;
				}
				public Boolean MOTIVOIsKey(){
				    return false;
				}
				public Integer MOTIVOLength(){
				    return 500;
				}
				public Integer MOTIVOPrecision(){
				    return 0;
				}
				public String MOTIVODefault(){
				
					return null;
				
				}
				public String MOTIVOComment(){
				
				    return "Motivo de la edici\u00F3n";
				
				}
				public String MOTIVOPattern(){
				
					return "";
				
				}
				public String MOTIVOOriginalDbColumnName(){
				
					return "MOTIVO";
				
				}

				
			    public int RNOVEDADES_ID;

				public int getRNOVEDADES_ID () {
					return this.RNOVEDADES_ID;
				}

				public Boolean RNOVEDADES_IDIsNullable(){
				    return false;
				}
				public Boolean RNOVEDADES_IDIsKey(){
				    return false;
				}
				public Integer RNOVEDADES_IDLength(){
				    return 0;
				}
				public Integer RNOVEDADES_IDPrecision(){
				    return null;
				}
				public String RNOVEDADES_IDDefault(){
				
					return "";
				
				}
				public String RNOVEDADES_IDComment(){
				
				    return "FK - AFI_NOVEDADES";
				
				}
				public String RNOVEDADES_IDPattern(){
				
					return "";
				
				}
				public String RNOVEDADES_IDOriginalDbColumnName(){
				
					return "RNOVEDADES_ID";
				
				}

				
			    public String VANTERIOR;

				public String getVANTERIOR () {
					return this.VANTERIOR;
				}

				public Boolean VANTERIORIsNullable(){
				    return true;
				}
				public Boolean VANTERIORIsKey(){
				    return false;
				}
				public Integer VANTERIORLength(){
				    return 2000;
				}
				public Integer VANTERIORPrecision(){
				    return 0;
				}
				public String VANTERIORDefault(){
				
					return null;
				
				}
				public String VANTERIORComment(){
				
				    return "Valor anterior";
				
				}
				public String VANTERIORPattern(){
				
					return "";
				
				}
				public String VANTERIOROriginalDbColumnName(){
				
					return "VANTERIOR";
				
				}

				
			    public String VACTUAL;

				public String getVACTUAL () {
					return this.VACTUAL;
				}

				public Boolean VACTUALIsNullable(){
				    return true;
				}
				public Boolean VACTUALIsKey(){
				    return false;
				}
				public Integer VACTUALLength(){
				    return 2000;
				}
				public Integer VACTUALPrecision(){
				    return 0;
				}
				public String VACTUALDefault(){
				
					return null;
				
				}
				public String VACTUALComment(){
				
				    return "Valor actual";
				
				}
				public String VACTUALPattern(){
				
					return "";
				
				}
				public String VACTUALOriginalDbColumnName(){
				
					return "VACTUAL";
				
				}

				
			    public String CAMPO;

				public String getCAMPO () {
					return this.CAMPO;
				}

				public Boolean CAMPOIsNullable(){
				    return true;
				}
				public Boolean CAMPOIsKey(){
				    return false;
				}
				public Integer CAMPOLength(){
				    return 150;
				}
				public Integer CAMPOPrecision(){
				    return 0;
				}
				public String CAMPODefault(){
				
					return null;
				
				}
				public String CAMPOComment(){
				
				    return "Campo afectado por el historico";
				
				}
				public String CAMPOPattern(){
				
					return "";
				
				}
				public String CAMPOOriginalDbColumnName(){
				
					return "CAMPO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.PROCESOS_ID = dis.readInt();
					
					this.MOTIVO = readString(dis);
					
			        this.RNOVEDADES_ID = dis.readInt();
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.CAMPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.PROCESOS_ID = dis.readInt();
					
					this.MOTIVO = readString(dis);
					
			        this.RNOVEDADES_ID = dis.readInt();
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.CAMPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESOS_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// int
				
		            	dos.writeInt(this.RNOVEDADES_ID);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.CAMPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESOS_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// int
				
		            	dos.writeInt(this.RNOVEDADES_ID);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.CAMPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",PROCESOS_ID="+String.valueOf(PROCESOS_ID));
		sb.append(",MOTIVO="+MOTIVO);
		sb.append(",RNOVEDADES_ID="+String.valueOf(RNOVEDADES_ID));
		sb.append(",VANTERIOR="+VANTERIOR);
		sb.append(",VACTUAL="+VACTUAL);
		sb.append(",CAMPO="+CAMPO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(CAMBIO_PLAN_AFILIACIONStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class CAMBIO_FECHA_DEFUNCIONStruct implements routines.system.IPersistableRow<CAMBIO_FECHA_DEFUNCIONStruct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public int AFILIADOS_ID;

				public int getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 0;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return null;
				}
				public String AFILIADOS_IDDefault(){
				
					return "";
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "FK - GEN_AFILIADOS";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public int PROCESOS_ID;

				public int getPROCESOS_ID () {
					return this.PROCESOS_ID;
				}

				public Boolean PROCESOS_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESOS_IDIsKey(){
				    return false;
				}
				public Integer PROCESOS_IDLength(){
				    return 0;
				}
				public Integer PROCESOS_IDPrecision(){
				    return null;
				}
				public String PROCESOS_IDDefault(){
				
					return "";
				
				}
				public String PROCESOS_IDComment(){
				
				    return "FK - AFI_PROCESOS";
				
				}
				public String PROCESOS_IDPattern(){
				
					return "";
				
				}
				public String PROCESOS_IDOriginalDbColumnName(){
				
					return "PROCESOS_ID";
				
				}

				
			    public String MOTIVO;

				public String getMOTIVO () {
					return this.MOTIVO;
				}

				public Boolean MOTIVOIsNullable(){
				    return true;
				}
				public Boolean MOTIVOIsKey(){
				    return false;
				}
				public Integer MOTIVOLength(){
				    return 500;
				}
				public Integer MOTIVOPrecision(){
				    return 0;
				}
				public String MOTIVODefault(){
				
					return null;
				
				}
				public String MOTIVOComment(){
				
				    return "Motivo de la edici\u00F3n";
				
				}
				public String MOTIVOPattern(){
				
					return "";
				
				}
				public String MOTIVOOriginalDbColumnName(){
				
					return "MOTIVO";
				
				}

				
			    public int RNOVEDADES_ID;

				public int getRNOVEDADES_ID () {
					return this.RNOVEDADES_ID;
				}

				public Boolean RNOVEDADES_IDIsNullable(){
				    return false;
				}
				public Boolean RNOVEDADES_IDIsKey(){
				    return false;
				}
				public Integer RNOVEDADES_IDLength(){
				    return 0;
				}
				public Integer RNOVEDADES_IDPrecision(){
				    return null;
				}
				public String RNOVEDADES_IDDefault(){
				
					return "";
				
				}
				public String RNOVEDADES_IDComment(){
				
				    return "FK - AFI_NOVEDADES";
				
				}
				public String RNOVEDADES_IDPattern(){
				
					return "";
				
				}
				public String RNOVEDADES_IDOriginalDbColumnName(){
				
					return "RNOVEDADES_ID";
				
				}

				
			    public String VANTERIOR;

				public String getVANTERIOR () {
					return this.VANTERIOR;
				}

				public Boolean VANTERIORIsNullable(){
				    return true;
				}
				public Boolean VANTERIORIsKey(){
				    return false;
				}
				public Integer VANTERIORLength(){
				    return 2000;
				}
				public Integer VANTERIORPrecision(){
				    return 0;
				}
				public String VANTERIORDefault(){
				
					return null;
				
				}
				public String VANTERIORComment(){
				
				    return "Valor anterior";
				
				}
				public String VANTERIORPattern(){
				
					return "";
				
				}
				public String VANTERIOROriginalDbColumnName(){
				
					return "VANTERIOR";
				
				}

				
			    public String VACTUAL;

				public String getVACTUAL () {
					return this.VACTUAL;
				}

				public Boolean VACTUALIsNullable(){
				    return true;
				}
				public Boolean VACTUALIsKey(){
				    return false;
				}
				public Integer VACTUALLength(){
				    return 2000;
				}
				public Integer VACTUALPrecision(){
				    return 0;
				}
				public String VACTUALDefault(){
				
					return null;
				
				}
				public String VACTUALComment(){
				
				    return "Valor actual";
				
				}
				public String VACTUALPattern(){
				
					return "";
				
				}
				public String VACTUALOriginalDbColumnName(){
				
					return "VACTUAL";
				
				}

				
			    public String CAMPO;

				public String getCAMPO () {
					return this.CAMPO;
				}

				public Boolean CAMPOIsNullable(){
				    return true;
				}
				public Boolean CAMPOIsKey(){
				    return false;
				}
				public Integer CAMPOLength(){
				    return 150;
				}
				public Integer CAMPOPrecision(){
				    return 0;
				}
				public String CAMPODefault(){
				
					return null;
				
				}
				public String CAMPOComment(){
				
				    return "Campo afectado por el historico";
				
				}
				public String CAMPOPattern(){
				
					return "";
				
				}
				public String CAMPOOriginalDbColumnName(){
				
					return "CAMPO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.PROCESOS_ID = dis.readInt();
					
					this.MOTIVO = readString(dis);
					
			        this.RNOVEDADES_ID = dis.readInt();
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.CAMPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.PROCESOS_ID = dis.readInt();
					
					this.MOTIVO = readString(dis);
					
			        this.RNOVEDADES_ID = dis.readInt();
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.CAMPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESOS_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// int
				
		            	dos.writeInt(this.RNOVEDADES_ID);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.CAMPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESOS_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// int
				
		            	dos.writeInt(this.RNOVEDADES_ID);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.CAMPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",PROCESOS_ID="+String.valueOf(PROCESOS_ID));
		sb.append(",MOTIVO="+MOTIVO);
		sb.append(",RNOVEDADES_ID="+String.valueOf(RNOVEDADES_ID));
		sb.append(",VANTERIOR="+VANTERIOR);
		sb.append(",VACTUAL="+VACTUAL);
		sb.append(",CAMPO="+CAMPO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(CAMBIO_FECHA_DEFUNCIONStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row44Struct implements routines.system.IPersistableRow<row44Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 400;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String PNOMBRE_ANT;

				public String getPNOMBRE_ANT () {
					return this.PNOMBRE_ANT;
				}

				public Boolean PNOMBRE_ANTIsNullable(){
				    return true;
				}
				public Boolean PNOMBRE_ANTIsKey(){
				    return false;
				}
				public Integer PNOMBRE_ANTLength(){
				    return 100;
				}
				public Integer PNOMBRE_ANTPrecision(){
				    return 0;
				}
				public String PNOMBRE_ANTDefault(){
				
					return null;
				
				}
				public String PNOMBRE_ANTComment(){
				
				    return "";
				
				}
				public String PNOMBRE_ANTPattern(){
				
					return "";
				
				}
				public String PNOMBRE_ANTOriginalDbColumnName(){
				
					return "PNOMBRE_ANT";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 400;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String SNOMBRE_ANT;

				public String getSNOMBRE_ANT () {
					return this.SNOMBRE_ANT;
				}

				public Boolean SNOMBRE_ANTIsNullable(){
				    return true;
				}
				public Boolean SNOMBRE_ANTIsKey(){
				    return false;
				}
				public Integer SNOMBRE_ANTLength(){
				    return 100;
				}
				public Integer SNOMBRE_ANTPrecision(){
				    return 0;
				}
				public String SNOMBRE_ANTDefault(){
				
					return null;
				
				}
				public String SNOMBRE_ANTComment(){
				
				    return "";
				
				}
				public String SNOMBRE_ANTPattern(){
				
					return "";
				
				}
				public String SNOMBRE_ANTOriginalDbColumnName(){
				
					return "SNOMBRE_ANT";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 400;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String PAPELLIDO_ANT;

				public String getPAPELLIDO_ANT () {
					return this.PAPELLIDO_ANT;
				}

				public Boolean PAPELLIDO_ANTIsNullable(){
				    return true;
				}
				public Boolean PAPELLIDO_ANTIsKey(){
				    return false;
				}
				public Integer PAPELLIDO_ANTLength(){
				    return 100;
				}
				public Integer PAPELLIDO_ANTPrecision(){
				    return 0;
				}
				public String PAPELLIDO_ANTDefault(){
				
					return null;
				
				}
				public String PAPELLIDO_ANTComment(){
				
				    return "";
				
				}
				public String PAPELLIDO_ANTPattern(){
				
					return "";
				
				}
				public String PAPELLIDO_ANTOriginalDbColumnName(){
				
					return "PAPELLIDO_ANT";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 400;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String SAPELLIDO_ANT;

				public String getSAPELLIDO_ANT () {
					return this.SAPELLIDO_ANT;
				}

				public Boolean SAPELLIDO_ANTIsNullable(){
				    return true;
				}
				public Boolean SAPELLIDO_ANTIsKey(){
				    return false;
				}
				public Integer SAPELLIDO_ANTLength(){
				    return 100;
				}
				public Integer SAPELLIDO_ANTPrecision(){
				    return 0;
				}
				public String SAPELLIDO_ANTDefault(){
				
					return null;
				
				}
				public String SAPELLIDO_ANTComment(){
				
				    return "";
				
				}
				public String SAPELLIDO_ANTPattern(){
				
					return "";
				
				}
				public String SAPELLIDO_ANTOriginalDbColumnName(){
				
					return "SAPELLIDO_ANT";
				
				}

				
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public int TDOCUMENTO_ANT;

				public int getTDOCUMENTO_ANT () {
					return this.TDOCUMENTO_ANT;
				}

				public Boolean TDOCUMENTO_ANTIsNullable(){
				    return false;
				}
				public Boolean TDOCUMENTO_ANTIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_ANTLength(){
				    return 0;
				}
				public Integer TDOCUMENTO_ANTPrecision(){
				    return null;
				}
				public String TDOCUMENTO_ANTDefault(){
				
					return "";
				
				}
				public String TDOCUMENTO_ANTComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_ANTPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_ANTOriginalDbColumnName(){
				
					return "TDOCUMENTO_ANT";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String DOCUMENTO_ANT;

				public String getDOCUMENTO_ANT () {
					return this.DOCUMENTO_ANT;
				}

				public Boolean DOCUMENTO_ANTIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTO_ANTIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_ANTLength(){
				    return 40;
				}
				public Integer DOCUMENTO_ANTPrecision(){
				    return 0;
				}
				public String DOCUMENTO_ANTDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_ANTComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_ANTPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_ANTOriginalDbColumnName(){
				
					return "DOCUMENTO_ANT";
				
				}

				
			    public Integer LUGAR_EXP_DOC;

				public Integer getLUGAR_EXP_DOC () {
					return this.LUGAR_EXP_DOC;
				}

				public Boolean LUGAR_EXP_DOCIsNullable(){
				    return true;
				}
				public Boolean LUGAR_EXP_DOCIsKey(){
				    return false;
				}
				public Integer LUGAR_EXP_DOCLength(){
				    return 0;
				}
				public Integer LUGAR_EXP_DOCPrecision(){
				    return null;
				}
				public String LUGAR_EXP_DOCDefault(){
				
					return "";
				
				}
				public String LUGAR_EXP_DOCComment(){
				
				    return "";
				
				}
				public String LUGAR_EXP_DOCPattern(){
				
					return "";
				
				}
				public String LUGAR_EXP_DOCOriginalDbColumnName(){
				
					return "LUGAR_EXP_DOC";
				
				}

				
			    public Integer LUGAR_EXPEDICION;

				public Integer getLUGAR_EXPEDICION () {
					return this.LUGAR_EXPEDICION;
				}

				public Boolean LUGAR_EXPEDICIONIsNullable(){
				    return true;
				}
				public Boolean LUGAR_EXPEDICIONIsKey(){
				    return false;
				}
				public Integer LUGAR_EXPEDICIONLength(){
				    return 0;
				}
				public Integer LUGAR_EXPEDICIONPrecision(){
				    return null;
				}
				public String LUGAR_EXPEDICIONDefault(){
				
					return "";
				
				}
				public String LUGAR_EXPEDICIONComment(){
				
				    return "";
				
				}
				public String LUGAR_EXPEDICIONPattern(){
				
					return "";
				
				}
				public String LUGAR_EXPEDICIONOriginalDbColumnName(){
				
					return "LUGAR_EXPEDICION";
				
				}

				
			    public Integer SEXOS_ID;

				public Integer getSEXOS_ID () {
					return this.SEXOS_ID;
				}

				public Boolean SEXOS_IDIsNullable(){
				    return true;
				}
				public Boolean SEXOS_IDIsKey(){
				    return false;
				}
				public Integer SEXOS_IDLength(){
				    return 0;
				}
				public Integer SEXOS_IDPrecision(){
				    return null;
				}
				public String SEXOS_IDDefault(){
				
					return "";
				
				}
				public String SEXOS_IDComment(){
				
				    return "";
				
				}
				public String SEXOS_IDPattern(){
				
					return "";
				
				}
				public String SEXOS_IDOriginalDbColumnName(){
				
					return "SEXOS_ID";
				
				}

				
			    public int SEXO_ANT;

				public int getSEXO_ANT () {
					return this.SEXO_ANT;
				}

				public Boolean SEXO_ANTIsNullable(){
				    return false;
				}
				public Boolean SEXO_ANTIsKey(){
				    return false;
				}
				public Integer SEXO_ANTLength(){
				    return 0;
				}
				public Integer SEXO_ANTPrecision(){
				    return null;
				}
				public String SEXO_ANTDefault(){
				
					return "";
				
				}
				public String SEXO_ANTComment(){
				
				    return "";
				
				}
				public String SEXO_ANTPattern(){
				
					return "";
				
				}
				public String SEXO_ANTOriginalDbColumnName(){
				
					return "SEXO_ANT";
				
				}

				
			    public Float ESTATURA;

				public Float getESTATURA () {
					return this.ESTATURA;
				}

				public Boolean ESTATURAIsNullable(){
				    return true;
				}
				public Boolean ESTATURAIsKey(){
				    return false;
				}
				public Integer ESTATURALength(){
				    return 10;
				}
				public Integer ESTATURAPrecision(){
				    return 2;
				}
				public String ESTATURADefault(){
				
					return "";
				
				}
				public String ESTATURAComment(){
				
				    return "";
				
				}
				public String ESTATURAPattern(){
				
					return "";
				
				}
				public String ESTATURAOriginalDbColumnName(){
				
					return "ESTATURA";
				
				}

				
			    public Float ESTATURA_ANT;

				public Float getESTATURA_ANT () {
					return this.ESTATURA_ANT;
				}

				public Boolean ESTATURA_ANTIsNullable(){
				    return true;
				}
				public Boolean ESTATURA_ANTIsKey(){
				    return false;
				}
				public Integer ESTATURA_ANTLength(){
				    return 0;
				}
				public Integer ESTATURA_ANTPrecision(){
				    return null;
				}
				public String ESTATURA_ANTDefault(){
				
					return "";
				
				}
				public String ESTATURA_ANTComment(){
				
				    return "";
				
				}
				public String ESTATURA_ANTPattern(){
				
					return "";
				
				}
				public String ESTATURA_ANTOriginalDbColumnName(){
				
					return "ESTATURA_ANT";
				
				}

				
			    public java.util.Date FECHA_EXPEDICION_DOCUMENTO;

				public java.util.Date getFECHA_EXPEDICION_DOCUMENTO () {
					return this.FECHA_EXPEDICION_DOCUMENTO;
				}

				public Boolean FECHA_EXPEDICION_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_EXPEDICION_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer FECHA_EXPEDICION_DOCUMENTOLength(){
				    return null;
				}
				public Integer FECHA_EXPEDICION_DOCUMENTOPrecision(){
				    return null;
				}
				public String FECHA_EXPEDICION_DOCUMENTODefault(){
				
					return null;
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOOriginalDbColumnName(){
				
					return "FECHA_EXPEDICION_DOCUMENTO";
				
				}

				
			    public java.util.Date FECHAEX_ANT;

				public java.util.Date getFECHAEX_ANT () {
					return this.FECHAEX_ANT;
				}

				public Boolean FECHAEX_ANTIsNullable(){
				    return true;
				}
				public Boolean FECHAEX_ANTIsKey(){
				    return false;
				}
				public Integer FECHAEX_ANTLength(){
				    return null;
				}
				public Integer FECHAEX_ANTPrecision(){
				    return null;
				}
				public String FECHAEX_ANTDefault(){
				
					return null;
				
				}
				public String FECHAEX_ANTComment(){
				
				    return "";
				
				}
				public String FECHAEX_ANTPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAEX_ANTOriginalDbColumnName(){
				
					return "FECHAEX_ANT";
				
				}

				
			    public java.util.Date FECHA_NACIMIENTO;

				public java.util.Date getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return 0;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return 0;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public java.util.Date FECHAN_ANT;

				public java.util.Date getFECHAN_ANT () {
					return this.FECHAN_ANT;
				}

				public Boolean FECHAN_ANTIsNullable(){
				    return true;
				}
				public Boolean FECHAN_ANTIsKey(){
				    return false;
				}
				public Integer FECHAN_ANTLength(){
				    return 0;
				}
				public Integer FECHAN_ANTPrecision(){
				    return 0;
				}
				public String FECHAN_ANTDefault(){
				
					return null;
				
				}
				public String FECHAN_ANTComment(){
				
				    return "";
				
				}
				public String FECHAN_ANTPattern(){
				
					return "";
				
				}
				public String FECHAN_ANTOriginalDbColumnName(){
				
					return "FECHAN_ANT";
				
				}

				
			    public Integer LUGAR_NACIMIENTO;

				public Integer getLUGAR_NACIMIENTO () {
					return this.LUGAR_NACIMIENTO;
				}

				public Boolean LUGAR_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean LUGAR_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer LUGAR_NACIMIENTOLength(){
				    return 0;
				}
				public Integer LUGAR_NACIMIENTOPrecision(){
				    return null;
				}
				public String LUGAR_NACIMIENTODefault(){
				
					return "";
				
				}
				public String LUGAR_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String LUGAR_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String LUGAR_NACIMIENTOOriginalDbColumnName(){
				
					return "LUGAR_NACIMIENTO";
				
				}

				
			    public Integer LNACIMIENTO;

				public Integer getLNACIMIENTO () {
					return this.LNACIMIENTO;
				}

				public Boolean LNACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean LNACIMIENTOIsKey(){
				    return false;
				}
				public Integer LNACIMIENTOLength(){
				    return 0;
				}
				public Integer LNACIMIENTOPrecision(){
				    return null;
				}
				public String LNACIMIENTODefault(){
				
					return "";
				
				}
				public String LNACIMIENTOComment(){
				
				    return "";
				
				}
				public String LNACIMIENTOPattern(){
				
					return "";
				
				}
				public String LNACIMIENTOOriginalDbColumnName(){
				
					return "LNACIMIENTO";
				
				}

				
			    public String DIRECCION;

				public String getDIRECCION () {
					return this.DIRECCION;
				}

				public Boolean DIRECCIONIsNullable(){
				    return true;
				}
				public Boolean DIRECCIONIsKey(){
				    return false;
				}
				public Integer DIRECCIONLength(){
				    return 400;
				}
				public Integer DIRECCIONPrecision(){
				    return 0;
				}
				public String DIRECCIONDefault(){
				
					return null;
				
				}
				public String DIRECCIONComment(){
				
				    return "";
				
				}
				public String DIRECCIONPattern(){
				
					return "";
				
				}
				public String DIRECCIONOriginalDbColumnName(){
				
					return "DIRECCION";
				
				}

				
			    public String DIRECCION_ANT;

				public String getDIRECCION_ANT () {
					return this.DIRECCION_ANT;
				}

				public Boolean DIRECCION_ANTIsNullable(){
				    return true;
				}
				public Boolean DIRECCION_ANTIsKey(){
				    return false;
				}
				public Integer DIRECCION_ANTLength(){
				    return 500;
				}
				public Integer DIRECCION_ANTPrecision(){
				    return 0;
				}
				public String DIRECCION_ANTDefault(){
				
					return null;
				
				}
				public String DIRECCION_ANTComment(){
				
				    return "";
				
				}
				public String DIRECCION_ANTPattern(){
				
					return "";
				
				}
				public String DIRECCION_ANTOriginalDbColumnName(){
				
					return "DIRECCION_ANT";
				
				}

				
			    public Integer LUGAR_RESIDENCIA;

				public Integer getLUGAR_RESIDENCIA () {
					return this.LUGAR_RESIDENCIA;
				}

				public Boolean LUGAR_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean LUGAR_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer LUGAR_RESIDENCIALength(){
				    return 0;
				}
				public Integer LUGAR_RESIDENCIAPrecision(){
				    return null;
				}
				public String LUGAR_RESIDENCIADefault(){
				
					return "";
				
				}
				public String LUGAR_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String LUGAR_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String LUGAR_RESIDENCIAOriginalDbColumnName(){
				
					return "LUGAR_RESIDENCIA";
				
				}

				
			    public Integer LRESIDENCIA;

				public Integer getLRESIDENCIA () {
					return this.LRESIDENCIA;
				}

				public Boolean LRESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean LRESIDENCIAIsKey(){
				    return false;
				}
				public Integer LRESIDENCIALength(){
				    return 0;
				}
				public Integer LRESIDENCIAPrecision(){
				    return null;
				}
				public String LRESIDENCIADefault(){
				
					return "";
				
				}
				public String LRESIDENCIAComment(){
				
				    return "";
				
				}
				public String LRESIDENCIAPattern(){
				
					return "";
				
				}
				public String LRESIDENCIAOriginalDbColumnName(){
				
					return "LRESIDENCIA";
				
				}

				
			    public Integer LOCALIDADES_ID;

				public Integer getLOCALIDADES_ID () {
					return this.LOCALIDADES_ID;
				}

				public Boolean LOCALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean LOCALIDADES_IDIsKey(){
				    return false;
				}
				public Integer LOCALIDADES_IDLength(){
				    return 0;
				}
				public Integer LOCALIDADES_IDPrecision(){
				    return null;
				}
				public String LOCALIDADES_IDDefault(){
				
					return "";
				
				}
				public String LOCALIDADES_IDComment(){
				
				    return "";
				
				}
				public String LOCALIDADES_IDPattern(){
				
					return "";
				
				}
				public String LOCALIDADES_IDOriginalDbColumnName(){
				
					return "LOCALIDADES_ID";
				
				}

				
			    public Integer LOCALIDAD_ANT;

				public Integer getLOCALIDAD_ANT () {
					return this.LOCALIDAD_ANT;
				}

				public Boolean LOCALIDAD_ANTIsNullable(){
				    return true;
				}
				public Boolean LOCALIDAD_ANTIsKey(){
				    return false;
				}
				public Integer LOCALIDAD_ANTLength(){
				    return 0;
				}
				public Integer LOCALIDAD_ANTPrecision(){
				    return null;
				}
				public String LOCALIDAD_ANTDefault(){
				
					return "";
				
				}
				public String LOCALIDAD_ANTComment(){
				
				    return "";
				
				}
				public String LOCALIDAD_ANTPattern(){
				
					return "";
				
				}
				public String LOCALIDAD_ANTOriginalDbColumnName(){
				
					return "LOCALIDAD_ANT";
				
				}

				
			    public Integer GSANGUINEOS_ID;

				public Integer getGSANGUINEOS_ID () {
					return this.GSANGUINEOS_ID;
				}

				public Boolean GSANGUINEOS_IDIsNullable(){
				    return true;
				}
				public Boolean GSANGUINEOS_IDIsKey(){
				    return false;
				}
				public Integer GSANGUINEOS_IDLength(){
				    return 0;
				}
				public Integer GSANGUINEOS_IDPrecision(){
				    return null;
				}
				public String GSANGUINEOS_IDDefault(){
				
					return "";
				
				}
				public String GSANGUINEOS_IDComment(){
				
				    return "";
				
				}
				public String GSANGUINEOS_IDPattern(){
				
					return "";
				
				}
				public String GSANGUINEOS_IDOriginalDbColumnName(){
				
					return "GSANGUINEOS_ID";
				
				}

				
			    public Integer GRUPOS_ANT;

				public Integer getGRUPOS_ANT () {
					return this.GRUPOS_ANT;
				}

				public Boolean GRUPOS_ANTIsNullable(){
				    return true;
				}
				public Boolean GRUPOS_ANTIsKey(){
				    return false;
				}
				public Integer GRUPOS_ANTLength(){
				    return 0;
				}
				public Integer GRUPOS_ANTPrecision(){
				    return null;
				}
				public String GRUPOS_ANTDefault(){
				
					return "";
				
				}
				public String GRUPOS_ANTComment(){
				
				    return "";
				
				}
				public String GRUPOS_ANTPattern(){
				
					return "";
				
				}
				public String GRUPOS_ANTOriginalDbColumnName(){
				
					return "GRUPOS_ANT";
				
				}

				
			    public String TELEFONO;

				public String getTELEFONO () {
					return this.TELEFONO;
				}

				public Boolean TELEFONOIsNullable(){
				    return true;
				}
				public Boolean TELEFONOIsKey(){
				    return false;
				}
				public Integer TELEFONOLength(){
				    return 400;
				}
				public Integer TELEFONOPrecision(){
				    return 0;
				}
				public String TELEFONODefault(){
				
					return null;
				
				}
				public String TELEFONOComment(){
				
				    return "";
				
				}
				public String TELEFONOPattern(){
				
					return "";
				
				}
				public String TELEFONOOriginalDbColumnName(){
				
					return "TELEFONO";
				
				}

				
			    public String TELEFONO_ANT;

				public String getTELEFONO_ANT () {
					return this.TELEFONO_ANT;
				}

				public Boolean TELEFONO_ANTIsNullable(){
				    return true;
				}
				public Boolean TELEFONO_ANTIsKey(){
				    return false;
				}
				public Integer TELEFONO_ANTLength(){
				    return 50;
				}
				public Integer TELEFONO_ANTPrecision(){
				    return 0;
				}
				public String TELEFONO_ANTDefault(){
				
					return null;
				
				}
				public String TELEFONO_ANTComment(){
				
				    return "";
				
				}
				public String TELEFONO_ANTPattern(){
				
					return "";
				
				}
				public String TELEFONO_ANTOriginalDbColumnName(){
				
					return "TELEFONO_ANT";
				
				}

				
			    public Integer OCUPACIONES_ID;

				public Integer getOCUPACIONES_ID () {
					return this.OCUPACIONES_ID;
				}

				public Boolean OCUPACIONES_IDIsNullable(){
				    return true;
				}
				public Boolean OCUPACIONES_IDIsKey(){
				    return false;
				}
				public Integer OCUPACIONES_IDLength(){
				    return 0;
				}
				public Integer OCUPACIONES_IDPrecision(){
				    return null;
				}
				public String OCUPACIONES_IDDefault(){
				
					return "";
				
				}
				public String OCUPACIONES_IDComment(){
				
				    return "";
				
				}
				public String OCUPACIONES_IDPattern(){
				
					return "";
				
				}
				public String OCUPACIONES_IDOriginalDbColumnName(){
				
					return "OCUPACIONES_ID";
				
				}

				
			    public Integer OCUPACION_ANT;

				public Integer getOCUPACION_ANT () {
					return this.OCUPACION_ANT;
				}

				public Boolean OCUPACION_ANTIsNullable(){
				    return true;
				}
				public Boolean OCUPACION_ANTIsKey(){
				    return false;
				}
				public Integer OCUPACION_ANTLength(){
				    return 0;
				}
				public Integer OCUPACION_ANTPrecision(){
				    return null;
				}
				public String OCUPACION_ANTDefault(){
				
					return "";
				
				}
				public String OCUPACION_ANTComment(){
				
				    return "";
				
				}
				public String OCUPACION_ANTPattern(){
				
					return "";
				
				}
				public String OCUPACION_ANTOriginalDbColumnName(){
				
					return "OCUPACION_ANT";
				
				}

				
			    public Integer ETNICAS_ID;

				public Integer getETNICAS_ID () {
					return this.ETNICAS_ID;
				}

				public Boolean ETNICAS_IDIsNullable(){
				    return true;
				}
				public Boolean ETNICAS_IDIsKey(){
				    return false;
				}
				public Integer ETNICAS_IDLength(){
				    return 0;
				}
				public Integer ETNICAS_IDPrecision(){
				    return null;
				}
				public String ETNICAS_IDDefault(){
				
					return "";
				
				}
				public String ETNICAS_IDComment(){
				
				    return "";
				
				}
				public String ETNICAS_IDPattern(){
				
					return "";
				
				}
				public String ETNICAS_IDOriginalDbColumnName(){
				
					return "ETNICAS_ID";
				
				}

				
			    public Integer ETNICO_ANT;

				public Integer getETNICO_ANT () {
					return this.ETNICO_ANT;
				}

				public Boolean ETNICO_ANTIsNullable(){
				    return true;
				}
				public Boolean ETNICO_ANTIsKey(){
				    return false;
				}
				public Integer ETNICO_ANTLength(){
				    return 0;
				}
				public Integer ETNICO_ANTPrecision(){
				    return null;
				}
				public String ETNICO_ANTDefault(){
				
					return "";
				
				}
				public String ETNICO_ANTComment(){
				
				    return "";
				
				}
				public String ETNICO_ANTPattern(){
				
					return "";
				
				}
				public String ETNICO_ANTOriginalDbColumnName(){
				
					return "ETNICO_ANT";
				
				}

				
			    public Integer NSOCIOECONOMICOS_ID;

				public Integer getNSOCIOECONOMICOS_ID () {
					return this.NSOCIOECONOMICOS_ID;
				}

				public Boolean NSOCIOECONOMICOS_IDIsNullable(){
				    return true;
				}
				public Boolean NSOCIOECONOMICOS_IDIsKey(){
				    return false;
				}
				public Integer NSOCIOECONOMICOS_IDLength(){
				    return 0;
				}
				public Integer NSOCIOECONOMICOS_IDPrecision(){
				    return null;
				}
				public String NSOCIOECONOMICOS_IDDefault(){
				
					return "";
				
				}
				public String NSOCIOECONOMICOS_IDComment(){
				
				    return "";
				
				}
				public String NSOCIOECONOMICOS_IDPattern(){
				
					return "";
				
				}
				public String NSOCIOECONOMICOS_IDOriginalDbColumnName(){
				
					return "NSOCIOECONOMICOS_ID";
				
				}

				
			    public Integer NECONO_ANT;

				public Integer getNECONO_ANT () {
					return this.NECONO_ANT;
				}

				public Boolean NECONO_ANTIsNullable(){
				    return true;
				}
				public Boolean NECONO_ANTIsKey(){
				    return false;
				}
				public Integer NECONO_ANTLength(){
				    return 0;
				}
				public Integer NECONO_ANTPrecision(){
				    return null;
				}
				public String NECONO_ANTDefault(){
				
					return "";
				
				}
				public String NECONO_ANTComment(){
				
				    return "";
				
				}
				public String NECONO_ANTPattern(){
				
					return "";
				
				}
				public String NECONO_ANTOriginalDbColumnName(){
				
					return "NECONO_ANT";
				
				}

				
			    public Integer TVIVIENDA_ID;

				public Integer getTVIVIENDA_ID () {
					return this.TVIVIENDA_ID;
				}

				public Boolean TVIVIENDA_IDIsNullable(){
				    return true;
				}
				public Boolean TVIVIENDA_IDIsKey(){
				    return false;
				}
				public Integer TVIVIENDA_IDLength(){
				    return 0;
				}
				public Integer TVIVIENDA_IDPrecision(){
				    return null;
				}
				public String TVIVIENDA_IDDefault(){
				
					return "";
				
				}
				public String TVIVIENDA_IDComment(){
				
				    return "";
				
				}
				public String TVIVIENDA_IDPattern(){
				
					return "";
				
				}
				public String TVIVIENDA_IDOriginalDbColumnName(){
				
					return "TVIVIENDA_ID";
				
				}

				
			    public Integer TVIVIENDA_ANT;

				public Integer getTVIVIENDA_ANT () {
					return this.TVIVIENDA_ANT;
				}

				public Boolean TVIVIENDA_ANTIsNullable(){
				    return true;
				}
				public Boolean TVIVIENDA_ANTIsKey(){
				    return false;
				}
				public Integer TVIVIENDA_ANTLength(){
				    return 0;
				}
				public Integer TVIVIENDA_ANTPrecision(){
				    return null;
				}
				public String TVIVIENDA_ANTDefault(){
				
					return "";
				
				}
				public String TVIVIENDA_ANTComment(){
				
				    return "";
				
				}
				public String TVIVIENDA_ANTPattern(){
				
					return "";
				
				}
				public String TVIVIENDA_ANTOriginalDbColumnName(){
				
					return "TVIVIENDA_ANT";
				
				}

				
			    public Integer NEDUCATIVOS_ID;

				public Integer getNEDUCATIVOS_ID () {
					return this.NEDUCATIVOS_ID;
				}

				public Boolean NEDUCATIVOS_IDIsNullable(){
				    return true;
				}
				public Boolean NEDUCATIVOS_IDIsKey(){
				    return false;
				}
				public Integer NEDUCATIVOS_IDLength(){
				    return 0;
				}
				public Integer NEDUCATIVOS_IDPrecision(){
				    return null;
				}
				public String NEDUCATIVOS_IDDefault(){
				
					return "";
				
				}
				public String NEDUCATIVOS_IDComment(){
				
				    return "";
				
				}
				public String NEDUCATIVOS_IDPattern(){
				
					return "";
				
				}
				public String NEDUCATIVOS_IDOriginalDbColumnName(){
				
					return "NEDUCATIVOS_ID";
				
				}

				
			    public Integer NEDUCATIVO_ANT;

				public Integer getNEDUCATIVO_ANT () {
					return this.NEDUCATIVO_ANT;
				}

				public Boolean NEDUCATIVO_ANTIsNullable(){
				    return true;
				}
				public Boolean NEDUCATIVO_ANTIsKey(){
				    return false;
				}
				public Integer NEDUCATIVO_ANTLength(){
				    return 0;
				}
				public Integer NEDUCATIVO_ANTPrecision(){
				    return null;
				}
				public String NEDUCATIVO_ANTDefault(){
				
					return "";
				
				}
				public String NEDUCATIVO_ANTComment(){
				
				    return "";
				
				}
				public String NEDUCATIVO_ANTPattern(){
				
					return "";
				
				}
				public String NEDUCATIVO_ANTOriginalDbColumnName(){
				
					return "NEDUCATIVO_ANT";
				
				}

				
			    public Integer ESMADSCRITO;

				public Integer getESMADSCRITO () {
					return this.ESMADSCRITO;
				}

				public Boolean ESMADSCRITOIsNullable(){
				    return true;
				}
				public Boolean ESMADSCRITOIsKey(){
				    return false;
				}
				public Integer ESMADSCRITOLength(){
				    return 0;
				}
				public Integer ESMADSCRITOPrecision(){
				    return null;
				}
				public String ESMADSCRITODefault(){
				
					return "";
				
				}
				public String ESMADSCRITOComment(){
				
				    return "";
				
				}
				public String ESMADSCRITOPattern(){
				
					return "";
				
				}
				public String ESMADSCRITOOriginalDbColumnName(){
				
					return "ESMADSCRITO";
				
				}

				
			    public Integer ESM_ANT;

				public Integer getESM_ANT () {
					return this.ESM_ANT;
				}

				public Boolean ESM_ANTIsNullable(){
				    return true;
				}
				public Boolean ESM_ANTIsKey(){
				    return false;
				}
				public Integer ESM_ANTLength(){
				    return 0;
				}
				public Integer ESM_ANTPrecision(){
				    return null;
				}
				public String ESM_ANTDefault(){
				
					return "";
				
				}
				public String ESM_ANTComment(){
				
				    return "";
				
				}
				public String ESM_ANTPattern(){
				
					return "";
				
				}
				public String ESM_ANTOriginalDbColumnName(){
				
					return "ESM_ANT";
				
				}

				
			    public Integer ENTAPORTANTES_ID;

				public Integer getENTAPORTANTES_ID () {
					return this.ENTAPORTANTES_ID;
				}

				public Boolean ENTAPORTANTES_IDIsNullable(){
				    return true;
				}
				public Boolean ENTAPORTANTES_IDIsKey(){
				    return false;
				}
				public Integer ENTAPORTANTES_IDLength(){
				    return 0;
				}
				public Integer ENTAPORTANTES_IDPrecision(){
				    return null;
				}
				public String ENTAPORTANTES_IDDefault(){
				
					return "";
				
				}
				public String ENTAPORTANTES_IDComment(){
				
				    return "";
				
				}
				public String ENTAPORTANTES_IDPattern(){
				
					return "";
				
				}
				public String ENTAPORTANTES_IDOriginalDbColumnName(){
				
					return "ENTAPORTANTES_ID";
				
				}

				
			    public Integer ENTIDAD_ANT;

				public Integer getENTIDAD_ANT () {
					return this.ENTIDAD_ANT;
				}

				public Boolean ENTIDAD_ANTIsNullable(){
				    return true;
				}
				public Boolean ENTIDAD_ANTIsKey(){
				    return false;
				}
				public Integer ENTIDAD_ANTLength(){
				    return 0;
				}
				public Integer ENTIDAD_ANTPrecision(){
				    return null;
				}
				public String ENTIDAD_ANTDefault(){
				
					return "";
				
				}
				public String ENTIDAD_ANTComment(){
				
				    return "";
				
				}
				public String ENTIDAD_ANTPattern(){
				
					return "";
				
				}
				public String ENTIDAD_ANTOriginalDbColumnName(){
				
					return "ENTIDAD_ANT";
				
				}

				
			    public Integer GRDMILITARES_ID;

				public Integer getGRDMILITARES_ID () {
					return this.GRDMILITARES_ID;
				}

				public Boolean GRDMILITARES_IDIsNullable(){
				    return true;
				}
				public Boolean GRDMILITARES_IDIsKey(){
				    return false;
				}
				public Integer GRDMILITARES_IDLength(){
				    return 0;
				}
				public Integer GRDMILITARES_IDPrecision(){
				    return null;
				}
				public String GRDMILITARES_IDDefault(){
				
					return "";
				
				}
				public String GRDMILITARES_IDComment(){
				
				    return "";
				
				}
				public String GRDMILITARES_IDPattern(){
				
					return "";
				
				}
				public String GRDMILITARES_IDOriginalDbColumnName(){
				
					return "GRDMILITARES_ID";
				
				}

				
			    public Integer GRADO_ANT;

				public Integer getGRADO_ANT () {
					return this.GRADO_ANT;
				}

				public Boolean GRADO_ANTIsNullable(){
				    return true;
				}
				public Boolean GRADO_ANTIsKey(){
				    return false;
				}
				public Integer GRADO_ANTLength(){
				    return 0;
				}
				public Integer GRADO_ANTPrecision(){
				    return null;
				}
				public String GRADO_ANTDefault(){
				
					return "";
				
				}
				public String GRADO_ANTComment(){
				
				    return "";
				
				}
				public String GRADO_ANTPattern(){
				
					return "";
				
				}
				public String GRADO_ANTOriginalDbColumnName(){
				
					return "GRADO_ANT";
				
				}

				
			    public Integer FUERZAS_ID;

				public Integer getFUERZAS_ID () {
					return this.FUERZAS_ID;
				}

				public Boolean FUERZAS_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZAS_IDIsKey(){
				    return false;
				}
				public Integer FUERZAS_IDLength(){
				    return 0;
				}
				public Integer FUERZAS_IDPrecision(){
				    return null;
				}
				public String FUERZAS_IDDefault(){
				
					return "";
				
				}
				public String FUERZAS_IDComment(){
				
				    return "";
				
				}
				public String FUERZAS_IDPattern(){
				
					return "";
				
				}
				public String FUERZAS_IDOriginalDbColumnName(){
				
					return "FUERZAS_ID";
				
				}

				
			    public Integer FUERZA_ANT;

				public Integer getFUERZA_ANT () {
					return this.FUERZA_ANT;
				}

				public Boolean FUERZA_ANTIsNullable(){
				    return true;
				}
				public Boolean FUERZA_ANTIsKey(){
				    return false;
				}
				public Integer FUERZA_ANTLength(){
				    return 0;
				}
				public Integer FUERZA_ANTPrecision(){
				    return null;
				}
				public String FUERZA_ANTDefault(){
				
					return "";
				
				}
				public String FUERZA_ANTComment(){
				
				    return "";
				
				}
				public String FUERZA_ANTPattern(){
				
					return "";
				
				}
				public String FUERZA_ANTOriginalDbColumnName(){
				
					return "FUERZA_ANT";
				
				}

				
			    public Integer UMILITARES_ID;

				public Integer getUMILITARES_ID () {
					return this.UMILITARES_ID;
				}

				public Boolean UMILITARES_IDIsNullable(){
				    return true;
				}
				public Boolean UMILITARES_IDIsKey(){
				    return false;
				}
				public Integer UMILITARES_IDLength(){
				    return 0;
				}
				public Integer UMILITARES_IDPrecision(){
				    return null;
				}
				public String UMILITARES_IDDefault(){
				
					return "";
				
				}
				public String UMILITARES_IDComment(){
				
				    return "";
				
				}
				public String UMILITARES_IDPattern(){
				
					return "";
				
				}
				public String UMILITARES_IDOriginalDbColumnName(){
				
					return "UMILITARES_ID";
				
				}

				
			    public Integer UNIDAD_ANT;

				public Integer getUNIDAD_ANT () {
					return this.UNIDAD_ANT;
				}

				public Boolean UNIDAD_ANTIsNullable(){
				    return true;
				}
				public Boolean UNIDAD_ANTIsKey(){
				    return false;
				}
				public Integer UNIDAD_ANTLength(){
				    return 0;
				}
				public Integer UNIDAD_ANTPrecision(){
				    return null;
				}
				public String UNIDAD_ANTDefault(){
				
					return "";
				
				}
				public String UNIDAD_ANTComment(){
				
				    return "";
				
				}
				public String UNIDAD_ANTPattern(){
				
					return "";
				
				}
				public String UNIDAD_ANTOriginalDbColumnName(){
				
					return "UNIDAD_ANT";
				
				}

				
			    public Integer TVINCULACIONES_ID;

				public Integer getTVINCULACIONES_ID () {
					return this.TVINCULACIONES_ID;
				}

				public Boolean TVINCULACIONES_IDIsNullable(){
				    return true;
				}
				public Boolean TVINCULACIONES_IDIsKey(){
				    return false;
				}
				public Integer TVINCULACIONES_IDLength(){
				    return 0;
				}
				public Integer TVINCULACIONES_IDPrecision(){
				    return null;
				}
				public String TVINCULACIONES_IDDefault(){
				
					return "";
				
				}
				public String TVINCULACIONES_IDComment(){
				
				    return "";
				
				}
				public String TVINCULACIONES_IDPattern(){
				
					return "";
				
				}
				public String TVINCULACIONES_IDOriginalDbColumnName(){
				
					return "TVINCULACIONES_ID";
				
				}

				
			    public Integer TVINCULA_ANT;

				public Integer getTVINCULA_ANT () {
					return this.TVINCULA_ANT;
				}

				public Boolean TVINCULA_ANTIsNullable(){
				    return true;
				}
				public Boolean TVINCULA_ANTIsKey(){
				    return false;
				}
				public Integer TVINCULA_ANTLength(){
				    return 0;
				}
				public Integer TVINCULA_ANTPrecision(){
				    return null;
				}
				public String TVINCULA_ANTDefault(){
				
					return "";
				
				}
				public String TVINCULA_ANTComment(){
				
				    return "";
				
				}
				public String TVINCULA_ANTPattern(){
				
					return "";
				
				}
				public String TVINCULA_ANTOriginalDbColumnName(){
				
					return "TVINCULA_ANT";
				
				}

				
			    public String ESTADO_ENTIDAD;

				public String getESTADO_ENTIDAD () {
					return this.ESTADO_ENTIDAD;
				}

				public Boolean ESTADO_ENTIDADIsNullable(){
				    return true;
				}
				public Boolean ESTADO_ENTIDADIsKey(){
				    return false;
				}
				public Integer ESTADO_ENTIDADLength(){
				    return 10;
				}
				public Integer ESTADO_ENTIDADPrecision(){
				    return 0;
				}
				public String ESTADO_ENTIDADDefault(){
				
					return null;
				
				}
				public String ESTADO_ENTIDADComment(){
				
				    return "";
				
				}
				public String ESTADO_ENTIDADPattern(){
				
					return "";
				
				}
				public String ESTADO_ENTIDADOriginalDbColumnName(){
				
					return "ESTADO_ENTIDAD";
				
				}

				
			    public String ESTADO_ENT_ANT;

				public String getESTADO_ENT_ANT () {
					return this.ESTADO_ENT_ANT;
				}

				public Boolean ESTADO_ENT_ANTIsNullable(){
				    return true;
				}
				public Boolean ESTADO_ENT_ANTIsKey(){
				    return false;
				}
				public Integer ESTADO_ENT_ANTLength(){
				    return 8;
				}
				public Integer ESTADO_ENT_ANTPrecision(){
				    return 0;
				}
				public String ESTADO_ENT_ANTDefault(){
				
					return null;
				
				}
				public String ESTADO_ENT_ANTComment(){
				
				    return "";
				
				}
				public String ESTADO_ENT_ANTPattern(){
				
					return "";
				
				}
				public String ESTADO_ENT_ANTOriginalDbColumnName(){
				
					return "ESTADO_ENT_ANT";
				
				}

				
			    public Integer ENTIDAD_PRINCIPAL;

				public Integer getENTIDAD_PRINCIPAL () {
					return this.ENTIDAD_PRINCIPAL;
				}

				public Boolean ENTIDAD_PRINCIPALIsNullable(){
				    return true;
				}
				public Boolean ENTIDAD_PRINCIPALIsKey(){
				    return false;
				}
				public Integer ENTIDAD_PRINCIPALLength(){
				    return 0;
				}
				public Integer ENTIDAD_PRINCIPALPrecision(){
				    return null;
				}
				public String ENTIDAD_PRINCIPALDefault(){
				
					return "";
				
				}
				public String ENTIDAD_PRINCIPALComment(){
				
				    return "";
				
				}
				public String ENTIDAD_PRINCIPALPattern(){
				
					return "";
				
				}
				public String ENTIDAD_PRINCIPALOriginalDbColumnName(){
				
					return "ENTIDAD_PRINCIPAL";
				
				}

				
			    public Integer PRINCIPAL_ANT;

				public Integer getPRINCIPAL_ANT () {
					return this.PRINCIPAL_ANT;
				}

				public Boolean PRINCIPAL_ANTIsNullable(){
				    return true;
				}
				public Boolean PRINCIPAL_ANTIsKey(){
				    return false;
				}
				public Integer PRINCIPAL_ANTLength(){
				    return 0;
				}
				public Integer PRINCIPAL_ANTPrecision(){
				    return null;
				}
				public String PRINCIPAL_ANTDefault(){
				
					return "";
				
				}
				public String PRINCIPAL_ANTComment(){
				
				    return "";
				
				}
				public String PRINCIPAL_ANTPattern(){
				
					return "";
				
				}
				public String PRINCIPAL_ANTOriginalDbColumnName(){
				
					return "PRINCIPAL_ANT";
				
				}

				
			    public Integer TREGIMEN_ID;

				public Integer getTREGIMEN_ID () {
					return this.TREGIMEN_ID;
				}

				public Boolean TREGIMEN_IDIsNullable(){
				    return true;
				}
				public Boolean TREGIMEN_IDIsKey(){
				    return false;
				}
				public Integer TREGIMEN_IDLength(){
				    return 0;
				}
				public Integer TREGIMEN_IDPrecision(){
				    return null;
				}
				public String TREGIMEN_IDDefault(){
				
					return "";
				
				}
				public String TREGIMEN_IDComment(){
				
				    return "";
				
				}
				public String TREGIMEN_IDPattern(){
				
					return "";
				
				}
				public String TREGIMEN_IDOriginalDbColumnName(){
				
					return "TREGIMEN_ID";
				
				}

				
			    public Integer TREGIMEN_ANT;

				public Integer getTREGIMEN_ANT () {
					return this.TREGIMEN_ANT;
				}

				public Boolean TREGIMEN_ANTIsNullable(){
				    return true;
				}
				public Boolean TREGIMEN_ANTIsKey(){
				    return false;
				}
				public Integer TREGIMEN_ANTLength(){
				    return 0;
				}
				public Integer TREGIMEN_ANTPrecision(){
				    return null;
				}
				public String TREGIMEN_ANTDefault(){
				
					return "";
				
				}
				public String TREGIMEN_ANTComment(){
				
				    return "";
				
				}
				public String TREGIMEN_ANTPattern(){
				
					return "";
				
				}
				public String TREGIMEN_ANTOriginalDbColumnName(){
				
					return "TREGIMEN_ANT";
				
				}

				
			    public Integer ID_UNICO_ENTIDAD;

				public Integer getID_UNICO_ENTIDAD () {
					return this.ID_UNICO_ENTIDAD;
				}

				public Boolean ID_UNICO_ENTIDADIsNullable(){
				    return true;
				}
				public Boolean ID_UNICO_ENTIDADIsKey(){
				    return false;
				}
				public Integer ID_UNICO_ENTIDADLength(){
				    return 0;
				}
				public Integer ID_UNICO_ENTIDADPrecision(){
				    return null;
				}
				public String ID_UNICO_ENTIDADDefault(){
				
					return "";
				
				}
				public String ID_UNICO_ENTIDADComment(){
				
				    return "";
				
				}
				public String ID_UNICO_ENTIDADPattern(){
				
					return "";
				
				}
				public String ID_UNICO_ENTIDADOriginalDbColumnName(){
				
					return "ID_UNICO_ENTIDAD";
				
				}

				
			    public java.util.Date FECHA_CADUCIDAD;

				public java.util.Date getFECHA_CADUCIDAD () {
					return this.FECHA_CADUCIDAD;
				}

				public Boolean FECHA_CADUCIDADIsNullable(){
				    return true;
				}
				public Boolean FECHA_CADUCIDADIsKey(){
				    return false;
				}
				public Integer FECHA_CADUCIDADLength(){
				    return 0;
				}
				public Integer FECHA_CADUCIDADPrecision(){
				    return 0;
				}
				public String FECHA_CADUCIDADDefault(){
				
					return null;
				
				}
				public String FECHA_CADUCIDADComment(){
				
				    return "";
				
				}
				public String FECHA_CADUCIDADPattern(){
				
					return "";
				
				}
				public String FECHA_CADUCIDADOriginalDbColumnName(){
				
					return "FECHA_CADUCIDAD";
				
				}

				
			    public java.util.Date FCADUCIDAD_ANT;

				public java.util.Date getFCADUCIDAD_ANT () {
					return this.FCADUCIDAD_ANT;
				}

				public Boolean FCADUCIDAD_ANTIsNullable(){
				    return true;
				}
				public Boolean FCADUCIDAD_ANTIsKey(){
				    return false;
				}
				public Integer FCADUCIDAD_ANTLength(){
				    return 0;
				}
				public Integer FCADUCIDAD_ANTPrecision(){
				    return 0;
				}
				public String FCADUCIDAD_ANTDefault(){
				
					return null;
				
				}
				public String FCADUCIDAD_ANTComment(){
				
				    return "";
				
				}
				public String FCADUCIDAD_ANTPattern(){
				
					return "";
				
				}
				public String FCADUCIDAD_ANTOriginalDbColumnName(){
				
					return "FCADUCIDAD_ANT";
				
				}

				
			    public java.util.Date FECHA_VINCULACION;

				public java.util.Date getFECHA_VINCULACION () {
					return this.FECHA_VINCULACION;
				}

				public Boolean FECHA_VINCULACIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_VINCULACIONIsKey(){
				    return false;
				}
				public Integer FECHA_VINCULACIONLength(){
				    return 0;
				}
				public Integer FECHA_VINCULACIONPrecision(){
				    return 0;
				}
				public String FECHA_VINCULACIONDefault(){
				
					return null;
				
				}
				public String FECHA_VINCULACIONComment(){
				
				    return "";
				
				}
				public String FECHA_VINCULACIONPattern(){
				
					return "";
				
				}
				public String FECHA_VINCULACIONOriginalDbColumnName(){
				
					return "FECHA_VINCULACION";
				
				}

				
			    public java.util.Date FECHA_VINC_ANT;

				public java.util.Date getFECHA_VINC_ANT () {
					return this.FECHA_VINC_ANT;
				}

				public Boolean FECHA_VINC_ANTIsNullable(){
				    return true;
				}
				public Boolean FECHA_VINC_ANTIsKey(){
				    return false;
				}
				public Integer FECHA_VINC_ANTLength(){
				    return 0;
				}
				public Integer FECHA_VINC_ANTPrecision(){
				    return 0;
				}
				public String FECHA_VINC_ANTDefault(){
				
					return null;
				
				}
				public String FECHA_VINC_ANTComment(){
				
				    return "";
				
				}
				public String FECHA_VINC_ANTPattern(){
				
					return "";
				
				}
				public String FECHA_VINC_ANTOriginalDbColumnName(){
				
					return "FECHA_VINC_ANT";
				
				}

				
			    public Integer ESTADOS_ID;

				public Integer getESTADOS_ID () {
					return this.ESTADOS_ID;
				}

				public Boolean ESTADOS_IDIsNullable(){
				    return true;
				}
				public Boolean ESTADOS_IDIsKey(){
				    return false;
				}
				public Integer ESTADOS_IDLength(){
				    return 0;
				}
				public Integer ESTADOS_IDPrecision(){
				    return null;
				}
				public String ESTADOS_IDDefault(){
				
					return "";
				
				}
				public String ESTADOS_IDComment(){
				
				    return "";
				
				}
				public String ESTADOS_IDPattern(){
				
					return "";
				
				}
				public String ESTADOS_IDOriginalDbColumnName(){
				
					return "ESTADOS_ID";
				
				}

				
			    public int ESTADO_ANT;

				public int getESTADO_ANT () {
					return this.ESTADO_ANT;
				}

				public Boolean ESTADO_ANTIsNullable(){
				    return false;
				}
				public Boolean ESTADO_ANTIsKey(){
				    return false;
				}
				public Integer ESTADO_ANTLength(){
				    return 0;
				}
				public Integer ESTADO_ANTPrecision(){
				    return null;
				}
				public String ESTADO_ANTDefault(){
				
					return "";
				
				}
				public String ESTADO_ANTComment(){
				
				    return "";
				
				}
				public String ESTADO_ANTPattern(){
				
					return "";
				
				}
				public String ESTADO_ANTOriginalDbColumnName(){
				
					return "ESTADO_ANT";
				
				}

				
			    public String OBSERVACIONES;

				public String getOBSERVACIONES () {
					return this.OBSERVACIONES;
				}

				public Boolean OBSERVACIONESIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONESIsKey(){
				    return false;
				}
				public Integer OBSERVACIONESLength(){
				    return 400;
				}
				public Integer OBSERVACIONESPrecision(){
				    return 0;
				}
				public String OBSERVACIONESDefault(){
				
					return null;
				
				}
				public String OBSERVACIONESComment(){
				
				    return "";
				
				}
				public String OBSERVACIONESPattern(){
				
					return "";
				
				}
				public String OBSERVACIONESOriginalDbColumnName(){
				
					return "OBSERVACIONES";
				
				}

				
			    public Integer USUARIOS_ID;

				public Integer getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return true;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 0;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public Integer MOTIVOSESTADO_ID;

				public Integer getMOTIVOSESTADO_ID () {
					return this.MOTIVOSESTADO_ID;
				}

				public Boolean MOTIVOSESTADO_IDIsNullable(){
				    return true;
				}
				public Boolean MOTIVOSESTADO_IDIsKey(){
				    return false;
				}
				public Integer MOTIVOSESTADO_IDLength(){
				    return 0;
				}
				public Integer MOTIVOSESTADO_IDPrecision(){
				    return null;
				}
				public String MOTIVOSESTADO_IDDefault(){
				
					return "";
				
				}
				public String MOTIVOSESTADO_IDComment(){
				
				    return "";
				
				}
				public String MOTIVOSESTADO_IDPattern(){
				
					return "";
				
				}
				public String MOTIVOSESTADO_IDOriginalDbColumnName(){
				
					return "MOTIVOSESTADO_ID";
				
				}

				
			    public String MOTIVO;

				public String getMOTIVO () {
					return this.MOTIVO;
				}

				public Boolean MOTIVOIsNullable(){
				    return true;
				}
				public Boolean MOTIVOIsKey(){
				    return false;
				}
				public Integer MOTIVOLength(){
				    return 400;
				}
				public Integer MOTIVOPrecision(){
				    return 0;
				}
				public String MOTIVODefault(){
				
					return null;
				
				}
				public String MOTIVOComment(){
				
				    return "";
				
				}
				public String MOTIVOPattern(){
				
					return "";
				
				}
				public String MOTIVOOriginalDbColumnName(){
				
					return "MOTIVO";
				
				}

				
			    public Integer RNOVEDADES_ID;

				public Integer getRNOVEDADES_ID () {
					return this.RNOVEDADES_ID;
				}

				public Boolean RNOVEDADES_IDIsNullable(){
				    return true;
				}
				public Boolean RNOVEDADES_IDIsKey(){
				    return false;
				}
				public Integer RNOVEDADES_IDLength(){
				    return 0;
				}
				public Integer RNOVEDADES_IDPrecision(){
				    return null;
				}
				public String RNOVEDADES_IDDefault(){
				
					return "";
				
				}
				public String RNOVEDADES_IDComment(){
				
				    return "";
				
				}
				public String RNOVEDADES_IDPattern(){
				
					return "";
				
				}
				public String RNOVEDADES_IDOriginalDbColumnName(){
				
					return "RNOVEDADES_ID";
				
				}

				
			    public Integer PERSONAS_ID;

				public Integer getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public Integer AFILIADO_ID;

				public Integer getAFILIADO_ID () {
					return this.AFILIADO_ID;
				}

				public Boolean AFILIADO_IDIsNullable(){
				    return true;
				}
				public Boolean AFILIADO_IDIsKey(){
				    return false;
				}
				public Integer AFILIADO_IDLength(){
				    return 0;
				}
				public Integer AFILIADO_IDPrecision(){
				    return null;
				}
				public String AFILIADO_IDDefault(){
				
					return "";
				
				}
				public String AFILIADO_IDComment(){
				
				    return "";
				
				}
				public String AFILIADO_IDPattern(){
				
					return "";
				
				}
				public String AFILIADO_IDOriginalDbColumnName(){
				
					return "AFILIADO_ID";
				
				}

				
			    public String TIPO_AFILIADO;

				public String getTIPO_AFILIADO () {
					return this.TIPO_AFILIADO;
				}

				public Boolean TIPO_AFILIADOIsNullable(){
				    return true;
				}
				public Boolean TIPO_AFILIADOIsKey(){
				    return false;
				}
				public Integer TIPO_AFILIADOLength(){
				    return 5;
				}
				public Integer TIPO_AFILIADOPrecision(){
				    return 0;
				}
				public String TIPO_AFILIADODefault(){
				
					return null;
				
				}
				public String TIPO_AFILIADOComment(){
				
				    return "";
				
				}
				public String TIPO_AFILIADOPattern(){
				
					return "";
				
				}
				public String TIPO_AFILIADOOriginalDbColumnName(){
				
					return "TIPO_AFILIADO";
				
				}

				
			    public Integer PROCESADO;

				public Integer getPROCESADO () {
					return this.PROCESADO;
				}

				public Boolean PROCESADOIsNullable(){
				    return true;
				}
				public Boolean PROCESADOIsKey(){
				    return false;
				}
				public Integer PROCESADOLength(){
				    return null;
				}
				public Integer PROCESADOPrecision(){
				    return null;
				}
				public String PROCESADODefault(){
				
					return null;
				
				}
				public String PROCESADOComment(){
				
				    return "";
				
				}
				public String PROCESADOPattern(){
				
					return "";
				
				}
				public String PROCESADOOriginalDbColumnName(){
				
					return "PROCESADO";
				
				}

				
			    public String CORREO_ELECTRONICO;

				public String getCORREO_ELECTRONICO () {
					return this.CORREO_ELECTRONICO;
				}

				public Boolean CORREO_ELECTRONICOIsNullable(){
				    return true;
				}
				public Boolean CORREO_ELECTRONICOIsKey(){
				    return false;
				}
				public Integer CORREO_ELECTRONICOLength(){
				    return null;
				}
				public Integer CORREO_ELECTRONICOPrecision(){
				    return null;
				}
				public String CORREO_ELECTRONICODefault(){
				
					return null;
				
				}
				public String CORREO_ELECTRONICOComment(){
				
				    return "";
				
				}
				public String CORREO_ELECTRONICOPattern(){
				
					return "";
				
				}
				public String CORREO_ELECTRONICOOriginalDbColumnName(){
				
					return "CORREO_ELECTRONICO";
				
				}

				
			    public String CORREO_ELECTRONICO_ANT;

				public String getCORREO_ELECTRONICO_ANT () {
					return this.CORREO_ELECTRONICO_ANT;
				}

				public Boolean CORREO_ELECTRONICO_ANTIsNullable(){
				    return true;
				}
				public Boolean CORREO_ELECTRONICO_ANTIsKey(){
				    return false;
				}
				public Integer CORREO_ELECTRONICO_ANTLength(){
				    return null;
				}
				public Integer CORREO_ELECTRONICO_ANTPrecision(){
				    return null;
				}
				public String CORREO_ELECTRONICO_ANTDefault(){
				
					return null;
				
				}
				public String CORREO_ELECTRONICO_ANTComment(){
				
				    return "";
				
				}
				public String CORREO_ELECTRONICO_ANTPattern(){
				
					return "";
				
				}
				public String CORREO_ELECTRONICO_ANTOriginalDbColumnName(){
				
					return "CORREO_ELECTRONICO_ANT";
				
				}

				
			    public String CELULAR;

				public String getCELULAR () {
					return this.CELULAR;
				}

				public Boolean CELULARIsNullable(){
				    return true;
				}
				public Boolean CELULARIsKey(){
				    return false;
				}
				public Integer CELULARLength(){
				    return null;
				}
				public Integer CELULARPrecision(){
				    return null;
				}
				public String CELULARDefault(){
				
					return null;
				
				}
				public String CELULARComment(){
				
				    return "";
				
				}
				public String CELULARPattern(){
				
					return "";
				
				}
				public String CELULAROriginalDbColumnName(){
				
					return "CELULAR";
				
				}

				
			    public String CELULAR_ANT;

				public String getCELULAR_ANT () {
					return this.CELULAR_ANT;
				}

				public Boolean CELULAR_ANTIsNullable(){
				    return true;
				}
				public Boolean CELULAR_ANTIsKey(){
				    return false;
				}
				public Integer CELULAR_ANTLength(){
				    return null;
				}
				public Integer CELULAR_ANTPrecision(){
				    return null;
				}
				public String CELULAR_ANTDefault(){
				
					return null;
				
				}
				public String CELULAR_ANTComment(){
				
				    return "";
				
				}
				public String CELULAR_ANTPattern(){
				
					return "";
				
				}
				public String CELULAR_ANTOriginalDbColumnName(){
				
					return "CELULAR_ANT";
				
				}

				
			    public java.util.Date FECHA_DEFUNCION;

				public java.util.Date getFECHA_DEFUNCION () {
					return this.FECHA_DEFUNCION;
				}

				public Boolean FECHA_DEFUNCIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_DEFUNCIONIsKey(){
				    return false;
				}
				public Integer FECHA_DEFUNCIONLength(){
				    return null;
				}
				public Integer FECHA_DEFUNCIONPrecision(){
				    return null;
				}
				public String FECHA_DEFUNCIONDefault(){
				
					return null;
				
				}
				public String FECHA_DEFUNCIONComment(){
				
				    return "";
				
				}
				public String FECHA_DEFUNCIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_DEFUNCIONOriginalDbColumnName(){
				
					return "FECHA_DEFUNCION";
				
				}

				
			    public java.util.Date FECHA_DEFUNCION_ANT;

				public java.util.Date getFECHA_DEFUNCION_ANT () {
					return this.FECHA_DEFUNCION_ANT;
				}

				public Boolean FECHA_DEFUNCION_ANTIsNullable(){
				    return true;
				}
				public Boolean FECHA_DEFUNCION_ANTIsKey(){
				    return false;
				}
				public Integer FECHA_DEFUNCION_ANTLength(){
				    return null;
				}
				public Integer FECHA_DEFUNCION_ANTPrecision(){
				    return null;
				}
				public String FECHA_DEFUNCION_ANTDefault(){
				
					return null;
				
				}
				public String FECHA_DEFUNCION_ANTComment(){
				
				    return "";
				
				}
				public String FECHA_DEFUNCION_ANTPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_DEFUNCION_ANTOriginalDbColumnName(){
				
					return "FECHA_DEFUNCION_ANT";
				
				}

				
			    public Integer PLANAFILIACIONES_ID;

				public Integer getPLANAFILIACIONES_ID () {
					return this.PLANAFILIACIONES_ID;
				}

				public Boolean PLANAFILIACIONES_IDIsNullable(){
				    return true;
				}
				public Boolean PLANAFILIACIONES_IDIsKey(){
				    return false;
				}
				public Integer PLANAFILIACIONES_IDLength(){
				    return null;
				}
				public Integer PLANAFILIACIONES_IDPrecision(){
				    return null;
				}
				public String PLANAFILIACIONES_IDDefault(){
				
					return null;
				
				}
				public String PLANAFILIACIONES_IDComment(){
				
				    return "";
				
				}
				public String PLANAFILIACIONES_IDPattern(){
				
					return "";
				
				}
				public String PLANAFILIACIONES_IDOriginalDbColumnName(){
				
					return "PLANAFILIACIONES_ID";
				
				}

				
			    public Integer PLANAFILIACIONES_ID_ANT;

				public Integer getPLANAFILIACIONES_ID_ANT () {
					return this.PLANAFILIACIONES_ID_ANT;
				}

				public Boolean PLANAFILIACIONES_ID_ANTIsNullable(){
				    return true;
				}
				public Boolean PLANAFILIACIONES_ID_ANTIsKey(){
				    return false;
				}
				public Integer PLANAFILIACIONES_ID_ANTLength(){
				    return null;
				}
				public Integer PLANAFILIACIONES_ID_ANTPrecision(){
				    return null;
				}
				public String PLANAFILIACIONES_ID_ANTDefault(){
				
					return null;
				
				}
				public String PLANAFILIACIONES_ID_ANTComment(){
				
				    return "";
				
				}
				public String PLANAFILIACIONES_ID_ANTPattern(){
				
					return "";
				
				}
				public String PLANAFILIACIONES_ID_ANTOriginalDbColumnName(){
				
					return "PLANAFILIACIONES_ID_ANT";
				
				}

				
			    public Integer ID_BDUA;

				public Integer getID_BDUA () {
					return this.ID_BDUA;
				}

				public Boolean ID_BDUAIsNullable(){
				    return true;
				}
				public Boolean ID_BDUAIsKey(){
				    return false;
				}
				public Integer ID_BDUALength(){
				    return null;
				}
				public Integer ID_BDUAPrecision(){
				    return null;
				}
				public String ID_BDUADefault(){
				
					return null;
				
				}
				public String ID_BDUAComment(){
				
				    return "";
				
				}
				public String ID_BDUAPattern(){
				
					return "";
				
				}
				public String ID_BDUAOriginalDbColumnName(){
				
					return "ID_BDUA";
				
				}

				
			    public Integer ID_BDUA_ANT;

				public Integer getID_BDUA_ANT () {
					return this.ID_BDUA_ANT;
				}

				public Boolean ID_BDUA_ANTIsNullable(){
				    return true;
				}
				public Boolean ID_BDUA_ANTIsKey(){
				    return false;
				}
				public Integer ID_BDUA_ANTLength(){
				    return null;
				}
				public Integer ID_BDUA_ANTPrecision(){
				    return null;
				}
				public String ID_BDUA_ANTDefault(){
				
					return null;
				
				}
				public String ID_BDUA_ANTComment(){
				
				    return "";
				
				}
				public String ID_BDUA_ANTPattern(){
				
					return "";
				
				}
				public String ID_BDUA_ANTOriginalDbColumnName(){
				
					return "ID_BDUA_ANT";
				
				}

				
			    public String MOTIVO_CAMBIO_ESTADO;

				public String getMOTIVO_CAMBIO_ESTADO () {
					return this.MOTIVO_CAMBIO_ESTADO;
				}

				public Boolean MOTIVO_CAMBIO_ESTADOIsNullable(){
				    return true;
				}
				public Boolean MOTIVO_CAMBIO_ESTADOIsKey(){
				    return false;
				}
				public Integer MOTIVO_CAMBIO_ESTADOLength(){
				    return null;
				}
				public Integer MOTIVO_CAMBIO_ESTADOPrecision(){
				    return null;
				}
				public String MOTIVO_CAMBIO_ESTADODefault(){
				
					return null;
				
				}
				public String MOTIVO_CAMBIO_ESTADOComment(){
				
				    return "";
				
				}
				public String MOTIVO_CAMBIO_ESTADOPattern(){
				
					return "";
				
				}
				public String MOTIVO_CAMBIO_ESTADOOriginalDbColumnName(){
				
					return "MOTIVO_CAMBIO_ESTADO";
				
				}

				
			    public String MOTIVO_CAMBIO_ESM;

				public String getMOTIVO_CAMBIO_ESM () {
					return this.MOTIVO_CAMBIO_ESM;
				}

				public Boolean MOTIVO_CAMBIO_ESMIsNullable(){
				    return true;
				}
				public Boolean MOTIVO_CAMBIO_ESMIsKey(){
				    return false;
				}
				public Integer MOTIVO_CAMBIO_ESMLength(){
				    return null;
				}
				public Integer MOTIVO_CAMBIO_ESMPrecision(){
				    return null;
				}
				public String MOTIVO_CAMBIO_ESMDefault(){
				
					return null;
				
				}
				public String MOTIVO_CAMBIO_ESMComment(){
				
				    return "";
				
				}
				public String MOTIVO_CAMBIO_ESMPattern(){
				
					return "";
				
				}
				public String MOTIVO_CAMBIO_ESMOriginalDbColumnName(){
				
					return "MOTIVO_CAMBIO_ESM";
				
				}

				
			    public Integer TDISCAPACIDADES_ID;

				public Integer getTDISCAPACIDADES_ID () {
					return this.TDISCAPACIDADES_ID;
				}

				public Boolean TDISCAPACIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean TDISCAPACIDADES_IDIsKey(){
				    return false;
				}
				public Integer TDISCAPACIDADES_IDLength(){
				    return null;
				}
				public Integer TDISCAPACIDADES_IDPrecision(){
				    return null;
				}
				public String TDISCAPACIDADES_IDDefault(){
				
					return null;
				
				}
				public String TDISCAPACIDADES_IDComment(){
				
				    return "";
				
				}
				public String TDISCAPACIDADES_IDPattern(){
				
					return "";
				
				}
				public String TDISCAPACIDADES_IDOriginalDbColumnName(){
				
					return "TDISCAPACIDADES_ID";
				
				}

				
			    public Integer TDISCAPACIDADES_ID_ANT;

				public Integer getTDISCAPACIDADES_ID_ANT () {
					return this.TDISCAPACIDADES_ID_ANT;
				}

				public Boolean TDISCAPACIDADES_ID_ANTIsNullable(){
				    return true;
				}
				public Boolean TDISCAPACIDADES_ID_ANTIsKey(){
				    return false;
				}
				public Integer TDISCAPACIDADES_ID_ANTLength(){
				    return null;
				}
				public Integer TDISCAPACIDADES_ID_ANTPrecision(){
				    return null;
				}
				public String TDISCAPACIDADES_ID_ANTDefault(){
				
					return null;
				
				}
				public String TDISCAPACIDADES_ID_ANTComment(){
				
				    return "";
				
				}
				public String TDISCAPACIDADES_ID_ANTPattern(){
				
					return "";
				
				}
				public String TDISCAPACIDADES_ID_ANTOriginalDbColumnName(){
				
					return "TDISCAPACIDADES_ID_ANT";
				
				}

				
			    public Integer PESPECIAL_ID;

				public Integer getPESPECIAL_ID () {
					return this.PESPECIAL_ID;
				}

				public Boolean PESPECIAL_IDIsNullable(){
				    return true;
				}
				public Boolean PESPECIAL_IDIsKey(){
				    return false;
				}
				public Integer PESPECIAL_IDLength(){
				    return null;
				}
				public Integer PESPECIAL_IDPrecision(){
				    return null;
				}
				public String PESPECIAL_IDDefault(){
				
					return null;
				
				}
				public String PESPECIAL_IDComment(){
				
				    return "";
				
				}
				public String PESPECIAL_IDPattern(){
				
					return "";
				
				}
				public String PESPECIAL_IDOriginalDbColumnName(){
				
					return "PESPECIAL_ID";
				
				}

				
			    public Integer PESPECIAL_ID_ANT;

				public Integer getPESPECIAL_ID_ANT () {
					return this.PESPECIAL_ID_ANT;
				}

				public Boolean PESPECIAL_ID_ANTIsNullable(){
				    return true;
				}
				public Boolean PESPECIAL_ID_ANTIsKey(){
				    return false;
				}
				public Integer PESPECIAL_ID_ANTLength(){
				    return null;
				}
				public Integer PESPECIAL_ID_ANTPrecision(){
				    return null;
				}
				public String PESPECIAL_ID_ANTDefault(){
				
					return null;
				
				}
				public String PESPECIAL_ID_ANTComment(){
				
				    return "";
				
				}
				public String PESPECIAL_ID_ANTPattern(){
				
					return "";
				
				}
				public String PESPECIAL_ID_ANTOriginalDbColumnName(){
				
					return "PESPECIAL_ID_ANT";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.PRIMER_NOMBRE = readString(dis);
					
					this.PNOMBRE_ANT = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.SNOMBRE_ANT = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.PAPELLIDO_ANT = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.SAPELLIDO_ANT = readString(dis);
					
						this.TDOCUMENTOS_ID = readInteger(dis);
					
			        this.TDOCUMENTO_ANT = dis.readInt();
					
					this.DOCUMENTO = readString(dis);
					
					this.DOCUMENTO_ANT = readString(dis);
					
						this.LUGAR_EXP_DOC = readInteger(dis);
					
						this.LUGAR_EXPEDICION = readInteger(dis);
					
						this.SEXOS_ID = readInteger(dis);
					
			        this.SEXO_ANT = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ESTATURA = null;
           				} else {
           			    	this.ESTATURA = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ESTATURA_ANT = null;
           				} else {
           			    	this.ESTATURA_ANT = dis.readFloat();
           				}
					
					this.FECHA_EXPEDICION_DOCUMENTO = readDate(dis);
					
					this.FECHAEX_ANT = readDate(dis);
					
					this.FECHA_NACIMIENTO = readDate(dis);
					
					this.FECHAN_ANT = readDate(dis);
					
						this.LUGAR_NACIMIENTO = readInteger(dis);
					
						this.LNACIMIENTO = readInteger(dis);
					
					this.DIRECCION = readString(dis);
					
					this.DIRECCION_ANT = readString(dis);
					
						this.LUGAR_RESIDENCIA = readInteger(dis);
					
						this.LRESIDENCIA = readInteger(dis);
					
						this.LOCALIDADES_ID = readInteger(dis);
					
						this.LOCALIDAD_ANT = readInteger(dis);
					
						this.GSANGUINEOS_ID = readInteger(dis);
					
						this.GRUPOS_ANT = readInteger(dis);
					
					this.TELEFONO = readString(dis);
					
					this.TELEFONO_ANT = readString(dis);
					
						this.OCUPACIONES_ID = readInteger(dis);
					
						this.OCUPACION_ANT = readInteger(dis);
					
						this.ETNICAS_ID = readInteger(dis);
					
						this.ETNICO_ANT = readInteger(dis);
					
						this.NSOCIOECONOMICOS_ID = readInteger(dis);
					
						this.NECONO_ANT = readInteger(dis);
					
						this.TVIVIENDA_ID = readInteger(dis);
					
						this.TVIVIENDA_ANT = readInteger(dis);
					
						this.NEDUCATIVOS_ID = readInteger(dis);
					
						this.NEDUCATIVO_ANT = readInteger(dis);
					
						this.ESMADSCRITO = readInteger(dis);
					
						this.ESM_ANT = readInteger(dis);
					
						this.ENTAPORTANTES_ID = readInteger(dis);
					
						this.ENTIDAD_ANT = readInteger(dis);
					
						this.GRDMILITARES_ID = readInteger(dis);
					
						this.GRADO_ANT = readInteger(dis);
					
						this.FUERZAS_ID = readInteger(dis);
					
						this.FUERZA_ANT = readInteger(dis);
					
						this.UMILITARES_ID = readInteger(dis);
					
						this.UNIDAD_ANT = readInteger(dis);
					
						this.TVINCULACIONES_ID = readInteger(dis);
					
						this.TVINCULA_ANT = readInteger(dis);
					
					this.ESTADO_ENTIDAD = readString(dis);
					
					this.ESTADO_ENT_ANT = readString(dis);
					
						this.ENTIDAD_PRINCIPAL = readInteger(dis);
					
						this.PRINCIPAL_ANT = readInteger(dis);
					
						this.TREGIMEN_ID = readInteger(dis);
					
						this.TREGIMEN_ANT = readInteger(dis);
					
						this.ID_UNICO_ENTIDAD = readInteger(dis);
					
					this.FECHA_CADUCIDAD = readDate(dis);
					
					this.FCADUCIDAD_ANT = readDate(dis);
					
					this.FECHA_VINCULACION = readDate(dis);
					
					this.FECHA_VINC_ANT = readDate(dis);
					
						this.ESTADOS_ID = readInteger(dis);
					
			        this.ESTADO_ANT = dis.readInt();
					
					this.OBSERVACIONES = readString(dis);
					
						this.USUARIOS_ID = readInteger(dis);
					
						this.MOTIVOSESTADO_ID = readInteger(dis);
					
					this.MOTIVO = readString(dis);
					
						this.RNOVEDADES_ID = readInteger(dis);
					
						this.PERSONAS_ID = readInteger(dis);
					
						this.AFILIADO_ID = readInteger(dis);
					
					this.TIPO_AFILIADO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
					this.CORREO_ELECTRONICO = readString(dis);
					
					this.CORREO_ELECTRONICO_ANT = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.CELULAR_ANT = readString(dis);
					
					this.FECHA_DEFUNCION = readDate(dis);
					
					this.FECHA_DEFUNCION_ANT = readDate(dis);
					
						this.PLANAFILIACIONES_ID = readInteger(dis);
					
						this.PLANAFILIACIONES_ID_ANT = readInteger(dis);
					
						this.ID_BDUA = readInteger(dis);
					
						this.ID_BDUA_ANT = readInteger(dis);
					
					this.MOTIVO_CAMBIO_ESTADO = readString(dis);
					
					this.MOTIVO_CAMBIO_ESM = readString(dis);
					
						this.TDISCAPACIDADES_ID = readInteger(dis);
					
						this.TDISCAPACIDADES_ID_ANT = readInteger(dis);
					
						this.PESPECIAL_ID = readInteger(dis);
					
						this.PESPECIAL_ID_ANT = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.PRIMER_NOMBRE = readString(dis);
					
					this.PNOMBRE_ANT = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.SNOMBRE_ANT = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.PAPELLIDO_ANT = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.SAPELLIDO_ANT = readString(dis);
					
						this.TDOCUMENTOS_ID = readInteger(dis);
					
			        this.TDOCUMENTO_ANT = dis.readInt();
					
					this.DOCUMENTO = readString(dis);
					
					this.DOCUMENTO_ANT = readString(dis);
					
						this.LUGAR_EXP_DOC = readInteger(dis);
					
						this.LUGAR_EXPEDICION = readInteger(dis);
					
						this.SEXOS_ID = readInteger(dis);
					
			        this.SEXO_ANT = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ESTATURA = null;
           				} else {
           			    	this.ESTATURA = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ESTATURA_ANT = null;
           				} else {
           			    	this.ESTATURA_ANT = dis.readFloat();
           				}
					
					this.FECHA_EXPEDICION_DOCUMENTO = readDate(dis);
					
					this.FECHAEX_ANT = readDate(dis);
					
					this.FECHA_NACIMIENTO = readDate(dis);
					
					this.FECHAN_ANT = readDate(dis);
					
						this.LUGAR_NACIMIENTO = readInteger(dis);
					
						this.LNACIMIENTO = readInteger(dis);
					
					this.DIRECCION = readString(dis);
					
					this.DIRECCION_ANT = readString(dis);
					
						this.LUGAR_RESIDENCIA = readInteger(dis);
					
						this.LRESIDENCIA = readInteger(dis);
					
						this.LOCALIDADES_ID = readInteger(dis);
					
						this.LOCALIDAD_ANT = readInteger(dis);
					
						this.GSANGUINEOS_ID = readInteger(dis);
					
						this.GRUPOS_ANT = readInteger(dis);
					
					this.TELEFONO = readString(dis);
					
					this.TELEFONO_ANT = readString(dis);
					
						this.OCUPACIONES_ID = readInteger(dis);
					
						this.OCUPACION_ANT = readInteger(dis);
					
						this.ETNICAS_ID = readInteger(dis);
					
						this.ETNICO_ANT = readInteger(dis);
					
						this.NSOCIOECONOMICOS_ID = readInteger(dis);
					
						this.NECONO_ANT = readInteger(dis);
					
						this.TVIVIENDA_ID = readInteger(dis);
					
						this.TVIVIENDA_ANT = readInteger(dis);
					
						this.NEDUCATIVOS_ID = readInteger(dis);
					
						this.NEDUCATIVO_ANT = readInteger(dis);
					
						this.ESMADSCRITO = readInteger(dis);
					
						this.ESM_ANT = readInteger(dis);
					
						this.ENTAPORTANTES_ID = readInteger(dis);
					
						this.ENTIDAD_ANT = readInteger(dis);
					
						this.GRDMILITARES_ID = readInteger(dis);
					
						this.GRADO_ANT = readInteger(dis);
					
						this.FUERZAS_ID = readInteger(dis);
					
						this.FUERZA_ANT = readInteger(dis);
					
						this.UMILITARES_ID = readInteger(dis);
					
						this.UNIDAD_ANT = readInteger(dis);
					
						this.TVINCULACIONES_ID = readInteger(dis);
					
						this.TVINCULA_ANT = readInteger(dis);
					
					this.ESTADO_ENTIDAD = readString(dis);
					
					this.ESTADO_ENT_ANT = readString(dis);
					
						this.ENTIDAD_PRINCIPAL = readInteger(dis);
					
						this.PRINCIPAL_ANT = readInteger(dis);
					
						this.TREGIMEN_ID = readInteger(dis);
					
						this.TREGIMEN_ANT = readInteger(dis);
					
						this.ID_UNICO_ENTIDAD = readInteger(dis);
					
					this.FECHA_CADUCIDAD = readDate(dis);
					
					this.FCADUCIDAD_ANT = readDate(dis);
					
					this.FECHA_VINCULACION = readDate(dis);
					
					this.FECHA_VINC_ANT = readDate(dis);
					
						this.ESTADOS_ID = readInteger(dis);
					
			        this.ESTADO_ANT = dis.readInt();
					
					this.OBSERVACIONES = readString(dis);
					
						this.USUARIOS_ID = readInteger(dis);
					
						this.MOTIVOSESTADO_ID = readInteger(dis);
					
					this.MOTIVO = readString(dis);
					
						this.RNOVEDADES_ID = readInteger(dis);
					
						this.PERSONAS_ID = readInteger(dis);
					
						this.AFILIADO_ID = readInteger(dis);
					
					this.TIPO_AFILIADO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
					this.CORREO_ELECTRONICO = readString(dis);
					
					this.CORREO_ELECTRONICO_ANT = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.CELULAR_ANT = readString(dis);
					
					this.FECHA_DEFUNCION = readDate(dis);
					
					this.FECHA_DEFUNCION_ANT = readDate(dis);
					
						this.PLANAFILIACIONES_ID = readInteger(dis);
					
						this.PLANAFILIACIONES_ID_ANT = readInteger(dis);
					
						this.ID_BDUA = readInteger(dis);
					
						this.ID_BDUA_ANT = readInteger(dis);
					
					this.MOTIVO_CAMBIO_ESTADO = readString(dis);
					
					this.MOTIVO_CAMBIO_ESM = readString(dis);
					
						this.TDISCAPACIDADES_ID = readInteger(dis);
					
						this.TDISCAPACIDADES_ID_ANT = readInteger(dis);
					
						this.PESPECIAL_ID = readInteger(dis);
					
						this.PESPECIAL_ID_ANT = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.PNOMBRE_ANT,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.SNOMBRE_ANT,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.PAPELLIDO_ANT,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.SAPELLIDO_ANT,dos);
					
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// int
				
		            	dos.writeInt(this.TDOCUMENTO_ANT);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ANT,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_EXP_DOC,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_EXPEDICION,dos);
					
					// Integer
				
						writeInteger(this.SEXOS_ID,dos);
					
					// int
				
		            	dos.writeInt(this.SEXO_ANT);
					
					// Float
				
						if(this.ESTATURA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ESTATURA);
		            	}
					
					// Float
				
						if(this.ESTATURA_ANT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ESTATURA_ANT);
		            	}
					
					// java.util.Date
				
						writeDate(this.FECHA_EXPEDICION_DOCUMENTO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAEX_ANT,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_NACIMIENTO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAN_ANT,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_NACIMIENTO,dos);
					
					// Integer
				
						writeInteger(this.LNACIMIENTO,dos);
					
					// String
				
						writeString(this.DIRECCION,dos);
					
					// String
				
						writeString(this.DIRECCION_ANT,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_RESIDENCIA,dos);
					
					// Integer
				
						writeInteger(this.LRESIDENCIA,dos);
					
					// Integer
				
						writeInteger(this.LOCALIDADES_ID,dos);
					
					// Integer
				
						writeInteger(this.LOCALIDAD_ANT,dos);
					
					// Integer
				
						writeInteger(this.GSANGUINEOS_ID,dos);
					
					// Integer
				
						writeInteger(this.GRUPOS_ANT,dos);
					
					// String
				
						writeString(this.TELEFONO,dos);
					
					// String
				
						writeString(this.TELEFONO_ANT,dos);
					
					// Integer
				
						writeInteger(this.OCUPACIONES_ID,dos);
					
					// Integer
				
						writeInteger(this.OCUPACION_ANT,dos);
					
					// Integer
				
						writeInteger(this.ETNICAS_ID,dos);
					
					// Integer
				
						writeInteger(this.ETNICO_ANT,dos);
					
					// Integer
				
						writeInteger(this.NSOCIOECONOMICOS_ID,dos);
					
					// Integer
				
						writeInteger(this.NECONO_ANT,dos);
					
					// Integer
				
						writeInteger(this.TVIVIENDA_ID,dos);
					
					// Integer
				
						writeInteger(this.TVIVIENDA_ANT,dos);
					
					// Integer
				
						writeInteger(this.NEDUCATIVOS_ID,dos);
					
					// Integer
				
						writeInteger(this.NEDUCATIVO_ANT,dos);
					
					// Integer
				
						writeInteger(this.ESMADSCRITO,dos);
					
					// Integer
				
						writeInteger(this.ESM_ANT,dos);
					
					// Integer
				
						writeInteger(this.ENTAPORTANTES_ID,dos);
					
					// Integer
				
						writeInteger(this.ENTIDAD_ANT,dos);
					
					// Integer
				
						writeInteger(this.GRDMILITARES_ID,dos);
					
					// Integer
				
						writeInteger(this.GRADO_ANT,dos);
					
					// Integer
				
						writeInteger(this.FUERZAS_ID,dos);
					
					// Integer
				
						writeInteger(this.FUERZA_ANT,dos);
					
					// Integer
				
						writeInteger(this.UMILITARES_ID,dos);
					
					// Integer
				
						writeInteger(this.UNIDAD_ANT,dos);
					
					// Integer
				
						writeInteger(this.TVINCULACIONES_ID,dos);
					
					// Integer
				
						writeInteger(this.TVINCULA_ANT,dos);
					
					// String
				
						writeString(this.ESTADO_ENTIDAD,dos);
					
					// String
				
						writeString(this.ESTADO_ENT_ANT,dos);
					
					// Integer
				
						writeInteger(this.ENTIDAD_PRINCIPAL,dos);
					
					// Integer
				
						writeInteger(this.PRINCIPAL_ANT,dos);
					
					// Integer
				
						writeInteger(this.TREGIMEN_ID,dos);
					
					// Integer
				
						writeInteger(this.TREGIMEN_ANT,dos);
					
					// Integer
				
						writeInteger(this.ID_UNICO_ENTIDAD,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_CADUCIDAD,dos);
					
					// java.util.Date
				
						writeDate(this.FCADUCIDAD_ANT,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_VINCULACION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_VINC_ANT,dos);
					
					// Integer
				
						writeInteger(this.ESTADOS_ID,dos);
					
					// int
				
		            	dos.writeInt(this.ESTADO_ANT);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// Integer
				
						writeInteger(this.USUARIOS_ID,dos);
					
					// Integer
				
						writeInteger(this.MOTIVOSESTADO_ID,dos);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// Integer
				
						writeInteger(this.RNOVEDADES_ID,dos);
					
					// Integer
				
						writeInteger(this.PERSONAS_ID,dos);
					
					// Integer
				
						writeInteger(this.AFILIADO_ID,dos);
					
					// String
				
						writeString(this.TIPO_AFILIADO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
					// String
				
						writeString(this.CORREO_ELECTRONICO,dos);
					
					// String
				
						writeString(this.CORREO_ELECTRONICO_ANT,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// String
				
						writeString(this.CELULAR_ANT,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_DEFUNCION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_DEFUNCION_ANT,dos);
					
					// Integer
				
						writeInteger(this.PLANAFILIACIONES_ID,dos);
					
					// Integer
				
						writeInteger(this.PLANAFILIACIONES_ID_ANT,dos);
					
					// Integer
				
						writeInteger(this.ID_BDUA,dos);
					
					// Integer
				
						writeInteger(this.ID_BDUA_ANT,dos);
					
					// String
				
						writeString(this.MOTIVO_CAMBIO_ESTADO,dos);
					
					// String
				
						writeString(this.MOTIVO_CAMBIO_ESM,dos);
					
					// Integer
				
						writeInteger(this.TDISCAPACIDADES_ID,dos);
					
					// Integer
				
						writeInteger(this.TDISCAPACIDADES_ID_ANT,dos);
					
					// Integer
				
						writeInteger(this.PESPECIAL_ID,dos);
					
					// Integer
				
						writeInteger(this.PESPECIAL_ID_ANT,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.PNOMBRE_ANT,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.SNOMBRE_ANT,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.PAPELLIDO_ANT,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.SAPELLIDO_ANT,dos);
					
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// int
				
		            	dos.writeInt(this.TDOCUMENTO_ANT);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ANT,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_EXP_DOC,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_EXPEDICION,dos);
					
					// Integer
				
						writeInteger(this.SEXOS_ID,dos);
					
					// int
				
		            	dos.writeInt(this.SEXO_ANT);
					
					// Float
				
						if(this.ESTATURA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ESTATURA);
		            	}
					
					// Float
				
						if(this.ESTATURA_ANT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ESTATURA_ANT);
		            	}
					
					// java.util.Date
				
						writeDate(this.FECHA_EXPEDICION_DOCUMENTO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAEX_ANT,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_NACIMIENTO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAN_ANT,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_NACIMIENTO,dos);
					
					// Integer
				
						writeInteger(this.LNACIMIENTO,dos);
					
					// String
				
						writeString(this.DIRECCION,dos);
					
					// String
				
						writeString(this.DIRECCION_ANT,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_RESIDENCIA,dos);
					
					// Integer
				
						writeInteger(this.LRESIDENCIA,dos);
					
					// Integer
				
						writeInteger(this.LOCALIDADES_ID,dos);
					
					// Integer
				
						writeInteger(this.LOCALIDAD_ANT,dos);
					
					// Integer
				
						writeInteger(this.GSANGUINEOS_ID,dos);
					
					// Integer
				
						writeInteger(this.GRUPOS_ANT,dos);
					
					// String
				
						writeString(this.TELEFONO,dos);
					
					// String
				
						writeString(this.TELEFONO_ANT,dos);
					
					// Integer
				
						writeInteger(this.OCUPACIONES_ID,dos);
					
					// Integer
				
						writeInteger(this.OCUPACION_ANT,dos);
					
					// Integer
				
						writeInteger(this.ETNICAS_ID,dos);
					
					// Integer
				
						writeInteger(this.ETNICO_ANT,dos);
					
					// Integer
				
						writeInteger(this.NSOCIOECONOMICOS_ID,dos);
					
					// Integer
				
						writeInteger(this.NECONO_ANT,dos);
					
					// Integer
				
						writeInteger(this.TVIVIENDA_ID,dos);
					
					// Integer
				
						writeInteger(this.TVIVIENDA_ANT,dos);
					
					// Integer
				
						writeInteger(this.NEDUCATIVOS_ID,dos);
					
					// Integer
				
						writeInteger(this.NEDUCATIVO_ANT,dos);
					
					// Integer
				
						writeInteger(this.ESMADSCRITO,dos);
					
					// Integer
				
						writeInteger(this.ESM_ANT,dos);
					
					// Integer
				
						writeInteger(this.ENTAPORTANTES_ID,dos);
					
					// Integer
				
						writeInteger(this.ENTIDAD_ANT,dos);
					
					// Integer
				
						writeInteger(this.GRDMILITARES_ID,dos);
					
					// Integer
				
						writeInteger(this.GRADO_ANT,dos);
					
					// Integer
				
						writeInteger(this.FUERZAS_ID,dos);
					
					// Integer
				
						writeInteger(this.FUERZA_ANT,dos);
					
					// Integer
				
						writeInteger(this.UMILITARES_ID,dos);
					
					// Integer
				
						writeInteger(this.UNIDAD_ANT,dos);
					
					// Integer
				
						writeInteger(this.TVINCULACIONES_ID,dos);
					
					// Integer
				
						writeInteger(this.TVINCULA_ANT,dos);
					
					// String
				
						writeString(this.ESTADO_ENTIDAD,dos);
					
					// String
				
						writeString(this.ESTADO_ENT_ANT,dos);
					
					// Integer
				
						writeInteger(this.ENTIDAD_PRINCIPAL,dos);
					
					// Integer
				
						writeInteger(this.PRINCIPAL_ANT,dos);
					
					// Integer
				
						writeInteger(this.TREGIMEN_ID,dos);
					
					// Integer
				
						writeInteger(this.TREGIMEN_ANT,dos);
					
					// Integer
				
						writeInteger(this.ID_UNICO_ENTIDAD,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_CADUCIDAD,dos);
					
					// java.util.Date
				
						writeDate(this.FCADUCIDAD_ANT,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_VINCULACION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_VINC_ANT,dos);
					
					// Integer
				
						writeInteger(this.ESTADOS_ID,dos);
					
					// int
				
		            	dos.writeInt(this.ESTADO_ANT);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// Integer
				
						writeInteger(this.USUARIOS_ID,dos);
					
					// Integer
				
						writeInteger(this.MOTIVOSESTADO_ID,dos);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// Integer
				
						writeInteger(this.RNOVEDADES_ID,dos);
					
					// Integer
				
						writeInteger(this.PERSONAS_ID,dos);
					
					// Integer
				
						writeInteger(this.AFILIADO_ID,dos);
					
					// String
				
						writeString(this.TIPO_AFILIADO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
					// String
				
						writeString(this.CORREO_ELECTRONICO,dos);
					
					// String
				
						writeString(this.CORREO_ELECTRONICO_ANT,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// String
				
						writeString(this.CELULAR_ANT,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_DEFUNCION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_DEFUNCION_ANT,dos);
					
					// Integer
				
						writeInteger(this.PLANAFILIACIONES_ID,dos);
					
					// Integer
				
						writeInteger(this.PLANAFILIACIONES_ID_ANT,dos);
					
					// Integer
				
						writeInteger(this.ID_BDUA,dos);
					
					// Integer
				
						writeInteger(this.ID_BDUA_ANT,dos);
					
					// String
				
						writeString(this.MOTIVO_CAMBIO_ESTADO,dos);
					
					// String
				
						writeString(this.MOTIVO_CAMBIO_ESM,dos);
					
					// Integer
				
						writeInteger(this.TDISCAPACIDADES_ID,dos);
					
					// Integer
				
						writeInteger(this.TDISCAPACIDADES_ID_ANT,dos);
					
					// Integer
				
						writeInteger(this.PESPECIAL_ID,dos);
					
					// Integer
				
						writeInteger(this.PESPECIAL_ID_ANT,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",PNOMBRE_ANT="+PNOMBRE_ANT);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",SNOMBRE_ANT="+SNOMBRE_ANT);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",PAPELLIDO_ANT="+PAPELLIDO_ANT);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",SAPELLIDO_ANT="+SAPELLIDO_ANT);
		sb.append(",TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",TDOCUMENTO_ANT="+String.valueOf(TDOCUMENTO_ANT));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",DOCUMENTO_ANT="+DOCUMENTO_ANT);
		sb.append(",LUGAR_EXP_DOC="+String.valueOf(LUGAR_EXP_DOC));
		sb.append(",LUGAR_EXPEDICION="+String.valueOf(LUGAR_EXPEDICION));
		sb.append(",SEXOS_ID="+String.valueOf(SEXOS_ID));
		sb.append(",SEXO_ANT="+String.valueOf(SEXO_ANT));
		sb.append(",ESTATURA="+String.valueOf(ESTATURA));
		sb.append(",ESTATURA_ANT="+String.valueOf(ESTATURA_ANT));
		sb.append(",FECHA_EXPEDICION_DOCUMENTO="+String.valueOf(FECHA_EXPEDICION_DOCUMENTO));
		sb.append(",FECHAEX_ANT="+String.valueOf(FECHAEX_ANT));
		sb.append(",FECHA_NACIMIENTO="+String.valueOf(FECHA_NACIMIENTO));
		sb.append(",FECHAN_ANT="+String.valueOf(FECHAN_ANT));
		sb.append(",LUGAR_NACIMIENTO="+String.valueOf(LUGAR_NACIMIENTO));
		sb.append(",LNACIMIENTO="+String.valueOf(LNACIMIENTO));
		sb.append(",DIRECCION="+DIRECCION);
		sb.append(",DIRECCION_ANT="+DIRECCION_ANT);
		sb.append(",LUGAR_RESIDENCIA="+String.valueOf(LUGAR_RESIDENCIA));
		sb.append(",LRESIDENCIA="+String.valueOf(LRESIDENCIA));
		sb.append(",LOCALIDADES_ID="+String.valueOf(LOCALIDADES_ID));
		sb.append(",LOCALIDAD_ANT="+String.valueOf(LOCALIDAD_ANT));
		sb.append(",GSANGUINEOS_ID="+String.valueOf(GSANGUINEOS_ID));
		sb.append(",GRUPOS_ANT="+String.valueOf(GRUPOS_ANT));
		sb.append(",TELEFONO="+TELEFONO);
		sb.append(",TELEFONO_ANT="+TELEFONO_ANT);
		sb.append(",OCUPACIONES_ID="+String.valueOf(OCUPACIONES_ID));
		sb.append(",OCUPACION_ANT="+String.valueOf(OCUPACION_ANT));
		sb.append(",ETNICAS_ID="+String.valueOf(ETNICAS_ID));
		sb.append(",ETNICO_ANT="+String.valueOf(ETNICO_ANT));
		sb.append(",NSOCIOECONOMICOS_ID="+String.valueOf(NSOCIOECONOMICOS_ID));
		sb.append(",NECONO_ANT="+String.valueOf(NECONO_ANT));
		sb.append(",TVIVIENDA_ID="+String.valueOf(TVIVIENDA_ID));
		sb.append(",TVIVIENDA_ANT="+String.valueOf(TVIVIENDA_ANT));
		sb.append(",NEDUCATIVOS_ID="+String.valueOf(NEDUCATIVOS_ID));
		sb.append(",NEDUCATIVO_ANT="+String.valueOf(NEDUCATIVO_ANT));
		sb.append(",ESMADSCRITO="+String.valueOf(ESMADSCRITO));
		sb.append(",ESM_ANT="+String.valueOf(ESM_ANT));
		sb.append(",ENTAPORTANTES_ID="+String.valueOf(ENTAPORTANTES_ID));
		sb.append(",ENTIDAD_ANT="+String.valueOf(ENTIDAD_ANT));
		sb.append(",GRDMILITARES_ID="+String.valueOf(GRDMILITARES_ID));
		sb.append(",GRADO_ANT="+String.valueOf(GRADO_ANT));
		sb.append(",FUERZAS_ID="+String.valueOf(FUERZAS_ID));
		sb.append(",FUERZA_ANT="+String.valueOf(FUERZA_ANT));
		sb.append(",UMILITARES_ID="+String.valueOf(UMILITARES_ID));
		sb.append(",UNIDAD_ANT="+String.valueOf(UNIDAD_ANT));
		sb.append(",TVINCULACIONES_ID="+String.valueOf(TVINCULACIONES_ID));
		sb.append(",TVINCULA_ANT="+String.valueOf(TVINCULA_ANT));
		sb.append(",ESTADO_ENTIDAD="+ESTADO_ENTIDAD);
		sb.append(",ESTADO_ENT_ANT="+ESTADO_ENT_ANT);
		sb.append(",ENTIDAD_PRINCIPAL="+String.valueOf(ENTIDAD_PRINCIPAL));
		sb.append(",PRINCIPAL_ANT="+String.valueOf(PRINCIPAL_ANT));
		sb.append(",TREGIMEN_ID="+String.valueOf(TREGIMEN_ID));
		sb.append(",TREGIMEN_ANT="+String.valueOf(TREGIMEN_ANT));
		sb.append(",ID_UNICO_ENTIDAD="+String.valueOf(ID_UNICO_ENTIDAD));
		sb.append(",FECHA_CADUCIDAD="+String.valueOf(FECHA_CADUCIDAD));
		sb.append(",FCADUCIDAD_ANT="+String.valueOf(FCADUCIDAD_ANT));
		sb.append(",FECHA_VINCULACION="+String.valueOf(FECHA_VINCULACION));
		sb.append(",FECHA_VINC_ANT="+String.valueOf(FECHA_VINC_ANT));
		sb.append(",ESTADOS_ID="+String.valueOf(ESTADOS_ID));
		sb.append(",ESTADO_ANT="+String.valueOf(ESTADO_ANT));
		sb.append(",OBSERVACIONES="+OBSERVACIONES);
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",MOTIVOSESTADO_ID="+String.valueOf(MOTIVOSESTADO_ID));
		sb.append(",MOTIVO="+MOTIVO);
		sb.append(",RNOVEDADES_ID="+String.valueOf(RNOVEDADES_ID));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",AFILIADO_ID="+String.valueOf(AFILIADO_ID));
		sb.append(",TIPO_AFILIADO="+TIPO_AFILIADO);
		sb.append(",PROCESADO="+String.valueOf(PROCESADO));
		sb.append(",CORREO_ELECTRONICO="+CORREO_ELECTRONICO);
		sb.append(",CORREO_ELECTRONICO_ANT="+CORREO_ELECTRONICO_ANT);
		sb.append(",CELULAR="+CELULAR);
		sb.append(",CELULAR_ANT="+CELULAR_ANT);
		sb.append(",FECHA_DEFUNCION="+String.valueOf(FECHA_DEFUNCION));
		sb.append(",FECHA_DEFUNCION_ANT="+String.valueOf(FECHA_DEFUNCION_ANT));
		sb.append(",PLANAFILIACIONES_ID="+String.valueOf(PLANAFILIACIONES_ID));
		sb.append(",PLANAFILIACIONES_ID_ANT="+String.valueOf(PLANAFILIACIONES_ID_ANT));
		sb.append(",ID_BDUA="+String.valueOf(ID_BDUA));
		sb.append(",ID_BDUA_ANT="+String.valueOf(ID_BDUA_ANT));
		sb.append(",MOTIVO_CAMBIO_ESTADO="+MOTIVO_CAMBIO_ESTADO);
		sb.append(",MOTIVO_CAMBIO_ESM="+MOTIVO_CAMBIO_ESM);
		sb.append(",TDISCAPACIDADES_ID="+String.valueOf(TDISCAPACIDADES_ID));
		sb.append(",TDISCAPACIDADES_ID_ANT="+String.valueOf(TDISCAPACIDADES_ID_ANT));
		sb.append(",PESPECIAL_ID="+String.valueOf(PESPECIAL_ID));
		sb.append(",PESPECIAL_ID_ANT="+String.valueOf(PESPECIAL_ID_ANT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row44Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_34Struct implements routines.system.IPersistableRow<after_tOracleInput_34Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 400;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String PNOMBRE_ANT;

				public String getPNOMBRE_ANT () {
					return this.PNOMBRE_ANT;
				}

				public Boolean PNOMBRE_ANTIsNullable(){
				    return true;
				}
				public Boolean PNOMBRE_ANTIsKey(){
				    return false;
				}
				public Integer PNOMBRE_ANTLength(){
				    return 100;
				}
				public Integer PNOMBRE_ANTPrecision(){
				    return 0;
				}
				public String PNOMBRE_ANTDefault(){
				
					return null;
				
				}
				public String PNOMBRE_ANTComment(){
				
				    return "";
				
				}
				public String PNOMBRE_ANTPattern(){
				
					return "";
				
				}
				public String PNOMBRE_ANTOriginalDbColumnName(){
				
					return "PNOMBRE_ANT";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 400;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String SNOMBRE_ANT;

				public String getSNOMBRE_ANT () {
					return this.SNOMBRE_ANT;
				}

				public Boolean SNOMBRE_ANTIsNullable(){
				    return true;
				}
				public Boolean SNOMBRE_ANTIsKey(){
				    return false;
				}
				public Integer SNOMBRE_ANTLength(){
				    return 100;
				}
				public Integer SNOMBRE_ANTPrecision(){
				    return 0;
				}
				public String SNOMBRE_ANTDefault(){
				
					return null;
				
				}
				public String SNOMBRE_ANTComment(){
				
				    return "";
				
				}
				public String SNOMBRE_ANTPattern(){
				
					return "";
				
				}
				public String SNOMBRE_ANTOriginalDbColumnName(){
				
					return "SNOMBRE_ANT";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 400;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String PAPELLIDO_ANT;

				public String getPAPELLIDO_ANT () {
					return this.PAPELLIDO_ANT;
				}

				public Boolean PAPELLIDO_ANTIsNullable(){
				    return true;
				}
				public Boolean PAPELLIDO_ANTIsKey(){
				    return false;
				}
				public Integer PAPELLIDO_ANTLength(){
				    return 100;
				}
				public Integer PAPELLIDO_ANTPrecision(){
				    return 0;
				}
				public String PAPELLIDO_ANTDefault(){
				
					return null;
				
				}
				public String PAPELLIDO_ANTComment(){
				
				    return "";
				
				}
				public String PAPELLIDO_ANTPattern(){
				
					return "";
				
				}
				public String PAPELLIDO_ANTOriginalDbColumnName(){
				
					return "PAPELLIDO_ANT";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 400;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String SAPELLIDO_ANT;

				public String getSAPELLIDO_ANT () {
					return this.SAPELLIDO_ANT;
				}

				public Boolean SAPELLIDO_ANTIsNullable(){
				    return true;
				}
				public Boolean SAPELLIDO_ANTIsKey(){
				    return false;
				}
				public Integer SAPELLIDO_ANTLength(){
				    return 100;
				}
				public Integer SAPELLIDO_ANTPrecision(){
				    return 0;
				}
				public String SAPELLIDO_ANTDefault(){
				
					return null;
				
				}
				public String SAPELLIDO_ANTComment(){
				
				    return "";
				
				}
				public String SAPELLIDO_ANTPattern(){
				
					return "";
				
				}
				public String SAPELLIDO_ANTOriginalDbColumnName(){
				
					return "SAPELLIDO_ANT";
				
				}

				
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public int TDOCUMENTO_ANT;

				public int getTDOCUMENTO_ANT () {
					return this.TDOCUMENTO_ANT;
				}

				public Boolean TDOCUMENTO_ANTIsNullable(){
				    return false;
				}
				public Boolean TDOCUMENTO_ANTIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_ANTLength(){
				    return 0;
				}
				public Integer TDOCUMENTO_ANTPrecision(){
				    return null;
				}
				public String TDOCUMENTO_ANTDefault(){
				
					return "";
				
				}
				public String TDOCUMENTO_ANTComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_ANTPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_ANTOriginalDbColumnName(){
				
					return "TDOCUMENTO_ANT";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String DOCUMENTO_ANT;

				public String getDOCUMENTO_ANT () {
					return this.DOCUMENTO_ANT;
				}

				public Boolean DOCUMENTO_ANTIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTO_ANTIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_ANTLength(){
				    return 40;
				}
				public Integer DOCUMENTO_ANTPrecision(){
				    return 0;
				}
				public String DOCUMENTO_ANTDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_ANTComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_ANTPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_ANTOriginalDbColumnName(){
				
					return "DOCUMENTO_ANT";
				
				}

				
			    public Integer LUGAR_EXP_DOC;

				public Integer getLUGAR_EXP_DOC () {
					return this.LUGAR_EXP_DOC;
				}

				public Boolean LUGAR_EXP_DOCIsNullable(){
				    return true;
				}
				public Boolean LUGAR_EXP_DOCIsKey(){
				    return false;
				}
				public Integer LUGAR_EXP_DOCLength(){
				    return 0;
				}
				public Integer LUGAR_EXP_DOCPrecision(){
				    return null;
				}
				public String LUGAR_EXP_DOCDefault(){
				
					return "";
				
				}
				public String LUGAR_EXP_DOCComment(){
				
				    return "";
				
				}
				public String LUGAR_EXP_DOCPattern(){
				
					return "";
				
				}
				public String LUGAR_EXP_DOCOriginalDbColumnName(){
				
					return "LUGAR_EXP_DOC";
				
				}

				
			    public Integer LUGAR_EXPEDICION;

				public Integer getLUGAR_EXPEDICION () {
					return this.LUGAR_EXPEDICION;
				}

				public Boolean LUGAR_EXPEDICIONIsNullable(){
				    return true;
				}
				public Boolean LUGAR_EXPEDICIONIsKey(){
				    return false;
				}
				public Integer LUGAR_EXPEDICIONLength(){
				    return 0;
				}
				public Integer LUGAR_EXPEDICIONPrecision(){
				    return null;
				}
				public String LUGAR_EXPEDICIONDefault(){
				
					return "";
				
				}
				public String LUGAR_EXPEDICIONComment(){
				
				    return "";
				
				}
				public String LUGAR_EXPEDICIONPattern(){
				
					return "";
				
				}
				public String LUGAR_EXPEDICIONOriginalDbColumnName(){
				
					return "LUGAR_EXPEDICION";
				
				}

				
			    public Integer SEXOS_ID;

				public Integer getSEXOS_ID () {
					return this.SEXOS_ID;
				}

				public Boolean SEXOS_IDIsNullable(){
				    return true;
				}
				public Boolean SEXOS_IDIsKey(){
				    return false;
				}
				public Integer SEXOS_IDLength(){
				    return 0;
				}
				public Integer SEXOS_IDPrecision(){
				    return null;
				}
				public String SEXOS_IDDefault(){
				
					return "";
				
				}
				public String SEXOS_IDComment(){
				
				    return "";
				
				}
				public String SEXOS_IDPattern(){
				
					return "";
				
				}
				public String SEXOS_IDOriginalDbColumnName(){
				
					return "SEXOS_ID";
				
				}

				
			    public int SEXO_ANT;

				public int getSEXO_ANT () {
					return this.SEXO_ANT;
				}

				public Boolean SEXO_ANTIsNullable(){
				    return false;
				}
				public Boolean SEXO_ANTIsKey(){
				    return false;
				}
				public Integer SEXO_ANTLength(){
				    return 0;
				}
				public Integer SEXO_ANTPrecision(){
				    return null;
				}
				public String SEXO_ANTDefault(){
				
					return "";
				
				}
				public String SEXO_ANTComment(){
				
				    return "";
				
				}
				public String SEXO_ANTPattern(){
				
					return "";
				
				}
				public String SEXO_ANTOriginalDbColumnName(){
				
					return "SEXO_ANT";
				
				}

				
			    public Float ESTATURA;

				public Float getESTATURA () {
					return this.ESTATURA;
				}

				public Boolean ESTATURAIsNullable(){
				    return true;
				}
				public Boolean ESTATURAIsKey(){
				    return false;
				}
				public Integer ESTATURALength(){
				    return 10;
				}
				public Integer ESTATURAPrecision(){
				    return 2;
				}
				public String ESTATURADefault(){
				
					return "";
				
				}
				public String ESTATURAComment(){
				
				    return "";
				
				}
				public String ESTATURAPattern(){
				
					return "";
				
				}
				public String ESTATURAOriginalDbColumnName(){
				
					return "ESTATURA";
				
				}

				
			    public Float ESTATURA_ANT;

				public Float getESTATURA_ANT () {
					return this.ESTATURA_ANT;
				}

				public Boolean ESTATURA_ANTIsNullable(){
				    return true;
				}
				public Boolean ESTATURA_ANTIsKey(){
				    return false;
				}
				public Integer ESTATURA_ANTLength(){
				    return 0;
				}
				public Integer ESTATURA_ANTPrecision(){
				    return null;
				}
				public String ESTATURA_ANTDefault(){
				
					return "";
				
				}
				public String ESTATURA_ANTComment(){
				
				    return "";
				
				}
				public String ESTATURA_ANTPattern(){
				
					return "";
				
				}
				public String ESTATURA_ANTOriginalDbColumnName(){
				
					return "ESTATURA_ANT";
				
				}

				
			    public java.util.Date FECHA_EXPEDICION_DOCUMENTO;

				public java.util.Date getFECHA_EXPEDICION_DOCUMENTO () {
					return this.FECHA_EXPEDICION_DOCUMENTO;
				}

				public Boolean FECHA_EXPEDICION_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_EXPEDICION_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer FECHA_EXPEDICION_DOCUMENTOLength(){
				    return null;
				}
				public Integer FECHA_EXPEDICION_DOCUMENTOPrecision(){
				    return null;
				}
				public String FECHA_EXPEDICION_DOCUMENTODefault(){
				
					return null;
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOOriginalDbColumnName(){
				
					return "FECHA_EXPEDICION_DOCUMENTO";
				
				}

				
			    public java.util.Date FECHAEX_ANT;

				public java.util.Date getFECHAEX_ANT () {
					return this.FECHAEX_ANT;
				}

				public Boolean FECHAEX_ANTIsNullable(){
				    return true;
				}
				public Boolean FECHAEX_ANTIsKey(){
				    return false;
				}
				public Integer FECHAEX_ANTLength(){
				    return null;
				}
				public Integer FECHAEX_ANTPrecision(){
				    return null;
				}
				public String FECHAEX_ANTDefault(){
				
					return null;
				
				}
				public String FECHAEX_ANTComment(){
				
				    return "";
				
				}
				public String FECHAEX_ANTPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAEX_ANTOriginalDbColumnName(){
				
					return "FECHAEX_ANT";
				
				}

				
			    public java.util.Date FECHA_NACIMIENTO;

				public java.util.Date getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return 0;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return 0;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public java.util.Date FECHAN_ANT;

				public java.util.Date getFECHAN_ANT () {
					return this.FECHAN_ANT;
				}

				public Boolean FECHAN_ANTIsNullable(){
				    return true;
				}
				public Boolean FECHAN_ANTIsKey(){
				    return false;
				}
				public Integer FECHAN_ANTLength(){
				    return 0;
				}
				public Integer FECHAN_ANTPrecision(){
				    return 0;
				}
				public String FECHAN_ANTDefault(){
				
					return null;
				
				}
				public String FECHAN_ANTComment(){
				
				    return "";
				
				}
				public String FECHAN_ANTPattern(){
				
					return "";
				
				}
				public String FECHAN_ANTOriginalDbColumnName(){
				
					return "FECHAN_ANT";
				
				}

				
			    public Integer LUGAR_NACIMIENTO;

				public Integer getLUGAR_NACIMIENTO () {
					return this.LUGAR_NACIMIENTO;
				}

				public Boolean LUGAR_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean LUGAR_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer LUGAR_NACIMIENTOLength(){
				    return 0;
				}
				public Integer LUGAR_NACIMIENTOPrecision(){
				    return null;
				}
				public String LUGAR_NACIMIENTODefault(){
				
					return "";
				
				}
				public String LUGAR_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String LUGAR_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String LUGAR_NACIMIENTOOriginalDbColumnName(){
				
					return "LUGAR_NACIMIENTO";
				
				}

				
			    public Integer LNACIMIENTO;

				public Integer getLNACIMIENTO () {
					return this.LNACIMIENTO;
				}

				public Boolean LNACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean LNACIMIENTOIsKey(){
				    return false;
				}
				public Integer LNACIMIENTOLength(){
				    return 0;
				}
				public Integer LNACIMIENTOPrecision(){
				    return null;
				}
				public String LNACIMIENTODefault(){
				
					return "";
				
				}
				public String LNACIMIENTOComment(){
				
				    return "";
				
				}
				public String LNACIMIENTOPattern(){
				
					return "";
				
				}
				public String LNACIMIENTOOriginalDbColumnName(){
				
					return "LNACIMIENTO";
				
				}

				
			    public String DIRECCION;

				public String getDIRECCION () {
					return this.DIRECCION;
				}

				public Boolean DIRECCIONIsNullable(){
				    return true;
				}
				public Boolean DIRECCIONIsKey(){
				    return false;
				}
				public Integer DIRECCIONLength(){
				    return 400;
				}
				public Integer DIRECCIONPrecision(){
				    return 0;
				}
				public String DIRECCIONDefault(){
				
					return null;
				
				}
				public String DIRECCIONComment(){
				
				    return "";
				
				}
				public String DIRECCIONPattern(){
				
					return "";
				
				}
				public String DIRECCIONOriginalDbColumnName(){
				
					return "DIRECCION";
				
				}

				
			    public String DIRECCION_ANT;

				public String getDIRECCION_ANT () {
					return this.DIRECCION_ANT;
				}

				public Boolean DIRECCION_ANTIsNullable(){
				    return true;
				}
				public Boolean DIRECCION_ANTIsKey(){
				    return false;
				}
				public Integer DIRECCION_ANTLength(){
				    return 500;
				}
				public Integer DIRECCION_ANTPrecision(){
				    return 0;
				}
				public String DIRECCION_ANTDefault(){
				
					return null;
				
				}
				public String DIRECCION_ANTComment(){
				
				    return "";
				
				}
				public String DIRECCION_ANTPattern(){
				
					return "";
				
				}
				public String DIRECCION_ANTOriginalDbColumnName(){
				
					return "DIRECCION_ANT";
				
				}

				
			    public Integer LUGAR_RESIDENCIA;

				public Integer getLUGAR_RESIDENCIA () {
					return this.LUGAR_RESIDENCIA;
				}

				public Boolean LUGAR_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean LUGAR_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer LUGAR_RESIDENCIALength(){
				    return 0;
				}
				public Integer LUGAR_RESIDENCIAPrecision(){
				    return null;
				}
				public String LUGAR_RESIDENCIADefault(){
				
					return "";
				
				}
				public String LUGAR_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String LUGAR_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String LUGAR_RESIDENCIAOriginalDbColumnName(){
				
					return "LUGAR_RESIDENCIA";
				
				}

				
			    public Integer LRESIDENCIA;

				public Integer getLRESIDENCIA () {
					return this.LRESIDENCIA;
				}

				public Boolean LRESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean LRESIDENCIAIsKey(){
				    return false;
				}
				public Integer LRESIDENCIALength(){
				    return 0;
				}
				public Integer LRESIDENCIAPrecision(){
				    return null;
				}
				public String LRESIDENCIADefault(){
				
					return "";
				
				}
				public String LRESIDENCIAComment(){
				
				    return "";
				
				}
				public String LRESIDENCIAPattern(){
				
					return "";
				
				}
				public String LRESIDENCIAOriginalDbColumnName(){
				
					return "LRESIDENCIA";
				
				}

				
			    public Integer LOCALIDADES_ID;

				public Integer getLOCALIDADES_ID () {
					return this.LOCALIDADES_ID;
				}

				public Boolean LOCALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean LOCALIDADES_IDIsKey(){
				    return false;
				}
				public Integer LOCALIDADES_IDLength(){
				    return 0;
				}
				public Integer LOCALIDADES_IDPrecision(){
				    return null;
				}
				public String LOCALIDADES_IDDefault(){
				
					return "";
				
				}
				public String LOCALIDADES_IDComment(){
				
				    return "";
				
				}
				public String LOCALIDADES_IDPattern(){
				
					return "";
				
				}
				public String LOCALIDADES_IDOriginalDbColumnName(){
				
					return "LOCALIDADES_ID";
				
				}

				
			    public Integer LOCALIDAD_ANT;

				public Integer getLOCALIDAD_ANT () {
					return this.LOCALIDAD_ANT;
				}

				public Boolean LOCALIDAD_ANTIsNullable(){
				    return true;
				}
				public Boolean LOCALIDAD_ANTIsKey(){
				    return false;
				}
				public Integer LOCALIDAD_ANTLength(){
				    return 0;
				}
				public Integer LOCALIDAD_ANTPrecision(){
				    return null;
				}
				public String LOCALIDAD_ANTDefault(){
				
					return "";
				
				}
				public String LOCALIDAD_ANTComment(){
				
				    return "";
				
				}
				public String LOCALIDAD_ANTPattern(){
				
					return "";
				
				}
				public String LOCALIDAD_ANTOriginalDbColumnName(){
				
					return "LOCALIDAD_ANT";
				
				}

				
			    public Integer GSANGUINEOS_ID;

				public Integer getGSANGUINEOS_ID () {
					return this.GSANGUINEOS_ID;
				}

				public Boolean GSANGUINEOS_IDIsNullable(){
				    return true;
				}
				public Boolean GSANGUINEOS_IDIsKey(){
				    return false;
				}
				public Integer GSANGUINEOS_IDLength(){
				    return 0;
				}
				public Integer GSANGUINEOS_IDPrecision(){
				    return null;
				}
				public String GSANGUINEOS_IDDefault(){
				
					return "";
				
				}
				public String GSANGUINEOS_IDComment(){
				
				    return "";
				
				}
				public String GSANGUINEOS_IDPattern(){
				
					return "";
				
				}
				public String GSANGUINEOS_IDOriginalDbColumnName(){
				
					return "GSANGUINEOS_ID";
				
				}

				
			    public Integer GRUPOS_ANT;

				public Integer getGRUPOS_ANT () {
					return this.GRUPOS_ANT;
				}

				public Boolean GRUPOS_ANTIsNullable(){
				    return true;
				}
				public Boolean GRUPOS_ANTIsKey(){
				    return false;
				}
				public Integer GRUPOS_ANTLength(){
				    return 0;
				}
				public Integer GRUPOS_ANTPrecision(){
				    return null;
				}
				public String GRUPOS_ANTDefault(){
				
					return "";
				
				}
				public String GRUPOS_ANTComment(){
				
				    return "";
				
				}
				public String GRUPOS_ANTPattern(){
				
					return "";
				
				}
				public String GRUPOS_ANTOriginalDbColumnName(){
				
					return "GRUPOS_ANT";
				
				}

				
			    public String TELEFONO;

				public String getTELEFONO () {
					return this.TELEFONO;
				}

				public Boolean TELEFONOIsNullable(){
				    return true;
				}
				public Boolean TELEFONOIsKey(){
				    return false;
				}
				public Integer TELEFONOLength(){
				    return 400;
				}
				public Integer TELEFONOPrecision(){
				    return 0;
				}
				public String TELEFONODefault(){
				
					return null;
				
				}
				public String TELEFONOComment(){
				
				    return "";
				
				}
				public String TELEFONOPattern(){
				
					return "";
				
				}
				public String TELEFONOOriginalDbColumnName(){
				
					return "TELEFONO";
				
				}

				
			    public String TELEFONO_ANT;

				public String getTELEFONO_ANT () {
					return this.TELEFONO_ANT;
				}

				public Boolean TELEFONO_ANTIsNullable(){
				    return true;
				}
				public Boolean TELEFONO_ANTIsKey(){
				    return false;
				}
				public Integer TELEFONO_ANTLength(){
				    return 50;
				}
				public Integer TELEFONO_ANTPrecision(){
				    return 0;
				}
				public String TELEFONO_ANTDefault(){
				
					return null;
				
				}
				public String TELEFONO_ANTComment(){
				
				    return "";
				
				}
				public String TELEFONO_ANTPattern(){
				
					return "";
				
				}
				public String TELEFONO_ANTOriginalDbColumnName(){
				
					return "TELEFONO_ANT";
				
				}

				
			    public Integer OCUPACIONES_ID;

				public Integer getOCUPACIONES_ID () {
					return this.OCUPACIONES_ID;
				}

				public Boolean OCUPACIONES_IDIsNullable(){
				    return true;
				}
				public Boolean OCUPACIONES_IDIsKey(){
				    return false;
				}
				public Integer OCUPACIONES_IDLength(){
				    return 0;
				}
				public Integer OCUPACIONES_IDPrecision(){
				    return null;
				}
				public String OCUPACIONES_IDDefault(){
				
					return "";
				
				}
				public String OCUPACIONES_IDComment(){
				
				    return "";
				
				}
				public String OCUPACIONES_IDPattern(){
				
					return "";
				
				}
				public String OCUPACIONES_IDOriginalDbColumnName(){
				
					return "OCUPACIONES_ID";
				
				}

				
			    public Integer OCUPACION_ANT;

				public Integer getOCUPACION_ANT () {
					return this.OCUPACION_ANT;
				}

				public Boolean OCUPACION_ANTIsNullable(){
				    return true;
				}
				public Boolean OCUPACION_ANTIsKey(){
				    return false;
				}
				public Integer OCUPACION_ANTLength(){
				    return 0;
				}
				public Integer OCUPACION_ANTPrecision(){
				    return null;
				}
				public String OCUPACION_ANTDefault(){
				
					return "";
				
				}
				public String OCUPACION_ANTComment(){
				
				    return "";
				
				}
				public String OCUPACION_ANTPattern(){
				
					return "";
				
				}
				public String OCUPACION_ANTOriginalDbColumnName(){
				
					return "OCUPACION_ANT";
				
				}

				
			    public Integer ETNICAS_ID;

				public Integer getETNICAS_ID () {
					return this.ETNICAS_ID;
				}

				public Boolean ETNICAS_IDIsNullable(){
				    return true;
				}
				public Boolean ETNICAS_IDIsKey(){
				    return false;
				}
				public Integer ETNICAS_IDLength(){
				    return 0;
				}
				public Integer ETNICAS_IDPrecision(){
				    return null;
				}
				public String ETNICAS_IDDefault(){
				
					return "";
				
				}
				public String ETNICAS_IDComment(){
				
				    return "";
				
				}
				public String ETNICAS_IDPattern(){
				
					return "";
				
				}
				public String ETNICAS_IDOriginalDbColumnName(){
				
					return "ETNICAS_ID";
				
				}

				
			    public Integer ETNICO_ANT;

				public Integer getETNICO_ANT () {
					return this.ETNICO_ANT;
				}

				public Boolean ETNICO_ANTIsNullable(){
				    return true;
				}
				public Boolean ETNICO_ANTIsKey(){
				    return false;
				}
				public Integer ETNICO_ANTLength(){
				    return 0;
				}
				public Integer ETNICO_ANTPrecision(){
				    return null;
				}
				public String ETNICO_ANTDefault(){
				
					return "";
				
				}
				public String ETNICO_ANTComment(){
				
				    return "";
				
				}
				public String ETNICO_ANTPattern(){
				
					return "";
				
				}
				public String ETNICO_ANTOriginalDbColumnName(){
				
					return "ETNICO_ANT";
				
				}

				
			    public Integer NSOCIOECONOMICOS_ID;

				public Integer getNSOCIOECONOMICOS_ID () {
					return this.NSOCIOECONOMICOS_ID;
				}

				public Boolean NSOCIOECONOMICOS_IDIsNullable(){
				    return true;
				}
				public Boolean NSOCIOECONOMICOS_IDIsKey(){
				    return false;
				}
				public Integer NSOCIOECONOMICOS_IDLength(){
				    return 0;
				}
				public Integer NSOCIOECONOMICOS_IDPrecision(){
				    return null;
				}
				public String NSOCIOECONOMICOS_IDDefault(){
				
					return "";
				
				}
				public String NSOCIOECONOMICOS_IDComment(){
				
				    return "";
				
				}
				public String NSOCIOECONOMICOS_IDPattern(){
				
					return "";
				
				}
				public String NSOCIOECONOMICOS_IDOriginalDbColumnName(){
				
					return "NSOCIOECONOMICOS_ID";
				
				}

				
			    public Integer NECONO_ANT;

				public Integer getNECONO_ANT () {
					return this.NECONO_ANT;
				}

				public Boolean NECONO_ANTIsNullable(){
				    return true;
				}
				public Boolean NECONO_ANTIsKey(){
				    return false;
				}
				public Integer NECONO_ANTLength(){
				    return 0;
				}
				public Integer NECONO_ANTPrecision(){
				    return null;
				}
				public String NECONO_ANTDefault(){
				
					return "";
				
				}
				public String NECONO_ANTComment(){
				
				    return "";
				
				}
				public String NECONO_ANTPattern(){
				
					return "";
				
				}
				public String NECONO_ANTOriginalDbColumnName(){
				
					return "NECONO_ANT";
				
				}

				
			    public Integer TVIVIENDA_ID;

				public Integer getTVIVIENDA_ID () {
					return this.TVIVIENDA_ID;
				}

				public Boolean TVIVIENDA_IDIsNullable(){
				    return true;
				}
				public Boolean TVIVIENDA_IDIsKey(){
				    return false;
				}
				public Integer TVIVIENDA_IDLength(){
				    return 0;
				}
				public Integer TVIVIENDA_IDPrecision(){
				    return null;
				}
				public String TVIVIENDA_IDDefault(){
				
					return "";
				
				}
				public String TVIVIENDA_IDComment(){
				
				    return "";
				
				}
				public String TVIVIENDA_IDPattern(){
				
					return "";
				
				}
				public String TVIVIENDA_IDOriginalDbColumnName(){
				
					return "TVIVIENDA_ID";
				
				}

				
			    public Integer TVIVIENDA_ANT;

				public Integer getTVIVIENDA_ANT () {
					return this.TVIVIENDA_ANT;
				}

				public Boolean TVIVIENDA_ANTIsNullable(){
				    return true;
				}
				public Boolean TVIVIENDA_ANTIsKey(){
				    return false;
				}
				public Integer TVIVIENDA_ANTLength(){
				    return 0;
				}
				public Integer TVIVIENDA_ANTPrecision(){
				    return null;
				}
				public String TVIVIENDA_ANTDefault(){
				
					return "";
				
				}
				public String TVIVIENDA_ANTComment(){
				
				    return "";
				
				}
				public String TVIVIENDA_ANTPattern(){
				
					return "";
				
				}
				public String TVIVIENDA_ANTOriginalDbColumnName(){
				
					return "TVIVIENDA_ANT";
				
				}

				
			    public Integer NEDUCATIVOS_ID;

				public Integer getNEDUCATIVOS_ID () {
					return this.NEDUCATIVOS_ID;
				}

				public Boolean NEDUCATIVOS_IDIsNullable(){
				    return true;
				}
				public Boolean NEDUCATIVOS_IDIsKey(){
				    return false;
				}
				public Integer NEDUCATIVOS_IDLength(){
				    return 0;
				}
				public Integer NEDUCATIVOS_IDPrecision(){
				    return null;
				}
				public String NEDUCATIVOS_IDDefault(){
				
					return "";
				
				}
				public String NEDUCATIVOS_IDComment(){
				
				    return "";
				
				}
				public String NEDUCATIVOS_IDPattern(){
				
					return "";
				
				}
				public String NEDUCATIVOS_IDOriginalDbColumnName(){
				
					return "NEDUCATIVOS_ID";
				
				}

				
			    public Integer NEDUCATIVO_ANT;

				public Integer getNEDUCATIVO_ANT () {
					return this.NEDUCATIVO_ANT;
				}

				public Boolean NEDUCATIVO_ANTIsNullable(){
				    return true;
				}
				public Boolean NEDUCATIVO_ANTIsKey(){
				    return false;
				}
				public Integer NEDUCATIVO_ANTLength(){
				    return 0;
				}
				public Integer NEDUCATIVO_ANTPrecision(){
				    return null;
				}
				public String NEDUCATIVO_ANTDefault(){
				
					return "";
				
				}
				public String NEDUCATIVO_ANTComment(){
				
				    return "";
				
				}
				public String NEDUCATIVO_ANTPattern(){
				
					return "";
				
				}
				public String NEDUCATIVO_ANTOriginalDbColumnName(){
				
					return "NEDUCATIVO_ANT";
				
				}

				
			    public Integer ESMADSCRITO;

				public Integer getESMADSCRITO () {
					return this.ESMADSCRITO;
				}

				public Boolean ESMADSCRITOIsNullable(){
				    return true;
				}
				public Boolean ESMADSCRITOIsKey(){
				    return false;
				}
				public Integer ESMADSCRITOLength(){
				    return 0;
				}
				public Integer ESMADSCRITOPrecision(){
				    return null;
				}
				public String ESMADSCRITODefault(){
				
					return "";
				
				}
				public String ESMADSCRITOComment(){
				
				    return "";
				
				}
				public String ESMADSCRITOPattern(){
				
					return "";
				
				}
				public String ESMADSCRITOOriginalDbColumnName(){
				
					return "ESMADSCRITO";
				
				}

				
			    public Integer ESM_ANT;

				public Integer getESM_ANT () {
					return this.ESM_ANT;
				}

				public Boolean ESM_ANTIsNullable(){
				    return true;
				}
				public Boolean ESM_ANTIsKey(){
				    return false;
				}
				public Integer ESM_ANTLength(){
				    return 0;
				}
				public Integer ESM_ANTPrecision(){
				    return null;
				}
				public String ESM_ANTDefault(){
				
					return "";
				
				}
				public String ESM_ANTComment(){
				
				    return "";
				
				}
				public String ESM_ANTPattern(){
				
					return "";
				
				}
				public String ESM_ANTOriginalDbColumnName(){
				
					return "ESM_ANT";
				
				}

				
			    public Integer ENTAPORTANTES_ID;

				public Integer getENTAPORTANTES_ID () {
					return this.ENTAPORTANTES_ID;
				}

				public Boolean ENTAPORTANTES_IDIsNullable(){
				    return true;
				}
				public Boolean ENTAPORTANTES_IDIsKey(){
				    return false;
				}
				public Integer ENTAPORTANTES_IDLength(){
				    return 0;
				}
				public Integer ENTAPORTANTES_IDPrecision(){
				    return null;
				}
				public String ENTAPORTANTES_IDDefault(){
				
					return "";
				
				}
				public String ENTAPORTANTES_IDComment(){
				
				    return "";
				
				}
				public String ENTAPORTANTES_IDPattern(){
				
					return "";
				
				}
				public String ENTAPORTANTES_IDOriginalDbColumnName(){
				
					return "ENTAPORTANTES_ID";
				
				}

				
			    public Integer ENTIDAD_ANT;

				public Integer getENTIDAD_ANT () {
					return this.ENTIDAD_ANT;
				}

				public Boolean ENTIDAD_ANTIsNullable(){
				    return true;
				}
				public Boolean ENTIDAD_ANTIsKey(){
				    return false;
				}
				public Integer ENTIDAD_ANTLength(){
				    return 0;
				}
				public Integer ENTIDAD_ANTPrecision(){
				    return null;
				}
				public String ENTIDAD_ANTDefault(){
				
					return "";
				
				}
				public String ENTIDAD_ANTComment(){
				
				    return "";
				
				}
				public String ENTIDAD_ANTPattern(){
				
					return "";
				
				}
				public String ENTIDAD_ANTOriginalDbColumnName(){
				
					return "ENTIDAD_ANT";
				
				}

				
			    public Integer GRDMILITARES_ID;

				public Integer getGRDMILITARES_ID () {
					return this.GRDMILITARES_ID;
				}

				public Boolean GRDMILITARES_IDIsNullable(){
				    return true;
				}
				public Boolean GRDMILITARES_IDIsKey(){
				    return false;
				}
				public Integer GRDMILITARES_IDLength(){
				    return 0;
				}
				public Integer GRDMILITARES_IDPrecision(){
				    return null;
				}
				public String GRDMILITARES_IDDefault(){
				
					return "";
				
				}
				public String GRDMILITARES_IDComment(){
				
				    return "";
				
				}
				public String GRDMILITARES_IDPattern(){
				
					return "";
				
				}
				public String GRDMILITARES_IDOriginalDbColumnName(){
				
					return "GRDMILITARES_ID";
				
				}

				
			    public Integer GRADO_ANT;

				public Integer getGRADO_ANT () {
					return this.GRADO_ANT;
				}

				public Boolean GRADO_ANTIsNullable(){
				    return true;
				}
				public Boolean GRADO_ANTIsKey(){
				    return false;
				}
				public Integer GRADO_ANTLength(){
				    return 0;
				}
				public Integer GRADO_ANTPrecision(){
				    return null;
				}
				public String GRADO_ANTDefault(){
				
					return "";
				
				}
				public String GRADO_ANTComment(){
				
				    return "";
				
				}
				public String GRADO_ANTPattern(){
				
					return "";
				
				}
				public String GRADO_ANTOriginalDbColumnName(){
				
					return "GRADO_ANT";
				
				}

				
			    public Integer FUERZAS_ID;

				public Integer getFUERZAS_ID () {
					return this.FUERZAS_ID;
				}

				public Boolean FUERZAS_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZAS_IDIsKey(){
				    return false;
				}
				public Integer FUERZAS_IDLength(){
				    return 0;
				}
				public Integer FUERZAS_IDPrecision(){
				    return null;
				}
				public String FUERZAS_IDDefault(){
				
					return "";
				
				}
				public String FUERZAS_IDComment(){
				
				    return "";
				
				}
				public String FUERZAS_IDPattern(){
				
					return "";
				
				}
				public String FUERZAS_IDOriginalDbColumnName(){
				
					return "FUERZAS_ID";
				
				}

				
			    public Integer FUERZA_ANT;

				public Integer getFUERZA_ANT () {
					return this.FUERZA_ANT;
				}

				public Boolean FUERZA_ANTIsNullable(){
				    return true;
				}
				public Boolean FUERZA_ANTIsKey(){
				    return false;
				}
				public Integer FUERZA_ANTLength(){
				    return 0;
				}
				public Integer FUERZA_ANTPrecision(){
				    return null;
				}
				public String FUERZA_ANTDefault(){
				
					return "";
				
				}
				public String FUERZA_ANTComment(){
				
				    return "";
				
				}
				public String FUERZA_ANTPattern(){
				
					return "";
				
				}
				public String FUERZA_ANTOriginalDbColumnName(){
				
					return "FUERZA_ANT";
				
				}

				
			    public Integer UMILITARES_ID;

				public Integer getUMILITARES_ID () {
					return this.UMILITARES_ID;
				}

				public Boolean UMILITARES_IDIsNullable(){
				    return true;
				}
				public Boolean UMILITARES_IDIsKey(){
				    return false;
				}
				public Integer UMILITARES_IDLength(){
				    return 0;
				}
				public Integer UMILITARES_IDPrecision(){
				    return null;
				}
				public String UMILITARES_IDDefault(){
				
					return "";
				
				}
				public String UMILITARES_IDComment(){
				
				    return "";
				
				}
				public String UMILITARES_IDPattern(){
				
					return "";
				
				}
				public String UMILITARES_IDOriginalDbColumnName(){
				
					return "UMILITARES_ID";
				
				}

				
			    public Integer UNIDAD_ANT;

				public Integer getUNIDAD_ANT () {
					return this.UNIDAD_ANT;
				}

				public Boolean UNIDAD_ANTIsNullable(){
				    return true;
				}
				public Boolean UNIDAD_ANTIsKey(){
				    return false;
				}
				public Integer UNIDAD_ANTLength(){
				    return 0;
				}
				public Integer UNIDAD_ANTPrecision(){
				    return null;
				}
				public String UNIDAD_ANTDefault(){
				
					return "";
				
				}
				public String UNIDAD_ANTComment(){
				
				    return "";
				
				}
				public String UNIDAD_ANTPattern(){
				
					return "";
				
				}
				public String UNIDAD_ANTOriginalDbColumnName(){
				
					return "UNIDAD_ANT";
				
				}

				
			    public Integer TVINCULACIONES_ID;

				public Integer getTVINCULACIONES_ID () {
					return this.TVINCULACIONES_ID;
				}

				public Boolean TVINCULACIONES_IDIsNullable(){
				    return true;
				}
				public Boolean TVINCULACIONES_IDIsKey(){
				    return false;
				}
				public Integer TVINCULACIONES_IDLength(){
				    return 0;
				}
				public Integer TVINCULACIONES_IDPrecision(){
				    return null;
				}
				public String TVINCULACIONES_IDDefault(){
				
					return "";
				
				}
				public String TVINCULACIONES_IDComment(){
				
				    return "";
				
				}
				public String TVINCULACIONES_IDPattern(){
				
					return "";
				
				}
				public String TVINCULACIONES_IDOriginalDbColumnName(){
				
					return "TVINCULACIONES_ID";
				
				}

				
			    public Integer TVINCULA_ANT;

				public Integer getTVINCULA_ANT () {
					return this.TVINCULA_ANT;
				}

				public Boolean TVINCULA_ANTIsNullable(){
				    return true;
				}
				public Boolean TVINCULA_ANTIsKey(){
				    return false;
				}
				public Integer TVINCULA_ANTLength(){
				    return 0;
				}
				public Integer TVINCULA_ANTPrecision(){
				    return null;
				}
				public String TVINCULA_ANTDefault(){
				
					return "";
				
				}
				public String TVINCULA_ANTComment(){
				
				    return "";
				
				}
				public String TVINCULA_ANTPattern(){
				
					return "";
				
				}
				public String TVINCULA_ANTOriginalDbColumnName(){
				
					return "TVINCULA_ANT";
				
				}

				
			    public String ESTADO_ENTIDAD;

				public String getESTADO_ENTIDAD () {
					return this.ESTADO_ENTIDAD;
				}

				public Boolean ESTADO_ENTIDADIsNullable(){
				    return true;
				}
				public Boolean ESTADO_ENTIDADIsKey(){
				    return false;
				}
				public Integer ESTADO_ENTIDADLength(){
				    return 10;
				}
				public Integer ESTADO_ENTIDADPrecision(){
				    return 0;
				}
				public String ESTADO_ENTIDADDefault(){
				
					return null;
				
				}
				public String ESTADO_ENTIDADComment(){
				
				    return "";
				
				}
				public String ESTADO_ENTIDADPattern(){
				
					return "";
				
				}
				public String ESTADO_ENTIDADOriginalDbColumnName(){
				
					return "ESTADO_ENTIDAD";
				
				}

				
			    public String ESTADO_ENT_ANT;

				public String getESTADO_ENT_ANT () {
					return this.ESTADO_ENT_ANT;
				}

				public Boolean ESTADO_ENT_ANTIsNullable(){
				    return true;
				}
				public Boolean ESTADO_ENT_ANTIsKey(){
				    return false;
				}
				public Integer ESTADO_ENT_ANTLength(){
				    return 8;
				}
				public Integer ESTADO_ENT_ANTPrecision(){
				    return 0;
				}
				public String ESTADO_ENT_ANTDefault(){
				
					return null;
				
				}
				public String ESTADO_ENT_ANTComment(){
				
				    return "";
				
				}
				public String ESTADO_ENT_ANTPattern(){
				
					return "";
				
				}
				public String ESTADO_ENT_ANTOriginalDbColumnName(){
				
					return "ESTADO_ENT_ANT";
				
				}

				
			    public Integer ENTIDAD_PRINCIPAL;

				public Integer getENTIDAD_PRINCIPAL () {
					return this.ENTIDAD_PRINCIPAL;
				}

				public Boolean ENTIDAD_PRINCIPALIsNullable(){
				    return true;
				}
				public Boolean ENTIDAD_PRINCIPALIsKey(){
				    return false;
				}
				public Integer ENTIDAD_PRINCIPALLength(){
				    return 0;
				}
				public Integer ENTIDAD_PRINCIPALPrecision(){
				    return null;
				}
				public String ENTIDAD_PRINCIPALDefault(){
				
					return "";
				
				}
				public String ENTIDAD_PRINCIPALComment(){
				
				    return "";
				
				}
				public String ENTIDAD_PRINCIPALPattern(){
				
					return "";
				
				}
				public String ENTIDAD_PRINCIPALOriginalDbColumnName(){
				
					return "ENTIDAD_PRINCIPAL";
				
				}

				
			    public Integer PRINCIPAL_ANT;

				public Integer getPRINCIPAL_ANT () {
					return this.PRINCIPAL_ANT;
				}

				public Boolean PRINCIPAL_ANTIsNullable(){
				    return true;
				}
				public Boolean PRINCIPAL_ANTIsKey(){
				    return false;
				}
				public Integer PRINCIPAL_ANTLength(){
				    return 0;
				}
				public Integer PRINCIPAL_ANTPrecision(){
				    return null;
				}
				public String PRINCIPAL_ANTDefault(){
				
					return "";
				
				}
				public String PRINCIPAL_ANTComment(){
				
				    return "";
				
				}
				public String PRINCIPAL_ANTPattern(){
				
					return "";
				
				}
				public String PRINCIPAL_ANTOriginalDbColumnName(){
				
					return "PRINCIPAL_ANT";
				
				}

				
			    public Integer TREGIMEN_ID;

				public Integer getTREGIMEN_ID () {
					return this.TREGIMEN_ID;
				}

				public Boolean TREGIMEN_IDIsNullable(){
				    return true;
				}
				public Boolean TREGIMEN_IDIsKey(){
				    return false;
				}
				public Integer TREGIMEN_IDLength(){
				    return 0;
				}
				public Integer TREGIMEN_IDPrecision(){
				    return null;
				}
				public String TREGIMEN_IDDefault(){
				
					return "";
				
				}
				public String TREGIMEN_IDComment(){
				
				    return "";
				
				}
				public String TREGIMEN_IDPattern(){
				
					return "";
				
				}
				public String TREGIMEN_IDOriginalDbColumnName(){
				
					return "TREGIMEN_ID";
				
				}

				
			    public Integer TREGIMEN_ANT;

				public Integer getTREGIMEN_ANT () {
					return this.TREGIMEN_ANT;
				}

				public Boolean TREGIMEN_ANTIsNullable(){
				    return true;
				}
				public Boolean TREGIMEN_ANTIsKey(){
				    return false;
				}
				public Integer TREGIMEN_ANTLength(){
				    return 0;
				}
				public Integer TREGIMEN_ANTPrecision(){
				    return null;
				}
				public String TREGIMEN_ANTDefault(){
				
					return "";
				
				}
				public String TREGIMEN_ANTComment(){
				
				    return "";
				
				}
				public String TREGIMEN_ANTPattern(){
				
					return "";
				
				}
				public String TREGIMEN_ANTOriginalDbColumnName(){
				
					return "TREGIMEN_ANT";
				
				}

				
			    public Integer ID_UNICO_ENTIDAD;

				public Integer getID_UNICO_ENTIDAD () {
					return this.ID_UNICO_ENTIDAD;
				}

				public Boolean ID_UNICO_ENTIDADIsNullable(){
				    return true;
				}
				public Boolean ID_UNICO_ENTIDADIsKey(){
				    return false;
				}
				public Integer ID_UNICO_ENTIDADLength(){
				    return 0;
				}
				public Integer ID_UNICO_ENTIDADPrecision(){
				    return null;
				}
				public String ID_UNICO_ENTIDADDefault(){
				
					return "";
				
				}
				public String ID_UNICO_ENTIDADComment(){
				
				    return "";
				
				}
				public String ID_UNICO_ENTIDADPattern(){
				
					return "";
				
				}
				public String ID_UNICO_ENTIDADOriginalDbColumnName(){
				
					return "ID_UNICO_ENTIDAD";
				
				}

				
			    public java.util.Date FECHA_CADUCIDAD;

				public java.util.Date getFECHA_CADUCIDAD () {
					return this.FECHA_CADUCIDAD;
				}

				public Boolean FECHA_CADUCIDADIsNullable(){
				    return true;
				}
				public Boolean FECHA_CADUCIDADIsKey(){
				    return false;
				}
				public Integer FECHA_CADUCIDADLength(){
				    return 0;
				}
				public Integer FECHA_CADUCIDADPrecision(){
				    return 0;
				}
				public String FECHA_CADUCIDADDefault(){
				
					return null;
				
				}
				public String FECHA_CADUCIDADComment(){
				
				    return "";
				
				}
				public String FECHA_CADUCIDADPattern(){
				
					return "";
				
				}
				public String FECHA_CADUCIDADOriginalDbColumnName(){
				
					return "FECHA_CADUCIDAD";
				
				}

				
			    public java.util.Date FCADUCIDAD_ANT;

				public java.util.Date getFCADUCIDAD_ANT () {
					return this.FCADUCIDAD_ANT;
				}

				public Boolean FCADUCIDAD_ANTIsNullable(){
				    return true;
				}
				public Boolean FCADUCIDAD_ANTIsKey(){
				    return false;
				}
				public Integer FCADUCIDAD_ANTLength(){
				    return 0;
				}
				public Integer FCADUCIDAD_ANTPrecision(){
				    return 0;
				}
				public String FCADUCIDAD_ANTDefault(){
				
					return null;
				
				}
				public String FCADUCIDAD_ANTComment(){
				
				    return "";
				
				}
				public String FCADUCIDAD_ANTPattern(){
				
					return "";
				
				}
				public String FCADUCIDAD_ANTOriginalDbColumnName(){
				
					return "FCADUCIDAD_ANT";
				
				}

				
			    public java.util.Date FECHA_VINCULACION;

				public java.util.Date getFECHA_VINCULACION () {
					return this.FECHA_VINCULACION;
				}

				public Boolean FECHA_VINCULACIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_VINCULACIONIsKey(){
				    return false;
				}
				public Integer FECHA_VINCULACIONLength(){
				    return 0;
				}
				public Integer FECHA_VINCULACIONPrecision(){
				    return 0;
				}
				public String FECHA_VINCULACIONDefault(){
				
					return null;
				
				}
				public String FECHA_VINCULACIONComment(){
				
				    return "";
				
				}
				public String FECHA_VINCULACIONPattern(){
				
					return "";
				
				}
				public String FECHA_VINCULACIONOriginalDbColumnName(){
				
					return "FECHA_VINCULACION";
				
				}

				
			    public java.util.Date FECHA_VINC_ANT;

				public java.util.Date getFECHA_VINC_ANT () {
					return this.FECHA_VINC_ANT;
				}

				public Boolean FECHA_VINC_ANTIsNullable(){
				    return true;
				}
				public Boolean FECHA_VINC_ANTIsKey(){
				    return false;
				}
				public Integer FECHA_VINC_ANTLength(){
				    return 0;
				}
				public Integer FECHA_VINC_ANTPrecision(){
				    return 0;
				}
				public String FECHA_VINC_ANTDefault(){
				
					return null;
				
				}
				public String FECHA_VINC_ANTComment(){
				
				    return "";
				
				}
				public String FECHA_VINC_ANTPattern(){
				
					return "";
				
				}
				public String FECHA_VINC_ANTOriginalDbColumnName(){
				
					return "FECHA_VINC_ANT";
				
				}

				
			    public Integer ESTADOS_ID;

				public Integer getESTADOS_ID () {
					return this.ESTADOS_ID;
				}

				public Boolean ESTADOS_IDIsNullable(){
				    return true;
				}
				public Boolean ESTADOS_IDIsKey(){
				    return false;
				}
				public Integer ESTADOS_IDLength(){
				    return 0;
				}
				public Integer ESTADOS_IDPrecision(){
				    return null;
				}
				public String ESTADOS_IDDefault(){
				
					return "";
				
				}
				public String ESTADOS_IDComment(){
				
				    return "";
				
				}
				public String ESTADOS_IDPattern(){
				
					return "";
				
				}
				public String ESTADOS_IDOriginalDbColumnName(){
				
					return "ESTADOS_ID";
				
				}

				
			    public int ESTADO_ANT;

				public int getESTADO_ANT () {
					return this.ESTADO_ANT;
				}

				public Boolean ESTADO_ANTIsNullable(){
				    return false;
				}
				public Boolean ESTADO_ANTIsKey(){
				    return false;
				}
				public Integer ESTADO_ANTLength(){
				    return 0;
				}
				public Integer ESTADO_ANTPrecision(){
				    return null;
				}
				public String ESTADO_ANTDefault(){
				
					return "";
				
				}
				public String ESTADO_ANTComment(){
				
				    return "";
				
				}
				public String ESTADO_ANTPattern(){
				
					return "";
				
				}
				public String ESTADO_ANTOriginalDbColumnName(){
				
					return "ESTADO_ANT";
				
				}

				
			    public String OBSERVACIONES;

				public String getOBSERVACIONES () {
					return this.OBSERVACIONES;
				}

				public Boolean OBSERVACIONESIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONESIsKey(){
				    return false;
				}
				public Integer OBSERVACIONESLength(){
				    return 400;
				}
				public Integer OBSERVACIONESPrecision(){
				    return 0;
				}
				public String OBSERVACIONESDefault(){
				
					return null;
				
				}
				public String OBSERVACIONESComment(){
				
				    return "";
				
				}
				public String OBSERVACIONESPattern(){
				
					return "";
				
				}
				public String OBSERVACIONESOriginalDbColumnName(){
				
					return "OBSERVACIONES";
				
				}

				
			    public Integer USUARIOS_ID;

				public Integer getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return true;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 0;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public Integer MOTIVOSESTADO_ID;

				public Integer getMOTIVOSESTADO_ID () {
					return this.MOTIVOSESTADO_ID;
				}

				public Boolean MOTIVOSESTADO_IDIsNullable(){
				    return true;
				}
				public Boolean MOTIVOSESTADO_IDIsKey(){
				    return false;
				}
				public Integer MOTIVOSESTADO_IDLength(){
				    return 0;
				}
				public Integer MOTIVOSESTADO_IDPrecision(){
				    return null;
				}
				public String MOTIVOSESTADO_IDDefault(){
				
					return "";
				
				}
				public String MOTIVOSESTADO_IDComment(){
				
				    return "";
				
				}
				public String MOTIVOSESTADO_IDPattern(){
				
					return "";
				
				}
				public String MOTIVOSESTADO_IDOriginalDbColumnName(){
				
					return "MOTIVOSESTADO_ID";
				
				}

				
			    public String MOTIVO;

				public String getMOTIVO () {
					return this.MOTIVO;
				}

				public Boolean MOTIVOIsNullable(){
				    return true;
				}
				public Boolean MOTIVOIsKey(){
				    return false;
				}
				public Integer MOTIVOLength(){
				    return 400;
				}
				public Integer MOTIVOPrecision(){
				    return 0;
				}
				public String MOTIVODefault(){
				
					return null;
				
				}
				public String MOTIVOComment(){
				
				    return "";
				
				}
				public String MOTIVOPattern(){
				
					return "";
				
				}
				public String MOTIVOOriginalDbColumnName(){
				
					return "MOTIVO";
				
				}

				
			    public Integer RNOVEDADES_ID;

				public Integer getRNOVEDADES_ID () {
					return this.RNOVEDADES_ID;
				}

				public Boolean RNOVEDADES_IDIsNullable(){
				    return true;
				}
				public Boolean RNOVEDADES_IDIsKey(){
				    return false;
				}
				public Integer RNOVEDADES_IDLength(){
				    return 0;
				}
				public Integer RNOVEDADES_IDPrecision(){
				    return null;
				}
				public String RNOVEDADES_IDDefault(){
				
					return "";
				
				}
				public String RNOVEDADES_IDComment(){
				
				    return "";
				
				}
				public String RNOVEDADES_IDPattern(){
				
					return "";
				
				}
				public String RNOVEDADES_IDOriginalDbColumnName(){
				
					return "RNOVEDADES_ID";
				
				}

				
			    public Integer PERSONAS_ID;

				public Integer getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public Integer AFILIADO_ID;

				public Integer getAFILIADO_ID () {
					return this.AFILIADO_ID;
				}

				public Boolean AFILIADO_IDIsNullable(){
				    return true;
				}
				public Boolean AFILIADO_IDIsKey(){
				    return false;
				}
				public Integer AFILIADO_IDLength(){
				    return 0;
				}
				public Integer AFILIADO_IDPrecision(){
				    return null;
				}
				public String AFILIADO_IDDefault(){
				
					return "";
				
				}
				public String AFILIADO_IDComment(){
				
				    return "";
				
				}
				public String AFILIADO_IDPattern(){
				
					return "";
				
				}
				public String AFILIADO_IDOriginalDbColumnName(){
				
					return "AFILIADO_ID";
				
				}

				
			    public String TIPO_AFILIADO;

				public String getTIPO_AFILIADO () {
					return this.TIPO_AFILIADO;
				}

				public Boolean TIPO_AFILIADOIsNullable(){
				    return true;
				}
				public Boolean TIPO_AFILIADOIsKey(){
				    return false;
				}
				public Integer TIPO_AFILIADOLength(){
				    return 5;
				}
				public Integer TIPO_AFILIADOPrecision(){
				    return 0;
				}
				public String TIPO_AFILIADODefault(){
				
					return null;
				
				}
				public String TIPO_AFILIADOComment(){
				
				    return "";
				
				}
				public String TIPO_AFILIADOPattern(){
				
					return "";
				
				}
				public String TIPO_AFILIADOOriginalDbColumnName(){
				
					return "TIPO_AFILIADO";
				
				}

				
			    public Integer PROCESADO;

				public Integer getPROCESADO () {
					return this.PROCESADO;
				}

				public Boolean PROCESADOIsNullable(){
				    return true;
				}
				public Boolean PROCESADOIsKey(){
				    return false;
				}
				public Integer PROCESADOLength(){
				    return null;
				}
				public Integer PROCESADOPrecision(){
				    return null;
				}
				public String PROCESADODefault(){
				
					return null;
				
				}
				public String PROCESADOComment(){
				
				    return "";
				
				}
				public String PROCESADOPattern(){
				
					return "";
				
				}
				public String PROCESADOOriginalDbColumnName(){
				
					return "PROCESADO";
				
				}

				
			    public String CORREO_ELECTRONICO;

				public String getCORREO_ELECTRONICO () {
					return this.CORREO_ELECTRONICO;
				}

				public Boolean CORREO_ELECTRONICOIsNullable(){
				    return true;
				}
				public Boolean CORREO_ELECTRONICOIsKey(){
				    return false;
				}
				public Integer CORREO_ELECTRONICOLength(){
				    return null;
				}
				public Integer CORREO_ELECTRONICOPrecision(){
				    return null;
				}
				public String CORREO_ELECTRONICODefault(){
				
					return null;
				
				}
				public String CORREO_ELECTRONICOComment(){
				
				    return "";
				
				}
				public String CORREO_ELECTRONICOPattern(){
				
					return "";
				
				}
				public String CORREO_ELECTRONICOOriginalDbColumnName(){
				
					return "CORREO_ELECTRONICO";
				
				}

				
			    public String CORREO_ELECTRONICO_ANT;

				public String getCORREO_ELECTRONICO_ANT () {
					return this.CORREO_ELECTRONICO_ANT;
				}

				public Boolean CORREO_ELECTRONICO_ANTIsNullable(){
				    return true;
				}
				public Boolean CORREO_ELECTRONICO_ANTIsKey(){
				    return false;
				}
				public Integer CORREO_ELECTRONICO_ANTLength(){
				    return null;
				}
				public Integer CORREO_ELECTRONICO_ANTPrecision(){
				    return null;
				}
				public String CORREO_ELECTRONICO_ANTDefault(){
				
					return null;
				
				}
				public String CORREO_ELECTRONICO_ANTComment(){
				
				    return "";
				
				}
				public String CORREO_ELECTRONICO_ANTPattern(){
				
					return "";
				
				}
				public String CORREO_ELECTRONICO_ANTOriginalDbColumnName(){
				
					return "CORREO_ELECTRONICO_ANT";
				
				}

				
			    public String CELULAR;

				public String getCELULAR () {
					return this.CELULAR;
				}

				public Boolean CELULARIsNullable(){
				    return true;
				}
				public Boolean CELULARIsKey(){
				    return false;
				}
				public Integer CELULARLength(){
				    return null;
				}
				public Integer CELULARPrecision(){
				    return null;
				}
				public String CELULARDefault(){
				
					return null;
				
				}
				public String CELULARComment(){
				
				    return "";
				
				}
				public String CELULARPattern(){
				
					return "";
				
				}
				public String CELULAROriginalDbColumnName(){
				
					return "CELULAR";
				
				}

				
			    public String CELULAR_ANT;

				public String getCELULAR_ANT () {
					return this.CELULAR_ANT;
				}

				public Boolean CELULAR_ANTIsNullable(){
				    return true;
				}
				public Boolean CELULAR_ANTIsKey(){
				    return false;
				}
				public Integer CELULAR_ANTLength(){
				    return null;
				}
				public Integer CELULAR_ANTPrecision(){
				    return null;
				}
				public String CELULAR_ANTDefault(){
				
					return null;
				
				}
				public String CELULAR_ANTComment(){
				
				    return "";
				
				}
				public String CELULAR_ANTPattern(){
				
					return "";
				
				}
				public String CELULAR_ANTOriginalDbColumnName(){
				
					return "CELULAR_ANT";
				
				}

				
			    public java.util.Date FECHA_DEFUNCION;

				public java.util.Date getFECHA_DEFUNCION () {
					return this.FECHA_DEFUNCION;
				}

				public Boolean FECHA_DEFUNCIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_DEFUNCIONIsKey(){
				    return false;
				}
				public Integer FECHA_DEFUNCIONLength(){
				    return null;
				}
				public Integer FECHA_DEFUNCIONPrecision(){
				    return null;
				}
				public String FECHA_DEFUNCIONDefault(){
				
					return null;
				
				}
				public String FECHA_DEFUNCIONComment(){
				
				    return "";
				
				}
				public String FECHA_DEFUNCIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_DEFUNCIONOriginalDbColumnName(){
				
					return "FECHA_DEFUNCION";
				
				}

				
			    public java.util.Date FECHA_DEFUNCION_ANT;

				public java.util.Date getFECHA_DEFUNCION_ANT () {
					return this.FECHA_DEFUNCION_ANT;
				}

				public Boolean FECHA_DEFUNCION_ANTIsNullable(){
				    return true;
				}
				public Boolean FECHA_DEFUNCION_ANTIsKey(){
				    return false;
				}
				public Integer FECHA_DEFUNCION_ANTLength(){
				    return null;
				}
				public Integer FECHA_DEFUNCION_ANTPrecision(){
				    return null;
				}
				public String FECHA_DEFUNCION_ANTDefault(){
				
					return null;
				
				}
				public String FECHA_DEFUNCION_ANTComment(){
				
				    return "";
				
				}
				public String FECHA_DEFUNCION_ANTPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_DEFUNCION_ANTOriginalDbColumnName(){
				
					return "FECHA_DEFUNCION_ANT";
				
				}

				
			    public Integer PLANAFILIACIONES_ID;

				public Integer getPLANAFILIACIONES_ID () {
					return this.PLANAFILIACIONES_ID;
				}

				public Boolean PLANAFILIACIONES_IDIsNullable(){
				    return true;
				}
				public Boolean PLANAFILIACIONES_IDIsKey(){
				    return false;
				}
				public Integer PLANAFILIACIONES_IDLength(){
				    return null;
				}
				public Integer PLANAFILIACIONES_IDPrecision(){
				    return null;
				}
				public String PLANAFILIACIONES_IDDefault(){
				
					return null;
				
				}
				public String PLANAFILIACIONES_IDComment(){
				
				    return "";
				
				}
				public String PLANAFILIACIONES_IDPattern(){
				
					return "";
				
				}
				public String PLANAFILIACIONES_IDOriginalDbColumnName(){
				
					return "PLANAFILIACIONES_ID";
				
				}

				
			    public Integer PLANAFILIACIONES_ID_ANT;

				public Integer getPLANAFILIACIONES_ID_ANT () {
					return this.PLANAFILIACIONES_ID_ANT;
				}

				public Boolean PLANAFILIACIONES_ID_ANTIsNullable(){
				    return true;
				}
				public Boolean PLANAFILIACIONES_ID_ANTIsKey(){
				    return false;
				}
				public Integer PLANAFILIACIONES_ID_ANTLength(){
				    return null;
				}
				public Integer PLANAFILIACIONES_ID_ANTPrecision(){
				    return null;
				}
				public String PLANAFILIACIONES_ID_ANTDefault(){
				
					return null;
				
				}
				public String PLANAFILIACIONES_ID_ANTComment(){
				
				    return "";
				
				}
				public String PLANAFILIACIONES_ID_ANTPattern(){
				
					return "";
				
				}
				public String PLANAFILIACIONES_ID_ANTOriginalDbColumnName(){
				
					return "PLANAFILIACIONES_ID_ANT";
				
				}

				
			    public Integer ID_BDUA;

				public Integer getID_BDUA () {
					return this.ID_BDUA;
				}

				public Boolean ID_BDUAIsNullable(){
				    return true;
				}
				public Boolean ID_BDUAIsKey(){
				    return false;
				}
				public Integer ID_BDUALength(){
				    return null;
				}
				public Integer ID_BDUAPrecision(){
				    return null;
				}
				public String ID_BDUADefault(){
				
					return null;
				
				}
				public String ID_BDUAComment(){
				
				    return "";
				
				}
				public String ID_BDUAPattern(){
				
					return "";
				
				}
				public String ID_BDUAOriginalDbColumnName(){
				
					return "ID_BDUA";
				
				}

				
			    public Integer ID_BDUA_ANT;

				public Integer getID_BDUA_ANT () {
					return this.ID_BDUA_ANT;
				}

				public Boolean ID_BDUA_ANTIsNullable(){
				    return true;
				}
				public Boolean ID_BDUA_ANTIsKey(){
				    return false;
				}
				public Integer ID_BDUA_ANTLength(){
				    return null;
				}
				public Integer ID_BDUA_ANTPrecision(){
				    return null;
				}
				public String ID_BDUA_ANTDefault(){
				
					return null;
				
				}
				public String ID_BDUA_ANTComment(){
				
				    return "";
				
				}
				public String ID_BDUA_ANTPattern(){
				
					return "";
				
				}
				public String ID_BDUA_ANTOriginalDbColumnName(){
				
					return "ID_BDUA_ANT";
				
				}

				
			    public String MOTIVO_CAMBIO_ESTADO;

				public String getMOTIVO_CAMBIO_ESTADO () {
					return this.MOTIVO_CAMBIO_ESTADO;
				}

				public Boolean MOTIVO_CAMBIO_ESTADOIsNullable(){
				    return true;
				}
				public Boolean MOTIVO_CAMBIO_ESTADOIsKey(){
				    return false;
				}
				public Integer MOTIVO_CAMBIO_ESTADOLength(){
				    return null;
				}
				public Integer MOTIVO_CAMBIO_ESTADOPrecision(){
				    return null;
				}
				public String MOTIVO_CAMBIO_ESTADODefault(){
				
					return null;
				
				}
				public String MOTIVO_CAMBIO_ESTADOComment(){
				
				    return "";
				
				}
				public String MOTIVO_CAMBIO_ESTADOPattern(){
				
					return "";
				
				}
				public String MOTIVO_CAMBIO_ESTADOOriginalDbColumnName(){
				
					return "MOTIVO_CAMBIO_ESTADO";
				
				}

				
			    public String MOTIVO_CAMBIO_ESM;

				public String getMOTIVO_CAMBIO_ESM () {
					return this.MOTIVO_CAMBIO_ESM;
				}

				public Boolean MOTIVO_CAMBIO_ESMIsNullable(){
				    return true;
				}
				public Boolean MOTIVO_CAMBIO_ESMIsKey(){
				    return false;
				}
				public Integer MOTIVO_CAMBIO_ESMLength(){
				    return null;
				}
				public Integer MOTIVO_CAMBIO_ESMPrecision(){
				    return null;
				}
				public String MOTIVO_CAMBIO_ESMDefault(){
				
					return null;
				
				}
				public String MOTIVO_CAMBIO_ESMComment(){
				
				    return "";
				
				}
				public String MOTIVO_CAMBIO_ESMPattern(){
				
					return "";
				
				}
				public String MOTIVO_CAMBIO_ESMOriginalDbColumnName(){
				
					return "MOTIVO_CAMBIO_ESM";
				
				}

				
			    public Integer TDISCAPACIDADES_ID;

				public Integer getTDISCAPACIDADES_ID () {
					return this.TDISCAPACIDADES_ID;
				}

				public Boolean TDISCAPACIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean TDISCAPACIDADES_IDIsKey(){
				    return false;
				}
				public Integer TDISCAPACIDADES_IDLength(){
				    return null;
				}
				public Integer TDISCAPACIDADES_IDPrecision(){
				    return null;
				}
				public String TDISCAPACIDADES_IDDefault(){
				
					return null;
				
				}
				public String TDISCAPACIDADES_IDComment(){
				
				    return "";
				
				}
				public String TDISCAPACIDADES_IDPattern(){
				
					return "";
				
				}
				public String TDISCAPACIDADES_IDOriginalDbColumnName(){
				
					return "TDISCAPACIDADES_ID";
				
				}

				
			    public Integer TDISCAPACIDADES_ID_ANT;

				public Integer getTDISCAPACIDADES_ID_ANT () {
					return this.TDISCAPACIDADES_ID_ANT;
				}

				public Boolean TDISCAPACIDADES_ID_ANTIsNullable(){
				    return true;
				}
				public Boolean TDISCAPACIDADES_ID_ANTIsKey(){
				    return false;
				}
				public Integer TDISCAPACIDADES_ID_ANTLength(){
				    return null;
				}
				public Integer TDISCAPACIDADES_ID_ANTPrecision(){
				    return null;
				}
				public String TDISCAPACIDADES_ID_ANTDefault(){
				
					return null;
				
				}
				public String TDISCAPACIDADES_ID_ANTComment(){
				
				    return "";
				
				}
				public String TDISCAPACIDADES_ID_ANTPattern(){
				
					return "";
				
				}
				public String TDISCAPACIDADES_ID_ANTOriginalDbColumnName(){
				
					return "TDISCAPACIDADES_ID_ANT";
				
				}

				
			    public Integer PESPECIAL_ID;

				public Integer getPESPECIAL_ID () {
					return this.PESPECIAL_ID;
				}

				public Boolean PESPECIAL_IDIsNullable(){
				    return true;
				}
				public Boolean PESPECIAL_IDIsKey(){
				    return false;
				}
				public Integer PESPECIAL_IDLength(){
				    return null;
				}
				public Integer PESPECIAL_IDPrecision(){
				    return null;
				}
				public String PESPECIAL_IDDefault(){
				
					return null;
				
				}
				public String PESPECIAL_IDComment(){
				
				    return "";
				
				}
				public String PESPECIAL_IDPattern(){
				
					return "";
				
				}
				public String PESPECIAL_IDOriginalDbColumnName(){
				
					return "PESPECIAL_ID";
				
				}

				
			    public Integer PESPECIAL_ID_ANT;

				public Integer getPESPECIAL_ID_ANT () {
					return this.PESPECIAL_ID_ANT;
				}

				public Boolean PESPECIAL_ID_ANTIsNullable(){
				    return true;
				}
				public Boolean PESPECIAL_ID_ANTIsKey(){
				    return false;
				}
				public Integer PESPECIAL_ID_ANTLength(){
				    return null;
				}
				public Integer PESPECIAL_ID_ANTPrecision(){
				    return null;
				}
				public String PESPECIAL_ID_ANTDefault(){
				
					return null;
				
				}
				public String PESPECIAL_ID_ANTComment(){
				
				    return "";
				
				}
				public String PESPECIAL_ID_ANTPattern(){
				
					return "";
				
				}
				public String PESPECIAL_ID_ANTOriginalDbColumnName(){
				
					return "PESPECIAL_ID_ANT";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.PRIMER_NOMBRE = readString(dis);
					
					this.PNOMBRE_ANT = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.SNOMBRE_ANT = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.PAPELLIDO_ANT = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.SAPELLIDO_ANT = readString(dis);
					
						this.TDOCUMENTOS_ID = readInteger(dis);
					
			        this.TDOCUMENTO_ANT = dis.readInt();
					
					this.DOCUMENTO = readString(dis);
					
					this.DOCUMENTO_ANT = readString(dis);
					
						this.LUGAR_EXP_DOC = readInteger(dis);
					
						this.LUGAR_EXPEDICION = readInteger(dis);
					
						this.SEXOS_ID = readInteger(dis);
					
			        this.SEXO_ANT = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ESTATURA = null;
           				} else {
           			    	this.ESTATURA = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ESTATURA_ANT = null;
           				} else {
           			    	this.ESTATURA_ANT = dis.readFloat();
           				}
					
					this.FECHA_EXPEDICION_DOCUMENTO = readDate(dis);
					
					this.FECHAEX_ANT = readDate(dis);
					
					this.FECHA_NACIMIENTO = readDate(dis);
					
					this.FECHAN_ANT = readDate(dis);
					
						this.LUGAR_NACIMIENTO = readInteger(dis);
					
						this.LNACIMIENTO = readInteger(dis);
					
					this.DIRECCION = readString(dis);
					
					this.DIRECCION_ANT = readString(dis);
					
						this.LUGAR_RESIDENCIA = readInteger(dis);
					
						this.LRESIDENCIA = readInteger(dis);
					
						this.LOCALIDADES_ID = readInteger(dis);
					
						this.LOCALIDAD_ANT = readInteger(dis);
					
						this.GSANGUINEOS_ID = readInteger(dis);
					
						this.GRUPOS_ANT = readInteger(dis);
					
					this.TELEFONO = readString(dis);
					
					this.TELEFONO_ANT = readString(dis);
					
						this.OCUPACIONES_ID = readInteger(dis);
					
						this.OCUPACION_ANT = readInteger(dis);
					
						this.ETNICAS_ID = readInteger(dis);
					
						this.ETNICO_ANT = readInteger(dis);
					
						this.NSOCIOECONOMICOS_ID = readInteger(dis);
					
						this.NECONO_ANT = readInteger(dis);
					
						this.TVIVIENDA_ID = readInteger(dis);
					
						this.TVIVIENDA_ANT = readInteger(dis);
					
						this.NEDUCATIVOS_ID = readInteger(dis);
					
						this.NEDUCATIVO_ANT = readInteger(dis);
					
						this.ESMADSCRITO = readInteger(dis);
					
						this.ESM_ANT = readInteger(dis);
					
						this.ENTAPORTANTES_ID = readInteger(dis);
					
						this.ENTIDAD_ANT = readInteger(dis);
					
						this.GRDMILITARES_ID = readInteger(dis);
					
						this.GRADO_ANT = readInteger(dis);
					
						this.FUERZAS_ID = readInteger(dis);
					
						this.FUERZA_ANT = readInteger(dis);
					
						this.UMILITARES_ID = readInteger(dis);
					
						this.UNIDAD_ANT = readInteger(dis);
					
						this.TVINCULACIONES_ID = readInteger(dis);
					
						this.TVINCULA_ANT = readInteger(dis);
					
					this.ESTADO_ENTIDAD = readString(dis);
					
					this.ESTADO_ENT_ANT = readString(dis);
					
						this.ENTIDAD_PRINCIPAL = readInteger(dis);
					
						this.PRINCIPAL_ANT = readInteger(dis);
					
						this.TREGIMEN_ID = readInteger(dis);
					
						this.TREGIMEN_ANT = readInteger(dis);
					
						this.ID_UNICO_ENTIDAD = readInteger(dis);
					
					this.FECHA_CADUCIDAD = readDate(dis);
					
					this.FCADUCIDAD_ANT = readDate(dis);
					
					this.FECHA_VINCULACION = readDate(dis);
					
					this.FECHA_VINC_ANT = readDate(dis);
					
						this.ESTADOS_ID = readInteger(dis);
					
			        this.ESTADO_ANT = dis.readInt();
					
					this.OBSERVACIONES = readString(dis);
					
						this.USUARIOS_ID = readInteger(dis);
					
						this.MOTIVOSESTADO_ID = readInteger(dis);
					
					this.MOTIVO = readString(dis);
					
						this.RNOVEDADES_ID = readInteger(dis);
					
						this.PERSONAS_ID = readInteger(dis);
					
						this.AFILIADO_ID = readInteger(dis);
					
					this.TIPO_AFILIADO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
					this.CORREO_ELECTRONICO = readString(dis);
					
					this.CORREO_ELECTRONICO_ANT = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.CELULAR_ANT = readString(dis);
					
					this.FECHA_DEFUNCION = readDate(dis);
					
					this.FECHA_DEFUNCION_ANT = readDate(dis);
					
						this.PLANAFILIACIONES_ID = readInteger(dis);
					
						this.PLANAFILIACIONES_ID_ANT = readInteger(dis);
					
						this.ID_BDUA = readInteger(dis);
					
						this.ID_BDUA_ANT = readInteger(dis);
					
					this.MOTIVO_CAMBIO_ESTADO = readString(dis);
					
					this.MOTIVO_CAMBIO_ESM = readString(dis);
					
						this.TDISCAPACIDADES_ID = readInteger(dis);
					
						this.TDISCAPACIDADES_ID_ANT = readInteger(dis);
					
						this.PESPECIAL_ID = readInteger(dis);
					
						this.PESPECIAL_ID_ANT = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.PRIMER_NOMBRE = readString(dis);
					
					this.PNOMBRE_ANT = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.SNOMBRE_ANT = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.PAPELLIDO_ANT = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.SAPELLIDO_ANT = readString(dis);
					
						this.TDOCUMENTOS_ID = readInteger(dis);
					
			        this.TDOCUMENTO_ANT = dis.readInt();
					
					this.DOCUMENTO = readString(dis);
					
					this.DOCUMENTO_ANT = readString(dis);
					
						this.LUGAR_EXP_DOC = readInteger(dis);
					
						this.LUGAR_EXPEDICION = readInteger(dis);
					
						this.SEXOS_ID = readInteger(dis);
					
			        this.SEXO_ANT = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ESTATURA = null;
           				} else {
           			    	this.ESTATURA = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ESTATURA_ANT = null;
           				} else {
           			    	this.ESTATURA_ANT = dis.readFloat();
           				}
					
					this.FECHA_EXPEDICION_DOCUMENTO = readDate(dis);
					
					this.FECHAEX_ANT = readDate(dis);
					
					this.FECHA_NACIMIENTO = readDate(dis);
					
					this.FECHAN_ANT = readDate(dis);
					
						this.LUGAR_NACIMIENTO = readInteger(dis);
					
						this.LNACIMIENTO = readInteger(dis);
					
					this.DIRECCION = readString(dis);
					
					this.DIRECCION_ANT = readString(dis);
					
						this.LUGAR_RESIDENCIA = readInteger(dis);
					
						this.LRESIDENCIA = readInteger(dis);
					
						this.LOCALIDADES_ID = readInteger(dis);
					
						this.LOCALIDAD_ANT = readInteger(dis);
					
						this.GSANGUINEOS_ID = readInteger(dis);
					
						this.GRUPOS_ANT = readInteger(dis);
					
					this.TELEFONO = readString(dis);
					
					this.TELEFONO_ANT = readString(dis);
					
						this.OCUPACIONES_ID = readInteger(dis);
					
						this.OCUPACION_ANT = readInteger(dis);
					
						this.ETNICAS_ID = readInteger(dis);
					
						this.ETNICO_ANT = readInteger(dis);
					
						this.NSOCIOECONOMICOS_ID = readInteger(dis);
					
						this.NECONO_ANT = readInteger(dis);
					
						this.TVIVIENDA_ID = readInteger(dis);
					
						this.TVIVIENDA_ANT = readInteger(dis);
					
						this.NEDUCATIVOS_ID = readInteger(dis);
					
						this.NEDUCATIVO_ANT = readInteger(dis);
					
						this.ESMADSCRITO = readInteger(dis);
					
						this.ESM_ANT = readInteger(dis);
					
						this.ENTAPORTANTES_ID = readInteger(dis);
					
						this.ENTIDAD_ANT = readInteger(dis);
					
						this.GRDMILITARES_ID = readInteger(dis);
					
						this.GRADO_ANT = readInteger(dis);
					
						this.FUERZAS_ID = readInteger(dis);
					
						this.FUERZA_ANT = readInteger(dis);
					
						this.UMILITARES_ID = readInteger(dis);
					
						this.UNIDAD_ANT = readInteger(dis);
					
						this.TVINCULACIONES_ID = readInteger(dis);
					
						this.TVINCULA_ANT = readInteger(dis);
					
					this.ESTADO_ENTIDAD = readString(dis);
					
					this.ESTADO_ENT_ANT = readString(dis);
					
						this.ENTIDAD_PRINCIPAL = readInteger(dis);
					
						this.PRINCIPAL_ANT = readInteger(dis);
					
						this.TREGIMEN_ID = readInteger(dis);
					
						this.TREGIMEN_ANT = readInteger(dis);
					
						this.ID_UNICO_ENTIDAD = readInteger(dis);
					
					this.FECHA_CADUCIDAD = readDate(dis);
					
					this.FCADUCIDAD_ANT = readDate(dis);
					
					this.FECHA_VINCULACION = readDate(dis);
					
					this.FECHA_VINC_ANT = readDate(dis);
					
						this.ESTADOS_ID = readInteger(dis);
					
			        this.ESTADO_ANT = dis.readInt();
					
					this.OBSERVACIONES = readString(dis);
					
						this.USUARIOS_ID = readInteger(dis);
					
						this.MOTIVOSESTADO_ID = readInteger(dis);
					
					this.MOTIVO = readString(dis);
					
						this.RNOVEDADES_ID = readInteger(dis);
					
						this.PERSONAS_ID = readInteger(dis);
					
						this.AFILIADO_ID = readInteger(dis);
					
					this.TIPO_AFILIADO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
					this.CORREO_ELECTRONICO = readString(dis);
					
					this.CORREO_ELECTRONICO_ANT = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.CELULAR_ANT = readString(dis);
					
					this.FECHA_DEFUNCION = readDate(dis);
					
					this.FECHA_DEFUNCION_ANT = readDate(dis);
					
						this.PLANAFILIACIONES_ID = readInteger(dis);
					
						this.PLANAFILIACIONES_ID_ANT = readInteger(dis);
					
						this.ID_BDUA = readInteger(dis);
					
						this.ID_BDUA_ANT = readInteger(dis);
					
					this.MOTIVO_CAMBIO_ESTADO = readString(dis);
					
					this.MOTIVO_CAMBIO_ESM = readString(dis);
					
						this.TDISCAPACIDADES_ID = readInteger(dis);
					
						this.TDISCAPACIDADES_ID_ANT = readInteger(dis);
					
						this.PESPECIAL_ID = readInteger(dis);
					
						this.PESPECIAL_ID_ANT = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.PNOMBRE_ANT,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.SNOMBRE_ANT,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.PAPELLIDO_ANT,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.SAPELLIDO_ANT,dos);
					
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// int
				
		            	dos.writeInt(this.TDOCUMENTO_ANT);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ANT,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_EXP_DOC,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_EXPEDICION,dos);
					
					// Integer
				
						writeInteger(this.SEXOS_ID,dos);
					
					// int
				
		            	dos.writeInt(this.SEXO_ANT);
					
					// Float
				
						if(this.ESTATURA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ESTATURA);
		            	}
					
					// Float
				
						if(this.ESTATURA_ANT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ESTATURA_ANT);
		            	}
					
					// java.util.Date
				
						writeDate(this.FECHA_EXPEDICION_DOCUMENTO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAEX_ANT,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_NACIMIENTO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAN_ANT,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_NACIMIENTO,dos);
					
					// Integer
				
						writeInteger(this.LNACIMIENTO,dos);
					
					// String
				
						writeString(this.DIRECCION,dos);
					
					// String
				
						writeString(this.DIRECCION_ANT,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_RESIDENCIA,dos);
					
					// Integer
				
						writeInteger(this.LRESIDENCIA,dos);
					
					// Integer
				
						writeInteger(this.LOCALIDADES_ID,dos);
					
					// Integer
				
						writeInteger(this.LOCALIDAD_ANT,dos);
					
					// Integer
				
						writeInteger(this.GSANGUINEOS_ID,dos);
					
					// Integer
				
						writeInteger(this.GRUPOS_ANT,dos);
					
					// String
				
						writeString(this.TELEFONO,dos);
					
					// String
				
						writeString(this.TELEFONO_ANT,dos);
					
					// Integer
				
						writeInteger(this.OCUPACIONES_ID,dos);
					
					// Integer
				
						writeInteger(this.OCUPACION_ANT,dos);
					
					// Integer
				
						writeInteger(this.ETNICAS_ID,dos);
					
					// Integer
				
						writeInteger(this.ETNICO_ANT,dos);
					
					// Integer
				
						writeInteger(this.NSOCIOECONOMICOS_ID,dos);
					
					// Integer
				
						writeInteger(this.NECONO_ANT,dos);
					
					// Integer
				
						writeInteger(this.TVIVIENDA_ID,dos);
					
					// Integer
				
						writeInteger(this.TVIVIENDA_ANT,dos);
					
					// Integer
				
						writeInteger(this.NEDUCATIVOS_ID,dos);
					
					// Integer
				
						writeInteger(this.NEDUCATIVO_ANT,dos);
					
					// Integer
				
						writeInteger(this.ESMADSCRITO,dos);
					
					// Integer
				
						writeInteger(this.ESM_ANT,dos);
					
					// Integer
				
						writeInteger(this.ENTAPORTANTES_ID,dos);
					
					// Integer
				
						writeInteger(this.ENTIDAD_ANT,dos);
					
					// Integer
				
						writeInteger(this.GRDMILITARES_ID,dos);
					
					// Integer
				
						writeInteger(this.GRADO_ANT,dos);
					
					// Integer
				
						writeInteger(this.FUERZAS_ID,dos);
					
					// Integer
				
						writeInteger(this.FUERZA_ANT,dos);
					
					// Integer
				
						writeInteger(this.UMILITARES_ID,dos);
					
					// Integer
				
						writeInteger(this.UNIDAD_ANT,dos);
					
					// Integer
				
						writeInteger(this.TVINCULACIONES_ID,dos);
					
					// Integer
				
						writeInteger(this.TVINCULA_ANT,dos);
					
					// String
				
						writeString(this.ESTADO_ENTIDAD,dos);
					
					// String
				
						writeString(this.ESTADO_ENT_ANT,dos);
					
					// Integer
				
						writeInteger(this.ENTIDAD_PRINCIPAL,dos);
					
					// Integer
				
						writeInteger(this.PRINCIPAL_ANT,dos);
					
					// Integer
				
						writeInteger(this.TREGIMEN_ID,dos);
					
					// Integer
				
						writeInteger(this.TREGIMEN_ANT,dos);
					
					// Integer
				
						writeInteger(this.ID_UNICO_ENTIDAD,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_CADUCIDAD,dos);
					
					// java.util.Date
				
						writeDate(this.FCADUCIDAD_ANT,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_VINCULACION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_VINC_ANT,dos);
					
					// Integer
				
						writeInteger(this.ESTADOS_ID,dos);
					
					// int
				
		            	dos.writeInt(this.ESTADO_ANT);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// Integer
				
						writeInteger(this.USUARIOS_ID,dos);
					
					// Integer
				
						writeInteger(this.MOTIVOSESTADO_ID,dos);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// Integer
				
						writeInteger(this.RNOVEDADES_ID,dos);
					
					// Integer
				
						writeInteger(this.PERSONAS_ID,dos);
					
					// Integer
				
						writeInteger(this.AFILIADO_ID,dos);
					
					// String
				
						writeString(this.TIPO_AFILIADO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
					// String
				
						writeString(this.CORREO_ELECTRONICO,dos);
					
					// String
				
						writeString(this.CORREO_ELECTRONICO_ANT,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// String
				
						writeString(this.CELULAR_ANT,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_DEFUNCION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_DEFUNCION_ANT,dos);
					
					// Integer
				
						writeInteger(this.PLANAFILIACIONES_ID,dos);
					
					// Integer
				
						writeInteger(this.PLANAFILIACIONES_ID_ANT,dos);
					
					// Integer
				
						writeInteger(this.ID_BDUA,dos);
					
					// Integer
				
						writeInteger(this.ID_BDUA_ANT,dos);
					
					// String
				
						writeString(this.MOTIVO_CAMBIO_ESTADO,dos);
					
					// String
				
						writeString(this.MOTIVO_CAMBIO_ESM,dos);
					
					// Integer
				
						writeInteger(this.TDISCAPACIDADES_ID,dos);
					
					// Integer
				
						writeInteger(this.TDISCAPACIDADES_ID_ANT,dos);
					
					// Integer
				
						writeInteger(this.PESPECIAL_ID,dos);
					
					// Integer
				
						writeInteger(this.PESPECIAL_ID_ANT,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.PNOMBRE_ANT,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.SNOMBRE_ANT,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.PAPELLIDO_ANT,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.SAPELLIDO_ANT,dos);
					
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// int
				
		            	dos.writeInt(this.TDOCUMENTO_ANT);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ANT,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_EXP_DOC,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_EXPEDICION,dos);
					
					// Integer
				
						writeInteger(this.SEXOS_ID,dos);
					
					// int
				
		            	dos.writeInt(this.SEXO_ANT);
					
					// Float
				
						if(this.ESTATURA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ESTATURA);
		            	}
					
					// Float
				
						if(this.ESTATURA_ANT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ESTATURA_ANT);
		            	}
					
					// java.util.Date
				
						writeDate(this.FECHA_EXPEDICION_DOCUMENTO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAEX_ANT,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_NACIMIENTO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAN_ANT,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_NACIMIENTO,dos);
					
					// Integer
				
						writeInteger(this.LNACIMIENTO,dos);
					
					// String
				
						writeString(this.DIRECCION,dos);
					
					// String
				
						writeString(this.DIRECCION_ANT,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_RESIDENCIA,dos);
					
					// Integer
				
						writeInteger(this.LRESIDENCIA,dos);
					
					// Integer
				
						writeInteger(this.LOCALIDADES_ID,dos);
					
					// Integer
				
						writeInteger(this.LOCALIDAD_ANT,dos);
					
					// Integer
				
						writeInteger(this.GSANGUINEOS_ID,dos);
					
					// Integer
				
						writeInteger(this.GRUPOS_ANT,dos);
					
					// String
				
						writeString(this.TELEFONO,dos);
					
					// String
				
						writeString(this.TELEFONO_ANT,dos);
					
					// Integer
				
						writeInteger(this.OCUPACIONES_ID,dos);
					
					// Integer
				
						writeInteger(this.OCUPACION_ANT,dos);
					
					// Integer
				
						writeInteger(this.ETNICAS_ID,dos);
					
					// Integer
				
						writeInteger(this.ETNICO_ANT,dos);
					
					// Integer
				
						writeInteger(this.NSOCIOECONOMICOS_ID,dos);
					
					// Integer
				
						writeInteger(this.NECONO_ANT,dos);
					
					// Integer
				
						writeInteger(this.TVIVIENDA_ID,dos);
					
					// Integer
				
						writeInteger(this.TVIVIENDA_ANT,dos);
					
					// Integer
				
						writeInteger(this.NEDUCATIVOS_ID,dos);
					
					// Integer
				
						writeInteger(this.NEDUCATIVO_ANT,dos);
					
					// Integer
				
						writeInteger(this.ESMADSCRITO,dos);
					
					// Integer
				
						writeInteger(this.ESM_ANT,dos);
					
					// Integer
				
						writeInteger(this.ENTAPORTANTES_ID,dos);
					
					// Integer
				
						writeInteger(this.ENTIDAD_ANT,dos);
					
					// Integer
				
						writeInteger(this.GRDMILITARES_ID,dos);
					
					// Integer
				
						writeInteger(this.GRADO_ANT,dos);
					
					// Integer
				
						writeInteger(this.FUERZAS_ID,dos);
					
					// Integer
				
						writeInteger(this.FUERZA_ANT,dos);
					
					// Integer
				
						writeInteger(this.UMILITARES_ID,dos);
					
					// Integer
				
						writeInteger(this.UNIDAD_ANT,dos);
					
					// Integer
				
						writeInteger(this.TVINCULACIONES_ID,dos);
					
					// Integer
				
						writeInteger(this.TVINCULA_ANT,dos);
					
					// String
				
						writeString(this.ESTADO_ENTIDAD,dos);
					
					// String
				
						writeString(this.ESTADO_ENT_ANT,dos);
					
					// Integer
				
						writeInteger(this.ENTIDAD_PRINCIPAL,dos);
					
					// Integer
				
						writeInteger(this.PRINCIPAL_ANT,dos);
					
					// Integer
				
						writeInteger(this.TREGIMEN_ID,dos);
					
					// Integer
				
						writeInteger(this.TREGIMEN_ANT,dos);
					
					// Integer
				
						writeInteger(this.ID_UNICO_ENTIDAD,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_CADUCIDAD,dos);
					
					// java.util.Date
				
						writeDate(this.FCADUCIDAD_ANT,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_VINCULACION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_VINC_ANT,dos);
					
					// Integer
				
						writeInteger(this.ESTADOS_ID,dos);
					
					// int
				
		            	dos.writeInt(this.ESTADO_ANT);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// Integer
				
						writeInteger(this.USUARIOS_ID,dos);
					
					// Integer
				
						writeInteger(this.MOTIVOSESTADO_ID,dos);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// Integer
				
						writeInteger(this.RNOVEDADES_ID,dos);
					
					// Integer
				
						writeInteger(this.PERSONAS_ID,dos);
					
					// Integer
				
						writeInteger(this.AFILIADO_ID,dos);
					
					// String
				
						writeString(this.TIPO_AFILIADO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
					// String
				
						writeString(this.CORREO_ELECTRONICO,dos);
					
					// String
				
						writeString(this.CORREO_ELECTRONICO_ANT,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// String
				
						writeString(this.CELULAR_ANT,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_DEFUNCION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_DEFUNCION_ANT,dos);
					
					// Integer
				
						writeInteger(this.PLANAFILIACIONES_ID,dos);
					
					// Integer
				
						writeInteger(this.PLANAFILIACIONES_ID_ANT,dos);
					
					// Integer
				
						writeInteger(this.ID_BDUA,dos);
					
					// Integer
				
						writeInteger(this.ID_BDUA_ANT,dos);
					
					// String
				
						writeString(this.MOTIVO_CAMBIO_ESTADO,dos);
					
					// String
				
						writeString(this.MOTIVO_CAMBIO_ESM,dos);
					
					// Integer
				
						writeInteger(this.TDISCAPACIDADES_ID,dos);
					
					// Integer
				
						writeInteger(this.TDISCAPACIDADES_ID_ANT,dos);
					
					// Integer
				
						writeInteger(this.PESPECIAL_ID,dos);
					
					// Integer
				
						writeInteger(this.PESPECIAL_ID_ANT,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",PNOMBRE_ANT="+PNOMBRE_ANT);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",SNOMBRE_ANT="+SNOMBRE_ANT);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",PAPELLIDO_ANT="+PAPELLIDO_ANT);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",SAPELLIDO_ANT="+SAPELLIDO_ANT);
		sb.append(",TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",TDOCUMENTO_ANT="+String.valueOf(TDOCUMENTO_ANT));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",DOCUMENTO_ANT="+DOCUMENTO_ANT);
		sb.append(",LUGAR_EXP_DOC="+String.valueOf(LUGAR_EXP_DOC));
		sb.append(",LUGAR_EXPEDICION="+String.valueOf(LUGAR_EXPEDICION));
		sb.append(",SEXOS_ID="+String.valueOf(SEXOS_ID));
		sb.append(",SEXO_ANT="+String.valueOf(SEXO_ANT));
		sb.append(",ESTATURA="+String.valueOf(ESTATURA));
		sb.append(",ESTATURA_ANT="+String.valueOf(ESTATURA_ANT));
		sb.append(",FECHA_EXPEDICION_DOCUMENTO="+String.valueOf(FECHA_EXPEDICION_DOCUMENTO));
		sb.append(",FECHAEX_ANT="+String.valueOf(FECHAEX_ANT));
		sb.append(",FECHA_NACIMIENTO="+String.valueOf(FECHA_NACIMIENTO));
		sb.append(",FECHAN_ANT="+String.valueOf(FECHAN_ANT));
		sb.append(",LUGAR_NACIMIENTO="+String.valueOf(LUGAR_NACIMIENTO));
		sb.append(",LNACIMIENTO="+String.valueOf(LNACIMIENTO));
		sb.append(",DIRECCION="+DIRECCION);
		sb.append(",DIRECCION_ANT="+DIRECCION_ANT);
		sb.append(",LUGAR_RESIDENCIA="+String.valueOf(LUGAR_RESIDENCIA));
		sb.append(",LRESIDENCIA="+String.valueOf(LRESIDENCIA));
		sb.append(",LOCALIDADES_ID="+String.valueOf(LOCALIDADES_ID));
		sb.append(",LOCALIDAD_ANT="+String.valueOf(LOCALIDAD_ANT));
		sb.append(",GSANGUINEOS_ID="+String.valueOf(GSANGUINEOS_ID));
		sb.append(",GRUPOS_ANT="+String.valueOf(GRUPOS_ANT));
		sb.append(",TELEFONO="+TELEFONO);
		sb.append(",TELEFONO_ANT="+TELEFONO_ANT);
		sb.append(",OCUPACIONES_ID="+String.valueOf(OCUPACIONES_ID));
		sb.append(",OCUPACION_ANT="+String.valueOf(OCUPACION_ANT));
		sb.append(",ETNICAS_ID="+String.valueOf(ETNICAS_ID));
		sb.append(",ETNICO_ANT="+String.valueOf(ETNICO_ANT));
		sb.append(",NSOCIOECONOMICOS_ID="+String.valueOf(NSOCIOECONOMICOS_ID));
		sb.append(",NECONO_ANT="+String.valueOf(NECONO_ANT));
		sb.append(",TVIVIENDA_ID="+String.valueOf(TVIVIENDA_ID));
		sb.append(",TVIVIENDA_ANT="+String.valueOf(TVIVIENDA_ANT));
		sb.append(",NEDUCATIVOS_ID="+String.valueOf(NEDUCATIVOS_ID));
		sb.append(",NEDUCATIVO_ANT="+String.valueOf(NEDUCATIVO_ANT));
		sb.append(",ESMADSCRITO="+String.valueOf(ESMADSCRITO));
		sb.append(",ESM_ANT="+String.valueOf(ESM_ANT));
		sb.append(",ENTAPORTANTES_ID="+String.valueOf(ENTAPORTANTES_ID));
		sb.append(",ENTIDAD_ANT="+String.valueOf(ENTIDAD_ANT));
		sb.append(",GRDMILITARES_ID="+String.valueOf(GRDMILITARES_ID));
		sb.append(",GRADO_ANT="+String.valueOf(GRADO_ANT));
		sb.append(",FUERZAS_ID="+String.valueOf(FUERZAS_ID));
		sb.append(",FUERZA_ANT="+String.valueOf(FUERZA_ANT));
		sb.append(",UMILITARES_ID="+String.valueOf(UMILITARES_ID));
		sb.append(",UNIDAD_ANT="+String.valueOf(UNIDAD_ANT));
		sb.append(",TVINCULACIONES_ID="+String.valueOf(TVINCULACIONES_ID));
		sb.append(",TVINCULA_ANT="+String.valueOf(TVINCULA_ANT));
		sb.append(",ESTADO_ENTIDAD="+ESTADO_ENTIDAD);
		sb.append(",ESTADO_ENT_ANT="+ESTADO_ENT_ANT);
		sb.append(",ENTIDAD_PRINCIPAL="+String.valueOf(ENTIDAD_PRINCIPAL));
		sb.append(",PRINCIPAL_ANT="+String.valueOf(PRINCIPAL_ANT));
		sb.append(",TREGIMEN_ID="+String.valueOf(TREGIMEN_ID));
		sb.append(",TREGIMEN_ANT="+String.valueOf(TREGIMEN_ANT));
		sb.append(",ID_UNICO_ENTIDAD="+String.valueOf(ID_UNICO_ENTIDAD));
		sb.append(",FECHA_CADUCIDAD="+String.valueOf(FECHA_CADUCIDAD));
		sb.append(",FCADUCIDAD_ANT="+String.valueOf(FCADUCIDAD_ANT));
		sb.append(",FECHA_VINCULACION="+String.valueOf(FECHA_VINCULACION));
		sb.append(",FECHA_VINC_ANT="+String.valueOf(FECHA_VINC_ANT));
		sb.append(",ESTADOS_ID="+String.valueOf(ESTADOS_ID));
		sb.append(",ESTADO_ANT="+String.valueOf(ESTADO_ANT));
		sb.append(",OBSERVACIONES="+OBSERVACIONES);
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",MOTIVOSESTADO_ID="+String.valueOf(MOTIVOSESTADO_ID));
		sb.append(",MOTIVO="+MOTIVO);
		sb.append(",RNOVEDADES_ID="+String.valueOf(RNOVEDADES_ID));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",AFILIADO_ID="+String.valueOf(AFILIADO_ID));
		sb.append(",TIPO_AFILIADO="+TIPO_AFILIADO);
		sb.append(",PROCESADO="+String.valueOf(PROCESADO));
		sb.append(",CORREO_ELECTRONICO="+CORREO_ELECTRONICO);
		sb.append(",CORREO_ELECTRONICO_ANT="+CORREO_ELECTRONICO_ANT);
		sb.append(",CELULAR="+CELULAR);
		sb.append(",CELULAR_ANT="+CELULAR_ANT);
		sb.append(",FECHA_DEFUNCION="+String.valueOf(FECHA_DEFUNCION));
		sb.append(",FECHA_DEFUNCION_ANT="+String.valueOf(FECHA_DEFUNCION_ANT));
		sb.append(",PLANAFILIACIONES_ID="+String.valueOf(PLANAFILIACIONES_ID));
		sb.append(",PLANAFILIACIONES_ID_ANT="+String.valueOf(PLANAFILIACIONES_ID_ANT));
		sb.append(",ID_BDUA="+String.valueOf(ID_BDUA));
		sb.append(",ID_BDUA_ANT="+String.valueOf(ID_BDUA_ANT));
		sb.append(",MOTIVO_CAMBIO_ESTADO="+MOTIVO_CAMBIO_ESTADO);
		sb.append(",MOTIVO_CAMBIO_ESM="+MOTIVO_CAMBIO_ESM);
		sb.append(",TDISCAPACIDADES_ID="+String.valueOf(TDISCAPACIDADES_ID));
		sb.append(",TDISCAPACIDADES_ID_ANT="+String.valueOf(TDISCAPACIDADES_ID_ANT));
		sb.append(",PESPECIAL_ID="+String.valueOf(PESPECIAL_ID));
		sb.append(",PESPECIAL_ID_ANT="+String.valueOf(PESPECIAL_ID_ANT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_34Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_34Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_34_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_21Process(globalMap);
		tHashInput_22Process(globalMap);
		tHashInput_23Process(globalMap);
		tHashInput_24Process(globalMap);
		tHashInput_25Process(globalMap);
		tHashInput_26Process(globalMap);
		tHashInput_28Process(globalMap);
		tHashInput_29Process(globalMap);
		tHashInput_30Process(globalMap);

		row44Struct row44 = new row44Struct();
ACTUALIZAR_PERSONASStruct ACTUALIZAR_PERSONAS = new ACTUALIZAR_PERSONASStruct();
CAMBIO_TDOCUMENTOS_IDStruct CAMBIO_TDOCUMENTOS_ID = new CAMBIO_TDOCUMENTOS_IDStruct();
CAMBIO_DOCUMENTOStruct CAMBIO_DOCUMENTO = new CAMBIO_DOCUMENTOStruct();
CAMBIO_PRIMER_NOMBREStruct CAMBIO_PRIMER_NOMBRE = new CAMBIO_PRIMER_NOMBREStruct();
CAMBIO_SEGUNDO_NOMBREStruct CAMBIO_SEGUNDO_NOMBRE = new CAMBIO_SEGUNDO_NOMBREStruct();
CAMBIO_PRIMER_APELLIDOStruct CAMBIO_PRIMER_APELLIDO = new CAMBIO_PRIMER_APELLIDOStruct();
CAMBIO_SEGUNDO_APELLIDOStruct CAMBIO_SEGUNDO_APELLIDO = new CAMBIO_SEGUNDO_APELLIDOStruct();
CAMBIO_FECHA_NACIMIENTOStruct CAMBIO_FECHA_NACIMIENTO = new CAMBIO_FECHA_NACIMIENTOStruct();
CAMBIO_SEXO_IDStruct CAMBIO_SEXO_ID = new CAMBIO_SEXO_IDStruct();
CAMBIO_DIRECCIONStruct CAMBIO_DIRECCION = new CAMBIO_DIRECCIONStruct();
CAMBIO_LUGAR_RESIDENCIAStruct CAMBIO_LUGAR_RESIDENCIA = new CAMBIO_LUGAR_RESIDENCIAStruct();
CAMBIO_ESMADSCRITOStruct CAMBIO_ESMADSCRITO = new CAMBIO_ESMADSCRITOStruct();
CAMBIO_ESTADOS_IDStruct CAMBIO_ESTADOS_ID = new CAMBIO_ESTADOS_IDStruct();
HESTADOSStruct HESTADOS = new HESTADOSStruct();
ENTIDAD_APORTANTEStruct ENTIDAD_APORTANTE = new ENTIDAD_APORTANTEStruct();
CAMBIOS_AFILIACIONStruct CAMBIOS_AFILIACION = new CAMBIOS_AFILIACIONStruct();
CAMBIO_FECHA_CADUCIDADStruct CAMBIO_FECHA_CADUCIDAD = new CAMBIO_FECHA_CADUCIDADStruct();
CAMBIO_ENTIDAD_PRINCIPALStruct CAMBIO_ENTIDAD_PRINCIPAL = new CAMBIO_ENTIDAD_PRINCIPALStruct();
CAMBIO_PLAN_AFILIACIONStruct CAMBIO_PLAN_AFILIACION = new CAMBIO_PLAN_AFILIACIONStruct();
CAMBIO_FECHA_DEFUNCIONStruct CAMBIO_FECHA_DEFUNCION = new CAMBIO_FECHA_DEFUNCIONStruct();





	
	/**
	 * [tOracleOutput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_8", false);
		start_Hash.put("tOracleOutput_8", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"ACTUALIZAR_PERSONAS");
					}
				
		int tos_count_tOracleOutput_8 = 0;
		






        int updateKeyCount_tOracleOutput_8 = 1;
        if(updateKeyCount_tOracleOutput_8 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_8 == 30 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_8 = 0;
    int nb_line_update_tOracleOutput_8 = 0;
    int nb_line_inserted_tOracleOutput_8 = 0;
    int nb_line_deleted_tOracleOutput_8 = 0;
    int nb_line_rejected_tOracleOutput_8 = 0;

    int tmp_batchUpdateCount_tOracleOutput_8 = 0;

    int deletedCount_tOracleOutput_8=0;
    int updatedCount_tOracleOutput_8=0;
    int insertedCount_tOracleOutput_8=0;
    int rowsToCommitCount_tOracleOutput_8=0;
    int rejectedCount_tOracleOutput_8=0;

    boolean whetherReject_tOracleOutput_8 = false;

    java.sql.Connection conn_tOracleOutput_8 = null;

    //optional table
    String dbschema_tOracleOutput_8 = null;
    String tableName_tOracleOutput_8 = null;
        dbschema_tOracleOutput_8 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_8 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_8=0;

        if(dbschema_tOracleOutput_8 == null || dbschema_tOracleOutput_8.trim().length() == 0) {
            tableName_tOracleOutput_8 = ("GEN_PERSONAS");
        } else {
            tableName_tOracleOutput_8 = dbschema_tOracleOutput_8 + "." + ("GEN_PERSONAS");
        }
                String update_tOracleOutput_8 = "UPDATE " + tableName_tOracleOutput_8 + " SET PRIMER_NOMBRE = ?,SEGUNDO_NOMBRE = ?,PRIMER_APELLIDO = ?,SEGUNDO_APELLIDO = ?,TDOCUMENTOS_ID = ?,DOCUMENTO = ?,LUGAR_EXPEDICION = ?,SEXO_ID = ?,ESTATURA = ?,FECHA_EXPEDICION = ?,FECHA_NACIMIENTO = ?,LUGAR_NACIMIENTO = ?,DIRECCION = ?,LUGAR_RESIDENCIA = ?,LOCALIDADES_ID = ?,GSANGUINEOS_ID = ?,TELEFONO = ?,OCUPACIONES_ID = ?,ETNICAS_ID = ?,NSOCIOECONOMICOS_ID = ?,TVIVIENDA_ID = ?,NEDUCATIVOS_ID = ?,ESMADSCRITO = ?,CELULAR = ?,EMAIL = ?,FECHA_DEFUNCION = ?,ID_BDUA = ?,TDISCAPACIDADES_ID = ?,PESPECIAL_ID = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_8 = conn_tOracleOutput_8.prepareStatement(update_tOracleOutput_8);
                resourceMap.put("pstmt_tOracleOutput_8", pstmt_tOracleOutput_8);





 



/**
 * [tOracleOutput_8 begin ] stop
 */




	
	/**
	 * [tOracleOutput_25 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_25", false);
		start_Hash.put("tOracleOutput_25", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_25";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"CAMBIO_TDOCUMENTOS_ID");
					}
				
		int tos_count_tOracleOutput_25 = 0;
		






    
    int nb_line_tOracleOutput_25 = 0;
    int nb_line_update_tOracleOutput_25 = 0;
    int nb_line_inserted_tOracleOutput_25 = 0;
    int nb_line_deleted_tOracleOutput_25 = 0;
    int nb_line_rejected_tOracleOutput_25 = 0;

    int tmp_batchUpdateCount_tOracleOutput_25 = 0;

    int deletedCount_tOracleOutput_25=0;
    int updatedCount_tOracleOutput_25=0;
    int insertedCount_tOracleOutput_25=0;
    int rowsToCommitCount_tOracleOutput_25=0;
    int rejectedCount_tOracleOutput_25=0;

    boolean whetherReject_tOracleOutput_25 = false;

    java.sql.Connection conn_tOracleOutput_25 = null;

    //optional table
    String dbschema_tOracleOutput_25 = null;
    String tableName_tOracleOutput_25 = null;
        dbschema_tOracleOutput_25 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_25 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_25=0;

        if(dbschema_tOracleOutput_25 == null || dbschema_tOracleOutput_25.trim().length() == 0) {
            tableName_tOracleOutput_25 = ("AFI_HAFILIADOS");
        } else {
            tableName_tOracleOutput_25 = dbschema_tOracleOutput_25 + "." + ("AFI_HAFILIADOS");
        }
                String insert_tOracleOutput_25 = "INSERT INTO " + tableName_tOracleOutput_25 + " (AFILIADOS_ID,PROCESOS_ID,MOTIVO,RNOVEDADES_ID,VANTERIOR,VACTUAL,CAMPO) VALUES (?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_25 = conn_tOracleOutput_25.prepareStatement(insert_tOracleOutput_25);
                        resourceMap.put("pstmt_tOracleOutput_25", pstmt_tOracleOutput_25);





 



/**
 * [tOracleOutput_25 begin ] stop
 */




	
	/**
	 * [tOracleOutput_26 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_26", false);
		start_Hash.put("tOracleOutput_26", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_26";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"CAMBIO_DOCUMENTO");
					}
				
		int tos_count_tOracleOutput_26 = 0;
		






    
    int nb_line_tOracleOutput_26 = 0;
    int nb_line_update_tOracleOutput_26 = 0;
    int nb_line_inserted_tOracleOutput_26 = 0;
    int nb_line_deleted_tOracleOutput_26 = 0;
    int nb_line_rejected_tOracleOutput_26 = 0;

    int tmp_batchUpdateCount_tOracleOutput_26 = 0;

    int deletedCount_tOracleOutput_26=0;
    int updatedCount_tOracleOutput_26=0;
    int insertedCount_tOracleOutput_26=0;
    int rowsToCommitCount_tOracleOutput_26=0;
    int rejectedCount_tOracleOutput_26=0;

    boolean whetherReject_tOracleOutput_26 = false;

    java.sql.Connection conn_tOracleOutput_26 = null;

    //optional table
    String dbschema_tOracleOutput_26 = null;
    String tableName_tOracleOutput_26 = null;
        dbschema_tOracleOutput_26 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_26 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_26=0;

        if(dbschema_tOracleOutput_26 == null || dbschema_tOracleOutput_26.trim().length() == 0) {
            tableName_tOracleOutput_26 = ("AFI_HAFILIADOS");
        } else {
            tableName_tOracleOutput_26 = dbschema_tOracleOutput_26 + "." + ("AFI_HAFILIADOS");
        }
                String insert_tOracleOutput_26 = "INSERT INTO " + tableName_tOracleOutput_26 + " (AFILIADOS_ID,PROCESOS_ID,MOTIVO,RNOVEDADES_ID,VANTERIOR,VACTUAL,CAMPO) VALUES (?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_26 = conn_tOracleOutput_26.prepareStatement(insert_tOracleOutput_26);
                        resourceMap.put("pstmt_tOracleOutput_26", pstmt_tOracleOutput_26);





 



/**
 * [tOracleOutput_26 begin ] stop
 */




	
	/**
	 * [tOracleOutput_27 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_27", false);
		start_Hash.put("tOracleOutput_27", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_27";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"CAMBIO_PRIMER_NOMBRE");
					}
				
		int tos_count_tOracleOutput_27 = 0;
		






    
    int nb_line_tOracleOutput_27 = 0;
    int nb_line_update_tOracleOutput_27 = 0;
    int nb_line_inserted_tOracleOutput_27 = 0;
    int nb_line_deleted_tOracleOutput_27 = 0;
    int nb_line_rejected_tOracleOutput_27 = 0;

    int tmp_batchUpdateCount_tOracleOutput_27 = 0;

    int deletedCount_tOracleOutput_27=0;
    int updatedCount_tOracleOutput_27=0;
    int insertedCount_tOracleOutput_27=0;
    int rowsToCommitCount_tOracleOutput_27=0;
    int rejectedCount_tOracleOutput_27=0;

    boolean whetherReject_tOracleOutput_27 = false;

    java.sql.Connection conn_tOracleOutput_27 = null;

    //optional table
    String dbschema_tOracleOutput_27 = null;
    String tableName_tOracleOutput_27 = null;
        dbschema_tOracleOutput_27 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_27 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_27=0;

        if(dbschema_tOracleOutput_27 == null || dbschema_tOracleOutput_27.trim().length() == 0) {
            tableName_tOracleOutput_27 = ("AFI_HAFILIADOS");
        } else {
            tableName_tOracleOutput_27 = dbschema_tOracleOutput_27 + "." + ("AFI_HAFILIADOS");
        }
                String insert_tOracleOutput_27 = "INSERT INTO " + tableName_tOracleOutput_27 + " (AFILIADOS_ID,PROCESOS_ID,MOTIVO,RNOVEDADES_ID,VANTERIOR,VACTUAL,CAMPO) VALUES (?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_27 = conn_tOracleOutput_27.prepareStatement(insert_tOracleOutput_27);
                        resourceMap.put("pstmt_tOracleOutput_27", pstmt_tOracleOutput_27);





 



/**
 * [tOracleOutput_27 begin ] stop
 */




	
	/**
	 * [tOracleOutput_28 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_28", false);
		start_Hash.put("tOracleOutput_28", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_28";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"CAMBIO_SEGUNDO_NOMBRE");
					}
				
		int tos_count_tOracleOutput_28 = 0;
		






    
    int nb_line_tOracleOutput_28 = 0;
    int nb_line_update_tOracleOutput_28 = 0;
    int nb_line_inserted_tOracleOutput_28 = 0;
    int nb_line_deleted_tOracleOutput_28 = 0;
    int nb_line_rejected_tOracleOutput_28 = 0;

    int tmp_batchUpdateCount_tOracleOutput_28 = 0;

    int deletedCount_tOracleOutput_28=0;
    int updatedCount_tOracleOutput_28=0;
    int insertedCount_tOracleOutput_28=0;
    int rowsToCommitCount_tOracleOutput_28=0;
    int rejectedCount_tOracleOutput_28=0;

    boolean whetherReject_tOracleOutput_28 = false;

    java.sql.Connection conn_tOracleOutput_28 = null;

    //optional table
    String dbschema_tOracleOutput_28 = null;
    String tableName_tOracleOutput_28 = null;
        dbschema_tOracleOutput_28 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_28 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_28=0;

        if(dbschema_tOracleOutput_28 == null || dbschema_tOracleOutput_28.trim().length() == 0) {
            tableName_tOracleOutput_28 = ("AFI_HAFILIADOS");
        } else {
            tableName_tOracleOutput_28 = dbschema_tOracleOutput_28 + "." + ("AFI_HAFILIADOS");
        }
                String insert_tOracleOutput_28 = "INSERT INTO " + tableName_tOracleOutput_28 + " (AFILIADOS_ID,PROCESOS_ID,MOTIVO,RNOVEDADES_ID,VANTERIOR,VACTUAL,CAMPO) VALUES (?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_28 = conn_tOracleOutput_28.prepareStatement(insert_tOracleOutput_28);
                        resourceMap.put("pstmt_tOracleOutput_28", pstmt_tOracleOutput_28);





 



/**
 * [tOracleOutput_28 begin ] stop
 */




	
	/**
	 * [tOracleOutput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_9", false);
		start_Hash.put("tOracleOutput_9", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"CAMBIO_PRIMER_APELLIDO");
					}
				
		int tos_count_tOracleOutput_9 = 0;
		






    
    int nb_line_tOracleOutput_9 = 0;
    int nb_line_update_tOracleOutput_9 = 0;
    int nb_line_inserted_tOracleOutput_9 = 0;
    int nb_line_deleted_tOracleOutput_9 = 0;
    int nb_line_rejected_tOracleOutput_9 = 0;

    int tmp_batchUpdateCount_tOracleOutput_9 = 0;

    int deletedCount_tOracleOutput_9=0;
    int updatedCount_tOracleOutput_9=0;
    int insertedCount_tOracleOutput_9=0;
    int rowsToCommitCount_tOracleOutput_9=0;
    int rejectedCount_tOracleOutput_9=0;

    boolean whetherReject_tOracleOutput_9 = false;

    java.sql.Connection conn_tOracleOutput_9 = null;

    //optional table
    String dbschema_tOracleOutput_9 = null;
    String tableName_tOracleOutput_9 = null;
        dbschema_tOracleOutput_9 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_9 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_9=0;

        if(dbschema_tOracleOutput_9 == null || dbschema_tOracleOutput_9.trim().length() == 0) {
            tableName_tOracleOutput_9 = ("AFI_HAFILIADOS");
        } else {
            tableName_tOracleOutput_9 = dbschema_tOracleOutput_9 + "." + ("AFI_HAFILIADOS");
        }
                String insert_tOracleOutput_9 = "INSERT INTO " + tableName_tOracleOutput_9 + " (AFILIADOS_ID,PROCESOS_ID,MOTIVO,RNOVEDADES_ID,VANTERIOR,VACTUAL,CAMPO) VALUES (?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_9 = conn_tOracleOutput_9.prepareStatement(insert_tOracleOutput_9);
                        resourceMap.put("pstmt_tOracleOutput_9", pstmt_tOracleOutput_9);





 



/**
 * [tOracleOutput_9 begin ] stop
 */




	
	/**
	 * [tOracleOutput_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_20", false);
		start_Hash.put("tOracleOutput_20", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_20";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"CAMBIO_SEGUNDO_APELLIDO");
					}
				
		int tos_count_tOracleOutput_20 = 0;
		






    
    int nb_line_tOracleOutput_20 = 0;
    int nb_line_update_tOracleOutput_20 = 0;
    int nb_line_inserted_tOracleOutput_20 = 0;
    int nb_line_deleted_tOracleOutput_20 = 0;
    int nb_line_rejected_tOracleOutput_20 = 0;

    int tmp_batchUpdateCount_tOracleOutput_20 = 0;

    int deletedCount_tOracleOutput_20=0;
    int updatedCount_tOracleOutput_20=0;
    int insertedCount_tOracleOutput_20=0;
    int rowsToCommitCount_tOracleOutput_20=0;
    int rejectedCount_tOracleOutput_20=0;

    boolean whetherReject_tOracleOutput_20 = false;

    java.sql.Connection conn_tOracleOutput_20 = null;

    //optional table
    String dbschema_tOracleOutput_20 = null;
    String tableName_tOracleOutput_20 = null;
        dbschema_tOracleOutput_20 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_20 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_20=0;

        if(dbschema_tOracleOutput_20 == null || dbschema_tOracleOutput_20.trim().length() == 0) {
            tableName_tOracleOutput_20 = ("AFI_HAFILIADOS");
        } else {
            tableName_tOracleOutput_20 = dbschema_tOracleOutput_20 + "." + ("AFI_HAFILIADOS");
        }
                String insert_tOracleOutput_20 = "INSERT INTO " + tableName_tOracleOutput_20 + " (AFILIADOS_ID,PROCESOS_ID,MOTIVO,RNOVEDADES_ID,VANTERIOR,VACTUAL,CAMPO) VALUES (?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_20 = conn_tOracleOutput_20.prepareStatement(insert_tOracleOutput_20);
                        resourceMap.put("pstmt_tOracleOutput_20", pstmt_tOracleOutput_20);





 



/**
 * [tOracleOutput_20 begin ] stop
 */




	
	/**
	 * [tOracleOutput_29 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_29", false);
		start_Hash.put("tOracleOutput_29", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_29";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"CAMBIO_FECHA_NACIMIENTO");
					}
				
		int tos_count_tOracleOutput_29 = 0;
		






    
    int nb_line_tOracleOutput_29 = 0;
    int nb_line_update_tOracleOutput_29 = 0;
    int nb_line_inserted_tOracleOutput_29 = 0;
    int nb_line_deleted_tOracleOutput_29 = 0;
    int nb_line_rejected_tOracleOutput_29 = 0;

    int tmp_batchUpdateCount_tOracleOutput_29 = 0;

    int deletedCount_tOracleOutput_29=0;
    int updatedCount_tOracleOutput_29=0;
    int insertedCount_tOracleOutput_29=0;
    int rowsToCommitCount_tOracleOutput_29=0;
    int rejectedCount_tOracleOutput_29=0;

    boolean whetherReject_tOracleOutput_29 = false;

    java.sql.Connection conn_tOracleOutput_29 = null;

    //optional table
    String dbschema_tOracleOutput_29 = null;
    String tableName_tOracleOutput_29 = null;
        dbschema_tOracleOutput_29 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_29 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_29=0;

        if(dbschema_tOracleOutput_29 == null || dbschema_tOracleOutput_29.trim().length() == 0) {
            tableName_tOracleOutput_29 = ("AFI_HAFILIADOS");
        } else {
            tableName_tOracleOutput_29 = dbschema_tOracleOutput_29 + "." + ("AFI_HAFILIADOS");
        }
                String insert_tOracleOutput_29 = "INSERT INTO " + tableName_tOracleOutput_29 + " (AFILIADOS_ID,PROCESOS_ID,MOTIVO,RNOVEDADES_ID,VANTERIOR,VACTUAL,CAMPO) VALUES (?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_29 = conn_tOracleOutput_29.prepareStatement(insert_tOracleOutput_29);
                        resourceMap.put("pstmt_tOracleOutput_29", pstmt_tOracleOutput_29);





 



/**
 * [tOracleOutput_29 begin ] stop
 */




	
	/**
	 * [tOracleOutput_30 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_30", false);
		start_Hash.put("tOracleOutput_30", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_30";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"CAMBIO_SEXO_ID");
					}
				
		int tos_count_tOracleOutput_30 = 0;
		






    
    int nb_line_tOracleOutput_30 = 0;
    int nb_line_update_tOracleOutput_30 = 0;
    int nb_line_inserted_tOracleOutput_30 = 0;
    int nb_line_deleted_tOracleOutput_30 = 0;
    int nb_line_rejected_tOracleOutput_30 = 0;

    int tmp_batchUpdateCount_tOracleOutput_30 = 0;

    int deletedCount_tOracleOutput_30=0;
    int updatedCount_tOracleOutput_30=0;
    int insertedCount_tOracleOutput_30=0;
    int rowsToCommitCount_tOracleOutput_30=0;
    int rejectedCount_tOracleOutput_30=0;

    boolean whetherReject_tOracleOutput_30 = false;

    java.sql.Connection conn_tOracleOutput_30 = null;

    //optional table
    String dbschema_tOracleOutput_30 = null;
    String tableName_tOracleOutput_30 = null;
        dbschema_tOracleOutput_30 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_30 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_30=0;

        if(dbschema_tOracleOutput_30 == null || dbschema_tOracleOutput_30.trim().length() == 0) {
            tableName_tOracleOutput_30 = ("AFI_HAFILIADOS");
        } else {
            tableName_tOracleOutput_30 = dbschema_tOracleOutput_30 + "." + ("AFI_HAFILIADOS");
        }
                String insert_tOracleOutput_30 = "INSERT INTO " + tableName_tOracleOutput_30 + " (AFILIADOS_ID,PROCESOS_ID,MOTIVO,RNOVEDADES_ID,VANTERIOR,VACTUAL,CAMPO) VALUES (?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_30 = conn_tOracleOutput_30.prepareStatement(insert_tOracleOutput_30);
                        resourceMap.put("pstmt_tOracleOutput_30", pstmt_tOracleOutput_30);





 



/**
 * [tOracleOutput_30 begin ] stop
 */




	
	/**
	 * [tOracleOutput_24 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_24", false);
		start_Hash.put("tOracleOutput_24", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_24";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"CAMBIO_DIRECCION");
					}
				
		int tos_count_tOracleOutput_24 = 0;
		






    
    int nb_line_tOracleOutput_24 = 0;
    int nb_line_update_tOracleOutput_24 = 0;
    int nb_line_inserted_tOracleOutput_24 = 0;
    int nb_line_deleted_tOracleOutput_24 = 0;
    int nb_line_rejected_tOracleOutput_24 = 0;

    int tmp_batchUpdateCount_tOracleOutput_24 = 0;

    int deletedCount_tOracleOutput_24=0;
    int updatedCount_tOracleOutput_24=0;
    int insertedCount_tOracleOutput_24=0;
    int rowsToCommitCount_tOracleOutput_24=0;
    int rejectedCount_tOracleOutput_24=0;

    boolean whetherReject_tOracleOutput_24 = false;

    java.sql.Connection conn_tOracleOutput_24 = null;

    //optional table
    String dbschema_tOracleOutput_24 = null;
    String tableName_tOracleOutput_24 = null;
        dbschema_tOracleOutput_24 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_24 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_24=0;

        if(dbschema_tOracleOutput_24 == null || dbschema_tOracleOutput_24.trim().length() == 0) {
            tableName_tOracleOutput_24 = ("AFI_HAFILIADOS");
        } else {
            tableName_tOracleOutput_24 = dbschema_tOracleOutput_24 + "." + ("AFI_HAFILIADOS");
        }
                String insert_tOracleOutput_24 = "INSERT INTO " + tableName_tOracleOutput_24 + " (AFILIADOS_ID,PROCESOS_ID,MOTIVO,RNOVEDADES_ID,VANTERIOR,VACTUAL,CAMPO) VALUES (?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_24 = conn_tOracleOutput_24.prepareStatement(insert_tOracleOutput_24);
                        resourceMap.put("pstmt_tOracleOutput_24", pstmt_tOracleOutput_24);





 



/**
 * [tOracleOutput_24 begin ] stop
 */




	
	/**
	 * [tOracleOutput_23 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_23", false);
		start_Hash.put("tOracleOutput_23", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_23";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"CAMBIO_LUGAR_RESIDENCIA");
					}
				
		int tos_count_tOracleOutput_23 = 0;
		






    
    int nb_line_tOracleOutput_23 = 0;
    int nb_line_update_tOracleOutput_23 = 0;
    int nb_line_inserted_tOracleOutput_23 = 0;
    int nb_line_deleted_tOracleOutput_23 = 0;
    int nb_line_rejected_tOracleOutput_23 = 0;

    int tmp_batchUpdateCount_tOracleOutput_23 = 0;

    int deletedCount_tOracleOutput_23=0;
    int updatedCount_tOracleOutput_23=0;
    int insertedCount_tOracleOutput_23=0;
    int rowsToCommitCount_tOracleOutput_23=0;
    int rejectedCount_tOracleOutput_23=0;

    boolean whetherReject_tOracleOutput_23 = false;

    java.sql.Connection conn_tOracleOutput_23 = null;

    //optional table
    String dbschema_tOracleOutput_23 = null;
    String tableName_tOracleOutput_23 = null;
        dbschema_tOracleOutput_23 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_23 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_23=0;

        if(dbschema_tOracleOutput_23 == null || dbschema_tOracleOutput_23.trim().length() == 0) {
            tableName_tOracleOutput_23 = ("AFI_HAFILIADOS");
        } else {
            tableName_tOracleOutput_23 = dbschema_tOracleOutput_23 + "." + ("AFI_HAFILIADOS");
        }
                String insert_tOracleOutput_23 = "INSERT INTO " + tableName_tOracleOutput_23 + " (AFILIADOS_ID,PROCESOS_ID,MOTIVO,RNOVEDADES_ID,VANTERIOR,VACTUAL,CAMPO) VALUES (?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_23 = conn_tOracleOutput_23.prepareStatement(insert_tOracleOutput_23);
                        resourceMap.put("pstmt_tOracleOutput_23", pstmt_tOracleOutput_23);





 



/**
 * [tOracleOutput_23 begin ] stop
 */




	
	/**
	 * [tOracleOutput_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_22", false);
		start_Hash.put("tOracleOutput_22", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_22";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"CAMBIO_ESMADSCRITO");
					}
				
		int tos_count_tOracleOutput_22 = 0;
		






    
    int nb_line_tOracleOutput_22 = 0;
    int nb_line_update_tOracleOutput_22 = 0;
    int nb_line_inserted_tOracleOutput_22 = 0;
    int nb_line_deleted_tOracleOutput_22 = 0;
    int nb_line_rejected_tOracleOutput_22 = 0;

    int tmp_batchUpdateCount_tOracleOutput_22 = 0;

    int deletedCount_tOracleOutput_22=0;
    int updatedCount_tOracleOutput_22=0;
    int insertedCount_tOracleOutput_22=0;
    int rowsToCommitCount_tOracleOutput_22=0;
    int rejectedCount_tOracleOutput_22=0;

    boolean whetherReject_tOracleOutput_22 = false;

    java.sql.Connection conn_tOracleOutput_22 = null;

    //optional table
    String dbschema_tOracleOutput_22 = null;
    String tableName_tOracleOutput_22 = null;
        dbschema_tOracleOutput_22 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_22 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_22=0;

        if(dbschema_tOracleOutput_22 == null || dbschema_tOracleOutput_22.trim().length() == 0) {
            tableName_tOracleOutput_22 = ("AFI_HAFILIADOS");
        } else {
            tableName_tOracleOutput_22 = dbschema_tOracleOutput_22 + "." + ("AFI_HAFILIADOS");
        }
                String insert_tOracleOutput_22 = "INSERT INTO " + tableName_tOracleOutput_22 + " (AFILIADOS_ID,PROCESOS_ID,MOTIVO,RNOVEDADES_ID,VANTERIOR,VACTUAL,CAMPO) VALUES (?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_22 = conn_tOracleOutput_22.prepareStatement(insert_tOracleOutput_22);
                        resourceMap.put("pstmt_tOracleOutput_22", pstmt_tOracleOutput_22);





 



/**
 * [tOracleOutput_22 begin ] stop
 */




	
	/**
	 * [tOracleOutput_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_21", false);
		start_Hash.put("tOracleOutput_21", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_21";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"CAMBIO_ESTADOS_ID");
					}
				
		int tos_count_tOracleOutput_21 = 0;
		






    
    int nb_line_tOracleOutput_21 = 0;
    int nb_line_update_tOracleOutput_21 = 0;
    int nb_line_inserted_tOracleOutput_21 = 0;
    int nb_line_deleted_tOracleOutput_21 = 0;
    int nb_line_rejected_tOracleOutput_21 = 0;

    int tmp_batchUpdateCount_tOracleOutput_21 = 0;

    int deletedCount_tOracleOutput_21=0;
    int updatedCount_tOracleOutput_21=0;
    int insertedCount_tOracleOutput_21=0;
    int rowsToCommitCount_tOracleOutput_21=0;
    int rejectedCount_tOracleOutput_21=0;

    boolean whetherReject_tOracleOutput_21 = false;

    java.sql.Connection conn_tOracleOutput_21 = null;

    //optional table
    String dbschema_tOracleOutput_21 = null;
    String tableName_tOracleOutput_21 = null;
        dbschema_tOracleOutput_21 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_21 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_21=0;

        if(dbschema_tOracleOutput_21 == null || dbschema_tOracleOutput_21.trim().length() == 0) {
            tableName_tOracleOutput_21 = ("AFI_HAFILIADOS");
        } else {
            tableName_tOracleOutput_21 = dbschema_tOracleOutput_21 + "." + ("AFI_HAFILIADOS");
        }
                String insert_tOracleOutput_21 = "INSERT INTO " + tableName_tOracleOutput_21 + " (AFILIADOS_ID,PROCESOS_ID,MOTIVO,RNOVEDADES_ID,VANTERIOR,VACTUAL,CAMPO) VALUES (?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_21 = conn_tOracleOutput_21.prepareStatement(insert_tOracleOutput_21);
                        resourceMap.put("pstmt_tOracleOutput_21", pstmt_tOracleOutput_21);





 



/**
 * [tOracleOutput_21 begin ] stop
 */




	
	/**
	 * [tOracleOutput_31 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_31", false);
		start_Hash.put("tOracleOutput_31", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_31";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"HESTADOS");
					}
				
		int tos_count_tOracleOutput_31 = 0;
		






    
    int nb_line_tOracleOutput_31 = 0;
    int nb_line_update_tOracleOutput_31 = 0;
    int nb_line_inserted_tOracleOutput_31 = 0;
    int nb_line_deleted_tOracleOutput_31 = 0;
    int nb_line_rejected_tOracleOutput_31 = 0;

    int tmp_batchUpdateCount_tOracleOutput_31 = 0;

    int deletedCount_tOracleOutput_31=0;
    int updatedCount_tOracleOutput_31=0;
    int insertedCount_tOracleOutput_31=0;
    int rowsToCommitCount_tOracleOutput_31=0;
    int rejectedCount_tOracleOutput_31=0;

    boolean whetherReject_tOracleOutput_31 = false;

    java.sql.Connection conn_tOracleOutput_31 = null;

    //optional table
    String dbschema_tOracleOutput_31 = null;
    String tableName_tOracleOutput_31 = null;
        dbschema_tOracleOutput_31 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_31 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_31=0;

        if(dbschema_tOracleOutput_31 == null || dbschema_tOracleOutput_31.trim().length() == 0) {
            tableName_tOracleOutput_31 = ("AFI_HESTADOS");
        } else {
            tableName_tOracleOutput_31 = dbschema_tOracleOutput_31 + "." + ("AFI_HESTADOS");
        }
                String insert_tOracleOutput_31 = "INSERT INTO " + tableName_tOracleOutput_31 + " (USUARIOS_ID,AFILIADOS_ID,ESTADOS_ID,MOTIVOSESTADO_ID,FECHA) VALUES (?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_31 = conn_tOracleOutput_31.prepareStatement(insert_tOracleOutput_31);
                        resourceMap.put("pstmt_tOracleOutput_31", pstmt_tOracleOutput_31);





 



/**
 * [tOracleOutput_31 begin ] stop
 */




	
	/**
	 * [tOracleOutput_32 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_32", false);
		start_Hash.put("tOracleOutput_32", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_32";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"ENTIDAD_APORTANTE");
					}
				
		int tos_count_tOracleOutput_32 = 0;
		






        int updateKeyCount_tOracleOutput_32 = 1;
        if(updateKeyCount_tOracleOutput_32 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_32 == 11 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_32 = 0;
    int nb_line_update_tOracleOutput_32 = 0;
    int nb_line_inserted_tOracleOutput_32 = 0;
    int nb_line_deleted_tOracleOutput_32 = 0;
    int nb_line_rejected_tOracleOutput_32 = 0;

    int tmp_batchUpdateCount_tOracleOutput_32 = 0;

    int deletedCount_tOracleOutput_32=0;
    int updatedCount_tOracleOutput_32=0;
    int insertedCount_tOracleOutput_32=0;
    int rowsToCommitCount_tOracleOutput_32=0;
    int rejectedCount_tOracleOutput_32=0;

    boolean whetherReject_tOracleOutput_32 = false;

    java.sql.Connection conn_tOracleOutput_32 = null;

    //optional table
    String dbschema_tOracleOutput_32 = null;
    String tableName_tOracleOutput_32 = null;
        dbschema_tOracleOutput_32 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_32 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_32=0;

        if(dbschema_tOracleOutput_32 == null || dbschema_tOracleOutput_32.trim().length() == 0) {
            tableName_tOracleOutput_32 = ("GEN_AFILIADOS_ENTAPORTANTE");
        } else {
            tableName_tOracleOutput_32 = dbschema_tOracleOutput_32 + "." + ("GEN_AFILIADOS_ENTAPORTANTE");
        }
                String update_tOracleOutput_32 = "UPDATE " + tableName_tOracleOutput_32 + " SET AFILIADOS_ID = ?,ENTAPORTANTES_ID = ?,GRDMILITARES_ID = ?,FUERZAS_ID = ?,UMILITARES_ID = ?,PRINCIPAL = ?,ESTADO = ?,TVINCULACIONES_ID = ?,FECHA_INGRESO = ?,TREGIMEN_ID = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_32 = conn_tOracleOutput_32.prepareStatement(update_tOracleOutput_32);
                resourceMap.put("pstmt_tOracleOutput_32", pstmt_tOracleOutput_32);





 



/**
 * [tOracleOutput_32 begin ] stop
 */




	
	/**
	 * [tOracleOutput_33 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_33", false);
		start_Hash.put("tOracleOutput_33", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_33";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"CAMBIOS_AFILIACION");
					}
				
		int tos_count_tOracleOutput_33 = 0;
		






        int updateKeyCount_tOracleOutput_33 = 1;
        if(updateKeyCount_tOracleOutput_33 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_33 == 4 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_33 = 0;
    int nb_line_update_tOracleOutput_33 = 0;
    int nb_line_inserted_tOracleOutput_33 = 0;
    int nb_line_deleted_tOracleOutput_33 = 0;
    int nb_line_rejected_tOracleOutput_33 = 0;

    int tmp_batchUpdateCount_tOracleOutput_33 = 0;

    int deletedCount_tOracleOutput_33=0;
    int updatedCount_tOracleOutput_33=0;
    int insertedCount_tOracleOutput_33=0;
    int rowsToCommitCount_tOracleOutput_33=0;
    int rejectedCount_tOracleOutput_33=0;

    boolean whetherReject_tOracleOutput_33 = false;

    java.sql.Connection conn_tOracleOutput_33 = null;

    //optional table
    String dbschema_tOracleOutput_33 = null;
    String tableName_tOracleOutput_33 = null;
        dbschema_tOracleOutput_33 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_33 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_33=0;

        if(dbschema_tOracleOutput_33 == null || dbschema_tOracleOutput_33.trim().length() == 0) {
            tableName_tOracleOutput_33 = ("GEN_AFILIADOS");
        } else {
            tableName_tOracleOutput_33 = dbschema_tOracleOutput_33 + "." + ("GEN_AFILIADOS");
        }
                String update_tOracleOutput_33 = "UPDATE " + tableName_tOracleOutput_33 + " SET FECHA_CADUCIDAD = ?,PLANAFILIACIONES_ID = ?,OBSERVACIONES = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_33 = conn_tOracleOutput_33.prepareStatement(update_tOracleOutput_33);
                resourceMap.put("pstmt_tOracleOutput_33", pstmt_tOracleOutput_33);





 



/**
 * [tOracleOutput_33 begin ] stop
 */




	
	/**
	 * [tOracleOutput_38 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_38", false);
		start_Hash.put("tOracleOutput_38", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_38";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"CAMBIO_FECHA_CADUCIDAD");
					}
				
		int tos_count_tOracleOutput_38 = 0;
		






    
    int nb_line_tOracleOutput_38 = 0;
    int nb_line_update_tOracleOutput_38 = 0;
    int nb_line_inserted_tOracleOutput_38 = 0;
    int nb_line_deleted_tOracleOutput_38 = 0;
    int nb_line_rejected_tOracleOutput_38 = 0;

    int tmp_batchUpdateCount_tOracleOutput_38 = 0;

    int deletedCount_tOracleOutput_38=0;
    int updatedCount_tOracleOutput_38=0;
    int insertedCount_tOracleOutput_38=0;
    int rowsToCommitCount_tOracleOutput_38=0;
    int rejectedCount_tOracleOutput_38=0;

    boolean whetherReject_tOracleOutput_38 = false;

    java.sql.Connection conn_tOracleOutput_38 = null;

    //optional table
    String dbschema_tOracleOutput_38 = null;
    String tableName_tOracleOutput_38 = null;
        dbschema_tOracleOutput_38 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_38 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_38=0;

        if(dbschema_tOracleOutput_38 == null || dbschema_tOracleOutput_38.trim().length() == 0) {
            tableName_tOracleOutput_38 = ("AFI_HAFILIADOS");
        } else {
            tableName_tOracleOutput_38 = dbschema_tOracleOutput_38 + "." + ("AFI_HAFILIADOS");
        }
                String insert_tOracleOutput_38 = "INSERT INTO " + tableName_tOracleOutput_38 + " (AFILIADOS_ID,PROCESOS_ID,MOTIVO,RNOVEDADES_ID,VANTERIOR,VACTUAL,CAMPO) VALUES (?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_38 = conn_tOracleOutput_38.prepareStatement(insert_tOracleOutput_38);
                        resourceMap.put("pstmt_tOracleOutput_38", pstmt_tOracleOutput_38);





 



/**
 * [tOracleOutput_38 begin ] stop
 */




	
	/**
	 * [tOracleSP_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_9", false);
		start_Hash.put("tOracleSP_9", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"CAMBIO_ENTIDAD_PRINCIPAL");
					}
				
		int tos_count_tOracleSP_9 = 0;
		

	java.sql.Connection connection_tOracleSP_9 = null;
	connection_tOracleSP_9 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_1");
	

java.sql.CallableStatement statement_tOracleSP_9 = connection_tOracleSP_9.prepareCall("{call " + "cms2.updEntidadPrincipal" + "(?,?)}");

java.sql.Timestamp tmpDate_tOracleSP_9;
String tmpString_tOracleSP_9;

 



/**
 * [tOracleSP_9 begin ] stop
 */




	
	/**
	 * [tOracleOutput_39 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_39", false);
		start_Hash.put("tOracleOutput_39", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_39";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"CAMBIO_PLAN_AFILIACION");
					}
				
		int tos_count_tOracleOutput_39 = 0;
		






    
    int nb_line_tOracleOutput_39 = 0;
    int nb_line_update_tOracleOutput_39 = 0;
    int nb_line_inserted_tOracleOutput_39 = 0;
    int nb_line_deleted_tOracleOutput_39 = 0;
    int nb_line_rejected_tOracleOutput_39 = 0;

    int tmp_batchUpdateCount_tOracleOutput_39 = 0;

    int deletedCount_tOracleOutput_39=0;
    int updatedCount_tOracleOutput_39=0;
    int insertedCount_tOracleOutput_39=0;
    int rowsToCommitCount_tOracleOutput_39=0;
    int rejectedCount_tOracleOutput_39=0;

    boolean whetherReject_tOracleOutput_39 = false;

    java.sql.Connection conn_tOracleOutput_39 = null;

    //optional table
    String dbschema_tOracleOutput_39 = null;
    String tableName_tOracleOutput_39 = null;
        dbschema_tOracleOutput_39 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_39 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_39=0;

        if(dbschema_tOracleOutput_39 == null || dbschema_tOracleOutput_39.trim().length() == 0) {
            tableName_tOracleOutput_39 = ("AFI_HAFILIADOS");
        } else {
            tableName_tOracleOutput_39 = dbschema_tOracleOutput_39 + "." + ("AFI_HAFILIADOS");
        }
                String insert_tOracleOutput_39 = "INSERT INTO " + tableName_tOracleOutput_39 + " (AFILIADOS_ID,PROCESOS_ID,MOTIVO,RNOVEDADES_ID,VANTERIOR,VACTUAL,CAMPO) VALUES (?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_39 = conn_tOracleOutput_39.prepareStatement(insert_tOracleOutput_39);
                        resourceMap.put("pstmt_tOracleOutput_39", pstmt_tOracleOutput_39);





 



/**
 * [tOracleOutput_39 begin ] stop
 */




	
	/**
	 * [tOracleOutput_40 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_40", false);
		start_Hash.put("tOracleOutput_40", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_40";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"CAMBIO_FECHA_DEFUNCION");
					}
				
		int tos_count_tOracleOutput_40 = 0;
		






    
    int nb_line_tOracleOutput_40 = 0;
    int nb_line_update_tOracleOutput_40 = 0;
    int nb_line_inserted_tOracleOutput_40 = 0;
    int nb_line_deleted_tOracleOutput_40 = 0;
    int nb_line_rejected_tOracleOutput_40 = 0;

    int tmp_batchUpdateCount_tOracleOutput_40 = 0;

    int deletedCount_tOracleOutput_40=0;
    int updatedCount_tOracleOutput_40=0;
    int insertedCount_tOracleOutput_40=0;
    int rowsToCommitCount_tOracleOutput_40=0;
    int rejectedCount_tOracleOutput_40=0;

    boolean whetherReject_tOracleOutput_40 = false;

    java.sql.Connection conn_tOracleOutput_40 = null;

    //optional table
    String dbschema_tOracleOutput_40 = null;
    String tableName_tOracleOutput_40 = null;
        dbschema_tOracleOutput_40 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_40 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_40=0;

        if(dbschema_tOracleOutput_40 == null || dbschema_tOracleOutput_40.trim().length() == 0) {
            tableName_tOracleOutput_40 = ("AFI_HAFILIADOS");
        } else {
            tableName_tOracleOutput_40 = dbschema_tOracleOutput_40 + "." + ("AFI_HAFILIADOS");
        }
                String insert_tOracleOutput_40 = "INSERT INTO " + tableName_tOracleOutput_40 + " (AFILIADOS_ID,PROCESOS_ID,MOTIVO,RNOVEDADES_ID,VANTERIOR,VACTUAL,CAMPO) VALUES (?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_40 = conn_tOracleOutput_40.prepareStatement(insert_tOracleOutput_40);
                        resourceMap.put("pstmt_tOracleOutput_40", pstmt_tOracleOutput_40);





 



/**
 * [tOracleOutput_40 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row44");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row120Struct> tHash_Lookup_row120 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row120Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row120Struct>) 
					globalMap.get( "tHash_Lookup_row120" ))
					;					
					
	

row120Struct row120HashKey = new row120Struct();
row120Struct row120Default = new row120Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row121Struct> tHash_Lookup_row121 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row121Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row121Struct>) 
					globalMap.get( "tHash_Lookup_row121" ))
					;					
					
	

row121Struct row121HashKey = new row121Struct();
row121Struct row121Default = new row121Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row122Struct> tHash_Lookup_row122 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row122Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row122Struct>) 
					globalMap.get( "tHash_Lookup_row122" ))
					;					
					
	

row122Struct row122HashKey = new row122Struct();
row122Struct row122Default = new row122Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row123Struct> tHash_Lookup_row123 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row123Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row123Struct>) 
					globalMap.get( "tHash_Lookup_row123" ))
					;					
					
	

row123Struct row123HashKey = new row123Struct();
row123Struct row123Default = new row123Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row124Struct> tHash_Lookup_row124 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row124Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row124Struct>) 
					globalMap.get( "tHash_Lookup_row124" ))
					;					
					
	

row124Struct row124HashKey = new row124Struct();
row124Struct row124Default = new row124Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row125Struct> tHash_Lookup_row125 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row125Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row125Struct>) 
					globalMap.get( "tHash_Lookup_row125" ))
					;					
					
	

row125Struct row125HashKey = new row125Struct();
row125Struct row125Default = new row125Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row128Struct> tHash_Lookup_row128 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row128Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row128Struct>) 
					globalMap.get( "tHash_Lookup_row128" ))
					;					
					
	

row128Struct row128HashKey = new row128Struct();
row128Struct row128Default = new row128Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row129Struct> tHash_Lookup_row129 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row129Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row129Struct>) 
					globalMap.get( "tHash_Lookup_row129" ))
					;					
					
	

row129Struct row129HashKey = new row129Struct();
row129Struct row129Default = new row129Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row150Struct> tHash_Lookup_row150 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row150Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row150Struct>) 
					globalMap.get( "tHash_Lookup_row150" ))
					;					
					
	

row150Struct row150HashKey = new row150Struct();
row150Struct row150Default = new row150Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
ACTUALIZAR_PERSONASStruct ACTUALIZAR_PERSONAS_tmp = new ACTUALIZAR_PERSONASStruct();
CAMBIO_TDOCUMENTOS_IDStruct CAMBIO_TDOCUMENTOS_ID_tmp = new CAMBIO_TDOCUMENTOS_IDStruct();
CAMBIO_DOCUMENTOStruct CAMBIO_DOCUMENTO_tmp = new CAMBIO_DOCUMENTOStruct();
CAMBIO_PRIMER_NOMBREStruct CAMBIO_PRIMER_NOMBRE_tmp = new CAMBIO_PRIMER_NOMBREStruct();
CAMBIO_SEGUNDO_NOMBREStruct CAMBIO_SEGUNDO_NOMBRE_tmp = new CAMBIO_SEGUNDO_NOMBREStruct();
CAMBIO_PRIMER_APELLIDOStruct CAMBIO_PRIMER_APELLIDO_tmp = new CAMBIO_PRIMER_APELLIDOStruct();
CAMBIO_SEGUNDO_APELLIDOStruct CAMBIO_SEGUNDO_APELLIDO_tmp = new CAMBIO_SEGUNDO_APELLIDOStruct();
CAMBIO_FECHA_NACIMIENTOStruct CAMBIO_FECHA_NACIMIENTO_tmp = new CAMBIO_FECHA_NACIMIENTOStruct();
CAMBIO_SEXO_IDStruct CAMBIO_SEXO_ID_tmp = new CAMBIO_SEXO_IDStruct();
CAMBIO_DIRECCIONStruct CAMBIO_DIRECCION_tmp = new CAMBIO_DIRECCIONStruct();
CAMBIO_LUGAR_RESIDENCIAStruct CAMBIO_LUGAR_RESIDENCIA_tmp = new CAMBIO_LUGAR_RESIDENCIAStruct();
CAMBIO_ESMADSCRITOStruct CAMBIO_ESMADSCRITO_tmp = new CAMBIO_ESMADSCRITOStruct();
CAMBIO_ESTADOS_IDStruct CAMBIO_ESTADOS_ID_tmp = new CAMBIO_ESTADOS_IDStruct();
HESTADOSStruct HESTADOS_tmp = new HESTADOSStruct();
ENTIDAD_APORTANTEStruct ENTIDAD_APORTANTE_tmp = new ENTIDAD_APORTANTEStruct();
CAMBIOS_AFILIACIONStruct CAMBIOS_AFILIACION_tmp = new CAMBIOS_AFILIACIONStruct();
CAMBIO_FECHA_CADUCIDADStruct CAMBIO_FECHA_CADUCIDAD_tmp = new CAMBIO_FECHA_CADUCIDADStruct();
CAMBIO_ENTIDAD_PRINCIPALStruct CAMBIO_ENTIDAD_PRINCIPAL_tmp = new CAMBIO_ENTIDAD_PRINCIPALStruct();
CAMBIO_PLAN_AFILIACIONStruct CAMBIO_PLAN_AFILIACION_tmp = new CAMBIO_PLAN_AFILIACIONStruct();
CAMBIO_FECHA_DEFUNCIONStruct CAMBIO_FECHA_DEFUNCION_tmp = new CAMBIO_FECHA_DEFUNCIONStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tOracleInput_34 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_34", false);
		start_Hash.put("tOracleInput_34", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_34";
	
	
		int tos_count_tOracleInput_34 = 0;
		
	


	
		    int nb_line_tOracleInput_34 = 0;
		    java.sql.Connection conn_tOracleInput_34 = null;
				conn_tOracleInput_34 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_34 = false;
				boolean isConnectionWrapped_tOracleInput_34 = !(conn_tOracleInput_34 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_34.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_34 = null;
                if (isConnectionWrapped_tOracleInput_34) {
					unwrappedOraConn_tOracleInput_34 = conn_tOracleInput_34.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_34 != null) {
                        isTimeZoneNull_tOracleInput_34 = (unwrappedOraConn_tOracleInput_34.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_34 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_34).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_34) {
					java.sql.Statement stmtGetTZ_tOracleInput_34 = conn_tOracleInput_34.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_34 = stmtGetTZ_tOracleInput_34.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_34 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_34.next()) {
						sessionTimezone_tOracleInput_34 = rsGetTZ_tOracleInput_34.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_34 && unwrappedOraConn_tOracleInput_34 != null) {
                        unwrappedOraConn_tOracleInput_34.setSessionTimeZone(sessionTimezone_tOracleInput_34);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_34).setSessionTimeZone(sessionTimezone_tOracleInput_34);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_34 = conn_tOracleInput_34.createStatement();

		    String dbquery_tOracleInput_34 = "SELECT TSC.PRIMER_NOMBRE,\n       GP.PRIMER_NOMBRE AS PNOMBRE_ANT, \n       TSC.SEGUNDO_NOMBRE,\n       GP.SEGUNDO_NOMB"
+"RE AS SNOMBRE_ANT,\n       TSC.PRIMER_APELLIDO,\n       GP.PRIMER_APELLIDO AS PAPELLIDO_ANT,\n       TSC.SEGUNDO_APELLID"
+"O,\n       GP.SEGUNDO_APELLIDO AS SAPELLIDO_ANT,\n       TSC.TDOCUMENTOS_ID,\n       GP.TDOCUMENTOS_ID AS TDOCUMENTO_ANT"
+",\n       TSC.DOCUMENTO,\n       GP.DOCUMENTO AS DOCUMENTO_ANT,\n       TSC.LUGAR_EXP_DOC,\n       GP.LUGAR_EXPEDICION, "
+"      \n       TSC.SEXOS_ID,\n       GP.SEXO_ID AS SEXO_ANT,\n       TSC.ESTATURA,       \n       null AS ESTATURA_ANT, "
+"\n       TSC.FECHA_EXPEDICION_DOCUMENTO,\n       GP.FECHA_EXPEDICION  AS FECHAEX_ANT,\n       TSC.FECHA_NACIMIENTO,\n   "
+"    GP.FECHA_NACIMIENTO AS FECHAN_ANT,\n       TSC.LUGAR_NACIMIENTO,\n       GP.LUGAR_NACIMIENTO AS LNACIMIENTO,\n      "
+" TSC.DIRECCION,\n       GP.DIRECCION AS DIRECCION_ANT,\n       TSC.LUGAR_RESIDENCIA,\n       GP.LUGAR_RESIDENCIA AS LRES"
+"IDENCIA,\n       TSC.LOCALIDADES_ID,\n       GP.LOCALIDADES_ID AS LOCALIDAD_ANT,\n       TSC.GSANGUINEOS_ID,\n       GP."
+"GSANGUINEOS_ID AS GRUPOS_ANT,\n       TSC.TELEFONO,\n       GP.TELEFONO AS TELEFONO_ANT,\n       TSC.OCUPACIONES_ID,\n  "
+"     GP.OCUPACIONES_ID AS OCUPACION_ANT,\n       TSC.ETNICAS_ID,\n       GP.ETNICAS_ID AS ETNICO_ANT,\n       TSC.NSOCIO"
+"ECONOMICOS_ID,\n       GP.NSOCIOECONOMICOS_ID AS NECONO_ANT,\n       TSC.TVIVIENDA_ID,\n       GP.TVIVIENDA_ID AS TVIVIE"
+"NDA_ANT,\n       TSC.NEDUCATIVOS_ID,\n       GP.NEDUCATIVOS_ID AS NEDUCATIVO_ANT,\n       TSC.ESMADSCRITO,\n       GP.ES"
+"MADSCRITO AS ESM_ANT,\n       TSC.ENTAPORTANTES_ID,\n       GAE.ENTAPORTANTES_ID AS ENTIDAD_ANT,\n       TSC.GRDMILITARE"
+"S_ID,\n       GAE.GRDMILITARES_ID AS GRADO_ANT,\n       TSC.FUERZAS_ID,\n       GAE.FUERZAS_ID AS FUERZA_ANT,\n       TS"
+"C.UMILITARES_ID,\n       GAE.UMILITARES_ID AS UNIDAD_ANT,\n       TSC.TVINCULACIONES_ID,\n       GAE.TVINCULACIONES_ID A"
+"S TVINCULA_ANT,\n       TSC.ESTADO_ENTIDAD,\n       GAE.ESTADO AS ESTADO_ENT_ANT,       \n       TSC.ENTIDAD_PRINCIPAL,"
+"\n       GAE.PRINCIPAL AS PRINCIPAL_ANT,\n       TSC.TREGIMEN_ID,\n       GAE.TREGIMEN_ID AS TREGIMEN_ANT,\n       TSC.ID"
+"_UNICO_ENTIDAD,\n       TSC.FECHA_CADUCIDAD,       \n       GA.FECHA_CADUCIDAD AS FCADUCIDAD_ANT,\n       TSC.FECHA_VINC"
+"ULACION,\n       GAE.FECHA_INGRESO AS FECHA_VINC_ANT,\n       TSC.ESTADOS_ID,\n       AE.ID AS ESTADO_ANT,\n       NVL(T"
+"SC.OBSERVACIONES, 'Actualizacion basica del afiliado') AS OBSERVACIONES,       \n       TSC.USUARIOS_ID,\n       TSC.MOT"
+"IVOSESTADO_ID,\n       TSC.MOTIVO,\n       TSC.RNOVEDADES_ID,\n       TSC.PERSONAS_ID,\n       TSC.AFILIADO_ID,\n       "
+"TSC.TIPO_AFILIADO,\n       TSC.PROCESADO,\n       TSC.CORREO_ELECTRONICO,\n       GP.EMAIL AS CORREO_ELECTRONICO_ANT,\n "
+"      TSC.CELULAR,\n       GP.CELULAR AS CELULAR_ANT,\n       TSC.FECHA_DEFUNCION,\n       GP.FECHA_DEFUNCION AS FECHA_D"
+"EFUNCION_ANT,\n       TSC.PLANAFILIACIONES_ID,\n       GA.PLANAFILIACIONES_ID AS PLANAFILIACIONES_ID_ANT,\n	   NVL(TSC.I"
+"D_BDUA, 0) AS ID_BDUA, \n	   NVL(GP.ID_BDUA, 0) AS ID_BDUA_ANT,\n       TSC.MOTIVO_CAMBIO_ESTADO,	   \n       TSC.MOTIVO"
+"_CAMBIO_ESM,  \n       TSC.TDISCAPACIDADES_ID,\n       GP.TDISCAPACIDADES_ID AS TDISCAPACIDADES_ID_ANT,\n       TSC.PESP"
+"ECIAL_ID,\n       GP.PESPECIAL_ID AS PESPECIAL_ID_ANT\nFROM TST_CARGUEMASIVO TSC\nINNER JOIN GEN_PERSONAS GP ON GP.ID = "
+"TSC.PERSONAS_ID\nINNER JOIN GEN_AFILIADOS GA ON GA.ID = TSC.AFILIADO_ID AND GA.ESTREGISTRO_ID = 1\nINNER JOIN AFI_ESTADO"
+"S AE ON AE.NOMBRE = GA.ESTAFILIACION\nLEFT JOIN GEN_AFILIADOS_ENTAPORTANTE GAE ON GAE.ID = TSC.ID_UNICO_ENTIDAD AND GAE."
+"AFILIADOS_ID = TSC.AFILIADO_ID AND GAE.ESTREGISTRO_ID = 1\nWHERE TSC.PROCESADO IS NULL OR TSC.PROCESADO = 8";
		    

		    globalMap.put("tOracleInput_34_QUERY",dbquery_tOracleInput_34);

		    java.sql.ResultSet rs_tOracleInput_34 = null;

		    try {
		    	rs_tOracleInput_34 = stmt_tOracleInput_34.executeQuery(dbquery_tOracleInput_34);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_34 = rs_tOracleInput_34.getMetaData();
		    	int colQtyInRs_tOracleInput_34 = rsmd_tOracleInput_34.getColumnCount();

		    String tmpContent_tOracleInput_34 = null;
		    
		    
		    while (rs_tOracleInput_34.next()) {
		        nb_line_tOracleInput_34++;
		        
							if(colQtyInRs_tOracleInput_34 < 1) {
								row44.PRIMER_NOMBRE = null;
							} else {
	                         		
        	row44.PRIMER_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_34, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_34 < 2) {
								row44.PNOMBRE_ANT = null;
							} else {
	                         		
        	row44.PNOMBRE_ANT = routines.system.JDBCUtil.getString(rs_tOracleInput_34, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_34 < 3) {
								row44.SEGUNDO_NOMBRE = null;
							} else {
	                         		
        	row44.SEGUNDO_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_34, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_34 < 4) {
								row44.SNOMBRE_ANT = null;
							} else {
	                         		
        	row44.SNOMBRE_ANT = routines.system.JDBCUtil.getString(rs_tOracleInput_34, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_34 < 5) {
								row44.PRIMER_APELLIDO = null;
							} else {
	                         		
        	row44.PRIMER_APELLIDO = routines.system.JDBCUtil.getString(rs_tOracleInput_34, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_34 < 6) {
								row44.PAPELLIDO_ANT = null;
							} else {
	                         		
        	row44.PAPELLIDO_ANT = routines.system.JDBCUtil.getString(rs_tOracleInput_34, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_34 < 7) {
								row44.SEGUNDO_APELLIDO = null;
							} else {
	                         		
        	row44.SEGUNDO_APELLIDO = routines.system.JDBCUtil.getString(rs_tOracleInput_34, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_34 < 8) {
								row44.SAPELLIDO_ANT = null;
							} else {
	                         		
        	row44.SAPELLIDO_ANT = routines.system.JDBCUtil.getString(rs_tOracleInput_34, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_34 < 9) {
								row44.TDOCUMENTOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(9) != null) {
						row44.TDOCUMENTOS_ID = rs_tOracleInput_34.getInt(9);
					} else {
				
						row44.TDOCUMENTOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 10) {
								row44.TDOCUMENTO_ANT = 0;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(10) != null) {
						row44.TDOCUMENTO_ANT = rs_tOracleInput_34.getInt(10);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 11) {
								row44.DOCUMENTO = null;
							} else {
	                         		
        	row44.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_34, 11, false);
		                    }
							if(colQtyInRs_tOracleInput_34 < 12) {
								row44.DOCUMENTO_ANT = null;
							} else {
	                         		
        	row44.DOCUMENTO_ANT = routines.system.JDBCUtil.getString(rs_tOracleInput_34, 12, false);
		                    }
							if(colQtyInRs_tOracleInput_34 < 13) {
								row44.LUGAR_EXP_DOC = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(13) != null) {
						row44.LUGAR_EXP_DOC = rs_tOracleInput_34.getInt(13);
					} else {
				
						row44.LUGAR_EXP_DOC = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 14) {
								row44.LUGAR_EXPEDICION = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(14) != null) {
						row44.LUGAR_EXPEDICION = rs_tOracleInput_34.getInt(14);
					} else {
				
						row44.LUGAR_EXPEDICION = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 15) {
								row44.SEXOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(15) != null) {
						row44.SEXOS_ID = rs_tOracleInput_34.getInt(15);
					} else {
				
						row44.SEXOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 16) {
								row44.SEXO_ANT = 0;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(16) != null) {
						row44.SEXO_ANT = rs_tOracleInput_34.getInt(16);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 17) {
								row44.ESTATURA = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(17) != null) {
						row44.ESTATURA = rs_tOracleInput_34.getFloat(17);
					} else {
				
						row44.ESTATURA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 18) {
								row44.ESTATURA_ANT = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(18) != null) {
						row44.ESTATURA_ANT = rs_tOracleInput_34.getFloat(18);
					} else {
				
						row44.ESTATURA_ANT = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 19) {
								row44.FECHA_EXPEDICION_DOCUMENTO = null;
							} else {
										
			row44.FECHA_EXPEDICION_DOCUMENTO = routines.system.JDBCUtil.getDate(rs_tOracleInput_34, 19);
		                    }
							if(colQtyInRs_tOracleInput_34 < 20) {
								row44.FECHAEX_ANT = null;
							} else {
										
			row44.FECHAEX_ANT = routines.system.JDBCUtil.getDate(rs_tOracleInput_34, 20);
		                    }
							if(colQtyInRs_tOracleInput_34 < 21) {
								row44.FECHA_NACIMIENTO = null;
							} else {
										
			row44.FECHA_NACIMIENTO = routines.system.JDBCUtil.getDate(rs_tOracleInput_34, 21);
		                    }
							if(colQtyInRs_tOracleInput_34 < 22) {
								row44.FECHAN_ANT = null;
							} else {
										
			row44.FECHAN_ANT = routines.system.JDBCUtil.getDate(rs_tOracleInput_34, 22);
		                    }
							if(colQtyInRs_tOracleInput_34 < 23) {
								row44.LUGAR_NACIMIENTO = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(23) != null) {
						row44.LUGAR_NACIMIENTO = rs_tOracleInput_34.getInt(23);
					} else {
				
						row44.LUGAR_NACIMIENTO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 24) {
								row44.LNACIMIENTO = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(24) != null) {
						row44.LNACIMIENTO = rs_tOracleInput_34.getInt(24);
					} else {
				
						row44.LNACIMIENTO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 25) {
								row44.DIRECCION = null;
							} else {
	                         		
        	row44.DIRECCION = routines.system.JDBCUtil.getString(rs_tOracleInput_34, 25, false);
		                    }
							if(colQtyInRs_tOracleInput_34 < 26) {
								row44.DIRECCION_ANT = null;
							} else {
	                         		
        	row44.DIRECCION_ANT = routines.system.JDBCUtil.getString(rs_tOracleInput_34, 26, false);
		                    }
							if(colQtyInRs_tOracleInput_34 < 27) {
								row44.LUGAR_RESIDENCIA = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(27) != null) {
						row44.LUGAR_RESIDENCIA = rs_tOracleInput_34.getInt(27);
					} else {
				
						row44.LUGAR_RESIDENCIA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 28) {
								row44.LRESIDENCIA = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(28) != null) {
						row44.LRESIDENCIA = rs_tOracleInput_34.getInt(28);
					} else {
				
						row44.LRESIDENCIA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 29) {
								row44.LOCALIDADES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(29) != null) {
						row44.LOCALIDADES_ID = rs_tOracleInput_34.getInt(29);
					} else {
				
						row44.LOCALIDADES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 30) {
								row44.LOCALIDAD_ANT = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(30) != null) {
						row44.LOCALIDAD_ANT = rs_tOracleInput_34.getInt(30);
					} else {
				
						row44.LOCALIDAD_ANT = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 31) {
								row44.GSANGUINEOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(31) != null) {
						row44.GSANGUINEOS_ID = rs_tOracleInput_34.getInt(31);
					} else {
				
						row44.GSANGUINEOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 32) {
								row44.GRUPOS_ANT = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(32) != null) {
						row44.GRUPOS_ANT = rs_tOracleInput_34.getInt(32);
					} else {
				
						row44.GRUPOS_ANT = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 33) {
								row44.TELEFONO = null;
							} else {
	                         		
        	row44.TELEFONO = routines.system.JDBCUtil.getString(rs_tOracleInput_34, 33, false);
		                    }
							if(colQtyInRs_tOracleInput_34 < 34) {
								row44.TELEFONO_ANT = null;
							} else {
	                         		
        	row44.TELEFONO_ANT = routines.system.JDBCUtil.getString(rs_tOracleInput_34, 34, false);
		                    }
							if(colQtyInRs_tOracleInput_34 < 35) {
								row44.OCUPACIONES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(35) != null) {
						row44.OCUPACIONES_ID = rs_tOracleInput_34.getInt(35);
					} else {
				
						row44.OCUPACIONES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 36) {
								row44.OCUPACION_ANT = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(36) != null) {
						row44.OCUPACION_ANT = rs_tOracleInput_34.getInt(36);
					} else {
				
						row44.OCUPACION_ANT = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 37) {
								row44.ETNICAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(37) != null) {
						row44.ETNICAS_ID = rs_tOracleInput_34.getInt(37);
					} else {
				
						row44.ETNICAS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 38) {
								row44.ETNICO_ANT = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(38) != null) {
						row44.ETNICO_ANT = rs_tOracleInput_34.getInt(38);
					} else {
				
						row44.ETNICO_ANT = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 39) {
								row44.NSOCIOECONOMICOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(39) != null) {
						row44.NSOCIOECONOMICOS_ID = rs_tOracleInput_34.getInt(39);
					} else {
				
						row44.NSOCIOECONOMICOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 40) {
								row44.NECONO_ANT = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(40) != null) {
						row44.NECONO_ANT = rs_tOracleInput_34.getInt(40);
					} else {
				
						row44.NECONO_ANT = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 41) {
								row44.TVIVIENDA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(41) != null) {
						row44.TVIVIENDA_ID = rs_tOracleInput_34.getInt(41);
					} else {
				
						row44.TVIVIENDA_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 42) {
								row44.TVIVIENDA_ANT = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(42) != null) {
						row44.TVIVIENDA_ANT = rs_tOracleInput_34.getInt(42);
					} else {
				
						row44.TVIVIENDA_ANT = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 43) {
								row44.NEDUCATIVOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(43) != null) {
						row44.NEDUCATIVOS_ID = rs_tOracleInput_34.getInt(43);
					} else {
				
						row44.NEDUCATIVOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 44) {
								row44.NEDUCATIVO_ANT = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(44) != null) {
						row44.NEDUCATIVO_ANT = rs_tOracleInput_34.getInt(44);
					} else {
				
						row44.NEDUCATIVO_ANT = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 45) {
								row44.ESMADSCRITO = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(45) != null) {
						row44.ESMADSCRITO = rs_tOracleInput_34.getInt(45);
					} else {
				
						row44.ESMADSCRITO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 46) {
								row44.ESM_ANT = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(46) != null) {
						row44.ESM_ANT = rs_tOracleInput_34.getInt(46);
					} else {
				
						row44.ESM_ANT = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 47) {
								row44.ENTAPORTANTES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(47) != null) {
						row44.ENTAPORTANTES_ID = rs_tOracleInput_34.getInt(47);
					} else {
				
						row44.ENTAPORTANTES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 48) {
								row44.ENTIDAD_ANT = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(48) != null) {
						row44.ENTIDAD_ANT = rs_tOracleInput_34.getInt(48);
					} else {
				
						row44.ENTIDAD_ANT = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 49) {
								row44.GRDMILITARES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(49) != null) {
						row44.GRDMILITARES_ID = rs_tOracleInput_34.getInt(49);
					} else {
				
						row44.GRDMILITARES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 50) {
								row44.GRADO_ANT = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(50) != null) {
						row44.GRADO_ANT = rs_tOracleInput_34.getInt(50);
					} else {
				
						row44.GRADO_ANT = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 51) {
								row44.FUERZAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(51) != null) {
						row44.FUERZAS_ID = rs_tOracleInput_34.getInt(51);
					} else {
				
						row44.FUERZAS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 52) {
								row44.FUERZA_ANT = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(52) != null) {
						row44.FUERZA_ANT = rs_tOracleInput_34.getInt(52);
					} else {
				
						row44.FUERZA_ANT = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 53) {
								row44.UMILITARES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(53) != null) {
						row44.UMILITARES_ID = rs_tOracleInput_34.getInt(53);
					} else {
				
						row44.UMILITARES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 54) {
								row44.UNIDAD_ANT = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(54) != null) {
						row44.UNIDAD_ANT = rs_tOracleInput_34.getInt(54);
					} else {
				
						row44.UNIDAD_ANT = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 55) {
								row44.TVINCULACIONES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(55) != null) {
						row44.TVINCULACIONES_ID = rs_tOracleInput_34.getInt(55);
					} else {
				
						row44.TVINCULACIONES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 56) {
								row44.TVINCULA_ANT = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(56) != null) {
						row44.TVINCULA_ANT = rs_tOracleInput_34.getInt(56);
					} else {
				
						row44.TVINCULA_ANT = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 57) {
								row44.ESTADO_ENTIDAD = null;
							} else {
	                         		
        	row44.ESTADO_ENTIDAD = routines.system.JDBCUtil.getString(rs_tOracleInput_34, 57, false);
		                    }
							if(colQtyInRs_tOracleInput_34 < 58) {
								row44.ESTADO_ENT_ANT = null;
							} else {
	                         		
        	row44.ESTADO_ENT_ANT = routines.system.JDBCUtil.getString(rs_tOracleInput_34, 58, false);
		                    }
							if(colQtyInRs_tOracleInput_34 < 59) {
								row44.ENTIDAD_PRINCIPAL = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(59) != null) {
						row44.ENTIDAD_PRINCIPAL = rs_tOracleInput_34.getInt(59);
					} else {
				
						row44.ENTIDAD_PRINCIPAL = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 60) {
								row44.PRINCIPAL_ANT = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(60) != null) {
						row44.PRINCIPAL_ANT = rs_tOracleInput_34.getInt(60);
					} else {
				
						row44.PRINCIPAL_ANT = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 61) {
								row44.TREGIMEN_ID = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(61) != null) {
						row44.TREGIMEN_ID = rs_tOracleInput_34.getInt(61);
					} else {
				
						row44.TREGIMEN_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 62) {
								row44.TREGIMEN_ANT = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(62) != null) {
						row44.TREGIMEN_ANT = rs_tOracleInput_34.getInt(62);
					} else {
				
						row44.TREGIMEN_ANT = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 63) {
								row44.ID_UNICO_ENTIDAD = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(63) != null) {
						row44.ID_UNICO_ENTIDAD = rs_tOracleInput_34.getInt(63);
					} else {
				
						row44.ID_UNICO_ENTIDAD = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 64) {
								row44.FECHA_CADUCIDAD = null;
							} else {
										
			row44.FECHA_CADUCIDAD = routines.system.JDBCUtil.getDate(rs_tOracleInput_34, 64);
		                    }
							if(colQtyInRs_tOracleInput_34 < 65) {
								row44.FCADUCIDAD_ANT = null;
							} else {
										
			row44.FCADUCIDAD_ANT = routines.system.JDBCUtil.getDate(rs_tOracleInput_34, 65);
		                    }
							if(colQtyInRs_tOracleInput_34 < 66) {
								row44.FECHA_VINCULACION = null;
							} else {
										
			row44.FECHA_VINCULACION = routines.system.JDBCUtil.getDate(rs_tOracleInput_34, 66);
		                    }
							if(colQtyInRs_tOracleInput_34 < 67) {
								row44.FECHA_VINC_ANT = null;
							} else {
										
			row44.FECHA_VINC_ANT = routines.system.JDBCUtil.getDate(rs_tOracleInput_34, 67);
		                    }
							if(colQtyInRs_tOracleInput_34 < 68) {
								row44.ESTADOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(68) != null) {
						row44.ESTADOS_ID = rs_tOracleInput_34.getInt(68);
					} else {
				
						row44.ESTADOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 69) {
								row44.ESTADO_ANT = 0;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(69) != null) {
						row44.ESTADO_ANT = rs_tOracleInput_34.getInt(69);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 70) {
								row44.OBSERVACIONES = null;
							} else {
	                         		
        	row44.OBSERVACIONES = routines.system.JDBCUtil.getString(rs_tOracleInput_34, 70, false);
		                    }
							if(colQtyInRs_tOracleInput_34 < 71) {
								row44.USUARIOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(71) != null) {
						row44.USUARIOS_ID = rs_tOracleInput_34.getInt(71);
					} else {
				
						row44.USUARIOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 72) {
								row44.MOTIVOSESTADO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(72) != null) {
						row44.MOTIVOSESTADO_ID = rs_tOracleInput_34.getInt(72);
					} else {
				
						row44.MOTIVOSESTADO_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 73) {
								row44.MOTIVO = null;
							} else {
	                         		
        	row44.MOTIVO = routines.system.JDBCUtil.getString(rs_tOracleInput_34, 73, false);
		                    }
							if(colQtyInRs_tOracleInput_34 < 74) {
								row44.RNOVEDADES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(74) != null) {
						row44.RNOVEDADES_ID = rs_tOracleInput_34.getInt(74);
					} else {
				
						row44.RNOVEDADES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 75) {
								row44.PERSONAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(75) != null) {
						row44.PERSONAS_ID = rs_tOracleInput_34.getInt(75);
					} else {
				
						row44.PERSONAS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 76) {
								row44.AFILIADO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(76) != null) {
						row44.AFILIADO_ID = rs_tOracleInput_34.getInt(76);
					} else {
				
						row44.AFILIADO_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 77) {
								row44.TIPO_AFILIADO = null;
							} else {
	                         		
        	row44.TIPO_AFILIADO = routines.system.JDBCUtil.getString(rs_tOracleInput_34, 77, false);
		                    }
							if(colQtyInRs_tOracleInput_34 < 78) {
								row44.PROCESADO = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(78) != null) {
						row44.PROCESADO = rs_tOracleInput_34.getInt(78);
					} else {
				
						row44.PROCESADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 79) {
								row44.CORREO_ELECTRONICO = null;
							} else {
	                         		
        	row44.CORREO_ELECTRONICO = routines.system.JDBCUtil.getString(rs_tOracleInput_34, 79, false);
		                    }
							if(colQtyInRs_tOracleInput_34 < 80) {
								row44.CORREO_ELECTRONICO_ANT = null;
							} else {
	                         		
        	row44.CORREO_ELECTRONICO_ANT = routines.system.JDBCUtil.getString(rs_tOracleInput_34, 80, false);
		                    }
							if(colQtyInRs_tOracleInput_34 < 81) {
								row44.CELULAR = null;
							} else {
	                         		
        	row44.CELULAR = routines.system.JDBCUtil.getString(rs_tOracleInput_34, 81, false);
		                    }
							if(colQtyInRs_tOracleInput_34 < 82) {
								row44.CELULAR_ANT = null;
							} else {
	                         		
        	row44.CELULAR_ANT = routines.system.JDBCUtil.getString(rs_tOracleInput_34, 82, false);
		                    }
							if(colQtyInRs_tOracleInput_34 < 83) {
								row44.FECHA_DEFUNCION = null;
							} else {
										
			row44.FECHA_DEFUNCION = routines.system.JDBCUtil.getDate(rs_tOracleInput_34, 83);
		                    }
							if(colQtyInRs_tOracleInput_34 < 84) {
								row44.FECHA_DEFUNCION_ANT = null;
							} else {
										
			row44.FECHA_DEFUNCION_ANT = routines.system.JDBCUtil.getDate(rs_tOracleInput_34, 84);
		                    }
							if(colQtyInRs_tOracleInput_34 < 85) {
								row44.PLANAFILIACIONES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(85) != null) {
						row44.PLANAFILIACIONES_ID = rs_tOracleInput_34.getInt(85);
					} else {
				
						row44.PLANAFILIACIONES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 86) {
								row44.PLANAFILIACIONES_ID_ANT = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(86) != null) {
						row44.PLANAFILIACIONES_ID_ANT = rs_tOracleInput_34.getInt(86);
					} else {
				
						row44.PLANAFILIACIONES_ID_ANT = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 87) {
								row44.ID_BDUA = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(87) != null) {
						row44.ID_BDUA = rs_tOracleInput_34.getInt(87);
					} else {
				
						row44.ID_BDUA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 88) {
								row44.ID_BDUA_ANT = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(88) != null) {
						row44.ID_BDUA_ANT = rs_tOracleInput_34.getInt(88);
					} else {
				
						row44.ID_BDUA_ANT = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 89) {
								row44.MOTIVO_CAMBIO_ESTADO = null;
							} else {
	                         		
        	row44.MOTIVO_CAMBIO_ESTADO = routines.system.JDBCUtil.getString(rs_tOracleInput_34, 89, false);
		                    }
							if(colQtyInRs_tOracleInput_34 < 90) {
								row44.MOTIVO_CAMBIO_ESM = null;
							} else {
	                         		
        	row44.MOTIVO_CAMBIO_ESM = routines.system.JDBCUtil.getString(rs_tOracleInput_34, 90, false);
		                    }
							if(colQtyInRs_tOracleInput_34 < 91) {
								row44.TDISCAPACIDADES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(91) != null) {
						row44.TDISCAPACIDADES_ID = rs_tOracleInput_34.getInt(91);
					} else {
				
						row44.TDISCAPACIDADES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 92) {
								row44.TDISCAPACIDADES_ID_ANT = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(92) != null) {
						row44.TDISCAPACIDADES_ID_ANT = rs_tOracleInput_34.getInt(92);
					} else {
				
						row44.TDISCAPACIDADES_ID_ANT = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 93) {
								row44.PESPECIAL_ID = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(93) != null) {
						row44.PESPECIAL_ID = rs_tOracleInput_34.getInt(93);
					} else {
				
						row44.PESPECIAL_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 94) {
								row44.PESPECIAL_ID_ANT = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(94) != null) {
						row44.PESPECIAL_ID_ANT = rs_tOracleInput_34.getInt(94);
					} else {
				
						row44.PESPECIAL_ID_ANT = null;
					}
		                    }
					




 



/**
 * [tOracleInput_34 begin ] stop
 */
	
	/**
	 * [tOracleInput_34 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_34";
	
	

 


	tos_count_tOracleInput_34++;

/**
 * [tOracleInput_34 main ] stop
 */
	
	/**
	 * [tOracleInput_34 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_34";
	
	

 



/**
 * [tOracleInput_34 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row44"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
						row120Struct row120 = null;
					
						row121Struct row121 = null;
					
						row122Struct row122 = null;
					
						row123Struct row123 = null;
					
						row124Struct row124 = null;
					
						row125Struct row125 = null;
					
						row128Struct row128 = null;
					
						row129Struct row129 = null;
					
						row150Struct row150 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row120" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow120 = false;
       		  	    	
       		  	    	
 							row120Struct row120ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    row120HashKey.CODIGO = "N01";
                        		    		

								
		                        	row120HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row120.lookup( row120HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row120 != null && tHash_Lookup_row120.getCount(row120HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row120' and it contains more one result from keys :  row120.CODIGO = '" + row120HashKey.CODIGO + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row120Struct fromLookup_row120 = null;
							row120 = row120Default;
										 
							
								 
							
							
								if (tHash_Lookup_row120 !=null && tHash_Lookup_row120.hasNext()) { // G 099
								
							
								
								fromLookup_row120 = tHash_Lookup_row120.next();

							
							
								} // G 099
							
							

							if(fromLookup_row120 != null) {
								row120 = fromLookup_row120;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row121" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow121 = false;
       		  	    	
       		  	    	
 							row121Struct row121ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    row121HashKey.CODIGO = "N02";
                        		    		

								
		                        	row121HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row121.lookup( row121HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row121 != null && tHash_Lookup_row121.getCount(row121HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row121' and it contains more one result from keys :  row121.CODIGO = '" + row121HashKey.CODIGO + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row121Struct fromLookup_row121 = null;
							row121 = row121Default;
										 
							
								 
							
							
								if (tHash_Lookup_row121 !=null && tHash_Lookup_row121.hasNext()) { // G 099
								
							
								
								fromLookup_row121 = tHash_Lookup_row121.next();

							
							
								} // G 099
							
							

							if(fromLookup_row121 != null) {
								row121 = fromLookup_row121;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row122" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow122 = false;
       		  	    	
       		  	    	
 							row122Struct row122ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    row122HashKey.CODIGO = "N03";
                        		    		

								
		                        	row122HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row122.lookup( row122HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row122 != null && tHash_Lookup_row122.getCount(row122HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row122' and it contains more one result from keys :  row122.CODIGO = '" + row122HashKey.CODIGO + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row122Struct fromLookup_row122 = null;
							row122 = row122Default;
										 
							
								 
							
							
								if (tHash_Lookup_row122 !=null && tHash_Lookup_row122.hasNext()) { // G 099
								
							
								
								fromLookup_row122 = tHash_Lookup_row122.next();

							
							
								} // G 099
							
							

							if(fromLookup_row122 != null) {
								row122 = fromLookup_row122;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row123" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow123 = false;
       		  	    	
       		  	    	
 							row123Struct row123ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    row123HashKey.CODIGO = "N17";
                        		    		

								
		                        	row123HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row123.lookup( row123HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row123 != null && tHash_Lookup_row123.getCount(row123HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row123' and it contains more one result from keys :  row123.CODIGO = '" + row123HashKey.CODIGO + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row123Struct fromLookup_row123 = null;
							row123 = row123Default;
										 
							
								 
							
							
								if (tHash_Lookup_row123 !=null && tHash_Lookup_row123.hasNext()) { // G 099
								
							
								
								fromLookup_row123 = tHash_Lookup_row123.next();

							
							
								} // G 099
							
							

							if(fromLookup_row123 != null) {
								row123 = fromLookup_row123;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row124" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow124 = false;
       		  	    	
       		  	    	
 							row124Struct row124ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    row124HashKey.CODIGO = "N04";
                        		    		

								
		                        	row124HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row124.lookup( row124HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row124 != null && tHash_Lookup_row124.getCount(row124HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row124' and it contains more one result from keys :  row124.CODIGO = '" + row124HashKey.CODIGO + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row124Struct fromLookup_row124 = null;
							row124 = row124Default;
										 
							
								 
							
							
								if (tHash_Lookup_row124 !=null && tHash_Lookup_row124.hasNext()) { // G 099
								
							
								
								fromLookup_row124 = tHash_Lookup_row124.next();

							
							
								} // G 099
							
							

							if(fromLookup_row124 != null) {
								row124 = fromLookup_row124;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row125" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow125 = false;
       		  	    	
       		  	    	
 							row125Struct row125ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    row125HashKey.CODIGO = "N14";
                        		    		

								
		                        	row125HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row125.lookup( row125HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row125 != null && tHash_Lookup_row125.getCount(row125HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row125' and it contains more one result from keys :  row125.CODIGO = '" + row125HashKey.CODIGO + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row125Struct fromLookup_row125 = null;
							row125 = row125Default;
										 
							
								 
							
							
								if (tHash_Lookup_row125 !=null && tHash_Lookup_row125.hasNext()) { // G 099
								
							
								
								fromLookup_row125 = tHash_Lookup_row125.next();

							
							
								} // G 099
							
							

							if(fromLookup_row125 != null) {
								row125 = fromLookup_row125;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row128" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow128 = false;
       		  	    	
       		  	    	
 							row128Struct row128ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    row128HashKey.CODIGO = "S10";
                        		    		

								
		                        	row128HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row128.lookup( row128HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row128 != null && tHash_Lookup_row128.getCount(row128HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row128' and it contains more one result from keys :  row128.CODIGO = '" + row128HashKey.CODIGO + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row128Struct fromLookup_row128 = null;
							row128 = row128Default;
										 
							
								 
							
							
								if (tHash_Lookup_row128 !=null && tHash_Lookup_row128.hasNext()) { // G 099
								
							
								
								fromLookup_row128 = tHash_Lookup_row128.next();

							
							
								} // G 099
							
							

							if(fromLookup_row128 != null) {
								row128 = fromLookup_row128;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row129" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow129 = false;
       		  	    	
       		  	    	
 							row129Struct row129ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    row129HashKey.CODIGO = "N21";
                        		    		

								
		                        	row129HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row129.lookup( row129HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row129 != null && tHash_Lookup_row129.getCount(row129HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row129' and it contains more one result from keys :  row129.CODIGO = '" + row129HashKey.CODIGO + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row129Struct fromLookup_row129 = null;
							row129 = row129Default;
										 
							
								 
							
							
								if (tHash_Lookup_row129 !=null && tHash_Lookup_row129.hasNext()) { // G 099
								
							
								
								fromLookup_row129 = tHash_Lookup_row129.next();

							
							
								} // G 099
							
							

							if(fromLookup_row129 != null) {
								row129 = fromLookup_row129;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row150" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow150 = false;
       		  	    	
       		  	    	
 							row150Struct row150ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    row150HashKey.CODIGO = "N22";
                        		    		

								
		                        	row150HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row150.lookup( row150HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row150 != null && tHash_Lookup_row150.getCount(row150HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row150' and it contains more one result from keys :  row150.CODIGO = '" + row150HashKey.CODIGO + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row150Struct fromLookup_row150 = null;
							row150 = row150Default;
										 
							
								 
							
							
								if (tHash_Lookup_row150 !=null && tHash_Lookup_row150.hasNext()) { // G 099
								
							
								
								fromLookup_row150 = tHash_Lookup_row150.next();

							
							
								} // G 099
							
							

							if(fromLookup_row150 != null) {
								row150 = fromLookup_row150;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

ACTUALIZAR_PERSONAS = null;
CAMBIO_TDOCUMENTOS_ID = null;
CAMBIO_DOCUMENTO = null;
CAMBIO_PRIMER_NOMBRE = null;
CAMBIO_SEGUNDO_NOMBRE = null;
CAMBIO_PRIMER_APELLIDO = null;
CAMBIO_SEGUNDO_APELLIDO = null;
CAMBIO_FECHA_NACIMIENTO = null;
CAMBIO_SEXO_ID = null;
CAMBIO_DIRECCION = null;
CAMBIO_LUGAR_RESIDENCIA = null;
CAMBIO_ESMADSCRITO = null;
CAMBIO_ESTADOS_ID = null;
HESTADOS = null;
ENTIDAD_APORTANTE = null;
CAMBIOS_AFILIACION = null;
CAMBIO_FECHA_CADUCIDAD = null;
CAMBIO_ENTIDAD_PRINCIPAL = null;
CAMBIO_PLAN_AFILIACION = null;
CAMBIO_FECHA_DEFUNCION = null;


// # Output table : 'ACTUALIZAR_PERSONAS'
ACTUALIZAR_PERSONAS_tmp.PRIMER_NOMBRE = !row44.PRIMER_NOMBRE.equals(row44.PNOMBRE_ANT)?row44.PRIMER_NOMBRE:row44.PNOMBRE_ANT ;
ACTUALIZAR_PERSONAS_tmp.SEGUNDO_NOMBRE = row44.SEGUNDO_NOMBRE;
ACTUALIZAR_PERSONAS_tmp.PRIMER_APELLIDO = !row44.PRIMER_APELLIDO.equals(row44.PAPELLIDO_ANT)?row44.PRIMER_APELLIDO:row44.PAPELLIDO_ANT ;
ACTUALIZAR_PERSONAS_tmp.SEGUNDO_APELLIDO = row44.SEGUNDO_APELLIDO;
ACTUALIZAR_PERSONAS_tmp.TDOCUMENTOS_ID = (row44.TDOCUMENTOS_ID != 0 && row44.TDOCUMENTO_ANT != row44.TDOCUMENTOS_ID)?row44.TDOCUMENTOS_ID:row44.TDOCUMENTO_ANT ;
ACTUALIZAR_PERSONAS_tmp.DOCUMENTO = !row44.DOCUMENTO.equals(row44.DOCUMENTO_ANT)?row44.DOCUMENTO:row44.DOCUMENTO_ANT ;
ACTUALIZAR_PERSONAS_tmp.LUGAR_EXPEDICION = (row44.LUGAR_EXP_DOC != 0 && row44.LUGAR_EXPEDICION != row44.LUGAR_EXP_DOC)?row44.LUGAR_EXP_DOC:row44.LUGAR_EXPEDICION ;
ACTUALIZAR_PERSONAS_tmp.SEXO_ID = (row44.SEXOS_ID != 0 && row44.SEXO_ANT != row44.SEXOS_ID)?row44.SEXOS_ID:row44.SEXO_ANT ;
ACTUALIZAR_PERSONAS_tmp.ESTATURA = row44.ESTATURA_ANT == row44.ESTATURA ? row44.ESTATURA : (row44.ESTATURA_ANT != null && row44.ESTATURA == null)? row44.ESTATURA_ANT : (row44.ESTATURA_ANT == null && row44.ESTATURA != null) ? row44.ESTATURA : null ;
ACTUALIZAR_PERSONAS_tmp.FECHA_EXPEDICION = row44.FECHA_EXPEDICION_DOCUMENTO ;
ACTUALIZAR_PERSONAS_tmp.FECHA_NACIMIENTO = row44.FECHA_NACIMIENTO ;
ACTUALIZAR_PERSONAS_tmp.LUGAR_NACIMIENTO = (row44.LUGAR_NACIMIENTO != 0 && row44.LNACIMIENTO != row44.LUGAR_NACIMIENTO)?row44.LUGAR_NACIMIENTO:row44.LNACIMIENTO ;
ACTUALIZAR_PERSONAS_tmp.DIRECCION = row44.DIRECCION != null && row44.DIRECCION_ANT != null?
row44.DIRECCION:(row44.DIRECCION != null && row44.DIRECCION_ANT == null)?row44.DIRECCION:(row44.DIRECCION == null && row44.DIRECCION_ANT != null)? row44.DIRECCION_ANT: null ;
ACTUALIZAR_PERSONAS_tmp.LUGAR_RESIDENCIA = (row44.LUGAR_RESIDENCIA != 0 && row44.LRESIDENCIA != row44.LUGAR_RESIDENCIA)?row44.LUGAR_RESIDENCIA:row44.LRESIDENCIA ;
ACTUALIZAR_PERSONAS_tmp.LOCALIDADES_ID = (row44.LOCALIDADES_ID != 0 && row44.LOCALIDAD_ANT != row44.LOCALIDADES_ID)?row44.LOCALIDADES_ID:row44.LOCALIDAD_ANT ;
ACTUALIZAR_PERSONAS_tmp.GSANGUINEOS_ID = (row44.GSANGUINEOS_ID != 0 && row44.GRUPOS_ANT != row44.GSANGUINEOS_ID)?row44.GSANGUINEOS_ID:row44.GRUPOS_ANT ;
ACTUALIZAR_PERSONAS_tmp.TELEFONO = row44.TELEFONO != null && row44.TELEFONO_ANT != null?
row44.TELEFONO:(row44.TELEFONO != null && row44.TELEFONO_ANT == null)?row44.TELEFONO:(row44.TELEFONO == null && row44.TELEFONO_ANT != null)? row44.TELEFONO_ANT: null ;
ACTUALIZAR_PERSONAS_tmp.OCUPACIONES_ID = (row44.OCUPACIONES_ID != 0 && row44.OCUPACION_ANT != row44.OCUPACIONES_ID)?row44.OCUPACIONES_ID:row44.OCUPACION_ANT ;
ACTUALIZAR_PERSONAS_tmp.ETNICAS_ID = (row44.ETNICAS_ID != 0 && row44.ETNICO_ANT != row44.ETNICAS_ID)?row44.ETNICAS_ID:row44.ETNICO_ANT ;
ACTUALIZAR_PERSONAS_tmp.NSOCIOECONOMICOS_ID = (row44.NSOCIOECONOMICOS_ID != 0 && row44.NECONO_ANT != row44.NSOCIOECONOMICOS_ID)?row44.NSOCIOECONOMICOS_ID:row44.NECONO_ANT ;
ACTUALIZAR_PERSONAS_tmp.TVIVIENDA_ID = (row44.TVIVIENDA_ID != 0 && row44.TVIVIENDA_ANT != row44.TVIVIENDA_ID)?row44.TVIVIENDA_ID:row44.TVIVIENDA_ANT ;
ACTUALIZAR_PERSONAS_tmp.NEDUCATIVOS_ID = (row44.NEDUCATIVOS_ID != 0 && row44.NEDUCATIVO_ANT != row44.NEDUCATIVOS_ID)?row44.NEDUCATIVOS_ID:row44.NEDUCATIVO_ANT ;
ACTUALIZAR_PERSONAS_tmp.ESMADSCRITO = (row44.ESMADSCRITO != 0 && row44.ESM_ANT != row44.ESMADSCRITO)?row44.ESMADSCRITO:row44.ESM_ANT ;
ACTUALIZAR_PERSONAS_tmp.ID = row44.PERSONAS_ID ;
ACTUALIZAR_PERSONAS_tmp.CELULAR = row44.CELULAR != null && row44.CELULAR_ANT != null?
row44.CELULAR:(row44.CELULAR != null && row44.CELULAR_ANT == null)?row44.CELULAR:(row44.CELULAR == null && row44.CELULAR_ANT != null)? row44.CELULAR_ANT: null ;
ACTUALIZAR_PERSONAS_tmp.EMAIL = row44.CORREO_ELECTRONICO != null && row44.CORREO_ELECTRONICO_ANT != null?
row44.CORREO_ELECTRONICO:(row44.CORREO_ELECTRONICO != null && row44.CORREO_ELECTRONICO_ANT == null)?row44.CORREO_ELECTRONICO:(row44.CORREO_ELECTRONICO == null && row44.CORREO_ELECTRONICO_ANT != null)? row44.CORREO_ELECTRONICO_ANT: null ;
ACTUALIZAR_PERSONAS_tmp.FECHA_DEFUNCION = row44.FECHA_DEFUNCION ;
ACTUALIZAR_PERSONAS_tmp.ID_BDUA = (row44.ID_BDUA != 0 && row44.ID_BDUA_ANT != row44.ID_BDUA)?row44.ID_BDUA:((row44.ID_BDUA == 0 && row44.ID_BDUA_ANT == 0)? null:row44.ID_BDUA_ANT) ;
ACTUALIZAR_PERSONAS_tmp.TDISCAPACIDADES_ID = (row44.TDISCAPACIDADES_ID != 0 && row44.TDISCAPACIDADES_ID_ANT != row44.TDISCAPACIDADES_ID)?row44.TDISCAPACIDADES_ID:row44.TDISCAPACIDADES_ID_ANT ;
ACTUALIZAR_PERSONAS_tmp.PESPECIAL_ID = row44.PESPECIAL_ID == 0? null:row44.PESPECIAL_ID ;
ACTUALIZAR_PERSONAS = ACTUALIZAR_PERSONAS_tmp;

// # Output table : 'CAMBIO_TDOCUMENTOS_ID'
// # Filter conditions 
if( 

((row44.TDOCUMENTOS_ID != 0 && row44.TDOCUMENTO_ANT != row44.TDOCUMENTOS_ID)? 1 : 0) == 1

 ) {
CAMBIO_TDOCUMENTOS_ID_tmp.AFILIADOS_ID = row44.AFILIADO_ID ;
CAMBIO_TDOCUMENTOS_ID_tmp.PROCESOS_ID = context.vprocesos_id;
CAMBIO_TDOCUMENTOS_ID_tmp.MOTIVO = row44.MOTIVO;
CAMBIO_TDOCUMENTOS_ID_tmp.RNOVEDADES_ID = row120.ID;
CAMBIO_TDOCUMENTOS_ID_tmp.VANTERIOR = Integer.toString(row44.TDOCUMENTO_ANT) ;
CAMBIO_TDOCUMENTOS_ID_tmp.VACTUAL = Integer.toString(row44.TDOCUMENTOS_ID) ;
CAMBIO_TDOCUMENTOS_ID_tmp.CAMPO = "TDOCUMENTOS_ID";
CAMBIO_TDOCUMENTOS_ID = CAMBIO_TDOCUMENTOS_ID_tmp;
} // closing filter/reject

// # Output table : 'CAMBIO_DOCUMENTO'
// # Filter conditions 
if( 

(!row44.DOCUMENTO.equals(row44.DOCUMENTO_ANT)? 1 : 0) == 1

 ) {
CAMBIO_DOCUMENTO_tmp.AFILIADOS_ID = row44.AFILIADO_ID;
CAMBIO_DOCUMENTO_tmp.PROCESOS_ID = context.vprocesos_id;
CAMBIO_DOCUMENTO_tmp.MOTIVO = row44.MOTIVO;
CAMBIO_DOCUMENTO_tmp.RNOVEDADES_ID = row120.ID;
CAMBIO_DOCUMENTO_tmp.VANTERIOR = row44.DOCUMENTO_ANT ;
CAMBIO_DOCUMENTO_tmp.VACTUAL = row44.DOCUMENTO ;
CAMBIO_DOCUMENTO_tmp.CAMPO = "DOCUMENTO";
CAMBIO_DOCUMENTO = CAMBIO_DOCUMENTO_tmp;
} // closing filter/reject

// # Output table : 'CAMBIO_PRIMER_NOMBRE'
// # Filter conditions 
if( 

(!row44.PRIMER_NOMBRE.equals(row44.PNOMBRE_ANT)? 1 : 0) == 1

 ) {
CAMBIO_PRIMER_NOMBRE_tmp.AFILIADOS_ID = row44.AFILIADO_ID;
CAMBIO_PRIMER_NOMBRE_tmp.PROCESOS_ID = context.vprocesos_id;
CAMBIO_PRIMER_NOMBRE_tmp.MOTIVO = row44.MOTIVO;
CAMBIO_PRIMER_NOMBRE_tmp.RNOVEDADES_ID = row121.ID;
CAMBIO_PRIMER_NOMBRE_tmp.VANTERIOR = row44.PNOMBRE_ANT ;
CAMBIO_PRIMER_NOMBRE_tmp.VACTUAL = row44.PRIMER_NOMBRE ;
CAMBIO_PRIMER_NOMBRE_tmp.CAMPO = "PRIMER_NOMBRE";
CAMBIO_PRIMER_NOMBRE = CAMBIO_PRIMER_NOMBRE_tmp;
} // closing filter/reject

// # Output table : 'CAMBIO_SEGUNDO_NOMBRE'
// # Filter conditions 
if( 

((row44.SEGUNDO_NOMBRE == null && row44.SNOMBRE_ANT == null) ? 0 : ((row44.SEGUNDO_NOMBRE != null && row44.SNOMBRE_ANT != null) ? ((!row44.SEGUNDO_NOMBRE.equals(row44.SNOMBRE_ANT)) ? 1 : 0) : 1)) == 1

 ) {
CAMBIO_SEGUNDO_NOMBRE_tmp.AFILIADOS_ID = row44.AFILIADO_ID;
CAMBIO_SEGUNDO_NOMBRE_tmp.PROCESOS_ID = context.vprocesos_id;
CAMBIO_SEGUNDO_NOMBRE_tmp.MOTIVO = row44.MOTIVO;
CAMBIO_SEGUNDO_NOMBRE_tmp.RNOVEDADES_ID = row121.ID;
CAMBIO_SEGUNDO_NOMBRE_tmp.VANTERIOR = row44.SNOMBRE_ANT ;
CAMBIO_SEGUNDO_NOMBRE_tmp.VACTUAL = row44.SEGUNDO_NOMBRE ;
CAMBIO_SEGUNDO_NOMBRE_tmp.CAMPO = "SEGUNDO_NOMBRE";
CAMBIO_SEGUNDO_NOMBRE = CAMBIO_SEGUNDO_NOMBRE_tmp;
} // closing filter/reject

// # Output table : 'CAMBIO_PRIMER_APELLIDO'
// # Filter conditions 
if( 

(!row44.PRIMER_APELLIDO.equals(row44.PAPELLIDO_ANT)? 1 : 0) == 1

 ) {
CAMBIO_PRIMER_APELLIDO_tmp.AFILIADOS_ID = row44.AFILIADO_ID;
CAMBIO_PRIMER_APELLIDO_tmp.PROCESOS_ID = context.vprocesos_id;
CAMBIO_PRIMER_APELLIDO_tmp.MOTIVO = row44.MOTIVO;
CAMBIO_PRIMER_APELLIDO_tmp.RNOVEDADES_ID = row122.ID;
CAMBIO_PRIMER_APELLIDO_tmp.VANTERIOR = row44.PAPELLIDO_ANT ;
CAMBIO_PRIMER_APELLIDO_tmp.VACTUAL = row44.PRIMER_APELLIDO ;
CAMBIO_PRIMER_APELLIDO_tmp.CAMPO = "PRIMER_APELLIDO";
CAMBIO_PRIMER_APELLIDO = CAMBIO_PRIMER_APELLIDO_tmp;
} // closing filter/reject

// # Output table : 'CAMBIO_SEGUNDO_APELLIDO'
// # Filter conditions 
if( 

((row44.SEGUNDO_APELLIDO == null && row44.SAPELLIDO_ANT == null) ? 0 : ((row44.SEGUNDO_APELLIDO != null && row44.SAPELLIDO_ANT != null) ? ((!row44.SEGUNDO_APELLIDO.equals(row44.SAPELLIDO_ANT)) ? 1 : 0) : 1)) == 1

 ) {
CAMBIO_SEGUNDO_APELLIDO_tmp.AFILIADOS_ID = row44.AFILIADO_ID;
CAMBIO_SEGUNDO_APELLIDO_tmp.PROCESOS_ID = context.vprocesos_id;
CAMBIO_SEGUNDO_APELLIDO_tmp.MOTIVO = row44.MOTIVO;
CAMBIO_SEGUNDO_APELLIDO_tmp.RNOVEDADES_ID = row122.ID;
CAMBIO_SEGUNDO_APELLIDO_tmp.VANTERIOR = row44.SAPELLIDO_ANT ;
CAMBIO_SEGUNDO_APELLIDO_tmp.VACTUAL = row44.SEGUNDO_APELLIDO ;
CAMBIO_SEGUNDO_APELLIDO_tmp.CAMPO = "SEGUNDO_APELLIDO";
CAMBIO_SEGUNDO_APELLIDO = CAMBIO_SEGUNDO_APELLIDO_tmp;
} // closing filter/reject

// # Output table : 'CAMBIO_FECHA_NACIMIENTO'
// # Filter conditions 
if( 

(row44.FECHAN_ANT == null ? 1 : (TalendDate.compareDate(row44.FECHA_NACIMIENTO,row44.FECHAN_ANT) == 0? 0: 1)) == 1

 ) {
CAMBIO_FECHA_NACIMIENTO_tmp.AFILIADOS_ID = row44.AFILIADO_ID;
CAMBIO_FECHA_NACIMIENTO_tmp.PROCESOS_ID = context.vprocesos_id;
CAMBIO_FECHA_NACIMIENTO_tmp.MOTIVO = row44.MOTIVO;
CAMBIO_FECHA_NACIMIENTO_tmp.RNOVEDADES_ID = row120.ID;
CAMBIO_FECHA_NACIMIENTO_tmp.VANTERIOR = row44.FECHAN_ANT != null ? TalendDate.formatDate("dd-MM-yyyy", row44.FECHAN_ANT): "" ;
CAMBIO_FECHA_NACIMIENTO_tmp.VACTUAL = TalendDate.formatDate("dd-MM-yyyy", row44.FECHA_NACIMIENTO) ;
CAMBIO_FECHA_NACIMIENTO_tmp.CAMPO = "FECHA_NACIMIENTO";
CAMBIO_FECHA_NACIMIENTO = CAMBIO_FECHA_NACIMIENTO_tmp;
} // closing filter/reject

// # Output table : 'CAMBIO_SEXO_ID'
// # Filter conditions 
if( 

((row44.SEXOS_ID != 0 && row44.SEXO_ANT != row44.SEXOS_ID)? 1 : 0) == 1

 ) {
CAMBIO_SEXO_ID_tmp.AFILIADOS_ID = row44.AFILIADO_ID;
CAMBIO_SEXO_ID_tmp.PROCESOS_ID = context.vprocesos_id;
CAMBIO_SEXO_ID_tmp.MOTIVO = row44.MOTIVO;
CAMBIO_SEXO_ID_tmp.RNOVEDADES_ID = row123.ID;
CAMBIO_SEXO_ID_tmp.VANTERIOR = Relational.ISNULL(row44.SEXO_ANT)? "" : Integer.toString(row44.SEXO_ANT) ;
CAMBIO_SEXO_ID_tmp.VACTUAL = Integer.toString(row44.SEXOS_ID) ;
CAMBIO_SEXO_ID_tmp.CAMPO = "SEXO_ID";
CAMBIO_SEXO_ID = CAMBIO_SEXO_ID_tmp;
} // closing filter/reject

// # Output table : 'CAMBIO_DIRECCION'
// # Filter conditions 
if( 

(row44.DIRECCION == null ? 0 : row44.DIRECCION_ANT == null ? 1 : !row44.DIRECCION.equals(row44.DIRECCION_ANT) ? 1 : 0) == 1

 ) {
CAMBIO_DIRECCION_tmp.AFILIADOS_ID = row44.AFILIADO_ID;
CAMBIO_DIRECCION_tmp.PROCESOS_ID = context.vprocesos_id;
CAMBIO_DIRECCION_tmp.MOTIVO = row44.MOTIVO;
CAMBIO_DIRECCION_tmp.RNOVEDADES_ID = row44.RNOVEDADES_ID;
CAMBIO_DIRECCION_tmp.VANTERIOR = row44.DIRECCION_ANT ;
CAMBIO_DIRECCION_tmp.VACTUAL = row44.DIRECCION ;
CAMBIO_DIRECCION_tmp.CAMPO = "DIRECCION";
CAMBIO_DIRECCION = CAMBIO_DIRECCION_tmp;
} // closing filter/reject

// # Output table : 'CAMBIO_LUGAR_RESIDENCIA'
// # Filter conditions 
if( 

(row44.LUGAR_RESIDENCIA == 0 ? 0 : !row44.LUGAR_RESIDENCIA.equals(row44.LRESIDENCIA)? 1 : 0) == 1

 ) {
CAMBIO_LUGAR_RESIDENCIA_tmp.AFILIADOS_ID = row44.AFILIADO_ID;
CAMBIO_LUGAR_RESIDENCIA_tmp.PROCESOS_ID = context.vprocesos_id;
CAMBIO_LUGAR_RESIDENCIA_tmp.MOTIVO = row44.MOTIVO;
CAMBIO_LUGAR_RESIDENCIA_tmp.RNOVEDADES_ID = row124.ID;
CAMBIO_LUGAR_RESIDENCIA_tmp.VANTERIOR = row44.LRESIDENCIA != null ? Integer.toString(row44.LRESIDENCIA):"" ;
CAMBIO_LUGAR_RESIDENCIA_tmp.VACTUAL = Integer.toString(row44.LUGAR_RESIDENCIA) ;
CAMBIO_LUGAR_RESIDENCIA_tmp.CAMPO = "LUGAR_RESIDENCIA";
CAMBIO_LUGAR_RESIDENCIA = CAMBIO_LUGAR_RESIDENCIA_tmp;
} // closing filter/reject

// # Output table : 'CAMBIO_ESMADSCRITO'
// # Filter conditions 
if( 

(row44.ESMADSCRITO == 0 ? 0 : !row44.ESMADSCRITO.equals(row44.ESM_ANT)? 1 : 0) == 1

 ) {
CAMBIO_ESMADSCRITO_tmp.AFILIADOS_ID = row44.AFILIADO_ID;
CAMBIO_ESMADSCRITO_tmp.PROCESOS_ID = context.vprocesos_id;
CAMBIO_ESMADSCRITO_tmp.MOTIVO = row44.MOTIVO_CAMBIO_ESM ;
CAMBIO_ESMADSCRITO_tmp.RNOVEDADES_ID = row44.RNOVEDADES_ID;
CAMBIO_ESMADSCRITO_tmp.VANTERIOR = row44.ESM_ANT != null ? Integer.toString(row44.ESM_ANT):"" ;
CAMBIO_ESMADSCRITO_tmp.VACTUAL = Integer.toString(row44.ESMADSCRITO) ;
CAMBIO_ESMADSCRITO_tmp.CAMPO = "ESMADSCRITO";
CAMBIO_ESMADSCRITO = CAMBIO_ESMADSCRITO_tmp;
} // closing filter/reject

// # Output table : 'CAMBIO_ESTADOS_ID'
// # Filter conditions 
if( 

((row44.ESTADOS_ID != 0 && row44.ESTADO_ANT != row44.ESTADOS_ID)? 1 : 0) == 1

 ) {
CAMBIO_ESTADOS_ID_tmp.AFILIADOS_ID = row44.AFILIADO_ID;
CAMBIO_ESTADOS_ID_tmp.PROCESOS_ID = context.vprocesos_id;
CAMBIO_ESTADOS_ID_tmp.MOTIVO = row44.MOTIVO_CAMBIO_ESTADO ;
CAMBIO_ESTADOS_ID_tmp.RNOVEDADES_ID = row125.ID;
CAMBIO_ESTADOS_ID_tmp.VANTERIOR = Integer.toString(row44.ESTADO_ANT) ;
CAMBIO_ESTADOS_ID_tmp.VACTUAL = Integer.toString(row44.ESTADOS_ID) ;
CAMBIO_ESTADOS_ID_tmp.CAMPO = "ESTADOS_ID";
CAMBIO_ESTADOS_ID = CAMBIO_ESTADOS_ID_tmp;
} // closing filter/reject

// # Output table : 'HESTADOS'
// # Filter conditions 
if( 

((row44.ESTADOS_ID != 0 && row44.ESTADO_ANT != row44.ESTADOS_ID)? 1 : 0) == 1

 ) {
HESTADOS_tmp.USUARIOS_ID = row44.USUARIOS_ID ;
HESTADOS_tmp.AFILIADOS_ID = row44.AFILIADO_ID ;
HESTADOS_tmp.ESTADOS_ID = row44.ESTADOS_ID ;
HESTADOS_tmp.MOTIVOSESTADO_ID = row44.MOTIVOSESTADO_ID ;
HESTADOS_tmp.FECHA = new Date() ;
HESTADOS = HESTADOS_tmp;
} // closing filter/reject

// # Output table : 'ENTIDAD_APORTANTE'
// # Filter conditions 
if( 

row44.TIPO_AFILIADO.equals("T") && row44.PROCESADO == null

 ) {
ENTIDAD_APORTANTE_tmp.ID = row44.ID_UNICO_ENTIDAD ;
ENTIDAD_APORTANTE_tmp.AFILIADOS_ID = row44.AFILIADO_ID ;
ENTIDAD_APORTANTE_tmp.ENTAPORTANTES_ID = (row44.ENTAPORTANTES_ID != 0 && row44.ENTIDAD_ANT != row44.ENTAPORTANTES_ID)?row44.ENTAPORTANTES_ID:row44.ENTIDAD_ANT ;
ENTIDAD_APORTANTE_tmp.GRDMILITARES_ID = (row44.GRDMILITARES_ID != 0 && row44.GRADO_ANT != row44.GRDMILITARES_ID)?row44.GRDMILITARES_ID:row44.GRADO_ANT ;
ENTIDAD_APORTANTE_tmp.FUERZAS_ID = (row44.FUERZAS_ID != 0 && row44.FUERZA_ANT != row44.FUERZAS_ID)?row44.FUERZAS_ID:row44.FUERZA_ANT ;
ENTIDAD_APORTANTE_tmp.UMILITARES_ID = (row44.UMILITARES_ID != 0 && row44.UNIDAD_ANT != row44.UMILITARES_ID)?row44.UMILITARES_ID:row44.UNIDAD_ANT ;
ENTIDAD_APORTANTE_tmp.PRINCIPAL = (row44.ENTIDAD_PRINCIPAL != 0 && row44.PRINCIPAL_ANT != row44.ENTIDAD_PRINCIPAL)?row44.ENTIDAD_PRINCIPAL:row44.PRINCIPAL_ANT ;
ENTIDAD_APORTANTE_tmp.ESTADO = row44.ESTADO_ENTIDAD != null && row44.ESTADO_ENT_ANT != null?
row44.ESTADO_ENTIDAD:(row44.ESTADO_ENTIDAD != null && row44.ESTADO_ENT_ANT == null)?row44.ESTADO_ENTIDAD:(row44.ESTADO_ENTIDAD == null && row44.ESTADO_ENT_ANT != null)? row44.ESTADO_ENT_ANT: null ;
ENTIDAD_APORTANTE_tmp.TVINCULACIONES_ID = (row44.TVINCULACIONES_ID != 0 && row44.TVINCULA_ANT != row44.TVINCULACIONES_ID)?row44.TVINCULACIONES_ID:row44.TVINCULA_ANT ;
ENTIDAD_APORTANTE_tmp.FECHA_INGRESO = row44.FECHA_VINCULACION != null ? row44.FECHA_VINCULACION : row44.FECHA_VINC_ANT ;
ENTIDAD_APORTANTE_tmp.TREGIMEN_ID = (row44.TREGIMEN_ID != 0 && row44.TREGIMEN_ANT != row44.TREGIMEN_ID)?row44.TREGIMEN_ID:row44.TREGIMEN_ANT ;
ENTIDAD_APORTANTE = ENTIDAD_APORTANTE_tmp;
} // closing filter/reject

// # Output table : 'CAMBIOS_AFILIACION'
CAMBIOS_AFILIACION_tmp.ID = row44.AFILIADO_ID ;
CAMBIOS_AFILIACION_tmp.FECHA_CADUCIDAD = row44.FECHA_CADUCIDAD ;
CAMBIOS_AFILIACION_tmp.PLANAFILIACIONES_ID = (row44.PLANAFILIACIONES_ID != 0 && row44.PLANAFILIACIONES_ID_ANT != row44.PLANAFILIACIONES_ID)?row44.PLANAFILIACIONES_ID:row44.PLANAFILIACIONES_ID_ANT ;
CAMBIOS_AFILIACION_tmp.OBSERVACIONES = row44.OBSERVACIONES ;
CAMBIOS_AFILIACION = CAMBIOS_AFILIACION_tmp;

// # Output table : 'CAMBIO_FECHA_CADUCIDAD'
// # Filter conditions 
if( 

((row44.FECHA_CADUCIDAD == null && row44.FCADUCIDAD_ANT == null) ? 0 : (row44.FECHA_CADUCIDAD != null && row44.FCADUCIDAD_ANT == null) ? 1 : (row44.FECHA_CADUCIDAD == null && row44.FCADUCIDAD_ANT != null)? 0 : TalendDate.compareDate(row44.FECHA_CADUCIDAD,row44.FCADUCIDAD_ANT) == 0 ? 0 : 1) == 1

 ) {
CAMBIO_FECHA_CADUCIDAD_tmp.AFILIADOS_ID = row44.AFILIADO_ID ;
CAMBIO_FECHA_CADUCIDAD_tmp.PROCESOS_ID = context.vprocesos_id;
CAMBIO_FECHA_CADUCIDAD_tmp.MOTIVO = row44.MOTIVO ;
CAMBIO_FECHA_CADUCIDAD_tmp.RNOVEDADES_ID = row44.RNOVEDADES_ID ;
CAMBIO_FECHA_CADUCIDAD_tmp.VANTERIOR = row44.FCADUCIDAD_ANT==null?null:TalendDate.formatDate("dd-MM-yyyy", row44.FCADUCIDAD_ANT) ;
CAMBIO_FECHA_CADUCIDAD_tmp.VACTUAL = TalendDate.formatDate("dd-MM-yyyy", row44.FECHA_CADUCIDAD) ;
CAMBIO_FECHA_CADUCIDAD_tmp.CAMPO = "FECHA_CADUCIDAD" ;
CAMBIO_FECHA_CADUCIDAD = CAMBIO_FECHA_CADUCIDAD_tmp;
} // closing filter/reject

// # Output table : 'CAMBIO_ENTIDAD_PRINCIPAL'
// # Filter conditions 
if( 

row44.PRINCIPAL_ANT == null || 
(row44.PRINCIPAL_ANT == 2 && row44.ENTIDAD_PRINCIPAL == 1)||
(row44.PRINCIPAL_ANT == null && row44.ENTIDAD_PRINCIPAL == 1)

 ) {
CAMBIO_ENTIDAD_PRINCIPAL_tmp.afiliado_id_ = row44.AFILIADO_ID ;
CAMBIO_ENTIDAD_PRINCIPAL_tmp.entidad_id_ = row44.ID_UNICO_ENTIDAD ;
CAMBIO_ENTIDAD_PRINCIPAL = CAMBIO_ENTIDAD_PRINCIPAL_tmp;
} // closing filter/reject

// # Output table : 'CAMBIO_PLAN_AFILIACION'
// # Filter conditions 
if( 

((row44.PLANAFILIACIONES_ID != 0 && row44.PLANAFILIACIONES_ID_ANT != row44.PLANAFILIACIONES_ID)? 1 : 0) == 1

 ) {
CAMBIO_PLAN_AFILIACION_tmp.AFILIADOS_ID = row44.AFILIADO_ID ;
CAMBIO_PLAN_AFILIACION_tmp.PROCESOS_ID = context.vprocesos_id;
CAMBIO_PLAN_AFILIACION_tmp.MOTIVO = row44.MOTIVO ;
CAMBIO_PLAN_AFILIACION_tmp.RNOVEDADES_ID = row128.ID ;
CAMBIO_PLAN_AFILIACION_tmp.VANTERIOR = Integer.toString(row44.PLANAFILIACIONES_ID_ANT) ;
CAMBIO_PLAN_AFILIACION_tmp.VACTUAL = Integer.toString(row44.PLANAFILIACIONES_ID) ;
CAMBIO_PLAN_AFILIACION_tmp.CAMPO = "PLANAFILIACIONES_ID";
CAMBIO_PLAN_AFILIACION = CAMBIO_PLAN_AFILIACION_tmp;
} // closing filter/reject

// # Output table : 'CAMBIO_FECHA_DEFUNCION'
// # Filter conditions 
if( 

((row44.FECHA_DEFUNCION == null && row44.FECHA_DEFUNCION_ANT == null) ? 0 : (row44.FECHA_DEFUNCION != null && row44.FECHA_DEFUNCION_ANT == null) ? 1 : (row44.FECHA_DEFUNCION == null && row44.FECHA_DEFUNCION_ANT != null)? 0 : TalendDate.compareDate(row44.FECHA_DEFUNCION,row44.FECHA_DEFUNCION_ANT) == 0 ? 0 : 1) == 1

 ) {
CAMBIO_FECHA_DEFUNCION_tmp.AFILIADOS_ID = row44.AFILIADO_ID ;
CAMBIO_FECHA_DEFUNCION_tmp.PROCESOS_ID = context.vprocesos_id;
CAMBIO_FECHA_DEFUNCION_tmp.MOTIVO = row44.MOTIVO ;
CAMBIO_FECHA_DEFUNCION_tmp.RNOVEDADES_ID = row129.ID;
CAMBIO_FECHA_DEFUNCION_tmp.VANTERIOR = row44.FECHA_DEFUNCION_ANT==null?null:TalendDate.formatDate("dd-MM-yyyy", row44.FECHA_DEFUNCION_ANT) ;
CAMBIO_FECHA_DEFUNCION_tmp.VACTUAL = row44.FECHA_DEFUNCION == null?null:TalendDate.formatDate("dd-MM-yyyy", row44.FECHA_DEFUNCION) ;
CAMBIO_FECHA_DEFUNCION_tmp.CAMPO = "FECHA_DEFUNCION";
CAMBIO_FECHA_DEFUNCION = CAMBIO_FECHA_DEFUNCION_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "ACTUALIZAR_PERSONAS"
if(ACTUALIZAR_PERSONAS != null) { 



	
	/**
	 * [tOracleOutput_8 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"ACTUALIZAR_PERSONAS"
						
						);
					}
					



        whetherReject_tOracleOutput_8 = false;
                    if(ACTUALIZAR_PERSONAS.PRIMER_NOMBRE == null) {
pstmt_tOracleOutput_8.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_8.setString(1, ACTUALIZAR_PERSONAS.PRIMER_NOMBRE);
}

                    if(ACTUALIZAR_PERSONAS.SEGUNDO_NOMBRE == null) {
pstmt_tOracleOutput_8.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_8.setString(2, ACTUALIZAR_PERSONAS.SEGUNDO_NOMBRE);
}

                    if(ACTUALIZAR_PERSONAS.PRIMER_APELLIDO == null) {
pstmt_tOracleOutput_8.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_8.setString(3, ACTUALIZAR_PERSONAS.PRIMER_APELLIDO);
}

                    if(ACTUALIZAR_PERSONAS.SEGUNDO_APELLIDO == null) {
pstmt_tOracleOutput_8.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_8.setString(4, ACTUALIZAR_PERSONAS.SEGUNDO_APELLIDO);
}

                    if(ACTUALIZAR_PERSONAS.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_8.setNull(5, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_8.setInt(5, ACTUALIZAR_PERSONAS.TDOCUMENTOS_ID);
}

                    if(ACTUALIZAR_PERSONAS.DOCUMENTO == null) {
pstmt_tOracleOutput_8.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_8.setString(6, ACTUALIZAR_PERSONAS.DOCUMENTO);
}

                    if(ACTUALIZAR_PERSONAS.LUGAR_EXPEDICION == null) {
pstmt_tOracleOutput_8.setNull(7, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_8.setInt(7, ACTUALIZAR_PERSONAS.LUGAR_EXPEDICION);
}

                    if(ACTUALIZAR_PERSONAS.SEXO_ID == null) {
pstmt_tOracleOutput_8.setNull(8, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_8.setInt(8, ACTUALIZAR_PERSONAS.SEXO_ID);
}

                    if(ACTUALIZAR_PERSONAS.ESTATURA == null) {
pstmt_tOracleOutput_8.setNull(9, java.sql.Types.FLOAT);
} else {pstmt_tOracleOutput_8.setFloat(9, ACTUALIZAR_PERSONAS.ESTATURA);
}

                    if(ACTUALIZAR_PERSONAS.FECHA_EXPEDICION != null) {
pstmt_tOracleOutput_8.setObject(10, new java.sql.Timestamp(ACTUALIZAR_PERSONAS.FECHA_EXPEDICION.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_8.setNull(10, java.sql.Types.DATE);
}

                    if(ACTUALIZAR_PERSONAS.FECHA_NACIMIENTO != null) {
pstmt_tOracleOutput_8.setObject(11, new java.sql.Timestamp(ACTUALIZAR_PERSONAS.FECHA_NACIMIENTO.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_8.setNull(11, java.sql.Types.DATE);
}

                    if(ACTUALIZAR_PERSONAS.LUGAR_NACIMIENTO == null) {
pstmt_tOracleOutput_8.setNull(12, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_8.setInt(12, ACTUALIZAR_PERSONAS.LUGAR_NACIMIENTO);
}

                    if(ACTUALIZAR_PERSONAS.DIRECCION == null) {
pstmt_tOracleOutput_8.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_8.setString(13, ACTUALIZAR_PERSONAS.DIRECCION);
}

                    if(ACTUALIZAR_PERSONAS.LUGAR_RESIDENCIA == null) {
pstmt_tOracleOutput_8.setNull(14, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_8.setInt(14, ACTUALIZAR_PERSONAS.LUGAR_RESIDENCIA);
}

                    if(ACTUALIZAR_PERSONAS.LOCALIDADES_ID == null) {
pstmt_tOracleOutput_8.setNull(15, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_8.setInt(15, ACTUALIZAR_PERSONAS.LOCALIDADES_ID);
}

                    if(ACTUALIZAR_PERSONAS.GSANGUINEOS_ID == null) {
pstmt_tOracleOutput_8.setNull(16, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_8.setInt(16, ACTUALIZAR_PERSONAS.GSANGUINEOS_ID);
}

                    if(ACTUALIZAR_PERSONAS.TELEFONO == null) {
pstmt_tOracleOutput_8.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_8.setString(17, ACTUALIZAR_PERSONAS.TELEFONO);
}

                    if(ACTUALIZAR_PERSONAS.OCUPACIONES_ID == null) {
pstmt_tOracleOutput_8.setNull(18, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_8.setInt(18, ACTUALIZAR_PERSONAS.OCUPACIONES_ID);
}

                    if(ACTUALIZAR_PERSONAS.ETNICAS_ID == null) {
pstmt_tOracleOutput_8.setNull(19, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_8.setInt(19, ACTUALIZAR_PERSONAS.ETNICAS_ID);
}

                    if(ACTUALIZAR_PERSONAS.NSOCIOECONOMICOS_ID == null) {
pstmt_tOracleOutput_8.setNull(20, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_8.setInt(20, ACTUALIZAR_PERSONAS.NSOCIOECONOMICOS_ID);
}

                    if(ACTUALIZAR_PERSONAS.TVIVIENDA_ID == null) {
pstmt_tOracleOutput_8.setNull(21, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_8.setInt(21, ACTUALIZAR_PERSONAS.TVIVIENDA_ID);
}

                    if(ACTUALIZAR_PERSONAS.NEDUCATIVOS_ID == null) {
pstmt_tOracleOutput_8.setNull(22, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_8.setInt(22, ACTUALIZAR_PERSONAS.NEDUCATIVOS_ID);
}

                    if(ACTUALIZAR_PERSONAS.ESMADSCRITO == null) {
pstmt_tOracleOutput_8.setNull(23, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_8.setInt(23, ACTUALIZAR_PERSONAS.ESMADSCRITO);
}

                    if(ACTUALIZAR_PERSONAS.CELULAR == null) {
pstmt_tOracleOutput_8.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_8.setString(24, ACTUALIZAR_PERSONAS.CELULAR);
}

                    if(ACTUALIZAR_PERSONAS.EMAIL == null) {
pstmt_tOracleOutput_8.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_8.setString(25, ACTUALIZAR_PERSONAS.EMAIL);
}

                    if(ACTUALIZAR_PERSONAS.FECHA_DEFUNCION != null) {
pstmt_tOracleOutput_8.setObject(26, new java.sql.Timestamp(ACTUALIZAR_PERSONAS.FECHA_DEFUNCION.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_8.setNull(26, java.sql.Types.DATE);
}

                    if(ACTUALIZAR_PERSONAS.ID_BDUA == null) {
pstmt_tOracleOutput_8.setNull(27, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_8.setInt(27, ACTUALIZAR_PERSONAS.ID_BDUA);
}

                    if(ACTUALIZAR_PERSONAS.TDISCAPACIDADES_ID == null) {
pstmt_tOracleOutput_8.setNull(28, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_8.setInt(28, ACTUALIZAR_PERSONAS.TDISCAPACIDADES_ID);
}

                    if(ACTUALIZAR_PERSONAS.PESPECIAL_ID == null) {
pstmt_tOracleOutput_8.setNull(29, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_8.setInt(29, ACTUALIZAR_PERSONAS.PESPECIAL_ID);
}


                    if(ACTUALIZAR_PERSONAS.ID == null) {
pstmt_tOracleOutput_8.setNull(30 + count_tOracleOutput_8, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_8.setInt(30 + count_tOracleOutput_8, ACTUALIZAR_PERSONAS.ID);
}

                try {
                    nb_line_tOracleOutput_8++;
                    int processedCount_tOracleOutput_8 = pstmt_tOracleOutput_8.executeUpdate();
                    updatedCount_tOracleOutput_8 += processedCount_tOracleOutput_8;
                    rowsToCommitCount_tOracleOutput_8 += processedCount_tOracleOutput_8;
                } catch(java.lang.Exception e_tOracleOutput_8) {
globalMap.put("tOracleOutput_8_ERROR_MESSAGE",e_tOracleOutput_8.getMessage());
                    whetherReject_tOracleOutput_8 = true;
                            System.err.print(e_tOracleOutput_8.getMessage());
                }

 


	tos_count_tOracleOutput_8++;

/**
 * [tOracleOutput_8 main ] stop
 */
	
	/**
	 * [tOracleOutput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_8";
	
	

 



/**
 * [tOracleOutput_8 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_8";
	
	

 



/**
 * [tOracleOutput_8 process_data_end ] stop
 */

} // End of branch "ACTUALIZAR_PERSONAS"




// Start of branch "CAMBIO_TDOCUMENTOS_ID"
if(CAMBIO_TDOCUMENTOS_ID != null) { 



	
	/**
	 * [tOracleOutput_25 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_25";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"CAMBIO_TDOCUMENTOS_ID"
						
						);
					}
					



        whetherReject_tOracleOutput_25 = false;
                        pstmt_tOracleOutput_25.setInt(1, CAMBIO_TDOCUMENTOS_ID.AFILIADOS_ID);

                        pstmt_tOracleOutput_25.setInt(2, CAMBIO_TDOCUMENTOS_ID.PROCESOS_ID);

                        if(CAMBIO_TDOCUMENTOS_ID.MOTIVO == null) {
pstmt_tOracleOutput_25.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_25.setString(3, CAMBIO_TDOCUMENTOS_ID.MOTIVO);
}

                        pstmt_tOracleOutput_25.setInt(4, CAMBIO_TDOCUMENTOS_ID.RNOVEDADES_ID);

                        if(CAMBIO_TDOCUMENTOS_ID.VANTERIOR == null) {
pstmt_tOracleOutput_25.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_25.setString(5, CAMBIO_TDOCUMENTOS_ID.VANTERIOR);
}

                        if(CAMBIO_TDOCUMENTOS_ID.VACTUAL == null) {
pstmt_tOracleOutput_25.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_25.setString(6, CAMBIO_TDOCUMENTOS_ID.VACTUAL);
}

                        if(CAMBIO_TDOCUMENTOS_ID.CAMPO == null) {
pstmt_tOracleOutput_25.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_25.setString(7, CAMBIO_TDOCUMENTOS_ID.CAMPO);
}

                try {
                    nb_line_tOracleOutput_25++;
                    int processedCount_tOracleOutput_25 = pstmt_tOracleOutput_25.executeUpdate();
                    insertedCount_tOracleOutput_25 += processedCount_tOracleOutput_25;
                    rowsToCommitCount_tOracleOutput_25 += processedCount_tOracleOutput_25;
                } catch(java.lang.Exception e_tOracleOutput_25) {
globalMap.put("tOracleOutput_25_ERROR_MESSAGE",e_tOracleOutput_25.getMessage());
                    whetherReject_tOracleOutput_25 = true;
                            System.err.print(e_tOracleOutput_25.getMessage());
                }

 


	tos_count_tOracleOutput_25++;

/**
 * [tOracleOutput_25 main ] stop
 */
	
	/**
	 * [tOracleOutput_25 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_25";
	
	

 



/**
 * [tOracleOutput_25 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_25 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_25";
	
	

 



/**
 * [tOracleOutput_25 process_data_end ] stop
 */

} // End of branch "CAMBIO_TDOCUMENTOS_ID"




// Start of branch "CAMBIO_DOCUMENTO"
if(CAMBIO_DOCUMENTO != null) { 



	
	/**
	 * [tOracleOutput_26 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_26";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"CAMBIO_DOCUMENTO"
						
						);
					}
					



        whetherReject_tOracleOutput_26 = false;
                        pstmt_tOracleOutput_26.setInt(1, CAMBIO_DOCUMENTO.AFILIADOS_ID);

                        pstmt_tOracleOutput_26.setInt(2, CAMBIO_DOCUMENTO.PROCESOS_ID);

                        if(CAMBIO_DOCUMENTO.MOTIVO == null) {
pstmt_tOracleOutput_26.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_26.setString(3, CAMBIO_DOCUMENTO.MOTIVO);
}

                        pstmt_tOracleOutput_26.setInt(4, CAMBIO_DOCUMENTO.RNOVEDADES_ID);

                        if(CAMBIO_DOCUMENTO.VANTERIOR == null) {
pstmt_tOracleOutput_26.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_26.setString(5, CAMBIO_DOCUMENTO.VANTERIOR);
}

                        if(CAMBIO_DOCUMENTO.VACTUAL == null) {
pstmt_tOracleOutput_26.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_26.setString(6, CAMBIO_DOCUMENTO.VACTUAL);
}

                        if(CAMBIO_DOCUMENTO.CAMPO == null) {
pstmt_tOracleOutput_26.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_26.setString(7, CAMBIO_DOCUMENTO.CAMPO);
}

                try {
                    nb_line_tOracleOutput_26++;
                    int processedCount_tOracleOutput_26 = pstmt_tOracleOutput_26.executeUpdate();
                    insertedCount_tOracleOutput_26 += processedCount_tOracleOutput_26;
                    rowsToCommitCount_tOracleOutput_26 += processedCount_tOracleOutput_26;
                } catch(java.lang.Exception e_tOracleOutput_26) {
globalMap.put("tOracleOutput_26_ERROR_MESSAGE",e_tOracleOutput_26.getMessage());
                    whetherReject_tOracleOutput_26 = true;
                            System.err.print(e_tOracleOutput_26.getMessage());
                }

 


	tos_count_tOracleOutput_26++;

/**
 * [tOracleOutput_26 main ] stop
 */
	
	/**
	 * [tOracleOutput_26 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_26";
	
	

 



/**
 * [tOracleOutput_26 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_26 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_26";
	
	

 



/**
 * [tOracleOutput_26 process_data_end ] stop
 */

} // End of branch "CAMBIO_DOCUMENTO"




// Start of branch "CAMBIO_PRIMER_NOMBRE"
if(CAMBIO_PRIMER_NOMBRE != null) { 



	
	/**
	 * [tOracleOutput_27 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_27";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"CAMBIO_PRIMER_NOMBRE"
						
						);
					}
					



        whetherReject_tOracleOutput_27 = false;
                        pstmt_tOracleOutput_27.setInt(1, CAMBIO_PRIMER_NOMBRE.AFILIADOS_ID);

                        pstmt_tOracleOutput_27.setInt(2, CAMBIO_PRIMER_NOMBRE.PROCESOS_ID);

                        if(CAMBIO_PRIMER_NOMBRE.MOTIVO == null) {
pstmt_tOracleOutput_27.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_27.setString(3, CAMBIO_PRIMER_NOMBRE.MOTIVO);
}

                        pstmt_tOracleOutput_27.setInt(4, CAMBIO_PRIMER_NOMBRE.RNOVEDADES_ID);

                        if(CAMBIO_PRIMER_NOMBRE.VANTERIOR == null) {
pstmt_tOracleOutput_27.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_27.setString(5, CAMBIO_PRIMER_NOMBRE.VANTERIOR);
}

                        if(CAMBIO_PRIMER_NOMBRE.VACTUAL == null) {
pstmt_tOracleOutput_27.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_27.setString(6, CAMBIO_PRIMER_NOMBRE.VACTUAL);
}

                        if(CAMBIO_PRIMER_NOMBRE.CAMPO == null) {
pstmt_tOracleOutput_27.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_27.setString(7, CAMBIO_PRIMER_NOMBRE.CAMPO);
}

                try {
                    nb_line_tOracleOutput_27++;
                    int processedCount_tOracleOutput_27 = pstmt_tOracleOutput_27.executeUpdate();
                    insertedCount_tOracleOutput_27 += processedCount_tOracleOutput_27;
                    rowsToCommitCount_tOracleOutput_27 += processedCount_tOracleOutput_27;
                } catch(java.lang.Exception e_tOracleOutput_27) {
globalMap.put("tOracleOutput_27_ERROR_MESSAGE",e_tOracleOutput_27.getMessage());
                    whetherReject_tOracleOutput_27 = true;
                            System.err.print(e_tOracleOutput_27.getMessage());
                }

 


	tos_count_tOracleOutput_27++;

/**
 * [tOracleOutput_27 main ] stop
 */
	
	/**
	 * [tOracleOutput_27 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_27";
	
	

 



/**
 * [tOracleOutput_27 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_27 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_27";
	
	

 



/**
 * [tOracleOutput_27 process_data_end ] stop
 */

} // End of branch "CAMBIO_PRIMER_NOMBRE"




// Start of branch "CAMBIO_SEGUNDO_NOMBRE"
if(CAMBIO_SEGUNDO_NOMBRE != null) { 



	
	/**
	 * [tOracleOutput_28 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_28";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"CAMBIO_SEGUNDO_NOMBRE"
						
						);
					}
					



        whetherReject_tOracleOutput_28 = false;
                        pstmt_tOracleOutput_28.setInt(1, CAMBIO_SEGUNDO_NOMBRE.AFILIADOS_ID);

                        pstmt_tOracleOutput_28.setInt(2, CAMBIO_SEGUNDO_NOMBRE.PROCESOS_ID);

                        if(CAMBIO_SEGUNDO_NOMBRE.MOTIVO == null) {
pstmt_tOracleOutput_28.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_28.setString(3, CAMBIO_SEGUNDO_NOMBRE.MOTIVO);
}

                        pstmt_tOracleOutput_28.setInt(4, CAMBIO_SEGUNDO_NOMBRE.RNOVEDADES_ID);

                        if(CAMBIO_SEGUNDO_NOMBRE.VANTERIOR == null) {
pstmt_tOracleOutput_28.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_28.setString(5, CAMBIO_SEGUNDO_NOMBRE.VANTERIOR);
}

                        if(CAMBIO_SEGUNDO_NOMBRE.VACTUAL == null) {
pstmt_tOracleOutput_28.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_28.setString(6, CAMBIO_SEGUNDO_NOMBRE.VACTUAL);
}

                        if(CAMBIO_SEGUNDO_NOMBRE.CAMPO == null) {
pstmt_tOracleOutput_28.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_28.setString(7, CAMBIO_SEGUNDO_NOMBRE.CAMPO);
}

                try {
                    nb_line_tOracleOutput_28++;
                    int processedCount_tOracleOutput_28 = pstmt_tOracleOutput_28.executeUpdate();
                    insertedCount_tOracleOutput_28 += processedCount_tOracleOutput_28;
                    rowsToCommitCount_tOracleOutput_28 += processedCount_tOracleOutput_28;
                } catch(java.lang.Exception e_tOracleOutput_28) {
globalMap.put("tOracleOutput_28_ERROR_MESSAGE",e_tOracleOutput_28.getMessage());
                    whetherReject_tOracleOutput_28 = true;
                            System.err.print(e_tOracleOutput_28.getMessage());
                }

 


	tos_count_tOracleOutput_28++;

/**
 * [tOracleOutput_28 main ] stop
 */
	
	/**
	 * [tOracleOutput_28 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_28";
	
	

 



/**
 * [tOracleOutput_28 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_28 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_28";
	
	

 



/**
 * [tOracleOutput_28 process_data_end ] stop
 */

} // End of branch "CAMBIO_SEGUNDO_NOMBRE"




// Start of branch "CAMBIO_PRIMER_APELLIDO"
if(CAMBIO_PRIMER_APELLIDO != null) { 



	
	/**
	 * [tOracleOutput_9 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"CAMBIO_PRIMER_APELLIDO"
						
						);
					}
					



        whetherReject_tOracleOutput_9 = false;
                        pstmt_tOracleOutput_9.setInt(1, CAMBIO_PRIMER_APELLIDO.AFILIADOS_ID);

                        pstmt_tOracleOutput_9.setInt(2, CAMBIO_PRIMER_APELLIDO.PROCESOS_ID);

                        if(CAMBIO_PRIMER_APELLIDO.MOTIVO == null) {
pstmt_tOracleOutput_9.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_9.setString(3, CAMBIO_PRIMER_APELLIDO.MOTIVO);
}

                        pstmt_tOracleOutput_9.setInt(4, CAMBIO_PRIMER_APELLIDO.RNOVEDADES_ID);

                        if(CAMBIO_PRIMER_APELLIDO.VANTERIOR == null) {
pstmt_tOracleOutput_9.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_9.setString(5, CAMBIO_PRIMER_APELLIDO.VANTERIOR);
}

                        if(CAMBIO_PRIMER_APELLIDO.VACTUAL == null) {
pstmt_tOracleOutput_9.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_9.setString(6, CAMBIO_PRIMER_APELLIDO.VACTUAL);
}

                        if(CAMBIO_PRIMER_APELLIDO.CAMPO == null) {
pstmt_tOracleOutput_9.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_9.setString(7, CAMBIO_PRIMER_APELLIDO.CAMPO);
}

                try {
                    nb_line_tOracleOutput_9++;
                    int processedCount_tOracleOutput_9 = pstmt_tOracleOutput_9.executeUpdate();
                    insertedCount_tOracleOutput_9 += processedCount_tOracleOutput_9;
                    rowsToCommitCount_tOracleOutput_9 += processedCount_tOracleOutput_9;
                } catch(java.lang.Exception e_tOracleOutput_9) {
globalMap.put("tOracleOutput_9_ERROR_MESSAGE",e_tOracleOutput_9.getMessage());
                    whetherReject_tOracleOutput_9 = true;
                            System.err.print(e_tOracleOutput_9.getMessage());
                }

 


	tos_count_tOracleOutput_9++;

/**
 * [tOracleOutput_9 main ] stop
 */
	
	/**
	 * [tOracleOutput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_9";
	
	

 



/**
 * [tOracleOutput_9 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_9";
	
	

 



/**
 * [tOracleOutput_9 process_data_end ] stop
 */

} // End of branch "CAMBIO_PRIMER_APELLIDO"




// Start of branch "CAMBIO_SEGUNDO_APELLIDO"
if(CAMBIO_SEGUNDO_APELLIDO != null) { 



	
	/**
	 * [tOracleOutput_20 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_20";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"CAMBIO_SEGUNDO_APELLIDO"
						
						);
					}
					



        whetherReject_tOracleOutput_20 = false;
                        pstmt_tOracleOutput_20.setInt(1, CAMBIO_SEGUNDO_APELLIDO.AFILIADOS_ID);

                        pstmt_tOracleOutput_20.setInt(2, CAMBIO_SEGUNDO_APELLIDO.PROCESOS_ID);

                        if(CAMBIO_SEGUNDO_APELLIDO.MOTIVO == null) {
pstmt_tOracleOutput_20.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_20.setString(3, CAMBIO_SEGUNDO_APELLIDO.MOTIVO);
}

                        pstmt_tOracleOutput_20.setInt(4, CAMBIO_SEGUNDO_APELLIDO.RNOVEDADES_ID);

                        if(CAMBIO_SEGUNDO_APELLIDO.VANTERIOR == null) {
pstmt_tOracleOutput_20.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_20.setString(5, CAMBIO_SEGUNDO_APELLIDO.VANTERIOR);
}

                        if(CAMBIO_SEGUNDO_APELLIDO.VACTUAL == null) {
pstmt_tOracleOutput_20.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_20.setString(6, CAMBIO_SEGUNDO_APELLIDO.VACTUAL);
}

                        if(CAMBIO_SEGUNDO_APELLIDO.CAMPO == null) {
pstmt_tOracleOutput_20.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_20.setString(7, CAMBIO_SEGUNDO_APELLIDO.CAMPO);
}

                try {
                    nb_line_tOracleOutput_20++;
                    int processedCount_tOracleOutput_20 = pstmt_tOracleOutput_20.executeUpdate();
                    insertedCount_tOracleOutput_20 += processedCount_tOracleOutput_20;
                    rowsToCommitCount_tOracleOutput_20 += processedCount_tOracleOutput_20;
                } catch(java.lang.Exception e_tOracleOutput_20) {
globalMap.put("tOracleOutput_20_ERROR_MESSAGE",e_tOracleOutput_20.getMessage());
                    whetherReject_tOracleOutput_20 = true;
                            System.err.print(e_tOracleOutput_20.getMessage());
                }

 


	tos_count_tOracleOutput_20++;

/**
 * [tOracleOutput_20 main ] stop
 */
	
	/**
	 * [tOracleOutput_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_20";
	
	

 



/**
 * [tOracleOutput_20 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_20";
	
	

 



/**
 * [tOracleOutput_20 process_data_end ] stop
 */

} // End of branch "CAMBIO_SEGUNDO_APELLIDO"




// Start of branch "CAMBIO_FECHA_NACIMIENTO"
if(CAMBIO_FECHA_NACIMIENTO != null) { 



	
	/**
	 * [tOracleOutput_29 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_29";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"CAMBIO_FECHA_NACIMIENTO"
						
						);
					}
					



        whetherReject_tOracleOutput_29 = false;
                        pstmt_tOracleOutput_29.setInt(1, CAMBIO_FECHA_NACIMIENTO.AFILIADOS_ID);

                        pstmt_tOracleOutput_29.setInt(2, CAMBIO_FECHA_NACIMIENTO.PROCESOS_ID);

                        if(CAMBIO_FECHA_NACIMIENTO.MOTIVO == null) {
pstmt_tOracleOutput_29.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_29.setString(3, CAMBIO_FECHA_NACIMIENTO.MOTIVO);
}

                        pstmt_tOracleOutput_29.setInt(4, CAMBIO_FECHA_NACIMIENTO.RNOVEDADES_ID);

                        if(CAMBIO_FECHA_NACIMIENTO.VANTERIOR == null) {
pstmt_tOracleOutput_29.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_29.setString(5, CAMBIO_FECHA_NACIMIENTO.VANTERIOR);
}

                        if(CAMBIO_FECHA_NACIMIENTO.VACTUAL == null) {
pstmt_tOracleOutput_29.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_29.setString(6, CAMBIO_FECHA_NACIMIENTO.VACTUAL);
}

                        if(CAMBIO_FECHA_NACIMIENTO.CAMPO == null) {
pstmt_tOracleOutput_29.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_29.setString(7, CAMBIO_FECHA_NACIMIENTO.CAMPO);
}

                try {
                    nb_line_tOracleOutput_29++;
                    int processedCount_tOracleOutput_29 = pstmt_tOracleOutput_29.executeUpdate();
                    insertedCount_tOracleOutput_29 += processedCount_tOracleOutput_29;
                    rowsToCommitCount_tOracleOutput_29 += processedCount_tOracleOutput_29;
                } catch(java.lang.Exception e_tOracleOutput_29) {
globalMap.put("tOracleOutput_29_ERROR_MESSAGE",e_tOracleOutput_29.getMessage());
                    whetherReject_tOracleOutput_29 = true;
                            System.err.print(e_tOracleOutput_29.getMessage());
                }

 


	tos_count_tOracleOutput_29++;

/**
 * [tOracleOutput_29 main ] stop
 */
	
	/**
	 * [tOracleOutput_29 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_29";
	
	

 



/**
 * [tOracleOutput_29 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_29 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_29";
	
	

 



/**
 * [tOracleOutput_29 process_data_end ] stop
 */

} // End of branch "CAMBIO_FECHA_NACIMIENTO"




// Start of branch "CAMBIO_SEXO_ID"
if(CAMBIO_SEXO_ID != null) { 



	
	/**
	 * [tOracleOutput_30 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_30";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"CAMBIO_SEXO_ID"
						
						);
					}
					



        whetherReject_tOracleOutput_30 = false;
                        pstmt_tOracleOutput_30.setInt(1, CAMBIO_SEXO_ID.AFILIADOS_ID);

                        pstmt_tOracleOutput_30.setInt(2, CAMBIO_SEXO_ID.PROCESOS_ID);

                        if(CAMBIO_SEXO_ID.MOTIVO == null) {
pstmt_tOracleOutput_30.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_30.setString(3, CAMBIO_SEXO_ID.MOTIVO);
}

                        pstmt_tOracleOutput_30.setInt(4, CAMBIO_SEXO_ID.RNOVEDADES_ID);

                        if(CAMBIO_SEXO_ID.VANTERIOR == null) {
pstmt_tOracleOutput_30.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_30.setString(5, CAMBIO_SEXO_ID.VANTERIOR);
}

                        if(CAMBIO_SEXO_ID.VACTUAL == null) {
pstmt_tOracleOutput_30.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_30.setString(6, CAMBIO_SEXO_ID.VACTUAL);
}

                        if(CAMBIO_SEXO_ID.CAMPO == null) {
pstmt_tOracleOutput_30.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_30.setString(7, CAMBIO_SEXO_ID.CAMPO);
}

                try {
                    nb_line_tOracleOutput_30++;
                    int processedCount_tOracleOutput_30 = pstmt_tOracleOutput_30.executeUpdate();
                    insertedCount_tOracleOutput_30 += processedCount_tOracleOutput_30;
                    rowsToCommitCount_tOracleOutput_30 += processedCount_tOracleOutput_30;
                } catch(java.lang.Exception e_tOracleOutput_30) {
globalMap.put("tOracleOutput_30_ERROR_MESSAGE",e_tOracleOutput_30.getMessage());
                    whetherReject_tOracleOutput_30 = true;
                            System.err.print(e_tOracleOutput_30.getMessage());
                }

 


	tos_count_tOracleOutput_30++;

/**
 * [tOracleOutput_30 main ] stop
 */
	
	/**
	 * [tOracleOutput_30 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_30";
	
	

 



/**
 * [tOracleOutput_30 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_30 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_30";
	
	

 



/**
 * [tOracleOutput_30 process_data_end ] stop
 */

} // End of branch "CAMBIO_SEXO_ID"




// Start of branch "CAMBIO_DIRECCION"
if(CAMBIO_DIRECCION != null) { 



	
	/**
	 * [tOracleOutput_24 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_24";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"CAMBIO_DIRECCION"
						
						);
					}
					



        whetherReject_tOracleOutput_24 = false;
                        pstmt_tOracleOutput_24.setInt(1, CAMBIO_DIRECCION.AFILIADOS_ID);

                        pstmt_tOracleOutput_24.setInt(2, CAMBIO_DIRECCION.PROCESOS_ID);

                        if(CAMBIO_DIRECCION.MOTIVO == null) {
pstmt_tOracleOutput_24.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_24.setString(3, CAMBIO_DIRECCION.MOTIVO);
}

                        pstmt_tOracleOutput_24.setInt(4, CAMBIO_DIRECCION.RNOVEDADES_ID);

                        if(CAMBIO_DIRECCION.VANTERIOR == null) {
pstmt_tOracleOutput_24.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_24.setString(5, CAMBIO_DIRECCION.VANTERIOR);
}

                        if(CAMBIO_DIRECCION.VACTUAL == null) {
pstmt_tOracleOutput_24.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_24.setString(6, CAMBIO_DIRECCION.VACTUAL);
}

                        if(CAMBIO_DIRECCION.CAMPO == null) {
pstmt_tOracleOutput_24.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_24.setString(7, CAMBIO_DIRECCION.CAMPO);
}

                try {
                    nb_line_tOracleOutput_24++;
                    int processedCount_tOracleOutput_24 = pstmt_tOracleOutput_24.executeUpdate();
                    insertedCount_tOracleOutput_24 += processedCount_tOracleOutput_24;
                    rowsToCommitCount_tOracleOutput_24 += processedCount_tOracleOutput_24;
                } catch(java.lang.Exception e_tOracleOutput_24) {
globalMap.put("tOracleOutput_24_ERROR_MESSAGE",e_tOracleOutput_24.getMessage());
                    whetherReject_tOracleOutput_24 = true;
                            System.err.print(e_tOracleOutput_24.getMessage());
                }

 


	tos_count_tOracleOutput_24++;

/**
 * [tOracleOutput_24 main ] stop
 */
	
	/**
	 * [tOracleOutput_24 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_24";
	
	

 



/**
 * [tOracleOutput_24 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_24 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_24";
	
	

 



/**
 * [tOracleOutput_24 process_data_end ] stop
 */

} // End of branch "CAMBIO_DIRECCION"




// Start of branch "CAMBIO_LUGAR_RESIDENCIA"
if(CAMBIO_LUGAR_RESIDENCIA != null) { 



	
	/**
	 * [tOracleOutput_23 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_23";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"CAMBIO_LUGAR_RESIDENCIA"
						
						);
					}
					



        whetherReject_tOracleOutput_23 = false;
                        pstmt_tOracleOutput_23.setInt(1, CAMBIO_LUGAR_RESIDENCIA.AFILIADOS_ID);

                        pstmt_tOracleOutput_23.setInt(2, CAMBIO_LUGAR_RESIDENCIA.PROCESOS_ID);

                        if(CAMBIO_LUGAR_RESIDENCIA.MOTIVO == null) {
pstmt_tOracleOutput_23.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_23.setString(3, CAMBIO_LUGAR_RESIDENCIA.MOTIVO);
}

                        pstmt_tOracleOutput_23.setInt(4, CAMBIO_LUGAR_RESIDENCIA.RNOVEDADES_ID);

                        if(CAMBIO_LUGAR_RESIDENCIA.VANTERIOR == null) {
pstmt_tOracleOutput_23.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_23.setString(5, CAMBIO_LUGAR_RESIDENCIA.VANTERIOR);
}

                        if(CAMBIO_LUGAR_RESIDENCIA.VACTUAL == null) {
pstmt_tOracleOutput_23.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_23.setString(6, CAMBIO_LUGAR_RESIDENCIA.VACTUAL);
}

                        if(CAMBIO_LUGAR_RESIDENCIA.CAMPO == null) {
pstmt_tOracleOutput_23.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_23.setString(7, CAMBIO_LUGAR_RESIDENCIA.CAMPO);
}

                try {
                    nb_line_tOracleOutput_23++;
                    int processedCount_tOracleOutput_23 = pstmt_tOracleOutput_23.executeUpdate();
                    insertedCount_tOracleOutput_23 += processedCount_tOracleOutput_23;
                    rowsToCommitCount_tOracleOutput_23 += processedCount_tOracleOutput_23;
                } catch(java.lang.Exception e_tOracleOutput_23) {
globalMap.put("tOracleOutput_23_ERROR_MESSAGE",e_tOracleOutput_23.getMessage());
                    whetherReject_tOracleOutput_23 = true;
                            System.err.print(e_tOracleOutput_23.getMessage());
                }

 


	tos_count_tOracleOutput_23++;

/**
 * [tOracleOutput_23 main ] stop
 */
	
	/**
	 * [tOracleOutput_23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_23";
	
	

 



/**
 * [tOracleOutput_23 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_23 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_23";
	
	

 



/**
 * [tOracleOutput_23 process_data_end ] stop
 */

} // End of branch "CAMBIO_LUGAR_RESIDENCIA"




// Start of branch "CAMBIO_ESMADSCRITO"
if(CAMBIO_ESMADSCRITO != null) { 



	
	/**
	 * [tOracleOutput_22 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_22";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"CAMBIO_ESMADSCRITO"
						
						);
					}
					



        whetherReject_tOracleOutput_22 = false;
                        pstmt_tOracleOutput_22.setInt(1, CAMBIO_ESMADSCRITO.AFILIADOS_ID);

                        pstmt_tOracleOutput_22.setInt(2, CAMBIO_ESMADSCRITO.PROCESOS_ID);

                        if(CAMBIO_ESMADSCRITO.MOTIVO == null) {
pstmt_tOracleOutput_22.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_22.setString(3, CAMBIO_ESMADSCRITO.MOTIVO);
}

                        pstmt_tOracleOutput_22.setInt(4, CAMBIO_ESMADSCRITO.RNOVEDADES_ID);

                        if(CAMBIO_ESMADSCRITO.VANTERIOR == null) {
pstmt_tOracleOutput_22.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_22.setString(5, CAMBIO_ESMADSCRITO.VANTERIOR);
}

                        if(CAMBIO_ESMADSCRITO.VACTUAL == null) {
pstmt_tOracleOutput_22.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_22.setString(6, CAMBIO_ESMADSCRITO.VACTUAL);
}

                        if(CAMBIO_ESMADSCRITO.CAMPO == null) {
pstmt_tOracleOutput_22.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_22.setString(7, CAMBIO_ESMADSCRITO.CAMPO);
}

                try {
                    nb_line_tOracleOutput_22++;
                    int processedCount_tOracleOutput_22 = pstmt_tOracleOutput_22.executeUpdate();
                    insertedCount_tOracleOutput_22 += processedCount_tOracleOutput_22;
                    rowsToCommitCount_tOracleOutput_22 += processedCount_tOracleOutput_22;
                } catch(java.lang.Exception e_tOracleOutput_22) {
globalMap.put("tOracleOutput_22_ERROR_MESSAGE",e_tOracleOutput_22.getMessage());
                    whetherReject_tOracleOutput_22 = true;
                            System.err.print(e_tOracleOutput_22.getMessage());
                }

 


	tos_count_tOracleOutput_22++;

/**
 * [tOracleOutput_22 main ] stop
 */
	
	/**
	 * [tOracleOutput_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_22";
	
	

 



/**
 * [tOracleOutput_22 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_22";
	
	

 



/**
 * [tOracleOutput_22 process_data_end ] stop
 */

} // End of branch "CAMBIO_ESMADSCRITO"




// Start of branch "CAMBIO_ESTADOS_ID"
if(CAMBIO_ESTADOS_ID != null) { 



	
	/**
	 * [tOracleOutput_21 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_21";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"CAMBIO_ESTADOS_ID"
						
						);
					}
					



        whetherReject_tOracleOutput_21 = false;
                        pstmt_tOracleOutput_21.setInt(1, CAMBIO_ESTADOS_ID.AFILIADOS_ID);

                        pstmt_tOracleOutput_21.setInt(2, CAMBIO_ESTADOS_ID.PROCESOS_ID);

                        if(CAMBIO_ESTADOS_ID.MOTIVO == null) {
pstmt_tOracleOutput_21.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_21.setString(3, CAMBIO_ESTADOS_ID.MOTIVO);
}

                        pstmt_tOracleOutput_21.setInt(4, CAMBIO_ESTADOS_ID.RNOVEDADES_ID);

                        if(CAMBIO_ESTADOS_ID.VANTERIOR == null) {
pstmt_tOracleOutput_21.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_21.setString(5, CAMBIO_ESTADOS_ID.VANTERIOR);
}

                        if(CAMBIO_ESTADOS_ID.VACTUAL == null) {
pstmt_tOracleOutput_21.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_21.setString(6, CAMBIO_ESTADOS_ID.VACTUAL);
}

                        if(CAMBIO_ESTADOS_ID.CAMPO == null) {
pstmt_tOracleOutput_21.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_21.setString(7, CAMBIO_ESTADOS_ID.CAMPO);
}

                try {
                    nb_line_tOracleOutput_21++;
                    int processedCount_tOracleOutput_21 = pstmt_tOracleOutput_21.executeUpdate();
                    insertedCount_tOracleOutput_21 += processedCount_tOracleOutput_21;
                    rowsToCommitCount_tOracleOutput_21 += processedCount_tOracleOutput_21;
                } catch(java.lang.Exception e_tOracleOutput_21) {
globalMap.put("tOracleOutput_21_ERROR_MESSAGE",e_tOracleOutput_21.getMessage());
                    whetherReject_tOracleOutput_21 = true;
                            System.err.print(e_tOracleOutput_21.getMessage());
                }

 


	tos_count_tOracleOutput_21++;

/**
 * [tOracleOutput_21 main ] stop
 */
	
	/**
	 * [tOracleOutput_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_21";
	
	

 



/**
 * [tOracleOutput_21 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_21";
	
	

 



/**
 * [tOracleOutput_21 process_data_end ] stop
 */

} // End of branch "CAMBIO_ESTADOS_ID"




// Start of branch "HESTADOS"
if(HESTADOS != null) { 



	
	/**
	 * [tOracleOutput_31 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_31";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"HESTADOS"
						
						);
					}
					



        whetherReject_tOracleOutput_31 = false;
                        if(HESTADOS.USUARIOS_ID == null) {
pstmt_tOracleOutput_31.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_31.setInt(1, HESTADOS.USUARIOS_ID);
}

                        pstmt_tOracleOutput_31.setInt(2, HESTADOS.AFILIADOS_ID);

                        pstmt_tOracleOutput_31.setInt(3, HESTADOS.ESTADOS_ID);

                        if(HESTADOS.MOTIVOSESTADO_ID == null) {
pstmt_tOracleOutput_31.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_31.setInt(4, HESTADOS.MOTIVOSESTADO_ID);
}

                        if(HESTADOS.FECHA != null) {
pstmt_tOracleOutput_31.setObject(5, new java.sql.Timestamp(HESTADOS.FECHA.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_31.setNull(5, java.sql.Types.DATE);
}

                try {
                    nb_line_tOracleOutput_31++;
                    int processedCount_tOracleOutput_31 = pstmt_tOracleOutput_31.executeUpdate();
                    insertedCount_tOracleOutput_31 += processedCount_tOracleOutput_31;
                    rowsToCommitCount_tOracleOutput_31 += processedCount_tOracleOutput_31;
                } catch(java.lang.Exception e_tOracleOutput_31) {
globalMap.put("tOracleOutput_31_ERROR_MESSAGE",e_tOracleOutput_31.getMessage());
                    whetherReject_tOracleOutput_31 = true;
                            System.err.print(e_tOracleOutput_31.getMessage());
                }

 


	tos_count_tOracleOutput_31++;

/**
 * [tOracleOutput_31 main ] stop
 */
	
	/**
	 * [tOracleOutput_31 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_31";
	
	

 



/**
 * [tOracleOutput_31 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_31 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_31";
	
	

 



/**
 * [tOracleOutput_31 process_data_end ] stop
 */

} // End of branch "HESTADOS"




// Start of branch "ENTIDAD_APORTANTE"
if(ENTIDAD_APORTANTE != null) { 



	
	/**
	 * [tOracleOutput_32 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_32";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"ENTIDAD_APORTANTE"
						
						);
					}
					



        whetherReject_tOracleOutput_32 = false;
                    pstmt_tOracleOutput_32.setInt(1, ENTIDAD_APORTANTE.AFILIADOS_ID);

                    pstmt_tOracleOutput_32.setInt(2, ENTIDAD_APORTANTE.ENTAPORTANTES_ID);

                    if(ENTIDAD_APORTANTE.GRDMILITARES_ID == null) {
pstmt_tOracleOutput_32.setNull(3, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_32.setInt(3, ENTIDAD_APORTANTE.GRDMILITARES_ID);
}

                    if(ENTIDAD_APORTANTE.FUERZAS_ID == null) {
pstmt_tOracleOutput_32.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_32.setInt(4, ENTIDAD_APORTANTE.FUERZAS_ID);
}

                    if(ENTIDAD_APORTANTE.UMILITARES_ID == null) {
pstmt_tOracleOutput_32.setNull(5, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_32.setInt(5, ENTIDAD_APORTANTE.UMILITARES_ID);
}

                    pstmt_tOracleOutput_32.setInt(6, ENTIDAD_APORTANTE.PRINCIPAL);

                    if(ENTIDAD_APORTANTE.ESTADO == null) {
pstmt_tOracleOutput_32.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_32.setString(7, ENTIDAD_APORTANTE.ESTADO);
}

                    if(ENTIDAD_APORTANTE.TVINCULACIONES_ID == null) {
pstmt_tOracleOutput_32.setNull(8, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_32.setInt(8, ENTIDAD_APORTANTE.TVINCULACIONES_ID);
}

                    if(ENTIDAD_APORTANTE.FECHA_INGRESO != null) {
pstmt_tOracleOutput_32.setObject(9, new java.sql.Timestamp(ENTIDAD_APORTANTE.FECHA_INGRESO.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_32.setNull(9, java.sql.Types.DATE);
}

                    if(ENTIDAD_APORTANTE.TREGIMEN_ID == null) {
pstmt_tOracleOutput_32.setNull(10, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_32.setInt(10, ENTIDAD_APORTANTE.TREGIMEN_ID);
}


                    pstmt_tOracleOutput_32.setInt(11 + count_tOracleOutput_32, ENTIDAD_APORTANTE.ID);

                try {
                    nb_line_tOracleOutput_32++;
                    int processedCount_tOracleOutput_32 = pstmt_tOracleOutput_32.executeUpdate();
                    updatedCount_tOracleOutput_32 += processedCount_tOracleOutput_32;
                    rowsToCommitCount_tOracleOutput_32 += processedCount_tOracleOutput_32;
                } catch(java.lang.Exception e_tOracleOutput_32) {
globalMap.put("tOracleOutput_32_ERROR_MESSAGE",e_tOracleOutput_32.getMessage());
                    whetherReject_tOracleOutput_32 = true;
                            System.err.print(e_tOracleOutput_32.getMessage());
                }

 


	tos_count_tOracleOutput_32++;

/**
 * [tOracleOutput_32 main ] stop
 */
	
	/**
	 * [tOracleOutput_32 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_32";
	
	

 



/**
 * [tOracleOutput_32 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_32 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_32";
	
	

 



/**
 * [tOracleOutput_32 process_data_end ] stop
 */

} // End of branch "ENTIDAD_APORTANTE"




// Start of branch "CAMBIOS_AFILIACION"
if(CAMBIOS_AFILIACION != null) { 



	
	/**
	 * [tOracleOutput_33 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_33";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"CAMBIOS_AFILIACION"
						
						);
					}
					



        whetherReject_tOracleOutput_33 = false;
                    if(CAMBIOS_AFILIACION.FECHA_CADUCIDAD != null) {
pstmt_tOracleOutput_33.setObject(1, new java.sql.Timestamp(CAMBIOS_AFILIACION.FECHA_CADUCIDAD.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_33.setNull(1, java.sql.Types.DATE);
}

                    if(CAMBIOS_AFILIACION.PLANAFILIACIONES_ID == null) {
pstmt_tOracleOutput_33.setNull(2, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_33.setInt(2, CAMBIOS_AFILIACION.PLANAFILIACIONES_ID);
}

                    if(CAMBIOS_AFILIACION.OBSERVACIONES == null) {
pstmt_tOracleOutput_33.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_33.setString(3, CAMBIOS_AFILIACION.OBSERVACIONES);
}


                    if(CAMBIOS_AFILIACION.ID == null) {
pstmt_tOracleOutput_33.setNull(4 + count_tOracleOutput_33, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_33.setInt(4 + count_tOracleOutput_33, CAMBIOS_AFILIACION.ID);
}

                try {
                    nb_line_tOracleOutput_33++;
                    int processedCount_tOracleOutput_33 = pstmt_tOracleOutput_33.executeUpdate();
                    updatedCount_tOracleOutput_33 += processedCount_tOracleOutput_33;
                    rowsToCommitCount_tOracleOutput_33 += processedCount_tOracleOutput_33;
                } catch(java.lang.Exception e_tOracleOutput_33) {
globalMap.put("tOracleOutput_33_ERROR_MESSAGE",e_tOracleOutput_33.getMessage());
                    whetherReject_tOracleOutput_33 = true;
                            System.err.print(e_tOracleOutput_33.getMessage());
                }

 


	tos_count_tOracleOutput_33++;

/**
 * [tOracleOutput_33 main ] stop
 */
	
	/**
	 * [tOracleOutput_33 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_33";
	
	

 



/**
 * [tOracleOutput_33 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_33 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_33";
	
	

 



/**
 * [tOracleOutput_33 process_data_end ] stop
 */

} // End of branch "CAMBIOS_AFILIACION"




// Start of branch "CAMBIO_FECHA_CADUCIDAD"
if(CAMBIO_FECHA_CADUCIDAD != null) { 



	
	/**
	 * [tOracleOutput_38 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_38";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"CAMBIO_FECHA_CADUCIDAD"
						
						);
					}
					



        whetherReject_tOracleOutput_38 = false;
                        pstmt_tOracleOutput_38.setInt(1, CAMBIO_FECHA_CADUCIDAD.AFILIADOS_ID);

                        pstmt_tOracleOutput_38.setInt(2, CAMBIO_FECHA_CADUCIDAD.PROCESOS_ID);

                        if(CAMBIO_FECHA_CADUCIDAD.MOTIVO == null) {
pstmt_tOracleOutput_38.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_38.setString(3, CAMBIO_FECHA_CADUCIDAD.MOTIVO);
}

                        pstmt_tOracleOutput_38.setInt(4, CAMBIO_FECHA_CADUCIDAD.RNOVEDADES_ID);

                        if(CAMBIO_FECHA_CADUCIDAD.VANTERIOR == null) {
pstmt_tOracleOutput_38.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_38.setString(5, CAMBIO_FECHA_CADUCIDAD.VANTERIOR);
}

                        if(CAMBIO_FECHA_CADUCIDAD.VACTUAL == null) {
pstmt_tOracleOutput_38.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_38.setString(6, CAMBIO_FECHA_CADUCIDAD.VACTUAL);
}

                        if(CAMBIO_FECHA_CADUCIDAD.CAMPO == null) {
pstmt_tOracleOutput_38.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_38.setString(7, CAMBIO_FECHA_CADUCIDAD.CAMPO);
}

                try {
                    nb_line_tOracleOutput_38++;
                    int processedCount_tOracleOutput_38 = pstmt_tOracleOutput_38.executeUpdate();
                    insertedCount_tOracleOutput_38 += processedCount_tOracleOutput_38;
                    rowsToCommitCount_tOracleOutput_38 += processedCount_tOracleOutput_38;
                } catch(java.lang.Exception e_tOracleOutput_38) {
globalMap.put("tOracleOutput_38_ERROR_MESSAGE",e_tOracleOutput_38.getMessage());
                    whetherReject_tOracleOutput_38 = true;
                            System.err.print(e_tOracleOutput_38.getMessage());
                }

 


	tos_count_tOracleOutput_38++;

/**
 * [tOracleOutput_38 main ] stop
 */
	
	/**
	 * [tOracleOutput_38 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_38";
	
	

 



/**
 * [tOracleOutput_38 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_38 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_38";
	
	

 



/**
 * [tOracleOutput_38 process_data_end ] stop
 */

} // End of branch "CAMBIO_FECHA_CADUCIDAD"




// Start of branch "CAMBIO_ENTIDAD_PRINCIPAL"
if(CAMBIO_ENTIDAD_PRINCIPAL != null) { 



	
	/**
	 * [tOracleSP_9 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"CAMBIO_ENTIDAD_PRINCIPAL"
						
						);
					}
					

			// code for the argument 1 (afiliado_id_) of type 'IN AUTOMAPPING'
                        statement_tOracleSP_9.setInt(1, CAMBIO_ENTIDAD_PRINCIPAL.afiliado_id_);
			// code for the argument 2 (entidad_id_) of type 'IN AUTOMAPPING'
                        statement_tOracleSP_9.setInt(2, CAMBIO_ENTIDAD_PRINCIPAL.entidad_id_);
		statement_tOracleSP_9.execute();
		

 


	tos_count_tOracleSP_9++;

/**
 * [tOracleSP_9 main ] stop
 */
	
	/**
	 * [tOracleSP_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_9";
	
	

 



/**
 * [tOracleSP_9 process_data_begin ] stop
 */
	
	/**
	 * [tOracleSP_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_9";
	
	

 



/**
 * [tOracleSP_9 process_data_end ] stop
 */

} // End of branch "CAMBIO_ENTIDAD_PRINCIPAL"




// Start of branch "CAMBIO_PLAN_AFILIACION"
if(CAMBIO_PLAN_AFILIACION != null) { 



	
	/**
	 * [tOracleOutput_39 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_39";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"CAMBIO_PLAN_AFILIACION"
						
						);
					}
					



        whetherReject_tOracleOutput_39 = false;
                        pstmt_tOracleOutput_39.setInt(1, CAMBIO_PLAN_AFILIACION.AFILIADOS_ID);

                        pstmt_tOracleOutput_39.setInt(2, CAMBIO_PLAN_AFILIACION.PROCESOS_ID);

                        if(CAMBIO_PLAN_AFILIACION.MOTIVO == null) {
pstmt_tOracleOutput_39.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_39.setString(3, CAMBIO_PLAN_AFILIACION.MOTIVO);
}

                        pstmt_tOracleOutput_39.setInt(4, CAMBIO_PLAN_AFILIACION.RNOVEDADES_ID);

                        if(CAMBIO_PLAN_AFILIACION.VANTERIOR == null) {
pstmt_tOracleOutput_39.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_39.setString(5, CAMBIO_PLAN_AFILIACION.VANTERIOR);
}

                        if(CAMBIO_PLAN_AFILIACION.VACTUAL == null) {
pstmt_tOracleOutput_39.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_39.setString(6, CAMBIO_PLAN_AFILIACION.VACTUAL);
}

                        if(CAMBIO_PLAN_AFILIACION.CAMPO == null) {
pstmt_tOracleOutput_39.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_39.setString(7, CAMBIO_PLAN_AFILIACION.CAMPO);
}

                try {
                    nb_line_tOracleOutput_39++;
                    int processedCount_tOracleOutput_39 = pstmt_tOracleOutput_39.executeUpdate();
                    insertedCount_tOracleOutput_39 += processedCount_tOracleOutput_39;
                    rowsToCommitCount_tOracleOutput_39 += processedCount_tOracleOutput_39;
                } catch(java.lang.Exception e_tOracleOutput_39) {
globalMap.put("tOracleOutput_39_ERROR_MESSAGE",e_tOracleOutput_39.getMessage());
                    whetherReject_tOracleOutput_39 = true;
                            System.err.print(e_tOracleOutput_39.getMessage());
                }

 


	tos_count_tOracleOutput_39++;

/**
 * [tOracleOutput_39 main ] stop
 */
	
	/**
	 * [tOracleOutput_39 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_39";
	
	

 



/**
 * [tOracleOutput_39 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_39 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_39";
	
	

 



/**
 * [tOracleOutput_39 process_data_end ] stop
 */

} // End of branch "CAMBIO_PLAN_AFILIACION"




// Start of branch "CAMBIO_FECHA_DEFUNCION"
if(CAMBIO_FECHA_DEFUNCION != null) { 



	
	/**
	 * [tOracleOutput_40 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_40";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"CAMBIO_FECHA_DEFUNCION"
						
						);
					}
					



        whetherReject_tOracleOutput_40 = false;
                        pstmt_tOracleOutput_40.setInt(1, CAMBIO_FECHA_DEFUNCION.AFILIADOS_ID);

                        pstmt_tOracleOutput_40.setInt(2, CAMBIO_FECHA_DEFUNCION.PROCESOS_ID);

                        if(CAMBIO_FECHA_DEFUNCION.MOTIVO == null) {
pstmt_tOracleOutput_40.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_40.setString(3, CAMBIO_FECHA_DEFUNCION.MOTIVO);
}

                        pstmt_tOracleOutput_40.setInt(4, CAMBIO_FECHA_DEFUNCION.RNOVEDADES_ID);

                        if(CAMBIO_FECHA_DEFUNCION.VANTERIOR == null) {
pstmt_tOracleOutput_40.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_40.setString(5, CAMBIO_FECHA_DEFUNCION.VANTERIOR);
}

                        if(CAMBIO_FECHA_DEFUNCION.VACTUAL == null) {
pstmt_tOracleOutput_40.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_40.setString(6, CAMBIO_FECHA_DEFUNCION.VACTUAL);
}

                        if(CAMBIO_FECHA_DEFUNCION.CAMPO == null) {
pstmt_tOracleOutput_40.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_40.setString(7, CAMBIO_FECHA_DEFUNCION.CAMPO);
}

                try {
                    nb_line_tOracleOutput_40++;
                    int processedCount_tOracleOutput_40 = pstmt_tOracleOutput_40.executeUpdate();
                    insertedCount_tOracleOutput_40 += processedCount_tOracleOutput_40;
                    rowsToCommitCount_tOracleOutput_40 += processedCount_tOracleOutput_40;
                } catch(java.lang.Exception e_tOracleOutput_40) {
globalMap.put("tOracleOutput_40_ERROR_MESSAGE",e_tOracleOutput_40.getMessage());
                    whetherReject_tOracleOutput_40 = true;
                            System.err.print(e_tOracleOutput_40.getMessage());
                }

 


	tos_count_tOracleOutput_40++;

/**
 * [tOracleOutput_40 main ] stop
 */
	
	/**
	 * [tOracleOutput_40 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_40";
	
	

 



/**
 * [tOracleOutput_40 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_40 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_40";
	
	

 



/**
 * [tOracleOutput_40 process_data_end ] stop
 */

} // End of branch "CAMBIO_FECHA_DEFUNCION"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_34 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_34";
	
	

 



/**
 * [tOracleInput_34 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_34 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_34";
	
	

}
}finally{
	if (rs_tOracleInput_34 != null) {
		rs_tOracleInput_34.close();
	}
	if (stmt_tOracleInput_34 != null) {
		stmt_tOracleInput_34.close();
	}
}

globalMap.put("tOracleInput_34_NB_LINE",nb_line_tOracleInput_34);
 

ok_Hash.put("tOracleInput_34", true);
end_Hash.put("tOracleInput_34", System.currentTimeMillis());




/**
 * [tOracleInput_34 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row120 != null) {
						tHash_Lookup_row120.endGet();
					}
					globalMap.remove( "tHash_Lookup_row120" );

					
					
				
					if(tHash_Lookup_row121 != null) {
						tHash_Lookup_row121.endGet();
					}
					globalMap.remove( "tHash_Lookup_row121" );

					
					
				
					if(tHash_Lookup_row122 != null) {
						tHash_Lookup_row122.endGet();
					}
					globalMap.remove( "tHash_Lookup_row122" );

					
					
				
					if(tHash_Lookup_row123 != null) {
						tHash_Lookup_row123.endGet();
					}
					globalMap.remove( "tHash_Lookup_row123" );

					
					
				
					if(tHash_Lookup_row124 != null) {
						tHash_Lookup_row124.endGet();
					}
					globalMap.remove( "tHash_Lookup_row124" );

					
					
				
					if(tHash_Lookup_row125 != null) {
						tHash_Lookup_row125.endGet();
					}
					globalMap.remove( "tHash_Lookup_row125" );

					
					
				
					if(tHash_Lookup_row128 != null) {
						tHash_Lookup_row128.endGet();
					}
					globalMap.remove( "tHash_Lookup_row128" );

					
					
				
					if(tHash_Lookup_row129 != null) {
						tHash_Lookup_row129.endGet();
					}
					globalMap.remove( "tHash_Lookup_row129" );

					
					
				
					if(tHash_Lookup_row150 != null) {
						tHash_Lookup_row150.endGet();
					}
					globalMap.remove( "tHash_Lookup_row150" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row44");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tOracleOutput_8 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_8";
	
	
	



	
        if(pstmt_tOracleOutput_8 != null) {
			
				pstmt_tOracleOutput_8.close();
				resourceMap.remove("pstmt_tOracleOutput_8");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_8", true);

	
	nb_line_deleted_tOracleOutput_8=nb_line_deleted_tOracleOutput_8+ deletedCount_tOracleOutput_8;
	nb_line_update_tOracleOutput_8=nb_line_update_tOracleOutput_8 + updatedCount_tOracleOutput_8;
	nb_line_inserted_tOracleOutput_8=nb_line_inserted_tOracleOutput_8 + insertedCount_tOracleOutput_8;
	nb_line_rejected_tOracleOutput_8=nb_line_rejected_tOracleOutput_8 + rejectedCount_tOracleOutput_8;
	
        globalMap.put("tOracleOutput_8_NB_LINE",nb_line_tOracleOutput_8);
        globalMap.put("tOracleOutput_8_NB_LINE_UPDATED",nb_line_update_tOracleOutput_8);
        globalMap.put("tOracleOutput_8_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_8);
        globalMap.put("tOracleOutput_8_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_8);
        globalMap.put("tOracleOutput_8_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_8);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"ACTUALIZAR_PERSONAS");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_8", true);
end_Hash.put("tOracleOutput_8", System.currentTimeMillis());




/**
 * [tOracleOutput_8 end ] stop
 */




	
	/**
	 * [tOracleOutput_25 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_25";
	
	
	



	
        if(pstmt_tOracleOutput_25 != null) {
			
				pstmt_tOracleOutput_25.close();
				resourceMap.remove("pstmt_tOracleOutput_25");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_25", true);

	
	nb_line_deleted_tOracleOutput_25=nb_line_deleted_tOracleOutput_25+ deletedCount_tOracleOutput_25;
	nb_line_update_tOracleOutput_25=nb_line_update_tOracleOutput_25 + updatedCount_tOracleOutput_25;
	nb_line_inserted_tOracleOutput_25=nb_line_inserted_tOracleOutput_25 + insertedCount_tOracleOutput_25;
	nb_line_rejected_tOracleOutput_25=nb_line_rejected_tOracleOutput_25 + rejectedCount_tOracleOutput_25;
	
        globalMap.put("tOracleOutput_25_NB_LINE",nb_line_tOracleOutput_25);
        globalMap.put("tOracleOutput_25_NB_LINE_UPDATED",nb_line_update_tOracleOutput_25);
        globalMap.put("tOracleOutput_25_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_25);
        globalMap.put("tOracleOutput_25_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_25);
        globalMap.put("tOracleOutput_25_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_25);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"CAMBIO_TDOCUMENTOS_ID");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_25", true);
end_Hash.put("tOracleOutput_25", System.currentTimeMillis());




/**
 * [tOracleOutput_25 end ] stop
 */




	
	/**
	 * [tOracleOutput_26 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_26";
	
	
	



	
        if(pstmt_tOracleOutput_26 != null) {
			
				pstmt_tOracleOutput_26.close();
				resourceMap.remove("pstmt_tOracleOutput_26");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_26", true);

	
	nb_line_deleted_tOracleOutput_26=nb_line_deleted_tOracleOutput_26+ deletedCount_tOracleOutput_26;
	nb_line_update_tOracleOutput_26=nb_line_update_tOracleOutput_26 + updatedCount_tOracleOutput_26;
	nb_line_inserted_tOracleOutput_26=nb_line_inserted_tOracleOutput_26 + insertedCount_tOracleOutput_26;
	nb_line_rejected_tOracleOutput_26=nb_line_rejected_tOracleOutput_26 + rejectedCount_tOracleOutput_26;
	
        globalMap.put("tOracleOutput_26_NB_LINE",nb_line_tOracleOutput_26);
        globalMap.put("tOracleOutput_26_NB_LINE_UPDATED",nb_line_update_tOracleOutput_26);
        globalMap.put("tOracleOutput_26_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_26);
        globalMap.put("tOracleOutput_26_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_26);
        globalMap.put("tOracleOutput_26_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_26);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"CAMBIO_DOCUMENTO");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_26", true);
end_Hash.put("tOracleOutput_26", System.currentTimeMillis());




/**
 * [tOracleOutput_26 end ] stop
 */




	
	/**
	 * [tOracleOutput_27 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_27";
	
	
	



	
        if(pstmt_tOracleOutput_27 != null) {
			
				pstmt_tOracleOutput_27.close();
				resourceMap.remove("pstmt_tOracleOutput_27");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_27", true);

	
	nb_line_deleted_tOracleOutput_27=nb_line_deleted_tOracleOutput_27+ deletedCount_tOracleOutput_27;
	nb_line_update_tOracleOutput_27=nb_line_update_tOracleOutput_27 + updatedCount_tOracleOutput_27;
	nb_line_inserted_tOracleOutput_27=nb_line_inserted_tOracleOutput_27 + insertedCount_tOracleOutput_27;
	nb_line_rejected_tOracleOutput_27=nb_line_rejected_tOracleOutput_27 + rejectedCount_tOracleOutput_27;
	
        globalMap.put("tOracleOutput_27_NB_LINE",nb_line_tOracleOutput_27);
        globalMap.put("tOracleOutput_27_NB_LINE_UPDATED",nb_line_update_tOracleOutput_27);
        globalMap.put("tOracleOutput_27_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_27);
        globalMap.put("tOracleOutput_27_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_27);
        globalMap.put("tOracleOutput_27_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_27);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"CAMBIO_PRIMER_NOMBRE");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_27", true);
end_Hash.put("tOracleOutput_27", System.currentTimeMillis());




/**
 * [tOracleOutput_27 end ] stop
 */




	
	/**
	 * [tOracleOutput_28 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_28";
	
	
	



	
        if(pstmt_tOracleOutput_28 != null) {
			
				pstmt_tOracleOutput_28.close();
				resourceMap.remove("pstmt_tOracleOutput_28");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_28", true);

	
	nb_line_deleted_tOracleOutput_28=nb_line_deleted_tOracleOutput_28+ deletedCount_tOracleOutput_28;
	nb_line_update_tOracleOutput_28=nb_line_update_tOracleOutput_28 + updatedCount_tOracleOutput_28;
	nb_line_inserted_tOracleOutput_28=nb_line_inserted_tOracleOutput_28 + insertedCount_tOracleOutput_28;
	nb_line_rejected_tOracleOutput_28=nb_line_rejected_tOracleOutput_28 + rejectedCount_tOracleOutput_28;
	
        globalMap.put("tOracleOutput_28_NB_LINE",nb_line_tOracleOutput_28);
        globalMap.put("tOracleOutput_28_NB_LINE_UPDATED",nb_line_update_tOracleOutput_28);
        globalMap.put("tOracleOutput_28_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_28);
        globalMap.put("tOracleOutput_28_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_28);
        globalMap.put("tOracleOutput_28_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_28);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"CAMBIO_SEGUNDO_NOMBRE");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_28", true);
end_Hash.put("tOracleOutput_28", System.currentTimeMillis());




/**
 * [tOracleOutput_28 end ] stop
 */




	
	/**
	 * [tOracleOutput_9 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_9";
	
	
	



	
        if(pstmt_tOracleOutput_9 != null) {
			
				pstmt_tOracleOutput_9.close();
				resourceMap.remove("pstmt_tOracleOutput_9");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_9", true);

	
	nb_line_deleted_tOracleOutput_9=nb_line_deleted_tOracleOutput_9+ deletedCount_tOracleOutput_9;
	nb_line_update_tOracleOutput_9=nb_line_update_tOracleOutput_9 + updatedCount_tOracleOutput_9;
	nb_line_inserted_tOracleOutput_9=nb_line_inserted_tOracleOutput_9 + insertedCount_tOracleOutput_9;
	nb_line_rejected_tOracleOutput_9=nb_line_rejected_tOracleOutput_9 + rejectedCount_tOracleOutput_9;
	
        globalMap.put("tOracleOutput_9_NB_LINE",nb_line_tOracleOutput_9);
        globalMap.put("tOracleOutput_9_NB_LINE_UPDATED",nb_line_update_tOracleOutput_9);
        globalMap.put("tOracleOutput_9_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_9);
        globalMap.put("tOracleOutput_9_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_9);
        globalMap.put("tOracleOutput_9_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_9);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"CAMBIO_PRIMER_APELLIDO");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_9", true);
end_Hash.put("tOracleOutput_9", System.currentTimeMillis());




/**
 * [tOracleOutput_9 end ] stop
 */




	
	/**
	 * [tOracleOutput_20 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_20";
	
	
	



	
        if(pstmt_tOracleOutput_20 != null) {
			
				pstmt_tOracleOutput_20.close();
				resourceMap.remove("pstmt_tOracleOutput_20");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_20", true);

	
	nb_line_deleted_tOracleOutput_20=nb_line_deleted_tOracleOutput_20+ deletedCount_tOracleOutput_20;
	nb_line_update_tOracleOutput_20=nb_line_update_tOracleOutput_20 + updatedCount_tOracleOutput_20;
	nb_line_inserted_tOracleOutput_20=nb_line_inserted_tOracleOutput_20 + insertedCount_tOracleOutput_20;
	nb_line_rejected_tOracleOutput_20=nb_line_rejected_tOracleOutput_20 + rejectedCount_tOracleOutput_20;
	
        globalMap.put("tOracleOutput_20_NB_LINE",nb_line_tOracleOutput_20);
        globalMap.put("tOracleOutput_20_NB_LINE_UPDATED",nb_line_update_tOracleOutput_20);
        globalMap.put("tOracleOutput_20_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_20);
        globalMap.put("tOracleOutput_20_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_20);
        globalMap.put("tOracleOutput_20_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_20);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"CAMBIO_SEGUNDO_APELLIDO");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_20", true);
end_Hash.put("tOracleOutput_20", System.currentTimeMillis());




/**
 * [tOracleOutput_20 end ] stop
 */




	
	/**
	 * [tOracleOutput_29 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_29";
	
	
	



	
        if(pstmt_tOracleOutput_29 != null) {
			
				pstmt_tOracleOutput_29.close();
				resourceMap.remove("pstmt_tOracleOutput_29");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_29", true);

	
	nb_line_deleted_tOracleOutput_29=nb_line_deleted_tOracleOutput_29+ deletedCount_tOracleOutput_29;
	nb_line_update_tOracleOutput_29=nb_line_update_tOracleOutput_29 + updatedCount_tOracleOutput_29;
	nb_line_inserted_tOracleOutput_29=nb_line_inserted_tOracleOutput_29 + insertedCount_tOracleOutput_29;
	nb_line_rejected_tOracleOutput_29=nb_line_rejected_tOracleOutput_29 + rejectedCount_tOracleOutput_29;
	
        globalMap.put("tOracleOutput_29_NB_LINE",nb_line_tOracleOutput_29);
        globalMap.put("tOracleOutput_29_NB_LINE_UPDATED",nb_line_update_tOracleOutput_29);
        globalMap.put("tOracleOutput_29_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_29);
        globalMap.put("tOracleOutput_29_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_29);
        globalMap.put("tOracleOutput_29_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_29);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"CAMBIO_FECHA_NACIMIENTO");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_29", true);
end_Hash.put("tOracleOutput_29", System.currentTimeMillis());




/**
 * [tOracleOutput_29 end ] stop
 */




	
	/**
	 * [tOracleOutput_30 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_30";
	
	
	



	
        if(pstmt_tOracleOutput_30 != null) {
			
				pstmt_tOracleOutput_30.close();
				resourceMap.remove("pstmt_tOracleOutput_30");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_30", true);

	
	nb_line_deleted_tOracleOutput_30=nb_line_deleted_tOracleOutput_30+ deletedCount_tOracleOutput_30;
	nb_line_update_tOracleOutput_30=nb_line_update_tOracleOutput_30 + updatedCount_tOracleOutput_30;
	nb_line_inserted_tOracleOutput_30=nb_line_inserted_tOracleOutput_30 + insertedCount_tOracleOutput_30;
	nb_line_rejected_tOracleOutput_30=nb_line_rejected_tOracleOutput_30 + rejectedCount_tOracleOutput_30;
	
        globalMap.put("tOracleOutput_30_NB_LINE",nb_line_tOracleOutput_30);
        globalMap.put("tOracleOutput_30_NB_LINE_UPDATED",nb_line_update_tOracleOutput_30);
        globalMap.put("tOracleOutput_30_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_30);
        globalMap.put("tOracleOutput_30_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_30);
        globalMap.put("tOracleOutput_30_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_30);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"CAMBIO_SEXO_ID");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_30", true);
end_Hash.put("tOracleOutput_30", System.currentTimeMillis());




/**
 * [tOracleOutput_30 end ] stop
 */




	
	/**
	 * [tOracleOutput_24 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_24";
	
	
	



	
        if(pstmt_tOracleOutput_24 != null) {
			
				pstmt_tOracleOutput_24.close();
				resourceMap.remove("pstmt_tOracleOutput_24");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_24", true);

	
	nb_line_deleted_tOracleOutput_24=nb_line_deleted_tOracleOutput_24+ deletedCount_tOracleOutput_24;
	nb_line_update_tOracleOutput_24=nb_line_update_tOracleOutput_24 + updatedCount_tOracleOutput_24;
	nb_line_inserted_tOracleOutput_24=nb_line_inserted_tOracleOutput_24 + insertedCount_tOracleOutput_24;
	nb_line_rejected_tOracleOutput_24=nb_line_rejected_tOracleOutput_24 + rejectedCount_tOracleOutput_24;
	
        globalMap.put("tOracleOutput_24_NB_LINE",nb_line_tOracleOutput_24);
        globalMap.put("tOracleOutput_24_NB_LINE_UPDATED",nb_line_update_tOracleOutput_24);
        globalMap.put("tOracleOutput_24_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_24);
        globalMap.put("tOracleOutput_24_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_24);
        globalMap.put("tOracleOutput_24_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_24);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"CAMBIO_DIRECCION");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_24", true);
end_Hash.put("tOracleOutput_24", System.currentTimeMillis());




/**
 * [tOracleOutput_24 end ] stop
 */




	
	/**
	 * [tOracleOutput_23 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_23";
	
	
	



	
        if(pstmt_tOracleOutput_23 != null) {
			
				pstmt_tOracleOutput_23.close();
				resourceMap.remove("pstmt_tOracleOutput_23");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_23", true);

	
	nb_line_deleted_tOracleOutput_23=nb_line_deleted_tOracleOutput_23+ deletedCount_tOracleOutput_23;
	nb_line_update_tOracleOutput_23=nb_line_update_tOracleOutput_23 + updatedCount_tOracleOutput_23;
	nb_line_inserted_tOracleOutput_23=nb_line_inserted_tOracleOutput_23 + insertedCount_tOracleOutput_23;
	nb_line_rejected_tOracleOutput_23=nb_line_rejected_tOracleOutput_23 + rejectedCount_tOracleOutput_23;
	
        globalMap.put("tOracleOutput_23_NB_LINE",nb_line_tOracleOutput_23);
        globalMap.put("tOracleOutput_23_NB_LINE_UPDATED",nb_line_update_tOracleOutput_23);
        globalMap.put("tOracleOutput_23_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_23);
        globalMap.put("tOracleOutput_23_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_23);
        globalMap.put("tOracleOutput_23_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_23);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"CAMBIO_LUGAR_RESIDENCIA");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_23", true);
end_Hash.put("tOracleOutput_23", System.currentTimeMillis());




/**
 * [tOracleOutput_23 end ] stop
 */




	
	/**
	 * [tOracleOutput_22 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_22";
	
	
	



	
        if(pstmt_tOracleOutput_22 != null) {
			
				pstmt_tOracleOutput_22.close();
				resourceMap.remove("pstmt_tOracleOutput_22");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_22", true);

	
	nb_line_deleted_tOracleOutput_22=nb_line_deleted_tOracleOutput_22+ deletedCount_tOracleOutput_22;
	nb_line_update_tOracleOutput_22=nb_line_update_tOracleOutput_22 + updatedCount_tOracleOutput_22;
	nb_line_inserted_tOracleOutput_22=nb_line_inserted_tOracleOutput_22 + insertedCount_tOracleOutput_22;
	nb_line_rejected_tOracleOutput_22=nb_line_rejected_tOracleOutput_22 + rejectedCount_tOracleOutput_22;
	
        globalMap.put("tOracleOutput_22_NB_LINE",nb_line_tOracleOutput_22);
        globalMap.put("tOracleOutput_22_NB_LINE_UPDATED",nb_line_update_tOracleOutput_22);
        globalMap.put("tOracleOutput_22_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_22);
        globalMap.put("tOracleOutput_22_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_22);
        globalMap.put("tOracleOutput_22_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_22);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"CAMBIO_ESMADSCRITO");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_22", true);
end_Hash.put("tOracleOutput_22", System.currentTimeMillis());




/**
 * [tOracleOutput_22 end ] stop
 */




	
	/**
	 * [tOracleOutput_21 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_21";
	
	
	



	
        if(pstmt_tOracleOutput_21 != null) {
			
				pstmt_tOracleOutput_21.close();
				resourceMap.remove("pstmt_tOracleOutput_21");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_21", true);

	
	nb_line_deleted_tOracleOutput_21=nb_line_deleted_tOracleOutput_21+ deletedCount_tOracleOutput_21;
	nb_line_update_tOracleOutput_21=nb_line_update_tOracleOutput_21 + updatedCount_tOracleOutput_21;
	nb_line_inserted_tOracleOutput_21=nb_line_inserted_tOracleOutput_21 + insertedCount_tOracleOutput_21;
	nb_line_rejected_tOracleOutput_21=nb_line_rejected_tOracleOutput_21 + rejectedCount_tOracleOutput_21;
	
        globalMap.put("tOracleOutput_21_NB_LINE",nb_line_tOracleOutput_21);
        globalMap.put("tOracleOutput_21_NB_LINE_UPDATED",nb_line_update_tOracleOutput_21);
        globalMap.put("tOracleOutput_21_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_21);
        globalMap.put("tOracleOutput_21_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_21);
        globalMap.put("tOracleOutput_21_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_21);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"CAMBIO_ESTADOS_ID");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_21", true);
end_Hash.put("tOracleOutput_21", System.currentTimeMillis());




/**
 * [tOracleOutput_21 end ] stop
 */




	
	/**
	 * [tOracleOutput_31 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_31";
	
	
	



	
        if(pstmt_tOracleOutput_31 != null) {
			
				pstmt_tOracleOutput_31.close();
				resourceMap.remove("pstmt_tOracleOutput_31");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_31", true);

	
	nb_line_deleted_tOracleOutput_31=nb_line_deleted_tOracleOutput_31+ deletedCount_tOracleOutput_31;
	nb_line_update_tOracleOutput_31=nb_line_update_tOracleOutput_31 + updatedCount_tOracleOutput_31;
	nb_line_inserted_tOracleOutput_31=nb_line_inserted_tOracleOutput_31 + insertedCount_tOracleOutput_31;
	nb_line_rejected_tOracleOutput_31=nb_line_rejected_tOracleOutput_31 + rejectedCount_tOracleOutput_31;
	
        globalMap.put("tOracleOutput_31_NB_LINE",nb_line_tOracleOutput_31);
        globalMap.put("tOracleOutput_31_NB_LINE_UPDATED",nb_line_update_tOracleOutput_31);
        globalMap.put("tOracleOutput_31_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_31);
        globalMap.put("tOracleOutput_31_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_31);
        globalMap.put("tOracleOutput_31_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_31);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"HESTADOS");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_31", true);
end_Hash.put("tOracleOutput_31", System.currentTimeMillis());




/**
 * [tOracleOutput_31 end ] stop
 */




	
	/**
	 * [tOracleOutput_32 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_32";
	
	
	



	
        if(pstmt_tOracleOutput_32 != null) {
			
				pstmt_tOracleOutput_32.close();
				resourceMap.remove("pstmt_tOracleOutput_32");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_32", true);

	
	nb_line_deleted_tOracleOutput_32=nb_line_deleted_tOracleOutput_32+ deletedCount_tOracleOutput_32;
	nb_line_update_tOracleOutput_32=nb_line_update_tOracleOutput_32 + updatedCount_tOracleOutput_32;
	nb_line_inserted_tOracleOutput_32=nb_line_inserted_tOracleOutput_32 + insertedCount_tOracleOutput_32;
	nb_line_rejected_tOracleOutput_32=nb_line_rejected_tOracleOutput_32 + rejectedCount_tOracleOutput_32;
	
        globalMap.put("tOracleOutput_32_NB_LINE",nb_line_tOracleOutput_32);
        globalMap.put("tOracleOutput_32_NB_LINE_UPDATED",nb_line_update_tOracleOutput_32);
        globalMap.put("tOracleOutput_32_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_32);
        globalMap.put("tOracleOutput_32_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_32);
        globalMap.put("tOracleOutput_32_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_32);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"ENTIDAD_APORTANTE");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_32", true);
end_Hash.put("tOracleOutput_32", System.currentTimeMillis());




/**
 * [tOracleOutput_32 end ] stop
 */




	
	/**
	 * [tOracleOutput_33 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_33";
	
	
	



	
        if(pstmt_tOracleOutput_33 != null) {
			
				pstmt_tOracleOutput_33.close();
				resourceMap.remove("pstmt_tOracleOutput_33");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_33", true);

	
	nb_line_deleted_tOracleOutput_33=nb_line_deleted_tOracleOutput_33+ deletedCount_tOracleOutput_33;
	nb_line_update_tOracleOutput_33=nb_line_update_tOracleOutput_33 + updatedCount_tOracleOutput_33;
	nb_line_inserted_tOracleOutput_33=nb_line_inserted_tOracleOutput_33 + insertedCount_tOracleOutput_33;
	nb_line_rejected_tOracleOutput_33=nb_line_rejected_tOracleOutput_33 + rejectedCount_tOracleOutput_33;
	
        globalMap.put("tOracleOutput_33_NB_LINE",nb_line_tOracleOutput_33);
        globalMap.put("tOracleOutput_33_NB_LINE_UPDATED",nb_line_update_tOracleOutput_33);
        globalMap.put("tOracleOutput_33_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_33);
        globalMap.put("tOracleOutput_33_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_33);
        globalMap.put("tOracleOutput_33_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_33);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"CAMBIOS_AFILIACION");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_33", true);
end_Hash.put("tOracleOutput_33", System.currentTimeMillis());




/**
 * [tOracleOutput_33 end ] stop
 */




	
	/**
	 * [tOracleOutput_38 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_38";
	
	
	



	
        if(pstmt_tOracleOutput_38 != null) {
			
				pstmt_tOracleOutput_38.close();
				resourceMap.remove("pstmt_tOracleOutput_38");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_38", true);

	
	nb_line_deleted_tOracleOutput_38=nb_line_deleted_tOracleOutput_38+ deletedCount_tOracleOutput_38;
	nb_line_update_tOracleOutput_38=nb_line_update_tOracleOutput_38 + updatedCount_tOracleOutput_38;
	nb_line_inserted_tOracleOutput_38=nb_line_inserted_tOracleOutput_38 + insertedCount_tOracleOutput_38;
	nb_line_rejected_tOracleOutput_38=nb_line_rejected_tOracleOutput_38 + rejectedCount_tOracleOutput_38;
	
        globalMap.put("tOracleOutput_38_NB_LINE",nb_line_tOracleOutput_38);
        globalMap.put("tOracleOutput_38_NB_LINE_UPDATED",nb_line_update_tOracleOutput_38);
        globalMap.put("tOracleOutput_38_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_38);
        globalMap.put("tOracleOutput_38_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_38);
        globalMap.put("tOracleOutput_38_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_38);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"CAMBIO_FECHA_CADUCIDAD");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_38", true);
end_Hash.put("tOracleOutput_38", System.currentTimeMillis());




/**
 * [tOracleOutput_38 end ] stop
 */




	
	/**
	 * [tOracleSP_9 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_9";
	
	


	statement_tOracleSP_9.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"CAMBIO_ENTIDAD_PRINCIPAL");
			  	}
			  	
 

ok_Hash.put("tOracleSP_9", true);
end_Hash.put("tOracleSP_9", System.currentTimeMillis());




/**
 * [tOracleSP_9 end ] stop
 */




	
	/**
	 * [tOracleOutput_39 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_39";
	
	
	



	
        if(pstmt_tOracleOutput_39 != null) {
			
				pstmt_tOracleOutput_39.close();
				resourceMap.remove("pstmt_tOracleOutput_39");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_39", true);

	
	nb_line_deleted_tOracleOutput_39=nb_line_deleted_tOracleOutput_39+ deletedCount_tOracleOutput_39;
	nb_line_update_tOracleOutput_39=nb_line_update_tOracleOutput_39 + updatedCount_tOracleOutput_39;
	nb_line_inserted_tOracleOutput_39=nb_line_inserted_tOracleOutput_39 + insertedCount_tOracleOutput_39;
	nb_line_rejected_tOracleOutput_39=nb_line_rejected_tOracleOutput_39 + rejectedCount_tOracleOutput_39;
	
        globalMap.put("tOracleOutput_39_NB_LINE",nb_line_tOracleOutput_39);
        globalMap.put("tOracleOutput_39_NB_LINE_UPDATED",nb_line_update_tOracleOutput_39);
        globalMap.put("tOracleOutput_39_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_39);
        globalMap.put("tOracleOutput_39_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_39);
        globalMap.put("tOracleOutput_39_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_39);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"CAMBIO_PLAN_AFILIACION");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_39", true);
end_Hash.put("tOracleOutput_39", System.currentTimeMillis());




/**
 * [tOracleOutput_39 end ] stop
 */




	
	/**
	 * [tOracleOutput_40 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_40";
	
	
	



	
        if(pstmt_tOracleOutput_40 != null) {
			
				pstmt_tOracleOutput_40.close();
				resourceMap.remove("pstmt_tOracleOutput_40");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_40", true);

	
	nb_line_deleted_tOracleOutput_40=nb_line_deleted_tOracleOutput_40+ deletedCount_tOracleOutput_40;
	nb_line_update_tOracleOutput_40=nb_line_update_tOracleOutput_40 + updatedCount_tOracleOutput_40;
	nb_line_inserted_tOracleOutput_40=nb_line_inserted_tOracleOutput_40 + insertedCount_tOracleOutput_40;
	nb_line_rejected_tOracleOutput_40=nb_line_rejected_tOracleOutput_40 + rejectedCount_tOracleOutput_40;
	
        globalMap.put("tOracleOutput_40_NB_LINE",nb_line_tOracleOutput_40);
        globalMap.put("tOracleOutput_40_NB_LINE_UPDATED",nb_line_update_tOracleOutput_40);
        globalMap.put("tOracleOutput_40_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_40);
        globalMap.put("tOracleOutput_40_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_40);
        globalMap.put("tOracleOutput_40_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_40);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"CAMBIO_FECHA_DEFUNCION");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_40", true);
end_Hash.put("tOracleOutput_40", System.currentTimeMillis());




/**
 * [tOracleOutput_40 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_34:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk20", 0, "ok");
								} 
							
							tOracleInput_35Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row120"); 
				     			
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row121"); 
				     			
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row122"); 
				     			
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row123"); 
				     			
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row124"); 
				     			
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row125"); 
				     			
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row128"); 
				     			
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row129"); 
				     			
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row150"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_34 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_34";
	
	

 



/**
 * [tOracleInput_34 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tOracleOutput_8 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_8";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_8") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_8 = null;
                if ((pstmtToClose_tOracleOutput_8 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_8")) != null) {
                    pstmtToClose_tOracleOutput_8.close();
                }
    }
 



/**
 * [tOracleOutput_8 finally ] stop
 */




	
	/**
	 * [tOracleOutput_25 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_25";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_25") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_25 = null;
                if ((pstmtToClose_tOracleOutput_25 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_25")) != null) {
                    pstmtToClose_tOracleOutput_25.close();
                }
    }
 



/**
 * [tOracleOutput_25 finally ] stop
 */




	
	/**
	 * [tOracleOutput_26 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_26";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_26") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_26 = null;
                if ((pstmtToClose_tOracleOutput_26 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_26")) != null) {
                    pstmtToClose_tOracleOutput_26.close();
                }
    }
 



/**
 * [tOracleOutput_26 finally ] stop
 */




	
	/**
	 * [tOracleOutput_27 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_27";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_27") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_27 = null;
                if ((pstmtToClose_tOracleOutput_27 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_27")) != null) {
                    pstmtToClose_tOracleOutput_27.close();
                }
    }
 



/**
 * [tOracleOutput_27 finally ] stop
 */




	
	/**
	 * [tOracleOutput_28 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_28";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_28") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_28 = null;
                if ((pstmtToClose_tOracleOutput_28 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_28")) != null) {
                    pstmtToClose_tOracleOutput_28.close();
                }
    }
 



/**
 * [tOracleOutput_28 finally ] stop
 */




	
	/**
	 * [tOracleOutput_9 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_9";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_9") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_9 = null;
                if ((pstmtToClose_tOracleOutput_9 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_9")) != null) {
                    pstmtToClose_tOracleOutput_9.close();
                }
    }
 



/**
 * [tOracleOutput_9 finally ] stop
 */




	
	/**
	 * [tOracleOutput_20 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_20";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_20") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_20 = null;
                if ((pstmtToClose_tOracleOutput_20 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_20")) != null) {
                    pstmtToClose_tOracleOutput_20.close();
                }
    }
 



/**
 * [tOracleOutput_20 finally ] stop
 */




	
	/**
	 * [tOracleOutput_29 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_29";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_29") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_29 = null;
                if ((pstmtToClose_tOracleOutput_29 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_29")) != null) {
                    pstmtToClose_tOracleOutput_29.close();
                }
    }
 



/**
 * [tOracleOutput_29 finally ] stop
 */




	
	/**
	 * [tOracleOutput_30 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_30";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_30") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_30 = null;
                if ((pstmtToClose_tOracleOutput_30 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_30")) != null) {
                    pstmtToClose_tOracleOutput_30.close();
                }
    }
 



/**
 * [tOracleOutput_30 finally ] stop
 */




	
	/**
	 * [tOracleOutput_24 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_24";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_24") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_24 = null;
                if ((pstmtToClose_tOracleOutput_24 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_24")) != null) {
                    pstmtToClose_tOracleOutput_24.close();
                }
    }
 



/**
 * [tOracleOutput_24 finally ] stop
 */




	
	/**
	 * [tOracleOutput_23 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_23";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_23") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_23 = null;
                if ((pstmtToClose_tOracleOutput_23 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_23")) != null) {
                    pstmtToClose_tOracleOutput_23.close();
                }
    }
 



/**
 * [tOracleOutput_23 finally ] stop
 */




	
	/**
	 * [tOracleOutput_22 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_22";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_22") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_22 = null;
                if ((pstmtToClose_tOracleOutput_22 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_22")) != null) {
                    pstmtToClose_tOracleOutput_22.close();
                }
    }
 



/**
 * [tOracleOutput_22 finally ] stop
 */




	
	/**
	 * [tOracleOutput_21 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_21";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_21") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_21 = null;
                if ((pstmtToClose_tOracleOutput_21 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_21")) != null) {
                    pstmtToClose_tOracleOutput_21.close();
                }
    }
 



/**
 * [tOracleOutput_21 finally ] stop
 */




	
	/**
	 * [tOracleOutput_31 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_31";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_31") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_31 = null;
                if ((pstmtToClose_tOracleOutput_31 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_31")) != null) {
                    pstmtToClose_tOracleOutput_31.close();
                }
    }
 



/**
 * [tOracleOutput_31 finally ] stop
 */




	
	/**
	 * [tOracleOutput_32 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_32";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_32") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_32 = null;
                if ((pstmtToClose_tOracleOutput_32 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_32")) != null) {
                    pstmtToClose_tOracleOutput_32.close();
                }
    }
 



/**
 * [tOracleOutput_32 finally ] stop
 */




	
	/**
	 * [tOracleOutput_33 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_33";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_33") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_33 = null;
                if ((pstmtToClose_tOracleOutput_33 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_33")) != null) {
                    pstmtToClose_tOracleOutput_33.close();
                }
    }
 



/**
 * [tOracleOutput_33 finally ] stop
 */




	
	/**
	 * [tOracleOutput_38 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_38";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_38") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_38 = null;
                if ((pstmtToClose_tOracleOutput_38 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_38")) != null) {
                    pstmtToClose_tOracleOutput_38.close();
                }
    }
 



/**
 * [tOracleOutput_38 finally ] stop
 */




	
	/**
	 * [tOracleSP_9 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_9";
	
	

 



/**
 * [tOracleSP_9 finally ] stop
 */




	
	/**
	 * [tOracleOutput_39 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_39";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_39") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_39 = null;
                if ((pstmtToClose_tOracleOutput_39 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_39")) != null) {
                    pstmtToClose_tOracleOutput_39.close();
                }
    }
 



/**
 * [tOracleOutput_39 finally ] stop
 */




	
	/**
	 * [tOracleOutput_40 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_40";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_40") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_40 = null;
                if ((pstmtToClose_tOracleOutput_40 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_40")) != null) {
                    pstmtToClose_tOracleOutput_40.close();
                }
    }
 



/**
 * [tOracleOutput_40 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_34_SUBPROCESS_STATE", 1);
	}
	


public static class row118Struct implements routines.system.IPersistableRow<row118Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer TOTAL_REGISTROS;

				public Integer getTOTAL_REGISTROS () {
					return this.TOTAL_REGISTROS;
				}

				public Boolean TOTAL_REGISTROSIsNullable(){
				    return true;
				}
				public Boolean TOTAL_REGISTROSIsKey(){
				    return false;
				}
				public Integer TOTAL_REGISTROSLength(){
				    return null;
				}
				public Integer TOTAL_REGISTROSPrecision(){
				    return null;
				}
				public String TOTAL_REGISTROSDefault(){
				
					return null;
				
				}
				public String TOTAL_REGISTROSComment(){
				
				    return "";
				
				}
				public String TOTAL_REGISTROSPattern(){
				
					return "";
				
				}
				public String TOTAL_REGISTROSOriginalDbColumnName(){
				
					return "TOTAL_REGISTROS";
				
				}

				
			    public Integer TOTAL_ERRORES;

				public Integer getTOTAL_ERRORES () {
					return this.TOTAL_ERRORES;
				}

				public Boolean TOTAL_ERRORESIsNullable(){
				    return true;
				}
				public Boolean TOTAL_ERRORESIsKey(){
				    return false;
				}
				public Integer TOTAL_ERRORESLength(){
				    return null;
				}
				public Integer TOTAL_ERRORESPrecision(){
				    return null;
				}
				public String TOTAL_ERRORESDefault(){
				
					return null;
				
				}
				public String TOTAL_ERRORESComment(){
				
				    return "";
				
				}
				public String TOTAL_ERRORESPattern(){
				
					return "";
				
				}
				public String TOTAL_ERRORESOriginalDbColumnName(){
				
					return "TOTAL_ERRORES";
				
				}

				
			    public Integer TOTAL_ACTUALIZACIONES;

				public Integer getTOTAL_ACTUALIZACIONES () {
					return this.TOTAL_ACTUALIZACIONES;
				}

				public Boolean TOTAL_ACTUALIZACIONESIsNullable(){
				    return true;
				}
				public Boolean TOTAL_ACTUALIZACIONESIsKey(){
				    return false;
				}
				public Integer TOTAL_ACTUALIZACIONESLength(){
				    return null;
				}
				public Integer TOTAL_ACTUALIZACIONESPrecision(){
				    return null;
				}
				public String TOTAL_ACTUALIZACIONESDefault(){
				
					return null;
				
				}
				public String TOTAL_ACTUALIZACIONESComment(){
				
				    return "";
				
				}
				public String TOTAL_ACTUALIZACIONESPattern(){
				
					return "";
				
				}
				public String TOTAL_ACTUALIZACIONESOriginalDbColumnName(){
				
					return "TOTAL_ACTUALIZACIONES";
				
				}

				
			    public Integer ERR_ESTRUCTURA;

				public Integer getERR_ESTRUCTURA () {
					return this.ERR_ESTRUCTURA;
				}

				public Boolean ERR_ESTRUCTURAIsNullable(){
				    return true;
				}
				public Boolean ERR_ESTRUCTURAIsKey(){
				    return false;
				}
				public Integer ERR_ESTRUCTURALength(){
				    return null;
				}
				public Integer ERR_ESTRUCTURAPrecision(){
				    return null;
				}
				public String ERR_ESTRUCTURADefault(){
				
					return null;
				
				}
				public String ERR_ESTRUCTURAComment(){
				
				    return "";
				
				}
				public String ERR_ESTRUCTURAPattern(){
				
					return "";
				
				}
				public String ERR_ESTRUCTURAOriginalDbColumnName(){
				
					return "ERR_ESTRUCTURA";
				
				}

				
			    public Integer ERR_TD_DOC;

				public Integer getERR_TD_DOC () {
					return this.ERR_TD_DOC;
				}

				public Boolean ERR_TD_DOCIsNullable(){
				    return true;
				}
				public Boolean ERR_TD_DOCIsKey(){
				    return false;
				}
				public Integer ERR_TD_DOCLength(){
				    return null;
				}
				public Integer ERR_TD_DOCPrecision(){
				    return null;
				}
				public String ERR_TD_DOCDefault(){
				
					return null;
				
				}
				public String ERR_TD_DOCComment(){
				
				    return "";
				
				}
				public String ERR_TD_DOCPattern(){
				
					return "";
				
				}
				public String ERR_TD_DOCOriginalDbColumnName(){
				
					return "ERR_TD_DOC";
				
				}

				
			    public Integer ERR_ID_PER_DUP;

				public Integer getERR_ID_PER_DUP () {
					return this.ERR_ID_PER_DUP;
				}

				public Boolean ERR_ID_PER_DUPIsNullable(){
				    return true;
				}
				public Boolean ERR_ID_PER_DUPIsKey(){
				    return false;
				}
				public Integer ERR_ID_PER_DUPLength(){
				    return null;
				}
				public Integer ERR_ID_PER_DUPPrecision(){
				    return null;
				}
				public String ERR_ID_PER_DUPDefault(){
				
					return null;
				
				}
				public String ERR_ID_PER_DUPComment(){
				
				    return "";
				
				}
				public String ERR_ID_PER_DUPPattern(){
				
					return "";
				
				}
				public String ERR_ID_PER_DUPOriginalDbColumnName(){
				
					return "ERR_ID_PER_DUP";
				
				}

				
			    public Integer ERR_ID_AFI_DUP;

				public Integer getERR_ID_AFI_DUP () {
					return this.ERR_ID_AFI_DUP;
				}

				public Boolean ERR_ID_AFI_DUPIsNullable(){
				    return true;
				}
				public Boolean ERR_ID_AFI_DUPIsKey(){
				    return false;
				}
				public Integer ERR_ID_AFI_DUPLength(){
				    return null;
				}
				public Integer ERR_ID_AFI_DUPPrecision(){
				    return null;
				}
				public String ERR_ID_AFI_DUPDefault(){
				
					return null;
				
				}
				public String ERR_ID_AFI_DUPComment(){
				
				    return "";
				
				}
				public String ERR_ID_AFI_DUPPattern(){
				
					return "";
				
				}
				public String ERR_ID_AFI_DUPOriginalDbColumnName(){
				
					return "ERR_ID_AFI_DUP";
				
				}

				
			    public Integer ERR_NOMBRES_FNAC;

				public Integer getERR_NOMBRES_FNAC () {
					return this.ERR_NOMBRES_FNAC;
				}

				public Boolean ERR_NOMBRES_FNACIsNullable(){
				    return true;
				}
				public Boolean ERR_NOMBRES_FNACIsKey(){
				    return false;
				}
				public Integer ERR_NOMBRES_FNACLength(){
				    return null;
				}
				public Integer ERR_NOMBRES_FNACPrecision(){
				    return null;
				}
				public String ERR_NOMBRES_FNACDefault(){
				
					return null;
				
				}
				public String ERR_NOMBRES_FNACComment(){
				
				    return "";
				
				}
				public String ERR_NOMBRES_FNACPattern(){
				
					return "";
				
				}
				public String ERR_NOMBRES_FNACOriginalDbColumnName(){
				
					return "ERR_NOMBRES_FNAC";
				
				}

				
			    public Integer ERR_NO_AFI;

				public Integer getERR_NO_AFI () {
					return this.ERR_NO_AFI;
				}

				public Boolean ERR_NO_AFIIsNullable(){
				    return true;
				}
				public Boolean ERR_NO_AFIIsKey(){
				    return false;
				}
				public Integer ERR_NO_AFILength(){
				    return null;
				}
				public Integer ERR_NO_AFIPrecision(){
				    return null;
				}
				public String ERR_NO_AFIDefault(){
				
					return null;
				
				}
				public String ERR_NO_AFIComment(){
				
				    return "";
				
				}
				public String ERR_NO_AFIPattern(){
				
					return "";
				
				}
				public String ERR_NO_AFIOriginalDbColumnName(){
				
					return "ERR_NO_AFI";
				
				}

				
			    public Integer ERR_DUP_SIS;

				public Integer getERR_DUP_SIS () {
					return this.ERR_DUP_SIS;
				}

				public Boolean ERR_DUP_SISIsNullable(){
				    return true;
				}
				public Boolean ERR_DUP_SISIsKey(){
				    return false;
				}
				public Integer ERR_DUP_SISLength(){
				    return null;
				}
				public Integer ERR_DUP_SISPrecision(){
				    return null;
				}
				public String ERR_DUP_SISDefault(){
				
					return null;
				
				}
				public String ERR_DUP_SISComment(){
				
				    return "";
				
				}
				public String ERR_DUP_SISPattern(){
				
					return "";
				
				}
				public String ERR_DUP_SISOriginalDbColumnName(){
				
					return "ERR_DUP_SIS";
				
				}

				
			    public Integer ERR_PN_PA_DOC;

				public Integer getERR_PN_PA_DOC () {
					return this.ERR_PN_PA_DOC;
				}

				public Boolean ERR_PN_PA_DOCIsNullable(){
				    return true;
				}
				public Boolean ERR_PN_PA_DOCIsKey(){
				    return false;
				}
				public Integer ERR_PN_PA_DOCLength(){
				    return null;
				}
				public Integer ERR_PN_PA_DOCPrecision(){
				    return null;
				}
				public String ERR_PN_PA_DOCDefault(){
				
					return null;
				
				}
				public String ERR_PN_PA_DOCComment(){
				
				    return "";
				
				}
				public String ERR_PN_PA_DOCPattern(){
				
					return "";
				
				}
				public String ERR_PN_PA_DOCOriginalDbColumnName(){
				
					return "ERR_PN_PA_DOC";
				
				}

				
			    public Integer ACT_NO_ERR_ENT;

				public Integer getACT_NO_ERR_ENT () {
					return this.ACT_NO_ERR_ENT;
				}

				public Boolean ACT_NO_ERR_ENTIsNullable(){
				    return true;
				}
				public Boolean ACT_NO_ERR_ENTIsKey(){
				    return false;
				}
				public Integer ACT_NO_ERR_ENTLength(){
				    return null;
				}
				public Integer ACT_NO_ERR_ENTPrecision(){
				    return null;
				}
				public String ACT_NO_ERR_ENTDefault(){
				
					return null;
				
				}
				public String ACT_NO_ERR_ENTComment(){
				
				    return "";
				
				}
				public String ACT_NO_ERR_ENTPattern(){
				
					return "";
				
				}
				public String ACT_NO_ERR_ENTOriginalDbColumnName(){
				
					return "ACT_NO_ERR_ENT";
				
				}

				
			    public Integer ACT_ERR_ENT;

				public Integer getACT_ERR_ENT () {
					return this.ACT_ERR_ENT;
				}

				public Boolean ACT_ERR_ENTIsNullable(){
				    return true;
				}
				public Boolean ACT_ERR_ENTIsKey(){
				    return false;
				}
				public Integer ACT_ERR_ENTLength(){
				    return null;
				}
				public Integer ACT_ERR_ENTPrecision(){
				    return null;
				}
				public String ACT_ERR_ENTDefault(){
				
					return null;
				
				}
				public String ACT_ERR_ENTComment(){
				
				    return "";
				
				}
				public String ACT_ERR_ENTPattern(){
				
					return "";
				
				}
				public String ACT_ERR_ENTOriginalDbColumnName(){
				
					return "ACT_ERR_ENT";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TOTAL_REGISTROS = readInteger(dis);
					
						this.TOTAL_ERRORES = readInteger(dis);
					
						this.TOTAL_ACTUALIZACIONES = readInteger(dis);
					
						this.ERR_ESTRUCTURA = readInteger(dis);
					
						this.ERR_TD_DOC = readInteger(dis);
					
						this.ERR_ID_PER_DUP = readInteger(dis);
					
						this.ERR_ID_AFI_DUP = readInteger(dis);
					
						this.ERR_NOMBRES_FNAC = readInteger(dis);
					
						this.ERR_NO_AFI = readInteger(dis);
					
						this.ERR_DUP_SIS = readInteger(dis);
					
						this.ERR_PN_PA_DOC = readInteger(dis);
					
						this.ACT_NO_ERR_ENT = readInteger(dis);
					
						this.ACT_ERR_ENT = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.TOTAL_REGISTROS = readInteger(dis);
					
						this.TOTAL_ERRORES = readInteger(dis);
					
						this.TOTAL_ACTUALIZACIONES = readInteger(dis);
					
						this.ERR_ESTRUCTURA = readInteger(dis);
					
						this.ERR_TD_DOC = readInteger(dis);
					
						this.ERR_ID_PER_DUP = readInteger(dis);
					
						this.ERR_ID_AFI_DUP = readInteger(dis);
					
						this.ERR_NOMBRES_FNAC = readInteger(dis);
					
						this.ERR_NO_AFI = readInteger(dis);
					
						this.ERR_DUP_SIS = readInteger(dis);
					
						this.ERR_PN_PA_DOC = readInteger(dis);
					
						this.ACT_NO_ERR_ENT = readInteger(dis);
					
						this.ACT_ERR_ENT = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TOTAL_REGISTROS,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_ERRORES,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_ACTUALIZACIONES,dos);
					
					// Integer
				
						writeInteger(this.ERR_ESTRUCTURA,dos);
					
					// Integer
				
						writeInteger(this.ERR_TD_DOC,dos);
					
					// Integer
				
						writeInteger(this.ERR_ID_PER_DUP,dos);
					
					// Integer
				
						writeInteger(this.ERR_ID_AFI_DUP,dos);
					
					// Integer
				
						writeInteger(this.ERR_NOMBRES_FNAC,dos);
					
					// Integer
				
						writeInteger(this.ERR_NO_AFI,dos);
					
					// Integer
				
						writeInteger(this.ERR_DUP_SIS,dos);
					
					// Integer
				
						writeInteger(this.ERR_PN_PA_DOC,dos);
					
					// Integer
				
						writeInteger(this.ACT_NO_ERR_ENT,dos);
					
					// Integer
				
						writeInteger(this.ACT_ERR_ENT,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TOTAL_REGISTROS,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_ERRORES,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_ACTUALIZACIONES,dos);
					
					// Integer
				
						writeInteger(this.ERR_ESTRUCTURA,dos);
					
					// Integer
				
						writeInteger(this.ERR_TD_DOC,dos);
					
					// Integer
				
						writeInteger(this.ERR_ID_PER_DUP,dos);
					
					// Integer
				
						writeInteger(this.ERR_ID_AFI_DUP,dos);
					
					// Integer
				
						writeInteger(this.ERR_NOMBRES_FNAC,dos);
					
					// Integer
				
						writeInteger(this.ERR_NO_AFI,dos);
					
					// Integer
				
						writeInteger(this.ERR_DUP_SIS,dos);
					
					// Integer
				
						writeInteger(this.ERR_PN_PA_DOC,dos);
					
					// Integer
				
						writeInteger(this.ACT_NO_ERR_ENT,dos);
					
					// Integer
				
						writeInteger(this.ACT_ERR_ENT,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TOTAL_REGISTROS="+String.valueOf(TOTAL_REGISTROS));
		sb.append(",TOTAL_ERRORES="+String.valueOf(TOTAL_ERRORES));
		sb.append(",TOTAL_ACTUALIZACIONES="+String.valueOf(TOTAL_ACTUALIZACIONES));
		sb.append(",ERR_ESTRUCTURA="+String.valueOf(ERR_ESTRUCTURA));
		sb.append(",ERR_TD_DOC="+String.valueOf(ERR_TD_DOC));
		sb.append(",ERR_ID_PER_DUP="+String.valueOf(ERR_ID_PER_DUP));
		sb.append(",ERR_ID_AFI_DUP="+String.valueOf(ERR_ID_AFI_DUP));
		sb.append(",ERR_NOMBRES_FNAC="+String.valueOf(ERR_NOMBRES_FNAC));
		sb.append(",ERR_NO_AFI="+String.valueOf(ERR_NO_AFI));
		sb.append(",ERR_DUP_SIS="+String.valueOf(ERR_DUP_SIS));
		sb.append(",ERR_PN_PA_DOC="+String.valueOf(ERR_PN_PA_DOC));
		sb.append(",ACT_NO_ERR_ENT="+String.valueOf(ACT_NO_ERR_ENT));
		sb.append(",ACT_ERR_ENT="+String.valueOf(ACT_ERR_ENT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row118Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_35Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_35_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row118Struct row118 = new row118Struct();




	
	/**
	 * [tJavaRow_24 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_24", false);
		start_Hash.put("tJavaRow_24", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_24";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row118");
					}
				
		int tos_count_tJavaRow_24 = 0;
		

int nb_line_tJavaRow_24 = 0;

 



/**
 * [tJavaRow_24 begin ] stop
 */



	
	/**
	 * [tOracleInput_35 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_35", false);
		start_Hash.put("tOracleInput_35", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_35";
	
	
		int tos_count_tOracleInput_35 = 0;
		
	


	
		    int nb_line_tOracleInput_35 = 0;
		    java.sql.Connection conn_tOracleInput_35 = null;
				conn_tOracleInput_35 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_35 = false;
				boolean isConnectionWrapped_tOracleInput_35 = !(conn_tOracleInput_35 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_35.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_35 = null;
                if (isConnectionWrapped_tOracleInput_35) {
					unwrappedOraConn_tOracleInput_35 = conn_tOracleInput_35.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_35 != null) {
                        isTimeZoneNull_tOracleInput_35 = (unwrappedOraConn_tOracleInput_35.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_35 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_35).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_35) {
					java.sql.Statement stmtGetTZ_tOracleInput_35 = conn_tOracleInput_35.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_35 = stmtGetTZ_tOracleInput_35.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_35 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_35.next()) {
						sessionTimezone_tOracleInput_35 = rsGetTZ_tOracleInput_35.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_35 && unwrappedOraConn_tOracleInput_35 != null) {
                        unwrappedOraConn_tOracleInput_35.setSessionTimeZone(sessionTimezone_tOracleInput_35);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_35).setSessionTimeZone(sessionTimezone_tOracleInput_35);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_35 = conn_tOracleInput_35.createStatement();

		    String dbquery_tOracleInput_35 = "SELECT \n--TOTAL DE REGISTROS\n(SELECT COUNT(1) FROM TST_ARCHIVO) AS TOTAL_REGISTROS,\n\n--TOTAL DE ERRORES\n(SELECT CO"
+"UNT(1) FROM TST_ERRCMASIVO TE\nWHERE NOT EXISTS (SELECT * FROM TST_CARGUEMASIVO TC\nWHERE TC.TDOCUMENTOS_ID = TE.TDOCUME"
+"NTOS_ID \nAND TC.DOCUMENTO = TE.DOCUMENTO AND (TC.PROCESADO = 8 OR TC.PROCESADO IS NULL))) AS TOTAL_ERRORES,\n\n--TOTAL "
+"DE ACTUALIZACIONES\n(SELECT COUNT(1) FROM TST_CARGUEMASIVO TC \nWHERE TC.PROCESADO IS NULL OR TC.PROCESADO = 8) AS TOTAL"
+"_ACTUALIZACIONES,\n\n--REGISTROS CON ERRORES DE ESTRUCTURA\n(SELECT COUNT(1) FROM TST_ERRCMASIVO TE\nWHERE NOT EXISTS (S"
+"ELECT * FROM TST_CARGUEMASIVO TC\nWHERE TC.TDOCUMENTOS_ID = TE.TDOCUMENTOS_ID AND TC.DOCUMENTO = TE.DOCUMENTO)) AS ERR_E"
+"STRUCTURA,\n\n--ERROR DUPLICADOS TDOC Y DOC\n(SELECT COUNT(1) FROM TST_CARGUEMASIVO TC \nWHERE TC.PROCESADO = 1) AS ERR_"
+"TD_DOC,\n\n--ERROR ID_PERSONA DUPLICADO\n(SELECT COUNT(1) FROM TST_CARGUEMASIVO TC \nWHERE TC.PROCESADO = 2) AS ERR_ID_P"
+"ER_DUP,\n\n--ERROR ID_AFILIADO DUPLICADO\n(SELECT COUNT(1) FROM TST_CARGUEMASIVO TC \nWHERE TC.PROCESADO = 3) AS ERR_ID_"
+"AFI_DUP,\n\n--ERROR NOMBRE Y FECHA NACIMIENTO\n(SELECT COUNT(1) FROM TST_CARGUEMASIVO TC \nWHERE TC.PROCESADO = 4) AS ER"
+"R_NOMBRES_FNAC,\n\n--ERROR SIN AFILIACIÓN\n(SELECT COUNT(1) FROM TST_CARGUEMASIVO TC \nWHERE TC.PROCESADO = 5) AS ERR_NO"
+"_AFI,\n\n--ERROR DUPLICADOS EN EL SISTEMA.\n(SELECT COUNT(1) FROM TST_CARGUEMASIVO TC \nWHERE TC.PROCESADO = 6) AS ERR_D"
+"UP_SIS,\n\n--ERROR PRIMER NOMBRE, PRIMER APELLIDO Y DOCUMENTO\n(SELECT COUNT(1) FROM TST_CARGUEMASIVO TC \nWHERE TC.PROC"
+"ESADO = 7) AS ERR_PN_PA_DOC,\n\n--ACTUALIZACIONES SIN ERRORES EN LA ENTIDAD\n(SELECT COUNT(1) FROM TST_CARGUEMASIVO TC "
+"\nWHERE TC.PROCESADO IS NULL) AS ACT_NO_ERR_ENT,\n\n--ACTUALIZACIONES CON ERRORES DE ENTIDAD\n(SELECT COUNT(1) FROM TST_C"
+"ARGUEMASIVO TC \nWHERE TC.PROCESADO = 8) AS ACT_ERR_ENT\n\nFROM DUAL";
		    

		    globalMap.put("tOracleInput_35_QUERY",dbquery_tOracleInput_35);

		    java.sql.ResultSet rs_tOracleInput_35 = null;

		    try {
		    	rs_tOracleInput_35 = stmt_tOracleInput_35.executeQuery(dbquery_tOracleInput_35);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_35 = rs_tOracleInput_35.getMetaData();
		    	int colQtyInRs_tOracleInput_35 = rsmd_tOracleInput_35.getColumnCount();

		    String tmpContent_tOracleInput_35 = null;
		    
		    
		    while (rs_tOracleInput_35.next()) {
		        nb_line_tOracleInput_35++;
		        
							if(colQtyInRs_tOracleInput_35 < 1) {
								row118.TOTAL_REGISTROS = null;
							} else {
		                          
					if(rs_tOracleInput_35.getObject(1) != null) {
						row118.TOTAL_REGISTROS = rs_tOracleInput_35.getInt(1);
					} else {
				
						row118.TOTAL_REGISTROS = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_35 < 2) {
								row118.TOTAL_ERRORES = null;
							} else {
		                          
					if(rs_tOracleInput_35.getObject(2) != null) {
						row118.TOTAL_ERRORES = rs_tOracleInput_35.getInt(2);
					} else {
				
						row118.TOTAL_ERRORES = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_35 < 3) {
								row118.TOTAL_ACTUALIZACIONES = null;
							} else {
		                          
					if(rs_tOracleInput_35.getObject(3) != null) {
						row118.TOTAL_ACTUALIZACIONES = rs_tOracleInput_35.getInt(3);
					} else {
				
						row118.TOTAL_ACTUALIZACIONES = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_35 < 4) {
								row118.ERR_ESTRUCTURA = null;
							} else {
		                          
					if(rs_tOracleInput_35.getObject(4) != null) {
						row118.ERR_ESTRUCTURA = rs_tOracleInput_35.getInt(4);
					} else {
				
						row118.ERR_ESTRUCTURA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_35 < 5) {
								row118.ERR_TD_DOC = null;
							} else {
		                          
					if(rs_tOracleInput_35.getObject(5) != null) {
						row118.ERR_TD_DOC = rs_tOracleInput_35.getInt(5);
					} else {
				
						row118.ERR_TD_DOC = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_35 < 6) {
								row118.ERR_ID_PER_DUP = null;
							} else {
		                          
					if(rs_tOracleInput_35.getObject(6) != null) {
						row118.ERR_ID_PER_DUP = rs_tOracleInput_35.getInt(6);
					} else {
				
						row118.ERR_ID_PER_DUP = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_35 < 7) {
								row118.ERR_ID_AFI_DUP = null;
							} else {
		                          
					if(rs_tOracleInput_35.getObject(7) != null) {
						row118.ERR_ID_AFI_DUP = rs_tOracleInput_35.getInt(7);
					} else {
				
						row118.ERR_ID_AFI_DUP = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_35 < 8) {
								row118.ERR_NOMBRES_FNAC = null;
							} else {
		                          
					if(rs_tOracleInput_35.getObject(8) != null) {
						row118.ERR_NOMBRES_FNAC = rs_tOracleInput_35.getInt(8);
					} else {
				
						row118.ERR_NOMBRES_FNAC = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_35 < 9) {
								row118.ERR_NO_AFI = null;
							} else {
		                          
					if(rs_tOracleInput_35.getObject(9) != null) {
						row118.ERR_NO_AFI = rs_tOracleInput_35.getInt(9);
					} else {
				
						row118.ERR_NO_AFI = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_35 < 10) {
								row118.ERR_DUP_SIS = null;
							} else {
		                          
					if(rs_tOracleInput_35.getObject(10) != null) {
						row118.ERR_DUP_SIS = rs_tOracleInput_35.getInt(10);
					} else {
				
						row118.ERR_DUP_SIS = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_35 < 11) {
								row118.ERR_PN_PA_DOC = null;
							} else {
		                          
					if(rs_tOracleInput_35.getObject(11) != null) {
						row118.ERR_PN_PA_DOC = rs_tOracleInput_35.getInt(11);
					} else {
				
						row118.ERR_PN_PA_DOC = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_35 < 12) {
								row118.ACT_NO_ERR_ENT = null;
							} else {
		                          
					if(rs_tOracleInput_35.getObject(12) != null) {
						row118.ACT_NO_ERR_ENT = rs_tOracleInput_35.getInt(12);
					} else {
				
						row118.ACT_NO_ERR_ENT = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_35 < 13) {
								row118.ACT_ERR_ENT = null;
							} else {
		                          
					if(rs_tOracleInput_35.getObject(13) != null) {
						row118.ACT_ERR_ENT = rs_tOracleInput_35.getInt(13);
					} else {
				
						row118.ACT_ERR_ENT = null;
					}
		                    }
					




 



/**
 * [tOracleInput_35 begin ] stop
 */
	
	/**
	 * [tOracleInput_35 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_35";
	
	

 


	tos_count_tOracleInput_35++;

/**
 * [tOracleInput_35 main ] stop
 */
	
	/**
	 * [tOracleInput_35 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_35";
	
	

 



/**
 * [tOracleInput_35 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_24 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_24";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row118"
						
						);
					}
					

    //Code generate according to input schema and output schema
context.vtotal_registros = row118.TOTAL_REGISTROS;
context.vtotal_errores = row118.TOTAL_ERRORES;
context.vtotal_actualizaciones = row118.TOTAL_ACTUALIZACIONES;
context.verror_estructura = row118.ERR_ESTRUCTURA;
context.verror_td_doc = row118.ERR_TD_DOC;
context.verror_id_per_dup = row118.ERR_ID_PER_DUP;
context.verror_id_afi_dup = row118.ERR_ID_AFI_DUP;
context.verror_nombres_fnac = row118.ERR_NOMBRES_FNAC;
context.verror_no_afi = row118.ERR_NO_AFI;
context.verror_dup_sis = row118.ERR_DUP_SIS;
context.verror_pn_pa_doc = row118.ERR_PN_PA_DOC;
context.vact_no_err_ent = row118.ACT_NO_ERR_ENT;
context.vact_err_ent = row118.ACT_ERR_ENT;


System.out.println(context.PATH);
    nb_line_tJavaRow_24++;   

 


	tos_count_tJavaRow_24++;

/**
 * [tJavaRow_24 main ] stop
 */
	
	/**
	 * [tJavaRow_24 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_24";
	
	

 



/**
 * [tJavaRow_24 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_24 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_24";
	
	

 



/**
 * [tJavaRow_24 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_35 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_35";
	
	

 



/**
 * [tOracleInput_35 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_35 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_35";
	
	

}
}finally{
	if (rs_tOracleInput_35 != null) {
		rs_tOracleInput_35.close();
	}
	if (stmt_tOracleInput_35 != null) {
		stmt_tOracleInput_35.close();
	}
}

globalMap.put("tOracleInput_35_NB_LINE",nb_line_tOracleInput_35);
 

ok_Hash.put("tOracleInput_35", true);
end_Hash.put("tOracleInput_35", System.currentTimeMillis());




/**
 * [tOracleInput_35 end ] stop
 */

	
	/**
	 * [tJavaRow_24 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_24";
	
	

globalMap.put("tJavaRow_24_NB_LINE",nb_line_tJavaRow_24);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row118");
			  	}
			  	
 

ok_Hash.put("tJavaRow_24", true);
end_Hash.put("tJavaRow_24", System.currentTimeMillis());




/**
 * [tJavaRow_24 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_35:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk22", 0, "ok");
								} 
							
							tFixedFlowInput_14Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_35 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_35";
	
	

 



/**
 * [tOracleInput_35 finally ] stop
 */

	
	/**
	 * [tJavaRow_24 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_24";
	
	

 



/**
 * [tJavaRow_24 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_35_SUBPROCESS_STATE", 1);
	}
	


public static class row110Struct implements routines.system.IPersistableRow<row110Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public String contenido;

				public String getContenido () {
					return this.contenido;
				}

				public Boolean contenidoIsNullable(){
				    return true;
				}
				public Boolean contenidoIsKey(){
				    return false;
				}
				public Integer contenidoLength(){
				    return null;
				}
				public Integer contenidoPrecision(){
				    return null;
				}
				public String contenidoDefault(){
				
					return null;
				
				}
				public String contenidoComment(){
				
				    return "";
				
				}
				public String contenidoPattern(){
				
					return "";
				
				}
				public String contenidoOriginalDbColumnName(){
				
					return "contenido";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.contenido = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.contenido = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.contenido,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.contenido,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("contenido="+contenido);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row110Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row110Struct row110 = new row110Struct();




	
	/**
	 * [tFileOutputDelimited_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_3", false);
		start_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row110");
					}
				
		int tos_count_tFileOutputDelimited_3 = 0;
		

String fileName_tFileOutputDelimited_3 = "";
    fileName_tFileOutputDelimited_3 = (new java.io.File(context.PATH+"/AFI_RESUMEN_ACTMSV"+context.vafiarchivos_id+".txt")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_3 = null;
    String extension_tFileOutputDelimited_3 = null;
    String directory_tFileOutputDelimited_3 = null;
    if((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
            extension_tFileOutputDelimited_3 = "";
        } else {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("."));
            extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("."));
            extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
            extension_tFileOutputDelimited_3 = "";
        }
        directory_tFileOutputDelimited_3 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_3 = true;
    java.io.File filetFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
    globalMap.put("tFileOutputDelimited_3_FILE_NAME",fileName_tFileOutputDelimited_3);
            int nb_line_tFileOutputDelimited_3 = 0;
            int splitedFileNo_tFileOutputDelimited_3 = 0;
            int currentRow_tFileOutputDelimited_3 = 0;

            final String OUT_DELIM_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_3:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_3 != null && directory_tFileOutputDelimited_3.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_3 = new java.io.File(directory_tFileOutputDelimited_3);
                        if(!dir_tFileOutputDelimited_3.exists()) {
                            dir_tFileOutputDelimited_3.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_3 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
                        if(fileToDelete_tFileOutputDelimited_3.exists()) {
                            fileToDelete_tFileOutputDelimited_3.delete();
                        }
                        outtFileOutputDelimited_3 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_3, false),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_3", outtFileOutputDelimited_3);


resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

 



/**
 * [tFileOutputDelimited_3 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_14", false);
		start_Hash.put("tFixedFlowInput_14", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_14";
	
	
		int tos_count_tFixedFlowInput_14 = 0;
		

	int nb_line_tFixedFlowInput_14 = 0;
	List<row110Struct> cacheList_tFixedFlowInput_14 = new java.util.ArrayList<row110Struct>();
	row110 = new row110Struct();        	            	
	row110.contenido = "===============================================================================================================================================";
	cacheList_tFixedFlowInput_14.add(row110);
	row110 = new row110Struct();        	            	
	row110.contenido = "***************************************************** PROCESO DE ACTUALIZACIÓN MASIVA DIGSA ***************************************************";
	cacheList_tFixedFlowInput_14.add(row110);
	row110 = new row110Struct();        	            	
	row110.contenido = "==  Fecha de inicio de ejecución (YYYY-MM-DD h24:mm:ss): "+ context.vfinicio;
	cacheList_tFixedFlowInput_14.add(row110);
	row110 = new row110Struct();        	            	
	row110.contenido = "===============================================================================================================================================";
	cacheList_tFixedFlowInput_14.add(row110);
	row110 = new row110Struct();        	            	
	row110.contenido = "****************************************************** RESUMEN PROCESAMIENTO ***********************************************************";
	cacheList_tFixedFlowInput_14.add(row110);
	row110 = new row110Struct();        	            	
	row110.contenido = "--> Total registros procesados: ".concat(Integer.toString(context.vtotal_registros));
	cacheList_tFixedFlowInput_14.add(row110);
	row110 = new row110Struct();        	            	
	row110.contenido = "--> Registros procesados exitosamente: ".concat(Integer.toString(context.vtotal_actualizaciones));
	cacheList_tFixedFlowInput_14.add(row110);
	row110 = new row110Struct();        	            	
	row110.contenido = "--> Registros no procesados exitosamente: ".concat(Integer.toString(context.vtotal_errores));
	cacheList_tFixedFlowInput_14.add(row110);
	row110 = new row110Struct();        	            	
	row110.contenido = "===============================================================================================================================================";
	cacheList_tFixedFlowInput_14.add(row110);
	row110 = new row110Struct();        	            	
	row110.contenido = "******************************************************** DETALLE PROCESAMIENTO ****************************************************************";
	cacheList_tFixedFlowInput_14.add(row110);
	row110 = new row110Struct();        	            	
	row110.contenido = "--> Registros con errores de estructura en el archivo: "+context.verror_estructura;
	cacheList_tFixedFlowInput_14.add(row110);
	row110 = new row110Struct();        	            	
	row110.contenido = "--> Registros con el identificador único de persona duplicado en el archivo: "+context.verror_id_per_dup;
	cacheList_tFixedFlowInput_14.add(row110);
	row110 = new row110Struct();        	            	
	row110.contenido = "--> Registros con el identificador único de afiliación duplicado en el archivo: "+context.verror_id_afi_dup;
	cacheList_tFixedFlowInput_14.add(row110);
	row110 = new row110Struct();        	            	
	row110.contenido = "--> Registros que no presentan afiliación en el sistema: "+context.verror_no_afi;
	cacheList_tFixedFlowInput_14.add(row110);
	row110 = new row110Struct();        	            	
	row110.contenido = "--> Registros con duplicados en el archivo por tipo y número de documento: "+context.verror_td_doc;
	cacheList_tFixedFlowInput_14.add(row110);
	row110 = new row110Struct();        	            	
	row110.contenido = "--> Registros con duplicados en el archivo por nombres, apellidos y fecha de nacimiento: "+context.verror_nombres_fnac;
	cacheList_tFixedFlowInput_14.add(row110);
	row110 = new row110Struct();        	            	
	row110.contenido = "--> Registros con duplicados en el archivo por primer nombre, primer apellido y número de documentos: "+context.verror_pn_pa_doc;
	cacheList_tFixedFlowInput_14.add(row110);
	row110 = new row110Struct();        	            	
	row110.contenido = "--> Registros con duplicados en el sistema: "+context.verror_dup_sis;
	cacheList_tFixedFlowInput_14.add(row110);
	row110 = new row110Struct();        	            	
	row110.contenido = "--> Registros actualizados en sus datos básicos sin error en la entidad aportante: "+context.vact_no_err_ent;
	cacheList_tFixedFlowInput_14.add(row110);
	row110 = new row110Struct();        	            	
	row110.contenido = "--> Registros actualizados en sus datos básicos con error en la entidad aportante: "+context.vact_err_ent;
	cacheList_tFixedFlowInput_14.add(row110);
	row110 = new row110Struct();        	            	
	row110.contenido = "==  Fecha final de ejecución: "+(TalendDate.formatDate("yyyy-MM-dd HH:mm:ss.SSS",TalendDate.getCurrentDate()));
	cacheList_tFixedFlowInput_14.add(row110);
	row110 = new row110Struct();        	            	
	row110.contenido = "***********************************************************************************************************************************************";
	cacheList_tFixedFlowInput_14.add(row110);
	row110 = new row110Struct();        	            	
	row110.contenido = "===============================================================================================================================================";
	cacheList_tFixedFlowInput_14.add(row110);
	for (int i_tFixedFlowInput_14 = 0 ; i_tFixedFlowInput_14 < 1 ; i_tFixedFlowInput_14++) {	
		for(row110Struct tmpRow_tFixedFlowInput_14 : cacheList_tFixedFlowInput_14){
			nb_line_tFixedFlowInput_14 ++;		
			row110 = tmpRow_tFixedFlowInput_14;

 



/**
 * [tFixedFlowInput_14 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_14 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_14";
	
	

 


	tos_count_tFixedFlowInput_14++;

/**
 * [tFixedFlowInput_14 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_14";
	
	

 



/**
 * [tFixedFlowInput_14 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row110"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();
                            if(row110.contenido != null) {
                        sb_tFileOutputDelimited_3.append(
                            row110.contenido
                        );
                            }
                    sb_tFileOutputDelimited_3.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);


                    nb_line_tFileOutputDelimited_3++;
                    resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

                        outtFileOutputDelimited_3.write(sb_tFileOutputDelimited_3.toString());




 


	tos_count_tFileOutputDelimited_3++;

/**
 * [tFileOutputDelimited_3 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";
	
	

 



/**
 * [tFileOutputDelimited_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";
	
	

 



/**
 * [tFileOutputDelimited_3 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_14";
	
	

 



/**
 * [tFixedFlowInput_14 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_14 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_14";
	
	

		}
	}
	cacheList_tFixedFlowInput_14.clear();
	globalMap.put("tFixedFlowInput_14_NB_LINE", nb_line_tFixedFlowInput_14);

 

ok_Hash.put("tFixedFlowInput_14", true);
end_Hash.put("tFixedFlowInput_14", System.currentTimeMillis());




/**
 * [tFixedFlowInput_14 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";
	
	



		
			
					if(outtFileOutputDelimited_3!=null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}
				
				globalMap.put("tFileOutputDelimited_3_NB_LINE",nb_line_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",fileName_tFileOutputDelimited_3);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_3", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row110");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_3", true);
end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk38", 0, "ok");
				}
				tFixedFlowInput_15Process(globalMap);



/**
 * [tFileOutputDelimited_3 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFixedFlowInput_14:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk23", 0, "ok");
								} 
							
							tOracleInput_11Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_14 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_14";
	
	

 



/**
 * [tFixedFlowInput_14 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_3") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_3");
						if(outtFileOutputDelimited_3!=null) {
							outtFileOutputDelimited_3.flush();
							outtFileOutputDelimited_3.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_14_SUBPROCESS_STATE", 1);
	}
	


public static class row112Struct implements routines.system.IPersistableRow<row112Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer estado;

				public Integer getEstado () {
					return this.estado;
				}

				public Boolean estadoIsNullable(){
				    return true;
				}
				public Boolean estadoIsKey(){
				    return false;
				}
				public Integer estadoLength(){
				    return null;
				}
				public Integer estadoPrecision(){
				    return null;
				}
				public String estadoDefault(){
				
					return null;
				
				}
				public String estadoComment(){
				
				    return "";
				
				}
				public String estadoPattern(){
				
					return "";
				
				}
				public String estadoOriginalDbColumnName(){
				
					return "estado";
				
				}

				
			    public String archivo;

				public String getArchivo () {
					return this.archivo;
				}

				public Boolean archivoIsNullable(){
				    return true;
				}
				public Boolean archivoIsKey(){
				    return false;
				}
				public Integer archivoLength(){
				    return null;
				}
				public Integer archivoPrecision(){
				    return null;
				}
				public String archivoDefault(){
				
					return null;
				
				}
				public String archivoComment(){
				
				    return "";
				
				}
				public String archivoPattern(){
				
					return "";
				
				}
				public String archivoOriginalDbColumnName(){
				
					return "archivo";
				
				}

				
			    public Integer tarchivos_id;

				public Integer getTarchivos_id () {
					return this.tarchivos_id;
				}

				public Boolean tarchivos_idIsNullable(){
				    return true;
				}
				public Boolean tarchivos_idIsKey(){
				    return false;
				}
				public Integer tarchivos_idLength(){
				    return null;
				}
				public Integer tarchivos_idPrecision(){
				    return null;
				}
				public String tarchivos_idDefault(){
				
					return null;
				
				}
				public String tarchivos_idComment(){
				
				    return "";
				
				}
				public String tarchivos_idPattern(){
				
					return "";
				
				}
				public String tarchivos_idOriginalDbColumnName(){
				
					return "tarchivos_id";
				
				}

				
			    public Integer usuarios_id;

				public Integer getUsuarios_id () {
					return this.usuarios_id;
				}

				public Boolean usuarios_idIsNullable(){
				    return true;
				}
				public Boolean usuarios_idIsKey(){
				    return false;
				}
				public Integer usuarios_idLength(){
				    return null;
				}
				public Integer usuarios_idPrecision(){
				    return null;
				}
				public String usuarios_idDefault(){
				
					return null;
				
				}
				public String usuarios_idComment(){
				
				    return "";
				
				}
				public String usuarios_idPattern(){
				
					return "";
				
				}
				public String usuarios_idOriginalDbColumnName(){
				
					return "usuarios_id";
				
				}

				
			    public String codigo;

				public String getCodigo () {
					return this.codigo;
				}

				public Boolean codigoIsNullable(){
				    return true;
				}
				public Boolean codigoIsKey(){
				    return false;
				}
				public Integer codigoLength(){
				    return null;
				}
				public Integer codigoPrecision(){
				    return null;
				}
				public String codigoDefault(){
				
					return null;
				
				}
				public String codigoComment(){
				
				    return "";
				
				}
				public String codigoPattern(){
				
					return "";
				
				}
				public String codigoOriginalDbColumnName(){
				
					return "codigo";
				
				}

				
			    public String archivofs;

				public String getArchivofs () {
					return this.archivofs;
				}

				public Boolean archivofsIsNullable(){
				    return true;
				}
				public Boolean archivofsIsKey(){
				    return false;
				}
				public Integer archivofsLength(){
				    return null;
				}
				public Integer archivofsPrecision(){
				    return null;
				}
				public String archivofsDefault(){
				
					return null;
				
				}
				public String archivofsComment(){
				
				    return "";
				
				}
				public String archivofsPattern(){
				
					return "";
				
				}
				public String archivofsOriginalDbColumnName(){
				
					return "archivofs";
				
				}

				
			    public java.util.Date fecha;

				public java.util.Date getFecha () {
					return this.fecha;
				}

				public Boolean fechaIsNullable(){
				    return true;
				}
				public Boolean fechaIsKey(){
				    return false;
				}
				public Integer fechaLength(){
				    return null;
				}
				public Integer fechaPrecision(){
				    return null;
				}
				public String fechaDefault(){
				
					return null;
				
				}
				public String fechaComment(){
				
				    return "";
				
				}
				public String fechaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String fechaOriginalDbColumnName(){
				
					return "fecha";
				
				}

				
			    public String extension;

				public String getExtension () {
					return this.extension;
				}

				public Boolean extensionIsNullable(){
				    return true;
				}
				public Boolean extensionIsKey(){
				    return false;
				}
				public Integer extensionLength(){
				    return null;
				}
				public Integer extensionPrecision(){
				    return null;
				}
				public String extensionDefault(){
				
					return null;
				
				}
				public String extensionComment(){
				
				    return "";
				
				}
				public String extensionPattern(){
				
					return "";
				
				}
				public String extensionOriginalDbColumnName(){
				
					return "extension";
				
				}

				
			    public Object contenido;

				public Object getContenido () {
					return this.contenido;
				}

				public Boolean contenidoIsNullable(){
				    return true;
				}
				public Boolean contenidoIsKey(){
				    return false;
				}
				public Integer contenidoLength(){
				    return null;
				}
				public Integer contenidoPrecision(){
				    return null;
				}
				public String contenidoDefault(){
				
					return null;
				
				}
				public String contenidoComment(){
				
				    return "";
				
				}
				public String contenidoPattern(){
				
					return "";
				
				}
				public String contenidoOriginalDbColumnName(){
				
					return "contenido";
				
				}

				
			    public Integer padre_id;

				public Integer getPadre_id () {
					return this.padre_id;
				}

				public Boolean padre_idIsNullable(){
				    return true;
				}
				public Boolean padre_idIsKey(){
				    return false;
				}
				public Integer padre_idLength(){
				    return null;
				}
				public Integer padre_idPrecision(){
				    return null;
				}
				public String padre_idDefault(){
				
					return null;
				
				}
				public String padre_idComment(){
				
				    return "";
				
				}
				public String padre_idPattern(){
				
					return "";
				
				}
				public String padre_idOriginalDbColumnName(){
				
					return "padre_id";
				
				}

				
			    public java.util.Date fecha_inicio;

				public java.util.Date getFecha_inicio () {
					return this.fecha_inicio;
				}

				public Boolean fecha_inicioIsNullable(){
				    return true;
				}
				public Boolean fecha_inicioIsKey(){
				    return false;
				}
				public Integer fecha_inicioLength(){
				    return null;
				}
				public Integer fecha_inicioPrecision(){
				    return null;
				}
				public String fecha_inicioDefault(){
				
					return null;
				
				}
				public String fecha_inicioComment(){
				
				    return "";
				
				}
				public String fecha_inicioPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String fecha_inicioOriginalDbColumnName(){
				
					return "fecha_inicio";
				
				}

				
			    public java.util.Date fecha_fin;

				public java.util.Date getFecha_fin () {
					return this.fecha_fin;
				}

				public Boolean fecha_finIsNullable(){
				    return true;
				}
				public Boolean fecha_finIsKey(){
				    return false;
				}
				public Integer fecha_finLength(){
				    return null;
				}
				public Integer fecha_finPrecision(){
				    return null;
				}
				public String fecha_finDefault(){
				
					return null;
				
				}
				public String fecha_finComment(){
				
				    return "";
				
				}
				public String fecha_finPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String fecha_finOriginalDbColumnName(){
				
					return "fecha_fin";
				
				}

				
			    public Integer procesos_id;

				public Integer getProcesos_id () {
					return this.procesos_id;
				}

				public Boolean procesos_idIsNullable(){
				    return true;
				}
				public Boolean procesos_idIsKey(){
				    return false;
				}
				public Integer procesos_idLength(){
				    return null;
				}
				public Integer procesos_idPrecision(){
				    return null;
				}
				public String procesos_idDefault(){
				
					return null;
				
				}
				public String procesos_idComment(){
				
				    return "";
				
				}
				public String procesos_idPattern(){
				
					return "";
				
				}
				public String procesos_idOriginalDbColumnName(){
				
					return "proceso_id";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.estado = readInteger(dis);
					
					this.archivo = readString(dis);
					
						this.tarchivos_id = readInteger(dis);
					
						this.usuarios_id = readInteger(dis);
					
					this.codigo = readString(dis);
					
					this.archivofs = readString(dis);
					
					this.fecha = readDate(dis);
					
					this.extension = readString(dis);
					
						this.contenido = (Object) dis.readObject();
					
						this.padre_id = readInteger(dis);
					
					this.fecha_inicio = readDate(dis);
					
					this.fecha_fin = readDate(dis);
					
						this.procesos_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.estado = readInteger(dis);
					
					this.archivo = readString(dis);
					
						this.tarchivos_id = readInteger(dis);
					
						this.usuarios_id = readInteger(dis);
					
					this.codigo = readString(dis);
					
					this.archivofs = readString(dis);
					
					this.fecha = readDate(dis);
					
					this.extension = readString(dis);
					
						this.contenido = (Object) dis.readObject();
					
						this.padre_id = readInteger(dis);
					
					this.fecha_inicio = readDate(dis);
					
					this.fecha_fin = readDate(dis);
					
						this.procesos_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.estado,dos);
					
					// String
				
						writeString(this.archivo,dos);
					
					// Integer
				
						writeInteger(this.tarchivos_id,dos);
					
					// Integer
				
						writeInteger(this.usuarios_id,dos);
					
					// String
				
						writeString(this.codigo,dos);
					
					// String
				
						writeString(this.archivofs,dos);
					
					// java.util.Date
				
						writeDate(this.fecha,dos);
					
					// String
				
						writeString(this.extension,dos);
					
					// Object
				
       			    	dos.writeObject(this.contenido);
					
					// Integer
				
						writeInteger(this.padre_id,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_inicio,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_fin,dos);
					
					// Integer
				
						writeInteger(this.procesos_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.estado,dos);
					
					// String
				
						writeString(this.archivo,dos);
					
					// Integer
				
						writeInteger(this.tarchivos_id,dos);
					
					// Integer
				
						writeInteger(this.usuarios_id,dos);
					
					// String
				
						writeString(this.codigo,dos);
					
					// String
				
						writeString(this.archivofs,dos);
					
					// java.util.Date
				
						writeDate(this.fecha,dos);
					
					// String
				
						writeString(this.extension,dos);
					
					// Object
				
						dos.clearInstanceCache();
						dos.writeObject(this.contenido);
					
					// Integer
				
						writeInteger(this.padre_id,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_inicio,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_fin,dos);
					
					// Integer
				
						writeInteger(this.procesos_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("estado="+String.valueOf(estado));
		sb.append(",archivo="+archivo);
		sb.append(",tarchivos_id="+String.valueOf(tarchivos_id));
		sb.append(",usuarios_id="+String.valueOf(usuarios_id));
		sb.append(",codigo="+codigo);
		sb.append(",archivofs="+archivofs);
		sb.append(",fecha="+String.valueOf(fecha));
		sb.append(",extension="+extension);
		sb.append(",contenido="+String.valueOf(contenido));
		sb.append(",padre_id="+String.valueOf(padre_id));
		sb.append(",fecha_inicio="+String.valueOf(fecha_inicio));
		sb.append(",fecha_fin="+String.valueOf(fecha_fin));
		sb.append(",procesos_id="+String.valueOf(procesos_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row112Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row111Struct implements routines.system.IPersistableRow<row111Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer estado;

				public Integer getEstado () {
					return this.estado;
				}

				public Boolean estadoIsNullable(){
				    return true;
				}
				public Boolean estadoIsKey(){
				    return false;
				}
				public Integer estadoLength(){
				    return null;
				}
				public Integer estadoPrecision(){
				    return null;
				}
				public String estadoDefault(){
				
					return null;
				
				}
				public String estadoComment(){
				
				    return "";
				
				}
				public String estadoPattern(){
				
					return "";
				
				}
				public String estadoOriginalDbColumnName(){
				
					return "estado";
				
				}

				
			    public String archivo;

				public String getArchivo () {
					return this.archivo;
				}

				public Boolean archivoIsNullable(){
				    return true;
				}
				public Boolean archivoIsKey(){
				    return false;
				}
				public Integer archivoLength(){
				    return null;
				}
				public Integer archivoPrecision(){
				    return null;
				}
				public String archivoDefault(){
				
					return null;
				
				}
				public String archivoComment(){
				
				    return "";
				
				}
				public String archivoPattern(){
				
					return "";
				
				}
				public String archivoOriginalDbColumnName(){
				
					return "archivo";
				
				}

				
			    public Integer tarchivos_id;

				public Integer getTarchivos_id () {
					return this.tarchivos_id;
				}

				public Boolean tarchivos_idIsNullable(){
				    return true;
				}
				public Boolean tarchivos_idIsKey(){
				    return false;
				}
				public Integer tarchivos_idLength(){
				    return null;
				}
				public Integer tarchivos_idPrecision(){
				    return null;
				}
				public String tarchivos_idDefault(){
				
					return null;
				
				}
				public String tarchivos_idComment(){
				
				    return "";
				
				}
				public String tarchivos_idPattern(){
				
					return "";
				
				}
				public String tarchivos_idOriginalDbColumnName(){
				
					return "tarchivos_id";
				
				}

				
			    public Integer usuarios_id;

				public Integer getUsuarios_id () {
					return this.usuarios_id;
				}

				public Boolean usuarios_idIsNullable(){
				    return true;
				}
				public Boolean usuarios_idIsKey(){
				    return false;
				}
				public Integer usuarios_idLength(){
				    return null;
				}
				public Integer usuarios_idPrecision(){
				    return null;
				}
				public String usuarios_idDefault(){
				
					return null;
				
				}
				public String usuarios_idComment(){
				
				    return "";
				
				}
				public String usuarios_idPattern(){
				
					return "";
				
				}
				public String usuarios_idOriginalDbColumnName(){
				
					return "usuarios_id";
				
				}

				
			    public String codigo;

				public String getCodigo () {
					return this.codigo;
				}

				public Boolean codigoIsNullable(){
				    return true;
				}
				public Boolean codigoIsKey(){
				    return false;
				}
				public Integer codigoLength(){
				    return null;
				}
				public Integer codigoPrecision(){
				    return null;
				}
				public String codigoDefault(){
				
					return null;
				
				}
				public String codigoComment(){
				
				    return "";
				
				}
				public String codigoPattern(){
				
					return "";
				
				}
				public String codigoOriginalDbColumnName(){
				
					return "codigo";
				
				}

				
			    public String archivofs;

				public String getArchivofs () {
					return this.archivofs;
				}

				public Boolean archivofsIsNullable(){
				    return true;
				}
				public Boolean archivofsIsKey(){
				    return false;
				}
				public Integer archivofsLength(){
				    return null;
				}
				public Integer archivofsPrecision(){
				    return null;
				}
				public String archivofsDefault(){
				
					return null;
				
				}
				public String archivofsComment(){
				
				    return "";
				
				}
				public String archivofsPattern(){
				
					return "";
				
				}
				public String archivofsOriginalDbColumnName(){
				
					return "archivofs";
				
				}

				
			    public java.util.Date fecha;

				public java.util.Date getFecha () {
					return this.fecha;
				}

				public Boolean fechaIsNullable(){
				    return true;
				}
				public Boolean fechaIsKey(){
				    return false;
				}
				public Integer fechaLength(){
				    return null;
				}
				public Integer fechaPrecision(){
				    return null;
				}
				public String fechaDefault(){
				
					return null;
				
				}
				public String fechaComment(){
				
				    return "";
				
				}
				public String fechaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String fechaOriginalDbColumnName(){
				
					return "fecha";
				
				}

				
			    public String extension;

				public String getExtension () {
					return this.extension;
				}

				public Boolean extensionIsNullable(){
				    return true;
				}
				public Boolean extensionIsKey(){
				    return false;
				}
				public Integer extensionLength(){
				    return null;
				}
				public Integer extensionPrecision(){
				    return null;
				}
				public String extensionDefault(){
				
					return null;
				
				}
				public String extensionComment(){
				
				    return "";
				
				}
				public String extensionPattern(){
				
					return "";
				
				}
				public String extensionOriginalDbColumnName(){
				
					return "extension";
				
				}

				
			    public Object contenido;

				public Object getContenido () {
					return this.contenido;
				}

				public Boolean contenidoIsNullable(){
				    return true;
				}
				public Boolean contenidoIsKey(){
				    return false;
				}
				public Integer contenidoLength(){
				    return null;
				}
				public Integer contenidoPrecision(){
				    return null;
				}
				public String contenidoDefault(){
				
					return null;
				
				}
				public String contenidoComment(){
				
				    return "";
				
				}
				public String contenidoPattern(){
				
					return "";
				
				}
				public String contenidoOriginalDbColumnName(){
				
					return "contenido";
				
				}

				
			    public Integer padre_id;

				public Integer getPadre_id () {
					return this.padre_id;
				}

				public Boolean padre_idIsNullable(){
				    return true;
				}
				public Boolean padre_idIsKey(){
				    return false;
				}
				public Integer padre_idLength(){
				    return null;
				}
				public Integer padre_idPrecision(){
				    return null;
				}
				public String padre_idDefault(){
				
					return null;
				
				}
				public String padre_idComment(){
				
				    return "";
				
				}
				public String padre_idPattern(){
				
					return "";
				
				}
				public String padre_idOriginalDbColumnName(){
				
					return "padre_id";
				
				}

				
			    public java.util.Date fecha_inicio;

				public java.util.Date getFecha_inicio () {
					return this.fecha_inicio;
				}

				public Boolean fecha_inicioIsNullable(){
				    return true;
				}
				public Boolean fecha_inicioIsKey(){
				    return false;
				}
				public Integer fecha_inicioLength(){
				    return null;
				}
				public Integer fecha_inicioPrecision(){
				    return null;
				}
				public String fecha_inicioDefault(){
				
					return null;
				
				}
				public String fecha_inicioComment(){
				
				    return "";
				
				}
				public String fecha_inicioPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String fecha_inicioOriginalDbColumnName(){
				
					return "fecha_inicio";
				
				}

				
			    public java.util.Date fecha_fin;

				public java.util.Date getFecha_fin () {
					return this.fecha_fin;
				}

				public Boolean fecha_finIsNullable(){
				    return true;
				}
				public Boolean fecha_finIsKey(){
				    return false;
				}
				public Integer fecha_finLength(){
				    return null;
				}
				public Integer fecha_finPrecision(){
				    return null;
				}
				public String fecha_finDefault(){
				
					return null;
				
				}
				public String fecha_finComment(){
				
				    return "";
				
				}
				public String fecha_finPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String fecha_finOriginalDbColumnName(){
				
					return "fecha_fin";
				
				}

				
			    public Integer procesos_id;

				public Integer getProcesos_id () {
					return this.procesos_id;
				}

				public Boolean procesos_idIsNullable(){
				    return true;
				}
				public Boolean procesos_idIsKey(){
				    return false;
				}
				public Integer procesos_idLength(){
				    return null;
				}
				public Integer procesos_idPrecision(){
				    return null;
				}
				public String procesos_idDefault(){
				
					return null;
				
				}
				public String procesos_idComment(){
				
				    return "";
				
				}
				public String procesos_idPattern(){
				
					return "";
				
				}
				public String procesos_idOriginalDbColumnName(){
				
					return "proceso_id";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.estado = readInteger(dis);
					
					this.archivo = readString(dis);
					
						this.tarchivos_id = readInteger(dis);
					
						this.usuarios_id = readInteger(dis);
					
					this.codigo = readString(dis);
					
					this.archivofs = readString(dis);
					
					this.fecha = readDate(dis);
					
					this.extension = readString(dis);
					
						this.contenido = (Object) dis.readObject();
					
						this.padre_id = readInteger(dis);
					
					this.fecha_inicio = readDate(dis);
					
					this.fecha_fin = readDate(dis);
					
						this.procesos_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.estado = readInteger(dis);
					
					this.archivo = readString(dis);
					
						this.tarchivos_id = readInteger(dis);
					
						this.usuarios_id = readInteger(dis);
					
					this.codigo = readString(dis);
					
					this.archivofs = readString(dis);
					
					this.fecha = readDate(dis);
					
					this.extension = readString(dis);
					
						this.contenido = (Object) dis.readObject();
					
						this.padre_id = readInteger(dis);
					
					this.fecha_inicio = readDate(dis);
					
					this.fecha_fin = readDate(dis);
					
						this.procesos_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.estado,dos);
					
					// String
				
						writeString(this.archivo,dos);
					
					// Integer
				
						writeInteger(this.tarchivos_id,dos);
					
					// Integer
				
						writeInteger(this.usuarios_id,dos);
					
					// String
				
						writeString(this.codigo,dos);
					
					// String
				
						writeString(this.archivofs,dos);
					
					// java.util.Date
				
						writeDate(this.fecha,dos);
					
					// String
				
						writeString(this.extension,dos);
					
					// Object
				
       			    	dos.writeObject(this.contenido);
					
					// Integer
				
						writeInteger(this.padre_id,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_inicio,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_fin,dos);
					
					// Integer
				
						writeInteger(this.procesos_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.estado,dos);
					
					// String
				
						writeString(this.archivo,dos);
					
					// Integer
				
						writeInteger(this.tarchivos_id,dos);
					
					// Integer
				
						writeInteger(this.usuarios_id,dos);
					
					// String
				
						writeString(this.codigo,dos);
					
					// String
				
						writeString(this.archivofs,dos);
					
					// java.util.Date
				
						writeDate(this.fecha,dos);
					
					// String
				
						writeString(this.extension,dos);
					
					// Object
				
						dos.clearInstanceCache();
						dos.writeObject(this.contenido);
					
					// Integer
				
						writeInteger(this.padre_id,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_inicio,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_fin,dos);
					
					// Integer
				
						writeInteger(this.procesos_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("estado="+String.valueOf(estado));
		sb.append(",archivo="+archivo);
		sb.append(",tarchivos_id="+String.valueOf(tarchivos_id));
		sb.append(",usuarios_id="+String.valueOf(usuarios_id));
		sb.append(",codigo="+codigo);
		sb.append(",archivofs="+archivofs);
		sb.append(",fecha="+String.valueOf(fecha));
		sb.append(",extension="+extension);
		sb.append(",contenido="+String.valueOf(contenido));
		sb.append(",padre_id="+String.valueOf(padre_id));
		sb.append(",fecha_inicio="+String.valueOf(fecha_inicio));
		sb.append(",fecha_fin="+String.valueOf(fecha_fin));
		sb.append(",procesos_id="+String.valueOf(procesos_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row111Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row111Struct row111 = new row111Struct();
row112Struct row112 = new row112Struct();





	
	/**
	 * [tFileDelete_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_1", false);
		start_Hash.put("tFileDelete_1", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row112");
					}
				
		int tos_count_tFileDelete_1 = 0;
		

 



/**
 * [tFileDelete_1 begin ] stop
 */



	
	/**
	 * [tOracleOutput_36 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_36", false);
		start_Hash.put("tOracleOutput_36", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_36";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row111");
					}
				
		int tos_count_tOracleOutput_36 = 0;
		






    
    int nb_line_tOracleOutput_36 = 0;
    int nb_line_update_tOracleOutput_36 = 0;
    int nb_line_inserted_tOracleOutput_36 = 0;
    int nb_line_deleted_tOracleOutput_36 = 0;
    int nb_line_rejected_tOracleOutput_36 = 0;

    int tmp_batchUpdateCount_tOracleOutput_36 = 0;

    int deletedCount_tOracleOutput_36=0;
    int updatedCount_tOracleOutput_36=0;
    int insertedCount_tOracleOutput_36=0;
    int rowsToCommitCount_tOracleOutput_36=0;
    int rejectedCount_tOracleOutput_36=0;

    boolean whetherReject_tOracleOutput_36 = false;

    java.sql.Connection conn_tOracleOutput_36 = null;

    //optional table
    String dbschema_tOracleOutput_36 = null;
    String tableName_tOracleOutput_36 = null;
        dbschema_tOracleOutput_36 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_36 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_36=0;

        if(dbschema_tOracleOutput_36 == null || dbschema_tOracleOutput_36.trim().length() == 0) {
            tableName_tOracleOutput_36 = ("AFI_ARCHIVOS");
        } else {
            tableName_tOracleOutput_36 = dbschema_tOracleOutput_36 + "." + ("AFI_ARCHIVOS");
        }
                String insert_tOracleOutput_36 = "INSERT INTO " + tableName_tOracleOutput_36 + " (estado,archivo,tarchivos_id,usuarios_id,codigo,archivofs,fecha,extension,contenido,padre_id,fecha_inicio,fecha_fin,proceso_id) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_36 = conn_tOracleOutput_36.prepareStatement(insert_tOracleOutput_36);
                        resourceMap.put("pstmt_tOracleOutput_36", pstmt_tOracleOutput_36);

        class BlobTypeUtil_tOracleOutput_36 {
            public Object getBLOB(Object data, java.sql.Connection conn) throws java.sql.SQLException {
            	boolean containBlobFromOtherDB = false;
                if(!(data instanceof java.sql.Blob) || (data instanceof oracle.sql.BLOB && !containBlobFromOtherDB)) {
                	return data;
                }

                oracle.sql.BLOB blob = null;
                java.io.InputStream in = null;
                java.io.OutputStream out = null;
                try{
                	//in
                	java.sql.Blob blobData = (java.sql.Blob) data;
                	in = blobData.getBinaryStream();

                	//out
                	blob = oracle.sql.BLOB.createTemporary(conn, true, oracle.sql.BLOB.DURATION_SESSION);
                    blob.open(oracle.sql.BLOB.MODE_READWRITE);
                    //blob = conn.createBlob(); oracle jdbc don't support it
                	out = blob.setBinaryStream(1);

                    byte[] cache = new byte[8192];
                    int len = 0;
                    while ((len = in.read(cache)) != -1) {
                        out.write(cache, 0, len);
                    }

                    return blob;
                } catch(java.sql.SQLException sqlexp){
globalMap.put("tOracleOutput_36_ERROR_MESSAGE",sqlexp.getMessage());
                	if(blob!=null) {
                		try {
                    		blob.freeTemporary();
                    	} catch(java.sql.SQLException e_tOracleOutput_36) {
                    		//keep quiet
                    	}
                    }
                    sqlexp.printStackTrace();
                } catch(java.lang.Exception exp){
globalMap.put("tOracleOutput_36_ERROR_MESSAGE",exp.getMessage());
                   	if(blob!=null) {
                		try {
                    		blob.freeTemporary();
                    	} catch(java.sql.SQLException e_tOracleOutput_36) {
                    		//keep quiet
                    	}
                    }
                    exp.printStackTrace();
                } finally {
                	if(out!=null) {
                		try {
                			out.flush();
                    		out.close();
                    	} catch(java.io.IOException e_tOracleOutput_36) {
                    		//keep quiet
                    	}
                    }

            	 	if(in!=null) {
                		try {
                    		in.close();
                    	} catch(java.io.IOException e_tOracleOutput_36) {
                    		//keep quiet
                    	}
                    }

                    if(blob!=null) {
                		try {
                    		blob.close();
                    	} catch(java.sql.SQLException e_tOracleOutput_36) {
                    		//keep quiet
                    	}
                    }
                }

                return null;

            }

        }
        BlobTypeUtil_tOracleOutput_36 blobTypeUtil_tOracleOutput_36=new BlobTypeUtil_tOracleOutput_36();





 



/**
 * [tOracleOutput_36 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_15", false);
		start_Hash.put("tFixedFlowInput_15", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_15";
	
	
		int tos_count_tFixedFlowInput_15 = 0;
		

	    for (int i_tFixedFlowInput_15 = 0 ; i_tFixedFlowInput_15 < 1 ; i_tFixedFlowInput_15++) {
	                	            	
    	            		row111.estado = 7;
    	            	        	            	
    	            		row111.archivo = "AFI_RESUMEN_ACTMSV.txt";
    	            	        	            	
    	            		row111.tarchivos_id = 16;
    	            	        	            	
    	            		row111.usuarios_id = context.vusuarios_id;
    	            	        	            	
    	            		row111.codigo = "AFI_ACTMSV";
    	            	        	            	
    	            		row111.archivofs = "AFI_RESUMEN_ACTMSV";
    	            	        	            	
    	            		row111.fecha = TalendDate.getCurrentDate();
    	            	        	            	
    	            		row111.extension = "txt";
    	            	        	            	
    	            		row111.contenido = ExtraerBlob.ByteArrayFromFile(context.PATH+"/AFI_RESUMEN_ACTMSV"+context.vafiarchivos_id+".txt");
    	            	        	            	
    	            		row111.padre_id = context.vafiarchivos_id;
    	            	        	            	
    	            		row111.fecha_inicio = context.vfinicio;
    	            	        	            	
    	            		row111.fecha_fin = TalendDate.getCurrentDate();
    	            	        	            	
    	            		row111.procesos_id = context.vprocesos_id;
    	            	

 



/**
 * [tFixedFlowInput_15 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_15 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_15";
	
	

 


	tos_count_tFixedFlowInput_15++;

/**
 * [tFixedFlowInput_15 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_15";
	
	

 



/**
 * [tFixedFlowInput_15 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_36 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_36";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row111"
						
						);
					}
					



            row112 = null;
        whetherReject_tOracleOutput_36 = false;
                        if(row111.estado == null) {
pstmt_tOracleOutput_36.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_36.setInt(1, row111.estado);
}

                        if(row111.archivo == null) {
pstmt_tOracleOutput_36.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_36.setString(2, row111.archivo);
}

                        if(row111.tarchivos_id == null) {
pstmt_tOracleOutput_36.setNull(3, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_36.setInt(3, row111.tarchivos_id);
}

                        if(row111.usuarios_id == null) {
pstmt_tOracleOutput_36.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_36.setInt(4, row111.usuarios_id);
}

                        if(row111.codigo == null) {
pstmt_tOracleOutput_36.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_36.setString(5, row111.codigo);
}

                        if(row111.archivofs == null) {
pstmt_tOracleOutput_36.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_36.setString(6, row111.archivofs);
}

                        if(row111.fecha != null) {
pstmt_tOracleOutput_36.setObject(7, new java.sql.Timestamp(row111.fecha.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_36.setNull(7, java.sql.Types.DATE);
}

                        if(row111.extension == null) {
pstmt_tOracleOutput_36.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_36.setString(8, row111.extension);
}

                        if(row111.contenido == null) {
pstmt_tOracleOutput_36.setNull(9, java.sql.Types.BLOB);
} else {pstmt_tOracleOutput_36.setObject(9,  blobTypeUtil_tOracleOutput_36.getBLOB(row111.contenido, conn_tOracleOutput_36));
}

                        if(row111.padre_id == null) {
pstmt_tOracleOutput_36.setNull(10, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_36.setInt(10, row111.padre_id);
}

                        if(row111.fecha_inicio != null) {
pstmt_tOracleOutput_36.setObject(11, new java.sql.Timestamp(row111.fecha_inicio.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_36.setNull(11, java.sql.Types.DATE);
}

                        if(row111.fecha_fin != null) {
pstmt_tOracleOutput_36.setObject(12, new java.sql.Timestamp(row111.fecha_fin.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_36.setNull(12, java.sql.Types.DATE);
}

                        if(row111.procesos_id == null) {
pstmt_tOracleOutput_36.setNull(13, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_36.setInt(13, row111.procesos_id);
}

                try {
                    nb_line_tOracleOutput_36++;
                    int processedCount_tOracleOutput_36 = pstmt_tOracleOutput_36.executeUpdate();
                    insertedCount_tOracleOutput_36 += processedCount_tOracleOutput_36;
                    rowsToCommitCount_tOracleOutput_36 += processedCount_tOracleOutput_36;
                } catch(java.lang.Exception e_tOracleOutput_36) {
globalMap.put("tOracleOutput_36_ERROR_MESSAGE",e_tOracleOutput_36.getMessage());
                    whetherReject_tOracleOutput_36 = true;
                            System.err.print(e_tOracleOutput_36.getMessage());
                }
            if(!whetherReject_tOracleOutput_36) {
                            row112 = new row112Struct();
                                row112.estado = row111.estado;
                                row112.archivo = row111.archivo;
                                row112.tarchivos_id = row111.tarchivos_id;
                                row112.usuarios_id = row111.usuarios_id;
                                row112.codigo = row111.codigo;
                                row112.archivofs = row111.archivofs;
                                row112.fecha = row111.fecha;
                                row112.extension = row111.extension;
                                row112.contenido = row111.contenido;
                                row112.padre_id = row111.padre_id;
                                row112.fecha_inicio = row111.fecha_inicio;
                                row112.fecha_fin = row111.fecha_fin;
                                row112.procesos_id = row111.procesos_id;
            }

 


	tos_count_tOracleOutput_36++;

/**
 * [tOracleOutput_36 main ] stop
 */
	
	/**
	 * [tOracleOutput_36 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_36";
	
	

 



/**
 * [tOracleOutput_36 process_data_begin ] stop
 */
// Start of branch "row112"
if(row112 != null) { 



	
	/**
	 * [tFileDelete_1 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row112"
						
						);
					}
					

 

class DeleteFoldertFileDelete_1{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
    java.io.File file_tFileDelete_1=new java.io.File(context.PATH+"/AFI_RESUMEN_ACTMSV"+context.vafiarchivos_id+".txt");
    if(file_tFileDelete_1.exists()&& file_tFileDelete_1.isFile()){
    	if(file_tFileDelete_1.delete()){
    		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File deleted.");
		}else{
			globalMap.put("tFileDelete_1_CURRENT_STATUS", "No file deleted.");
				throw new RuntimeException("File " + file_tFileDelete_1.getAbsolutePath() + " can not be deleted.");
		}
	}else{
		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File does not exist or is invalid.");
			throw new RuntimeException("File " + file_tFileDelete_1.getAbsolutePath() + " does not exist or is invalid or is not a file.");
	}
	globalMap.put("tFileDelete_1_DELETE_PATH",context.PATH+"/AFI_RESUMEN_ACTMSV"+context.vafiarchivos_id+".txt");
 


	tos_count_tFileDelete_1++;

/**
 * [tFileDelete_1 main ] stop
 */
	
	/**
	 * [tFileDelete_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	

 



/**
 * [tFileDelete_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileDelete_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	

 



/**
 * [tFileDelete_1 process_data_end ] stop
 */

} // End of branch "row112"




	
	/**
	 * [tOracleOutput_36 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_36";
	
	

 



/**
 * [tOracleOutput_36 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_15";
	
	

 



/**
 * [tFixedFlowInput_15 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_15 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_15";
	
	

        }
        globalMap.put("tFixedFlowInput_15_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_15", true);
end_Hash.put("tFixedFlowInput_15", System.currentTimeMillis());




/**
 * [tFixedFlowInput_15 end ] stop
 */

	
	/**
	 * [tOracleOutput_36 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_36";
	
	
	



	
        if(pstmt_tOracleOutput_36 != null) {
			
				pstmt_tOracleOutput_36.close();
				resourceMap.remove("pstmt_tOracleOutput_36");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_36", true);

	
	nb_line_deleted_tOracleOutput_36=nb_line_deleted_tOracleOutput_36+ deletedCount_tOracleOutput_36;
	nb_line_update_tOracleOutput_36=nb_line_update_tOracleOutput_36 + updatedCount_tOracleOutput_36;
	nb_line_inserted_tOracleOutput_36=nb_line_inserted_tOracleOutput_36 + insertedCount_tOracleOutput_36;
	nb_line_rejected_tOracleOutput_36=nb_line_rejected_tOracleOutput_36 + rejectedCount_tOracleOutput_36;
	
        globalMap.put("tOracleOutput_36_NB_LINE",nb_line_tOracleOutput_36);
        globalMap.put("tOracleOutput_36_NB_LINE_UPDATED",nb_line_update_tOracleOutput_36);
        globalMap.put("tOracleOutput_36_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_36);
        globalMap.put("tOracleOutput_36_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_36);
        globalMap.put("tOracleOutput_36_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_36);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row111");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_36", true);
end_Hash.put("tOracleOutput_36", System.currentTimeMillis());




/**
 * [tOracleOutput_36 end ] stop
 */

	
	/**
	 * [tFileDelete_1 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row112");
			  	}
			  	
 

ok_Hash.put("tFileDelete_1", true);
end_Hash.put("tFileDelete_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk39", 0, "ok");
				}
				tFixedFlowInput_16Process(globalMap);



/**
 * [tFileDelete_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_15 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_15";
	
	

 



/**
 * [tFixedFlowInput_15 finally ] stop
 */

	
	/**
	 * [tOracleOutput_36 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_36";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_36") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_36 = null;
                if ((pstmtToClose_tOracleOutput_36 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_36")) != null) {
                    pstmtToClose_tOracleOutput_36.close();
                }
    }
 



/**
 * [tOracleOutput_36 finally ] stop
 */

	
	/**
	 * [tFileDelete_1 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	

 



/**
 * [tFileDelete_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_15_SUBPROCESS_STATE", 1);
	}
	


public static class row113Struct implements routines.system.IPersistableRow<row113Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer archivos_id_;

				public Integer getArchivos_id_ () {
					return this.archivos_id_;
				}

				public Boolean archivos_id_IsNullable(){
				    return true;
				}
				public Boolean archivos_id_IsKey(){
				    return false;
				}
				public Integer archivos_id_Length(){
				    return null;
				}
				public Integer archivos_id_Precision(){
				    return null;
				}
				public String archivos_id_Default(){
				
					return null;
				
				}
				public String archivos_id_Comment(){
				
				    return "";
				
				}
				public String archivos_id_Pattern(){
				
					return "";
				
				}
				public String archivos_id_OriginalDbColumnName(){
				
					return "archivos_id_";
				
				}

				
			    public Integer estado_;

				public Integer getEstado_ () {
					return this.estado_;
				}

				public Boolean estado_IsNullable(){
				    return true;
				}
				public Boolean estado_IsKey(){
				    return false;
				}
				public Integer estado_Length(){
				    return null;
				}
				public Integer estado_Precision(){
				    return null;
				}
				public String estado_Default(){
				
					return null;
				
				}
				public String estado_Comment(){
				
				    return "";
				
				}
				public String estado_Pattern(){
				
					return "";
				
				}
				public String estado_OriginalDbColumnName(){
				
					return "estado_";
				
				}

				
			    public java.util.Date finicio_;

				public java.util.Date getFinicio_ () {
					return this.finicio_;
				}

				public Boolean finicio_IsNullable(){
				    return true;
				}
				public Boolean finicio_IsKey(){
				    return false;
				}
				public Integer finicio_Length(){
				    return null;
				}
				public Integer finicio_Precision(){
				    return null;
				}
				public String finicio_Default(){
				
					return null;
				
				}
				public String finicio_Comment(){
				
				    return "";
				
				}
				public String finicio_Pattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String finicio_OriginalDbColumnName(){
				
					return "finicio_";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.archivos_id_ = readInteger(dis);
					
						this.estado_ = readInteger(dis);
					
					this.finicio_ = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.archivos_id_ = readInteger(dis);
					
						this.estado_ = readInteger(dis);
					
					this.finicio_ = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.archivos_id_,dos);
					
					// Integer
				
						writeInteger(this.estado_,dos);
					
					// java.util.Date
				
						writeDate(this.finicio_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.archivos_id_,dos);
					
					// Integer
				
						writeInteger(this.estado_,dos);
					
					// java.util.Date
				
						writeDate(this.finicio_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("archivos_id_="+String.valueOf(archivos_id_));
		sb.append(",estado_="+String.valueOf(estado_));
		sb.append(",finicio_="+String.valueOf(finicio_));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row113Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_16_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row113Struct row113 = new row113Struct();




	
	/**
	 * [tOracleSP_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_8", false);
		start_Hash.put("tOracleSP_8", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row113");
					}
				
		int tos_count_tOracleSP_8 = 0;
		

	java.sql.Connection connection_tOracleSP_8 = null;
	connection_tOracleSP_8 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_1");
	

java.sql.CallableStatement statement_tOracleSP_8 = connection_tOracleSP_8.prepareCall("{call " + "cms2.updestadoarchivo" + "(?,?,?)}");

java.sql.Timestamp tmpDate_tOracleSP_8;
String tmpString_tOracleSP_8;

 



/**
 * [tOracleSP_8 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_16", false);
		start_Hash.put("tFixedFlowInput_16", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_16";
	
	
		int tos_count_tFixedFlowInput_16 = 0;
		

	    for (int i_tFixedFlowInput_16 = 0 ; i_tFixedFlowInput_16 < 1 ; i_tFixedFlowInput_16++) {
	                	            	
    	            		row113.archivos_id_ = context.vafiarchivos_id;
    	            	        	            	
    	            		row113.estado_ = 6;
    	            	        	            	
    	            		row113.finicio_ = context.vfinicio;
    	            	

 



/**
 * [tFixedFlowInput_16 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_16 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_16";
	
	

 


	tos_count_tFixedFlowInput_16++;

/**
 * [tFixedFlowInput_16 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_16";
	
	

 



/**
 * [tFixedFlowInput_16 process_data_begin ] stop
 */

	
	/**
	 * [tOracleSP_8 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row113"
						
						);
					}
					

			// code for the argument 1 (archivos_id_) of type 'IN AUTOMAPPING'
    					if (row113.archivos_id_ == null) {
    						statement_tOracleSP_8.setNull(1, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_8.setInt(1, row113.archivos_id_);
    					}
    					
			// code for the argument 2 (estado_) of type 'IN AUTOMAPPING'
    					if (row113.estado_ == null) {
    						statement_tOracleSP_8.setNull(2, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_8.setInt(2, row113.estado_);
    					}
    					
			// code for the argument 3 (finicio_) of type 'IN TIMESTAMP'
    					if (row113.finicio_ == null) {
    						statement_tOracleSP_8.setNull(3, java.sql.Types.DATE);
    					} else {
    					
    					statement_tOracleSP_8.setTimestamp(3, new java.sql.Timestamp(row113.finicio_.getTime()));
    					
    					}
    					
		statement_tOracleSP_8.execute();
		

 


	tos_count_tOracleSP_8++;

/**
 * [tOracleSP_8 main ] stop
 */
	
	/**
	 * [tOracleSP_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_8";
	
	

 



/**
 * [tOracleSP_8 process_data_begin ] stop
 */
	
	/**
	 * [tOracleSP_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_8";
	
	

 



/**
 * [tOracleSP_8 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_16";
	
	

 



/**
 * [tFixedFlowInput_16 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_16 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_16";
	
	

        }
        globalMap.put("tFixedFlowInput_16_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_16", true);
end_Hash.put("tFixedFlowInput_16", System.currentTimeMillis());




/**
 * [tFixedFlowInput_16 end ] stop
 */

	
	/**
	 * [tOracleSP_8 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_8";
	
	


	statement_tOracleSP_8.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row113");
			  	}
			  	
 

ok_Hash.put("tOracleSP_8", true);
end_Hash.put("tOracleSP_8", System.currentTimeMillis());




/**
 * [tOracleSP_8 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_16 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_16";
	
	

 



/**
 * [tFixedFlowInput_16 finally ] stop
 */

	
	/**
	 * [tOracleSP_8 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_8";
	
	

 



/**
 * [tOracleSP_8 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_16_SUBPROCESS_STATE", 1);
	}
	


public static class row114Struct implements routines.system.IPersistableRow<row114Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 5;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 100;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String TEXTO;

				public String getTEXTO () {
					return this.TEXTO;
				}

				public Boolean TEXTOIsNullable(){
				    return true;
				}
				public Boolean TEXTOIsKey(){
				    return false;
				}
				public Integer TEXTOLength(){
				    return 4000;
				}
				public Integer TEXTOPrecision(){
				    return 0;
				}
				public String TEXTODefault(){
				
					return null;
				
				}
				public String TEXTOComment(){
				
				    return "";
				
				}
				public String TEXTOPattern(){
				
					return "";
				
				}
				public String TEXTOOriginalDbColumnName(){
				
					return "TEXTO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.TEXTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.TEXTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.TEXTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.TEXTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SIGLA="+SIGLA);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",TEXTO="+TEXTO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row114Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row114Struct row114 = new row114Struct();




	
	/**
	 * [tFileOutputPositional_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputPositional_1", false);
		start_Hash.put("tFileOutputPositional_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputPositional_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row114");
					}
				
		int tos_count_tFileOutputPositional_1 = 0;
		

        if (false) {
            throw new RuntimeException("tFileOutputPositional doesn't support to work with tSetDynamicSchema when 'Guess schema from file' option is activated");
        }
		int nb_line_tFileOutputPositional_1 = 0;
		resourceMap.put("nb_line_tFileOutputPositional_1", nb_line_tFileOutputPositional_1);
				
		class PositionUtil_tFileOutputPositional_1{
		
              void writeHeader_0(String tempStringBtFileOutputPositional_1,int tempLengthBtFileOutputPositional_1,final java.io.BufferedWriter outtFileOutputPositional_1)throws IOException,java.io.UnsupportedEncodingException{
              
                 int tempLengthMtFileOutputPositional_1= 0;
    			//get  and format output String begin				
    			tempStringBtFileOutputPositional_1="SIGLA";
    			
    			tempLengthBtFileOutputPositional_1=tempStringBtFileOutputPositional_1.length();
    			
    			
            	if (tempLengthBtFileOutputPositional_1 > 10) {
                }else if(tempLengthBtFileOutputPositional_1<10){
                    StringBuilder resulttFileOutputPositional_1 = new StringBuilder();
                        resulttFileOutputPositional_1.append(tempStringBtFileOutputPositional_1);
                        for(int itFileOutputPositional_1=0; itFileOutputPositional_1< 10-tempLengthBtFileOutputPositional_1; itFileOutputPositional_1++){
                            resulttFileOutputPositional_1.append(' ');
                        }
                        tempStringBtFileOutputPositional_1 = resulttFileOutputPositional_1.toString();       
                }
                //get  and format output String end
    			outtFileOutputPositional_1.write(tempStringBtFileOutputPositional_1);
    			//get  and format output String begin				
    			tempStringBtFileOutputPositional_1="DOCUMENTO";
    			
    			tempLengthBtFileOutputPositional_1=tempStringBtFileOutputPositional_1.length();
    			
    			
            	if (tempLengthBtFileOutputPositional_1 > 20) {
                }else if(tempLengthBtFileOutputPositional_1<20){
                    StringBuilder resulttFileOutputPositional_1 = new StringBuilder();
                        resulttFileOutputPositional_1.append(tempStringBtFileOutputPositional_1);
                        for(int itFileOutputPositional_1=0; itFileOutputPositional_1< 20-tempLengthBtFileOutputPositional_1; itFileOutputPositional_1++){
                            resulttFileOutputPositional_1.append(' ');
                        }
                        tempStringBtFileOutputPositional_1 = resulttFileOutputPositional_1.toString();       
                }
                //get  and format output String end
    			outtFileOutputPositional_1.write(tempStringBtFileOutputPositional_1);
    			//get  and format output String begin				
    			tempStringBtFileOutputPositional_1="TEXTO";
    			
    			tempLengthBtFileOutputPositional_1=tempStringBtFileOutputPositional_1.length();
    			
    			
            	if (tempLengthBtFileOutputPositional_1 > 4000) {
                }else if(tempLengthBtFileOutputPositional_1<4000){
                    StringBuilder resulttFileOutputPositional_1 = new StringBuilder();
                        resulttFileOutputPositional_1.append(tempStringBtFileOutputPositional_1);
                        for(int itFileOutputPositional_1=0; itFileOutputPositional_1< 4000-tempLengthBtFileOutputPositional_1; itFileOutputPositional_1++){
                            resulttFileOutputPositional_1.append(' ');
                        }
                        tempStringBtFileOutputPositional_1 = resulttFileOutputPositional_1.toString();       
                }
                //get  and format output String end
    			outtFileOutputPositional_1.write(tempStringBtFileOutputPositional_1);
              }  
				  void setValue_0(final row114Struct row114,StringBuilder sb_tFileOutputPositional_1,String tempStringMtFileOutputPositional_1,int tempLengthMtFileOutputPositional_1)throws IOException,java.io.UnsupportedEncodingException{
				//get  and format output String begin
    			tempStringMtFileOutputPositional_1=
					(row114.SIGLA == null) ? 
					"": row114.SIGLA ;
				
    			tempLengthMtFileOutputPositional_1=tempStringMtFileOutputPositional_1.length();
    			
    			
            	if (tempLengthMtFileOutputPositional_1 >=10) {
                        sb_tFileOutputPositional_1.append(tempStringMtFileOutputPositional_1);
                }else if(tempLengthMtFileOutputPositional_1<10){
                   
                        sb_tFileOutputPositional_1.append(tempStringMtFileOutputPositional_1);
                        for(int i_tFileOutputPositional_1=0; i_tFileOutputPositional_1< 10-tempLengthMtFileOutputPositional_1; i_tFileOutputPositional_1++){
                            sb_tFileOutputPositional_1.append(' ');
                        }
                               
                }
                //get  and format output String end				
			
				//get  and format output String begin
    			tempStringMtFileOutputPositional_1=
					(row114.DOCUMENTO == null) ? 
					"": row114.DOCUMENTO ;
				
    			tempLengthMtFileOutputPositional_1=tempStringMtFileOutputPositional_1.length();
    			
    			
            	if (tempLengthMtFileOutputPositional_1 >=20) {
                        sb_tFileOutputPositional_1.append(tempStringMtFileOutputPositional_1);
                }else if(tempLengthMtFileOutputPositional_1<20){
                   
                        sb_tFileOutputPositional_1.append(tempStringMtFileOutputPositional_1);
                        for(int i_tFileOutputPositional_1=0; i_tFileOutputPositional_1< 20-tempLengthMtFileOutputPositional_1; i_tFileOutputPositional_1++){
                            sb_tFileOutputPositional_1.append(' ');
                        }
                               
                }
                //get  and format output String end				
			
				//get  and format output String begin
    			tempStringMtFileOutputPositional_1=
					(row114.TEXTO == null) ? 
					"": row114.TEXTO ;
				
    			tempLengthMtFileOutputPositional_1=tempStringMtFileOutputPositional_1.length();
    			
    			
            	if (tempLengthMtFileOutputPositional_1 >=4000) {
                        sb_tFileOutputPositional_1.append(tempStringMtFileOutputPositional_1);
                }else if(tempLengthMtFileOutputPositional_1<4000){
                   
                        sb_tFileOutputPositional_1.append(tempStringMtFileOutputPositional_1);
                        for(int i_tFileOutputPositional_1=0; i_tFileOutputPositional_1< 4000-tempLengthMtFileOutputPositional_1; i_tFileOutputPositional_1++){
                            sb_tFileOutputPositional_1.append(' ');
                        }
                               
                }
                //get  and format output String end				
			
                   }
		
		}
		
		PositionUtil_tFileOutputPositional_1 positionUtil_tFileOutputPositional_1=new PositionUtil_tFileOutputPositional_1();
		
		String fileNewName_tFileOutputPositional_1 = context.PATH+"/ERR_AFI_ACTMSV"+context.vafiarchivos_id+".txt";
		java.io.File createFiletFileOutputPositional_1 = new java.io.File(fileNewName_tFileOutputPositional_1);
		boolean isFileGenerated_tFileOutputPositional_1 = true;
		resourceMap.put("createFiletFileOutputPositional_1", createFiletFileOutputPositional_1);
		resourceMap.put("isFileGenerated_tFileOutputPositional_1", isFileGenerated_tFileOutputPositional_1);
		if(createFiletFileOutputPositional_1.exists()){
			isFileGenerated_tFileOutputPositional_1 = false;
			resourceMap.put("isFileGenerated_tFileOutputPositional_1", isFileGenerated_tFileOutputPositional_1);
		}
        //create directory only if not exists
        java.io.File parentFile_tFileOutputPositional_1 = createFiletFileOutputPositional_1.getParentFile();
        if(parentFile_tFileOutputPositional_1 != null && !parentFile_tFileOutputPositional_1.exists()) {
            parentFile_tFileOutputPositional_1.mkdirs();
        }
		final java.io.BufferedWriter outtFileOutputPositional_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
        		new java.io.FileOutputStream(fileNewName_tFileOutputPositional_1, true),"ISO-8859-15"));
        		resourceMap.put("outtFileOutputPositional_1", outtFileOutputPositional_1);
		if(createFiletFileOutputPositional_1.length()==0){
    		
    		String tempStringBtFileOutputPositional_1=null;
    		int tempLengthBtFileOutputPositional_1=0;
            positionUtil_tFileOutputPositional_1.writeHeader_0(tempStringBtFileOutputPositional_1,tempLengthBtFileOutputPositional_1,outtFileOutputPositional_1);
    		outtFileOutputPositional_1.write("\n");
    	}

 



/**
 * [tFileOutputPositional_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_11", false);
		start_Hash.put("tOracleInput_11", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_11";
	
	
		int tos_count_tOracleInput_11 = 0;
		
	


	
		    int nb_line_tOracleInput_11 = 0;
		    java.sql.Connection conn_tOracleInput_11 = null;
				conn_tOracleInput_11 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_11 = false;
				boolean isConnectionWrapped_tOracleInput_11 = !(conn_tOracleInput_11 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_11.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_11 = null;
                if (isConnectionWrapped_tOracleInput_11) {
					unwrappedOraConn_tOracleInput_11 = conn_tOracleInput_11.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_11 != null) {
                        isTimeZoneNull_tOracleInput_11 = (unwrappedOraConn_tOracleInput_11.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_11 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_11).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_11) {
					java.sql.Statement stmtGetTZ_tOracleInput_11 = conn_tOracleInput_11.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_11 = stmtGetTZ_tOracleInput_11.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_11 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_11.next()) {
						sessionTimezone_tOracleInput_11 = rsGetTZ_tOracleInput_11.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_11 && unwrappedOraConn_tOracleInput_11 != null) {
                        unwrappedOraConn_tOracleInput_11.setSessionTimeZone(sessionTimezone_tOracleInput_11);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_11).setSessionTimeZone(sessionTimezone_tOracleInput_11);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_11 = conn_tOracleInput_11.createStatement();

		    String dbquery_tOracleInput_11 = "SELECT GT.SIGLA, \n       TE.DOCUMENTO, \n       TE.MENSAJE AS TEXTO\nFROM TST_ERRCMASIVO TE\nLEFT JOIN GEN_TDOCUMENTOS"
+" GT ON GT.ID = TE.TDOCUMENTOS_ID";
		    

		    globalMap.put("tOracleInput_11_QUERY",dbquery_tOracleInput_11);

		    java.sql.ResultSet rs_tOracleInput_11 = null;

		    try {
		    	rs_tOracleInput_11 = stmt_tOracleInput_11.executeQuery(dbquery_tOracleInput_11);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_11 = rs_tOracleInput_11.getMetaData();
		    	int colQtyInRs_tOracleInput_11 = rsmd_tOracleInput_11.getColumnCount();

		    String tmpContent_tOracleInput_11 = null;
		    
		    
		    while (rs_tOracleInput_11.next()) {
		        nb_line_tOracleInput_11++;
		        
							if(colQtyInRs_tOracleInput_11 < 1) {
								row114.SIGLA = null;
							} else {
	                         		
        	row114.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_11, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_11 < 2) {
								row114.DOCUMENTO = null;
							} else {
	                         		
        	row114.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_11, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_11 < 3) {
								row114.TEXTO = null;
							} else {
	                         		
        	row114.TEXTO = routines.system.JDBCUtil.getString(rs_tOracleInput_11, 3, false);
		                    }
					




 



/**
 * [tOracleInput_11 begin ] stop
 */
	
	/**
	 * [tOracleInput_11 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 


	tos_count_tOracleInput_11++;

/**
 * [tOracleInput_11 main ] stop
 */
	
	/**
	 * [tOracleInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 



/**
 * [tOracleInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputPositional_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputPositional_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row114"
						
						);
					}
					



				String tempStringMtFileOutputPositional_1= null;
				
				int tempLengthMtFileOutputPositional_1= 0;
				
				StringBuilder sb_tFileOutputPositional_1 = new StringBuilder();
    				positionUtil_tFileOutputPositional_1.setValue_0(row114,sb_tFileOutputPositional_1,tempStringMtFileOutputPositional_1,tempLengthMtFileOutputPositional_1);
			sb_tFileOutputPositional_1.append("\n");
			
			outtFileOutputPositional_1.write(sb_tFileOutputPositional_1.toString());
    		
    		 						
			nb_line_tFileOutputPositional_1++;
			resourceMap.put("nb_line_tFileOutputPositional_1", nb_line_tFileOutputPositional_1);

 


	tos_count_tFileOutputPositional_1++;

/**
 * [tFileOutputPositional_1 main ] stop
 */
	
	/**
	 * [tFileOutputPositional_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputPositional_1";
	
	

 



/**
 * [tFileOutputPositional_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputPositional_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputPositional_1";
	
	

 



/**
 * [tFileOutputPositional_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 



/**
 * [tOracleInput_11 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_11 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

}
}finally{
	if (rs_tOracleInput_11 != null) {
		rs_tOracleInput_11.close();
	}
	if (stmt_tOracleInput_11 != null) {
		stmt_tOracleInput_11.close();
	}
}

globalMap.put("tOracleInput_11_NB_LINE",nb_line_tOracleInput_11);
 

ok_Hash.put("tOracleInput_11", true);
end_Hash.put("tOracleInput_11", System.currentTimeMillis());




/**
 * [tOracleInput_11 end ] stop
 */

	
	/**
	 * [tFileOutputPositional_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputPositional_1";
	
	
	
	
	
	
	outtFileOutputPositional_1.close();
	
	globalMap.put("tFileOutputPositional_1_NB_LINE",nb_line_tFileOutputPositional_1);


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row114");
			  	}
			  	
 

ok_Hash.put("tFileOutputPositional_1", true);
end_Hash.put("tFileOutputPositional_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk37", 0, "ok");
				}
				tFixedFlowInput_17Process(globalMap);



/**
 * [tFileOutputPositional_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_11 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 



/**
 * [tOracleInput_11 finally ] stop
 */

	
	/**
	 * [tFileOutputPositional_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputPositional_1";
	
	
	
	
	
	java.io.Writer outtFileOutputPositional_1 = (java.io.Writer)resourceMap.get("outtFileOutputPositional_1");
	outtFileOutputPositional_1.close();
	

 



/**
 * [tFileOutputPositional_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_11_SUBPROCESS_STATE", 1);
	}
	


public static class row117Struct implements routines.system.IPersistableRow<row117Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer estado;

				public Integer getEstado () {
					return this.estado;
				}

				public Boolean estadoIsNullable(){
				    return true;
				}
				public Boolean estadoIsKey(){
				    return false;
				}
				public Integer estadoLength(){
				    return null;
				}
				public Integer estadoPrecision(){
				    return null;
				}
				public String estadoDefault(){
				
					return null;
				
				}
				public String estadoComment(){
				
				    return "";
				
				}
				public String estadoPattern(){
				
					return "";
				
				}
				public String estadoOriginalDbColumnName(){
				
					return "estado";
				
				}

				
			    public String archivo;

				public String getArchivo () {
					return this.archivo;
				}

				public Boolean archivoIsNullable(){
				    return true;
				}
				public Boolean archivoIsKey(){
				    return false;
				}
				public Integer archivoLength(){
				    return null;
				}
				public Integer archivoPrecision(){
				    return null;
				}
				public String archivoDefault(){
				
					return null;
				
				}
				public String archivoComment(){
				
				    return "";
				
				}
				public String archivoPattern(){
				
					return "";
				
				}
				public String archivoOriginalDbColumnName(){
				
					return "archivo";
				
				}

				
			    public Integer tarchivos_id;

				public Integer getTarchivos_id () {
					return this.tarchivos_id;
				}

				public Boolean tarchivos_idIsNullable(){
				    return true;
				}
				public Boolean tarchivos_idIsKey(){
				    return false;
				}
				public Integer tarchivos_idLength(){
				    return null;
				}
				public Integer tarchivos_idPrecision(){
				    return null;
				}
				public String tarchivos_idDefault(){
				
					return null;
				
				}
				public String tarchivos_idComment(){
				
				    return "";
				
				}
				public String tarchivos_idPattern(){
				
					return "";
				
				}
				public String tarchivos_idOriginalDbColumnName(){
				
					return "tarchivos_id";
				
				}

				
			    public Integer usuarios_id;

				public Integer getUsuarios_id () {
					return this.usuarios_id;
				}

				public Boolean usuarios_idIsNullable(){
				    return true;
				}
				public Boolean usuarios_idIsKey(){
				    return false;
				}
				public Integer usuarios_idLength(){
				    return null;
				}
				public Integer usuarios_idPrecision(){
				    return null;
				}
				public String usuarios_idDefault(){
				
					return null;
				
				}
				public String usuarios_idComment(){
				
				    return "";
				
				}
				public String usuarios_idPattern(){
				
					return "";
				
				}
				public String usuarios_idOriginalDbColumnName(){
				
					return "usuarios_id";
				
				}

				
			    public String codigo;

				public String getCodigo () {
					return this.codigo;
				}

				public Boolean codigoIsNullable(){
				    return true;
				}
				public Boolean codigoIsKey(){
				    return false;
				}
				public Integer codigoLength(){
				    return null;
				}
				public Integer codigoPrecision(){
				    return null;
				}
				public String codigoDefault(){
				
					return null;
				
				}
				public String codigoComment(){
				
				    return "";
				
				}
				public String codigoPattern(){
				
					return "";
				
				}
				public String codigoOriginalDbColumnName(){
				
					return "codigo";
				
				}

				
			    public String archivofs;

				public String getArchivofs () {
					return this.archivofs;
				}

				public Boolean archivofsIsNullable(){
				    return true;
				}
				public Boolean archivofsIsKey(){
				    return false;
				}
				public Integer archivofsLength(){
				    return null;
				}
				public Integer archivofsPrecision(){
				    return null;
				}
				public String archivofsDefault(){
				
					return null;
				
				}
				public String archivofsComment(){
				
				    return "";
				
				}
				public String archivofsPattern(){
				
					return "";
				
				}
				public String archivofsOriginalDbColumnName(){
				
					return "archivofs";
				
				}

				
			    public java.util.Date fecha;

				public java.util.Date getFecha () {
					return this.fecha;
				}

				public Boolean fechaIsNullable(){
				    return true;
				}
				public Boolean fechaIsKey(){
				    return false;
				}
				public Integer fechaLength(){
				    return null;
				}
				public Integer fechaPrecision(){
				    return null;
				}
				public String fechaDefault(){
				
					return null;
				
				}
				public String fechaComment(){
				
				    return "";
				
				}
				public String fechaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String fechaOriginalDbColumnName(){
				
					return "fecha";
				
				}

				
			    public String extension;

				public String getExtension () {
					return this.extension;
				}

				public Boolean extensionIsNullable(){
				    return true;
				}
				public Boolean extensionIsKey(){
				    return false;
				}
				public Integer extensionLength(){
				    return null;
				}
				public Integer extensionPrecision(){
				    return null;
				}
				public String extensionDefault(){
				
					return null;
				
				}
				public String extensionComment(){
				
				    return "";
				
				}
				public String extensionPattern(){
				
					return "";
				
				}
				public String extensionOriginalDbColumnName(){
				
					return "extension";
				
				}

				
			    public Object contenido;

				public Object getContenido () {
					return this.contenido;
				}

				public Boolean contenidoIsNullable(){
				    return true;
				}
				public Boolean contenidoIsKey(){
				    return false;
				}
				public Integer contenidoLength(){
				    return null;
				}
				public Integer contenidoPrecision(){
				    return null;
				}
				public String contenidoDefault(){
				
					return null;
				
				}
				public String contenidoComment(){
				
				    return "";
				
				}
				public String contenidoPattern(){
				
					return "";
				
				}
				public String contenidoOriginalDbColumnName(){
				
					return "contenido";
				
				}

				
			    public Integer padre_id;

				public Integer getPadre_id () {
					return this.padre_id;
				}

				public Boolean padre_idIsNullable(){
				    return true;
				}
				public Boolean padre_idIsKey(){
				    return false;
				}
				public Integer padre_idLength(){
				    return null;
				}
				public Integer padre_idPrecision(){
				    return null;
				}
				public String padre_idDefault(){
				
					return null;
				
				}
				public String padre_idComment(){
				
				    return "";
				
				}
				public String padre_idPattern(){
				
					return "";
				
				}
				public String padre_idOriginalDbColumnName(){
				
					return "padre_id";
				
				}

				
			    public java.util.Date fecha_inicio;

				public java.util.Date getFecha_inicio () {
					return this.fecha_inicio;
				}

				public Boolean fecha_inicioIsNullable(){
				    return true;
				}
				public Boolean fecha_inicioIsKey(){
				    return false;
				}
				public Integer fecha_inicioLength(){
				    return null;
				}
				public Integer fecha_inicioPrecision(){
				    return null;
				}
				public String fecha_inicioDefault(){
				
					return null;
				
				}
				public String fecha_inicioComment(){
				
				    return "";
				
				}
				public String fecha_inicioPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String fecha_inicioOriginalDbColumnName(){
				
					return "fecha_inicio";
				
				}

				
			    public java.util.Date fecha_fin;

				public java.util.Date getFecha_fin () {
					return this.fecha_fin;
				}

				public Boolean fecha_finIsNullable(){
				    return true;
				}
				public Boolean fecha_finIsKey(){
				    return false;
				}
				public Integer fecha_finLength(){
				    return null;
				}
				public Integer fecha_finPrecision(){
				    return null;
				}
				public String fecha_finDefault(){
				
					return null;
				
				}
				public String fecha_finComment(){
				
				    return "";
				
				}
				public String fecha_finPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String fecha_finOriginalDbColumnName(){
				
					return "fecha_fin";
				
				}

				
			    public Integer procesos_id;

				public Integer getProcesos_id () {
					return this.procesos_id;
				}

				public Boolean procesos_idIsNullable(){
				    return true;
				}
				public Boolean procesos_idIsKey(){
				    return false;
				}
				public Integer procesos_idLength(){
				    return null;
				}
				public Integer procesos_idPrecision(){
				    return null;
				}
				public String procesos_idDefault(){
				
					return null;
				
				}
				public String procesos_idComment(){
				
				    return "";
				
				}
				public String procesos_idPattern(){
				
					return "";
				
				}
				public String procesos_idOriginalDbColumnName(){
				
					return "proceso_id";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.estado = readInteger(dis);
					
					this.archivo = readString(dis);
					
						this.tarchivos_id = readInteger(dis);
					
						this.usuarios_id = readInteger(dis);
					
					this.codigo = readString(dis);
					
					this.archivofs = readString(dis);
					
					this.fecha = readDate(dis);
					
					this.extension = readString(dis);
					
						this.contenido = (Object) dis.readObject();
					
						this.padre_id = readInteger(dis);
					
					this.fecha_inicio = readDate(dis);
					
					this.fecha_fin = readDate(dis);
					
						this.procesos_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.estado = readInteger(dis);
					
					this.archivo = readString(dis);
					
						this.tarchivos_id = readInteger(dis);
					
						this.usuarios_id = readInteger(dis);
					
					this.codigo = readString(dis);
					
					this.archivofs = readString(dis);
					
					this.fecha = readDate(dis);
					
					this.extension = readString(dis);
					
						this.contenido = (Object) dis.readObject();
					
						this.padre_id = readInteger(dis);
					
					this.fecha_inicio = readDate(dis);
					
					this.fecha_fin = readDate(dis);
					
						this.procesos_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.estado,dos);
					
					// String
				
						writeString(this.archivo,dos);
					
					// Integer
				
						writeInteger(this.tarchivos_id,dos);
					
					// Integer
				
						writeInteger(this.usuarios_id,dos);
					
					// String
				
						writeString(this.codigo,dos);
					
					// String
				
						writeString(this.archivofs,dos);
					
					// java.util.Date
				
						writeDate(this.fecha,dos);
					
					// String
				
						writeString(this.extension,dos);
					
					// Object
				
       			    	dos.writeObject(this.contenido);
					
					// Integer
				
						writeInteger(this.padre_id,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_inicio,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_fin,dos);
					
					// Integer
				
						writeInteger(this.procesos_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.estado,dos);
					
					// String
				
						writeString(this.archivo,dos);
					
					// Integer
				
						writeInteger(this.tarchivos_id,dos);
					
					// Integer
				
						writeInteger(this.usuarios_id,dos);
					
					// String
				
						writeString(this.codigo,dos);
					
					// String
				
						writeString(this.archivofs,dos);
					
					// java.util.Date
				
						writeDate(this.fecha,dos);
					
					// String
				
						writeString(this.extension,dos);
					
					// Object
				
						dos.clearInstanceCache();
						dos.writeObject(this.contenido);
					
					// Integer
				
						writeInteger(this.padre_id,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_inicio,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_fin,dos);
					
					// Integer
				
						writeInteger(this.procesos_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("estado="+String.valueOf(estado));
		sb.append(",archivo="+archivo);
		sb.append(",tarchivos_id="+String.valueOf(tarchivos_id));
		sb.append(",usuarios_id="+String.valueOf(usuarios_id));
		sb.append(",codigo="+codigo);
		sb.append(",archivofs="+archivofs);
		sb.append(",fecha="+String.valueOf(fecha));
		sb.append(",extension="+extension);
		sb.append(",contenido="+String.valueOf(contenido));
		sb.append(",padre_id="+String.valueOf(padre_id));
		sb.append(",fecha_inicio="+String.valueOf(fecha_inicio));
		sb.append(",fecha_fin="+String.valueOf(fecha_fin));
		sb.append(",procesos_id="+String.valueOf(procesos_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row117Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row116Struct implements routines.system.IPersistableRow<row116Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer estado;

				public Integer getEstado () {
					return this.estado;
				}

				public Boolean estadoIsNullable(){
				    return true;
				}
				public Boolean estadoIsKey(){
				    return false;
				}
				public Integer estadoLength(){
				    return null;
				}
				public Integer estadoPrecision(){
				    return null;
				}
				public String estadoDefault(){
				
					return null;
				
				}
				public String estadoComment(){
				
				    return "";
				
				}
				public String estadoPattern(){
				
					return "";
				
				}
				public String estadoOriginalDbColumnName(){
				
					return "estado";
				
				}

				
			    public String archivo;

				public String getArchivo () {
					return this.archivo;
				}

				public Boolean archivoIsNullable(){
				    return true;
				}
				public Boolean archivoIsKey(){
				    return false;
				}
				public Integer archivoLength(){
				    return null;
				}
				public Integer archivoPrecision(){
				    return null;
				}
				public String archivoDefault(){
				
					return null;
				
				}
				public String archivoComment(){
				
				    return "";
				
				}
				public String archivoPattern(){
				
					return "";
				
				}
				public String archivoOriginalDbColumnName(){
				
					return "archivo";
				
				}

				
			    public Integer tarchivos_id;

				public Integer getTarchivos_id () {
					return this.tarchivos_id;
				}

				public Boolean tarchivos_idIsNullable(){
				    return true;
				}
				public Boolean tarchivos_idIsKey(){
				    return false;
				}
				public Integer tarchivos_idLength(){
				    return null;
				}
				public Integer tarchivos_idPrecision(){
				    return null;
				}
				public String tarchivos_idDefault(){
				
					return null;
				
				}
				public String tarchivos_idComment(){
				
				    return "";
				
				}
				public String tarchivos_idPattern(){
				
					return "";
				
				}
				public String tarchivos_idOriginalDbColumnName(){
				
					return "tarchivos_id";
				
				}

				
			    public Integer usuarios_id;

				public Integer getUsuarios_id () {
					return this.usuarios_id;
				}

				public Boolean usuarios_idIsNullable(){
				    return true;
				}
				public Boolean usuarios_idIsKey(){
				    return false;
				}
				public Integer usuarios_idLength(){
				    return null;
				}
				public Integer usuarios_idPrecision(){
				    return null;
				}
				public String usuarios_idDefault(){
				
					return null;
				
				}
				public String usuarios_idComment(){
				
				    return "";
				
				}
				public String usuarios_idPattern(){
				
					return "";
				
				}
				public String usuarios_idOriginalDbColumnName(){
				
					return "usuarios_id";
				
				}

				
			    public String codigo;

				public String getCodigo () {
					return this.codigo;
				}

				public Boolean codigoIsNullable(){
				    return true;
				}
				public Boolean codigoIsKey(){
				    return false;
				}
				public Integer codigoLength(){
				    return null;
				}
				public Integer codigoPrecision(){
				    return null;
				}
				public String codigoDefault(){
				
					return null;
				
				}
				public String codigoComment(){
				
				    return "";
				
				}
				public String codigoPattern(){
				
					return "";
				
				}
				public String codigoOriginalDbColumnName(){
				
					return "codigo";
				
				}

				
			    public String archivofs;

				public String getArchivofs () {
					return this.archivofs;
				}

				public Boolean archivofsIsNullable(){
				    return true;
				}
				public Boolean archivofsIsKey(){
				    return false;
				}
				public Integer archivofsLength(){
				    return null;
				}
				public Integer archivofsPrecision(){
				    return null;
				}
				public String archivofsDefault(){
				
					return null;
				
				}
				public String archivofsComment(){
				
				    return "";
				
				}
				public String archivofsPattern(){
				
					return "";
				
				}
				public String archivofsOriginalDbColumnName(){
				
					return "archivofs";
				
				}

				
			    public java.util.Date fecha;

				public java.util.Date getFecha () {
					return this.fecha;
				}

				public Boolean fechaIsNullable(){
				    return true;
				}
				public Boolean fechaIsKey(){
				    return false;
				}
				public Integer fechaLength(){
				    return null;
				}
				public Integer fechaPrecision(){
				    return null;
				}
				public String fechaDefault(){
				
					return null;
				
				}
				public String fechaComment(){
				
				    return "";
				
				}
				public String fechaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String fechaOriginalDbColumnName(){
				
					return "fecha";
				
				}

				
			    public String extension;

				public String getExtension () {
					return this.extension;
				}

				public Boolean extensionIsNullable(){
				    return true;
				}
				public Boolean extensionIsKey(){
				    return false;
				}
				public Integer extensionLength(){
				    return null;
				}
				public Integer extensionPrecision(){
				    return null;
				}
				public String extensionDefault(){
				
					return null;
				
				}
				public String extensionComment(){
				
				    return "";
				
				}
				public String extensionPattern(){
				
					return "";
				
				}
				public String extensionOriginalDbColumnName(){
				
					return "extension";
				
				}

				
			    public Object contenido;

				public Object getContenido () {
					return this.contenido;
				}

				public Boolean contenidoIsNullable(){
				    return true;
				}
				public Boolean contenidoIsKey(){
				    return false;
				}
				public Integer contenidoLength(){
				    return null;
				}
				public Integer contenidoPrecision(){
				    return null;
				}
				public String contenidoDefault(){
				
					return null;
				
				}
				public String contenidoComment(){
				
				    return "";
				
				}
				public String contenidoPattern(){
				
					return "";
				
				}
				public String contenidoOriginalDbColumnName(){
				
					return "contenido";
				
				}

				
			    public Integer padre_id;

				public Integer getPadre_id () {
					return this.padre_id;
				}

				public Boolean padre_idIsNullable(){
				    return true;
				}
				public Boolean padre_idIsKey(){
				    return false;
				}
				public Integer padre_idLength(){
				    return null;
				}
				public Integer padre_idPrecision(){
				    return null;
				}
				public String padre_idDefault(){
				
					return null;
				
				}
				public String padre_idComment(){
				
				    return "";
				
				}
				public String padre_idPattern(){
				
					return "";
				
				}
				public String padre_idOriginalDbColumnName(){
				
					return "padre_id";
				
				}

				
			    public java.util.Date fecha_inicio;

				public java.util.Date getFecha_inicio () {
					return this.fecha_inicio;
				}

				public Boolean fecha_inicioIsNullable(){
				    return true;
				}
				public Boolean fecha_inicioIsKey(){
				    return false;
				}
				public Integer fecha_inicioLength(){
				    return null;
				}
				public Integer fecha_inicioPrecision(){
				    return null;
				}
				public String fecha_inicioDefault(){
				
					return null;
				
				}
				public String fecha_inicioComment(){
				
				    return "";
				
				}
				public String fecha_inicioPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String fecha_inicioOriginalDbColumnName(){
				
					return "fecha_inicio";
				
				}

				
			    public java.util.Date fecha_fin;

				public java.util.Date getFecha_fin () {
					return this.fecha_fin;
				}

				public Boolean fecha_finIsNullable(){
				    return true;
				}
				public Boolean fecha_finIsKey(){
				    return false;
				}
				public Integer fecha_finLength(){
				    return null;
				}
				public Integer fecha_finPrecision(){
				    return null;
				}
				public String fecha_finDefault(){
				
					return null;
				
				}
				public String fecha_finComment(){
				
				    return "";
				
				}
				public String fecha_finPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String fecha_finOriginalDbColumnName(){
				
					return "fecha_fin";
				
				}

				
			    public Integer procesos_id;

				public Integer getProcesos_id () {
					return this.procesos_id;
				}

				public Boolean procesos_idIsNullable(){
				    return true;
				}
				public Boolean procesos_idIsKey(){
				    return false;
				}
				public Integer procesos_idLength(){
				    return null;
				}
				public Integer procesos_idPrecision(){
				    return null;
				}
				public String procesos_idDefault(){
				
					return null;
				
				}
				public String procesos_idComment(){
				
				    return "";
				
				}
				public String procesos_idPattern(){
				
					return "";
				
				}
				public String procesos_idOriginalDbColumnName(){
				
					return "proceso_id";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.estado = readInteger(dis);
					
					this.archivo = readString(dis);
					
						this.tarchivos_id = readInteger(dis);
					
						this.usuarios_id = readInteger(dis);
					
					this.codigo = readString(dis);
					
					this.archivofs = readString(dis);
					
					this.fecha = readDate(dis);
					
					this.extension = readString(dis);
					
						this.contenido = (Object) dis.readObject();
					
						this.padre_id = readInteger(dis);
					
					this.fecha_inicio = readDate(dis);
					
					this.fecha_fin = readDate(dis);
					
						this.procesos_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.estado = readInteger(dis);
					
					this.archivo = readString(dis);
					
						this.tarchivos_id = readInteger(dis);
					
						this.usuarios_id = readInteger(dis);
					
					this.codigo = readString(dis);
					
					this.archivofs = readString(dis);
					
					this.fecha = readDate(dis);
					
					this.extension = readString(dis);
					
						this.contenido = (Object) dis.readObject();
					
						this.padre_id = readInteger(dis);
					
					this.fecha_inicio = readDate(dis);
					
					this.fecha_fin = readDate(dis);
					
						this.procesos_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.estado,dos);
					
					// String
				
						writeString(this.archivo,dos);
					
					// Integer
				
						writeInteger(this.tarchivos_id,dos);
					
					// Integer
				
						writeInteger(this.usuarios_id,dos);
					
					// String
				
						writeString(this.codigo,dos);
					
					// String
				
						writeString(this.archivofs,dos);
					
					// java.util.Date
				
						writeDate(this.fecha,dos);
					
					// String
				
						writeString(this.extension,dos);
					
					// Object
				
       			    	dos.writeObject(this.contenido);
					
					// Integer
				
						writeInteger(this.padre_id,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_inicio,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_fin,dos);
					
					// Integer
				
						writeInteger(this.procesos_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.estado,dos);
					
					// String
				
						writeString(this.archivo,dos);
					
					// Integer
				
						writeInteger(this.tarchivos_id,dos);
					
					// Integer
				
						writeInteger(this.usuarios_id,dos);
					
					// String
				
						writeString(this.codigo,dos);
					
					// String
				
						writeString(this.archivofs,dos);
					
					// java.util.Date
				
						writeDate(this.fecha,dos);
					
					// String
				
						writeString(this.extension,dos);
					
					// Object
				
						dos.clearInstanceCache();
						dos.writeObject(this.contenido);
					
					// Integer
				
						writeInteger(this.padre_id,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_inicio,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_fin,dos);
					
					// Integer
				
						writeInteger(this.procesos_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("estado="+String.valueOf(estado));
		sb.append(",archivo="+archivo);
		sb.append(",tarchivos_id="+String.valueOf(tarchivos_id));
		sb.append(",usuarios_id="+String.valueOf(usuarios_id));
		sb.append(",codigo="+codigo);
		sb.append(",archivofs="+archivofs);
		sb.append(",fecha="+String.valueOf(fecha));
		sb.append(",extension="+extension);
		sb.append(",contenido="+String.valueOf(contenido));
		sb.append(",padre_id="+String.valueOf(padre_id));
		sb.append(",fecha_inicio="+String.valueOf(fecha_inicio));
		sb.append(",fecha_fin="+String.valueOf(fecha_fin));
		sb.append(",procesos_id="+String.valueOf(procesos_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row116Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row115Struct implements routines.system.IPersistableRow<row115Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public Integer estado;

				public Integer getEstado () {
					return this.estado;
				}

				public Boolean estadoIsNullable(){
				    return true;
				}
				public Boolean estadoIsKey(){
				    return false;
				}
				public Integer estadoLength(){
				    return null;
				}
				public Integer estadoPrecision(){
				    return null;
				}
				public String estadoDefault(){
				
					return null;
				
				}
				public String estadoComment(){
				
				    return "";
				
				}
				public String estadoPattern(){
				
					return "";
				
				}
				public String estadoOriginalDbColumnName(){
				
					return "estado";
				
				}

				
			    public String archivo;

				public String getArchivo () {
					return this.archivo;
				}

				public Boolean archivoIsNullable(){
				    return true;
				}
				public Boolean archivoIsKey(){
				    return false;
				}
				public Integer archivoLength(){
				    return null;
				}
				public Integer archivoPrecision(){
				    return null;
				}
				public String archivoDefault(){
				
					return null;
				
				}
				public String archivoComment(){
				
				    return "";
				
				}
				public String archivoPattern(){
				
					return "";
				
				}
				public String archivoOriginalDbColumnName(){
				
					return "archivo";
				
				}

				
			    public Integer tarchivos_id;

				public Integer getTarchivos_id () {
					return this.tarchivos_id;
				}

				public Boolean tarchivos_idIsNullable(){
				    return true;
				}
				public Boolean tarchivos_idIsKey(){
				    return false;
				}
				public Integer tarchivos_idLength(){
				    return null;
				}
				public Integer tarchivos_idPrecision(){
				    return null;
				}
				public String tarchivos_idDefault(){
				
					return null;
				
				}
				public String tarchivos_idComment(){
				
				    return "";
				
				}
				public String tarchivos_idPattern(){
				
					return "";
				
				}
				public String tarchivos_idOriginalDbColumnName(){
				
					return "tarchivos_id";
				
				}

				
			    public Integer usuarios_id;

				public Integer getUsuarios_id () {
					return this.usuarios_id;
				}

				public Boolean usuarios_idIsNullable(){
				    return true;
				}
				public Boolean usuarios_idIsKey(){
				    return false;
				}
				public Integer usuarios_idLength(){
				    return null;
				}
				public Integer usuarios_idPrecision(){
				    return null;
				}
				public String usuarios_idDefault(){
				
					return null;
				
				}
				public String usuarios_idComment(){
				
				    return "";
				
				}
				public String usuarios_idPattern(){
				
					return "";
				
				}
				public String usuarios_idOriginalDbColumnName(){
				
					return "usuarios_id";
				
				}

				
			    public String codigo;

				public String getCodigo () {
					return this.codigo;
				}

				public Boolean codigoIsNullable(){
				    return true;
				}
				public Boolean codigoIsKey(){
				    return false;
				}
				public Integer codigoLength(){
				    return null;
				}
				public Integer codigoPrecision(){
				    return null;
				}
				public String codigoDefault(){
				
					return null;
				
				}
				public String codigoComment(){
				
				    return "";
				
				}
				public String codigoPattern(){
				
					return "";
				
				}
				public String codigoOriginalDbColumnName(){
				
					return "codigo";
				
				}

				
			    public String archivofs;

				public String getArchivofs () {
					return this.archivofs;
				}

				public Boolean archivofsIsNullable(){
				    return true;
				}
				public Boolean archivofsIsKey(){
				    return false;
				}
				public Integer archivofsLength(){
				    return null;
				}
				public Integer archivofsPrecision(){
				    return null;
				}
				public String archivofsDefault(){
				
					return null;
				
				}
				public String archivofsComment(){
				
				    return "";
				
				}
				public String archivofsPattern(){
				
					return "";
				
				}
				public String archivofsOriginalDbColumnName(){
				
					return "archivofs";
				
				}

				
			    public java.util.Date fecha;

				public java.util.Date getFecha () {
					return this.fecha;
				}

				public Boolean fechaIsNullable(){
				    return true;
				}
				public Boolean fechaIsKey(){
				    return false;
				}
				public Integer fechaLength(){
				    return null;
				}
				public Integer fechaPrecision(){
				    return null;
				}
				public String fechaDefault(){
				
					return null;
				
				}
				public String fechaComment(){
				
				    return "";
				
				}
				public String fechaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String fechaOriginalDbColumnName(){
				
					return "fecha";
				
				}

				
			    public String extension;

				public String getExtension () {
					return this.extension;
				}

				public Boolean extensionIsNullable(){
				    return true;
				}
				public Boolean extensionIsKey(){
				    return false;
				}
				public Integer extensionLength(){
				    return null;
				}
				public Integer extensionPrecision(){
				    return null;
				}
				public String extensionDefault(){
				
					return null;
				
				}
				public String extensionComment(){
				
				    return "";
				
				}
				public String extensionPattern(){
				
					return "";
				
				}
				public String extensionOriginalDbColumnName(){
				
					return "extension";
				
				}

				
			    public Object contenido;

				public Object getContenido () {
					return this.contenido;
				}

				public Boolean contenidoIsNullable(){
				    return true;
				}
				public Boolean contenidoIsKey(){
				    return false;
				}
				public Integer contenidoLength(){
				    return null;
				}
				public Integer contenidoPrecision(){
				    return null;
				}
				public String contenidoDefault(){
				
					return null;
				
				}
				public String contenidoComment(){
				
				    return "";
				
				}
				public String contenidoPattern(){
				
					return "";
				
				}
				public String contenidoOriginalDbColumnName(){
				
					return "contenido";
				
				}

				
			    public Integer padre_id;

				public Integer getPadre_id () {
					return this.padre_id;
				}

				public Boolean padre_idIsNullable(){
				    return true;
				}
				public Boolean padre_idIsKey(){
				    return false;
				}
				public Integer padre_idLength(){
				    return null;
				}
				public Integer padre_idPrecision(){
				    return null;
				}
				public String padre_idDefault(){
				
					return null;
				
				}
				public String padre_idComment(){
				
				    return "";
				
				}
				public String padre_idPattern(){
				
					return "";
				
				}
				public String padre_idOriginalDbColumnName(){
				
					return "padre_id";
				
				}

				
			    public java.util.Date fecha_inicio;

				public java.util.Date getFecha_inicio () {
					return this.fecha_inicio;
				}

				public Boolean fecha_inicioIsNullable(){
				    return true;
				}
				public Boolean fecha_inicioIsKey(){
				    return false;
				}
				public Integer fecha_inicioLength(){
				    return null;
				}
				public Integer fecha_inicioPrecision(){
				    return null;
				}
				public String fecha_inicioDefault(){
				
					return null;
				
				}
				public String fecha_inicioComment(){
				
				    return "";
				
				}
				public String fecha_inicioPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String fecha_inicioOriginalDbColumnName(){
				
					return "fecha_inicio";
				
				}

				
			    public java.util.Date fecha_fin;

				public java.util.Date getFecha_fin () {
					return this.fecha_fin;
				}

				public Boolean fecha_finIsNullable(){
				    return true;
				}
				public Boolean fecha_finIsKey(){
				    return false;
				}
				public Integer fecha_finLength(){
				    return null;
				}
				public Integer fecha_finPrecision(){
				    return null;
				}
				public String fecha_finDefault(){
				
					return null;
				
				}
				public String fecha_finComment(){
				
				    return "";
				
				}
				public String fecha_finPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String fecha_finOriginalDbColumnName(){
				
					return "fecha_fin";
				
				}

				
			    public Integer procesos_id;

				public Integer getProcesos_id () {
					return this.procesos_id;
				}

				public Boolean procesos_idIsNullable(){
				    return true;
				}
				public Boolean procesos_idIsKey(){
				    return false;
				}
				public Integer procesos_idLength(){
				    return null;
				}
				public Integer procesos_idPrecision(){
				    return null;
				}
				public String procesos_idDefault(){
				
					return null;
				
				}
				public String procesos_idComment(){
				
				    return "";
				
				}
				public String procesos_idPattern(){
				
					return "";
				
				}
				public String procesos_idOriginalDbColumnName(){
				
					return "proceso_id";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.estado = readInteger(dis);
					
					this.archivo = readString(dis);
					
						this.tarchivos_id = readInteger(dis);
					
						this.usuarios_id = readInteger(dis);
					
					this.codigo = readString(dis);
					
					this.archivofs = readString(dis);
					
					this.fecha = readDate(dis);
					
					this.extension = readString(dis);
					
						this.contenido = (Object) dis.readObject();
					
						this.padre_id = readInteger(dis);
					
					this.fecha_inicio = readDate(dis);
					
					this.fecha_fin = readDate(dis);
					
						this.procesos_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
						this.estado = readInteger(dis);
					
					this.archivo = readString(dis);
					
						this.tarchivos_id = readInteger(dis);
					
						this.usuarios_id = readInteger(dis);
					
					this.codigo = readString(dis);
					
					this.archivofs = readString(dis);
					
					this.fecha = readDate(dis);
					
					this.extension = readString(dis);
					
						this.contenido = (Object) dis.readObject();
					
						this.padre_id = readInteger(dis);
					
					this.fecha_inicio = readDate(dis);
					
					this.fecha_fin = readDate(dis);
					
						this.procesos_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.estado,dos);
					
					// String
				
						writeString(this.archivo,dos);
					
					// Integer
				
						writeInteger(this.tarchivos_id,dos);
					
					// Integer
				
						writeInteger(this.usuarios_id,dos);
					
					// String
				
						writeString(this.codigo,dos);
					
					// String
				
						writeString(this.archivofs,dos);
					
					// java.util.Date
				
						writeDate(this.fecha,dos);
					
					// String
				
						writeString(this.extension,dos);
					
					// Object
				
       			    	dos.writeObject(this.contenido);
					
					// Integer
				
						writeInteger(this.padre_id,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_inicio,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_fin,dos);
					
					// Integer
				
						writeInteger(this.procesos_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.estado,dos);
					
					// String
				
						writeString(this.archivo,dos);
					
					// Integer
				
						writeInteger(this.tarchivos_id,dos);
					
					// Integer
				
						writeInteger(this.usuarios_id,dos);
					
					// String
				
						writeString(this.codigo,dos);
					
					// String
				
						writeString(this.archivofs,dos);
					
					// java.util.Date
				
						writeDate(this.fecha,dos);
					
					// String
				
						writeString(this.extension,dos);
					
					// Object
				
						dos.clearInstanceCache();
						dos.writeObject(this.contenido);
					
					// Integer
				
						writeInteger(this.padre_id,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_inicio,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_fin,dos);
					
					// Integer
				
						writeInteger(this.procesos_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("estado="+String.valueOf(estado));
		sb.append(",archivo="+archivo);
		sb.append(",tarchivos_id="+String.valueOf(tarchivos_id));
		sb.append(",usuarios_id="+String.valueOf(usuarios_id));
		sb.append(",codigo="+codigo);
		sb.append(",archivofs="+archivofs);
		sb.append(",fecha="+String.valueOf(fecha));
		sb.append(",extension="+extension);
		sb.append(",contenido="+String.valueOf(contenido));
		sb.append(",padre_id="+String.valueOf(padre_id));
		sb.append(",fecha_inicio="+String.valueOf(fecha_inicio));
		sb.append(",fecha_fin="+String.valueOf(fecha_fin));
		sb.append(",procesos_id="+String.valueOf(procesos_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row115Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_17_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row115Struct row115 = new row115Struct();
row116Struct row116 = new row116Struct();
row116Struct row117 = row116;






	
	/**
	 * [tOracleCommit_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleCommit_10", false);
		start_Hash.put("tOracleCommit_10", System.currentTimeMillis());
		
	
	currentComponent="tOracleCommit_10";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row117");
					}
				
		int tos_count_tOracleCommit_10 = 0;
		

 



/**
 * [tOracleCommit_10 begin ] stop
 */



	
	/**
	 * [tFileDelete_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_2", false);
		start_Hash.put("tFileDelete_2", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row116");
					}
				
		int tos_count_tFileDelete_2 = 0;
		

 



/**
 * [tFileDelete_2 begin ] stop
 */



	
	/**
	 * [tOracleOutput_37 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_37", false);
		start_Hash.put("tOracleOutput_37", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_37";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row115");
					}
				
		int tos_count_tOracleOutput_37 = 0;
		






    
    int nb_line_tOracleOutput_37 = 0;
    int nb_line_update_tOracleOutput_37 = 0;
    int nb_line_inserted_tOracleOutput_37 = 0;
    int nb_line_deleted_tOracleOutput_37 = 0;
    int nb_line_rejected_tOracleOutput_37 = 0;

    int tmp_batchUpdateCount_tOracleOutput_37 = 0;

    int deletedCount_tOracleOutput_37=0;
    int updatedCount_tOracleOutput_37=0;
    int insertedCount_tOracleOutput_37=0;
    int rowsToCommitCount_tOracleOutput_37=0;
    int rejectedCount_tOracleOutput_37=0;

    boolean whetherReject_tOracleOutput_37 = false;

    java.sql.Connection conn_tOracleOutput_37 = null;

    //optional table
    String dbschema_tOracleOutput_37 = null;
    String tableName_tOracleOutput_37 = null;
        dbschema_tOracleOutput_37 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_37 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_37=0;

        if(dbschema_tOracleOutput_37 == null || dbschema_tOracleOutput_37.trim().length() == 0) {
            tableName_tOracleOutput_37 = ("AFI_ARCHIVOS");
        } else {
            tableName_tOracleOutput_37 = dbschema_tOracleOutput_37 + "." + ("AFI_ARCHIVOS");
        }
                String insert_tOracleOutput_37 = "INSERT INTO " + tableName_tOracleOutput_37 + " (estado,archivo,tarchivos_id,usuarios_id,codigo,archivofs,fecha,extension,contenido,padre_id,fecha_inicio,fecha_fin,proceso_id) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_37 = conn_tOracleOutput_37.prepareStatement(insert_tOracleOutput_37);
                        resourceMap.put("pstmt_tOracleOutput_37", pstmt_tOracleOutput_37);

        class BlobTypeUtil_tOracleOutput_37 {
            public Object getBLOB(Object data, java.sql.Connection conn) throws java.sql.SQLException {
            	boolean containBlobFromOtherDB = false;
                if(!(data instanceof java.sql.Blob) || (data instanceof oracle.sql.BLOB && !containBlobFromOtherDB)) {
                	return data;
                }

                oracle.sql.BLOB blob = null;
                java.io.InputStream in = null;
                java.io.OutputStream out = null;
                try{
                	//in
                	java.sql.Blob blobData = (java.sql.Blob) data;
                	in = blobData.getBinaryStream();

                	//out
                	blob = oracle.sql.BLOB.createTemporary(conn, true, oracle.sql.BLOB.DURATION_SESSION);
                    blob.open(oracle.sql.BLOB.MODE_READWRITE);
                    //blob = conn.createBlob(); oracle jdbc don't support it
                	out = blob.setBinaryStream(1);

                    byte[] cache = new byte[8192];
                    int len = 0;
                    while ((len = in.read(cache)) != -1) {
                        out.write(cache, 0, len);
                    }

                    return blob;
                } catch(java.sql.SQLException sqlexp){
globalMap.put("tOracleOutput_37_ERROR_MESSAGE",sqlexp.getMessage());
                	if(blob!=null) {
                		try {
                    		blob.freeTemporary();
                    	} catch(java.sql.SQLException e_tOracleOutput_37) {
                    		//keep quiet
                    	}
                    }
                    sqlexp.printStackTrace();
                } catch(java.lang.Exception exp){
globalMap.put("tOracleOutput_37_ERROR_MESSAGE",exp.getMessage());
                   	if(blob!=null) {
                		try {
                    		blob.freeTemporary();
                    	} catch(java.sql.SQLException e_tOracleOutput_37) {
                    		//keep quiet
                    	}
                    }
                    exp.printStackTrace();
                } finally {
                	if(out!=null) {
                		try {
                			out.flush();
                    		out.close();
                    	} catch(java.io.IOException e_tOracleOutput_37) {
                    		//keep quiet
                    	}
                    }

            	 	if(in!=null) {
                		try {
                    		in.close();
                    	} catch(java.io.IOException e_tOracleOutput_37) {
                    		//keep quiet
                    	}
                    }

                    if(blob!=null) {
                		try {
                    		blob.close();
                    	} catch(java.sql.SQLException e_tOracleOutput_37) {
                    		//keep quiet
                    	}
                    }
                }

                return null;

            }

        }
        BlobTypeUtil_tOracleOutput_37 blobTypeUtil_tOracleOutput_37=new BlobTypeUtil_tOracleOutput_37();





 



/**
 * [tOracleOutput_37 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_17", false);
		start_Hash.put("tFixedFlowInput_17", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_17";
	
	
		int tos_count_tFixedFlowInput_17 = 0;
		

	    for (int i_tFixedFlowInput_17 = 0 ; i_tFixedFlowInput_17 < 1 ; i_tFixedFlowInput_17++) {
	                	            	
    	            		row115.estado = 7;
    	            	        	            	
    	            		row115.archivo = "ERR_AFI_ACTMSV.txt";
    	            	        	            	
    	            		row115.tarchivos_id = 16;
    	            	        	            	
    	            		row115.usuarios_id = context.vusuarios_id;
    	            	        	            	
    	            		row115.codigo = "AFI_ACTMSV";
    	            	        	            	
    	            		row115.archivofs = "ERR_AFI_ACTMSV.txt";
    	            	        	            	
    	            		row115.fecha = TalendDate.getCurrentDate();
    	            	        	            	
    	            		row115.extension = "txt";
    	            	        	            	
    	            		row115.contenido = ExtraerBlob.ByteArrayFromFile(context.PATH+"/ERR_AFI_ACTMSV"+context.vafiarchivos_id+".txt");
    	            	        	            	
    	            		row115.padre_id = context.vafiarchivos_id;
    	            	        	            	
    	            		row115.fecha_inicio = context.vfinicio;
    	            	        	            	
    	            		row115.fecha_fin = TalendDate.getCurrentDate();
    	            	        	            	
    	            		row115.procesos_id = context.vprocesos_id;
    	            	

 



/**
 * [tFixedFlowInput_17 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_17 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_17";
	
	

 


	tos_count_tFixedFlowInput_17++;

/**
 * [tFixedFlowInput_17 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_17";
	
	

 



/**
 * [tFixedFlowInput_17 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_37 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_37";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row115"
						
						);
					}
					



            row116 = null;
        whetherReject_tOracleOutput_37 = false;
                        if(row115.estado == null) {
pstmt_tOracleOutput_37.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_37.setInt(1, row115.estado);
}

                        if(row115.archivo == null) {
pstmt_tOracleOutput_37.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_37.setString(2, row115.archivo);
}

                        if(row115.tarchivos_id == null) {
pstmt_tOracleOutput_37.setNull(3, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_37.setInt(3, row115.tarchivos_id);
}

                        if(row115.usuarios_id == null) {
pstmt_tOracleOutput_37.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_37.setInt(4, row115.usuarios_id);
}

                        if(row115.codigo == null) {
pstmt_tOracleOutput_37.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_37.setString(5, row115.codigo);
}

                        if(row115.archivofs == null) {
pstmt_tOracleOutput_37.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_37.setString(6, row115.archivofs);
}

                        if(row115.fecha != null) {
pstmt_tOracleOutput_37.setObject(7, new java.sql.Timestamp(row115.fecha.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_37.setNull(7, java.sql.Types.DATE);
}

                        if(row115.extension == null) {
pstmt_tOracleOutput_37.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_37.setString(8, row115.extension);
}

                        if(row115.contenido == null) {
pstmt_tOracleOutput_37.setNull(9, java.sql.Types.BLOB);
} else {pstmt_tOracleOutput_37.setObject(9,  blobTypeUtil_tOracleOutput_37.getBLOB(row115.contenido, conn_tOracleOutput_37));
}

                        if(row115.padre_id == null) {
pstmt_tOracleOutput_37.setNull(10, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_37.setInt(10, row115.padre_id);
}

                        if(row115.fecha_inicio != null) {
pstmt_tOracleOutput_37.setObject(11, new java.sql.Timestamp(row115.fecha_inicio.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_37.setNull(11, java.sql.Types.DATE);
}

                        if(row115.fecha_fin != null) {
pstmt_tOracleOutput_37.setObject(12, new java.sql.Timestamp(row115.fecha_fin.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_37.setNull(12, java.sql.Types.DATE);
}

                        if(row115.procesos_id == null) {
pstmt_tOracleOutput_37.setNull(13, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_37.setInt(13, row115.procesos_id);
}

                try {
                    nb_line_tOracleOutput_37++;
                    int processedCount_tOracleOutput_37 = pstmt_tOracleOutput_37.executeUpdate();
                    insertedCount_tOracleOutput_37 += processedCount_tOracleOutput_37;
                    rowsToCommitCount_tOracleOutput_37 += processedCount_tOracleOutput_37;
                } catch(java.lang.Exception e_tOracleOutput_37) {
globalMap.put("tOracleOutput_37_ERROR_MESSAGE",e_tOracleOutput_37.getMessage());
                    whetherReject_tOracleOutput_37 = true;
                            System.err.print(e_tOracleOutput_37.getMessage());
                }
            if(!whetherReject_tOracleOutput_37) {
                            row116 = new row116Struct();
                                row116.estado = row115.estado;
                                row116.archivo = row115.archivo;
                                row116.tarchivos_id = row115.tarchivos_id;
                                row116.usuarios_id = row115.usuarios_id;
                                row116.codigo = row115.codigo;
                                row116.archivofs = row115.archivofs;
                                row116.fecha = row115.fecha;
                                row116.extension = row115.extension;
                                row116.contenido = row115.contenido;
                                row116.padre_id = row115.padre_id;
                                row116.fecha_inicio = row115.fecha_inicio;
                                row116.fecha_fin = row115.fecha_fin;
                                row116.procesos_id = row115.procesos_id;
            }

 


	tos_count_tOracleOutput_37++;

/**
 * [tOracleOutput_37 main ] stop
 */
	
	/**
	 * [tOracleOutput_37 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_37";
	
	

 



/**
 * [tOracleOutput_37 process_data_begin ] stop
 */
// Start of branch "row116"
if(row116 != null) { 



	
	/**
	 * [tFileDelete_2 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row116"
						
						);
					}
					

 

class DeleteFoldertFileDelete_2{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
    java.io.File file_tFileDelete_2=new java.io.File(context.PATH+"/ERR_AFI_ACTMSV"+context.vafiarchivos_id+".txt");
    if(file_tFileDelete_2.exists()&& file_tFileDelete_2.isFile()){
    	if(file_tFileDelete_2.delete()){
    		globalMap.put("tFileDelete_2_CURRENT_STATUS", "File deleted.");
		}else{
			globalMap.put("tFileDelete_2_CURRENT_STATUS", "No file deleted.");
				throw new RuntimeException("File " + file_tFileDelete_2.getAbsolutePath() + " can not be deleted.");
		}
	}else{
		globalMap.put("tFileDelete_2_CURRENT_STATUS", "File does not exist or is invalid.");
			throw new RuntimeException("File " + file_tFileDelete_2.getAbsolutePath() + " does not exist or is invalid or is not a file.");
	}
	globalMap.put("tFileDelete_2_DELETE_PATH",context.PATH+"/ERR_AFI_ACTMSV"+context.vafiarchivos_id+".txt");
 
     row117 = row116;


	tos_count_tFileDelete_2++;

/**
 * [tFileDelete_2 main ] stop
 */
	
	/**
	 * [tFileDelete_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";
	
	

 



/**
 * [tFileDelete_2 process_data_begin ] stop
 */

	
	/**
	 * [tOracleCommit_10 main ] start
	 */

	

	
	
	currentComponent="tOracleCommit_10";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row117"
						
						);
					}
					

	java.sql.Connection conn_tOracleCommit_10 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");

if(conn_tOracleCommit_10 != null && !conn_tOracleCommit_10.isClosed()) {
	
			
			conn_tOracleCommit_10.commit();
			
	
}

 


	tos_count_tOracleCommit_10++;

/**
 * [tOracleCommit_10 main ] stop
 */
	
	/**
	 * [tOracleCommit_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleCommit_10";
	
	

 



/**
 * [tOracleCommit_10 process_data_begin ] stop
 */
	
	/**
	 * [tOracleCommit_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleCommit_10";
	
	

 



/**
 * [tOracleCommit_10 process_data_end ] stop
 */



	
	/**
	 * [tFileDelete_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";
	
	

 



/**
 * [tFileDelete_2 process_data_end ] stop
 */

} // End of branch "row116"




	
	/**
	 * [tOracleOutput_37 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_37";
	
	

 



/**
 * [tOracleOutput_37 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_17";
	
	

 



/**
 * [tFixedFlowInput_17 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_17 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_17";
	
	

        }
        globalMap.put("tFixedFlowInput_17_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_17", true);
end_Hash.put("tFixedFlowInput_17", System.currentTimeMillis());




/**
 * [tFixedFlowInput_17 end ] stop
 */

	
	/**
	 * [tOracleOutput_37 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_37";
	
	
	



	
        if(pstmt_tOracleOutput_37 != null) {
			
				pstmt_tOracleOutput_37.close();
				resourceMap.remove("pstmt_tOracleOutput_37");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_37", true);

	
	nb_line_deleted_tOracleOutput_37=nb_line_deleted_tOracleOutput_37+ deletedCount_tOracleOutput_37;
	nb_line_update_tOracleOutput_37=nb_line_update_tOracleOutput_37 + updatedCount_tOracleOutput_37;
	nb_line_inserted_tOracleOutput_37=nb_line_inserted_tOracleOutput_37 + insertedCount_tOracleOutput_37;
	nb_line_rejected_tOracleOutput_37=nb_line_rejected_tOracleOutput_37 + rejectedCount_tOracleOutput_37;
	
        globalMap.put("tOracleOutput_37_NB_LINE",nb_line_tOracleOutput_37);
        globalMap.put("tOracleOutput_37_NB_LINE_UPDATED",nb_line_update_tOracleOutput_37);
        globalMap.put("tOracleOutput_37_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_37);
        globalMap.put("tOracleOutput_37_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_37);
        globalMap.put("tOracleOutput_37_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_37);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row115");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_37", true);
end_Hash.put("tOracleOutput_37", System.currentTimeMillis());




/**
 * [tOracleOutput_37 end ] stop
 */

	
	/**
	 * [tFileDelete_2 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row116");
			  	}
			  	
 

ok_Hash.put("tFileDelete_2", true);
end_Hash.put("tFileDelete_2", System.currentTimeMillis());




/**
 * [tFileDelete_2 end ] stop
 */

	
	/**
	 * [tOracleCommit_10 end ] start
	 */

	

	
	
	currentComponent="tOracleCommit_10";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row117");
			  	}
			  	
 

ok_Hash.put("tOracleCommit_10", true);
end_Hash.put("tOracleCommit_10", System.currentTimeMillis());




/**
 * [tOracleCommit_10 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_17 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_17";
	
	

 



/**
 * [tFixedFlowInput_17 finally ] stop
 */

	
	/**
	 * [tOracleOutput_37 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_37";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_37") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_37 = null;
                if ((pstmtToClose_tOracleOutput_37 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_37")) != null) {
                    pstmtToClose_tOracleOutput_37.close();
                }
    }
 



/**
 * [tOracleOutput_37 finally ] stop
 */

	
	/**
	 * [tFileDelete_2 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";
	
	

 



/**
 * [tFileDelete_2 finally ] stop
 */

	
	/**
	 * [tOracleCommit_10 finally ] start
	 */

	

	
	
	currentComponent="tOracleCommit_10";
	
	

 



/**
 * [tOracleCommit_10 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_17_SUBPROCESS_STATE", 1);
	}
	


public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public String respuesta;

				public String getRespuesta () {
					return this.respuesta;
				}

				public Boolean respuestaIsNullable(){
				    return true;
				}
				public Boolean respuestaIsKey(){
				    return false;
				}
				public Integer respuestaLength(){
				    return null;
				}
				public Integer respuestaPrecision(){
				    return null;
				}
				public String respuestaDefault(){
				
					return null;
				
				}
				public String respuestaComment(){
				
				    return "";
				
				}
				public String respuestaPattern(){
				
					return "";
				
				}
				public String respuestaOriginalDbColumnName(){
				
					return "respuesta";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.respuesta = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.respuesta = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.respuesta,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.respuesta,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("respuesta="+respuesta);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public String respuesta;

				public String getRespuesta () {
					return this.respuesta;
				}

				public Boolean respuestaIsNullable(){
				    return true;
				}
				public Boolean respuestaIsKey(){
				    return false;
				}
				public Integer respuestaLength(){
				    return null;
				}
				public Integer respuestaPrecision(){
				    return null;
				}
				public String respuestaDefault(){
				
					return null;
				
				}
				public String respuestaComment(){
				
				    return "";
				
				}
				public String respuestaPattern(){
				
					return "";
				
				}
				public String respuestaOriginalDbColumnName(){
				
					return "respuesta";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.respuesta = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.respuesta = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.respuesta,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.respuesta,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("respuesta="+respuesta);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row10Struct row10 = new row10Struct();
row10Struct row11 = row10;





	
	/**
	 * [tDie_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_2", false);
		start_Hash.put("tDie_2", System.currentTimeMillis());
		
	
	currentComponent="tDie_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tDie_2 = 0;
		

 



/**
 * [tDie_2 begin ] stop
 */



	
	/**
	 * [tBufferOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tBufferOutput_2", false);
		start_Hash.put("tBufferOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tBufferOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tBufferOutput_2 = 0;
		

 



/**
 * [tBufferOutput_2 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_5", false);
		start_Hash.put("tFixedFlowInput_5", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_5";
	
	
		int tos_count_tFixedFlowInput_5 = 0;
		

	    for (int i_tFixedFlowInput_5 = 0 ; i_tFixedFlowInput_5 < 1 ; i_tFixedFlowInput_5++) {
	                	            	
    	            		row10.respuesta = "ERROR: No fue posible actualizar el estado de procesamiento del archivo";
    	            	

 



/**
 * [tFixedFlowInput_5 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_5 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";
	
	

 


	tos_count_tFixedFlowInput_5++;

/**
 * [tFixedFlowInput_5 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";
	
	

 



/**
 * [tFixedFlowInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tBufferOutput_2 main ] start
	 */

	

	
	
	currentComponent="tBufferOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					



String[] row_tBufferOutput_2=new String[]{"",};		
	    if(row10.respuesta != null){
	        
	            row_tBufferOutput_2[0] = row10.respuesta;
	                        			    
	    }else{
	    	row_tBufferOutput_2[0] = null;
	    }
	globalBuffer.add(row_tBufferOutput_2);	
	
 
     row11 = row10;


	tos_count_tBufferOutput_2++;

/**
 * [tBufferOutput_2 main ] stop
 */
	
	/**
	 * [tBufferOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tBufferOutput_2";
	
	

 



/**
 * [tBufferOutput_2 process_data_begin ] stop
 */

	
	/**
	 * [tDie_2 main ] start
	 */

	

	
	
	currentComponent="tDie_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row11"
						
						);
					}
					

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_2", 5, "ERROR: No fue posible actualizar el estado de procesamiento del archivo", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_2_DIE_PRIORITY", 5);
	System.err.println("ERROR: No fue posible actualizar el estado de procesamiento del archivo");
	
	globalMap.put("tDie_2_DIE_MESSAGE", "ERROR: No fue posible actualizar el estado de procesamiento del archivo");
	globalMap.put("tDie_2_DIE_MESSAGES", "ERROR: No fue posible actualizar el estado de procesamiento del archivo");
	
	} catch (Exception | Error e_tDie_2) {
	    globalMap.put("tDie_2_ERROR_MESSAGE",e_tDie_2.getMessage());
		logIgnoredError(String.format("tDie_2 - tDie failed to log message due to internal error: %s", e_tDie_2), e_tDie_2);
	}
	
	currentComponent = "tDie_2";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_2_DIE_CODE", errorCode);        

    
	if(true){	
		TDieException e_tDie_2 = new TDieException();

		

		throw e_tDie_2;
	}

 


	tos_count_tDie_2++;

/**
 * [tDie_2 main ] stop
 */
	
	/**
	 * [tDie_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_2";
	
	

 



/**
 * [tDie_2 process_data_begin ] stop
 */
	
	/**
	 * [tDie_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_2";
	
	

 



/**
 * [tDie_2 process_data_end ] stop
 */



	
	/**
	 * [tBufferOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_2";
	
	

 



/**
 * [tBufferOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";
	
	

 



/**
 * [tFixedFlowInput_5 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_5 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";
	
	

        }
        globalMap.put("tFixedFlowInput_5_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_5", true);
end_Hash.put("tFixedFlowInput_5", System.currentTimeMillis());




/**
 * [tFixedFlowInput_5 end ] stop
 */

	
	/**
	 * [tBufferOutput_2 end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_2";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tBufferOutput_2", true);
end_Hash.put("tBufferOutput_2", System.currentTimeMillis());




/**
 * [tBufferOutput_2 end ] stop
 */

	
	/**
	 * [tDie_2 end ] start
	 */

	

	
	
	currentComponent="tDie_2";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tDie_2", true);
end_Hash.put("tDie_2", System.currentTimeMillis());




/**
 * [tDie_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_5 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";
	
	

 



/**
 * [tFixedFlowInput_5 finally ] stop
 */

	
	/**
	 * [tBufferOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tBufferOutput_2";
	
	

 



/**
 * [tBufferOutput_2 finally ] stop
 */

	
	/**
	 * [tDie_2 finally ] start
	 */

	

	
	
	currentComponent="tDie_2";
	
	

 



/**
 * [tDie_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row25Struct implements routines.system.IPersistableComparableLookupRow<row25Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "SALUDSIS\".\"ISEQ$$_92376\".nextval";
				
				}
				public String IDComment(){
				
				    return "PK - Llave primaria";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 50;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "Nombre del documento";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 5;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "Sigla del documento";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SIGLA == null) ? 0 : this.SIGLA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row25Struct other = (row25Struct) obj;
		
						if (this.SIGLA == null) {
							if (other.SIGLA != null)
								return false;
						
						} else if (!this.SIGLA.equals(other.SIGLA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row25Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.SIGLA = this.SIGLA;
	            
	}

	public void copyKeysDataTo(row25Struct other) {

		other.SIGLA = this.SIGLA;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.ID = dis.readInt();
					
						this.NOMBRE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.ID = objectIn.readInt();
					
						this.NOMBRE = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.ID);
					
						writeString(this.NOMBRE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.ID);
					
						writeString(this.NOMBRE, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row25Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SIGLA, other.SIGLA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row25Struct row25 = new row25Struct();




	
	/**
	 * [tAdvancedHash_row25 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row25", false);
		start_Hash.put("tAdvancedHash_row25", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row25";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row25");
					}
				
		int tos_count_tAdvancedHash_row25 = 0;
		

			   		// connection name:row25
			   		// source node:tHashInput_10 - inputs:(after_tOracleInput_4) outputs:(row25,row25) | target node:tAdvancedHash_row25 - inputs:(row25) outputs:()
			   		// linked node: tMap_2 - inputs:(row24,row25,row64,row65,row66,row67,row68,row69,row70,row71,row72,row73,row74,row75,row76,row77,row79,row80,row81,row82,row46,row127,row152,row154) outputs:(Errores,Actualizables)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row25 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct> tHash_Lookup_row25 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row25Struct>getLookup(matchingModeEnum_row25);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row25", tHash_Lookup_row25);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row25 begin ] stop
 */



	
	/**
	 * [tHashInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_10", false);
		start_Hash.put("tHashInput_10", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_10";
	
	
		int tos_count_tHashInput_10 = 0;
		


int nb_line_tHashInput_10 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_10=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row17Struct> tHashFile_tHashInput_10 = mf_tHashInput_10.getAdvancedMemoryHashFile("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_10==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row17Struct> iterator_tHashInput_10 = tHashFile_tHashInput_10.iterator();
while (iterator_tHashInput_10.hasNext()) {
    row17Struct next_tHashInput_10 = iterator_tHashInput_10.next();

	row25.ID = next_tHashInput_10.ID;
	row25.NOMBRE = next_tHashInput_10.NOMBRE;
	row25.SIGLA = next_tHashInput_10.SIGLA;

 



/**
 * [tHashInput_10 begin ] stop
 */
	
	/**
	 * [tHashInput_10 main ] start
	 */

	

	
	
	currentComponent="tHashInput_10";
	
	

 


	tos_count_tHashInput_10++;

/**
 * [tHashInput_10 main ] stop
 */
	
	/**
	 * [tHashInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_10";
	
	

 



/**
 * [tHashInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row25 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row25"
						
						);
					}
					


			   
			   

					row25Struct row25_HashRow = new row25Struct();
		   	   	   
				
				row25_HashRow.ID = row25.ID;
				
				row25_HashRow.NOMBRE = row25.NOMBRE;
				
				row25_HashRow.SIGLA = row25.SIGLA;
				
			tHash_Lookup_row25.put(row25_HashRow);
			
            




 


	tos_count_tAdvancedHash_row25++;

/**
 * [tAdvancedHash_row25 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row25 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";
	
	

 



/**
 * [tAdvancedHash_row25 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row25 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";
	
	

 



/**
 * [tAdvancedHash_row25 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_10";
	
	

 



/**
 * [tHashInput_10 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_10 end ] start
	 */

	

	
	
	currentComponent="tHashInput_10";
	
	
    

		
			nb_line_tHashInput_10++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_10_NB_LINE", nb_line_tHashInput_10);       

 

ok_Hash.put("tHashInput_10", true);
end_Hash.put("tHashInput_10", System.currentTimeMillis());




/**
 * [tHashInput_10 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row25 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";
	
	

tHash_Lookup_row25.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row25");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row25", true);
end_Hash.put("tAdvancedHash_row25", System.currentTimeMillis());




/**
 * [tAdvancedHash_row25 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_10 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_10";
	
	

 



/**
 * [tHashInput_10 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row25 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";
	
	

 



/**
 * [tAdvancedHash_row25 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_10_SUBPROCESS_STATE", 1);
	}
	


public static class row64Struct implements routines.system.IPersistableComparableLookupRow<row64Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 20;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 1;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SIGLA == null) ? 0 : this.SIGLA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row64Struct other = (row64Struct) obj;
		
						if (this.SIGLA == null) {
							if (other.SIGLA != null)
								return false;
						
						} else if (!this.SIGLA.equals(other.SIGLA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row64Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.SIGLA = this.SIGLA;
	            
	}

	public void copyKeysDataTo(row64Struct other) {

		other.SIGLA = this.SIGLA;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.ID = dis.readInt();
					
						this.NOMBRE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.ID = objectIn.readInt();
					
						this.NOMBRE = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.ID);
					
						writeString(this.NOMBRE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.ID);
					
						writeString(this.NOMBRE, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row64Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SIGLA, other.SIGLA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row64Struct row64 = new row64Struct();




	
	/**
	 * [tAdvancedHash_row64 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row64", false);
		start_Hash.put("tAdvancedHash_row64", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row64";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row64");
					}
				
		int tos_count_tAdvancedHash_row64 = 0;
		

			   		// connection name:row64
			   		// source node:tHashInput_1 - inputs:(after_tOracleInput_4) outputs:(row64,row64) | target node:tAdvancedHash_row64 - inputs:(row64) outputs:()
			   		// linked node: tMap_2 - inputs:(row24,row25,row64,row65,row66,row67,row68,row69,row70,row71,row72,row73,row74,row75,row76,row77,row79,row80,row81,row82,row46,row127,row152,row154) outputs:(Errores,Actualizables)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row64 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row64Struct> tHash_Lookup_row64 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row64Struct>getLookup(matchingModeEnum_row64);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row64", tHash_Lookup_row64);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row64 begin ] stop
 */



	
	/**
	 * [tHashInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_1", false);
		start_Hash.put("tHashInput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_1";
	
	
		int tos_count_tHashInput_1 = 0;
		


int nb_line_tHashInput_1 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row31Struct> tHashFile_tHashInput_1 = mf_tHashInput_1.getAdvancedMemoryHashFile("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_1==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row31Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
while (iterator_tHashInput_1.hasNext()) {
    row31Struct next_tHashInput_1 = iterator_tHashInput_1.next();

	row64.ID = next_tHashInput_1.ID;
	row64.NOMBRE = next_tHashInput_1.NOMBRE;
	row64.SIGLA = next_tHashInput_1.SIGLA;

 



/**
 * [tHashInput_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 main ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 


	tos_count_tHashInput_1++;

/**
 * [tHashInput_1 main ] stop
 */
	
	/**
	 * [tHashInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row64 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row64";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row64"
						
						);
					}
					


			   
			   

					row64Struct row64_HashRow = new row64Struct();
		   	   	   
				
				row64_HashRow.ID = row64.ID;
				
				row64_HashRow.NOMBRE = row64.NOMBRE;
				
				row64_HashRow.SIGLA = row64.SIGLA;
				
			tHash_Lookup_row64.put(row64_HashRow);
			
            




 


	tos_count_tAdvancedHash_row64++;

/**
 * [tAdvancedHash_row64 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row64 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row64";
	
	

 



/**
 * [tAdvancedHash_row64 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row64 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row64";
	
	

 



/**
 * [tAdvancedHash_row64 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_1 end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	
    

		
			nb_line_tHashInput_1++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);       

 

ok_Hash.put("tHashInput_1", true);
end_Hash.put("tHashInput_1", System.currentTimeMillis());




/**
 * [tHashInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row64 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row64";
	
	

tHash_Lookup_row64.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row64");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row64", true);
end_Hash.put("tAdvancedHash_row64", System.currentTimeMillis());




/**
 * [tAdvancedHash_row64 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row64 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row64";
	
	

 



/**
 * [tAdvancedHash_row64 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row65Struct implements routines.system.IPersistableComparableLookupRow<row65Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 20;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.NOMBRE == null) ? 0 : this.NOMBRE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row65Struct other = (row65Struct) obj;
		
						if (this.NOMBRE == null) {
							if (other.NOMBRE != null)
								return false;
						
						} else if (!this.NOMBRE.equals(other.NOMBRE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row65Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            
	}

	public void copyKeysDataTo(row65Struct other) {

		other.NOMBRE = this.NOMBRE;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.NOMBRE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.NOMBRE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NOMBRE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NOMBRE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.ID = objectIn.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row65Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.NOMBRE, other.NOMBRE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row65Struct row65 = new row65Struct();




	
	/**
	 * [tAdvancedHash_row65 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row65", false);
		start_Hash.put("tAdvancedHash_row65", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row65";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row65");
					}
				
		int tos_count_tAdvancedHash_row65 = 0;
		

			   		// connection name:row65
			   		// source node:tHashInput_2 - inputs:(after_tOracleInput_4) outputs:(row65,row65) | target node:tAdvancedHash_row65 - inputs:(row65) outputs:()
			   		// linked node: tMap_2 - inputs:(row24,row25,row64,row65,row66,row67,row68,row69,row70,row71,row72,row73,row74,row75,row76,row77,row79,row80,row81,row82,row46,row127,row152,row154) outputs:(Errores,Actualizables)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row65 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row65Struct> tHash_Lookup_row65 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row65Struct>getLookup(matchingModeEnum_row65);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row65", tHash_Lookup_row65);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row65 begin ] stop
 */



	
	/**
	 * [tHashInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_2", false);
		start_Hash.put("tHashInput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_2";
	
	
		int tos_count_tHashInput_2 = 0;
		


int nb_line_tHashInput_2 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row50Struct> tHashFile_tHashInput_2 = mf_tHashInput_2.getAdvancedMemoryHashFile("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_3");
if(tHashFile_tHashInput_2==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row50Struct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
while (iterator_tHashInput_2.hasNext()) {
    row50Struct next_tHashInput_2 = iterator_tHashInput_2.next();

	row65.ID = next_tHashInput_2.ID;
	row65.NOMBRE = next_tHashInput_2.NOMBRE;

 



/**
 * [tHashInput_2 begin ] stop
 */
	
	/**
	 * [tHashInput_2 main ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 


	tos_count_tHashInput_2++;

/**
 * [tHashInput_2 main ] stop
 */
	
	/**
	 * [tHashInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row65 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row65";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row65"
						
						);
					}
					


			   
			   

					row65Struct row65_HashRow = new row65Struct();
		   	   	   
				
				row65_HashRow.ID = row65.ID;
				
				row65_HashRow.NOMBRE = row65.NOMBRE;
				
			tHash_Lookup_row65.put(row65_HashRow);
			
            




 


	tos_count_tAdvancedHash_row65++;

/**
 * [tAdvancedHash_row65 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row65 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row65";
	
	

 



/**
 * [tAdvancedHash_row65 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row65 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row65";
	
	

 



/**
 * [tAdvancedHash_row65 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_2 end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	
    

		
			nb_line_tHashInput_2++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_3");
	


	globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);       

 

ok_Hash.put("tHashInput_2", true);
end_Hash.put("tHashInput_2", System.currentTimeMillis());




/**
 * [tHashInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row65 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row65";
	
	

tHash_Lookup_row65.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row65");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row65", true);
end_Hash.put("tAdvancedHash_row65", System.currentTimeMillis());




/**
 * [tAdvancedHash_row65 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row65 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row65";
	
	

 



/**
 * [tAdvancedHash_row65 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row66Struct implements routines.system.IPersistableComparableLookupRow<row66Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 500;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 20;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SIGLA == null) ? 0 : this.SIGLA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row66Struct other = (row66Struct) obj;
		
						if (this.SIGLA == null) {
							if (other.SIGLA != null)
								return false;
						
						} else if (!this.SIGLA.equals(other.SIGLA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row66Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.SIGLA = this.SIGLA;
	            
	}

	public void copyKeysDataTo(row66Struct other) {

		other.SIGLA = this.SIGLA;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.ID = dis.readInt();
					
						this.NOMBRE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.ID = objectIn.readInt();
					
						this.NOMBRE = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.ID);
					
						writeString(this.NOMBRE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.ID);
					
						writeString(this.NOMBRE, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row66Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SIGLA, other.SIGLA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row66Struct row66 = new row66Struct();




	
	/**
	 * [tAdvancedHash_row66 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row66", false);
		start_Hash.put("tAdvancedHash_row66", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row66";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row66");
					}
				
		int tos_count_tAdvancedHash_row66 = 0;
		

			   		// connection name:row66
			   		// source node:tHashInput_3 - inputs:(after_tOracleInput_4) outputs:(row66,row66) | target node:tAdvancedHash_row66 - inputs:(row66) outputs:()
			   		// linked node: tMap_2 - inputs:(row24,row25,row64,row65,row66,row67,row68,row69,row70,row71,row72,row73,row74,row75,row76,row77,row79,row80,row81,row82,row46,row127,row152,row154) outputs:(Errores,Actualizables)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row66 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row66Struct> tHash_Lookup_row66 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row66Struct>getLookup(matchingModeEnum_row66);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row66", tHash_Lookup_row66);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row66 begin ] stop
 */



	
	/**
	 * [tHashInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_3", false);
		start_Hash.put("tHashInput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_3";
	
	
		int tos_count_tHashInput_3 = 0;
		


int nb_line_tHashInput_3 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row51Struct> tHashFile_tHashInput_3 = mf_tHashInput_3.getAdvancedMemoryHashFile("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_4");
if(tHashFile_tHashInput_3==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row51Struct> iterator_tHashInput_3 = tHashFile_tHashInput_3.iterator();
while (iterator_tHashInput_3.hasNext()) {
    row51Struct next_tHashInput_3 = iterator_tHashInput_3.next();

	row66.ID = next_tHashInput_3.ID;
	row66.NOMBRE = next_tHashInput_3.NOMBRE;
	row66.SIGLA = next_tHashInput_3.SIGLA;

 



/**
 * [tHashInput_3 begin ] stop
 */
	
	/**
	 * [tHashInput_3 main ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 


	tos_count_tHashInput_3++;

/**
 * [tHashInput_3 main ] stop
 */
	
	/**
	 * [tHashInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row66 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row66";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row66"
						
						);
					}
					


			   
			   

					row66Struct row66_HashRow = new row66Struct();
		   	   	   
				
				row66_HashRow.ID = row66.ID;
				
				row66_HashRow.NOMBRE = row66.NOMBRE;
				
				row66_HashRow.SIGLA = row66.SIGLA;
				
			tHash_Lookup_row66.put(row66_HashRow);
			
            




 


	tos_count_tAdvancedHash_row66++;

/**
 * [tAdvancedHash_row66 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row66 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row66";
	
	

 



/**
 * [tAdvancedHash_row66 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row66 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row66";
	
	

 



/**
 * [tAdvancedHash_row66 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_3 end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	
    

		
			nb_line_tHashInput_3++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_4");
	


	globalMap.put("tHashInput_3_NB_LINE", nb_line_tHashInput_3);       

 

ok_Hash.put("tHashInput_3", true);
end_Hash.put("tHashInput_3", System.currentTimeMillis());




/**
 * [tHashInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row66 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row66";
	
	

tHash_Lookup_row66.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row66");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row66", true);
end_Hash.put("tAdvancedHash_row66", System.currentTimeMillis());




/**
 * [tAdvancedHash_row66 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row66 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row66";
	
	

 



/**
 * [tAdvancedHash_row66 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row67Struct implements routines.system.IPersistableComparableLookupRow<row67Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 100;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return false;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 5;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CODIGO == null) ? 0 : this.CODIGO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row67Struct other = (row67Struct) obj;
		
						if (this.CODIGO == null) {
							if (other.CODIGO != null)
								return false;
						
						} else if (!this.CODIGO.equals(other.CODIGO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row67Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.CODIGO = this.CODIGO;
	            
	}

	public void copyKeysDataTo(row67Struct other) {

		other.CODIGO = this.CODIGO;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.ID = dis.readInt();
					
						this.NOMBRE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.ID = objectIn.readInt();
					
						this.NOMBRE = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.ID);
					
						writeString(this.NOMBRE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.ID);
					
						writeString(this.NOMBRE, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",CODIGO="+CODIGO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row67Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CODIGO, other.CODIGO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row67Struct row67 = new row67Struct();




	
	/**
	 * [tAdvancedHash_row67 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row67", false);
		start_Hash.put("tAdvancedHash_row67", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row67";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row67");
					}
				
		int tos_count_tAdvancedHash_row67 = 0;
		

			   		// connection name:row67
			   		// source node:tHashInput_4 - inputs:(after_tOracleInput_4) outputs:(row67,row67) | target node:tAdvancedHash_row67 - inputs:(row67) outputs:()
			   		// linked node: tMap_2 - inputs:(row24,row25,row64,row65,row66,row67,row68,row69,row70,row71,row72,row73,row74,row75,row76,row77,row79,row80,row81,row82,row46,row127,row152,row154) outputs:(Errores,Actualizables)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row67 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row67Struct> tHash_Lookup_row67 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row67Struct>getLookup(matchingModeEnum_row67);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row67", tHash_Lookup_row67);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row67 begin ] stop
 */



	
	/**
	 * [tHashInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_4", false);
		start_Hash.put("tHashInput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_4";
	
	
		int tos_count_tHashInput_4 = 0;
		


int nb_line_tHashInput_4 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row56Struct> tHashFile_tHashInput_4 = mf_tHashInput_4.getAdvancedMemoryHashFile("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_9");
if(tHashFile_tHashInput_4==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row56Struct> iterator_tHashInput_4 = tHashFile_tHashInput_4.iterator();
while (iterator_tHashInput_4.hasNext()) {
    row56Struct next_tHashInput_4 = iterator_tHashInput_4.next();

	row67.ID = next_tHashInput_4.ID;
	row67.NOMBRE = next_tHashInput_4.NOMBRE;
	row67.CODIGO = next_tHashInput_4.CODIGO;

 



/**
 * [tHashInput_4 begin ] stop
 */
	
	/**
	 * [tHashInput_4 main ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 


	tos_count_tHashInput_4++;

/**
 * [tHashInput_4 main ] stop
 */
	
	/**
	 * [tHashInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row67 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row67";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row67"
						
						);
					}
					


			   
			   

					row67Struct row67_HashRow = new row67Struct();
		   	   	   
				
				row67_HashRow.ID = row67.ID;
				
				row67_HashRow.NOMBRE = row67.NOMBRE;
				
				row67_HashRow.CODIGO = row67.CODIGO;
				
			tHash_Lookup_row67.put(row67_HashRow);
			
            




 


	tos_count_tAdvancedHash_row67++;

/**
 * [tAdvancedHash_row67 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row67 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row67";
	
	

 



/**
 * [tAdvancedHash_row67 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row67 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row67";
	
	

 



/**
 * [tAdvancedHash_row67 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_4 end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	
    

		
			nb_line_tHashInput_4++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_9");
	


	globalMap.put("tHashInput_4_NB_LINE", nb_line_tHashInput_4);       

 

ok_Hash.put("tHashInput_4", true);
end_Hash.put("tHashInput_4", System.currentTimeMillis());




/**
 * [tHashInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row67 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row67";
	
	

tHash_Lookup_row67.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row67");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row67", true);
end_Hash.put("tAdvancedHash_row67", System.currentTimeMillis());




/**
 * [tAdvancedHash_row67 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row67 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row67";
	
	

 



/**
 * [tAdvancedHash_row67 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row68Struct implements routines.system.IPersistableComparableLookupRow<row68Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 50;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.NOMBRE == null) ? 0 : this.NOMBRE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row68Struct other = (row68Struct) obj;
		
						if (this.NOMBRE == null) {
							if (other.NOMBRE != null)
								return false;
						
						} else if (!this.NOMBRE.equals(other.NOMBRE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row68Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            
	}

	public void copyKeysDataTo(row68Struct other) {

		other.NOMBRE = this.NOMBRE;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.NOMBRE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.NOMBRE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NOMBRE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NOMBRE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.ID = objectIn.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row68Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.NOMBRE, other.NOMBRE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row68Struct row68 = new row68Struct();




	
	/**
	 * [tAdvancedHash_row68 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row68", false);
		start_Hash.put("tAdvancedHash_row68", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row68";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row68");
					}
				
		int tos_count_tAdvancedHash_row68 = 0;
		

			   		// connection name:row68
			   		// source node:tHashInput_5 - inputs:(after_tOracleInput_4) outputs:(row68,row68) | target node:tAdvancedHash_row68 - inputs:(row68) outputs:()
			   		// linked node: tMap_2 - inputs:(row24,row25,row64,row65,row66,row67,row68,row69,row70,row71,row72,row73,row74,row75,row76,row77,row79,row80,row81,row82,row46,row127,row152,row154) outputs:(Errores,Actualizables)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row68 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row68Struct> tHash_Lookup_row68 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row68Struct>getLookup(matchingModeEnum_row68);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row68", tHash_Lookup_row68);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row68 begin ] stop
 */



	
	/**
	 * [tHashInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_5", false);
		start_Hash.put("tHashInput_5", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_5";
	
	
		int tos_count_tHashInput_5 = 0;
		


int nb_line_tHashInput_5 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_5=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row58Struct> tHashFile_tHashInput_5 = mf_tHashInput_5.getAdvancedMemoryHashFile("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_11");
if(tHashFile_tHashInput_5==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row58Struct> iterator_tHashInput_5 = tHashFile_tHashInput_5.iterator();
while (iterator_tHashInput_5.hasNext()) {
    row58Struct next_tHashInput_5 = iterator_tHashInput_5.next();

	row68.ID = next_tHashInput_5.ID;
	row68.NOMBRE = next_tHashInput_5.NOMBRE;

 



/**
 * [tHashInput_5 begin ] stop
 */
	
	/**
	 * [tHashInput_5 main ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 


	tos_count_tHashInput_5++;

/**
 * [tHashInput_5 main ] stop
 */
	
	/**
	 * [tHashInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row68 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row68";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row68"
						
						);
					}
					


			   
			   

					row68Struct row68_HashRow = new row68Struct();
		   	   	   
				
				row68_HashRow.ID = row68.ID;
				
				row68_HashRow.NOMBRE = row68.NOMBRE;
				
			tHash_Lookup_row68.put(row68_HashRow);
			
            




 


	tos_count_tAdvancedHash_row68++;

/**
 * [tAdvancedHash_row68 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row68 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row68";
	
	

 



/**
 * [tAdvancedHash_row68 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row68 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row68";
	
	

 



/**
 * [tAdvancedHash_row68 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_5 end ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	
    

		
			nb_line_tHashInput_5++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_11");
	


	globalMap.put("tHashInput_5_NB_LINE", nb_line_tHashInput_5);       

 

ok_Hash.put("tHashInput_5", true);
end_Hash.put("tHashInput_5", System.currentTimeMillis());




/**
 * [tHashInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row68 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row68";
	
	

tHash_Lookup_row68.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row68");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row68", true);
end_Hash.put("tAdvancedHash_row68", System.currentTimeMillis());




/**
 * [tAdvancedHash_row68 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_5 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row68 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row68";
	
	

 



/**
 * [tAdvancedHash_row68 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row69Struct implements routines.system.IPersistableComparableLookupRow<row69Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 50;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 5;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SIGLA == null) ? 0 : this.SIGLA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row69Struct other = (row69Struct) obj;
		
						if (this.SIGLA == null) {
							if (other.SIGLA != null)
								return false;
						
						} else if (!this.SIGLA.equals(other.SIGLA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row69Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.SIGLA = this.SIGLA;
	            
	}

	public void copyKeysDataTo(row69Struct other) {

		other.SIGLA = this.SIGLA;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.ID = dis.readInt();
					
						this.NOMBRE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.ID = objectIn.readInt();
					
						this.NOMBRE = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.ID);
					
						writeString(this.NOMBRE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.ID);
					
						writeString(this.NOMBRE, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row69Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SIGLA, other.SIGLA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row69Struct row69 = new row69Struct();




	
	/**
	 * [tAdvancedHash_row69 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row69", false);
		start_Hash.put("tAdvancedHash_row69", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row69";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row69");
					}
				
		int tos_count_tAdvancedHash_row69 = 0;
		

			   		// connection name:row69
			   		// source node:tHashInput_6 - inputs:(after_tOracleInput_4) outputs:(row69,row69) | target node:tAdvancedHash_row69 - inputs:(row69) outputs:()
			   		// linked node: tMap_2 - inputs:(row24,row25,row64,row65,row66,row67,row68,row69,row70,row71,row72,row73,row74,row75,row76,row77,row79,row80,row81,row82,row46,row127,row152,row154) outputs:(Errores,Actualizables)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row69 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row69Struct> tHash_Lookup_row69 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row69Struct>getLookup(matchingModeEnum_row69);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row69", tHash_Lookup_row69);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row69 begin ] stop
 */



	
	/**
	 * [tHashInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_6", false);
		start_Hash.put("tHashInput_6", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_6";
	
	
		int tos_count_tHashInput_6 = 0;
		


int nb_line_tHashInput_6 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_6=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row60Struct> tHashFile_tHashInput_6 = mf_tHashInput_6.getAdvancedMemoryHashFile("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_13");
if(tHashFile_tHashInput_6==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row60Struct> iterator_tHashInput_6 = tHashFile_tHashInput_6.iterator();
while (iterator_tHashInput_6.hasNext()) {
    row60Struct next_tHashInput_6 = iterator_tHashInput_6.next();

	row69.ID = next_tHashInput_6.ID;
	row69.NOMBRE = next_tHashInput_6.NOMBRE;
	row69.SIGLA = next_tHashInput_6.SIGLA;

 



/**
 * [tHashInput_6 begin ] stop
 */
	
	/**
	 * [tHashInput_6 main ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 


	tos_count_tHashInput_6++;

/**
 * [tHashInput_6 main ] stop
 */
	
	/**
	 * [tHashInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row69 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row69";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row69"
						
						);
					}
					


			   
			   

					row69Struct row69_HashRow = new row69Struct();
		   	   	   
				
				row69_HashRow.ID = row69.ID;
				
				row69_HashRow.NOMBRE = row69.NOMBRE;
				
				row69_HashRow.SIGLA = row69.SIGLA;
				
			tHash_Lookup_row69.put(row69_HashRow);
			
            




 


	tos_count_tAdvancedHash_row69++;

/**
 * [tAdvancedHash_row69 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row69 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row69";
	
	

 



/**
 * [tAdvancedHash_row69 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row69 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row69";
	
	

 



/**
 * [tAdvancedHash_row69 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_6 end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	
    

		
			nb_line_tHashInput_6++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_13");
	


	globalMap.put("tHashInput_6_NB_LINE", nb_line_tHashInput_6);       

 

ok_Hash.put("tHashInput_6", true);
end_Hash.put("tHashInput_6", System.currentTimeMillis());




/**
 * [tHashInput_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row69 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row69";
	
	

tHash_Lookup_row69.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row69");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row69", true);
end_Hash.put("tAdvancedHash_row69", System.currentTimeMillis());




/**
 * [tAdvancedHash_row69 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_6 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row69 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row69";
	
	

 



/**
 * [tAdvancedHash_row69 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row70Struct implements routines.system.IPersistableComparableLookupRow<row70Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 100;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 3;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SIGLA == null) ? 0 : this.SIGLA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row70Struct other = (row70Struct) obj;
		
						if (this.SIGLA == null) {
							if (other.SIGLA != null)
								return false;
						
						} else if (!this.SIGLA.equals(other.SIGLA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row70Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.SIGLA = this.SIGLA;
	            
	}

	public void copyKeysDataTo(row70Struct other) {

		other.SIGLA = this.SIGLA;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.ID = dis.readInt();
					
						this.NOMBRE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.ID = objectIn.readInt();
					
						this.NOMBRE = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.ID);
					
						writeString(this.NOMBRE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.ID);
					
						writeString(this.NOMBRE, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row70Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SIGLA, other.SIGLA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row70Struct row70 = new row70Struct();




	
	/**
	 * [tAdvancedHash_row70 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row70", false);
		start_Hash.put("tAdvancedHash_row70", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row70";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row70");
					}
				
		int tos_count_tAdvancedHash_row70 = 0;
		

			   		// connection name:row70
			   		// source node:tHashInput_7 - inputs:(after_tOracleInput_4) outputs:(row70,row70) | target node:tAdvancedHash_row70 - inputs:(row70) outputs:()
			   		// linked node: tMap_2 - inputs:(row24,row25,row64,row65,row66,row67,row68,row69,row70,row71,row72,row73,row74,row75,row76,row77,row79,row80,row81,row82,row46,row127,row152,row154) outputs:(Errores,Actualizables)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row70 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row70Struct> tHash_Lookup_row70 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row70Struct>getLookup(matchingModeEnum_row70);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row70", tHash_Lookup_row70);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row70 begin ] stop
 */



	
	/**
	 * [tHashInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_7", false);
		start_Hash.put("tHashInput_7", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_7";
	
	
		int tos_count_tHashInput_7 = 0;
		


int nb_line_tHashInput_7 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_7=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row62Struct> tHashFile_tHashInput_7 = mf_tHashInput_7.getAdvancedMemoryHashFile("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_15");
if(tHashFile_tHashInput_7==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row62Struct> iterator_tHashInput_7 = tHashFile_tHashInput_7.iterator();
while (iterator_tHashInput_7.hasNext()) {
    row62Struct next_tHashInput_7 = iterator_tHashInput_7.next();

	row70.ID = next_tHashInput_7.ID;
	row70.NOMBRE = next_tHashInput_7.NOMBRE;
	row70.SIGLA = next_tHashInput_7.SIGLA;

 



/**
 * [tHashInput_7 begin ] stop
 */
	
	/**
	 * [tHashInput_7 main ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 


	tos_count_tHashInput_7++;

/**
 * [tHashInput_7 main ] stop
 */
	
	/**
	 * [tHashInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row70 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row70";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row70"
						
						);
					}
					


			   
			   

					row70Struct row70_HashRow = new row70Struct();
		   	   	   
				
				row70_HashRow.ID = row70.ID;
				
				row70_HashRow.NOMBRE = row70.NOMBRE;
				
				row70_HashRow.SIGLA = row70.SIGLA;
				
			tHash_Lookup_row70.put(row70_HashRow);
			
            




 


	tos_count_tAdvancedHash_row70++;

/**
 * [tAdvancedHash_row70 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row70 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row70";
	
	

 



/**
 * [tAdvancedHash_row70 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row70 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row70";
	
	

 



/**
 * [tAdvancedHash_row70 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_7 end ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	
    

		
			nb_line_tHashInput_7++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_15");
	


	globalMap.put("tHashInput_7_NB_LINE", nb_line_tHashInput_7);       

 

ok_Hash.put("tHashInput_7", true);
end_Hash.put("tHashInput_7", System.currentTimeMillis());




/**
 * [tHashInput_7 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row70 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row70";
	
	

tHash_Lookup_row70.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row70");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row70", true);
end_Hash.put("tAdvancedHash_row70", System.currentTimeMillis());




/**
 * [tAdvancedHash_row70 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_7 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row70 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row70";
	
	

 



/**
 * [tAdvancedHash_row70 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class row71Struct implements routines.system.IPersistableComparableLookupRow<row71Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 2000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 100;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 100;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SIGLA == null) ? 0 : this.SIGLA.hashCode());
					
						result = prime * result + ((this.CODIGO == null) ? 0 : this.CODIGO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row71Struct other = (row71Struct) obj;
		
						if (this.SIGLA == null) {
							if (other.SIGLA != null)
								return false;
						
						} else if (!this.SIGLA.equals(other.SIGLA))
						
							return false;
					
						if (this.CODIGO == null) {
							if (other.CODIGO != null)
								return false;
						
						} else if (!this.CODIGO.equals(other.CODIGO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row71Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.SIGLA = this.SIGLA;
	            other.CODIGO = this.CODIGO;
	            
	}

	public void copyKeysDataTo(row71Struct other) {

		other.SIGLA = this.SIGLA;
	            	other.CODIGO = this.CODIGO;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.ID = dis.readInt();
					
						this.NOMBRE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.ID = objectIn.readInt();
					
						this.NOMBRE = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.ID);
					
						writeString(this.NOMBRE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.ID);
					
						writeString(this.NOMBRE, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
		sb.append(",CODIGO="+CODIGO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row71Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SIGLA, other.SIGLA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CODIGO, other.CODIGO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row71Struct row71 = new row71Struct();




	
	/**
	 * [tAdvancedHash_row71 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row71", false);
		start_Hash.put("tAdvancedHash_row71", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row71";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row71");
					}
				
		int tos_count_tAdvancedHash_row71 = 0;
		

			   		// connection name:row71
			   		// source node:tHashInput_8 - inputs:(after_tOracleInput_4) outputs:(row71,row71) | target node:tAdvancedHash_row71 - inputs:(row71) outputs:()
			   		// linked node: tMap_2 - inputs:(row24,row25,row64,row65,row66,row67,row68,row69,row70,row71,row72,row73,row74,row75,row76,row77,row79,row80,row81,row82,row46,row127,row152,row154) outputs:(Errores,Actualizables)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row71 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row71Struct> tHash_Lookup_row71 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row71Struct>getLookup(matchingModeEnum_row71);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row71", tHash_Lookup_row71);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row71 begin ] stop
 */



	
	/**
	 * [tHashInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_8", false);
		start_Hash.put("tHashInput_8", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_8";
	
	
		int tos_count_tHashInput_8 = 0;
		


int nb_line_tHashInput_8 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_8=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row53Struct> tHashFile_tHashInput_8 = mf_tHashInput_8.getAdvancedMemoryHashFile("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_6");
if(tHashFile_tHashInput_8==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row53Struct> iterator_tHashInput_8 = tHashFile_tHashInput_8.iterator();
while (iterator_tHashInput_8.hasNext()) {
    row53Struct next_tHashInput_8 = iterator_tHashInput_8.next();

	row71.ID = next_tHashInput_8.ID;
	row71.NOMBRE = next_tHashInput_8.NOMBRE;
	row71.SIGLA = next_tHashInput_8.SIGLA;
	row71.CODIGO = next_tHashInput_8.CODIGO;

 



/**
 * [tHashInput_8 begin ] stop
 */
	
	/**
	 * [tHashInput_8 main ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 


	tos_count_tHashInput_8++;

/**
 * [tHashInput_8 main ] stop
 */
	
	/**
	 * [tHashInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 



/**
 * [tHashInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row71 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row71";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row71"
						
						);
					}
					


			   
			   

					row71Struct row71_HashRow = new row71Struct();
		   	   	   
				
				row71_HashRow.ID = row71.ID;
				
				row71_HashRow.NOMBRE = row71.NOMBRE;
				
				row71_HashRow.SIGLA = row71.SIGLA;
				
				row71_HashRow.CODIGO = row71.CODIGO;
				
			tHash_Lookup_row71.put(row71_HashRow);
			
            




 


	tos_count_tAdvancedHash_row71++;

/**
 * [tAdvancedHash_row71 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row71 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row71";
	
	

 



/**
 * [tAdvancedHash_row71 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row71 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row71";
	
	

 



/**
 * [tAdvancedHash_row71 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 



/**
 * [tHashInput_8 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_8 end ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	
    

		
			nb_line_tHashInput_8++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_6");
	


	globalMap.put("tHashInput_8_NB_LINE", nb_line_tHashInput_8);       

 

ok_Hash.put("tHashInput_8", true);
end_Hash.put("tHashInput_8", System.currentTimeMillis());




/**
 * [tHashInput_8 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row71 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row71";
	
	

tHash_Lookup_row71.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row71");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row71", true);
end_Hash.put("tAdvancedHash_row71", System.currentTimeMillis());




/**
 * [tAdvancedHash_row71 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_8 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 



/**
 * [tHashInput_8 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row71 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row71";
	
	

 



/**
 * [tAdvancedHash_row71 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class row72Struct implements routines.system.IPersistableComparableLookupRow<row72Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 50;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 20;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.DOCUMENTO == null) ? 0 : this.DOCUMENTO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row72Struct other = (row72Struct) obj;
		
						if (this.DOCUMENTO == null) {
							if (other.DOCUMENTO != null)
								return false;
						
						} else if (!this.DOCUMENTO.equals(other.DOCUMENTO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row72Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.DOCUMENTO = this.DOCUMENTO;
	            
	}

	public void copyKeysDataTo(row72Struct other) {

		other.DOCUMENTO = this.DOCUMENTO;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.DOCUMENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.DOCUMENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DOCUMENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DOCUMENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.ID = dis.readInt();
					
						this.NOMBRE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.ID = objectIn.readInt();
					
						this.NOMBRE = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.ID);
					
						writeString(this.NOMBRE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.ID);
					
						writeString(this.NOMBRE, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",DOCUMENTO="+DOCUMENTO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row72Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.DOCUMENTO, other.DOCUMENTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row72Struct row72 = new row72Struct();




	
	/**
	 * [tAdvancedHash_row72 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row72", false);
		start_Hash.put("tAdvancedHash_row72", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row72";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row72");
					}
				
		int tos_count_tAdvancedHash_row72 = 0;
		

			   		// connection name:row72
			   		// source node:tHashInput_9 - inputs:(after_tOracleInput_4) outputs:(row72,row72) | target node:tAdvancedHash_row72 - inputs:(row72) outputs:()
			   		// linked node: tMap_2 - inputs:(row24,row25,row64,row65,row66,row67,row68,row69,row70,row71,row72,row73,row74,row75,row76,row77,row79,row80,row81,row82,row46,row127,row152,row154) outputs:(Errores,Actualizables)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row72 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row72Struct> tHash_Lookup_row72 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row72Struct>getLookup(matchingModeEnum_row72);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row72", tHash_Lookup_row72);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row72 begin ] stop
 */



	
	/**
	 * [tHashInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_9", false);
		start_Hash.put("tHashInput_9", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_9";
	
	
		int tos_count_tHashInput_9 = 0;
		


int nb_line_tHashInput_9 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_9=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row54Struct> tHashFile_tHashInput_9 = mf_tHashInput_9.getAdvancedMemoryHashFile("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_7");
if(tHashFile_tHashInput_9==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row54Struct> iterator_tHashInput_9 = tHashFile_tHashInput_9.iterator();
while (iterator_tHashInput_9.hasNext()) {
    row54Struct next_tHashInput_9 = iterator_tHashInput_9.next();

	row72.ID = next_tHashInput_9.ID;
	row72.NOMBRE = next_tHashInput_9.NOMBRE;
	row72.DOCUMENTO = next_tHashInput_9.DOCUMENTO;

 



/**
 * [tHashInput_9 begin ] stop
 */
	
	/**
	 * [tHashInput_9 main ] start
	 */

	

	
	
	currentComponent="tHashInput_9";
	
	

 


	tos_count_tHashInput_9++;

/**
 * [tHashInput_9 main ] stop
 */
	
	/**
	 * [tHashInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_9";
	
	

 



/**
 * [tHashInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row72 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row72";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row72"
						
						);
					}
					


			   
			   

					row72Struct row72_HashRow = new row72Struct();
		   	   	   
				
				row72_HashRow.ID = row72.ID;
				
				row72_HashRow.NOMBRE = row72.NOMBRE;
				
				row72_HashRow.DOCUMENTO = row72.DOCUMENTO;
				
			tHash_Lookup_row72.put(row72_HashRow);
			
            




 


	tos_count_tAdvancedHash_row72++;

/**
 * [tAdvancedHash_row72 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row72 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row72";
	
	

 



/**
 * [tAdvancedHash_row72 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row72 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row72";
	
	

 



/**
 * [tAdvancedHash_row72 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_9";
	
	

 



/**
 * [tHashInput_9 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_9 end ] start
	 */

	

	
	
	currentComponent="tHashInput_9";
	
	
    

		
			nb_line_tHashInput_9++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_7");
	


	globalMap.put("tHashInput_9_NB_LINE", nb_line_tHashInput_9);       

 

ok_Hash.put("tHashInput_9", true);
end_Hash.put("tHashInput_9", System.currentTimeMillis());




/**
 * [tHashInput_9 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row72 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row72";
	
	

tHash_Lookup_row72.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row72");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row72", true);
end_Hash.put("tAdvancedHash_row72", System.currentTimeMillis());




/**
 * [tAdvancedHash_row72 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_9 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_9";
	
	

 



/**
 * [tHashInput_9 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row72 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row72";
	
	

 



/**
 * [tAdvancedHash_row72 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class row73Struct implements routines.system.IPersistableComparableLookupRow<row73Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 100;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 10;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SIGLA == null) ? 0 : this.SIGLA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row73Struct other = (row73Struct) obj;
		
						if (this.SIGLA == null) {
							if (other.SIGLA != null)
								return false;
						
						} else if (!this.SIGLA.equals(other.SIGLA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row73Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.SIGLA = this.SIGLA;
	            
	}

	public void copyKeysDataTo(row73Struct other) {

		other.SIGLA = this.SIGLA;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.ID = dis.readInt();
					
						this.NOMBRE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.ID = objectIn.readInt();
					
						this.NOMBRE = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.ID);
					
						writeString(this.NOMBRE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.ID);
					
						writeString(this.NOMBRE, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row73Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SIGLA, other.SIGLA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row73Struct row73 = new row73Struct();




	
	/**
	 * [tAdvancedHash_row73 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row73", false);
		start_Hash.put("tAdvancedHash_row73", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row73";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row73");
					}
				
		int tos_count_tAdvancedHash_row73 = 0;
		

			   		// connection name:row73
			   		// source node:tHashInput_11 - inputs:(after_tOracleInput_4) outputs:(row73,row73) | target node:tAdvancedHash_row73 - inputs:(row73) outputs:()
			   		// linked node: tMap_2 - inputs:(row24,row25,row64,row65,row66,row67,row68,row69,row70,row71,row72,row73,row74,row75,row76,row77,row79,row80,row81,row82,row46,row127,row152,row154) outputs:(Errores,Actualizables)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row73 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row73Struct> tHash_Lookup_row73 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row73Struct>getLookup(matchingModeEnum_row73);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row73", tHash_Lookup_row73);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row73 begin ] stop
 */



	
	/**
	 * [tHashInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_11", false);
		start_Hash.put("tHashInput_11", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_11";
	
	
		int tos_count_tHashInput_11 = 0;
		


int nb_line_tHashInput_11 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_11=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row55Struct> tHashFile_tHashInput_11 = mf_tHashInput_11.getAdvancedMemoryHashFile("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_8");
if(tHashFile_tHashInput_11==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row55Struct> iterator_tHashInput_11 = tHashFile_tHashInput_11.iterator();
while (iterator_tHashInput_11.hasNext()) {
    row55Struct next_tHashInput_11 = iterator_tHashInput_11.next();

	row73.ID = next_tHashInput_11.ID;
	row73.NOMBRE = next_tHashInput_11.NOMBRE;
	row73.SIGLA = next_tHashInput_11.SIGLA;

 



/**
 * [tHashInput_11 begin ] stop
 */
	
	/**
	 * [tHashInput_11 main ] start
	 */

	

	
	
	currentComponent="tHashInput_11";
	
	

 


	tos_count_tHashInput_11++;

/**
 * [tHashInput_11 main ] stop
 */
	
	/**
	 * [tHashInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_11";
	
	

 



/**
 * [tHashInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row73 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row73";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row73"
						
						);
					}
					


			   
			   

					row73Struct row73_HashRow = new row73Struct();
		   	   	   
				
				row73_HashRow.ID = row73.ID;
				
				row73_HashRow.NOMBRE = row73.NOMBRE;
				
				row73_HashRow.SIGLA = row73.SIGLA;
				
			tHash_Lookup_row73.put(row73_HashRow);
			
            




 


	tos_count_tAdvancedHash_row73++;

/**
 * [tAdvancedHash_row73 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row73 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row73";
	
	

 



/**
 * [tAdvancedHash_row73 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row73 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row73";
	
	

 



/**
 * [tAdvancedHash_row73 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_11";
	
	

 



/**
 * [tHashInput_11 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_11 end ] start
	 */

	

	
	
	currentComponent="tHashInput_11";
	
	
    

		
			nb_line_tHashInput_11++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_8");
	


	globalMap.put("tHashInput_11_NB_LINE", nb_line_tHashInput_11);       

 

ok_Hash.put("tHashInput_11", true);
end_Hash.put("tHashInput_11", System.currentTimeMillis());




/**
 * [tHashInput_11 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row73 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row73";
	
	

tHash_Lookup_row73.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row73");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row73", true);
end_Hash.put("tAdvancedHash_row73", System.currentTimeMillis());




/**
 * [tAdvancedHash_row73 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_11 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_11";
	
	

 



/**
 * [tHashInput_11 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row73 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row73";
	
	

 



/**
 * [tAdvancedHash_row73 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_11_SUBPROCESS_STATE", 1);
	}
	


public static class row74Struct implements routines.system.IPersistableComparableLookupRow<row74Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 200;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 10;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SIGLA == null) ? 0 : this.SIGLA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row74Struct other = (row74Struct) obj;
		
						if (this.SIGLA == null) {
							if (other.SIGLA != null)
								return false;
						
						} else if (!this.SIGLA.equals(other.SIGLA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row74Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.SIGLA = this.SIGLA;
	            
	}

	public void copyKeysDataTo(row74Struct other) {

		other.SIGLA = this.SIGLA;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.ID = dis.readInt();
					
						this.NOMBRE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.ID = objectIn.readInt();
					
						this.NOMBRE = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.ID);
					
						writeString(this.NOMBRE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.ID);
					
						writeString(this.NOMBRE, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row74Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SIGLA, other.SIGLA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row74Struct row74 = new row74Struct();




	
	/**
	 * [tAdvancedHash_row74 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row74", false);
		start_Hash.put("tAdvancedHash_row74", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row74";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row74");
					}
				
		int tos_count_tAdvancedHash_row74 = 0;
		

			   		// connection name:row74
			   		// source node:tHashInput_12 - inputs:(after_tOracleInput_4) outputs:(row74,row74) | target node:tAdvancedHash_row74 - inputs:(row74) outputs:()
			   		// linked node: tMap_2 - inputs:(row24,row25,row64,row65,row66,row67,row68,row69,row70,row71,row72,row73,row74,row75,row76,row77,row79,row80,row81,row82,row46,row127,row152,row154) outputs:(Errores,Actualizables)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row74 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row74Struct> tHash_Lookup_row74 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row74Struct>getLookup(matchingModeEnum_row74);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row74", tHash_Lookup_row74);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row74 begin ] stop
 */



	
	/**
	 * [tHashInput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_12", false);
		start_Hash.put("tHashInput_12", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_12";
	
	
		int tos_count_tHashInput_12 = 0;
		


int nb_line_tHashInput_12 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_12=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row57Struct> tHashFile_tHashInput_12 = mf_tHashInput_12.getAdvancedMemoryHashFile("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_10");
if(tHashFile_tHashInput_12==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row57Struct> iterator_tHashInput_12 = tHashFile_tHashInput_12.iterator();
while (iterator_tHashInput_12.hasNext()) {
    row57Struct next_tHashInput_12 = iterator_tHashInput_12.next();

	row74.ID = next_tHashInput_12.ID;
	row74.NOMBRE = next_tHashInput_12.NOMBRE;
	row74.SIGLA = next_tHashInput_12.SIGLA;

 



/**
 * [tHashInput_12 begin ] stop
 */
	
	/**
	 * [tHashInput_12 main ] start
	 */

	

	
	
	currentComponent="tHashInput_12";
	
	

 


	tos_count_tHashInput_12++;

/**
 * [tHashInput_12 main ] stop
 */
	
	/**
	 * [tHashInput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_12";
	
	

 



/**
 * [tHashInput_12 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row74 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row74";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row74"
						
						);
					}
					


			   
			   

					row74Struct row74_HashRow = new row74Struct();
		   	   	   
				
				row74_HashRow.ID = row74.ID;
				
				row74_HashRow.NOMBRE = row74.NOMBRE;
				
				row74_HashRow.SIGLA = row74.SIGLA;
				
			tHash_Lookup_row74.put(row74_HashRow);
			
            




 


	tos_count_tAdvancedHash_row74++;

/**
 * [tAdvancedHash_row74 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row74 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row74";
	
	

 



/**
 * [tAdvancedHash_row74 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row74 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row74";
	
	

 



/**
 * [tAdvancedHash_row74 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_12";
	
	

 



/**
 * [tHashInput_12 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_12 end ] start
	 */

	

	
	
	currentComponent="tHashInput_12";
	
	
    

		
			nb_line_tHashInput_12++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_10");
	


	globalMap.put("tHashInput_12_NB_LINE", nb_line_tHashInput_12);       

 

ok_Hash.put("tHashInput_12", true);
end_Hash.put("tHashInput_12", System.currentTimeMillis());




/**
 * [tHashInput_12 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row74 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row74";
	
	

tHash_Lookup_row74.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row74");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row74", true);
end_Hash.put("tAdvancedHash_row74", System.currentTimeMillis());




/**
 * [tAdvancedHash_row74 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_12 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_12";
	
	

 



/**
 * [tHashInput_12 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row74 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row74";
	
	

 



/**
 * [tAdvancedHash_row74 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_12_SUBPROCESS_STATE", 1);
	}
	


public static class row75Struct implements routines.system.IPersistableComparableLookupRow<row75Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 100;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 20;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return false;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 50;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SIGLA == null) ? 0 : this.SIGLA.hashCode());
					
						result = prime * result + ((this.CODIGO == null) ? 0 : this.CODIGO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row75Struct other = (row75Struct) obj;
		
						if (this.SIGLA == null) {
							if (other.SIGLA != null)
								return false;
						
						} else if (!this.SIGLA.equals(other.SIGLA))
						
							return false;
					
						if (this.CODIGO == null) {
							if (other.CODIGO != null)
								return false;
						
						} else if (!this.CODIGO.equals(other.CODIGO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row75Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.SIGLA = this.SIGLA;
	            other.CODIGO = this.CODIGO;
	            
	}

	public void copyKeysDataTo(row75Struct other) {

		other.SIGLA = this.SIGLA;
	            	other.CODIGO = this.CODIGO;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.ID = dis.readInt();
					
						this.NOMBRE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.ID = objectIn.readInt();
					
						this.NOMBRE = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.ID);
					
						writeString(this.NOMBRE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.ID);
					
						writeString(this.NOMBRE, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
		sb.append(",CODIGO="+CODIGO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row75Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SIGLA, other.SIGLA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CODIGO, other.CODIGO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row75Struct row75 = new row75Struct();




	
	/**
	 * [tAdvancedHash_row75 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row75", false);
		start_Hash.put("tAdvancedHash_row75", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row75";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row75");
					}
				
		int tos_count_tAdvancedHash_row75 = 0;
		

			   		// connection name:row75
			   		// source node:tHashInput_13 - inputs:(after_tOracleInput_4) outputs:(row75,row75) | target node:tAdvancedHash_row75 - inputs:(row75) outputs:()
			   		// linked node: tMap_2 - inputs:(row24,row25,row64,row65,row66,row67,row68,row69,row70,row71,row72,row73,row74,row75,row76,row77,row79,row80,row81,row82,row46,row127,row152,row154) outputs:(Errores,Actualizables)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row75 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row75Struct> tHash_Lookup_row75 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row75Struct>getLookup(matchingModeEnum_row75);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row75", tHash_Lookup_row75);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row75 begin ] stop
 */



	
	/**
	 * [tHashInput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_13", false);
		start_Hash.put("tHashInput_13", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_13";
	
	
		int tos_count_tHashInput_13 = 0;
		


int nb_line_tHashInput_13 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_13=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row59Struct> tHashFile_tHashInput_13 = mf_tHashInput_13.getAdvancedMemoryHashFile("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_12");
if(tHashFile_tHashInput_13==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row59Struct> iterator_tHashInput_13 = tHashFile_tHashInput_13.iterator();
while (iterator_tHashInput_13.hasNext()) {
    row59Struct next_tHashInput_13 = iterator_tHashInput_13.next();

	row75.ID = next_tHashInput_13.ID;
	row75.NOMBRE = next_tHashInput_13.NOMBRE;
	row75.SIGLA = next_tHashInput_13.SIGLA;
	row75.CODIGO = next_tHashInput_13.CODIGO;

 



/**
 * [tHashInput_13 begin ] stop
 */
	
	/**
	 * [tHashInput_13 main ] start
	 */

	

	
	
	currentComponent="tHashInput_13";
	
	

 


	tos_count_tHashInput_13++;

/**
 * [tHashInput_13 main ] stop
 */
	
	/**
	 * [tHashInput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_13";
	
	

 



/**
 * [tHashInput_13 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row75 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row75";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row75"
						
						);
					}
					


			   
			   

					row75Struct row75_HashRow = new row75Struct();
		   	   	   
				
				row75_HashRow.ID = row75.ID;
				
				row75_HashRow.NOMBRE = row75.NOMBRE;
				
				row75_HashRow.SIGLA = row75.SIGLA;
				
				row75_HashRow.CODIGO = row75.CODIGO;
				
			tHash_Lookup_row75.put(row75_HashRow);
			
            




 


	tos_count_tAdvancedHash_row75++;

/**
 * [tAdvancedHash_row75 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row75 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row75";
	
	

 



/**
 * [tAdvancedHash_row75 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row75 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row75";
	
	

 



/**
 * [tAdvancedHash_row75 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_13";
	
	

 



/**
 * [tHashInput_13 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_13 end ] start
	 */

	

	
	
	currentComponent="tHashInput_13";
	
	
    

		
			nb_line_tHashInput_13++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_12");
	


	globalMap.put("tHashInput_13_NB_LINE", nb_line_tHashInput_13);       

 

ok_Hash.put("tHashInput_13", true);
end_Hash.put("tHashInput_13", System.currentTimeMillis());




/**
 * [tHashInput_13 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row75 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row75";
	
	

tHash_Lookup_row75.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row75");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row75", true);
end_Hash.put("tAdvancedHash_row75", System.currentTimeMillis());




/**
 * [tAdvancedHash_row75 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_13 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_13";
	
	

 



/**
 * [tHashInput_13 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row75 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row75";
	
	

 



/**
 * [tAdvancedHash_row75 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_13_SUBPROCESS_STATE", 1);
	}
	


public static class row76Struct implements routines.system.IPersistableComparableLookupRow<row76Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 500;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 100;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public int CODIGO;

				public int getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return false;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 20;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SIGLA == null) ? 0 : this.SIGLA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row76Struct other = (row76Struct) obj;
		
						if (this.SIGLA == null) {
							if (other.SIGLA != null)
								return false;
						
						} else if (!this.SIGLA.equals(other.SIGLA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row76Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.SIGLA = this.SIGLA;
	            other.CODIGO = this.CODIGO;
	            
	}

	public void copyKeysDataTo(row76Struct other) {

		other.SIGLA = this.SIGLA;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.ID = dis.readInt();
					
						this.NOMBRE = readString(dis,ois);
					
			            this.CODIGO = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.ID = objectIn.readInt();
					
						this.NOMBRE = readString(dis,objectIn);
					
			            this.CODIGO = objectIn.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.ID);
					
						writeString(this.NOMBRE, dos, oos);
					
		            	dos.writeInt(this.CODIGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.ID);
					
						writeString(this.NOMBRE, dos, objectOut);
					
					objectOut.writeInt(this.CODIGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
		sb.append(",CODIGO="+String.valueOf(CODIGO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row76Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SIGLA, other.SIGLA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row76Struct row76 = new row76Struct();




	
	/**
	 * [tAdvancedHash_row76 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row76", false);
		start_Hash.put("tAdvancedHash_row76", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row76";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row76");
					}
				
		int tos_count_tAdvancedHash_row76 = 0;
		

			   		// connection name:row76
			   		// source node:tHashInput_14 - inputs:(after_tOracleInput_4) outputs:(row76,row76) | target node:tAdvancedHash_row76 - inputs:(row76) outputs:()
			   		// linked node: tMap_2 - inputs:(row24,row25,row64,row65,row66,row67,row68,row69,row70,row71,row72,row73,row74,row75,row76,row77,row79,row80,row81,row82,row46,row127,row152,row154) outputs:(Errores,Actualizables)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row76 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row76Struct> tHash_Lookup_row76 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row76Struct>getLookup(matchingModeEnum_row76);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row76", tHash_Lookup_row76);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row76 begin ] stop
 */



	
	/**
	 * [tHashInput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_14", false);
		start_Hash.put("tHashInput_14", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_14";
	
	
		int tos_count_tHashInput_14 = 0;
		


int nb_line_tHashInput_14 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_14=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row61Struct> tHashFile_tHashInput_14 = mf_tHashInput_14.getAdvancedMemoryHashFile("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_14");
if(tHashFile_tHashInput_14==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row61Struct> iterator_tHashInput_14 = tHashFile_tHashInput_14.iterator();
while (iterator_tHashInput_14.hasNext()) {
    row61Struct next_tHashInput_14 = iterator_tHashInput_14.next();

	row76.ID = next_tHashInput_14.ID;
	row76.NOMBRE = next_tHashInput_14.NOMBRE;
	row76.SIGLA = next_tHashInput_14.SIGLA;
	row76.CODIGO = next_tHashInput_14.CODIGO;

 



/**
 * [tHashInput_14 begin ] stop
 */
	
	/**
	 * [tHashInput_14 main ] start
	 */

	

	
	
	currentComponent="tHashInput_14";
	
	

 


	tos_count_tHashInput_14++;

/**
 * [tHashInput_14 main ] stop
 */
	
	/**
	 * [tHashInput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_14";
	
	

 



/**
 * [tHashInput_14 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row76 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row76";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row76"
						
						);
					}
					


			   
			   

					row76Struct row76_HashRow = new row76Struct();
		   	   	   
				
				row76_HashRow.ID = row76.ID;
				
				row76_HashRow.NOMBRE = row76.NOMBRE;
				
				row76_HashRow.SIGLA = row76.SIGLA;
				
				row76_HashRow.CODIGO = row76.CODIGO;
				
			tHash_Lookup_row76.put(row76_HashRow);
			
            




 


	tos_count_tAdvancedHash_row76++;

/**
 * [tAdvancedHash_row76 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row76 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row76";
	
	

 



/**
 * [tAdvancedHash_row76 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row76 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row76";
	
	

 



/**
 * [tAdvancedHash_row76 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_14";
	
	

 



/**
 * [tHashInput_14 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_14 end ] start
	 */

	

	
	
	currentComponent="tHashInput_14";
	
	
    

		
			nb_line_tHashInput_14++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_14");
	


	globalMap.put("tHashInput_14_NB_LINE", nb_line_tHashInput_14);       

 

ok_Hash.put("tHashInput_14", true);
end_Hash.put("tHashInput_14", System.currentTimeMillis());




/**
 * [tHashInput_14 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row76 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row76";
	
	

tHash_Lookup_row76.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row76");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row76", true);
end_Hash.put("tAdvancedHash_row76", System.currentTimeMillis());




/**
 * [tAdvancedHash_row76 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_14 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_14";
	
	

 



/**
 * [tHashInput_14 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row76 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row76";
	
	

 



/**
 * [tAdvancedHash_row76 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_14_SUBPROCESS_STATE", 1);
	}
	


public static class row77Struct implements routines.system.IPersistableComparableLookupRow<row77Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 100;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 10;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return false;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 20;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public Integer FUERZA_ID;

				public Integer getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return null;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return null;
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SIGLA == null) ? 0 : this.SIGLA.hashCode());
					
						result = prime * result + ((this.CODIGO == null) ? 0 : this.CODIGO.hashCode());
					
						result = prime * result + ((this.FUERZA_ID == null) ? 0 : this.FUERZA_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row77Struct other = (row77Struct) obj;
		
						if (this.SIGLA == null) {
							if (other.SIGLA != null)
								return false;
						
						} else if (!this.SIGLA.equals(other.SIGLA))
						
							return false;
					
						if (this.CODIGO == null) {
							if (other.CODIGO != null)
								return false;
						
						} else if (!this.CODIGO.equals(other.CODIGO))
						
							return false;
					
						if (this.FUERZA_ID == null) {
							if (other.FUERZA_ID != null)
								return false;
						
						} else if (!this.FUERZA_ID.equals(other.FUERZA_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row77Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.SIGLA = this.SIGLA;
	            other.CODIGO = this.CODIGO;
	            other.FUERZA_ID = this.FUERZA_ID;
	            
	}

	public void copyKeysDataTo(row77Struct other) {

		other.SIGLA = this.SIGLA;
	            	other.CODIGO = this.CODIGO;
	            	other.FUERZA_ID = this.FUERZA_ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
					this.CODIGO = readString(dis);
					
						this.FUERZA_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
					this.CODIGO = readString(dis);
					
						this.FUERZA_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// Integer
				
						writeInteger(this.FUERZA_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.ID = dis.readInt();
					
						this.NOMBRE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.ID = objectIn.readInt();
					
						this.NOMBRE = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.ID);
					
						writeString(this.NOMBRE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.ID);
					
						writeString(this.NOMBRE, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
		sb.append(",CODIGO="+CODIGO);
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row77Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SIGLA, other.SIGLA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CODIGO, other.CODIGO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.FUERZA_ID, other.FUERZA_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row77Struct row77 = new row77Struct();




	
	/**
	 * [tAdvancedHash_row77 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row77", false);
		start_Hash.put("tAdvancedHash_row77", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row77";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row77");
					}
				
		int tos_count_tAdvancedHash_row77 = 0;
		

			   		// connection name:row77
			   		// source node:tHashInput_15 - inputs:(after_tOracleInput_4) outputs:(row77,row77) | target node:tAdvancedHash_row77 - inputs:(row77) outputs:()
			   		// linked node: tMap_2 - inputs:(row24,row25,row64,row65,row66,row67,row68,row69,row70,row71,row72,row73,row74,row75,row76,row77,row79,row80,row81,row82,row46,row127,row152,row154) outputs:(Errores,Actualizables)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row77 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row77Struct> tHash_Lookup_row77 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row77Struct>getLookup(matchingModeEnum_row77);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row77", tHash_Lookup_row77);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row77 begin ] stop
 */



	
	/**
	 * [tHashInput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_15", false);
		start_Hash.put("tHashInput_15", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_15";
	
	
		int tos_count_tHashInput_15 = 0;
		


int nb_line_tHashInput_15 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_15=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row63Struct> tHashFile_tHashInput_15 = mf_tHashInput_15.getAdvancedMemoryHashFile("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_16");
if(tHashFile_tHashInput_15==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row63Struct> iterator_tHashInput_15 = tHashFile_tHashInput_15.iterator();
while (iterator_tHashInput_15.hasNext()) {
    row63Struct next_tHashInput_15 = iterator_tHashInput_15.next();

	row77.ID = next_tHashInput_15.ID;
	row77.NOMBRE = next_tHashInput_15.NOMBRE;
	row77.SIGLA = next_tHashInput_15.SIGLA;
	row77.CODIGO = next_tHashInput_15.CODIGO;
	row77.FUERZA_ID = next_tHashInput_15.FUERZA_ID;

 



/**
 * [tHashInput_15 begin ] stop
 */
	
	/**
	 * [tHashInput_15 main ] start
	 */

	

	
	
	currentComponent="tHashInput_15";
	
	

 


	tos_count_tHashInput_15++;

/**
 * [tHashInput_15 main ] stop
 */
	
	/**
	 * [tHashInput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_15";
	
	

 



/**
 * [tHashInput_15 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row77 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row77";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row77"
						
						);
					}
					


			   
			   

					row77Struct row77_HashRow = new row77Struct();
		   	   	   
				
				row77_HashRow.ID = row77.ID;
				
				row77_HashRow.NOMBRE = row77.NOMBRE;
				
				row77_HashRow.SIGLA = row77.SIGLA;
				
				row77_HashRow.CODIGO = row77.CODIGO;
				
				row77_HashRow.FUERZA_ID = row77.FUERZA_ID;
				
			tHash_Lookup_row77.put(row77_HashRow);
			
            




 


	tos_count_tAdvancedHash_row77++;

/**
 * [tAdvancedHash_row77 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row77 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row77";
	
	

 



/**
 * [tAdvancedHash_row77 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row77 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row77";
	
	

 



/**
 * [tAdvancedHash_row77 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_15";
	
	

 



/**
 * [tHashInput_15 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_15 end ] start
	 */

	

	
	
	currentComponent="tHashInput_15";
	
	
    

		
			nb_line_tHashInput_15++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_16");
	


	globalMap.put("tHashInput_15_NB_LINE", nb_line_tHashInput_15);       

 

ok_Hash.put("tHashInput_15", true);
end_Hash.put("tHashInput_15", System.currentTimeMillis());




/**
 * [tHashInput_15 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row77 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row77";
	
	

tHash_Lookup_row77.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row77");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row77", true);
end_Hash.put("tAdvancedHash_row77", System.currentTimeMillis());




/**
 * [tAdvancedHash_row77 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_15 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_15";
	
	

 



/**
 * [tHashInput_15 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row77 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row77";
	
	

 



/**
 * [tAdvancedHash_row77 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_15_SUBPROCESS_STATE", 1);
	}
	


public static class row79Struct implements routines.system.IPersistableComparableLookupRow<row79Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String CODPAIS;

				public String getCODPAIS () {
					return this.CODPAIS;
				}

				public Boolean CODPAISIsNullable(){
				    return false;
				}
				public Boolean CODPAISIsKey(){
				    return false;
				}
				public Integer CODPAISLength(){
				    return 5;
				}
				public Integer CODPAISPrecision(){
				    return 0;
				}
				public String CODPAISDefault(){
				
					return null;
				
				}
				public String CODPAISComment(){
				
				    return "";
				
				}
				public String CODPAISPattern(){
				
					return "";
				
				}
				public String CODPAISOriginalDbColumnName(){
				
					return "CODPAIS";
				
				}

				
			    public String CODDEPTO;

				public String getCODDEPTO () {
					return this.CODDEPTO;
				}

				public Boolean CODDEPTOIsNullable(){
				    return false;
				}
				public Boolean CODDEPTOIsKey(){
				    return false;
				}
				public Integer CODDEPTOLength(){
				    return 5;
				}
				public Integer CODDEPTOPrecision(){
				    return 0;
				}
				public String CODDEPTODefault(){
				
					return null;
				
				}
				public String CODDEPTOComment(){
				
				    return "";
				
				}
				public String CODDEPTOPattern(){
				
					return "";
				
				}
				public String CODDEPTOOriginalDbColumnName(){
				
					return "CODDEPTO";
				
				}

				
			    public String CODMCPIO;

				public String getCODMCPIO () {
					return this.CODMCPIO;
				}

				public Boolean CODMCPIOIsNullable(){
				    return false;
				}
				public Boolean CODMCPIOIsKey(){
				    return false;
				}
				public Integer CODMCPIOLength(){
				    return 10;
				}
				public Integer CODMCPIOPrecision(){
				    return 0;
				}
				public String CODMCPIODefault(){
				
					return null;
				
				}
				public String CODMCPIOComment(){
				
				    return "";
				
				}
				public String CODMCPIOPattern(){
				
					return "";
				
				}
				public String CODMCPIOOriginalDbColumnName(){
				
					return "CODMCPIO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CODPAIS == null) ? 0 : this.CODPAIS.hashCode());
					
						result = prime * result + ((this.CODDEPTO == null) ? 0 : this.CODDEPTO.hashCode());
					
						result = prime * result + ((this.CODMCPIO == null) ? 0 : this.CODMCPIO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row79Struct other = (row79Struct) obj;
		
						if (this.CODPAIS == null) {
							if (other.CODPAIS != null)
								return false;
						
						} else if (!this.CODPAIS.equals(other.CODPAIS))
						
							return false;
					
						if (this.CODDEPTO == null) {
							if (other.CODDEPTO != null)
								return false;
						
						} else if (!this.CODDEPTO.equals(other.CODDEPTO))
						
							return false;
					
						if (this.CODMCPIO == null) {
							if (other.CODMCPIO != null)
								return false;
						
						} else if (!this.CODMCPIO.equals(other.CODMCPIO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row79Struct other) {

		other.ID = this.ID;
	            other.CODPAIS = this.CODPAIS;
	            other.CODDEPTO = this.CODDEPTO;
	            other.CODMCPIO = this.CODMCPIO;
	            
	}

	public void copyKeysDataTo(row79Struct other) {

		other.CODPAIS = this.CODPAIS;
	            	other.CODDEPTO = this.CODDEPTO;
	            	other.CODMCPIO = this.CODMCPIO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.CODPAIS = readString(dis);
					
					this.CODDEPTO = readString(dis);
					
					this.CODMCPIO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.CODPAIS = readString(dis);
					
					this.CODDEPTO = readString(dis);
					
					this.CODMCPIO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODPAIS,dos);
					
					// String
				
						writeString(this.CODDEPTO,dos);
					
					// String
				
						writeString(this.CODMCPIO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODPAIS,dos);
					
					// String
				
						writeString(this.CODDEPTO,dos);
					
					// String
				
						writeString(this.CODMCPIO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.ID = objectIn.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CODPAIS="+CODPAIS);
		sb.append(",CODDEPTO="+CODDEPTO);
		sb.append(",CODMCPIO="+CODMCPIO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row79Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CODPAIS, other.CODPAIS);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CODDEPTO, other.CODDEPTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CODMCPIO, other.CODMCPIO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_16_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row79Struct row79 = new row79Struct();




	
	/**
	 * [tAdvancedHash_row79 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row79", false);
		start_Hash.put("tAdvancedHash_row79", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row79";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row79");
					}
				
		int tos_count_tAdvancedHash_row79 = 0;
		

			   		// connection name:row79
			   		// source node:tHashInput_16 - inputs:(after_tOracleInput_4) outputs:(row79,row79) | target node:tAdvancedHash_row79 - inputs:(row79) outputs:()
			   		// linked node: tMap_2 - inputs:(row24,row25,row64,row65,row66,row67,row68,row69,row70,row71,row72,row73,row74,row75,row76,row77,row79,row80,row81,row82,row46,row127,row152,row154) outputs:(Errores,Actualizables)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row79 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row79Struct> tHash_Lookup_row79 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row79Struct>getLookup(matchingModeEnum_row79);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row79", tHash_Lookup_row79);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row79 begin ] stop
 */



	
	/**
	 * [tHashInput_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_16", false);
		start_Hash.put("tHashInput_16", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_16";
	
	
		int tos_count_tHashInput_16 = 0;
		


int nb_line_tHashInput_16 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_16=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row78Struct> tHashFile_tHashInput_16 = mf_tHashInput_16.getAdvancedMemoryHashFile("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_17");
if(tHashFile_tHashInput_16==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row78Struct> iterator_tHashInput_16 = tHashFile_tHashInput_16.iterator();
while (iterator_tHashInput_16.hasNext()) {
    row78Struct next_tHashInput_16 = iterator_tHashInput_16.next();

	row79.ID = next_tHashInput_16.ID;
	row79.CODPAIS = next_tHashInput_16.CODPAIS;
	row79.CODDEPTO = next_tHashInput_16.CODDEPTO;
	row79.CODMCPIO = next_tHashInput_16.CODMCPIO;

 



/**
 * [tHashInput_16 begin ] stop
 */
	
	/**
	 * [tHashInput_16 main ] start
	 */

	

	
	
	currentComponent="tHashInput_16";
	
	

 


	tos_count_tHashInput_16++;

/**
 * [tHashInput_16 main ] stop
 */
	
	/**
	 * [tHashInput_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_16";
	
	

 



/**
 * [tHashInput_16 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row79 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row79";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row79"
						
						);
					}
					


			   
			   

					row79Struct row79_HashRow = new row79Struct();
		   	   	   
				
				row79_HashRow.ID = row79.ID;
				
				row79_HashRow.CODPAIS = row79.CODPAIS;
				
				row79_HashRow.CODDEPTO = row79.CODDEPTO;
				
				row79_HashRow.CODMCPIO = row79.CODMCPIO;
				
			tHash_Lookup_row79.put(row79_HashRow);
			
            




 


	tos_count_tAdvancedHash_row79++;

/**
 * [tAdvancedHash_row79 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row79 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row79";
	
	

 



/**
 * [tAdvancedHash_row79 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row79 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row79";
	
	

 



/**
 * [tAdvancedHash_row79 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_16";
	
	

 



/**
 * [tHashInput_16 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_16 end ] start
	 */

	

	
	
	currentComponent="tHashInput_16";
	
	
    

		
			nb_line_tHashInput_16++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_17");
	


	globalMap.put("tHashInput_16_NB_LINE", nb_line_tHashInput_16);       

 

ok_Hash.put("tHashInput_16", true);
end_Hash.put("tHashInput_16", System.currentTimeMillis());




/**
 * [tHashInput_16 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row79 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row79";
	
	

tHash_Lookup_row79.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row79");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row79", true);
end_Hash.put("tAdvancedHash_row79", System.currentTimeMillis());




/**
 * [tAdvancedHash_row79 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_16 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_16";
	
	

 



/**
 * [tHashInput_16 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row79 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row79";
	
	

 



/**
 * [tAdvancedHash_row79 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_16_SUBPROCESS_STATE", 1);
	}
	


public static class row80Struct implements routines.system.IPersistableComparableLookupRow<row80Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 20;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 100;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public Integer DIVIPOLA_ID;

				public Integer getDIVIPOLA_ID () {
					return this.DIVIPOLA_ID;
				}

				public Boolean DIVIPOLA_IDIsNullable(){
				    return true;
				}
				public Boolean DIVIPOLA_IDIsKey(){
				    return false;
				}
				public Integer DIVIPOLA_IDLength(){
				    return 0;
				}
				public Integer DIVIPOLA_IDPrecision(){
				    return null;
				}
				public String DIVIPOLA_IDDefault(){
				
					return "";
				
				}
				public String DIVIPOLA_IDComment(){
				
				    return "";
				
				}
				public String DIVIPOLA_IDPattern(){
				
					return "";
				
				}
				public String DIVIPOLA_IDOriginalDbColumnName(){
				
					return "DIVIPOLA_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CODIGO == null) ? 0 : this.CODIGO.hashCode());
					
						result = prime * result + ((this.DIVIPOLA_ID == null) ? 0 : this.DIVIPOLA_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row80Struct other = (row80Struct) obj;
		
						if (this.CODIGO == null) {
							if (other.CODIGO != null)
								return false;
						
						} else if (!this.CODIGO.equals(other.CODIGO))
						
							return false;
					
						if (this.DIVIPOLA_ID == null) {
							if (other.DIVIPOLA_ID != null)
								return false;
						
						} else if (!this.DIVIPOLA_ID.equals(other.DIVIPOLA_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row80Struct other) {

		other.ID = this.ID;
	            other.CODIGO = this.CODIGO;
	            other.NOMBRE = this.NOMBRE;
	            other.DIVIPOLA_ID = this.DIVIPOLA_ID;
	            
	}

	public void copyKeysDataTo(row80Struct other) {

		other.CODIGO = this.CODIGO;
	            	other.DIVIPOLA_ID = this.DIVIPOLA_ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.CODIGO = readString(dis);
					
						this.DIVIPOLA_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.CODIGO = readString(dis);
					
						this.DIVIPOLA_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODIGO,dos);
					
					// Integer
				
						writeInteger(this.DIVIPOLA_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODIGO,dos);
					
					// Integer
				
						writeInteger(this.DIVIPOLA_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.ID = dis.readInt();
					
						this.NOMBRE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.ID = objectIn.readInt();
					
						this.NOMBRE = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.ID);
					
						writeString(this.NOMBRE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.ID);
					
						writeString(this.NOMBRE, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CODIGO="+CODIGO);
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",DIVIPOLA_ID="+String.valueOf(DIVIPOLA_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row80Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CODIGO, other.CODIGO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DIVIPOLA_ID, other.DIVIPOLA_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_17_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row80Struct row80 = new row80Struct();




	
	/**
	 * [tAdvancedHash_row80 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row80", false);
		start_Hash.put("tAdvancedHash_row80", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row80";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row80");
					}
				
		int tos_count_tAdvancedHash_row80 = 0;
		

			   		// connection name:row80
			   		// source node:tHashInput_17 - inputs:(after_tOracleInput_4) outputs:(row80,row80) | target node:tAdvancedHash_row80 - inputs:(row80) outputs:()
			   		// linked node: tMap_2 - inputs:(row24,row25,row64,row65,row66,row67,row68,row69,row70,row71,row72,row73,row74,row75,row76,row77,row79,row80,row81,row82,row46,row127,row152,row154) outputs:(Errores,Actualizables)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row80 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row80Struct> tHash_Lookup_row80 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row80Struct>getLookup(matchingModeEnum_row80);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row80", tHash_Lookup_row80);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row80 begin ] stop
 */



	
	/**
	 * [tHashInput_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_17", false);
		start_Hash.put("tHashInput_17", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_17";
	
	
		int tos_count_tHashInput_17 = 0;
		


int nb_line_tHashInput_17 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_17=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row52Struct> tHashFile_tHashInput_17 = mf_tHashInput_17.getAdvancedMemoryHashFile("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_5");
if(tHashFile_tHashInput_17==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row52Struct> iterator_tHashInput_17 = tHashFile_tHashInput_17.iterator();
while (iterator_tHashInput_17.hasNext()) {
    row52Struct next_tHashInput_17 = iterator_tHashInput_17.next();

	row80.ID = next_tHashInput_17.ID;
	row80.CODIGO = next_tHashInput_17.CODIGO;
	row80.NOMBRE = next_tHashInput_17.NOMBRE;
	row80.DIVIPOLA_ID = next_tHashInput_17.DIVIPOLA_ID;

 



/**
 * [tHashInput_17 begin ] stop
 */
	
	/**
	 * [tHashInput_17 main ] start
	 */

	

	
	
	currentComponent="tHashInput_17";
	
	

 


	tos_count_tHashInput_17++;

/**
 * [tHashInput_17 main ] stop
 */
	
	/**
	 * [tHashInput_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_17";
	
	

 



/**
 * [tHashInput_17 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row80 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row80";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row80"
						
						);
					}
					


			   
			   

					row80Struct row80_HashRow = new row80Struct();
		   	   	   
				
				row80_HashRow.ID = row80.ID;
				
				row80_HashRow.CODIGO = row80.CODIGO;
				
				row80_HashRow.NOMBRE = row80.NOMBRE;
				
				row80_HashRow.DIVIPOLA_ID = row80.DIVIPOLA_ID;
				
			tHash_Lookup_row80.put(row80_HashRow);
			
            




 


	tos_count_tAdvancedHash_row80++;

/**
 * [tAdvancedHash_row80 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row80 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row80";
	
	

 



/**
 * [tAdvancedHash_row80 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row80 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row80";
	
	

 



/**
 * [tAdvancedHash_row80 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_17";
	
	

 



/**
 * [tHashInput_17 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_17 end ] start
	 */

	

	
	
	currentComponent="tHashInput_17";
	
	
    

		
			nb_line_tHashInput_17++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_5");
	


	globalMap.put("tHashInput_17_NB_LINE", nb_line_tHashInput_17);       

 

ok_Hash.put("tHashInput_17", true);
end_Hash.put("tHashInput_17", System.currentTimeMillis());




/**
 * [tHashInput_17 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row80 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row80";
	
	

tHash_Lookup_row80.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row80");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row80", true);
end_Hash.put("tAdvancedHash_row80", System.currentTimeMillis());




/**
 * [tAdvancedHash_row80 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_17 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_17";
	
	

 



/**
 * [tHashInput_17 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row80 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row80";
	
	

 



/**
 * [tAdvancedHash_row80 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_17_SUBPROCESS_STATE", 1);
	}
	


public static class row81Struct implements routines.system.IPersistableComparableLookupRow<row81Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String CODPAIS;

				public String getCODPAIS () {
					return this.CODPAIS;
				}

				public Boolean CODPAISIsNullable(){
				    return false;
				}
				public Boolean CODPAISIsKey(){
				    return false;
				}
				public Integer CODPAISLength(){
				    return 5;
				}
				public Integer CODPAISPrecision(){
				    return 0;
				}
				public String CODPAISDefault(){
				
					return null;
				
				}
				public String CODPAISComment(){
				
				    return "";
				
				}
				public String CODPAISPattern(){
				
					return "";
				
				}
				public String CODPAISOriginalDbColumnName(){
				
					return "CODPAIS";
				
				}

				
			    public String CODDEPTO;

				public String getCODDEPTO () {
					return this.CODDEPTO;
				}

				public Boolean CODDEPTOIsNullable(){
				    return false;
				}
				public Boolean CODDEPTOIsKey(){
				    return false;
				}
				public Integer CODDEPTOLength(){
				    return 5;
				}
				public Integer CODDEPTOPrecision(){
				    return 0;
				}
				public String CODDEPTODefault(){
				
					return null;
				
				}
				public String CODDEPTOComment(){
				
				    return "";
				
				}
				public String CODDEPTOPattern(){
				
					return "";
				
				}
				public String CODDEPTOOriginalDbColumnName(){
				
					return "CODDEPTO";
				
				}

				
			    public String CODMCPIO;

				public String getCODMCPIO () {
					return this.CODMCPIO;
				}

				public Boolean CODMCPIOIsNullable(){
				    return false;
				}
				public Boolean CODMCPIOIsKey(){
				    return false;
				}
				public Integer CODMCPIOLength(){
				    return 10;
				}
				public Integer CODMCPIOPrecision(){
				    return 0;
				}
				public String CODMCPIODefault(){
				
					return null;
				
				}
				public String CODMCPIOComment(){
				
				    return "";
				
				}
				public String CODMCPIOPattern(){
				
					return "";
				
				}
				public String CODMCPIOOriginalDbColumnName(){
				
					return "CODMCPIO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CODPAIS == null) ? 0 : this.CODPAIS.hashCode());
					
						result = prime * result + ((this.CODDEPTO == null) ? 0 : this.CODDEPTO.hashCode());
					
						result = prime * result + ((this.CODMCPIO == null) ? 0 : this.CODMCPIO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row81Struct other = (row81Struct) obj;
		
						if (this.CODPAIS == null) {
							if (other.CODPAIS != null)
								return false;
						
						} else if (!this.CODPAIS.equals(other.CODPAIS))
						
							return false;
					
						if (this.CODDEPTO == null) {
							if (other.CODDEPTO != null)
								return false;
						
						} else if (!this.CODDEPTO.equals(other.CODDEPTO))
						
							return false;
					
						if (this.CODMCPIO == null) {
							if (other.CODMCPIO != null)
								return false;
						
						} else if (!this.CODMCPIO.equals(other.CODMCPIO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row81Struct other) {

		other.ID = this.ID;
	            other.CODPAIS = this.CODPAIS;
	            other.CODDEPTO = this.CODDEPTO;
	            other.CODMCPIO = this.CODMCPIO;
	            
	}

	public void copyKeysDataTo(row81Struct other) {

		other.CODPAIS = this.CODPAIS;
	            	other.CODDEPTO = this.CODDEPTO;
	            	other.CODMCPIO = this.CODMCPIO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.CODPAIS = readString(dis);
					
					this.CODDEPTO = readString(dis);
					
					this.CODMCPIO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.CODPAIS = readString(dis);
					
					this.CODDEPTO = readString(dis);
					
					this.CODMCPIO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODPAIS,dos);
					
					// String
				
						writeString(this.CODDEPTO,dos);
					
					// String
				
						writeString(this.CODMCPIO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODPAIS,dos);
					
					// String
				
						writeString(this.CODDEPTO,dos);
					
					// String
				
						writeString(this.CODMCPIO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.ID = objectIn.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CODPAIS="+CODPAIS);
		sb.append(",CODDEPTO="+CODDEPTO);
		sb.append(",CODMCPIO="+CODMCPIO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row81Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CODPAIS, other.CODPAIS);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CODDEPTO, other.CODDEPTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CODMCPIO, other.CODMCPIO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_18Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_18_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row81Struct row81 = new row81Struct();




	
	/**
	 * [tAdvancedHash_row81 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row81", false);
		start_Hash.put("tAdvancedHash_row81", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row81";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row81");
					}
				
		int tos_count_tAdvancedHash_row81 = 0;
		

			   		// connection name:row81
			   		// source node:tHashInput_18 - inputs:(after_tOracleInput_4) outputs:(row81,row81) | target node:tAdvancedHash_row81 - inputs:(row81) outputs:()
			   		// linked node: tMap_2 - inputs:(row24,row25,row64,row65,row66,row67,row68,row69,row70,row71,row72,row73,row74,row75,row76,row77,row79,row80,row81,row82,row46,row127,row152,row154) outputs:(Errores,Actualizables)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row81 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row81Struct> tHash_Lookup_row81 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row81Struct>getLookup(matchingModeEnum_row81);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row81", tHash_Lookup_row81);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row81 begin ] stop
 */



	
	/**
	 * [tHashInput_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_18", false);
		start_Hash.put("tHashInput_18", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_18";
	
	
		int tos_count_tHashInput_18 = 0;
		


int nb_line_tHashInput_18 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_18=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row78Struct> tHashFile_tHashInput_18 = mf_tHashInput_18.getAdvancedMemoryHashFile("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_17");
if(tHashFile_tHashInput_18==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row78Struct> iterator_tHashInput_18 = tHashFile_tHashInput_18.iterator();
while (iterator_tHashInput_18.hasNext()) {
    row78Struct next_tHashInput_18 = iterator_tHashInput_18.next();

	row81.ID = next_tHashInput_18.ID;
	row81.CODPAIS = next_tHashInput_18.CODPAIS;
	row81.CODDEPTO = next_tHashInput_18.CODDEPTO;
	row81.CODMCPIO = next_tHashInput_18.CODMCPIO;

 



/**
 * [tHashInput_18 begin ] stop
 */
	
	/**
	 * [tHashInput_18 main ] start
	 */

	

	
	
	currentComponent="tHashInput_18";
	
	

 


	tos_count_tHashInput_18++;

/**
 * [tHashInput_18 main ] stop
 */
	
	/**
	 * [tHashInput_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_18";
	
	

 



/**
 * [tHashInput_18 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row81 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row81";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row81"
						
						);
					}
					


			   
			   

					row81Struct row81_HashRow = new row81Struct();
		   	   	   
				
				row81_HashRow.ID = row81.ID;
				
				row81_HashRow.CODPAIS = row81.CODPAIS;
				
				row81_HashRow.CODDEPTO = row81.CODDEPTO;
				
				row81_HashRow.CODMCPIO = row81.CODMCPIO;
				
			tHash_Lookup_row81.put(row81_HashRow);
			
            




 


	tos_count_tAdvancedHash_row81++;

/**
 * [tAdvancedHash_row81 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row81 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row81";
	
	

 



/**
 * [tAdvancedHash_row81 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row81 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row81";
	
	

 



/**
 * [tAdvancedHash_row81 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_18";
	
	

 



/**
 * [tHashInput_18 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_18 end ] start
	 */

	

	
	
	currentComponent="tHashInput_18";
	
	
    

		
			nb_line_tHashInput_18++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_17");
	


	globalMap.put("tHashInput_18_NB_LINE", nb_line_tHashInput_18);       

 

ok_Hash.put("tHashInput_18", true);
end_Hash.put("tHashInput_18", System.currentTimeMillis());




/**
 * [tHashInput_18 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row81 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row81";
	
	

tHash_Lookup_row81.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row81");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row81", true);
end_Hash.put("tAdvancedHash_row81", System.currentTimeMillis());




/**
 * [tAdvancedHash_row81 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_18 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_18";
	
	

 



/**
 * [tHashInput_18 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row81 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row81";
	
	

 



/**
 * [tAdvancedHash_row81 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_18_SUBPROCESS_STATE", 1);
	}
	


public static class row82Struct implements routines.system.IPersistableComparableLookupRow<row82Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String CODPAIS;

				public String getCODPAIS () {
					return this.CODPAIS;
				}

				public Boolean CODPAISIsNullable(){
				    return false;
				}
				public Boolean CODPAISIsKey(){
				    return false;
				}
				public Integer CODPAISLength(){
				    return 5;
				}
				public Integer CODPAISPrecision(){
				    return 0;
				}
				public String CODPAISDefault(){
				
					return null;
				
				}
				public String CODPAISComment(){
				
				    return "";
				
				}
				public String CODPAISPattern(){
				
					return "";
				
				}
				public String CODPAISOriginalDbColumnName(){
				
					return "CODPAIS";
				
				}

				
			    public String CODDEPTO;

				public String getCODDEPTO () {
					return this.CODDEPTO;
				}

				public Boolean CODDEPTOIsNullable(){
				    return false;
				}
				public Boolean CODDEPTOIsKey(){
				    return false;
				}
				public Integer CODDEPTOLength(){
				    return 5;
				}
				public Integer CODDEPTOPrecision(){
				    return 0;
				}
				public String CODDEPTODefault(){
				
					return null;
				
				}
				public String CODDEPTOComment(){
				
				    return "";
				
				}
				public String CODDEPTOPattern(){
				
					return "";
				
				}
				public String CODDEPTOOriginalDbColumnName(){
				
					return "CODDEPTO";
				
				}

				
			    public String CODMCPIO;

				public String getCODMCPIO () {
					return this.CODMCPIO;
				}

				public Boolean CODMCPIOIsNullable(){
				    return false;
				}
				public Boolean CODMCPIOIsKey(){
				    return false;
				}
				public Integer CODMCPIOLength(){
				    return 10;
				}
				public Integer CODMCPIOPrecision(){
				    return 0;
				}
				public String CODMCPIODefault(){
				
					return null;
				
				}
				public String CODMCPIOComment(){
				
				    return "";
				
				}
				public String CODMCPIOPattern(){
				
					return "";
				
				}
				public String CODMCPIOOriginalDbColumnName(){
				
					return "CODMCPIO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CODPAIS == null) ? 0 : this.CODPAIS.hashCode());
					
						result = prime * result + ((this.CODDEPTO == null) ? 0 : this.CODDEPTO.hashCode());
					
						result = prime * result + ((this.CODMCPIO == null) ? 0 : this.CODMCPIO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row82Struct other = (row82Struct) obj;
		
						if (this.CODPAIS == null) {
							if (other.CODPAIS != null)
								return false;
						
						} else if (!this.CODPAIS.equals(other.CODPAIS))
						
							return false;
					
						if (this.CODDEPTO == null) {
							if (other.CODDEPTO != null)
								return false;
						
						} else if (!this.CODDEPTO.equals(other.CODDEPTO))
						
							return false;
					
						if (this.CODMCPIO == null) {
							if (other.CODMCPIO != null)
								return false;
						
						} else if (!this.CODMCPIO.equals(other.CODMCPIO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row82Struct other) {

		other.ID = this.ID;
	            other.CODPAIS = this.CODPAIS;
	            other.CODDEPTO = this.CODDEPTO;
	            other.CODMCPIO = this.CODMCPIO;
	            
	}

	public void copyKeysDataTo(row82Struct other) {

		other.CODPAIS = this.CODPAIS;
	            	other.CODDEPTO = this.CODDEPTO;
	            	other.CODMCPIO = this.CODMCPIO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.CODPAIS = readString(dis);
					
					this.CODDEPTO = readString(dis);
					
					this.CODMCPIO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.CODPAIS = readString(dis);
					
					this.CODDEPTO = readString(dis);
					
					this.CODMCPIO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODPAIS,dos);
					
					// String
				
						writeString(this.CODDEPTO,dos);
					
					// String
				
						writeString(this.CODMCPIO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODPAIS,dos);
					
					// String
				
						writeString(this.CODDEPTO,dos);
					
					// String
				
						writeString(this.CODMCPIO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.ID = objectIn.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CODPAIS="+CODPAIS);
		sb.append(",CODDEPTO="+CODDEPTO);
		sb.append(",CODMCPIO="+CODMCPIO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row82Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CODPAIS, other.CODPAIS);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CODDEPTO, other.CODDEPTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CODMCPIO, other.CODMCPIO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_19Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_19_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row82Struct row82 = new row82Struct();




	
	/**
	 * [tAdvancedHash_row82 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row82", false);
		start_Hash.put("tAdvancedHash_row82", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row82";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row82");
					}
				
		int tos_count_tAdvancedHash_row82 = 0;
		

			   		// connection name:row82
			   		// source node:tHashInput_19 - inputs:(after_tOracleInput_4) outputs:(row82,row82) | target node:tAdvancedHash_row82 - inputs:(row82) outputs:()
			   		// linked node: tMap_2 - inputs:(row24,row25,row64,row65,row66,row67,row68,row69,row70,row71,row72,row73,row74,row75,row76,row77,row79,row80,row81,row82,row46,row127,row152,row154) outputs:(Errores,Actualizables)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row82 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row82Struct> tHash_Lookup_row82 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row82Struct>getLookup(matchingModeEnum_row82);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row82", tHash_Lookup_row82);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row82 begin ] stop
 */



	
	/**
	 * [tHashInput_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_19", false);
		start_Hash.put("tHashInput_19", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_19";
	
	
		int tos_count_tHashInput_19 = 0;
		


int nb_line_tHashInput_19 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_19=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row78Struct> tHashFile_tHashInput_19 = mf_tHashInput_19.getAdvancedMemoryHashFile("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_17");
if(tHashFile_tHashInput_19==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row78Struct> iterator_tHashInput_19 = tHashFile_tHashInput_19.iterator();
while (iterator_tHashInput_19.hasNext()) {
    row78Struct next_tHashInput_19 = iterator_tHashInput_19.next();

	row82.ID = next_tHashInput_19.ID;
	row82.CODPAIS = next_tHashInput_19.CODPAIS;
	row82.CODDEPTO = next_tHashInput_19.CODDEPTO;
	row82.CODMCPIO = next_tHashInput_19.CODMCPIO;

 



/**
 * [tHashInput_19 begin ] stop
 */
	
	/**
	 * [tHashInput_19 main ] start
	 */

	

	
	
	currentComponent="tHashInput_19";
	
	

 


	tos_count_tHashInput_19++;

/**
 * [tHashInput_19 main ] stop
 */
	
	/**
	 * [tHashInput_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_19";
	
	

 



/**
 * [tHashInput_19 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row82 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row82";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row82"
						
						);
					}
					


			   
			   

					row82Struct row82_HashRow = new row82Struct();
		   	   	   
				
				row82_HashRow.ID = row82.ID;
				
				row82_HashRow.CODPAIS = row82.CODPAIS;
				
				row82_HashRow.CODDEPTO = row82.CODDEPTO;
				
				row82_HashRow.CODMCPIO = row82.CODMCPIO;
				
			tHash_Lookup_row82.put(row82_HashRow);
			
            




 


	tos_count_tAdvancedHash_row82++;

/**
 * [tAdvancedHash_row82 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row82 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row82";
	
	

 



/**
 * [tAdvancedHash_row82 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row82 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row82";
	
	

 



/**
 * [tAdvancedHash_row82 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_19";
	
	

 



/**
 * [tHashInput_19 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_19 end ] start
	 */

	

	
	
	currentComponent="tHashInput_19";
	
	
    

		
			nb_line_tHashInput_19++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_17");
	


	globalMap.put("tHashInput_19_NB_LINE", nb_line_tHashInput_19);       

 

ok_Hash.put("tHashInput_19", true);
end_Hash.put("tHashInput_19", System.currentTimeMillis());




/**
 * [tHashInput_19 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row82 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row82";
	
	

tHash_Lookup_row82.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row82");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row82", true);
end_Hash.put("tAdvancedHash_row82", System.currentTimeMillis());




/**
 * [tAdvancedHash_row82 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_19 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_19";
	
	

 



/**
 * [tHashInput_19 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row82 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row82";
	
	

 



/**
 * [tAdvancedHash_row82 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_19_SUBPROCESS_STATE", 1);
	}
	


public static class row46Struct implements routines.system.IPersistableComparableLookupRow<row46Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 150;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 10;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SIGLA == null) ? 0 : this.SIGLA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row46Struct other = (row46Struct) obj;
		
						if (this.SIGLA == null) {
							if (other.SIGLA != null)
								return false;
						
						} else if (!this.SIGLA.equals(other.SIGLA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row46Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.SIGLA = this.SIGLA;
	            
	}

	public void copyKeysDataTo(row46Struct other) {

		other.SIGLA = this.SIGLA;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.ID = dis.readInt();
					
						this.NOMBRE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.ID = objectIn.readInt();
					
						this.NOMBRE = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.ID);
					
						writeString(this.NOMBRE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.ID);
					
						writeString(this.NOMBRE, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row46Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SIGLA, other.SIGLA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_20Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_20_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row46Struct row46 = new row46Struct();




	
	/**
	 * [tAdvancedHash_row46 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row46", false);
		start_Hash.put("tAdvancedHash_row46", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row46";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row46");
					}
				
		int tos_count_tAdvancedHash_row46 = 0;
		

			   		// connection name:row46
			   		// source node:tHashInput_20 - inputs:(after_tOracleInput_4) outputs:(row46,row46) | target node:tAdvancedHash_row46 - inputs:(row46) outputs:()
			   		// linked node: tMap_2 - inputs:(row24,row25,row64,row65,row66,row67,row68,row69,row70,row71,row72,row73,row74,row75,row76,row77,row79,row80,row81,row82,row46,row127,row152,row154) outputs:(Errores,Actualizables)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row46 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row46Struct> tHash_Lookup_row46 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row46Struct>getLookup(matchingModeEnum_row46);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row46", tHash_Lookup_row46);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row46 begin ] stop
 */



	
	/**
	 * [tHashInput_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_20", false);
		start_Hash.put("tHashInput_20", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_20";
	
	
		int tos_count_tHashInput_20 = 0;
		


int nb_line_tHashInput_20 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_20=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row45Struct> tHashFile_tHashInput_20 = mf_tHashInput_20.getAdvancedMemoryHashFile("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_18");
if(tHashFile_tHashInput_20==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row45Struct> iterator_tHashInput_20 = tHashFile_tHashInput_20.iterator();
while (iterator_tHashInput_20.hasNext()) {
    row45Struct next_tHashInput_20 = iterator_tHashInput_20.next();

	row46.ID = next_tHashInput_20.ID;
	row46.NOMBRE = next_tHashInput_20.NOMBRE;
	row46.SIGLA = next_tHashInput_20.SIGLA;

 



/**
 * [tHashInput_20 begin ] stop
 */
	
	/**
	 * [tHashInput_20 main ] start
	 */

	

	
	
	currentComponent="tHashInput_20";
	
	

 


	tos_count_tHashInput_20++;

/**
 * [tHashInput_20 main ] stop
 */
	
	/**
	 * [tHashInput_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_20";
	
	

 



/**
 * [tHashInput_20 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row46 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row46";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row46"
						
						);
					}
					


			   
			   

					row46Struct row46_HashRow = new row46Struct();
		   	   	   
				
				row46_HashRow.ID = row46.ID;
				
				row46_HashRow.NOMBRE = row46.NOMBRE;
				
				row46_HashRow.SIGLA = row46.SIGLA;
				
			tHash_Lookup_row46.put(row46_HashRow);
			
            




 


	tos_count_tAdvancedHash_row46++;

/**
 * [tAdvancedHash_row46 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row46 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row46";
	
	

 



/**
 * [tAdvancedHash_row46 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row46 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row46";
	
	

 



/**
 * [tAdvancedHash_row46 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_20";
	
	

 



/**
 * [tHashInput_20 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_20 end ] start
	 */

	

	
	
	currentComponent="tHashInput_20";
	
	
    

		
			nb_line_tHashInput_20++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_18");
	


	globalMap.put("tHashInput_20_NB_LINE", nb_line_tHashInput_20);       

 

ok_Hash.put("tHashInput_20", true);
end_Hash.put("tHashInput_20", System.currentTimeMillis());




/**
 * [tHashInput_20 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row46 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row46";
	
	

tHash_Lookup_row46.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row46");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row46", true);
end_Hash.put("tAdvancedHash_row46", System.currentTimeMillis());




/**
 * [tAdvancedHash_row46 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_20 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_20";
	
	

 



/**
 * [tHashInput_20 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row46 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row46";
	
	

 



/**
 * [tAdvancedHash_row46 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_20_SUBPROCESS_STATE", 1);
	}
	


public static class row127Struct implements routines.system.IPersistableComparableLookupRow<row127Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String DESCRIPCION;

				public String getDESCRIPCION () {
					return this.DESCRIPCION;
				}

				public Boolean DESCRIPCIONIsNullable(){
				    return false;
				}
				public Boolean DESCRIPCIONIsKey(){
				    return false;
				}
				public Integer DESCRIPCIONLength(){
				    return 150;
				}
				public Integer DESCRIPCIONPrecision(){
				    return 0;
				}
				public String DESCRIPCIONDefault(){
				
					return null;
				
				}
				public String DESCRIPCIONComment(){
				
				    return "";
				
				}
				public String DESCRIPCIONPattern(){
				
					return "";
				
				}
				public String DESCRIPCIONOriginalDbColumnName(){
				
					return "DESCRIPCION";
				
				}

				
			    public int CODIGO;

				public int getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return false;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 10;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.DESCRIPCION == null) ? 0 : this.DESCRIPCION.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row127Struct other = (row127Struct) obj;
		
						if (this.DESCRIPCION == null) {
							if (other.DESCRIPCION != null)
								return false;
						
						} else if (!this.DESCRIPCION.equals(other.DESCRIPCION))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row127Struct other) {

		other.ID = this.ID;
	            other.DESCRIPCION = this.DESCRIPCION;
	            other.CODIGO = this.CODIGO;
	            
	}

	public void copyKeysDataTo(row127Struct other) {

		other.DESCRIPCION = this.DESCRIPCION;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.DESCRIPCION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.DESCRIPCION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DESCRIPCION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DESCRIPCION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.ID = dis.readInt();
					
			            this.CODIGO = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.ID = objectIn.readInt();
					
			            this.CODIGO = objectIn.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.ID);
					
		            	dos.writeInt(this.CODIGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.ID);
					
					objectOut.writeInt(this.CODIGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",DESCRIPCION="+DESCRIPCION);
		sb.append(",CODIGO="+String.valueOf(CODIGO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row127Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.DESCRIPCION, other.DESCRIPCION);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_27Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_27_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row127Struct row127 = new row127Struct();




	
	/**
	 * [tAdvancedHash_row127 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row127", false);
		start_Hash.put("tAdvancedHash_row127", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row127";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row127");
					}
				
		int tos_count_tAdvancedHash_row127 = 0;
		

			   		// connection name:row127
			   		// source node:tHashInput_27 - inputs:(after_tOracleInput_4) outputs:(row127,row127) | target node:tAdvancedHash_row127 - inputs:(row127) outputs:()
			   		// linked node: tMap_2 - inputs:(row24,row25,row64,row65,row66,row67,row68,row69,row70,row71,row72,row73,row74,row75,row76,row77,row79,row80,row81,row82,row46,row127,row152,row154) outputs:(Errores,Actualizables)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row127 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row127Struct> tHash_Lookup_row127 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row127Struct>getLookup(matchingModeEnum_row127);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row127", tHash_Lookup_row127);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row127 begin ] stop
 */



	
	/**
	 * [tHashInput_27 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_27", false);
		start_Hash.put("tHashInput_27", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_27";
	
	
		int tos_count_tHashInput_27 = 0;
		


int nb_line_tHashInput_27 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_27=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row126Struct> tHashFile_tHashInput_27 = mf_tHashInput_27.getAdvancedMemoryHashFile("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_20");
if(tHashFile_tHashInput_27==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row126Struct> iterator_tHashInput_27 = tHashFile_tHashInput_27.iterator();
while (iterator_tHashInput_27.hasNext()) {
    row126Struct next_tHashInput_27 = iterator_tHashInput_27.next();

	row127.ID = next_tHashInput_27.ID;
	row127.DESCRIPCION = next_tHashInput_27.DESCRIPCION;
	row127.CODIGO = next_tHashInput_27.CODIGO;

 



/**
 * [tHashInput_27 begin ] stop
 */
	
	/**
	 * [tHashInput_27 main ] start
	 */

	

	
	
	currentComponent="tHashInput_27";
	
	

 


	tos_count_tHashInput_27++;

/**
 * [tHashInput_27 main ] stop
 */
	
	/**
	 * [tHashInput_27 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_27";
	
	

 



/**
 * [tHashInput_27 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row127 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row127";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row127"
						
						);
					}
					


			   
			   

					row127Struct row127_HashRow = new row127Struct();
		   	   	   
				
				row127_HashRow.ID = row127.ID;
				
				row127_HashRow.DESCRIPCION = row127.DESCRIPCION;
				
				row127_HashRow.CODIGO = row127.CODIGO;
				
			tHash_Lookup_row127.put(row127_HashRow);
			
            




 


	tos_count_tAdvancedHash_row127++;

/**
 * [tAdvancedHash_row127 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row127 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row127";
	
	

 



/**
 * [tAdvancedHash_row127 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row127 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row127";
	
	

 



/**
 * [tAdvancedHash_row127 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_27 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_27";
	
	

 



/**
 * [tHashInput_27 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_27 end ] start
	 */

	

	
	
	currentComponent="tHashInput_27";
	
	
    

		
			nb_line_tHashInput_27++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_20");
	


	globalMap.put("tHashInput_27_NB_LINE", nb_line_tHashInput_27);       

 

ok_Hash.put("tHashInput_27", true);
end_Hash.put("tHashInput_27", System.currentTimeMillis());




/**
 * [tHashInput_27 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row127 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row127";
	
	

tHash_Lookup_row127.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row127");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row127", true);
end_Hash.put("tAdvancedHash_row127", System.currentTimeMillis());




/**
 * [tAdvancedHash_row127 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_27 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_27";
	
	

 



/**
 * [tHashInput_27 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row127 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row127";
	
	

 



/**
 * [tAdvancedHash_row127 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_27_SUBPROCESS_STATE", 1);
	}
	


public static class row152Struct implements routines.system.IPersistableComparableLookupRow<row152Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 150;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 10;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SIGLA == null) ? 0 : this.SIGLA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row152Struct other = (row152Struct) obj;
		
						if (this.SIGLA == null) {
							if (other.SIGLA != null)
								return false;
						
						} else if (!this.SIGLA.equals(other.SIGLA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row152Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.SIGLA = this.SIGLA;
	            
	}

	public void copyKeysDataTo(row152Struct other) {

		other.SIGLA = this.SIGLA;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.ID = dis.readInt();
					
						this.NOMBRE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.ID = objectIn.readInt();
					
						this.NOMBRE = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.ID);
					
						writeString(this.NOMBRE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.ID);
					
						writeString(this.NOMBRE, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row152Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SIGLA, other.SIGLA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_31Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_31_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row152Struct row152 = new row152Struct();




	
	/**
	 * [tAdvancedHash_row152 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row152", false);
		start_Hash.put("tAdvancedHash_row152", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row152";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row152");
					}
				
		int tos_count_tAdvancedHash_row152 = 0;
		

			   		// connection name:row152
			   		// source node:tHashInput_31 - inputs:(after_tOracleInput_4) outputs:(row152,row152) | target node:tAdvancedHash_row152 - inputs:(row152) outputs:()
			   		// linked node: tMap_2 - inputs:(row24,row25,row64,row65,row66,row67,row68,row69,row70,row71,row72,row73,row74,row75,row76,row77,row79,row80,row81,row82,row46,row127,row152,row154) outputs:(Errores,Actualizables)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row152 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row152Struct> tHash_Lookup_row152 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row152Struct>getLookup(matchingModeEnum_row152);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row152", tHash_Lookup_row152);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row152 begin ] stop
 */



	
	/**
	 * [tHashInput_31 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_31", false);
		start_Hash.put("tHashInput_31", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_31";
	
	
		int tos_count_tHashInput_31 = 0;
		


int nb_line_tHashInput_31 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_31=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row151Struct> tHashFile_tHashInput_31 = mf_tHashInput_31.getAdvancedMemoryHashFile("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_21");
if(tHashFile_tHashInput_31==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row151Struct> iterator_tHashInput_31 = tHashFile_tHashInput_31.iterator();
while (iterator_tHashInput_31.hasNext()) {
    row151Struct next_tHashInput_31 = iterator_tHashInput_31.next();

	row152.ID = next_tHashInput_31.ID;
	row152.NOMBRE = next_tHashInput_31.NOMBRE;
	row152.SIGLA = next_tHashInput_31.SIGLA;

 



/**
 * [tHashInput_31 begin ] stop
 */
	
	/**
	 * [tHashInput_31 main ] start
	 */

	

	
	
	currentComponent="tHashInput_31";
	
	

 


	tos_count_tHashInput_31++;

/**
 * [tHashInput_31 main ] stop
 */
	
	/**
	 * [tHashInput_31 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_31";
	
	

 



/**
 * [tHashInput_31 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row152 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row152";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row152"
						
						);
					}
					


			   
			   

					row152Struct row152_HashRow = new row152Struct();
		   	   	   
				
				row152_HashRow.ID = row152.ID;
				
				row152_HashRow.NOMBRE = row152.NOMBRE;
				
				row152_HashRow.SIGLA = row152.SIGLA;
				
			tHash_Lookup_row152.put(row152_HashRow);
			
            




 


	tos_count_tAdvancedHash_row152++;

/**
 * [tAdvancedHash_row152 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row152 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row152";
	
	

 



/**
 * [tAdvancedHash_row152 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row152 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row152";
	
	

 



/**
 * [tAdvancedHash_row152 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_31 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_31";
	
	

 



/**
 * [tHashInput_31 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_31 end ] start
	 */

	

	
	
	currentComponent="tHashInput_31";
	
	
    

		
			nb_line_tHashInput_31++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_21");
	


	globalMap.put("tHashInput_31_NB_LINE", nb_line_tHashInput_31);       

 

ok_Hash.put("tHashInput_31", true);
end_Hash.put("tHashInput_31", System.currentTimeMillis());




/**
 * [tHashInput_31 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row152 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row152";
	
	

tHash_Lookup_row152.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row152");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row152", true);
end_Hash.put("tAdvancedHash_row152", System.currentTimeMillis());




/**
 * [tAdvancedHash_row152 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_31 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_31";
	
	

 



/**
 * [tHashInput_31 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row152 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row152";
	
	

 



/**
 * [tAdvancedHash_row152 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_31_SUBPROCESS_STATE", 1);
	}
	


public static class row154Struct implements routines.system.IPersistableComparableLookupRow<row154Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 150;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 10;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SIGLA == null) ? 0 : this.SIGLA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row154Struct other = (row154Struct) obj;
		
						if (this.SIGLA == null) {
							if (other.SIGLA != null)
								return false;
						
						} else if (!this.SIGLA.equals(other.SIGLA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row154Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.SIGLA = this.SIGLA;
	            
	}

	public void copyKeysDataTo(row154Struct other) {

		other.SIGLA = this.SIGLA;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.ID = dis.readInt();
					
						this.NOMBRE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.ID = objectIn.readInt();
					
						this.NOMBRE = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.ID);
					
						writeString(this.NOMBRE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.ID);
					
						writeString(this.NOMBRE, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row154Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SIGLA, other.SIGLA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_32Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_32_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row154Struct row154 = new row154Struct();




	
	/**
	 * [tAdvancedHash_row154 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row154", false);
		start_Hash.put("tAdvancedHash_row154", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row154";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row154");
					}
				
		int tos_count_tAdvancedHash_row154 = 0;
		

			   		// connection name:row154
			   		// source node:tHashInput_32 - inputs:(after_tOracleInput_4) outputs:(row154,row154) | target node:tAdvancedHash_row154 - inputs:(row154) outputs:()
			   		// linked node: tMap_2 - inputs:(row24,row25,row64,row65,row66,row67,row68,row69,row70,row71,row72,row73,row74,row75,row76,row77,row79,row80,row81,row82,row46,row127,row152,row154) outputs:(Errores,Actualizables)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row154 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row154Struct> tHash_Lookup_row154 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row154Struct>getLookup(matchingModeEnum_row154);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row154", tHash_Lookup_row154);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row154 begin ] stop
 */



	
	/**
	 * [tHashInput_32 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_32", false);
		start_Hash.put("tHashInput_32", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_32";
	
	
		int tos_count_tHashInput_32 = 0;
		


int nb_line_tHashInput_32 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_32=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row153Struct> tHashFile_tHashInput_32 = mf_tHashInput_32.getAdvancedMemoryHashFile("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_22");
if(tHashFile_tHashInput_32==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row153Struct> iterator_tHashInput_32 = tHashFile_tHashInput_32.iterator();
while (iterator_tHashInput_32.hasNext()) {
    row153Struct next_tHashInput_32 = iterator_tHashInput_32.next();

	row154.ID = next_tHashInput_32.ID;
	row154.NOMBRE = next_tHashInput_32.NOMBRE;
	row154.SIGLA = next_tHashInput_32.CODIGO;

 



/**
 * [tHashInput_32 begin ] stop
 */
	
	/**
	 * [tHashInput_32 main ] start
	 */

	

	
	
	currentComponent="tHashInput_32";
	
	

 


	tos_count_tHashInput_32++;

/**
 * [tHashInput_32 main ] stop
 */
	
	/**
	 * [tHashInput_32 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_32";
	
	

 



/**
 * [tHashInput_32 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row154 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row154";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row154"
						
						);
					}
					


			   
			   

					row154Struct row154_HashRow = new row154Struct();
		   	   	   
				
				row154_HashRow.ID = row154.ID;
				
				row154_HashRow.NOMBRE = row154.NOMBRE;
				
				row154_HashRow.SIGLA = row154.SIGLA;
				
			tHash_Lookup_row154.put(row154_HashRow);
			
            




 


	tos_count_tAdvancedHash_row154++;

/**
 * [tAdvancedHash_row154 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row154 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row154";
	
	

 



/**
 * [tAdvancedHash_row154 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row154 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row154";
	
	

 



/**
 * [tAdvancedHash_row154 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_32 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_32";
	
	

 



/**
 * [tHashInput_32 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_32 end ] start
	 */

	

	
	
	currentComponent="tHashInput_32";
	
	
    

		
			nb_line_tHashInput_32++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_22");
	


	globalMap.put("tHashInput_32_NB_LINE", nb_line_tHashInput_32);       

 

ok_Hash.put("tHashInput_32", true);
end_Hash.put("tHashInput_32", System.currentTimeMillis());




/**
 * [tHashInput_32 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row154 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row154";
	
	

tHash_Lookup_row154.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row154");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row154", true);
end_Hash.put("tAdvancedHash_row154", System.currentTimeMillis());




/**
 * [tAdvancedHash_row154 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_32 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_32";
	
	

 



/**
 * [tHashInput_32 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row154 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row154";
	
	

 



/**
 * [tAdvancedHash_row154 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_32_SUBPROCESS_STATE", 1);
	}
	


public static class row120Struct implements routines.system.IPersistableComparableLookupRow<row120Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return false;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 10;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CODIGO == null) ? 0 : this.CODIGO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row120Struct other = (row120Struct) obj;
		
						if (this.CODIGO == null) {
							if (other.CODIGO != null)
								return false;
						
						} else if (!this.CODIGO.equals(other.CODIGO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row120Struct other) {

		other.ID = this.ID;
	            other.CODIGO = this.CODIGO;
	            
	}

	public void copyKeysDataTo(row120Struct other) {

		other.CODIGO = this.CODIGO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.ID = objectIn.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CODIGO="+CODIGO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row120Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CODIGO, other.CODIGO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_21Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_21_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row120Struct row120 = new row120Struct();




	
	/**
	 * [tAdvancedHash_row120 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row120", false);
		start_Hash.put("tAdvancedHash_row120", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row120";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row120");
					}
				
		int tos_count_tAdvancedHash_row120 = 0;
		

			   		// connection name:row120
			   		// source node:tHashInput_21 - inputs:(after_tOracleInput_34) outputs:(row120,row120) | target node:tAdvancedHash_row120 - inputs:(row120) outputs:()
			   		// linked node: tMap_3 - inputs:(row44,row120,row121,row122,row123,row124,row125,row128,row129,row150) outputs:(ACTUALIZAR_PERSONAS,CAMBIO_TDOCUMENTOS_ID,CAMBIO_DOCUMENTO,CAMBIO_PRIMER_NOMBRE,CAMBIO_SEGUNDO_NOMBRE,CAMBIO_PRIMER_APELLIDO,CAMBIO_SEGUNDO_APELLIDO,CAMBIO_FECHA_NACIMIENTO,CAMBIO_SEXO_ID,CAMBIO_DIRECCION,CAMBIO_LUGAR_RESIDENCIA,CAMBIO_ESMADSCRITO,CAMBIO_ESTADOS_ID,HESTADOS,ENTIDAD_APORTANTE,CAMBIOS_AFILIACION,CAMBIO_FECHA_CADUCIDAD,CAMBIO_ENTIDAD_PRINCIPAL,CAMBIO_PLAN_AFILIACION,CAMBIO_FECHA_DEFUNCION)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row120 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row120Struct> tHash_Lookup_row120 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row120Struct>getLookup(matchingModeEnum_row120);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row120", tHash_Lookup_row120);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row120 begin ] stop
 */



	
	/**
	 * [tHashInput_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_21", false);
		start_Hash.put("tHashInput_21", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_21";
	
	
		int tos_count_tHashInput_21 = 0;
		


int nb_line_tHashInput_21 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_21=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row119Struct> tHashFile_tHashInput_21 = mf_tHashInput_21.getAdvancedMemoryHashFile("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_19");
if(tHashFile_tHashInput_21==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row119Struct> iterator_tHashInput_21 = tHashFile_tHashInput_21.iterator();
while (iterator_tHashInput_21.hasNext()) {
    row119Struct next_tHashInput_21 = iterator_tHashInput_21.next();

	row120.ID = next_tHashInput_21.ID;
	row120.CODIGO = next_tHashInput_21.CODIGO;

 



/**
 * [tHashInput_21 begin ] stop
 */
	
	/**
	 * [tHashInput_21 main ] start
	 */

	

	
	
	currentComponent="tHashInput_21";
	
	

 


	tos_count_tHashInput_21++;

/**
 * [tHashInput_21 main ] stop
 */
	
	/**
	 * [tHashInput_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_21";
	
	

 



/**
 * [tHashInput_21 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row120 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row120";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row120"
						
						);
					}
					


			   
			   

					row120Struct row120_HashRow = new row120Struct();
		   	   	   
				
				row120_HashRow.ID = row120.ID;
				
				row120_HashRow.CODIGO = row120.CODIGO;
				
			tHash_Lookup_row120.put(row120_HashRow);
			
            




 


	tos_count_tAdvancedHash_row120++;

/**
 * [tAdvancedHash_row120 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row120 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row120";
	
	

 



/**
 * [tAdvancedHash_row120 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row120 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row120";
	
	

 



/**
 * [tAdvancedHash_row120 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_21";
	
	

 



/**
 * [tHashInput_21 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_21 end ] start
	 */

	

	
	
	currentComponent="tHashInput_21";
	
	
    

		
			nb_line_tHashInput_21++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_19");
	


	globalMap.put("tHashInput_21_NB_LINE", nb_line_tHashInput_21);       

 

ok_Hash.put("tHashInput_21", true);
end_Hash.put("tHashInput_21", System.currentTimeMillis());




/**
 * [tHashInput_21 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row120 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row120";
	
	

tHash_Lookup_row120.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row120");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row120", true);
end_Hash.put("tAdvancedHash_row120", System.currentTimeMillis());




/**
 * [tAdvancedHash_row120 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_21 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_21";
	
	

 



/**
 * [tHashInput_21 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row120 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row120";
	
	

 



/**
 * [tAdvancedHash_row120 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_21_SUBPROCESS_STATE", 1);
	}
	


public static class row121Struct implements routines.system.IPersistableComparableLookupRow<row121Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return false;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 10;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CODIGO == null) ? 0 : this.CODIGO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row121Struct other = (row121Struct) obj;
		
						if (this.CODIGO == null) {
							if (other.CODIGO != null)
								return false;
						
						} else if (!this.CODIGO.equals(other.CODIGO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row121Struct other) {

		other.ID = this.ID;
	            other.CODIGO = this.CODIGO;
	            
	}

	public void copyKeysDataTo(row121Struct other) {

		other.CODIGO = this.CODIGO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.ID = objectIn.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CODIGO="+CODIGO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row121Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CODIGO, other.CODIGO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_22Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_22_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row121Struct row121 = new row121Struct();




	
	/**
	 * [tAdvancedHash_row121 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row121", false);
		start_Hash.put("tAdvancedHash_row121", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row121";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row121");
					}
				
		int tos_count_tAdvancedHash_row121 = 0;
		

			   		// connection name:row121
			   		// source node:tHashInput_22 - inputs:(after_tOracleInput_34) outputs:(row121,row121) | target node:tAdvancedHash_row121 - inputs:(row121) outputs:()
			   		// linked node: tMap_3 - inputs:(row44,row120,row121,row122,row123,row124,row125,row128,row129,row150) outputs:(ACTUALIZAR_PERSONAS,CAMBIO_TDOCUMENTOS_ID,CAMBIO_DOCUMENTO,CAMBIO_PRIMER_NOMBRE,CAMBIO_SEGUNDO_NOMBRE,CAMBIO_PRIMER_APELLIDO,CAMBIO_SEGUNDO_APELLIDO,CAMBIO_FECHA_NACIMIENTO,CAMBIO_SEXO_ID,CAMBIO_DIRECCION,CAMBIO_LUGAR_RESIDENCIA,CAMBIO_ESMADSCRITO,CAMBIO_ESTADOS_ID,HESTADOS,ENTIDAD_APORTANTE,CAMBIOS_AFILIACION,CAMBIO_FECHA_CADUCIDAD,CAMBIO_ENTIDAD_PRINCIPAL,CAMBIO_PLAN_AFILIACION,CAMBIO_FECHA_DEFUNCION)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row121 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row121Struct> tHash_Lookup_row121 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row121Struct>getLookup(matchingModeEnum_row121);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row121", tHash_Lookup_row121);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row121 begin ] stop
 */



	
	/**
	 * [tHashInput_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_22", false);
		start_Hash.put("tHashInput_22", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_22";
	
	
		int tos_count_tHashInput_22 = 0;
		


int nb_line_tHashInput_22 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_22=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row119Struct> tHashFile_tHashInput_22 = mf_tHashInput_22.getAdvancedMemoryHashFile("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_19");
if(tHashFile_tHashInput_22==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row119Struct> iterator_tHashInput_22 = tHashFile_tHashInput_22.iterator();
while (iterator_tHashInput_22.hasNext()) {
    row119Struct next_tHashInput_22 = iterator_tHashInput_22.next();

	row121.ID = next_tHashInput_22.ID;
	row121.CODIGO = next_tHashInput_22.CODIGO;

 



/**
 * [tHashInput_22 begin ] stop
 */
	
	/**
	 * [tHashInput_22 main ] start
	 */

	

	
	
	currentComponent="tHashInput_22";
	
	

 


	tos_count_tHashInput_22++;

/**
 * [tHashInput_22 main ] stop
 */
	
	/**
	 * [tHashInput_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_22";
	
	

 



/**
 * [tHashInput_22 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row121 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row121";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row121"
						
						);
					}
					


			   
			   

					row121Struct row121_HashRow = new row121Struct();
		   	   	   
				
				row121_HashRow.ID = row121.ID;
				
				row121_HashRow.CODIGO = row121.CODIGO;
				
			tHash_Lookup_row121.put(row121_HashRow);
			
            




 


	tos_count_tAdvancedHash_row121++;

/**
 * [tAdvancedHash_row121 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row121 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row121";
	
	

 



/**
 * [tAdvancedHash_row121 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row121 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row121";
	
	

 



/**
 * [tAdvancedHash_row121 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_22";
	
	

 



/**
 * [tHashInput_22 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_22 end ] start
	 */

	

	
	
	currentComponent="tHashInput_22";
	
	
    

		
			nb_line_tHashInput_22++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_19");
	


	globalMap.put("tHashInput_22_NB_LINE", nb_line_tHashInput_22);       

 

ok_Hash.put("tHashInput_22", true);
end_Hash.put("tHashInput_22", System.currentTimeMillis());




/**
 * [tHashInput_22 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row121 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row121";
	
	

tHash_Lookup_row121.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row121");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row121", true);
end_Hash.put("tAdvancedHash_row121", System.currentTimeMillis());




/**
 * [tAdvancedHash_row121 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_22 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_22";
	
	

 



/**
 * [tHashInput_22 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row121 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row121";
	
	

 



/**
 * [tAdvancedHash_row121 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_22_SUBPROCESS_STATE", 1);
	}
	


public static class row122Struct implements routines.system.IPersistableComparableLookupRow<row122Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return false;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 10;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CODIGO == null) ? 0 : this.CODIGO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row122Struct other = (row122Struct) obj;
		
						if (this.CODIGO == null) {
							if (other.CODIGO != null)
								return false;
						
						} else if (!this.CODIGO.equals(other.CODIGO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row122Struct other) {

		other.ID = this.ID;
	            other.CODIGO = this.CODIGO;
	            
	}

	public void copyKeysDataTo(row122Struct other) {

		other.CODIGO = this.CODIGO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.ID = objectIn.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CODIGO="+CODIGO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row122Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CODIGO, other.CODIGO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_23Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_23_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row122Struct row122 = new row122Struct();




	
	/**
	 * [tAdvancedHash_row122 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row122", false);
		start_Hash.put("tAdvancedHash_row122", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row122";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row122");
					}
				
		int tos_count_tAdvancedHash_row122 = 0;
		

			   		// connection name:row122
			   		// source node:tHashInput_23 - inputs:(after_tOracleInput_34) outputs:(row122,row122) | target node:tAdvancedHash_row122 - inputs:(row122) outputs:()
			   		// linked node: tMap_3 - inputs:(row44,row120,row121,row122,row123,row124,row125,row128,row129,row150) outputs:(ACTUALIZAR_PERSONAS,CAMBIO_TDOCUMENTOS_ID,CAMBIO_DOCUMENTO,CAMBIO_PRIMER_NOMBRE,CAMBIO_SEGUNDO_NOMBRE,CAMBIO_PRIMER_APELLIDO,CAMBIO_SEGUNDO_APELLIDO,CAMBIO_FECHA_NACIMIENTO,CAMBIO_SEXO_ID,CAMBIO_DIRECCION,CAMBIO_LUGAR_RESIDENCIA,CAMBIO_ESMADSCRITO,CAMBIO_ESTADOS_ID,HESTADOS,ENTIDAD_APORTANTE,CAMBIOS_AFILIACION,CAMBIO_FECHA_CADUCIDAD,CAMBIO_ENTIDAD_PRINCIPAL,CAMBIO_PLAN_AFILIACION,CAMBIO_FECHA_DEFUNCION)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row122 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row122Struct> tHash_Lookup_row122 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row122Struct>getLookup(matchingModeEnum_row122);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row122", tHash_Lookup_row122);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row122 begin ] stop
 */



	
	/**
	 * [tHashInput_23 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_23", false);
		start_Hash.put("tHashInput_23", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_23";
	
	
		int tos_count_tHashInput_23 = 0;
		


int nb_line_tHashInput_23 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_23=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row119Struct> tHashFile_tHashInput_23 = mf_tHashInput_23.getAdvancedMemoryHashFile("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_19");
if(tHashFile_tHashInput_23==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row119Struct> iterator_tHashInput_23 = tHashFile_tHashInput_23.iterator();
while (iterator_tHashInput_23.hasNext()) {
    row119Struct next_tHashInput_23 = iterator_tHashInput_23.next();

	row122.ID = next_tHashInput_23.ID;
	row122.CODIGO = next_tHashInput_23.CODIGO;

 



/**
 * [tHashInput_23 begin ] stop
 */
	
	/**
	 * [tHashInput_23 main ] start
	 */

	

	
	
	currentComponent="tHashInput_23";
	
	

 


	tos_count_tHashInput_23++;

/**
 * [tHashInput_23 main ] stop
 */
	
	/**
	 * [tHashInput_23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_23";
	
	

 



/**
 * [tHashInput_23 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row122 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row122";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row122"
						
						);
					}
					


			   
			   

					row122Struct row122_HashRow = new row122Struct();
		   	   	   
				
				row122_HashRow.ID = row122.ID;
				
				row122_HashRow.CODIGO = row122.CODIGO;
				
			tHash_Lookup_row122.put(row122_HashRow);
			
            




 


	tos_count_tAdvancedHash_row122++;

/**
 * [tAdvancedHash_row122 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row122 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row122";
	
	

 



/**
 * [tAdvancedHash_row122 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row122 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row122";
	
	

 



/**
 * [tAdvancedHash_row122 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_23 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_23";
	
	

 



/**
 * [tHashInput_23 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_23 end ] start
	 */

	

	
	
	currentComponent="tHashInput_23";
	
	
    

		
			nb_line_tHashInput_23++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_19");
	


	globalMap.put("tHashInput_23_NB_LINE", nb_line_tHashInput_23);       

 

ok_Hash.put("tHashInput_23", true);
end_Hash.put("tHashInput_23", System.currentTimeMillis());




/**
 * [tHashInput_23 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row122 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row122";
	
	

tHash_Lookup_row122.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row122");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row122", true);
end_Hash.put("tAdvancedHash_row122", System.currentTimeMillis());




/**
 * [tAdvancedHash_row122 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_23 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_23";
	
	

 



/**
 * [tHashInput_23 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row122 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row122";
	
	

 



/**
 * [tAdvancedHash_row122 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_23_SUBPROCESS_STATE", 1);
	}
	


public static class row123Struct implements routines.system.IPersistableComparableLookupRow<row123Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return false;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 10;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CODIGO == null) ? 0 : this.CODIGO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row123Struct other = (row123Struct) obj;
		
						if (this.CODIGO == null) {
							if (other.CODIGO != null)
								return false;
						
						} else if (!this.CODIGO.equals(other.CODIGO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row123Struct other) {

		other.ID = this.ID;
	            other.CODIGO = this.CODIGO;
	            
	}

	public void copyKeysDataTo(row123Struct other) {

		other.CODIGO = this.CODIGO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.ID = objectIn.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CODIGO="+CODIGO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row123Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CODIGO, other.CODIGO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_24Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_24_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row123Struct row123 = new row123Struct();




	
	/**
	 * [tAdvancedHash_row123 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row123", false);
		start_Hash.put("tAdvancedHash_row123", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row123";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row123");
					}
				
		int tos_count_tAdvancedHash_row123 = 0;
		

			   		// connection name:row123
			   		// source node:tHashInput_24 - inputs:(after_tOracleInput_34) outputs:(row123,row123) | target node:tAdvancedHash_row123 - inputs:(row123) outputs:()
			   		// linked node: tMap_3 - inputs:(row44,row120,row121,row122,row123,row124,row125,row128,row129,row150) outputs:(ACTUALIZAR_PERSONAS,CAMBIO_TDOCUMENTOS_ID,CAMBIO_DOCUMENTO,CAMBIO_PRIMER_NOMBRE,CAMBIO_SEGUNDO_NOMBRE,CAMBIO_PRIMER_APELLIDO,CAMBIO_SEGUNDO_APELLIDO,CAMBIO_FECHA_NACIMIENTO,CAMBIO_SEXO_ID,CAMBIO_DIRECCION,CAMBIO_LUGAR_RESIDENCIA,CAMBIO_ESMADSCRITO,CAMBIO_ESTADOS_ID,HESTADOS,ENTIDAD_APORTANTE,CAMBIOS_AFILIACION,CAMBIO_FECHA_CADUCIDAD,CAMBIO_ENTIDAD_PRINCIPAL,CAMBIO_PLAN_AFILIACION,CAMBIO_FECHA_DEFUNCION)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row123 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row123Struct> tHash_Lookup_row123 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row123Struct>getLookup(matchingModeEnum_row123);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row123", tHash_Lookup_row123);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row123 begin ] stop
 */



	
	/**
	 * [tHashInput_24 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_24", false);
		start_Hash.put("tHashInput_24", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_24";
	
	
		int tos_count_tHashInput_24 = 0;
		


int nb_line_tHashInput_24 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_24=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row119Struct> tHashFile_tHashInput_24 = mf_tHashInput_24.getAdvancedMemoryHashFile("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_19");
if(tHashFile_tHashInput_24==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row119Struct> iterator_tHashInput_24 = tHashFile_tHashInput_24.iterator();
while (iterator_tHashInput_24.hasNext()) {
    row119Struct next_tHashInput_24 = iterator_tHashInput_24.next();

	row123.ID = next_tHashInput_24.ID;
	row123.CODIGO = next_tHashInput_24.CODIGO;

 



/**
 * [tHashInput_24 begin ] stop
 */
	
	/**
	 * [tHashInput_24 main ] start
	 */

	

	
	
	currentComponent="tHashInput_24";
	
	

 


	tos_count_tHashInput_24++;

/**
 * [tHashInput_24 main ] stop
 */
	
	/**
	 * [tHashInput_24 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_24";
	
	

 



/**
 * [tHashInput_24 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row123 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row123";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row123"
						
						);
					}
					


			   
			   

					row123Struct row123_HashRow = new row123Struct();
		   	   	   
				
				row123_HashRow.ID = row123.ID;
				
				row123_HashRow.CODIGO = row123.CODIGO;
				
			tHash_Lookup_row123.put(row123_HashRow);
			
            




 


	tos_count_tAdvancedHash_row123++;

/**
 * [tAdvancedHash_row123 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row123 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row123";
	
	

 



/**
 * [tAdvancedHash_row123 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row123 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row123";
	
	

 



/**
 * [tAdvancedHash_row123 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_24 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_24";
	
	

 



/**
 * [tHashInput_24 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_24 end ] start
	 */

	

	
	
	currentComponent="tHashInput_24";
	
	
    

		
			nb_line_tHashInput_24++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_19");
	


	globalMap.put("tHashInput_24_NB_LINE", nb_line_tHashInput_24);       

 

ok_Hash.put("tHashInput_24", true);
end_Hash.put("tHashInput_24", System.currentTimeMillis());




/**
 * [tHashInput_24 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row123 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row123";
	
	

tHash_Lookup_row123.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row123");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row123", true);
end_Hash.put("tAdvancedHash_row123", System.currentTimeMillis());




/**
 * [tAdvancedHash_row123 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_24 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_24";
	
	

 



/**
 * [tHashInput_24 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row123 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row123";
	
	

 



/**
 * [tAdvancedHash_row123 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_24_SUBPROCESS_STATE", 1);
	}
	


public static class row124Struct implements routines.system.IPersistableComparableLookupRow<row124Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return false;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 10;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CODIGO == null) ? 0 : this.CODIGO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row124Struct other = (row124Struct) obj;
		
						if (this.CODIGO == null) {
							if (other.CODIGO != null)
								return false;
						
						} else if (!this.CODIGO.equals(other.CODIGO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row124Struct other) {

		other.ID = this.ID;
	            other.CODIGO = this.CODIGO;
	            
	}

	public void copyKeysDataTo(row124Struct other) {

		other.CODIGO = this.CODIGO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.ID = objectIn.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CODIGO="+CODIGO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row124Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CODIGO, other.CODIGO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_25Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_25_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row124Struct row124 = new row124Struct();




	
	/**
	 * [tAdvancedHash_row124 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row124", false);
		start_Hash.put("tAdvancedHash_row124", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row124";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row124");
					}
				
		int tos_count_tAdvancedHash_row124 = 0;
		

			   		// connection name:row124
			   		// source node:tHashInput_25 - inputs:(after_tOracleInput_34) outputs:(row124,row124) | target node:tAdvancedHash_row124 - inputs:(row124) outputs:()
			   		// linked node: tMap_3 - inputs:(row44,row120,row121,row122,row123,row124,row125,row128,row129,row150) outputs:(ACTUALIZAR_PERSONAS,CAMBIO_TDOCUMENTOS_ID,CAMBIO_DOCUMENTO,CAMBIO_PRIMER_NOMBRE,CAMBIO_SEGUNDO_NOMBRE,CAMBIO_PRIMER_APELLIDO,CAMBIO_SEGUNDO_APELLIDO,CAMBIO_FECHA_NACIMIENTO,CAMBIO_SEXO_ID,CAMBIO_DIRECCION,CAMBIO_LUGAR_RESIDENCIA,CAMBIO_ESMADSCRITO,CAMBIO_ESTADOS_ID,HESTADOS,ENTIDAD_APORTANTE,CAMBIOS_AFILIACION,CAMBIO_FECHA_CADUCIDAD,CAMBIO_ENTIDAD_PRINCIPAL,CAMBIO_PLAN_AFILIACION,CAMBIO_FECHA_DEFUNCION)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row124 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row124Struct> tHash_Lookup_row124 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row124Struct>getLookup(matchingModeEnum_row124);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row124", tHash_Lookup_row124);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row124 begin ] stop
 */



	
	/**
	 * [tHashInput_25 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_25", false);
		start_Hash.put("tHashInput_25", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_25";
	
	
		int tos_count_tHashInput_25 = 0;
		


int nb_line_tHashInput_25 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_25=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row119Struct> tHashFile_tHashInput_25 = mf_tHashInput_25.getAdvancedMemoryHashFile("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_19");
if(tHashFile_tHashInput_25==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row119Struct> iterator_tHashInput_25 = tHashFile_tHashInput_25.iterator();
while (iterator_tHashInput_25.hasNext()) {
    row119Struct next_tHashInput_25 = iterator_tHashInput_25.next();

	row124.ID = next_tHashInput_25.ID;
	row124.CODIGO = next_tHashInput_25.CODIGO;

 



/**
 * [tHashInput_25 begin ] stop
 */
	
	/**
	 * [tHashInput_25 main ] start
	 */

	

	
	
	currentComponent="tHashInput_25";
	
	

 


	tos_count_tHashInput_25++;

/**
 * [tHashInput_25 main ] stop
 */
	
	/**
	 * [tHashInput_25 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_25";
	
	

 



/**
 * [tHashInput_25 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row124 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row124";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row124"
						
						);
					}
					


			   
			   

					row124Struct row124_HashRow = new row124Struct();
		   	   	   
				
				row124_HashRow.ID = row124.ID;
				
				row124_HashRow.CODIGO = row124.CODIGO;
				
			tHash_Lookup_row124.put(row124_HashRow);
			
            




 


	tos_count_tAdvancedHash_row124++;

/**
 * [tAdvancedHash_row124 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row124 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row124";
	
	

 



/**
 * [tAdvancedHash_row124 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row124 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row124";
	
	

 



/**
 * [tAdvancedHash_row124 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_25 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_25";
	
	

 



/**
 * [tHashInput_25 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_25 end ] start
	 */

	

	
	
	currentComponent="tHashInput_25";
	
	
    

		
			nb_line_tHashInput_25++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_19");
	


	globalMap.put("tHashInput_25_NB_LINE", nb_line_tHashInput_25);       

 

ok_Hash.put("tHashInput_25", true);
end_Hash.put("tHashInput_25", System.currentTimeMillis());




/**
 * [tHashInput_25 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row124 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row124";
	
	

tHash_Lookup_row124.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row124");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row124", true);
end_Hash.put("tAdvancedHash_row124", System.currentTimeMillis());




/**
 * [tAdvancedHash_row124 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_25 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_25";
	
	

 



/**
 * [tHashInput_25 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row124 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row124";
	
	

 



/**
 * [tAdvancedHash_row124 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_25_SUBPROCESS_STATE", 1);
	}
	


public static class row125Struct implements routines.system.IPersistableComparableLookupRow<row125Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return false;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 10;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CODIGO == null) ? 0 : this.CODIGO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row125Struct other = (row125Struct) obj;
		
						if (this.CODIGO == null) {
							if (other.CODIGO != null)
								return false;
						
						} else if (!this.CODIGO.equals(other.CODIGO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row125Struct other) {

		other.ID = this.ID;
	            other.CODIGO = this.CODIGO;
	            
	}

	public void copyKeysDataTo(row125Struct other) {

		other.CODIGO = this.CODIGO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.ID = objectIn.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CODIGO="+CODIGO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row125Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CODIGO, other.CODIGO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_26Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_26_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row125Struct row125 = new row125Struct();




	
	/**
	 * [tAdvancedHash_row125 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row125", false);
		start_Hash.put("tAdvancedHash_row125", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row125";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row125");
					}
				
		int tos_count_tAdvancedHash_row125 = 0;
		

			   		// connection name:row125
			   		// source node:tHashInput_26 - inputs:(after_tOracleInput_34) outputs:(row125,row125) | target node:tAdvancedHash_row125 - inputs:(row125) outputs:()
			   		// linked node: tMap_3 - inputs:(row44,row120,row121,row122,row123,row124,row125,row128,row129,row150) outputs:(ACTUALIZAR_PERSONAS,CAMBIO_TDOCUMENTOS_ID,CAMBIO_DOCUMENTO,CAMBIO_PRIMER_NOMBRE,CAMBIO_SEGUNDO_NOMBRE,CAMBIO_PRIMER_APELLIDO,CAMBIO_SEGUNDO_APELLIDO,CAMBIO_FECHA_NACIMIENTO,CAMBIO_SEXO_ID,CAMBIO_DIRECCION,CAMBIO_LUGAR_RESIDENCIA,CAMBIO_ESMADSCRITO,CAMBIO_ESTADOS_ID,HESTADOS,ENTIDAD_APORTANTE,CAMBIOS_AFILIACION,CAMBIO_FECHA_CADUCIDAD,CAMBIO_ENTIDAD_PRINCIPAL,CAMBIO_PLAN_AFILIACION,CAMBIO_FECHA_DEFUNCION)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row125 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row125Struct> tHash_Lookup_row125 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row125Struct>getLookup(matchingModeEnum_row125);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row125", tHash_Lookup_row125);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row125 begin ] stop
 */



	
	/**
	 * [tHashInput_26 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_26", false);
		start_Hash.put("tHashInput_26", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_26";
	
	
		int tos_count_tHashInput_26 = 0;
		


int nb_line_tHashInput_26 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_26=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row119Struct> tHashFile_tHashInput_26 = mf_tHashInput_26.getAdvancedMemoryHashFile("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_19");
if(tHashFile_tHashInput_26==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row119Struct> iterator_tHashInput_26 = tHashFile_tHashInput_26.iterator();
while (iterator_tHashInput_26.hasNext()) {
    row119Struct next_tHashInput_26 = iterator_tHashInput_26.next();

	row125.ID = next_tHashInput_26.ID;
	row125.CODIGO = next_tHashInput_26.CODIGO;

 



/**
 * [tHashInput_26 begin ] stop
 */
	
	/**
	 * [tHashInput_26 main ] start
	 */

	

	
	
	currentComponent="tHashInput_26";
	
	

 


	tos_count_tHashInput_26++;

/**
 * [tHashInput_26 main ] stop
 */
	
	/**
	 * [tHashInput_26 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_26";
	
	

 



/**
 * [tHashInput_26 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row125 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row125";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row125"
						
						);
					}
					


			   
			   

					row125Struct row125_HashRow = new row125Struct();
		   	   	   
				
				row125_HashRow.ID = row125.ID;
				
				row125_HashRow.CODIGO = row125.CODIGO;
				
			tHash_Lookup_row125.put(row125_HashRow);
			
            




 


	tos_count_tAdvancedHash_row125++;

/**
 * [tAdvancedHash_row125 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row125 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row125";
	
	

 



/**
 * [tAdvancedHash_row125 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row125 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row125";
	
	

 



/**
 * [tAdvancedHash_row125 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_26 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_26";
	
	

 



/**
 * [tHashInput_26 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_26 end ] start
	 */

	

	
	
	currentComponent="tHashInput_26";
	
	
    

		
			nb_line_tHashInput_26++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_19");
	


	globalMap.put("tHashInput_26_NB_LINE", nb_line_tHashInput_26);       

 

ok_Hash.put("tHashInput_26", true);
end_Hash.put("tHashInput_26", System.currentTimeMillis());




/**
 * [tHashInput_26 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row125 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row125";
	
	

tHash_Lookup_row125.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row125");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row125", true);
end_Hash.put("tAdvancedHash_row125", System.currentTimeMillis());




/**
 * [tAdvancedHash_row125 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_26 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_26";
	
	

 



/**
 * [tHashInput_26 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row125 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row125";
	
	

 



/**
 * [tAdvancedHash_row125 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_26_SUBPROCESS_STATE", 1);
	}
	


public static class row128Struct implements routines.system.IPersistableComparableLookupRow<row128Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return false;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 10;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CODIGO == null) ? 0 : this.CODIGO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row128Struct other = (row128Struct) obj;
		
						if (this.CODIGO == null) {
							if (other.CODIGO != null)
								return false;
						
						} else if (!this.CODIGO.equals(other.CODIGO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row128Struct other) {

		other.ID = this.ID;
	            other.CODIGO = this.CODIGO;
	            
	}

	public void copyKeysDataTo(row128Struct other) {

		other.CODIGO = this.CODIGO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.ID = objectIn.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CODIGO="+CODIGO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row128Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CODIGO, other.CODIGO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_28Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_28_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row128Struct row128 = new row128Struct();




	
	/**
	 * [tAdvancedHash_row128 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row128", false);
		start_Hash.put("tAdvancedHash_row128", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row128";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row128");
					}
				
		int tos_count_tAdvancedHash_row128 = 0;
		

			   		// connection name:row128
			   		// source node:tHashInput_28 - inputs:(after_tOracleInput_34) outputs:(row128,row128) | target node:tAdvancedHash_row128 - inputs:(row128) outputs:()
			   		// linked node: tMap_3 - inputs:(row44,row120,row121,row122,row123,row124,row125,row128,row129,row150) outputs:(ACTUALIZAR_PERSONAS,CAMBIO_TDOCUMENTOS_ID,CAMBIO_DOCUMENTO,CAMBIO_PRIMER_NOMBRE,CAMBIO_SEGUNDO_NOMBRE,CAMBIO_PRIMER_APELLIDO,CAMBIO_SEGUNDO_APELLIDO,CAMBIO_FECHA_NACIMIENTO,CAMBIO_SEXO_ID,CAMBIO_DIRECCION,CAMBIO_LUGAR_RESIDENCIA,CAMBIO_ESMADSCRITO,CAMBIO_ESTADOS_ID,HESTADOS,ENTIDAD_APORTANTE,CAMBIOS_AFILIACION,CAMBIO_FECHA_CADUCIDAD,CAMBIO_ENTIDAD_PRINCIPAL,CAMBIO_PLAN_AFILIACION,CAMBIO_FECHA_DEFUNCION)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row128 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row128Struct> tHash_Lookup_row128 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row128Struct>getLookup(matchingModeEnum_row128);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row128", tHash_Lookup_row128);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row128 begin ] stop
 */



	
	/**
	 * [tHashInput_28 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_28", false);
		start_Hash.put("tHashInput_28", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_28";
	
	
		int tos_count_tHashInput_28 = 0;
		


int nb_line_tHashInput_28 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_28=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row119Struct> tHashFile_tHashInput_28 = mf_tHashInput_28.getAdvancedMemoryHashFile("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_19");
if(tHashFile_tHashInput_28==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row119Struct> iterator_tHashInput_28 = tHashFile_tHashInput_28.iterator();
while (iterator_tHashInput_28.hasNext()) {
    row119Struct next_tHashInput_28 = iterator_tHashInput_28.next();

	row128.ID = next_tHashInput_28.ID;
	row128.CODIGO = next_tHashInput_28.CODIGO;

 



/**
 * [tHashInput_28 begin ] stop
 */
	
	/**
	 * [tHashInput_28 main ] start
	 */

	

	
	
	currentComponent="tHashInput_28";
	
	

 


	tos_count_tHashInput_28++;

/**
 * [tHashInput_28 main ] stop
 */
	
	/**
	 * [tHashInput_28 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_28";
	
	

 



/**
 * [tHashInput_28 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row128 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row128";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row128"
						
						);
					}
					


			   
			   

					row128Struct row128_HashRow = new row128Struct();
		   	   	   
				
				row128_HashRow.ID = row128.ID;
				
				row128_HashRow.CODIGO = row128.CODIGO;
				
			tHash_Lookup_row128.put(row128_HashRow);
			
            




 


	tos_count_tAdvancedHash_row128++;

/**
 * [tAdvancedHash_row128 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row128 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row128";
	
	

 



/**
 * [tAdvancedHash_row128 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row128 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row128";
	
	

 



/**
 * [tAdvancedHash_row128 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_28 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_28";
	
	

 



/**
 * [tHashInput_28 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_28 end ] start
	 */

	

	
	
	currentComponent="tHashInput_28";
	
	
    

		
			nb_line_tHashInput_28++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_19");
	


	globalMap.put("tHashInput_28_NB_LINE", nb_line_tHashInput_28);       

 

ok_Hash.put("tHashInput_28", true);
end_Hash.put("tHashInput_28", System.currentTimeMillis());




/**
 * [tHashInput_28 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row128 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row128";
	
	

tHash_Lookup_row128.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row128");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row128", true);
end_Hash.put("tAdvancedHash_row128", System.currentTimeMillis());




/**
 * [tAdvancedHash_row128 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_28 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_28";
	
	

 



/**
 * [tHashInput_28 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row128 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row128";
	
	

 



/**
 * [tAdvancedHash_row128 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_28_SUBPROCESS_STATE", 1);
	}
	


public static class row129Struct implements routines.system.IPersistableComparableLookupRow<row129Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return false;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 10;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CODIGO == null) ? 0 : this.CODIGO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row129Struct other = (row129Struct) obj;
		
						if (this.CODIGO == null) {
							if (other.CODIGO != null)
								return false;
						
						} else if (!this.CODIGO.equals(other.CODIGO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row129Struct other) {

		other.ID = this.ID;
	            other.CODIGO = this.CODIGO;
	            
	}

	public void copyKeysDataTo(row129Struct other) {

		other.CODIGO = this.CODIGO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.ID = objectIn.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CODIGO="+CODIGO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row129Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CODIGO, other.CODIGO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_29Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_29_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row129Struct row129 = new row129Struct();




	
	/**
	 * [tAdvancedHash_row129 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row129", false);
		start_Hash.put("tAdvancedHash_row129", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row129";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row129");
					}
				
		int tos_count_tAdvancedHash_row129 = 0;
		

			   		// connection name:row129
			   		// source node:tHashInput_29 - inputs:(after_tOracleInput_34) outputs:(row129,row129) | target node:tAdvancedHash_row129 - inputs:(row129) outputs:()
			   		// linked node: tMap_3 - inputs:(row44,row120,row121,row122,row123,row124,row125,row128,row129,row150) outputs:(ACTUALIZAR_PERSONAS,CAMBIO_TDOCUMENTOS_ID,CAMBIO_DOCUMENTO,CAMBIO_PRIMER_NOMBRE,CAMBIO_SEGUNDO_NOMBRE,CAMBIO_PRIMER_APELLIDO,CAMBIO_SEGUNDO_APELLIDO,CAMBIO_FECHA_NACIMIENTO,CAMBIO_SEXO_ID,CAMBIO_DIRECCION,CAMBIO_LUGAR_RESIDENCIA,CAMBIO_ESMADSCRITO,CAMBIO_ESTADOS_ID,HESTADOS,ENTIDAD_APORTANTE,CAMBIOS_AFILIACION,CAMBIO_FECHA_CADUCIDAD,CAMBIO_ENTIDAD_PRINCIPAL,CAMBIO_PLAN_AFILIACION,CAMBIO_FECHA_DEFUNCION)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row129 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row129Struct> tHash_Lookup_row129 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row129Struct>getLookup(matchingModeEnum_row129);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row129", tHash_Lookup_row129);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row129 begin ] stop
 */



	
	/**
	 * [tHashInput_29 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_29", false);
		start_Hash.put("tHashInput_29", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_29";
	
	
		int tos_count_tHashInput_29 = 0;
		


int nb_line_tHashInput_29 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_29=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row119Struct> tHashFile_tHashInput_29 = mf_tHashInput_29.getAdvancedMemoryHashFile("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_19");
if(tHashFile_tHashInput_29==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row119Struct> iterator_tHashInput_29 = tHashFile_tHashInput_29.iterator();
while (iterator_tHashInput_29.hasNext()) {
    row119Struct next_tHashInput_29 = iterator_tHashInput_29.next();

	row129.ID = next_tHashInput_29.ID;
	row129.CODIGO = next_tHashInput_29.CODIGO;

 



/**
 * [tHashInput_29 begin ] stop
 */
	
	/**
	 * [tHashInput_29 main ] start
	 */

	

	
	
	currentComponent="tHashInput_29";
	
	

 


	tos_count_tHashInput_29++;

/**
 * [tHashInput_29 main ] stop
 */
	
	/**
	 * [tHashInput_29 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_29";
	
	

 



/**
 * [tHashInput_29 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row129 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row129";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row129"
						
						);
					}
					


			   
			   

					row129Struct row129_HashRow = new row129Struct();
		   	   	   
				
				row129_HashRow.ID = row129.ID;
				
				row129_HashRow.CODIGO = row129.CODIGO;
				
			tHash_Lookup_row129.put(row129_HashRow);
			
            




 


	tos_count_tAdvancedHash_row129++;

/**
 * [tAdvancedHash_row129 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row129 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row129";
	
	

 



/**
 * [tAdvancedHash_row129 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row129 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row129";
	
	

 



/**
 * [tAdvancedHash_row129 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_29 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_29";
	
	

 



/**
 * [tHashInput_29 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_29 end ] start
	 */

	

	
	
	currentComponent="tHashInput_29";
	
	
    

		
			nb_line_tHashInput_29++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_19");
	


	globalMap.put("tHashInput_29_NB_LINE", nb_line_tHashInput_29);       

 

ok_Hash.put("tHashInput_29", true);
end_Hash.put("tHashInput_29", System.currentTimeMillis());




/**
 * [tHashInput_29 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row129 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row129";
	
	

tHash_Lookup_row129.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row129");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row129", true);
end_Hash.put("tAdvancedHash_row129", System.currentTimeMillis());




/**
 * [tAdvancedHash_row129 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_29 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_29";
	
	

 



/**
 * [tHashInput_29 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row129 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row129";
	
	

 



/**
 * [tAdvancedHash_row129 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_29_SUBPROCESS_STATE", 1);
	}
	


public static class row150Struct implements routines.system.IPersistableComparableLookupRow<row150Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return false;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 10;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CODIGO == null) ? 0 : this.CODIGO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row150Struct other = (row150Struct) obj;
		
						if (this.CODIGO == null) {
							if (other.CODIGO != null)
								return false;
						
						} else if (!this.CODIGO.equals(other.CODIGO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row150Struct other) {

		other.ID = this.ID;
	            other.CODIGO = this.CODIGO;
	            
	}

	public void copyKeysDataTo(row150Struct other) {

		other.CODIGO = this.CODIGO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.ID = objectIn.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CODIGO="+CODIGO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row150Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CODIGO, other.CODIGO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_30Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_30_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row150Struct row150 = new row150Struct();




	
	/**
	 * [tAdvancedHash_row150 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row150", false);
		start_Hash.put("tAdvancedHash_row150", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row150";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row150");
					}
				
		int tos_count_tAdvancedHash_row150 = 0;
		

			   		// connection name:row150
			   		// source node:tHashInput_30 - inputs:(after_tOracleInput_34) outputs:(row150,row150) | target node:tAdvancedHash_row150 - inputs:(row150) outputs:()
			   		// linked node: tMap_3 - inputs:(row44,row120,row121,row122,row123,row124,row125,row128,row129,row150) outputs:(ACTUALIZAR_PERSONAS,CAMBIO_TDOCUMENTOS_ID,CAMBIO_DOCUMENTO,CAMBIO_PRIMER_NOMBRE,CAMBIO_SEGUNDO_NOMBRE,CAMBIO_PRIMER_APELLIDO,CAMBIO_SEGUNDO_APELLIDO,CAMBIO_FECHA_NACIMIENTO,CAMBIO_SEXO_ID,CAMBIO_DIRECCION,CAMBIO_LUGAR_RESIDENCIA,CAMBIO_ESMADSCRITO,CAMBIO_ESTADOS_ID,HESTADOS,ENTIDAD_APORTANTE,CAMBIOS_AFILIACION,CAMBIO_FECHA_CADUCIDAD,CAMBIO_ENTIDAD_PRINCIPAL,CAMBIO_PLAN_AFILIACION,CAMBIO_FECHA_DEFUNCION)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row150 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row150Struct> tHash_Lookup_row150 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row150Struct>getLookup(matchingModeEnum_row150);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row150", tHash_Lookup_row150);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row150 begin ] stop
 */



	
	/**
	 * [tHashInput_30 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_30", false);
		start_Hash.put("tHashInput_30", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_30";
	
	
		int tos_count_tHashInput_30 = 0;
		


int nb_line_tHashInput_30 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_30=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row119Struct> tHashFile_tHashInput_30 = mf_tHashInput_30.getAdvancedMemoryHashFile("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_19");
if(tHashFile_tHashInput_30==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row119Struct> iterator_tHashInput_30 = tHashFile_tHashInput_30.iterator();
while (iterator_tHashInput_30.hasNext()) {
    row119Struct next_tHashInput_30 = iterator_tHashInput_30.next();

	row150.ID = next_tHashInput_30.ID;
	row150.CODIGO = next_tHashInput_30.CODIGO;

 



/**
 * [tHashInput_30 begin ] stop
 */
	
	/**
	 * [tHashInput_30 main ] start
	 */

	

	
	
	currentComponent="tHashInput_30";
	
	

 


	tos_count_tHashInput_30++;

/**
 * [tHashInput_30 main ] stop
 */
	
	/**
	 * [tHashInput_30 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_30";
	
	

 



/**
 * [tHashInput_30 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row150 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row150";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row150"
						
						);
					}
					


			   
			   

					row150Struct row150_HashRow = new row150Struct();
		   	   	   
				
				row150_HashRow.ID = row150.ID;
				
				row150_HashRow.CODIGO = row150.CODIGO;
				
			tHash_Lookup_row150.put(row150_HashRow);
			
            




 


	tos_count_tAdvancedHash_row150++;

/**
 * [tAdvancedHash_row150 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row150 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row150";
	
	

 



/**
 * [tAdvancedHash_row150 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row150 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row150";
	
	

 



/**
 * [tAdvancedHash_row150 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_30 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_30";
	
	

 



/**
 * [tHashInput_30 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_30 end ] start
	 */

	

	
	
	currentComponent="tHashInput_30";
	
	
    

		
			nb_line_tHashInput_30++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ActualizacionMSV_" + pid +"_tHashOutput_19");
	


	globalMap.put("tHashInput_30_NB_LINE", nb_line_tHashInput_30);       

 

ok_Hash.put("tHashInput_30", true);
end_Hash.put("tHashInput_30", System.currentTimeMillis());




/**
 * [tHashInput_30 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row150 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row150";
	
	

tHash_Lookup_row150.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row150");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row150", true);
end_Hash.put("tAdvancedHash_row150", System.currentTimeMillis());




/**
 * [tAdvancedHash_row150 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_30 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_30";
	
	

 



/**
 * [tHashInput_30 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row150 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row150";
	
	

 



/**
 * [tAdvancedHash_row150 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_30_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();
row3Struct row5 = row3;





	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tRunJob_1 = 0;
		
class DealChildJobLibrary_tRunJob_1 {

	public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
		String classPathLine = "";
		String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
		if (isNeedAddLibsPath( crcMapPath)) {
			java.util.Map<String, String> crcMap = null;
			java.io.ObjectInputStream ois = new java.io.ObjectInputStream(new java.io.FileInputStream(crcMapPath)) {
				@Override
				public Class<?> resolveClass(java.io.ObjectStreamClass desc) throws java.io.IOException, ClassNotFoundException {
					if(!"java.util.HashMap".equals(desc.getName())) {
						throw new java.io.InvalidClassException("Unauthorized deserialization attempt : " + desc.getName());
					}
					return super.resolveClass(desc);
				}
			};
			crcMap = (java.util.Map<String, String>) ois.readObject();
			ois.close();
			classPathLine = addLibsPath(originalClassPathLine, crcMap);
		} else {
			classPathLine = originalClassPathLine;
		}
		return classPathLine;
	}
	
	private boolean isNeedAddLibsPath(String crcMapPath) {
		if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
			return false;
		}
		return true;
	}
	
	
	private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
		for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
			line = adaptLibPaths(line, entry);
		}
		return line;
	}
	
	private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
		String jarName = entry.getValue();
		String crc = entry.getKey();
		String libStringFinder = "../lib/" + jarName;
		if (line.contains(libStringFinder)) {
			line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
		} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
			line = line.replace(":$ROOT_PATH/" + jarName + ":", ":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
		} else if (line.contains(";" + jarName + ";")) {
			line = line.replace(";" + jarName + ";", ";../../../cache/lib/" + crc + "/" + jarName + ";");
		}
		return line;
	}
	
}
	DealChildJobLibrary_tRunJob_1 dealChildJobLibrary_tRunJob_1 = new DealChildJobLibrary_tRunJob_1();

	class JVMArgumentHelper_tRunJob_1 {
		
		
		
		private void addClasspath(java.util.List<String> target_argument_list, String job_origin_classpath) {
			
			String extra_classpath = null;
			String path_separator = System.getProperty("path.separator");
			if (path_separator != null && path_separator.length() > 1) {
				throw new RuntimeException("path separator should be single character");
			}
			
			if(extra_classpath!=null && !extra_classpath.isEmpty()) {
				if(extra_classpath.endsWith(path_separator)) {
					target_argument_list.add(extra_classpath+job_origin_classpath);
				} else if(extra_classpath.contains(path_separator)) {
					target_argument_list.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
				} else if(extra_classpath.endsWith(":")) {
					target_argument_list.add(extra_classpath.replace(":", path_separator)+job_origin_classpath);
				} else if(extra_classpath.endsWith(";")) {
					target_argument_list.add(extra_classpath.replace(";", path_separator)+job_origin_classpath);
				} else if(extra_classpath.contains(":")) {
					target_argument_list.add(concatStr(extra_classpath.replace(":", path_separator), path_separator, job_origin_classpath));
				} else if(extra_classpath.contains(";")) {
					target_argument_list.add(concatStr(extra_classpath.replace(";", path_separator), path_separator, job_origin_classpath));
				} else {
					target_argument_list.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
				}
				return;
			}
			
			target_argument_list.add(job_origin_classpath);
		}
		
		private String concatStr(String s1, String s2, String s3) {
			java.lang.StringBuilder strB = new java.lang.StringBuilder();
			strB.append(s1).append(s2).append(s3);
			return strB.toString();
		}
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child) {
			addArgumentsTo(target_argument_list, argument_from_child, false);
		}
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child, boolean isCP) {
			if(isCP) {
				addClasspath(target_argument_list, argument_from_child);
				return;
			}
		
			
			
			
			target_argument_list.add(argument_from_child);
			
		}
		
		
	}
	
	JVMArgumentHelper_tRunJob_1 jvm_argument_helper_tRunJob_1 = new JVMArgumentHelper_tRunJob_1();
	
	String audit_jar_path_tRunJob_1 = System.getProperty("classpath.extended");
	

 



/**
 * [tRunJob_1 begin ] stop
 */



	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.LOGS_ERROR)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
        if(filetFileOutputDelimited_1.exists()){
            isFileGenerated_tFileOutputDelimited_1 = false;
        }
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("moment");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("root_pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("father_pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("project");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("job");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("context");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("priority");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("type");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("origin");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("message");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("code");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }


resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";
	
	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row3.type = lcm.getType();
		row3.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row3.priority = lcm.getPriority();
		row3.message = lcm.getMessage();
		row3.code = lcm.getCode();
		
		row3.moment = java.util.Calendar.getInstance().getTime();
	
    	row3.pid = pid;
		row3.root_pid = rootPid;
		row3.father_pid = fatherPid;
	
    	row3.project = projectName;
    	row3.job = jobName;
    	row3.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row3.moment != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(row3.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.root_pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.root_pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.father_pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.father_pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.project != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.project
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.job != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.job
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.context != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.context
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.priority != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.priority
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.type != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.type
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.origin != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.origin
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.message != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.message
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.code != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.code
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 
     row5 = row3;


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */

	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
			
			String osName_tRunJob_1 = System.getProperty("os.name");
			if (osName_tRunJob_1 != null && osName_tRunJob_1.toLowerCase(java.util.Locale.US).startsWith("win")){
				
						paraList_tRunJob_1.add("java");
						String m2 = System.getProperty("talend.component.manager.m2.repository");
						if (m2 != null){
							paraList_tRunJob_1.add("-Dtalend.component.manager.m2.repository=" + m2);
						}
						
						if (Boolean.getBoolean("propagateLoggingConfiguration")) {
							String log4j1_config_tRunJob_1 = System.getProperty("log4j.configuration");
							if (log4j1_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_1);
							}
							String log4j2_config_tRunJob_1 = System.getProperty("log4j.configurationFile");
							if (log4j2_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_1);
							}
							if (log4j1_config_tRunJob_1 != null || log4j2_config_tRunJob_1 != null) {
								paraList_tRunJob_1.add("-DpropagateLoggingConfiguration=true");
							}
						}
						
						if(enableLogStash){
							System.getProperties().stringPropertyNames().stream()
								.filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
						}
							
						System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
					
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dtalend.component.manager.m2.repository=../lib");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");
		      				
              					String classpath_tRunJob_1_5 = ".;../lib/routines.jar;../lib/log4j-slf4j-impl-2.17.1.jar;../lib/log4j-api-2.17.1.jar;../lib/log4j-core-2.17.1.jar;../lib/activation-1.1.jar;../lib/jakarta.mail-1.6.7.jar;../lib/xpathutil-1.0.0.jar;../lib/slf4j-api-1.7.34.jar;../lib/crypto-utils-7.1.16.jar;../lib/jboss-marshalling-2.0.12.Final.jar;../lib/dom4j-2.1.3.jar;../lib/jaxen-1.1.6.jar;mail_0_1.jar;";
              					
              					if(audit_jar_path_tRunJob_1!=null && !audit_jar_path_tRunJob_1.isEmpty()) {
		      						classpath_tRunJob_1_5 += audit_jar_path_tRunJob_1;
		      					}
		      					
	        					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(classpath_tRunJob_1_5), true);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "afi_actualizacion_masiva.mail_0_1.Mail");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid="+pid);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid="+rootPid);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "%*");
		      				
			} else {
	      		
						paraList_tRunJob_1.add("java");
						String m2 = System.getProperty("talend.component.manager.m2.repository");
						if (m2 != null){
							paraList_tRunJob_1.add("-Dtalend.component.manager.m2.repository=" + m2);
						}
						
						if (Boolean.getBoolean("propagateLoggingConfiguration")) {
							String log4j1_config_tRunJob_1 = System.getProperty("log4j.configuration");
							if (log4j1_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_1);
							}
							String log4j2_config_tRunJob_1 = System.getProperty("log4j.configurationFile");
							if (log4j2_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_1);
							}
							if (log4j1_config_tRunJob_1 != null || log4j2_config_tRunJob_1 != null) {
								paraList_tRunJob_1.add("-DpropagateLoggingConfiguration=true");
							}
						}
						
						if(enableLogStash){
							System.getProperties().stringPropertyNames().stream()
								.filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
						}
							
						System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
					
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dtalend.component.manager.m2.repository=../lib");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");
		      				
		      					String classpath_tRunJob_1_5 = ".:$ROOT_PATH:$ROOT_PATH/../lib/routines.jar:$ROOT_PATH/../lib/log4j-slf4j-impl-2.17.1.jar:$ROOT_PATH/../lib/log4j-api-2.17.1.jar:$ROOT_PATH/../lib/log4j-core-2.17.1.jar:$ROOT_PATH/../lib/activation-1.1.jar:$ROOT_PATH/../lib/jakarta.mail-1.6.7.jar:$ROOT_PATH/../lib/xpathutil-1.0.0.jar:$ROOT_PATH/../lib/slf4j-api-1.7.34.jar:$ROOT_PATH/../lib/crypto-utils-7.1.16.jar:$ROOT_PATH/../lib/jboss-marshalling-2.0.12.Final.jar:$ROOT_PATH/../lib/dom4j-2.1.3.jar:$ROOT_PATH/../lib/jaxen-1.1.6.jar:$ROOT_PATH/mail_0_1.jar:";
		      					
		      					if(audit_jar_path_tRunJob_1!=null && !audit_jar_path_tRunJob_1.isEmpty()) {
		      						classpath_tRunJob_1_5 += audit_jar_path_tRunJob_1;
		      					}
		      					
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(classpath_tRunJob_1_5).replace("$ROOT_PATH",System.getProperty("user.dir")), true);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "afi_actualizacion_masiva.mail_0_1.Mail");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid="+pid);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid="+rootPid);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "$@");
		      				
			}

			
			
	  	
		if(enableLogStash){
			paraList_tRunJob_1.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + null);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_1 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_1.put("mensaje", context.mensaje);
                    paraList_tRunJob_1.add("--context_type " + "mensaje" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("vact_err_ent", context.vact_err_ent);
                    paraList_tRunJob_1.add("--context_type " + "vact_err_ent" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("vact_no_err_ent", context.vact_no_err_ent);
                    paraList_tRunJob_1.add("--context_type " + "vact_no_err_ent" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("vafiarchivos_id", context.vafiarchivos_id);
                    paraList_tRunJob_1.add("--context_type " + "vafiarchivos_id" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("vcontenido", context.vcontenido);
                    paraList_tRunJob_1.add("--context_type " + "vcontenido" + "=" + "id_Object");
                    parentContextMap_tRunJob_1.put("vcount_registros", context.vcount_registros);
                    paraList_tRunJob_1.add("--context_type " + "vcount_registros" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("verror_datos", context.verror_datos);
                    paraList_tRunJob_1.add("--context_type " + "verror_datos" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("verror_dup_sis", context.verror_dup_sis);
                    paraList_tRunJob_1.add("--context_type " + "verror_dup_sis" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("verror_estructura", context.verror_estructura);
                    paraList_tRunJob_1.add("--context_type " + "verror_estructura" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("verror_id_afi_dup", context.verror_id_afi_dup);
                    paraList_tRunJob_1.add("--context_type " + "verror_id_afi_dup" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("verror_id_per_dup", context.verror_id_per_dup);
                    paraList_tRunJob_1.add("--context_type " + "verror_id_per_dup" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("verror_no_afi", context.verror_no_afi);
                    paraList_tRunJob_1.add("--context_type " + "verror_no_afi" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("verror_nombres_fnac", context.verror_nombres_fnac);
                    paraList_tRunJob_1.add("--context_type " + "verror_nombres_fnac" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("verror_pn_pa_doc", context.verror_pn_pa_doc);
                    paraList_tRunJob_1.add("--context_type " + "verror_pn_pa_doc" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("verror_td_doc", context.verror_td_doc);
                    paraList_tRunJob_1.add("--context_type " + "verror_td_doc" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("vfinicio", context.vfinicio);
                    paraList_tRunJob_1.add("--context_type " + "vfinicio" + "=" + "id_Date");
                    parentContextMap_tRunJob_1.put("vprocesos_id", context.vprocesos_id);
                    paraList_tRunJob_1.add("--context_type " + "vprocesos_id" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("vtarchivos_codigo", context.vtarchivos_codigo);
                    paraList_tRunJob_1.add("--context_type " + "vtarchivos_codigo" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("vtotal_actualizaciones", context.vtotal_actualizaciones);
                    paraList_tRunJob_1.add("--context_type " + "vtotal_actualizaciones" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("vtotal_errores", context.vtotal_errores);
                    paraList_tRunJob_1.add("--context_type " + "vtotal_errores" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("vtotal_registros", context.vtotal_registros);
                    paraList_tRunJob_1.add("--context_type " + "vtotal_registros" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("vusuarios_id", context.vusuarios_id);
                    paraList_tRunJob_1.add("--context_type " + "vusuarios_id" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("db_destino_AdditionalParams", context.db_destino_AdditionalParams);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_AdditionalParams" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_destino_Login", context.db_destino_Login);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_Login" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_destino_Password", context.db_destino_Password);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_Password" + "=" + "id_Password");
                    parentContextMap_tRunJob_1.put("db_destino_Port", context.db_destino_Port);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_Port" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_destino_Schema", context.db_destino_Schema);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_Schema" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_destino_Server", context.db_destino_Server);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_Server" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_destino_ServiceName", context.db_destino_ServiceName);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_ServiceName" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_AdditionalParams", context.db_origen_AdditionalParams);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_AdditionalParams" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_Login", context.db_origen_Login);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_Login" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_Password", context.db_origen_Password);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_Password" + "=" + "id_Password");
                    parentContextMap_tRunJob_1.put("db_origen_Port", context.db_origen_Port);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_Port" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_Schema", context.db_origen_Schema);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_Schema" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_Server", context.db_origen_Server);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_Server" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_ServiceName", context.db_origen_ServiceName);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_ServiceName" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("PATH", context.PATH);
                    paraList_tRunJob_1.add("--context_type " + "PATH" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("BODEGA", context.BODEGA);
                    paraList_tRunJob_1.add("--context_type " + "BODEGA" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("ESTADO_EXEC", context.ESTADO_EXEC);
                    paraList_tRunJob_1.add("--context_type " + "ESTADO_EXEC" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("FECHA_EJECUCION", context.FECHA_EJECUCION);
                    paraList_tRunJob_1.add("--context_type " + "FECHA_EJECUCION" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("HORA_FINAL", context.HORA_FINAL);
                    paraList_tRunJob_1.add("--context_type " + "HORA_FINAL" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("HORA_INICIO", context.HORA_INICIO);
                    paraList_tRunJob_1.add("--context_type " + "HORA_INICIO" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("JOB", context.JOB);
                    paraList_tRunJob_1.add("--context_type " + "JOB" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("LOGS_ERROR", context.LOGS_ERROR);
                    paraList_tRunJob_1.add("--context_type " + "LOGS_ERROR" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("LOGS_EXECUTION", context.LOGS_EXECUTION);
                    paraList_tRunJob_1.add("--context_type " + "LOGS_EXECUTION" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("ORIGEN", context.ORIGEN);
                    paraList_tRunJob_1.add("--context_type " + "ORIGEN" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("mail_Message", context.mail_Message);
                    paraList_tRunJob_1.add("--context_type " + "mail_Message" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("mail_Password", context.mail_Password);
                    paraList_tRunJob_1.add("--context_type " + "mail_Password" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("mail_SenderName", context.mail_SenderName);
                    paraList_tRunJob_1.add("--context_type " + "mail_SenderName" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("mail_SMTP_Host", context.mail_SMTP_Host);
                    paraList_tRunJob_1.add("--context_type " + "mail_SMTP_Host" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("mail_SMTP_Port", context.mail_SMTP_Port);
                    paraList_tRunJob_1.add("--context_type " + "mail_SMTP_Port" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("mail_Subject", context.mail_Subject);
                    paraList_tRunJob_1.add("--context_type " + "mail_Subject" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("mail_To", context.mail_To);
                    paraList_tRunJob_1.add("--context_type " + "mail_To" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("mail_User", context.mail_User);
                    paraList_tRunJob_1.add("--context_type " + "mail_User" + "=" + "id_String");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_1().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_1 = context.propertyNames();
		while (propertyNames_tRunJob_1.hasMoreElements()) {
			String key_tRunJob_1 = (String) propertyNames_tRunJob_1.nextElement();
			Object value_tRunJob_1 = (Object) context.get(key_tRunJob_1);
			if(value_tRunJob_1!=null) {  
				
					paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + value_tRunJob_1);
					
			} else {
				paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_1 = null;

	
		obj_tRunJob_1 = row5.moment;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param moment=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param moment=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param moment=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("moment", obj_tRunJob_1);
	
		obj_tRunJob_1 = row5.project;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param Project=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param Project=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param Project=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("Project", obj_tRunJob_1);
	
		obj_tRunJob_1 = row5.job;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param job=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param job=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param job=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("job", obj_tRunJob_1);
	
		obj_tRunJob_1 = row5.context;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param context=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param context=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param context=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("context", obj_tRunJob_1);
	
		obj_tRunJob_1 = row5.origin;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = row5.message;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param message=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param message=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param message=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("message", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_Server;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param server_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param server_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param server_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("server_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_ServiceName;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param service_name_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param service_name_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param service_name_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("service_name_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_Login;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param user_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param user_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param user_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("user_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_destino_Server;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param server_destino=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param server_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param server_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("server_destino", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_destino_ServiceName;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param service_name_destino=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param service_name_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param service_name_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("service_name_destino", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_destino_Login;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param user_destino=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param user_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param user_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("user_destino", obj_tRunJob_1);
	
	
				class ConsoleHelper_tRunJob_1 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",ioe.getMessage());
						            
									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line)
													.append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",ioe.getMessage());
						            
									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_1 consoleHelper_tRunJob_1 = new ConsoleHelper_tRunJob_1();

		Runtime runtime_tRunJob_1 = Runtime.getRuntime();
		Process ps_tRunJob_1 = null;
		
		//0 indicates normal termination
        int result_tRunJob_1;
        StringBuffer errorMsg_tRunJob_1 = new StringBuffer();
        try {
            ps_tRunJob_1 = runtime_tRunJob_1.exec((String[])paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));

            Thread normal_tRunJob_1 = consoleHelper_tRunJob_1.getNormalThread(ps_tRunJob_1);
            normal_tRunJob_1.start();

            Thread error_tRunJob_1 = consoleHelper_tRunJob_1.getErrorThread(ps_tRunJob_1, errorMsg_tRunJob_1);
            error_tRunJob_1.start();

            result_tRunJob_1 = ps_tRunJob_1.waitFor();
            normal_tRunJob_1.join();
            error_tRunJob_1.join();
        } catch (ThreadDeath tde) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",tde.getMessage());
            ps_tRunJob_1.destroy();
            throw tde;
        }

		globalMap.put("tRunJob_1_CHILD_RETURN_CODE",result_tRunJob_1);
		if(result_tRunJob_1 != 0){
   			globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",errorMsg_tRunJob_1.toString());
			  
	    		throw new RuntimeException("Child job returns " + result_tRunJob_1 + ". It doesn't terminate normally.\n" + errorMsg_tRunJob_1.toString());
			
  		}

		

 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 



/**
 * [tRunJob_1 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 



/**
 * [tRunJob_1 process_data_end ] stop
 */



	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	
	}
} catch (Exception e_tLogCatcher_1) {
globalMap.put("tLogCatcher_1_ERROR_MESSAGE",e_tLogCatcher_1.getMessage());
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */

	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */

	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	
	
 



/**
 * [tRunJob_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";
	
	
		int tos_count_tJava_1 = 0;
		


//Guarda en variables de contexto la hora final de ejecución del etl, actualiza el estado a succes y los imprime en consola

context.HORA_FINAL = TalendDate.getDate("HH:mm:ss");
context.ESTADO_EXEC = "Succes";

System.out.println("- End: "+context.HORA_FINAL );
System.out.println("- Estado: "+context.ESTADO_EXEC );
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tOracleClose_1Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tFixedFlowInput_1Process(globalMap);



/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleClose_1", false);
		start_Hash.put("tOracleClose_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleClose_1";
	
	
		int tos_count_tOracleClose_1 = 0;
		

 



/**
 * [tOracleClose_1 begin ] stop
 */
	
	/**
	 * [tOracleClose_1 main ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

	java.sql.Connection conn_tOracleClose_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
	
	if(conn_tOracleClose_1 != null && !conn_tOracleClose_1.isClosed())
	{
		
			conn_tOracleClose_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tOracleConnection_1"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tOracleClose_1++;

/**
 * [tOracleClose_1 main ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleClose_1 end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 

ok_Hash.put("tOracleClose_1", true);
end_Hash.put("tOracleClose_1", System.currentTimeMillis());




/**
 * [tOracleClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleClose_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];
    static byte[] commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[0];

	
			    public String FECHA_EJECUCION;

				public String getFECHA_EJECUCION () {
					return this.FECHA_EJECUCION;
				}

				public Boolean FECHA_EJECUCIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_EJECUCIONIsKey(){
				    return false;
				}
				public Integer FECHA_EJECUCIONLength(){
				    return null;
				}
				public Integer FECHA_EJECUCIONPrecision(){
				    return null;
				}
				public String FECHA_EJECUCIONDefault(){
				
					return null;
				
				}
				public String FECHA_EJECUCIONComment(){
				
				    return "";
				
				}
				public String FECHA_EJECUCIONPattern(){
				
					return "";
				
				}
				public String FECHA_EJECUCIONOriginalDbColumnName(){
				
					return "FECHA_EJECUCION";
				
				}

				
			    public String HORA_INICIO;

				public String getHORA_INICIO () {
					return this.HORA_INICIO;
				}

				public Boolean HORA_INICIOIsNullable(){
				    return true;
				}
				public Boolean HORA_INICIOIsKey(){
				    return false;
				}
				public Integer HORA_INICIOLength(){
				    return null;
				}
				public Integer HORA_INICIOPrecision(){
				    return null;
				}
				public String HORA_INICIODefault(){
				
					return null;
				
				}
				public String HORA_INICIOComment(){
				
				    return "";
				
				}
				public String HORA_INICIOPattern(){
				
					return "";
				
				}
				public String HORA_INICIOOriginalDbColumnName(){
				
					return "HORA_INICIO";
				
				}

				
			    public String HORA_FINAL;

				public String getHORA_FINAL () {
					return this.HORA_FINAL;
				}

				public Boolean HORA_FINALIsNullable(){
				    return true;
				}
				public Boolean HORA_FINALIsKey(){
				    return false;
				}
				public Integer HORA_FINALLength(){
				    return null;
				}
				public Integer HORA_FINALPrecision(){
				    return null;
				}
				public String HORA_FINALDefault(){
				
					return null;
				
				}
				public String HORA_FINALComment(){
				
				    return "";
				
				}
				public String HORA_FINALPattern(){
				
					return "";
				
				}
				public String HORA_FINALOriginalDbColumnName(){
				
					return "HORA_FINAL";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String JOBS;

				public String getJOBS () {
					return this.JOBS;
				}

				public Boolean JOBSIsNullable(){
				    return true;
				}
				public Boolean JOBSIsKey(){
				    return false;
				}
				public Integer JOBSLength(){
				    return null;
				}
				public Integer JOBSPrecision(){
				    return null;
				}
				public String JOBSDefault(){
				
					return null;
				
				}
				public String JOBSComment(){
				
				    return "";
				
				}
				public String JOBSPattern(){
				
					return "";
				
				}
				public String JOBSOriginalDbColumnName(){
				
					return "JOBS";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length) {
				if(length < 1024 && commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV.length == 0) {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[1024];
				} else {
   					commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length);
			strReturn = new String(commonByteArray_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.FECHA_EJECUCION = readString(dis);
					
					this.HORA_INICIO = readString(dis);
					
					this.HORA_FINAL = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.JOBS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_ACTUALIZACION_MASIVA_ActualizacionMSV) {

        	try {

        		int length = 0;
		
					this.FECHA_EJECUCION = readString(dis);
					
					this.HORA_INICIO = readString(dis);
					
					this.HORA_FINAL = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.JOBS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FECHA_EJECUCION,dos);
					
					// String
				
						writeString(this.HORA_INICIO,dos);
					
					// String
				
						writeString(this.HORA_FINAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.JOBS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FECHA_EJECUCION,dos);
					
					// String
				
						writeString(this.HORA_INICIO,dos);
					
					// String
				
						writeString(this.HORA_FINAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.JOBS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FECHA_EJECUCION="+FECHA_EJECUCION);
		sb.append(",HORA_INICIO="+HORA_INICIO);
		sb.append(",HORA_FINAL="+HORA_FINAL);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",JOBS="+JOBS);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File(context.LOGS_EXECUTION)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
        if(filetFileOutputDelimited_2.exists()){
            isFileGenerated_tFileOutputDelimited_2 = false;
        }
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
                                    if(filetFileOutputDelimited_2.length()==0){
                                        outtFileOutputDelimited_2.write("FECHA_EJECUCION");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("HORA_INICIO");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("HORA_FINAL");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ESTADO");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("JOBS");
                                        outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.flush();
                                    }


resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_1", false);
		start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_1";
	
	
		int tos_count_tFixedFlowInput_1 = 0;
		

	    for (int i_tFixedFlowInput_1 = 0 ; i_tFixedFlowInput_1 < 1 ; i_tFixedFlowInput_1++) {
	                	            	
    	            		row4.FECHA_EJECUCION = context.FECHA_EJECUCION;
    	            	        	            	
    	            		row4.HORA_INICIO = context.HORA_INICIO;
    	            	        	            	
    	            		row4.HORA_FINAL = context.HORA_FINAL;
    	            	        	            	
    	            		row4.ESTADO = context.ESTADO_EXEC;
    	            	        	            	
    	            		row4.JOBS = context.JOB;
    	            	

 



/**
 * [tFixedFlowInput_1 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 


	tos_count_tFixedFlowInput_1++;

/**
 * [tFixedFlowInput_1 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(row4.FECHA_EJECUCION != null) {
                        sb_tFileOutputDelimited_2.append(
                            row4.FECHA_EJECUCION
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row4.HORA_INICIO != null) {
                        sb_tFileOutputDelimited_2.append(
                            row4.HORA_INICIO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row4.HORA_FINAL != null) {
                        sb_tFileOutputDelimited_2.append(
                            row4.HORA_FINAL
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row4.ESTADO != null) {
                        sb_tFileOutputDelimited_2.append(
                            row4.ESTADO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row4.JOBS != null) {
                        sb_tFileOutputDelimited_2.append(
                            row4.JOBS
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

        }
        globalMap.put("tFixedFlowInput_1_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_1", true);
end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());




/**
 * [tFixedFlowInput_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	



		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_1 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final ActualizacionMSV ActualizacionMSVClass = new ActualizacionMSV();

        int exitCode = ActualizacionMSVClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = (String[][])globalBuffer.toArray(new String[globalBuffer.size()][]);

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        		hastBufferOutput = true;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = ActualizacionMSV.class.getClassLoader().getResourceAsStream("afi_actualizacion_masiva/actualizacionmsv_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = ActualizacionMSV.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }
            
            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("mensaje", "id_String");
                        if(context.getStringValue("mensaje") == null) {
                            context.mensaje = null;
                        } else {
                            context.mensaje=(String) context.getProperty("mensaje");
                        }
                        context.setContextType("vact_err_ent", "id_Integer");
                        if(context.getStringValue("vact_err_ent") == null) {
                            context.vact_err_ent = null;
                        } else {
                            try{
                                context.vact_err_ent=routines.system.ParserUtils.parseTo_Integer (context.getProperty("vact_err_ent"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "vact_err_ent", e.getMessage()));
                                context.vact_err_ent=null;
                            }
                        }
                        context.setContextType("vact_no_err_ent", "id_Integer");
                        if(context.getStringValue("vact_no_err_ent") == null) {
                            context.vact_no_err_ent = null;
                        } else {
                            try{
                                context.vact_no_err_ent=routines.system.ParserUtils.parseTo_Integer (context.getProperty("vact_no_err_ent"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "vact_no_err_ent", e.getMessage()));
                                context.vact_no_err_ent=null;
                            }
                        }
                        context.setContextType("vafiarchivos_id", "id_Integer");
                        if(context.getStringValue("vafiarchivos_id") == null) {
                            context.vafiarchivos_id = null;
                        } else {
                            try{
                                context.vafiarchivos_id=routines.system.ParserUtils.parseTo_Integer (context.getProperty("vafiarchivos_id"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "vafiarchivos_id", e.getMessage()));
                                context.vafiarchivos_id=null;
                            }
                        }
                        context.setContextType("vcontenido", "id_Object");
                        if(context.getStringValue("vcontenido") == null) {
                            context.vcontenido = null;
                        } else {
                            context.vcontenido=(Object) context.getProperty("vcontenido");
                        }
                        context.setContextType("vcount_registros", "id_Integer");
                        if(context.getStringValue("vcount_registros") == null) {
                            context.vcount_registros = null;
                        } else {
                            try{
                                context.vcount_registros=routines.system.ParserUtils.parseTo_Integer (context.getProperty("vcount_registros"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "vcount_registros", e.getMessage()));
                                context.vcount_registros=null;
                            }
                        }
                        context.setContextType("verror_datos", "id_Integer");
                        if(context.getStringValue("verror_datos") == null) {
                            context.verror_datos = null;
                        } else {
                            try{
                                context.verror_datos=routines.system.ParserUtils.parseTo_Integer (context.getProperty("verror_datos"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "verror_datos", e.getMessage()));
                                context.verror_datos=null;
                            }
                        }
                        context.setContextType("verror_dup_sis", "id_Integer");
                        if(context.getStringValue("verror_dup_sis") == null) {
                            context.verror_dup_sis = null;
                        } else {
                            try{
                                context.verror_dup_sis=routines.system.ParserUtils.parseTo_Integer (context.getProperty("verror_dup_sis"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "verror_dup_sis", e.getMessage()));
                                context.verror_dup_sis=null;
                            }
                        }
                        context.setContextType("verror_estructura", "id_Integer");
                        if(context.getStringValue("verror_estructura") == null) {
                            context.verror_estructura = null;
                        } else {
                            try{
                                context.verror_estructura=routines.system.ParserUtils.parseTo_Integer (context.getProperty("verror_estructura"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "verror_estructura", e.getMessage()));
                                context.verror_estructura=null;
                            }
                        }
                        context.setContextType("verror_id_afi_dup", "id_Integer");
                        if(context.getStringValue("verror_id_afi_dup") == null) {
                            context.verror_id_afi_dup = null;
                        } else {
                            try{
                                context.verror_id_afi_dup=routines.system.ParserUtils.parseTo_Integer (context.getProperty("verror_id_afi_dup"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "verror_id_afi_dup", e.getMessage()));
                                context.verror_id_afi_dup=null;
                            }
                        }
                        context.setContextType("verror_id_per_dup", "id_Integer");
                        if(context.getStringValue("verror_id_per_dup") == null) {
                            context.verror_id_per_dup = null;
                        } else {
                            try{
                                context.verror_id_per_dup=routines.system.ParserUtils.parseTo_Integer (context.getProperty("verror_id_per_dup"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "verror_id_per_dup", e.getMessage()));
                                context.verror_id_per_dup=null;
                            }
                        }
                        context.setContextType("verror_no_afi", "id_Integer");
                        if(context.getStringValue("verror_no_afi") == null) {
                            context.verror_no_afi = null;
                        } else {
                            try{
                                context.verror_no_afi=routines.system.ParserUtils.parseTo_Integer (context.getProperty("verror_no_afi"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "verror_no_afi", e.getMessage()));
                                context.verror_no_afi=null;
                            }
                        }
                        context.setContextType("verror_nombres_fnac", "id_Integer");
                        if(context.getStringValue("verror_nombres_fnac") == null) {
                            context.verror_nombres_fnac = null;
                        } else {
                            try{
                                context.verror_nombres_fnac=routines.system.ParserUtils.parseTo_Integer (context.getProperty("verror_nombres_fnac"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "verror_nombres_fnac", e.getMessage()));
                                context.verror_nombres_fnac=null;
                            }
                        }
                        context.setContextType("verror_pn_pa_doc", "id_Integer");
                        if(context.getStringValue("verror_pn_pa_doc") == null) {
                            context.verror_pn_pa_doc = null;
                        } else {
                            try{
                                context.verror_pn_pa_doc=routines.system.ParserUtils.parseTo_Integer (context.getProperty("verror_pn_pa_doc"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "verror_pn_pa_doc", e.getMessage()));
                                context.verror_pn_pa_doc=null;
                            }
                        }
                        context.setContextType("verror_td_doc", "id_Integer");
                        if(context.getStringValue("verror_td_doc") == null) {
                            context.verror_td_doc = null;
                        } else {
                            try{
                                context.verror_td_doc=routines.system.ParserUtils.parseTo_Integer (context.getProperty("verror_td_doc"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "verror_td_doc", e.getMessage()));
                                context.verror_td_doc=null;
                            }
                        }
                        context.setContextType("vfinicio", "id_Date");
                        if(context.getStringValue("vfinicio") == null) {
                            context.vfinicio = null;
                        } else {
                            String context_vfinicio_value = context.getProperty("vfinicio");
                            try{
                                if (context_vfinicio_value == null){
                                    context_vfinicio_value = "";
                                }
                                int context_vfinicio_pos = context_vfinicio_value.indexOf(";");
                                String context_vfinicio_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_vfinicio_pos > -1){
                                    context_vfinicio_pattern = context_vfinicio_value.substring(0, context_vfinicio_pos);
                                    context_vfinicio_value = context_vfinicio_value.substring(context_vfinicio_pos + 1);
                                }

                                context.vfinicio=(java.util.Date)(new java.text.SimpleDateFormat(context_vfinicio_pattern).parse(context_vfinicio_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_vfinicio_longValue = Long.valueOf(context_vfinicio_value);
                                    context.vfinicio = new java.util.Date(context_vfinicio_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "vfinicio", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.vfinicio=null;
                                }
                            }
                        }
                        context.setContextType("vprocesos_id", "id_Integer");
                        if(context.getStringValue("vprocesos_id") == null) {
                            context.vprocesos_id = null;
                        } else {
                            try{
                                context.vprocesos_id=routines.system.ParserUtils.parseTo_Integer (context.getProperty("vprocesos_id"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "vprocesos_id", e.getMessage()));
                                context.vprocesos_id=null;
                            }
                        }
                        context.setContextType("vtarchivos_codigo", "id_Integer");
                        if(context.getStringValue("vtarchivos_codigo") == null) {
                            context.vtarchivos_codigo = null;
                        } else {
                            try{
                                context.vtarchivos_codigo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("vtarchivos_codigo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "vtarchivos_codigo", e.getMessage()));
                                context.vtarchivos_codigo=null;
                            }
                        }
                        context.setContextType("vtotal_actualizaciones", "id_Integer");
                        if(context.getStringValue("vtotal_actualizaciones") == null) {
                            context.vtotal_actualizaciones = null;
                        } else {
                            try{
                                context.vtotal_actualizaciones=routines.system.ParserUtils.parseTo_Integer (context.getProperty("vtotal_actualizaciones"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "vtotal_actualizaciones", e.getMessage()));
                                context.vtotal_actualizaciones=null;
                            }
                        }
                        context.setContextType("vtotal_errores", "id_Integer");
                        if(context.getStringValue("vtotal_errores") == null) {
                            context.vtotal_errores = null;
                        } else {
                            try{
                                context.vtotal_errores=routines.system.ParserUtils.parseTo_Integer (context.getProperty("vtotal_errores"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "vtotal_errores", e.getMessage()));
                                context.vtotal_errores=null;
                            }
                        }
                        context.setContextType("vtotal_registros", "id_Integer");
                        if(context.getStringValue("vtotal_registros") == null) {
                            context.vtotal_registros = null;
                        } else {
                            try{
                                context.vtotal_registros=routines.system.ParserUtils.parseTo_Integer (context.getProperty("vtotal_registros"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "vtotal_registros", e.getMessage()));
                                context.vtotal_registros=null;
                            }
                        }
                        context.setContextType("vusuarios_id", "id_Integer");
                        if(context.getStringValue("vusuarios_id") == null) {
                            context.vusuarios_id = null;
                        } else {
                            try{
                                context.vusuarios_id=routines.system.ParserUtils.parseTo_Integer (context.getProperty("vusuarios_id"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "vusuarios_id", e.getMessage()));
                                context.vusuarios_id=null;
                            }
                        }
                        context.setContextType("db_destino_AdditionalParams", "id_String");
                        if(context.getStringValue("db_destino_AdditionalParams") == null) {
                            context.db_destino_AdditionalParams = null;
                        } else {
                            context.db_destino_AdditionalParams=(String) context.getProperty("db_destino_AdditionalParams");
                        }
                        context.setContextType("db_destino_Login", "id_String");
                        if(context.getStringValue("db_destino_Login") == null) {
                            context.db_destino_Login = null;
                        } else {
                            context.db_destino_Login=(String) context.getProperty("db_destino_Login");
                        }
                        context.setContextType("db_destino_Password", "id_Password");
                        if(context.getStringValue("db_destino_Password") == null) {
                            context.db_destino_Password = null;
                        } else {
                            String pwd_db_destino_Password_value = context.getProperty("db_destino_Password");
                            context.db_destino_Password = null;
                            if(pwd_db_destino_Password_value!=null) {
                                if(context_param.containsKey("db_destino_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_destino_Password = pwd_db_destino_Password_value;
                                } else if (!pwd_db_destino_Password_value.isEmpty()) {
                                    try {
                                        context.db_destino_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_destino_Password_value);
                                        context.put("db_destino_Password",context.db_destino_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_destino_Port", "id_String");
                        if(context.getStringValue("db_destino_Port") == null) {
                            context.db_destino_Port = null;
                        } else {
                            context.db_destino_Port=(String) context.getProperty("db_destino_Port");
                        }
                        context.setContextType("db_destino_Schema", "id_String");
                        if(context.getStringValue("db_destino_Schema") == null) {
                            context.db_destino_Schema = null;
                        } else {
                            context.db_destino_Schema=(String) context.getProperty("db_destino_Schema");
                        }
                        context.setContextType("db_destino_Server", "id_String");
                        if(context.getStringValue("db_destino_Server") == null) {
                            context.db_destino_Server = null;
                        } else {
                            context.db_destino_Server=(String) context.getProperty("db_destino_Server");
                        }
                        context.setContextType("db_destino_ServiceName", "id_String");
                        if(context.getStringValue("db_destino_ServiceName") == null) {
                            context.db_destino_ServiceName = null;
                        } else {
                            context.db_destino_ServiceName=(String) context.getProperty("db_destino_ServiceName");
                        }
                        context.setContextType("db_origen_AdditionalParams", "id_String");
                        if(context.getStringValue("db_origen_AdditionalParams") == null) {
                            context.db_origen_AdditionalParams = null;
                        } else {
                            context.db_origen_AdditionalParams=(String) context.getProperty("db_origen_AdditionalParams");
                        }
                        context.setContextType("db_origen_Login", "id_String");
                        if(context.getStringValue("db_origen_Login") == null) {
                            context.db_origen_Login = null;
                        } else {
                            context.db_origen_Login=(String) context.getProperty("db_origen_Login");
                        }
                        context.setContextType("db_origen_Password", "id_Password");
                        if(context.getStringValue("db_origen_Password") == null) {
                            context.db_origen_Password = null;
                        } else {
                            String pwd_db_origen_Password_value = context.getProperty("db_origen_Password");
                            context.db_origen_Password = null;
                            if(pwd_db_origen_Password_value!=null) {
                                if(context_param.containsKey("db_origen_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_origen_Password = pwd_db_origen_Password_value;
                                } else if (!pwd_db_origen_Password_value.isEmpty()) {
                                    try {
                                        context.db_origen_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_origen_Password_value);
                                        context.put("db_origen_Password",context.db_origen_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_origen_Port", "id_String");
                        if(context.getStringValue("db_origen_Port") == null) {
                            context.db_origen_Port = null;
                        } else {
                            context.db_origen_Port=(String) context.getProperty("db_origen_Port");
                        }
                        context.setContextType("db_origen_Schema", "id_String");
                        if(context.getStringValue("db_origen_Schema") == null) {
                            context.db_origen_Schema = null;
                        } else {
                            context.db_origen_Schema=(String) context.getProperty("db_origen_Schema");
                        }
                        context.setContextType("db_origen_Server", "id_String");
                        if(context.getStringValue("db_origen_Server") == null) {
                            context.db_origen_Server = null;
                        } else {
                            context.db_origen_Server=(String) context.getProperty("db_origen_Server");
                        }
                        context.setContextType("db_origen_ServiceName", "id_String");
                        if(context.getStringValue("db_origen_ServiceName") == null) {
                            context.db_origen_ServiceName = null;
                        } else {
                            context.db_origen_ServiceName=(String) context.getProperty("db_origen_ServiceName");
                        }
                        context.setContextType("PATH", "id_String");
                        if(context.getStringValue("PATH") == null) {
                            context.PATH = null;
                        } else {
                            context.PATH=(String) context.getProperty("PATH");
                        }
                        context.setContextType("BODEGA", "id_String");
                        if(context.getStringValue("BODEGA") == null) {
                            context.BODEGA = null;
                        } else {
                            context.BODEGA=(String) context.getProperty("BODEGA");
                        }
                        context.setContextType("ESTADO_EXEC", "id_String");
                        if(context.getStringValue("ESTADO_EXEC") == null) {
                            context.ESTADO_EXEC = null;
                        } else {
                            context.ESTADO_EXEC=(String) context.getProperty("ESTADO_EXEC");
                        }
                        context.setContextType("FECHA_EJECUCION", "id_String");
                        if(context.getStringValue("FECHA_EJECUCION") == null) {
                            context.FECHA_EJECUCION = null;
                        } else {
                            context.FECHA_EJECUCION=(String) context.getProperty("FECHA_EJECUCION");
                        }
                        context.setContextType("HORA_FINAL", "id_String");
                        if(context.getStringValue("HORA_FINAL") == null) {
                            context.HORA_FINAL = null;
                        } else {
                            context.HORA_FINAL=(String) context.getProperty("HORA_FINAL");
                        }
                        context.setContextType("HORA_INICIO", "id_String");
                        if(context.getStringValue("HORA_INICIO") == null) {
                            context.HORA_INICIO = null;
                        } else {
                            context.HORA_INICIO=(String) context.getProperty("HORA_INICIO");
                        }
                        context.setContextType("JOB", "id_String");
                        if(context.getStringValue("JOB") == null) {
                            context.JOB = null;
                        } else {
                            context.JOB=(String) context.getProperty("JOB");
                        }
                        context.setContextType("LOGS_ERROR", "id_String");
                        if(context.getStringValue("LOGS_ERROR") == null) {
                            context.LOGS_ERROR = null;
                        } else {
                            context.LOGS_ERROR=(String) context.getProperty("LOGS_ERROR");
                        }
                        context.setContextType("LOGS_EXECUTION", "id_String");
                        if(context.getStringValue("LOGS_EXECUTION") == null) {
                            context.LOGS_EXECUTION = null;
                        } else {
                            context.LOGS_EXECUTION=(String) context.getProperty("LOGS_EXECUTION");
                        }
                        context.setContextType("ORIGEN", "id_String");
                        if(context.getStringValue("ORIGEN") == null) {
                            context.ORIGEN = null;
                        } else {
                            context.ORIGEN=(String) context.getProperty("ORIGEN");
                        }
                        context.setContextType("mail_Message", "id_String");
                        if(context.getStringValue("mail_Message") == null) {
                            context.mail_Message = null;
                        } else {
                            context.mail_Message=(String) context.getProperty("mail_Message");
                        }
                        context.setContextType("mail_Password", "id_String");
                        if(context.getStringValue("mail_Password") == null) {
                            context.mail_Password = null;
                        } else {
                            context.mail_Password=(String) context.getProperty("mail_Password");
                        }
                        context.setContextType("mail_SenderName", "id_String");
                        if(context.getStringValue("mail_SenderName") == null) {
                            context.mail_SenderName = null;
                        } else {
                            context.mail_SenderName=(String) context.getProperty("mail_SenderName");
                        }
                        context.setContextType("mail_SMTP_Host", "id_String");
                        if(context.getStringValue("mail_SMTP_Host") == null) {
                            context.mail_SMTP_Host = null;
                        } else {
                            context.mail_SMTP_Host=(String) context.getProperty("mail_SMTP_Host");
                        }
                        context.setContextType("mail_SMTP_Port", "id_String");
                        if(context.getStringValue("mail_SMTP_Port") == null) {
                            context.mail_SMTP_Port = null;
                        } else {
                            context.mail_SMTP_Port=(String) context.getProperty("mail_SMTP_Port");
                        }
                        context.setContextType("mail_Subject", "id_String");
                        if(context.getStringValue("mail_Subject") == null) {
                            context.mail_Subject = null;
                        } else {
                            context.mail_Subject=(String) context.getProperty("mail_Subject");
                        }
                        context.setContextType("mail_To", "id_String");
                        if(context.getStringValue("mail_To") == null) {
                            context.mail_To = null;
                        } else {
                            context.mail_To=(String) context.getProperty("mail_To");
                        }
                        context.setContextType("mail_User", "id_String");
                        if(context.getStringValue("mail_User") == null) {
                            context.mail_User = null;
                        } else {
                            context.mail_User=(String) context.getProperty("mail_User");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("mensaje")) {
                context.mensaje = (String) parentContextMap.get("mensaje");
            }if (parentContextMap.containsKey("vact_err_ent")) {
                context.vact_err_ent = (Integer) parentContextMap.get("vact_err_ent");
            }if (parentContextMap.containsKey("vact_no_err_ent")) {
                context.vact_no_err_ent = (Integer) parentContextMap.get("vact_no_err_ent");
            }if (parentContextMap.containsKey("vafiarchivos_id")) {
                context.vafiarchivos_id = (Integer) parentContextMap.get("vafiarchivos_id");
            }if (parentContextMap.containsKey("vcontenido")) {
                context.vcontenido = (Object) parentContextMap.get("vcontenido");
            }if (parentContextMap.containsKey("vcount_registros")) {
                context.vcount_registros = (Integer) parentContextMap.get("vcount_registros");
            }if (parentContextMap.containsKey("verror_datos")) {
                context.verror_datos = (Integer) parentContextMap.get("verror_datos");
            }if (parentContextMap.containsKey("verror_dup_sis")) {
                context.verror_dup_sis = (Integer) parentContextMap.get("verror_dup_sis");
            }if (parentContextMap.containsKey("verror_estructura")) {
                context.verror_estructura = (Integer) parentContextMap.get("verror_estructura");
            }if (parentContextMap.containsKey("verror_id_afi_dup")) {
                context.verror_id_afi_dup = (Integer) parentContextMap.get("verror_id_afi_dup");
            }if (parentContextMap.containsKey("verror_id_per_dup")) {
                context.verror_id_per_dup = (Integer) parentContextMap.get("verror_id_per_dup");
            }if (parentContextMap.containsKey("verror_no_afi")) {
                context.verror_no_afi = (Integer) parentContextMap.get("verror_no_afi");
            }if (parentContextMap.containsKey("verror_nombres_fnac")) {
                context.verror_nombres_fnac = (Integer) parentContextMap.get("verror_nombres_fnac");
            }if (parentContextMap.containsKey("verror_pn_pa_doc")) {
                context.verror_pn_pa_doc = (Integer) parentContextMap.get("verror_pn_pa_doc");
            }if (parentContextMap.containsKey("verror_td_doc")) {
                context.verror_td_doc = (Integer) parentContextMap.get("verror_td_doc");
            }if (parentContextMap.containsKey("vfinicio")) {
                context.vfinicio = (java.util.Date) parentContextMap.get("vfinicio");
            }if (parentContextMap.containsKey("vprocesos_id")) {
                context.vprocesos_id = (Integer) parentContextMap.get("vprocesos_id");
            }if (parentContextMap.containsKey("vtarchivos_codigo")) {
                context.vtarchivos_codigo = (Integer) parentContextMap.get("vtarchivos_codigo");
            }if (parentContextMap.containsKey("vtotal_actualizaciones")) {
                context.vtotal_actualizaciones = (Integer) parentContextMap.get("vtotal_actualizaciones");
            }if (parentContextMap.containsKey("vtotal_errores")) {
                context.vtotal_errores = (Integer) parentContextMap.get("vtotal_errores");
            }if (parentContextMap.containsKey("vtotal_registros")) {
                context.vtotal_registros = (Integer) parentContextMap.get("vtotal_registros");
            }if (parentContextMap.containsKey("vusuarios_id")) {
                context.vusuarios_id = (Integer) parentContextMap.get("vusuarios_id");
            }if (parentContextMap.containsKey("db_destino_AdditionalParams")) {
                context.db_destino_AdditionalParams = (String) parentContextMap.get("db_destino_AdditionalParams");
            }if (parentContextMap.containsKey("db_destino_Login")) {
                context.db_destino_Login = (String) parentContextMap.get("db_destino_Login");
            }if (parentContextMap.containsKey("db_destino_Password")) {
                context.db_destino_Password = (java.lang.String) parentContextMap.get("db_destino_Password");
            }if (parentContextMap.containsKey("db_destino_Port")) {
                context.db_destino_Port = (String) parentContextMap.get("db_destino_Port");
            }if (parentContextMap.containsKey("db_destino_Schema")) {
                context.db_destino_Schema = (String) parentContextMap.get("db_destino_Schema");
            }if (parentContextMap.containsKey("db_destino_Server")) {
                context.db_destino_Server = (String) parentContextMap.get("db_destino_Server");
            }if (parentContextMap.containsKey("db_destino_ServiceName")) {
                context.db_destino_ServiceName = (String) parentContextMap.get("db_destino_ServiceName");
            }if (parentContextMap.containsKey("db_origen_AdditionalParams")) {
                context.db_origen_AdditionalParams = (String) parentContextMap.get("db_origen_AdditionalParams");
            }if (parentContextMap.containsKey("db_origen_Login")) {
                context.db_origen_Login = (String) parentContextMap.get("db_origen_Login");
            }if (parentContextMap.containsKey("db_origen_Password")) {
                context.db_origen_Password = (java.lang.String) parentContextMap.get("db_origen_Password");
            }if (parentContextMap.containsKey("db_origen_Port")) {
                context.db_origen_Port = (String) parentContextMap.get("db_origen_Port");
            }if (parentContextMap.containsKey("db_origen_Schema")) {
                context.db_origen_Schema = (String) parentContextMap.get("db_origen_Schema");
            }if (parentContextMap.containsKey("db_origen_Server")) {
                context.db_origen_Server = (String) parentContextMap.get("db_origen_Server");
            }if (parentContextMap.containsKey("db_origen_ServiceName")) {
                context.db_origen_ServiceName = (String) parentContextMap.get("db_origen_ServiceName");
            }if (parentContextMap.containsKey("PATH")) {
                context.PATH = (String) parentContextMap.get("PATH");
            }if (parentContextMap.containsKey("BODEGA")) {
                context.BODEGA = (String) parentContextMap.get("BODEGA");
            }if (parentContextMap.containsKey("ESTADO_EXEC")) {
                context.ESTADO_EXEC = (String) parentContextMap.get("ESTADO_EXEC");
            }if (parentContextMap.containsKey("FECHA_EJECUCION")) {
                context.FECHA_EJECUCION = (String) parentContextMap.get("FECHA_EJECUCION");
            }if (parentContextMap.containsKey("HORA_FINAL")) {
                context.HORA_FINAL = (String) parentContextMap.get("HORA_FINAL");
            }if (parentContextMap.containsKey("HORA_INICIO")) {
                context.HORA_INICIO = (String) parentContextMap.get("HORA_INICIO");
            }if (parentContextMap.containsKey("JOB")) {
                context.JOB = (String) parentContextMap.get("JOB");
            }if (parentContextMap.containsKey("LOGS_ERROR")) {
                context.LOGS_ERROR = (String) parentContextMap.get("LOGS_ERROR");
            }if (parentContextMap.containsKey("LOGS_EXECUTION")) {
                context.LOGS_EXECUTION = (String) parentContextMap.get("LOGS_EXECUTION");
            }if (parentContextMap.containsKey("ORIGEN")) {
                context.ORIGEN = (String) parentContextMap.get("ORIGEN");
            }if (parentContextMap.containsKey("mail_Message")) {
                context.mail_Message = (String) parentContextMap.get("mail_Message");
            }if (parentContextMap.containsKey("mail_Password")) {
                context.mail_Password = (String) parentContextMap.get("mail_Password");
            }if (parentContextMap.containsKey("mail_SenderName")) {
                context.mail_SenderName = (String) parentContextMap.get("mail_SenderName");
            }if (parentContextMap.containsKey("mail_SMTP_Host")) {
                context.mail_SMTP_Host = (String) parentContextMap.get("mail_SMTP_Host");
            }if (parentContextMap.containsKey("mail_SMTP_Port")) {
                context.mail_SMTP_Port = (String) parentContextMap.get("mail_SMTP_Port");
            }if (parentContextMap.containsKey("mail_Subject")) {
                context.mail_Subject = (String) parentContextMap.get("mail_Subject");
            }if (parentContextMap.containsKey("mail_To")) {
                context.mail_To = (String) parentContextMap.get("mail_To");
            }if (parentContextMap.containsKey("mail_User")) {
                context.mail_User = (String) parentContextMap.get("mail_User");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("db_destino_Password");
			parametersToEncrypt.add("db_origen_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs


this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : ActualizacionMSV");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tOracleConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tOracleConnection_1", globalMap.get("conn_tOracleConnection_1"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--context_file")) {
        	String keyValue = arg.substring(15);
        	String filePath = new String(java.util.Base64.getDecoder().decode(keyValue));
        	java.nio.file.Path contextFile = java.nio.file.Paths.get(filePath);
            try (java.io.BufferedReader reader = java.nio.file.Files.newBufferedReader(contextFile)) {
                String line;
                while ((line = reader.readLine()) != null) {
                    int index = -1;
                    if ( (index = line.indexOf('=')) > -1) {
							if (line.startsWith("--context_param")) {
								if ("id_Password".equals(context_param.getContextType(line.substring(16, index)))) {
									context_param.put(line.substring(16, index), routines.system.PasswordEncryptUtil.decryptPassword(
											line.substring(index + 1)));
								} else {
									context_param.put(line.substring(16, index), line.substring(index + 1));
								}
							}else {//--context_type
								context_param.setContextType(line.substring(15, index), line.substring(index + 1));
							}
                    }
                }
            } catch (java.io.IOException e) {
            	System.err.println("Could not load the context file: " + filePath);
                e.printStackTrace();
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     4099643 characters generated by Talend Open Studio for ESB 
 *     on the October 28, 2024, 2:23:05 PM COT
 ************************************************************************************************/