// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package afi_novedades_afiliado.novedadesafiliadosetapa1_0_2;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.GenerarUuid;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_3
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;

	//the import part of tJavaRow_5
	//import java.util.List;

	//the import part of tJavaRow_1
	//import java.util.List;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.FileOutputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;



	//the import part of tJavaRow_3
	//import java.util.List;

	//the import part of tJavaRow_2
	//import java.util.List;

	//the import part of tJava_4
	//import java.util.List;

	//the import part of tJavaRow_7
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: NovedadesAfiliadosEtapa1 Purpose: Generar el archivo con la informacion del maestro de ingreso de nuevas afiliaciones<br>
 * Description:  <br>
 * @author jorgejlhc@gmail.com
 * @version 8.8.8.20240722_1936-SNAPSHOT
 * @status DEV
 */
public class NovedadesAfiliadosEtapa1 implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	private Object[] multiThreadLockWrite = new Object[0];
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(db_origen_AdditionalParams != null){
				
					this.setProperty("db_origen_AdditionalParams", db_origen_AdditionalParams.toString());
				
			}
			
			if(db_origen_Login != null){
				
					this.setProperty("db_origen_Login", db_origen_Login.toString());
				
			}
			
			if(db_origen_Password != null){
				
					this.setProperty("db_origen_Password", db_origen_Password.toString());
				
			}
			
			if(db_origen_Port != null){
				
					this.setProperty("db_origen_Port", db_origen_Port.toString());
				
			}
			
			if(db_origen_Schema != null){
				
					this.setProperty("db_origen_Schema", db_origen_Schema.toString());
				
			}
			
			if(db_origen_Server != null){
				
					this.setProperty("db_origen_Server", db_origen_Server.toString());
				
			}
			
			if(db_origen_ServiceName != null){
				
					this.setProperty("db_origen_ServiceName", db_origen_ServiceName.toString());
				
			}
			
			if(HORA_FINAL != null){
				
					this.setProperty("HORA_FINAL", HORA_FINAL.toString());
				
			}
			
			if(JOB != null){
				
					this.setProperty("JOB", JOB.toString());
				
			}
			
			if(LOGS_ERROR != null){
				
					this.setProperty("LOGS_ERROR", LOGS_ERROR.toString());
				
			}
			
			if(LOGS_EXECUTION != null){
				
					this.setProperty("LOGS_EXECUTION", LOGS_EXECUTION.toString());
				
			}
			
			if(Area != null){
				
					this.setProperty("Area", Area.toString());
				
			}
			
			if(BODEGA != null){
				
					this.setProperty("BODEGA", BODEGA.toString());
				
			}
			
			if(ERROR != null){
				
					this.setProperty("ERROR", ERROR.toString());
				
			}
			
			if(Estado != null){
				
					this.setProperty("Estado", Estado.toString());
				
			}
			
			if(ESTADO_EXEC != null){
				
					this.setProperty("ESTADO_EXEC", ESTADO_EXEC.toString());
				
			}
			
			if(FECHA_EJECUCION != null){
				
					this.setProperty("FECHA_EJECUCION", FECHA_EJECUCION.toString());
				
			}
			
			if(FECHA_INICIO != null){
				
					this.setProperty("FECHA_INICIO", FECHA_INICIO.toString());
				
			}
			
			if(HORA_FIN != null){
				
					this.setProperty("HORA_FIN", HORA_FIN.toString());
				
			}
			
			if(HORA_INICIO != null){
				
					this.setProperty("HORA_INICIO", HORA_INICIO.toString());
				
			}
			
			if(IdProceso != null){
				
					this.setProperty("IdProceso", IdProceso.toString());
				
			}
			
			if(LOG_EJECUCION != null){
				
					this.setProperty("LOG_EJECUCION", LOG_EJECUCION.toString());
				
			}
			
			if(NombreArchivoSalida != null){
				
					this.setProperty("NombreArchivoSalida", NombreArchivoSalida.toString());
				
			}
			
			if(ORIGEN != null){
				
					this.setProperty("ORIGEN", ORIGEN.toString());
				
			}
			
			if(RutaSistema != null){
				
					this.setProperty("RutaSistema", RutaSistema.toString());
				
			}
			
			if(TipoArchivo != null){
				
					this.setProperty("TipoArchivo", TipoArchivo.toString());
				
			}
			
			if(TipoProceso != null){
				
					this.setProperty("TipoProceso", TipoProceso.toString());
				
			}
			
			if(Usuario != null){
				
					this.setProperty("Usuario", Usuario.toString());
				
			}
			
			if(mail_From != null){
				
					this.setProperty("mail_From", mail_From.toString());
				
			}
			
			if(mail_Message != null){
				
					this.setProperty("mail_Message", mail_Message.toString());
				
			}
			
			if(mail_Password != null){
				
					this.setProperty("mail_Password", mail_Password.toString());
				
			}
			
			if(mail_Sendername != null){
				
					this.setProperty("mail_Sendername", mail_Sendername.toString());
				
			}
			
			if(mail_SMTP_Host != null){
				
					this.setProperty("mail_SMTP_Host", mail_SMTP_Host.toString());
				
			}
			
			if(mail_SMTP_Port != null){
				
					this.setProperty("mail_SMTP_Port", mail_SMTP_Port.toString());
				
			}
			
			if(mail_Subject != null){
				
					this.setProperty("mail_Subject", mail_Subject.toString());
				
			}
			
			if(mail_To != null){
				
					this.setProperty("mail_To", mail_To.toString());
				
			}
			
			if(mail_User != null){
				
					this.setProperty("mail_User", mail_User.toString());
				
			}
			
			if(PasswordMail != null){
				
					this.setProperty("PasswordMail", PasswordMail.toString());
				
			}
			
			if(SMTPHost != null){
				
					this.setProperty("SMTPHost", SMTPHost.toString());
				
			}
			
			if(SMTPPort != null){
				
					this.setProperty("SMTPPort", SMTPPort.toString());
				
			}
			
			if(UsernameMail != null){
				
					this.setProperty("UsernameMail", UsernameMail.toString());
				
			}
			
			if(DOCUMENTO_ACTUAL != null){
				
					this.setProperty("DOCUMENTO_ACTUAL", DOCUMENTO_ACTUAL.toString());
				
			}
			
			if(DOCUMENTO_ANTERIOR != null){
				
					this.setProperty("DOCUMENTO_ANTERIOR", DOCUMENTO_ANTERIOR.toString());
				
			}
			
			if(FILA != null){
				
					this.setProperty("FILA", FILA.toString());
				
			}
			
			if(NOVEDAD != null){
				
					this.setProperty("NOVEDAD", NOVEDAD.toString());
				
			}
			
			if(SI_UPDATE != null){
				
					this.setProperty("SI_UPDATE", SI_UPDATE.toString());
				
			}
			
			if(TDOCUMENTO_ACTUAL != null){
				
					this.setProperty("TDOCUMENTO_ACTUAL", TDOCUMENTO_ACTUAL.toString());
				
			}
			
			if(TDOCUMENTO_ANTERIOR != null){
				
					this.setProperty("TDOCUMENTO_ANTERIOR", TDOCUMENTO_ANTERIOR.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String db_origen_AdditionalParams;
public String getDb_origen_AdditionalParams(){
	return this.db_origen_AdditionalParams;
}
public String db_origen_Login;
public String getDb_origen_Login(){
	return this.db_origen_Login;
}
public java.lang.String db_origen_Password;
public java.lang.String getDb_origen_Password(){
	return this.db_origen_Password;
}
public String db_origen_Port;
public String getDb_origen_Port(){
	return this.db_origen_Port;
}
public String db_origen_Schema;
public String getDb_origen_Schema(){
	return this.db_origen_Schema;
}
public String db_origen_Server;
public String getDb_origen_Server(){
	return this.db_origen_Server;
}
public String db_origen_ServiceName;
public String getDb_origen_ServiceName(){
	return this.db_origen_ServiceName;
}
public String HORA_FINAL;
public String getHORA_FINAL(){
	return this.HORA_FINAL;
}
public String JOB;
public String getJOB(){
	return this.JOB;
}
public String LOGS_ERROR;
public String getLOGS_ERROR(){
	return this.LOGS_ERROR;
}
public String LOGS_EXECUTION;
public String getLOGS_EXECUTION(){
	return this.LOGS_EXECUTION;
}
public String Area;
public String getArea(){
	return this.Area;
}
public String BODEGA;
public String getBODEGA(){
	return this.BODEGA;
}
public String ERROR;
public String getERROR(){
	return this.ERROR;
}
public BigDecimal Estado;
public BigDecimal getEstado(){
	return this.Estado;
}
public String ESTADO_EXEC;
public String getESTADO_EXEC(){
	return this.ESTADO_EXEC;
}
public String FECHA_EJECUCION;
public String getFECHA_EJECUCION(){
	return this.FECHA_EJECUCION;
}
public String FECHA_INICIO;
public String getFECHA_INICIO(){
	return this.FECHA_INICIO;
}
public String HORA_FIN;
public String getHORA_FIN(){
	return this.HORA_FIN;
}
public String HORA_INICIO;
public String getHORA_INICIO(){
	return this.HORA_INICIO;
}
public BigDecimal IdProceso;
public BigDecimal getIdProceso(){
	return this.IdProceso;
}
public String LOG_EJECUCION;
public String getLOG_EJECUCION(){
	return this.LOG_EJECUCION;
}
public String NombreArchivoSalida;
public String getNombreArchivoSalida(){
	return this.NombreArchivoSalida;
}
public String ORIGEN;
public String getORIGEN(){
	return this.ORIGEN;
}
public String RutaSistema;
public String getRutaSistema(){
	return this.RutaSistema;
}
public BigDecimal TipoArchivo;
public BigDecimal getTipoArchivo(){
	return this.TipoArchivo;
}
public BigDecimal TipoProceso;
public BigDecimal getTipoProceso(){
	return this.TipoProceso;
}
public BigDecimal Usuario;
public BigDecimal getUsuario(){
	return this.Usuario;
}
public String mail_From;
public String getMail_From(){
	return this.mail_From;
}
public String mail_Message;
public String getMail_Message(){
	return this.mail_Message;
}
public java.lang.String mail_Password;
public java.lang.String getMail_Password(){
	return this.mail_Password;
}
public String mail_Sendername;
public String getMail_Sendername(){
	return this.mail_Sendername;
}
public String mail_SMTP_Host;
public String getMail_SMTP_Host(){
	return this.mail_SMTP_Host;
}
public String mail_SMTP_Port;
public String getMail_SMTP_Port(){
	return this.mail_SMTP_Port;
}
public String mail_Subject;
public String getMail_Subject(){
	return this.mail_Subject;
}
public String mail_To;
public String getMail_To(){
	return this.mail_To;
}
public String mail_User;
public String getMail_User(){
	return this.mail_User;
}
public String PasswordMail;
public String getPasswordMail(){
	return this.PasswordMail;
}
public String SMTPHost;
public String getSMTPHost(){
	return this.SMTPHost;
}
public String SMTPPort;
public String getSMTPPort(){
	return this.SMTPPort;
}
public String UsernameMail;
public String getUsernameMail(){
	return this.UsernameMail;
}
public String DOCUMENTO_ACTUAL;
public String getDOCUMENTO_ACTUAL(){
	return this.DOCUMENTO_ACTUAL;
}
public String DOCUMENTO_ANTERIOR;
public String getDOCUMENTO_ANTERIOR(){
	return this.DOCUMENTO_ANTERIOR;
}
public String FILA;
public String getFILA(){
	return this.FILA;
}
public String NOVEDAD;
public String getNOVEDAD(){
	return this.NOVEDAD;
}
public String SI_UPDATE;
public String getSI_UPDATE(){
	return this.SI_UPDATE;
}
public String TDOCUMENTO_ACTUAL;
public String getTDOCUMENTO_ACTUAL(){
	return this.TDOCUMENTO_ACTUAL;
}
public String TDOCUMENTO_ANTERIOR;
public String getTDOCUMENTO_ANTERIOR(){
	return this.TDOCUMENTO_ANTERIOR;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.2";
	private final String jobName = "NovedadesAfiliadosEtapa1";
	private final String projectName = "AFI_NOVEDADES_AFILIADO";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Long> end_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Boolean>());
		public  final java.util.List<String[]> globalBuffer = java.util.Collections.synchronizedList(new java.util.ArrayList<String[]>());
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				NovedadesAfiliadosEtapa1.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(NovedadesAfiliadosEtapa1.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tBufferOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tBufferOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPrejob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSortRow_2_SortOut_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tSortRow_2_SortIn_error(exception, errorComponent, globalMap);
						
						}
					
			public void tSortRow_2_SortIn_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	









public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tOracleClose_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleClose_1", false);
		start_Hash.put("tOracleClose_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleClose_1";
	
	
		int tos_count_tOracleClose_1 = 0;
		

 



/**
 * [tOracleClose_1 begin ] stop
 */
	
	/**
	 * [tOracleClose_1 main ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

	java.sql.Connection conn_tOracleClose_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
	
	if(conn_tOracleClose_1 != null && !conn_tOracleClose_1.isClosed())
	{
		
			conn_tOracleClose_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tOracleConnection_1"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tOracleClose_1++;

/**
 * [tOracleClose_1 main ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleClose_1 end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 

ok_Hash.put("tOracleClose_1", true);
end_Hash.put("tOracleClose_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tJava_3Process(globalMap);



/**
 * [tOracleClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleClose_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";
	
	
		int tos_count_tJava_3 = 0;
		


context.HORA_FIN = TalendDate.getDate("HH:mm:ss");
 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tFixedFlowInput_2Process(globalMap);



/**
 * [tJava_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}
	


public static class row33Struct implements routines.system.IPersistableRow<row33Struct> {
    final static byte[] commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];
    static byte[] commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];

	
			    public String FECHA_EJECUCION;

				public String getFECHA_EJECUCION () {
					return this.FECHA_EJECUCION;
				}

				public Boolean FECHA_EJECUCIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_EJECUCIONIsKey(){
				    return false;
				}
				public Integer FECHA_EJECUCIONLength(){
				    return null;
				}
				public Integer FECHA_EJECUCIONPrecision(){
				    return null;
				}
				public String FECHA_EJECUCIONDefault(){
				
					return null;
				
				}
				public String FECHA_EJECUCIONComment(){
				
				    return "";
				
				}
				public String FECHA_EJECUCIONPattern(){
				
					return "";
				
				}
				public String FECHA_EJECUCIONOriginalDbColumnName(){
				
					return "FECHA_EJECUCION";
				
				}

				
			    public String HORA_INICIO;

				public String getHORA_INICIO () {
					return this.HORA_INICIO;
				}

				public Boolean HORA_INICIOIsNullable(){
				    return true;
				}
				public Boolean HORA_INICIOIsKey(){
				    return false;
				}
				public Integer HORA_INICIOLength(){
				    return null;
				}
				public Integer HORA_INICIOPrecision(){
				    return null;
				}
				public String HORA_INICIODefault(){
				
					return null;
				
				}
				public String HORA_INICIOComment(){
				
				    return "";
				
				}
				public String HORA_INICIOPattern(){
				
					return "";
				
				}
				public String HORA_INICIOOriginalDbColumnName(){
				
					return "HORA_INICIO";
				
				}

				
			    public String HORA_FINAL;

				public String getHORA_FINAL () {
					return this.HORA_FINAL;
				}

				public Boolean HORA_FINALIsNullable(){
				    return true;
				}
				public Boolean HORA_FINALIsKey(){
				    return false;
				}
				public Integer HORA_FINALLength(){
				    return null;
				}
				public Integer HORA_FINALPrecision(){
				    return null;
				}
				public String HORA_FINALDefault(){
				
					return null;
				
				}
				public String HORA_FINALComment(){
				
				    return "";
				
				}
				public String HORA_FINALPattern(){
				
					return "";
				
				}
				public String HORA_FINALOriginalDbColumnName(){
				
					return "HORA_FINAL";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String JOBS;

				public String getJOBS () {
					return this.JOBS;
				}

				public Boolean JOBSIsNullable(){
				    return true;
				}
				public Boolean JOBSIsKey(){
				    return false;
				}
				public Integer JOBSLength(){
				    return null;
				}
				public Integer JOBSPrecision(){
				    return null;
				}
				public String JOBSDefault(){
				
					return null;
				
				}
				public String JOBSComment(){
				
				    return "";
				
				}
				public String JOBSPattern(){
				
					return "";
				
				}
				public String JOBSOriginalDbColumnName(){
				
					return "JOBS";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length) {
				if(length < 1024 && commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length == 0) {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[1024];
				} else {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length);
			strReturn = new String(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length) {
				if(length < 1024 && commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length == 0) {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[1024];
				} else {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length);
			strReturn = new String(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
					this.FECHA_EJECUCION = readString(dis);
					
					this.HORA_INICIO = readString(dis);
					
					this.HORA_FINAL = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.JOBS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
					this.FECHA_EJECUCION = readString(dis);
					
					this.HORA_INICIO = readString(dis);
					
					this.HORA_FINAL = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.JOBS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FECHA_EJECUCION,dos);
					
					// String
				
						writeString(this.HORA_INICIO,dos);
					
					// String
				
						writeString(this.HORA_FINAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.JOBS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FECHA_EJECUCION,dos);
					
					// String
				
						writeString(this.HORA_INICIO,dos);
					
					// String
				
						writeString(this.HORA_FINAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.JOBS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FECHA_EJECUCION="+FECHA_EJECUCION);
		sb.append(",HORA_INICIO="+HORA_INICIO);
		sb.append(",HORA_FINAL="+HORA_FINAL);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",JOBS="+JOBS);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row33Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row33Struct row33 = new row33Struct();




	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row33");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File(context.LOG_EJECUCION)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
        if(filetFileOutputDelimited_2.exists()){
            isFileGenerated_tFileOutputDelimited_2 = false;
        }
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
                        synchronized (multiThreadLockWrite) {
                                    if(filetFileOutputDelimited_2.length()==0){
                                        outtFileOutputDelimited_2.write("FECHA_EJECUCION");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("HORA_INICIO");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("HORA_FINAL");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ESTADO");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("JOBS");
                                        outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.flush();
                                    }
                        }


resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_2", false);
		start_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_2";
	
	
		int tos_count_tFixedFlowInput_2 = 0;
		

	    for (int i_tFixedFlowInput_2 = 0 ; i_tFixedFlowInput_2 < 1 ; i_tFixedFlowInput_2++) {
	                	            	
    	            		row33.FECHA_EJECUCION = context.FECHA_EJECUCION;
    	            	        	            	
    	            		row33.HORA_INICIO = context.HORA_INICIO;
    	            	        	            	
    	            		row33.HORA_FINAL = context.HORA_FIN;
    	            	        	            	
    	            		row33.ESTADO = context.ESTADO_EXEC;
    	            	        	            	
    	            		row33.JOBS = "NovedadesAfiliadosEtapa1";
    	            	

 



/**
 * [tFixedFlowInput_2 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 


	tos_count_tFixedFlowInput_2++;

/**
 * [tFixedFlowInput_2 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row33"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(row33.FECHA_EJECUCION != null) {
                        sb_tFileOutputDelimited_2.append(
                            row33.FECHA_EJECUCION
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row33.HORA_INICIO != null) {
                        sb_tFileOutputDelimited_2.append(
                            row33.HORA_INICIO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row33.HORA_FINAL != null) {
                        sb_tFileOutputDelimited_2.append(
                            row33.HORA_FINAL
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row33.ESTADO != null) {
                        sb_tFileOutputDelimited_2.append(
                            row33.ESTADO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row33.JOBS != null) {
                        sb_tFileOutputDelimited_2.append(
                            row33.JOBS
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    synchronized (multiThreadLockWrite) {
                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());

                    }



 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

        }
        globalMap.put("tFixedFlowInput_2_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_2", true);
end_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());




/**
 * [tFixedFlowInput_2 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	



		
	   		synchronized (multiThreadLockWrite) {
		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
			}
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row33");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_2 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
		   		synchronized (multiThreadLockWrite) {
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
				}
			
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];
    static byte[] commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length) {
				if(length < 1024 && commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length == 0) {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[1024];
				} else {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length);
			strReturn = new String(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length) {
				if(length < 1024 && commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length == 0) {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[1024];
				} else {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length);
			strReturn = new String(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();




	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.ERROR)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
        if(filetFileOutputDelimited_1.exists()){
            isFileGenerated_tFileOutputDelimited_1 = false;
        }
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
                        synchronized (multiThreadLockWrite) {
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("moment");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("root_pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("father_pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("project");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("job");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("context");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("priority");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("type");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("origin");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("message");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("code");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }
                        }


resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";
	
	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row7.type = lcm.getType();
		row7.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row7.priority = lcm.getPriority();
		row7.message = lcm.getMessage();
		row7.code = lcm.getCode();
		
		row7.moment = java.util.Calendar.getInstance().getTime();
	
    	row7.pid = pid;
		row7.root_pid = rootPid;
		row7.father_pid = fatherPid;
	
    	row7.project = projectName;
    	row7.job = jobName;
    	row7.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row7.moment != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(row7.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.root_pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.root_pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.father_pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.father_pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.project != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.project
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.job != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.job
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.context != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.context
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.priority != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.priority
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.type != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.type
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.origin != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.origin
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.message != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.message
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.code != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.code
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    synchronized (multiThreadLockWrite) {
                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());

                    }



 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	
	}
} catch (Exception e_tLogCatcher_1) {
globalMap.put("tLogCatcher_1_ERROR_MESSAGE",e_tLogCatcher_1.getMessage());
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tJava_2Process(globalMap);



/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	



		
	   		synchronized (multiThreadLockWrite) {
		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
			}
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk10", 0, "ok");
				}
				tFixedFlowInput_6Process(globalMap);



/**
 * [tFileOutputDelimited_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
		   		synchronized (multiThreadLockWrite) {
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
				}
			
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public static class row32Struct implements routines.system.IPersistableRow<row32Struct> {
    final static byte[] commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];
    static byte[] commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];

	
			    public Integer RESULT;

				public Integer getRESULT () {
					return this.RESULT;
				}

				public Boolean RESULTIsNullable(){
				    return true;
				}
				public Boolean RESULTIsKey(){
				    return false;
				}
				public Integer RESULTLength(){
				    return null;
				}
				public Integer RESULTPrecision(){
				    return null;
				}
				public String RESULTDefault(){
				
					return null;
				
				}
				public String RESULTComment(){
				
				    return "";
				
				}
				public String RESULTPattern(){
				
					return "";
				
				}
				public String RESULTOriginalDbColumnName(){
				
					return "RESULT";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
						this.RESULT = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
						this.RESULT = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.RESULT,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.RESULT,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("RESULT="+String.valueOf(RESULT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row32Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row32Struct row32 = new row32Struct();




	
	/**
	 * [tBufferOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tBufferOutput_2", false);
		start_Hash.put("tBufferOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tBufferOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row32");
					}
				
		int tos_count_tBufferOutput_2 = 0;
		

 



/**
 * [tBufferOutput_2 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_6", false);
		start_Hash.put("tFixedFlowInput_6", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_6";
	
	
		int tos_count_tFixedFlowInput_6 = 0;
		

	    for (int i_tFixedFlowInput_6 = 0 ; i_tFixedFlowInput_6 < 1 ; i_tFixedFlowInput_6++) {
	                	            	
    	            		row32.RESULT = 2;
    	            	

 



/**
 * [tFixedFlowInput_6 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_6 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_6";
	
	

 


	tos_count_tFixedFlowInput_6++;

/**
 * [tFixedFlowInput_6 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_6";
	
	

 



/**
 * [tFixedFlowInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tBufferOutput_2 main ] start
	 */

	

	
	
	currentComponent="tBufferOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row32"
						
						);
					}
					



String[] row_tBufferOutput_2=new String[]{"",};		
	    if(row32.RESULT != null){
	        
	            row_tBufferOutput_2[0] = String.valueOf(row32.RESULT);
	                        			    
	    }else{
	    	row_tBufferOutput_2[0] = null;
	    }
	globalBuffer.add(row_tBufferOutput_2);	
	
 


	tos_count_tBufferOutput_2++;

/**
 * [tBufferOutput_2 main ] stop
 */
	
	/**
	 * [tBufferOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tBufferOutput_2";
	
	

 



/**
 * [tBufferOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tBufferOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_2";
	
	

 



/**
 * [tBufferOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_6";
	
	

 



/**
 * [tFixedFlowInput_6 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_6 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_6";
	
	

        }
        globalMap.put("tFixedFlowInput_6_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_6", true);
end_Hash.put("tFixedFlowInput_6", System.currentTimeMillis());




/**
 * [tFixedFlowInput_6 end ] stop
 */

	
	/**
	 * [tBufferOutput_2 end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_2";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row32");
			  	}
			  	
 

ok_Hash.put("tBufferOutput_2", true);
end_Hash.put("tBufferOutput_2", System.currentTimeMillis());




/**
 * [tBufferOutput_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_6 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_6";
	
	

 



/**
 * [tFixedFlowInput_6 finally ] stop
 */

	
	/**
	 * [tBufferOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tBufferOutput_2";
	
	

 



/**
 * [tBufferOutput_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_6_SUBPROCESS_STATE", 1);
	}
	


public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";
	
	
		int tos_count_tJava_2 = 0;
		


context.ESTADO_EXEC = "Fail";
 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());




/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	


public static class row35Struct implements routines.system.IPersistableRow<row35Struct> {
    final static byte[] commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];
    static byte[] commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];

	
			    public Integer NUMERO_ARCHIVOS;

				public Integer getNUMERO_ARCHIVOS () {
					return this.NUMERO_ARCHIVOS;
				}

				public Boolean NUMERO_ARCHIVOSIsNullable(){
				    return true;
				}
				public Boolean NUMERO_ARCHIVOSIsKey(){
				    return false;
				}
				public Integer NUMERO_ARCHIVOSLength(){
				    return 0;
				}
				public Integer NUMERO_ARCHIVOSPrecision(){
				    return 0;
				}
				public String NUMERO_ARCHIVOSDefault(){
				
					return "";
				
				}
				public String NUMERO_ARCHIVOSComment(){
				
				    return "";
				
				}
				public String NUMERO_ARCHIVOSPattern(){
				
					return "";
				
				}
				public String NUMERO_ARCHIVOSOriginalDbColumnName(){
				
					return "NUMERO_ARCHIVOS";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
						this.NUMERO_ARCHIVOS = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
						this.NUMERO_ARCHIVOS = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.NUMERO_ARCHIVOS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.NUMERO_ARCHIVOS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NUMERO_ARCHIVOS="+String.valueOf(NUMERO_ARCHIVOS));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row35Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row35Struct row35 = new row35Struct();




	
	/**
	 * [tJavaRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_5", false);
		start_Hash.put("tJavaRow_5", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row35");
					}
				
		int tos_count_tJavaRow_5 = 0;
		

int nb_line_tJavaRow_5 = 0;

 



/**
 * [tJavaRow_5 begin ] stop
 */



	
	/**
	 * [tOracleInput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_13", false);
		start_Hash.put("tOracleInput_13", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_13";
	
	
		int tos_count_tOracleInput_13 = 0;
		
	


	
		    int nb_line_tOracleInput_13 = 0;
		    java.sql.Connection conn_tOracleInput_13 = null;
				conn_tOracleInput_13 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_13 = false;
				boolean isConnectionWrapped_tOracleInput_13 = !(conn_tOracleInput_13 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_13.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_13 = null;
                if (isConnectionWrapped_tOracleInput_13) {
					unwrappedOraConn_tOracleInput_13 = conn_tOracleInput_13.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_13 != null) {
                        isTimeZoneNull_tOracleInput_13 = (unwrappedOraConn_tOracleInput_13.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_13 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_13).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_13) {
					java.sql.Statement stmtGetTZ_tOracleInput_13 = conn_tOracleInput_13.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_13 = stmtGetTZ_tOracleInput_13.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_13 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_13.next()) {
						sessionTimezone_tOracleInput_13 = rsGetTZ_tOracleInput_13.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_13 && unwrappedOraConn_tOracleInput_13 != null) {
                        unwrappedOraConn_tOracleInput_13.setSessionTimeZone(sessionTimezone_tOracleInput_13);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_13).setSessionTimeZone(sessionTimezone_tOracleInput_13);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_13 = conn_tOracleInput_13.createStatement();

		    String dbquery_tOracleInput_13 = "SELECT \n  COUNT (A.ID)  AS NUMERO_ARCHIVOS\nFROM AFI_ARCHIVOS A \nINNER JOIN AFI_TARCHIVOS AT ON AT.ID = A.TARCHIVOS_I"
+"D \nWHERE AT.CODIGO = '10'\n AND TO_CHAR (A.FECHA,'DD/MM/YYYY') = TO_CHAR (SYSDATE, 'DD/MM/YYYY')";
		    

		    globalMap.put("tOracleInput_13_QUERY",dbquery_tOracleInput_13);

		    java.sql.ResultSet rs_tOracleInput_13 = null;

		    try {
		    	rs_tOracleInput_13 = stmt_tOracleInput_13.executeQuery(dbquery_tOracleInput_13);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_13 = rs_tOracleInput_13.getMetaData();
		    	int colQtyInRs_tOracleInput_13 = rsmd_tOracleInput_13.getColumnCount();

		    String tmpContent_tOracleInput_13 = null;
		    
		    
		    while (rs_tOracleInput_13.next()) {
		        nb_line_tOracleInput_13++;
		        
							if(colQtyInRs_tOracleInput_13 < 1) {
								row35.NUMERO_ARCHIVOS = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(1) != null) {
						row35.NUMERO_ARCHIVOS = rs_tOracleInput_13.getInt(1);
					} else {
				
						row35.NUMERO_ARCHIVOS = null;
					}
		                    }
					




 



/**
 * [tOracleInput_13 begin ] stop
 */
	
	/**
	 * [tOracleInput_13 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 


	tos_count_tOracleInput_13++;

/**
 * [tOracleInput_13 main ] stop
 */
	
	/**
	 * [tOracleInput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_5 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row35"
						
						);
					}
					

    
if ( row35.NUMERO_ARCHIVOS.equals(0))
{

	context.NombreArchivoSalida = 	"NEFMS001"+TalendDate.getDate("DDMMYYYY")+".txt";
} 
else 
{
	
	context.NombreArchivoSalida = 	"NEFMS001"+TalendDate.getDate("DDMMYYYY")+"("+row35.NUMERO_ARCHIVOS.toString()+").txt";
}


System.out.println("Archivo generado: "+context.RutaSistema+"/"+context.Area+"/"+context.NombreArchivoSalida);


File archivo = new File(context.RutaSistema+"/"+context.Area+"/"+context.NombreArchivoSalida);	
OutputStreamWriter bw = new OutputStreamWriter(new FileOutputStream(archivo,true), "ISO-8859-15");	
bw.append("");
bw.close();

Numeric.resetSequence("s1",0);
    nb_line_tJavaRow_5++;   

 


	tos_count_tJavaRow_5++;

/**
 * [tJavaRow_5 main ] stop
 */
	
	/**
	 * [tJavaRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_13 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

}
}finally{
	if (rs_tOracleInput_13 != null) {
		rs_tOracleInput_13.close();
	}
	if (stmt_tOracleInput_13 != null) {
		stmt_tOracleInput_13.close();
	}
}

globalMap.put("tOracleInput_13_NB_LINE",nb_line_tOracleInput_13);
 

ok_Hash.put("tOracleInput_13", true);
end_Hash.put("tOracleInput_13", System.currentTimeMillis());




/**
 * [tOracleInput_13 end ] stop
 */

	
	/**
	 * [tJavaRow_5 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

globalMap.put("tJavaRow_5_NB_LINE",nb_line_tJavaRow_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row35");
			  	}
			  	
 

ok_Hash.put("tJavaRow_5", true);
end_Hash.put("tJavaRow_5", System.currentTimeMillis());




/**
 * [tJavaRow_5 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_13:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tOracleInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_13 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 finally ] stop
 */

	
	/**
	 * [tJavaRow_5 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_13_SUBPROCESS_STATE", 1);
	}
	


public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
    final static byte[] commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];
    static byte[] commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];

	
			    public Integer conteo;

				public Integer getConteo () {
					return this.conteo;
				}

				public Boolean conteoIsNullable(){
				    return true;
				}
				public Boolean conteoIsKey(){
				    return false;
				}
				public Integer conteoLength(){
				    return null;
				}
				public Integer conteoPrecision(){
				    return null;
				}
				public String conteoDefault(){
				
					return "";
				
				}
				public String conteoComment(){
				
				    return "";
				
				}
				public String conteoPattern(){
				
					return "";
				
				}
				public String conteoOriginalDbColumnName(){
				
					return "conteo";
				
				}

				
			    public String NOVEDAD_COD;

				public String getNOVEDAD_COD () {
					return this.NOVEDAD_COD;
				}

				public Boolean NOVEDAD_CODIsNullable(){
				    return false;
				}
				public Boolean NOVEDAD_CODIsKey(){
				    return false;
				}
				public Integer NOVEDAD_CODLength(){
				    return 5;
				}
				public Integer NOVEDAD_CODPrecision(){
				    return 0;
				}
				public String NOVEDAD_CODDefault(){
				
					return null;
				
				}
				public String NOVEDAD_CODComment(){
				
				    return "";
				
				}
				public String NOVEDAD_CODPattern(){
				
					return "";
				
				}
				public String NOVEDAD_CODOriginalDbColumnName(){
				
					return "NOVEDAD_COD";
				
				}

				
			    public String NOVEDAD_CAMP;

				public String getNOVEDAD_CAMP () {
					return this.NOVEDAD_CAMP;
				}

				public Boolean NOVEDAD_CAMPIsNullable(){
				    return true;
				}
				public Boolean NOVEDAD_CAMPIsKey(){
				    return false;
				}
				public Integer NOVEDAD_CAMPLength(){
				    return 150;
				}
				public Integer NOVEDAD_CAMPPrecision(){
				    return 0;
				}
				public String NOVEDAD_CAMPDefault(){
				
					return null;
				
				}
				public String NOVEDAD_CAMPComment(){
				
				    return "";
				
				}
				public String NOVEDAD_CAMPPattern(){
				
					return "";
				
				}
				public String NOVEDAD_CAMPOriginalDbColumnName(){
				
					return "NOVEDAD_CAMP";
				
				}

				
			    public String VANTERIOR;

				public String getVANTERIOR () {
					return this.VANTERIOR;
				}

				public Boolean VANTERIORIsNullable(){
				    return true;
				}
				public Boolean VANTERIORIsKey(){
				    return false;
				}
				public Integer VANTERIORLength(){
				    return 2000;
				}
				public Integer VANTERIORPrecision(){
				    return 0;
				}
				public String VANTERIORDefault(){
				
					return "";
				
				}
				public String VANTERIORComment(){
				
				    return "";
				
				}
				public String VANTERIORPattern(){
				
					return "";
				
				}
				public String VANTERIOROriginalDbColumnName(){
				
					return "VANTERIOR";
				
				}

				
			    public String VACTUAL;

				public String getVACTUAL () {
					return this.VACTUAL;
				}

				public Boolean VACTUALIsNullable(){
				    return true;
				}
				public Boolean VACTUALIsKey(){
				    return false;
				}
				public Integer VACTUALLength(){
				    return 2000;
				}
				public Integer VACTUALPrecision(){
				    return 0;
				}
				public String VACTUALDefault(){
				
					return "";
				
				}
				public String VACTUALComment(){
				
				    return "";
				
				}
				public String VACTUALPattern(){
				
					return "";
				
				}
				public String VACTUALOriginalDbColumnName(){
				
					return "VACTUAL";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return "";
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 100;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 100;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 100;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return "";
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 100;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String FECHA_NACIMIENTO;

				public String getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return 10;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return 0;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public String FECHA_REGISTRO;

				public String getFECHA_REGISTRO () {
					return this.FECHA_REGISTRO;
				}

				public Boolean FECHA_REGISTROIsNullable(){
				    return true;
				}
				public Boolean FECHA_REGISTROIsKey(){
				    return false;
				}
				public Integer FECHA_REGISTROLength(){
				    return 10;
				}
				public Integer FECHA_REGISTROPrecision(){
				    return 0;
				}
				public String FECHA_REGISTRODefault(){
				
					return null;
				
				}
				public String FECHA_REGISTROComment(){
				
				    return "";
				
				}
				public String FECHA_REGISTROPattern(){
				
					return "";
				
				}
				public String FECHA_REGISTROOriginalDbColumnName(){
				
					return "FECHA_REGISTRO";
				
				}

				
			    public BigDecimal ORDEN_NOVEDAD;

				public BigDecimal getORDEN_NOVEDAD () {
					return this.ORDEN_NOVEDAD;
				}

				public Boolean ORDEN_NOVEDADIsNullable(){
				    return true;
				}
				public Boolean ORDEN_NOVEDADIsKey(){
				    return false;
				}
				public Integer ORDEN_NOVEDADLength(){
				    return 0;
				}
				public Integer ORDEN_NOVEDADPrecision(){
				    return null;
				}
				public String ORDEN_NOVEDADDefault(){
				
					return "";
				
				}
				public String ORDEN_NOVEDADComment(){
				
				    return "";
				
				}
				public String ORDEN_NOVEDADPattern(){
				
					return "";
				
				}
				public String ORDEN_NOVEDADOriginalDbColumnName(){
				
					return "ORDEN_NOVEDAD";
				
				}

				
			    public BigDecimal ORDEN_CAMPO;

				public BigDecimal getORDEN_CAMPO () {
					return this.ORDEN_CAMPO;
				}

				public Boolean ORDEN_CAMPOIsNullable(){
				    return true;
				}
				public Boolean ORDEN_CAMPOIsKey(){
				    return false;
				}
				public Integer ORDEN_CAMPOLength(){
				    return 0;
				}
				public Integer ORDEN_CAMPOPrecision(){
				    return null;
				}
				public String ORDEN_CAMPODefault(){
				
					return "";
				
				}
				public String ORDEN_CAMPOComment(){
				
				    return "";
				
				}
				public String ORDEN_CAMPOPattern(){
				
					return "";
				
				}
				public String ORDEN_CAMPOOriginalDbColumnName(){
				
					return "ORDEN_CAMPO";
				
				}

				
			    public String SIGLA_TDOCUMENTO;

				public String getSIGLA_TDOCUMENTO () {
					return this.SIGLA_TDOCUMENTO;
				}

				public Boolean SIGLA_TDOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean SIGLA_TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer SIGLA_TDOCUMENTOLength(){
				    return 5;
				}
				public Integer SIGLA_TDOCUMENTOPrecision(){
				    return 0;
				}
				public String SIGLA_TDOCUMENTODefault(){
				
					return "";
				
				}
				public String SIGLA_TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String SIGLA_TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String SIGLA_TDOCUMENTOOriginalDbColumnName(){
				
					return "SIGLA_TDOCUMENTO";
				
				}

				
			    public String SIGLA_SEXO;

				public String getSIGLA_SEXO () {
					return this.SIGLA_SEXO;
				}

				public Boolean SIGLA_SEXOIsNullable(){
				    return false;
				}
				public Boolean SIGLA_SEXOIsKey(){
				    return false;
				}
				public Integer SIGLA_SEXOLength(){
				    return 1;
				}
				public Integer SIGLA_SEXOPrecision(){
				    return 0;
				}
				public String SIGLA_SEXODefault(){
				
					return "";
				
				}
				public String SIGLA_SEXOComment(){
				
				    return "";
				
				}
				public String SIGLA_SEXOPattern(){
				
					return "";
				
				}
				public String SIGLA_SEXOOriginalDbColumnName(){
				
					return "SIGLA_SEXO";
				
				}

				
			    public String DOCUMENTO_ANTERIOR;

				public String getDOCUMENTO_ANTERIOR () {
					return this.DOCUMENTO_ANTERIOR;
				}

				public Boolean DOCUMENTO_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_ANTERIORIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_ANTERIORLength(){
				    return 2000;
				}
				public Integer DOCUMENTO_ANTERIORPrecision(){
				    return 0;
				}
				public String DOCUMENTO_ANTERIORDefault(){
				
					return "";
				
				}
				public String DOCUMENTO_ANTERIORComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_ANTERIORPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_ANTERIOROriginalDbColumnName(){
				
					return "DOCUMENTO_ANTERIOR";
				
				}

				
			    public String DOCUMENTO_ACTUAL;

				public String getDOCUMENTO_ACTUAL () {
					return this.DOCUMENTO_ACTUAL;
				}

				public Boolean DOCUMENTO_ACTUALIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_ACTUALIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_ACTUALLength(){
				    return 2000;
				}
				public Integer DOCUMENTO_ACTUALPrecision(){
				    return 0;
				}
				public String DOCUMENTO_ACTUALDefault(){
				
					return "";
				
				}
				public String DOCUMENTO_ACTUALComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_ACTUALPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_ACTUALOriginalDbColumnName(){
				
					return "DOCUMENTO_ACTUAL";
				
				}

				
			    public String TDOCUMENTO_ANTERIOR;

				public String getTDOCUMENTO_ANTERIOR () {
					return this.TDOCUMENTO_ANTERIOR;
				}

				public Boolean TDOCUMENTO_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_ANTERIORIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_ANTERIORLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_ANTERIORPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_ANTERIORDefault(){
				
					return "";
				
				}
				public String TDOCUMENTO_ANTERIORComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_ANTERIORPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_ANTERIOROriginalDbColumnName(){
				
					return "TDOCUMENTO_ANTERIOR";
				
				}

				
			    public String TDOCUMENTO_ACTUAL;

				public String getTDOCUMENTO_ACTUAL () {
					return this.TDOCUMENTO_ACTUAL;
				}

				public Boolean TDOCUMENTO_ACTUALIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_ACTUALIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_ACTUALLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_ACTUALPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_ACTUALDefault(){
				
					return "";
				
				}
				public String TDOCUMENTO_ACTUALComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_ACTUALPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_ACTUALOriginalDbColumnName(){
				
					return "TDOCUMENTO_ACTUAL";
				
				}

				
			    public String PRI_NOMBRE_ANT;

				public String getPRI_NOMBRE_ANT () {
					return this.PRI_NOMBRE_ANT;
				}

				public Boolean PRI_NOMBRE_ANTIsNullable(){
				    return true;
				}
				public Boolean PRI_NOMBRE_ANTIsKey(){
				    return false;
				}
				public Integer PRI_NOMBRE_ANTLength(){
				    return null;
				}
				public Integer PRI_NOMBRE_ANTPrecision(){
				    return null;
				}
				public String PRI_NOMBRE_ANTDefault(){
				
					return "";
				
				}
				public String PRI_NOMBRE_ANTComment(){
				
				    return "";
				
				}
				public String PRI_NOMBRE_ANTPattern(){
				
					return "";
				
				}
				public String PRI_NOMBRE_ANTOriginalDbColumnName(){
				
					return "PRI_NOMBRE_ANT";
				
				}

				
			    public String SEG_NOMBRE_ANT;

				public String getSEG_NOMBRE_ANT () {
					return this.SEG_NOMBRE_ANT;
				}

				public Boolean SEG_NOMBRE_ANTIsNullable(){
				    return true;
				}
				public Boolean SEG_NOMBRE_ANTIsKey(){
				    return false;
				}
				public Integer SEG_NOMBRE_ANTLength(){
				    return null;
				}
				public Integer SEG_NOMBRE_ANTPrecision(){
				    return null;
				}
				public String SEG_NOMBRE_ANTDefault(){
				
					return "";
				
				}
				public String SEG_NOMBRE_ANTComment(){
				
				    return "";
				
				}
				public String SEG_NOMBRE_ANTPattern(){
				
					return "";
				
				}
				public String SEG_NOMBRE_ANTOriginalDbColumnName(){
				
					return "SEG_NOMBRE_ANT";
				
				}

				
			    public String PRI_APELLIDO_ANT;

				public String getPRI_APELLIDO_ANT () {
					return this.PRI_APELLIDO_ANT;
				}

				public Boolean PRI_APELLIDO_ANTIsNullable(){
				    return true;
				}
				public Boolean PRI_APELLIDO_ANTIsKey(){
				    return false;
				}
				public Integer PRI_APELLIDO_ANTLength(){
				    return null;
				}
				public Integer PRI_APELLIDO_ANTPrecision(){
				    return null;
				}
				public String PRI_APELLIDO_ANTDefault(){
				
					return "";
				
				}
				public String PRI_APELLIDO_ANTComment(){
				
				    return "";
				
				}
				public String PRI_APELLIDO_ANTPattern(){
				
					return "";
				
				}
				public String PRI_APELLIDO_ANTOriginalDbColumnName(){
				
					return "PRI_APELLIDO_ANT";
				
				}

				
			    public String SEG_APELLIDO_ANT;

				public String getSEG_APELLIDO_ANT () {
					return this.SEG_APELLIDO_ANT;
				}

				public Boolean SEG_APELLIDO_ANTIsNullable(){
				    return true;
				}
				public Boolean SEG_APELLIDO_ANTIsKey(){
				    return false;
				}
				public Integer SEG_APELLIDO_ANTLength(){
				    return null;
				}
				public Integer SEG_APELLIDO_ANTPrecision(){
				    return null;
				}
				public String SEG_APELLIDO_ANTDefault(){
				
					return "";
				
				}
				public String SEG_APELLIDO_ANTComment(){
				
				    return "";
				
				}
				public String SEG_APELLIDO_ANTPattern(){
				
					return "";
				
				}
				public String SEG_APELLIDO_ANTOriginalDbColumnName(){
				
					return "SEG_APELLIDO_ANT";
				
				}

				
			    public String FNACIMIENTO_ANT;

				public String getFNACIMIENTO_ANT () {
					return this.FNACIMIENTO_ANT;
				}

				public Boolean FNACIMIENTO_ANTIsNullable(){
				    return true;
				}
				public Boolean FNACIMIENTO_ANTIsKey(){
				    return false;
				}
				public Integer FNACIMIENTO_ANTLength(){
				    return null;
				}
				public Integer FNACIMIENTO_ANTPrecision(){
				    return null;
				}
				public String FNACIMIENTO_ANTDefault(){
				
					return "";
				
				}
				public String FNACIMIENTO_ANTComment(){
				
				    return "";
				
				}
				public String FNACIMIENTO_ANTPattern(){
				
					return "";
				
				}
				public String FNACIMIENTO_ANTOriginalDbColumnName(){
				
					return "FNACIMIENTO_ANT";
				
				}

				
			    public String TDOCUMENTO_ANT;

				public String getTDOCUMENTO_ANT () {
					return this.TDOCUMENTO_ANT;
				}

				public Boolean TDOCUMENTO_ANTIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_ANTIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_ANTLength(){
				    return null;
				}
				public Integer TDOCUMENTO_ANTPrecision(){
				    return null;
				}
				public String TDOCUMENTO_ANTDefault(){
				
					return "";
				
				}
				public String TDOCUMENTO_ANTComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_ANTPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_ANTOriginalDbColumnName(){
				
					return "TDOCUMENTO_ANT";
				
				}

				
			    public String DOCUMENTO_ANT;

				public String getDOCUMENTO_ANT () {
					return this.DOCUMENTO_ANT;
				}

				public Boolean DOCUMENTO_ANTIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_ANTIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_ANTLength(){
				    return null;
				}
				public Integer DOCUMENTO_ANTPrecision(){
				    return null;
				}
				public String DOCUMENTO_ANTDefault(){
				
					return "";
				
				}
				public String DOCUMENTO_ANTComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_ANTPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_ANTOriginalDbColumnName(){
				
					return "DOCUMENTO_ANT";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length) {
				if(length < 1024 && commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length == 0) {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[1024];
				} else {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length);
			strReturn = new String(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length) {
				if(length < 1024 && commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length == 0) {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[1024];
				} else {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length);
			strReturn = new String(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
						this.conteo = readInteger(dis);
					
					this.NOVEDAD_COD = readString(dis);
					
					this.NOVEDAD_CAMP = readString(dis);
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.FECHA_REGISTRO = readString(dis);
					
						this.ORDEN_NOVEDAD = (BigDecimal) dis.readObject();
					
						this.ORDEN_CAMPO = (BigDecimal) dis.readObject();
					
					this.SIGLA_TDOCUMENTO = readString(dis);
					
					this.SIGLA_SEXO = readString(dis);
					
					this.DOCUMENTO_ANTERIOR = readString(dis);
					
					this.DOCUMENTO_ACTUAL = readString(dis);
					
					this.TDOCUMENTO_ANTERIOR = readString(dis);
					
					this.TDOCUMENTO_ACTUAL = readString(dis);
					
					this.PRI_NOMBRE_ANT = readString(dis);
					
					this.SEG_NOMBRE_ANT = readString(dis);
					
					this.PRI_APELLIDO_ANT = readString(dis);
					
					this.SEG_APELLIDO_ANT = readString(dis);
					
					this.FNACIMIENTO_ANT = readString(dis);
					
					this.TDOCUMENTO_ANT = readString(dis);
					
					this.DOCUMENTO_ANT = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
						this.conteo = readInteger(dis);
					
					this.NOVEDAD_COD = readString(dis);
					
					this.NOVEDAD_CAMP = readString(dis);
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.FECHA_REGISTRO = readString(dis);
					
						this.ORDEN_NOVEDAD = (BigDecimal) dis.readObject();
					
						this.ORDEN_CAMPO = (BigDecimal) dis.readObject();
					
					this.SIGLA_TDOCUMENTO = readString(dis);
					
					this.SIGLA_SEXO = readString(dis);
					
					this.DOCUMENTO_ANTERIOR = readString(dis);
					
					this.DOCUMENTO_ACTUAL = readString(dis);
					
					this.TDOCUMENTO_ANTERIOR = readString(dis);
					
					this.TDOCUMENTO_ACTUAL = readString(dis);
					
					this.PRI_NOMBRE_ANT = readString(dis);
					
					this.SEG_NOMBRE_ANT = readString(dis);
					
					this.PRI_APELLIDO_ANT = readString(dis);
					
					this.SEG_APELLIDO_ANT = readString(dis);
					
					this.FNACIMIENTO_ANT = readString(dis);
					
					this.TDOCUMENTO_ANT = readString(dis);
					
					this.DOCUMENTO_ANT = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.conteo,dos);
					
					// String
				
						writeString(this.NOVEDAD_COD,dos);
					
					// String
				
						writeString(this.NOVEDAD_CAMP,dos);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.FECHA_REGISTRO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDEN_NOVEDAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDEN_CAMPO);
					
					// String
				
						writeString(this.SIGLA_TDOCUMENTO,dos);
					
					// String
				
						writeString(this.SIGLA_SEXO,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ANTERIOR,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ACTUAL,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ANTERIOR,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ACTUAL,dos);
					
					// String
				
						writeString(this.PRI_NOMBRE_ANT,dos);
					
					// String
				
						writeString(this.SEG_NOMBRE_ANT,dos);
					
					// String
				
						writeString(this.PRI_APELLIDO_ANT,dos);
					
					// String
				
						writeString(this.SEG_APELLIDO_ANT,dos);
					
					// String
				
						writeString(this.FNACIMIENTO_ANT,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ANT,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ANT,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.conteo,dos);
					
					// String
				
						writeString(this.NOVEDAD_COD,dos);
					
					// String
				
						writeString(this.NOVEDAD_CAMP,dos);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.FECHA_REGISTRO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ORDEN_NOVEDAD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ORDEN_CAMPO);
					
					// String
				
						writeString(this.SIGLA_TDOCUMENTO,dos);
					
					// String
				
						writeString(this.SIGLA_SEXO,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ANTERIOR,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ACTUAL,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ANTERIOR,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ACTUAL,dos);
					
					// String
				
						writeString(this.PRI_NOMBRE_ANT,dos);
					
					// String
				
						writeString(this.SEG_NOMBRE_ANT,dos);
					
					// String
				
						writeString(this.PRI_APELLIDO_ANT,dos);
					
					// String
				
						writeString(this.SEG_APELLIDO_ANT,dos);
					
					// String
				
						writeString(this.FNACIMIENTO_ANT,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ANT,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ANT,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("conteo="+String.valueOf(conteo));
		sb.append(",NOVEDAD_COD="+NOVEDAD_COD);
		sb.append(",NOVEDAD_CAMP="+NOVEDAD_CAMP);
		sb.append(",VANTERIOR="+VANTERIOR);
		sb.append(",VACTUAL="+VACTUAL);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",FECHA_NACIMIENTO="+FECHA_NACIMIENTO);
		sb.append(",FECHA_REGISTRO="+FECHA_REGISTRO);
		sb.append(",ORDEN_NOVEDAD="+String.valueOf(ORDEN_NOVEDAD));
		sb.append(",ORDEN_CAMPO="+String.valueOf(ORDEN_CAMPO));
		sb.append(",SIGLA_TDOCUMENTO="+SIGLA_TDOCUMENTO);
		sb.append(",SIGLA_SEXO="+SIGLA_SEXO);
		sb.append(",DOCUMENTO_ANTERIOR="+DOCUMENTO_ANTERIOR);
		sb.append(",DOCUMENTO_ACTUAL="+DOCUMENTO_ACTUAL);
		sb.append(",TDOCUMENTO_ANTERIOR="+TDOCUMENTO_ANTERIOR);
		sb.append(",TDOCUMENTO_ACTUAL="+TDOCUMENTO_ACTUAL);
		sb.append(",PRI_NOMBRE_ANT="+PRI_NOMBRE_ANT);
		sb.append(",SEG_NOMBRE_ANT="+SEG_NOMBRE_ANT);
		sb.append(",PRI_APELLIDO_ANT="+PRI_APELLIDO_ANT);
		sb.append(",SEG_APELLIDO_ANT="+SEG_APELLIDO_ANT);
		sb.append(",FNACIMIENTO_ANT="+FNACIMIENTO_ANT);
		sb.append(",TDOCUMENTO_ANT="+TDOCUMENTO_ANT);
		sb.append(",DOCUMENTO_ANT="+DOCUMENTO_ANT);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];
    static byte[] commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];

	
			    public String NOVEDAD_COD;

				public String getNOVEDAD_COD () {
					return this.NOVEDAD_COD;
				}

				public Boolean NOVEDAD_CODIsNullable(){
				    return false;
				}
				public Boolean NOVEDAD_CODIsKey(){
				    return false;
				}
				public Integer NOVEDAD_CODLength(){
				    return 5;
				}
				public Integer NOVEDAD_CODPrecision(){
				    return 0;
				}
				public String NOVEDAD_CODDefault(){
				
					return null;
				
				}
				public String NOVEDAD_CODComment(){
				
				    return "";
				
				}
				public String NOVEDAD_CODPattern(){
				
					return "";
				
				}
				public String NOVEDAD_CODOriginalDbColumnName(){
				
					return "NOVEDAD_COD";
				
				}

				
			    public String NOVEDAD_CAMP;

				public String getNOVEDAD_CAMP () {
					return this.NOVEDAD_CAMP;
				}

				public Boolean NOVEDAD_CAMPIsNullable(){
				    return true;
				}
				public Boolean NOVEDAD_CAMPIsKey(){
				    return false;
				}
				public Integer NOVEDAD_CAMPLength(){
				    return 150;
				}
				public Integer NOVEDAD_CAMPPrecision(){
				    return 0;
				}
				public String NOVEDAD_CAMPDefault(){
				
					return null;
				
				}
				public String NOVEDAD_CAMPComment(){
				
				    return "";
				
				}
				public String NOVEDAD_CAMPPattern(){
				
					return "";
				
				}
				public String NOVEDAD_CAMPOriginalDbColumnName(){
				
					return "NOVEDAD_CAMP";
				
				}

				
			    public String VANTERIOR;

				public String getVANTERIOR () {
					return this.VANTERIOR;
				}

				public Boolean VANTERIORIsNullable(){
				    return true;
				}
				public Boolean VANTERIORIsKey(){
				    return false;
				}
				public Integer VANTERIORLength(){
				    return 2000;
				}
				public Integer VANTERIORPrecision(){
				    return 0;
				}
				public String VANTERIORDefault(){
				
					return null;
				
				}
				public String VANTERIORComment(){
				
				    return "";
				
				}
				public String VANTERIORPattern(){
				
					return "";
				
				}
				public String VANTERIOROriginalDbColumnName(){
				
					return "VANTERIOR";
				
				}

				
			    public String VACTUAL;

				public String getVACTUAL () {
					return this.VACTUAL;
				}

				public Boolean VACTUALIsNullable(){
				    return true;
				}
				public Boolean VACTUALIsKey(){
				    return false;
				}
				public Integer VACTUALLength(){
				    return 2000;
				}
				public Integer VACTUALPrecision(){
				    return 0;
				}
				public String VACTUALDefault(){
				
					return null;
				
				}
				public String VACTUALComment(){
				
				    return "";
				
				}
				public String VACTUALPattern(){
				
					return "";
				
				}
				public String VACTUALOriginalDbColumnName(){
				
					return "VACTUAL";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 100;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 100;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 100;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 100;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String FECHA_NACIMIENTO;

				public String getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return 10;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return 0;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public String FECHA_REGISTRO;

				public String getFECHA_REGISTRO () {
					return this.FECHA_REGISTRO;
				}

				public Boolean FECHA_REGISTROIsNullable(){
				    return true;
				}
				public Boolean FECHA_REGISTROIsKey(){
				    return false;
				}
				public Integer FECHA_REGISTROLength(){
				    return 10;
				}
				public Integer FECHA_REGISTROPrecision(){
				    return 0;
				}
				public String FECHA_REGISTRODefault(){
				
					return null;
				
				}
				public String FECHA_REGISTROComment(){
				
				    return "";
				
				}
				public String FECHA_REGISTROPattern(){
				
					return "";
				
				}
				public String FECHA_REGISTROOriginalDbColumnName(){
				
					return "FECHA_REGISTRO";
				
				}

				
			    public BigDecimal ORDEN_NOVEDAD;

				public BigDecimal getORDEN_NOVEDAD () {
					return this.ORDEN_NOVEDAD;
				}

				public Boolean ORDEN_NOVEDADIsNullable(){
				    return true;
				}
				public Boolean ORDEN_NOVEDADIsKey(){
				    return false;
				}
				public Integer ORDEN_NOVEDADLength(){
				    return 0;
				}
				public Integer ORDEN_NOVEDADPrecision(){
				    return null;
				}
				public String ORDEN_NOVEDADDefault(){
				
					return "";
				
				}
				public String ORDEN_NOVEDADComment(){
				
				    return "";
				
				}
				public String ORDEN_NOVEDADPattern(){
				
					return "";
				
				}
				public String ORDEN_NOVEDADOriginalDbColumnName(){
				
					return "ORDEN_NOVEDAD";
				
				}

				
			    public BigDecimal ORDEN_CAMPO;

				public BigDecimal getORDEN_CAMPO () {
					return this.ORDEN_CAMPO;
				}

				public Boolean ORDEN_CAMPOIsNullable(){
				    return true;
				}
				public Boolean ORDEN_CAMPOIsKey(){
				    return false;
				}
				public Integer ORDEN_CAMPOLength(){
				    return 0;
				}
				public Integer ORDEN_CAMPOPrecision(){
				    return null;
				}
				public String ORDEN_CAMPODefault(){
				
					return "";
				
				}
				public String ORDEN_CAMPOComment(){
				
				    return "";
				
				}
				public String ORDEN_CAMPOPattern(){
				
					return "";
				
				}
				public String ORDEN_CAMPOOriginalDbColumnName(){
				
					return "ORDEN_CAMPO";
				
				}

				
			    public String SIGLA_TDOCUMENTO;

				public String getSIGLA_TDOCUMENTO () {
					return this.SIGLA_TDOCUMENTO;
				}

				public Boolean SIGLA_TDOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean SIGLA_TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer SIGLA_TDOCUMENTOLength(){
				    return 5;
				}
				public Integer SIGLA_TDOCUMENTOPrecision(){
				    return 0;
				}
				public String SIGLA_TDOCUMENTODefault(){
				
					return null;
				
				}
				public String SIGLA_TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String SIGLA_TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String SIGLA_TDOCUMENTOOriginalDbColumnName(){
				
					return "SIGLA_TDOCUMENTO";
				
				}

				
			    public String SIGLA_SEXO;

				public String getSIGLA_SEXO () {
					return this.SIGLA_SEXO;
				}

				public Boolean SIGLA_SEXOIsNullable(){
				    return false;
				}
				public Boolean SIGLA_SEXOIsKey(){
				    return false;
				}
				public Integer SIGLA_SEXOLength(){
				    return 1;
				}
				public Integer SIGLA_SEXOPrecision(){
				    return 0;
				}
				public String SIGLA_SEXODefault(){
				
					return null;
				
				}
				public String SIGLA_SEXOComment(){
				
				    return "";
				
				}
				public String SIGLA_SEXOPattern(){
				
					return "";
				
				}
				public String SIGLA_SEXOOriginalDbColumnName(){
				
					return "SIGLA_SEXO";
				
				}

				
			    public String DOCUMENTO_ANTERIOR;

				public String getDOCUMENTO_ANTERIOR () {
					return this.DOCUMENTO_ANTERIOR;
				}

				public Boolean DOCUMENTO_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_ANTERIORIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_ANTERIORLength(){
				    return 2000;
				}
				public Integer DOCUMENTO_ANTERIORPrecision(){
				    return 0;
				}
				public String DOCUMENTO_ANTERIORDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_ANTERIORComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_ANTERIORPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_ANTERIOROriginalDbColumnName(){
				
					return "DOCUMENTO_ANTERIOR";
				
				}

				
			    public String DOCUMENTO_ACTUAL;

				public String getDOCUMENTO_ACTUAL () {
					return this.DOCUMENTO_ACTUAL;
				}

				public Boolean DOCUMENTO_ACTUALIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_ACTUALIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_ACTUALLength(){
				    return 2000;
				}
				public Integer DOCUMENTO_ACTUALPrecision(){
				    return 0;
				}
				public String DOCUMENTO_ACTUALDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_ACTUALComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_ACTUALPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_ACTUALOriginalDbColumnName(){
				
					return "DOCUMENTO_ACTUAL";
				
				}

				
			    public String TDOCUMENTO_ANTERIOR;

				public String getTDOCUMENTO_ANTERIOR () {
					return this.TDOCUMENTO_ANTERIOR;
				}

				public Boolean TDOCUMENTO_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_ANTERIORIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_ANTERIORLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_ANTERIORPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_ANTERIORDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_ANTERIORComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_ANTERIORPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_ANTERIOROriginalDbColumnName(){
				
					return "TDOCUMENTO_ANTERIOR";
				
				}

				
			    public String TDOCUMENTO_ACTUAL;

				public String getTDOCUMENTO_ACTUAL () {
					return this.TDOCUMENTO_ACTUAL;
				}

				public Boolean TDOCUMENTO_ACTUALIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_ACTUALIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_ACTUALLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_ACTUALPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_ACTUALDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_ACTUALComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_ACTUALPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_ACTUALOriginalDbColumnName(){
				
					return "TDOCUMENTO_ACTUAL";
				
				}

				
			    public BigDecimal AFILIADO_ID;

				public BigDecimal getAFILIADO_ID () {
					return this.AFILIADO_ID;
				}

				public Boolean AFILIADO_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADO_IDIsKey(){
				    return false;
				}
				public Integer AFILIADO_IDLength(){
				    return 0;
				}
				public Integer AFILIADO_IDPrecision(){
				    return null;
				}
				public String AFILIADO_IDDefault(){
				
					return "";
				
				}
				public String AFILIADO_IDComment(){
				
				    return "";
				
				}
				public String AFILIADO_IDPattern(){
				
					return "";
				
				}
				public String AFILIADO_IDOriginalDbColumnName(){
				
					return "AFILIADO_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length) {
				if(length < 1024 && commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length == 0) {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[1024];
				} else {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length);
			strReturn = new String(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length) {
				if(length < 1024 && commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length == 0) {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[1024];
				} else {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length);
			strReturn = new String(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
					this.NOVEDAD_COD = readString(dis);
					
					this.NOVEDAD_CAMP = readString(dis);
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.FECHA_REGISTRO = readString(dis);
					
						this.ORDEN_NOVEDAD = (BigDecimal) dis.readObject();
					
						this.ORDEN_CAMPO = (BigDecimal) dis.readObject();
					
					this.SIGLA_TDOCUMENTO = readString(dis);
					
					this.SIGLA_SEXO = readString(dis);
					
					this.DOCUMENTO_ANTERIOR = readString(dis);
					
					this.DOCUMENTO_ACTUAL = readString(dis);
					
					this.TDOCUMENTO_ANTERIOR = readString(dis);
					
					this.TDOCUMENTO_ACTUAL = readString(dis);
					
						this.AFILIADO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
					this.NOVEDAD_COD = readString(dis);
					
					this.NOVEDAD_CAMP = readString(dis);
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.FECHA_REGISTRO = readString(dis);
					
						this.ORDEN_NOVEDAD = (BigDecimal) dis.readObject();
					
						this.ORDEN_CAMPO = (BigDecimal) dis.readObject();
					
					this.SIGLA_TDOCUMENTO = readString(dis);
					
					this.SIGLA_SEXO = readString(dis);
					
					this.DOCUMENTO_ANTERIOR = readString(dis);
					
					this.DOCUMENTO_ACTUAL = readString(dis);
					
					this.TDOCUMENTO_ANTERIOR = readString(dis);
					
					this.TDOCUMENTO_ACTUAL = readString(dis);
					
						this.AFILIADO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NOVEDAD_COD,dos);
					
					// String
				
						writeString(this.NOVEDAD_CAMP,dos);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.FECHA_REGISTRO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDEN_NOVEDAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDEN_CAMPO);
					
					// String
				
						writeString(this.SIGLA_TDOCUMENTO,dos);
					
					// String
				
						writeString(this.SIGLA_SEXO,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ANTERIOR,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ACTUAL,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ANTERIOR,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ACTUAL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.AFILIADO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NOVEDAD_COD,dos);
					
					// String
				
						writeString(this.NOVEDAD_CAMP,dos);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.FECHA_REGISTRO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ORDEN_NOVEDAD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ORDEN_CAMPO);
					
					// String
				
						writeString(this.SIGLA_TDOCUMENTO,dos);
					
					// String
				
						writeString(this.SIGLA_SEXO,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ANTERIOR,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ACTUAL,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ANTERIOR,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ACTUAL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AFILIADO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NOVEDAD_COD="+NOVEDAD_COD);
		sb.append(",NOVEDAD_CAMP="+NOVEDAD_CAMP);
		sb.append(",VANTERIOR="+VANTERIOR);
		sb.append(",VACTUAL="+VACTUAL);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",FECHA_NACIMIENTO="+FECHA_NACIMIENTO);
		sb.append(",FECHA_REGISTRO="+FECHA_REGISTRO);
		sb.append(",ORDEN_NOVEDAD="+String.valueOf(ORDEN_NOVEDAD));
		sb.append(",ORDEN_CAMPO="+String.valueOf(ORDEN_CAMPO));
		sb.append(",SIGLA_TDOCUMENTO="+SIGLA_TDOCUMENTO);
		sb.append(",SIGLA_SEXO="+SIGLA_SEXO);
		sb.append(",DOCUMENTO_ANTERIOR="+DOCUMENTO_ANTERIOR);
		sb.append(",DOCUMENTO_ACTUAL="+DOCUMENTO_ACTUAL);
		sb.append(",TDOCUMENTO_ANTERIOR="+TDOCUMENTO_ANTERIOR);
		sb.append(",TDOCUMENTO_ACTUAL="+TDOCUMENTO_ACTUAL);
		sb.append(",AFILIADO_ID="+String.valueOf(AFILIADO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtSortRow_2 implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_2> {
    final static byte[] commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];
    static byte[] commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];

	
			    public String NOVEDAD_COD;

				public String getNOVEDAD_COD () {
					return this.NOVEDAD_COD;
				}

				public Boolean NOVEDAD_CODIsNullable(){
				    return false;
				}
				public Boolean NOVEDAD_CODIsKey(){
				    return false;
				}
				public Integer NOVEDAD_CODLength(){
				    return 5;
				}
				public Integer NOVEDAD_CODPrecision(){
				    return 0;
				}
				public String NOVEDAD_CODDefault(){
				
					return null;
				
				}
				public String NOVEDAD_CODComment(){
				
				    return "";
				
				}
				public String NOVEDAD_CODPattern(){
				
					return "";
				
				}
				public String NOVEDAD_CODOriginalDbColumnName(){
				
					return "NOVEDAD_COD";
				
				}

				
			    public String NOVEDAD_CAMP;

				public String getNOVEDAD_CAMP () {
					return this.NOVEDAD_CAMP;
				}

				public Boolean NOVEDAD_CAMPIsNullable(){
				    return true;
				}
				public Boolean NOVEDAD_CAMPIsKey(){
				    return false;
				}
				public Integer NOVEDAD_CAMPLength(){
				    return 150;
				}
				public Integer NOVEDAD_CAMPPrecision(){
				    return 0;
				}
				public String NOVEDAD_CAMPDefault(){
				
					return null;
				
				}
				public String NOVEDAD_CAMPComment(){
				
				    return "";
				
				}
				public String NOVEDAD_CAMPPattern(){
				
					return "";
				
				}
				public String NOVEDAD_CAMPOriginalDbColumnName(){
				
					return "NOVEDAD_CAMP";
				
				}

				
			    public String VANTERIOR;

				public String getVANTERIOR () {
					return this.VANTERIOR;
				}

				public Boolean VANTERIORIsNullable(){
				    return true;
				}
				public Boolean VANTERIORIsKey(){
				    return false;
				}
				public Integer VANTERIORLength(){
				    return 2000;
				}
				public Integer VANTERIORPrecision(){
				    return 0;
				}
				public String VANTERIORDefault(){
				
					return null;
				
				}
				public String VANTERIORComment(){
				
				    return "";
				
				}
				public String VANTERIORPattern(){
				
					return "";
				
				}
				public String VANTERIOROriginalDbColumnName(){
				
					return "VANTERIOR";
				
				}

				
			    public String VACTUAL;

				public String getVACTUAL () {
					return this.VACTUAL;
				}

				public Boolean VACTUALIsNullable(){
				    return true;
				}
				public Boolean VACTUALIsKey(){
				    return false;
				}
				public Integer VACTUALLength(){
				    return 2000;
				}
				public Integer VACTUALPrecision(){
				    return 0;
				}
				public String VACTUALDefault(){
				
					return null;
				
				}
				public String VACTUALComment(){
				
				    return "";
				
				}
				public String VACTUALPattern(){
				
					return "";
				
				}
				public String VACTUALOriginalDbColumnName(){
				
					return "VACTUAL";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 100;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 100;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 100;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 100;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String FECHA_NACIMIENTO;

				public String getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return 10;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return 0;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public String FECHA_REGISTRO;

				public String getFECHA_REGISTRO () {
					return this.FECHA_REGISTRO;
				}

				public Boolean FECHA_REGISTROIsNullable(){
				    return true;
				}
				public Boolean FECHA_REGISTROIsKey(){
				    return false;
				}
				public Integer FECHA_REGISTROLength(){
				    return 10;
				}
				public Integer FECHA_REGISTROPrecision(){
				    return 0;
				}
				public String FECHA_REGISTRODefault(){
				
					return null;
				
				}
				public String FECHA_REGISTROComment(){
				
				    return "";
				
				}
				public String FECHA_REGISTROPattern(){
				
					return "";
				
				}
				public String FECHA_REGISTROOriginalDbColumnName(){
				
					return "FECHA_REGISTRO";
				
				}

				
			    public BigDecimal ORDEN_NOVEDAD;

				public BigDecimal getORDEN_NOVEDAD () {
					return this.ORDEN_NOVEDAD;
				}

				public Boolean ORDEN_NOVEDADIsNullable(){
				    return true;
				}
				public Boolean ORDEN_NOVEDADIsKey(){
				    return false;
				}
				public Integer ORDEN_NOVEDADLength(){
				    return 0;
				}
				public Integer ORDEN_NOVEDADPrecision(){
				    return null;
				}
				public String ORDEN_NOVEDADDefault(){
				
					return "";
				
				}
				public String ORDEN_NOVEDADComment(){
				
				    return "";
				
				}
				public String ORDEN_NOVEDADPattern(){
				
					return "";
				
				}
				public String ORDEN_NOVEDADOriginalDbColumnName(){
				
					return "ORDEN_NOVEDAD";
				
				}

				
			    public BigDecimal ORDEN_CAMPO;

				public BigDecimal getORDEN_CAMPO () {
					return this.ORDEN_CAMPO;
				}

				public Boolean ORDEN_CAMPOIsNullable(){
				    return true;
				}
				public Boolean ORDEN_CAMPOIsKey(){
				    return false;
				}
				public Integer ORDEN_CAMPOLength(){
				    return 0;
				}
				public Integer ORDEN_CAMPOPrecision(){
				    return null;
				}
				public String ORDEN_CAMPODefault(){
				
					return "";
				
				}
				public String ORDEN_CAMPOComment(){
				
				    return "";
				
				}
				public String ORDEN_CAMPOPattern(){
				
					return "";
				
				}
				public String ORDEN_CAMPOOriginalDbColumnName(){
				
					return "ORDEN_CAMPO";
				
				}

				
			    public String SIGLA_TDOCUMENTO;

				public String getSIGLA_TDOCUMENTO () {
					return this.SIGLA_TDOCUMENTO;
				}

				public Boolean SIGLA_TDOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean SIGLA_TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer SIGLA_TDOCUMENTOLength(){
				    return 5;
				}
				public Integer SIGLA_TDOCUMENTOPrecision(){
				    return 0;
				}
				public String SIGLA_TDOCUMENTODefault(){
				
					return null;
				
				}
				public String SIGLA_TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String SIGLA_TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String SIGLA_TDOCUMENTOOriginalDbColumnName(){
				
					return "SIGLA_TDOCUMENTO";
				
				}

				
			    public String SIGLA_SEXO;

				public String getSIGLA_SEXO () {
					return this.SIGLA_SEXO;
				}

				public Boolean SIGLA_SEXOIsNullable(){
				    return false;
				}
				public Boolean SIGLA_SEXOIsKey(){
				    return false;
				}
				public Integer SIGLA_SEXOLength(){
				    return 1;
				}
				public Integer SIGLA_SEXOPrecision(){
				    return 0;
				}
				public String SIGLA_SEXODefault(){
				
					return null;
				
				}
				public String SIGLA_SEXOComment(){
				
				    return "";
				
				}
				public String SIGLA_SEXOPattern(){
				
					return "";
				
				}
				public String SIGLA_SEXOOriginalDbColumnName(){
				
					return "SIGLA_SEXO";
				
				}

				
			    public String DOCUMENTO_ANTERIOR;

				public String getDOCUMENTO_ANTERIOR () {
					return this.DOCUMENTO_ANTERIOR;
				}

				public Boolean DOCUMENTO_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_ANTERIORIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_ANTERIORLength(){
				    return 2000;
				}
				public Integer DOCUMENTO_ANTERIORPrecision(){
				    return 0;
				}
				public String DOCUMENTO_ANTERIORDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_ANTERIORComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_ANTERIORPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_ANTERIOROriginalDbColumnName(){
				
					return "DOCUMENTO_ANTERIOR";
				
				}

				
			    public String DOCUMENTO_ACTUAL;

				public String getDOCUMENTO_ACTUAL () {
					return this.DOCUMENTO_ACTUAL;
				}

				public Boolean DOCUMENTO_ACTUALIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_ACTUALIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_ACTUALLength(){
				    return 2000;
				}
				public Integer DOCUMENTO_ACTUALPrecision(){
				    return 0;
				}
				public String DOCUMENTO_ACTUALDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_ACTUALComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_ACTUALPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_ACTUALOriginalDbColumnName(){
				
					return "DOCUMENTO_ACTUAL";
				
				}

				
			    public String TDOCUMENTO_ANTERIOR;

				public String getTDOCUMENTO_ANTERIOR () {
					return this.TDOCUMENTO_ANTERIOR;
				}

				public Boolean TDOCUMENTO_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_ANTERIORIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_ANTERIORLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_ANTERIORPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_ANTERIORDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_ANTERIORComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_ANTERIORPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_ANTERIOROriginalDbColumnName(){
				
					return "TDOCUMENTO_ANTERIOR";
				
				}

				
			    public String TDOCUMENTO_ACTUAL;

				public String getTDOCUMENTO_ACTUAL () {
					return this.TDOCUMENTO_ACTUAL;
				}

				public Boolean TDOCUMENTO_ACTUALIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_ACTUALIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_ACTUALLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_ACTUALPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_ACTUALDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_ACTUALComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_ACTUALPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_ACTUALOriginalDbColumnName(){
				
					return "TDOCUMENTO_ACTUAL";
				
				}

				
			    public BigDecimal AFILIADO_ID;

				public BigDecimal getAFILIADO_ID () {
					return this.AFILIADO_ID;
				}

				public Boolean AFILIADO_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADO_IDIsKey(){
				    return false;
				}
				public Integer AFILIADO_IDLength(){
				    return 0;
				}
				public Integer AFILIADO_IDPrecision(){
				    return null;
				}
				public String AFILIADO_IDDefault(){
				
					return "";
				
				}
				public String AFILIADO_IDComment(){
				
				    return "";
				
				}
				public String AFILIADO_IDPattern(){
				
					return "";
				
				}
				public String AFILIADO_IDOriginalDbColumnName(){
				
					return "AFILIADO_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length) {
				if(length < 1024 && commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length == 0) {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[1024];
				} else {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length);
			strReturn = new String(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length) {
				if(length < 1024 && commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length == 0) {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[1024];
				} else {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length);
			strReturn = new String(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
					this.NOVEDAD_COD = readString(dis);
					
					this.NOVEDAD_CAMP = readString(dis);
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.FECHA_REGISTRO = readString(dis);
					
						this.ORDEN_NOVEDAD = (BigDecimal) dis.readObject();
					
						this.ORDEN_CAMPO = (BigDecimal) dis.readObject();
					
					this.SIGLA_TDOCUMENTO = readString(dis);
					
					this.SIGLA_SEXO = readString(dis);
					
					this.DOCUMENTO_ANTERIOR = readString(dis);
					
					this.DOCUMENTO_ACTUAL = readString(dis);
					
					this.TDOCUMENTO_ANTERIOR = readString(dis);
					
					this.TDOCUMENTO_ACTUAL = readString(dis);
					
						this.AFILIADO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
					this.NOVEDAD_COD = readString(dis);
					
					this.NOVEDAD_CAMP = readString(dis);
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.FECHA_REGISTRO = readString(dis);
					
						this.ORDEN_NOVEDAD = (BigDecimal) dis.readObject();
					
						this.ORDEN_CAMPO = (BigDecimal) dis.readObject();
					
					this.SIGLA_TDOCUMENTO = readString(dis);
					
					this.SIGLA_SEXO = readString(dis);
					
					this.DOCUMENTO_ANTERIOR = readString(dis);
					
					this.DOCUMENTO_ACTUAL = readString(dis);
					
					this.TDOCUMENTO_ANTERIOR = readString(dis);
					
					this.TDOCUMENTO_ACTUAL = readString(dis);
					
						this.AFILIADO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NOVEDAD_COD,dos);
					
					// String
				
						writeString(this.NOVEDAD_CAMP,dos);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.FECHA_REGISTRO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDEN_NOVEDAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDEN_CAMPO);
					
					// String
				
						writeString(this.SIGLA_TDOCUMENTO,dos);
					
					// String
				
						writeString(this.SIGLA_SEXO,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ANTERIOR,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ACTUAL,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ANTERIOR,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ACTUAL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.AFILIADO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NOVEDAD_COD,dos);
					
					// String
				
						writeString(this.NOVEDAD_CAMP,dos);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.FECHA_REGISTRO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ORDEN_NOVEDAD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ORDEN_CAMPO);
					
					// String
				
						writeString(this.SIGLA_TDOCUMENTO,dos);
					
					// String
				
						writeString(this.SIGLA_SEXO,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ANTERIOR,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ACTUAL,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ANTERIOR,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ACTUAL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AFILIADO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NOVEDAD_COD="+NOVEDAD_COD);
		sb.append(",NOVEDAD_CAMP="+NOVEDAD_CAMP);
		sb.append(",VANTERIOR="+VANTERIOR);
		sb.append(",VACTUAL="+VACTUAL);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",FECHA_NACIMIENTO="+FECHA_NACIMIENTO);
		sb.append(",FECHA_REGISTRO="+FECHA_REGISTRO);
		sb.append(",ORDEN_NOVEDAD="+String.valueOf(ORDEN_NOVEDAD));
		sb.append(",ORDEN_CAMPO="+String.valueOf(ORDEN_CAMPO));
		sb.append(",SIGLA_TDOCUMENTO="+SIGLA_TDOCUMENTO);
		sb.append(",SIGLA_SEXO="+SIGLA_SEXO);
		sb.append(",DOCUMENTO_ANTERIOR="+DOCUMENTO_ANTERIOR);
		sb.append(",DOCUMENTO_ACTUAL="+DOCUMENTO_ACTUAL);
		sb.append(",TDOCUMENTO_ANTERIOR="+TDOCUMENTO_ANTERIOR);
		sb.append(",TDOCUMENTO_ACTUAL="+TDOCUMENTO_ACTUAL);
		sb.append(",AFILIADO_ID="+String.valueOf(AFILIADO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtSortRow_2 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];
    static byte[] commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];

	
			    public String NOVEDAD_COD;

				public String getNOVEDAD_COD () {
					return this.NOVEDAD_COD;
				}

				public Boolean NOVEDAD_CODIsNullable(){
				    return false;
				}
				public Boolean NOVEDAD_CODIsKey(){
				    return false;
				}
				public Integer NOVEDAD_CODLength(){
				    return 5;
				}
				public Integer NOVEDAD_CODPrecision(){
				    return 0;
				}
				public String NOVEDAD_CODDefault(){
				
					return null;
				
				}
				public String NOVEDAD_CODComment(){
				
				    return "";
				
				}
				public String NOVEDAD_CODPattern(){
				
					return "";
				
				}
				public String NOVEDAD_CODOriginalDbColumnName(){
				
					return "NOVEDAD_COD";
				
				}

				
			    public String NOVEDAD_CAMP;

				public String getNOVEDAD_CAMP () {
					return this.NOVEDAD_CAMP;
				}

				public Boolean NOVEDAD_CAMPIsNullable(){
				    return true;
				}
				public Boolean NOVEDAD_CAMPIsKey(){
				    return false;
				}
				public Integer NOVEDAD_CAMPLength(){
				    return 150;
				}
				public Integer NOVEDAD_CAMPPrecision(){
				    return 0;
				}
				public String NOVEDAD_CAMPDefault(){
				
					return null;
				
				}
				public String NOVEDAD_CAMPComment(){
				
				    return "";
				
				}
				public String NOVEDAD_CAMPPattern(){
				
					return "";
				
				}
				public String NOVEDAD_CAMPOriginalDbColumnName(){
				
					return "NOVEDAD_CAMP";
				
				}

				
			    public String VANTERIOR;

				public String getVANTERIOR () {
					return this.VANTERIOR;
				}

				public Boolean VANTERIORIsNullable(){
				    return true;
				}
				public Boolean VANTERIORIsKey(){
				    return false;
				}
				public Integer VANTERIORLength(){
				    return 2000;
				}
				public Integer VANTERIORPrecision(){
				    return 0;
				}
				public String VANTERIORDefault(){
				
					return null;
				
				}
				public String VANTERIORComment(){
				
				    return "";
				
				}
				public String VANTERIORPattern(){
				
					return "";
				
				}
				public String VANTERIOROriginalDbColumnName(){
				
					return "VANTERIOR";
				
				}

				
			    public String VACTUAL;

				public String getVACTUAL () {
					return this.VACTUAL;
				}

				public Boolean VACTUALIsNullable(){
				    return true;
				}
				public Boolean VACTUALIsKey(){
				    return false;
				}
				public Integer VACTUALLength(){
				    return 2000;
				}
				public Integer VACTUALPrecision(){
				    return 0;
				}
				public String VACTUALDefault(){
				
					return null;
				
				}
				public String VACTUALComment(){
				
				    return "";
				
				}
				public String VACTUALPattern(){
				
					return "";
				
				}
				public String VACTUALOriginalDbColumnName(){
				
					return "VACTUAL";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 100;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 100;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 100;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 100;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String FECHA_NACIMIENTO;

				public String getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return 10;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return 0;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public String FECHA_REGISTRO;

				public String getFECHA_REGISTRO () {
					return this.FECHA_REGISTRO;
				}

				public Boolean FECHA_REGISTROIsNullable(){
				    return true;
				}
				public Boolean FECHA_REGISTROIsKey(){
				    return false;
				}
				public Integer FECHA_REGISTROLength(){
				    return 10;
				}
				public Integer FECHA_REGISTROPrecision(){
				    return 0;
				}
				public String FECHA_REGISTRODefault(){
				
					return null;
				
				}
				public String FECHA_REGISTROComment(){
				
				    return "";
				
				}
				public String FECHA_REGISTROPattern(){
				
					return "";
				
				}
				public String FECHA_REGISTROOriginalDbColumnName(){
				
					return "FECHA_REGISTRO";
				
				}

				
			    public BigDecimal ORDEN_NOVEDAD;

				public BigDecimal getORDEN_NOVEDAD () {
					return this.ORDEN_NOVEDAD;
				}

				public Boolean ORDEN_NOVEDADIsNullable(){
				    return true;
				}
				public Boolean ORDEN_NOVEDADIsKey(){
				    return false;
				}
				public Integer ORDEN_NOVEDADLength(){
				    return 0;
				}
				public Integer ORDEN_NOVEDADPrecision(){
				    return null;
				}
				public String ORDEN_NOVEDADDefault(){
				
					return "";
				
				}
				public String ORDEN_NOVEDADComment(){
				
				    return "";
				
				}
				public String ORDEN_NOVEDADPattern(){
				
					return "";
				
				}
				public String ORDEN_NOVEDADOriginalDbColumnName(){
				
					return "ORDEN_NOVEDAD";
				
				}

				
			    public BigDecimal ORDEN_CAMPO;

				public BigDecimal getORDEN_CAMPO () {
					return this.ORDEN_CAMPO;
				}

				public Boolean ORDEN_CAMPOIsNullable(){
				    return true;
				}
				public Boolean ORDEN_CAMPOIsKey(){
				    return false;
				}
				public Integer ORDEN_CAMPOLength(){
				    return 0;
				}
				public Integer ORDEN_CAMPOPrecision(){
				    return null;
				}
				public String ORDEN_CAMPODefault(){
				
					return "";
				
				}
				public String ORDEN_CAMPOComment(){
				
				    return "";
				
				}
				public String ORDEN_CAMPOPattern(){
				
					return "";
				
				}
				public String ORDEN_CAMPOOriginalDbColumnName(){
				
					return "ORDEN_CAMPO";
				
				}

				
			    public String SIGLA_TDOCUMENTO;

				public String getSIGLA_TDOCUMENTO () {
					return this.SIGLA_TDOCUMENTO;
				}

				public Boolean SIGLA_TDOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean SIGLA_TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer SIGLA_TDOCUMENTOLength(){
				    return 5;
				}
				public Integer SIGLA_TDOCUMENTOPrecision(){
				    return 0;
				}
				public String SIGLA_TDOCUMENTODefault(){
				
					return null;
				
				}
				public String SIGLA_TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String SIGLA_TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String SIGLA_TDOCUMENTOOriginalDbColumnName(){
				
					return "SIGLA_TDOCUMENTO";
				
				}

				
			    public String SIGLA_SEXO;

				public String getSIGLA_SEXO () {
					return this.SIGLA_SEXO;
				}

				public Boolean SIGLA_SEXOIsNullable(){
				    return false;
				}
				public Boolean SIGLA_SEXOIsKey(){
				    return false;
				}
				public Integer SIGLA_SEXOLength(){
				    return 1;
				}
				public Integer SIGLA_SEXOPrecision(){
				    return 0;
				}
				public String SIGLA_SEXODefault(){
				
					return null;
				
				}
				public String SIGLA_SEXOComment(){
				
				    return "";
				
				}
				public String SIGLA_SEXOPattern(){
				
					return "";
				
				}
				public String SIGLA_SEXOOriginalDbColumnName(){
				
					return "SIGLA_SEXO";
				
				}

				
			    public String DOCUMENTO_ANTERIOR;

				public String getDOCUMENTO_ANTERIOR () {
					return this.DOCUMENTO_ANTERIOR;
				}

				public Boolean DOCUMENTO_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_ANTERIORIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_ANTERIORLength(){
				    return 2000;
				}
				public Integer DOCUMENTO_ANTERIORPrecision(){
				    return 0;
				}
				public String DOCUMENTO_ANTERIORDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_ANTERIORComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_ANTERIORPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_ANTERIOROriginalDbColumnName(){
				
					return "DOCUMENTO_ANTERIOR";
				
				}

				
			    public String DOCUMENTO_ACTUAL;

				public String getDOCUMENTO_ACTUAL () {
					return this.DOCUMENTO_ACTUAL;
				}

				public Boolean DOCUMENTO_ACTUALIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_ACTUALIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_ACTUALLength(){
				    return 2000;
				}
				public Integer DOCUMENTO_ACTUALPrecision(){
				    return 0;
				}
				public String DOCUMENTO_ACTUALDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_ACTUALComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_ACTUALPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_ACTUALOriginalDbColumnName(){
				
					return "DOCUMENTO_ACTUAL";
				
				}

				
			    public String TDOCUMENTO_ANTERIOR;

				public String getTDOCUMENTO_ANTERIOR () {
					return this.TDOCUMENTO_ANTERIOR;
				}

				public Boolean TDOCUMENTO_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_ANTERIORIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_ANTERIORLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_ANTERIORPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_ANTERIORDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_ANTERIORComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_ANTERIORPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_ANTERIOROriginalDbColumnName(){
				
					return "TDOCUMENTO_ANTERIOR";
				
				}

				
			    public String TDOCUMENTO_ACTUAL;

				public String getTDOCUMENTO_ACTUAL () {
					return this.TDOCUMENTO_ACTUAL;
				}

				public Boolean TDOCUMENTO_ACTUALIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_ACTUALIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_ACTUALLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_ACTUALPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_ACTUALDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_ACTUALComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_ACTUALPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_ACTUALOriginalDbColumnName(){
				
					return "TDOCUMENTO_ACTUAL";
				
				}

				
			    public BigDecimal AFILIADO_ID;

				public BigDecimal getAFILIADO_ID () {
					return this.AFILIADO_ID;
				}

				public Boolean AFILIADO_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADO_IDIsKey(){
				    return false;
				}
				public Integer AFILIADO_IDLength(){
				    return 0;
				}
				public Integer AFILIADO_IDPrecision(){
				    return null;
				}
				public String AFILIADO_IDDefault(){
				
					return "";
				
				}
				public String AFILIADO_IDComment(){
				
				    return "";
				
				}
				public String AFILIADO_IDPattern(){
				
					return "";
				
				}
				public String AFILIADO_IDOriginalDbColumnName(){
				
					return "AFILIADO_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length) {
				if(length < 1024 && commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length == 0) {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[1024];
				} else {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length);
			strReturn = new String(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length) {
				if(length < 1024 && commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length == 0) {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[1024];
				} else {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length);
			strReturn = new String(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
					this.NOVEDAD_COD = readString(dis);
					
					this.NOVEDAD_CAMP = readString(dis);
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.FECHA_REGISTRO = readString(dis);
					
						this.ORDEN_NOVEDAD = (BigDecimal) dis.readObject();
					
						this.ORDEN_CAMPO = (BigDecimal) dis.readObject();
					
					this.SIGLA_TDOCUMENTO = readString(dis);
					
					this.SIGLA_SEXO = readString(dis);
					
					this.DOCUMENTO_ANTERIOR = readString(dis);
					
					this.DOCUMENTO_ACTUAL = readString(dis);
					
					this.TDOCUMENTO_ANTERIOR = readString(dis);
					
					this.TDOCUMENTO_ACTUAL = readString(dis);
					
						this.AFILIADO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
					this.NOVEDAD_COD = readString(dis);
					
					this.NOVEDAD_CAMP = readString(dis);
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.FECHA_REGISTRO = readString(dis);
					
						this.ORDEN_NOVEDAD = (BigDecimal) dis.readObject();
					
						this.ORDEN_CAMPO = (BigDecimal) dis.readObject();
					
					this.SIGLA_TDOCUMENTO = readString(dis);
					
					this.SIGLA_SEXO = readString(dis);
					
					this.DOCUMENTO_ANTERIOR = readString(dis);
					
					this.DOCUMENTO_ACTUAL = readString(dis);
					
					this.TDOCUMENTO_ANTERIOR = readString(dis);
					
					this.TDOCUMENTO_ACTUAL = readString(dis);
					
						this.AFILIADO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NOVEDAD_COD,dos);
					
					// String
				
						writeString(this.NOVEDAD_CAMP,dos);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.FECHA_REGISTRO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDEN_NOVEDAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDEN_CAMPO);
					
					// String
				
						writeString(this.SIGLA_TDOCUMENTO,dos);
					
					// String
				
						writeString(this.SIGLA_SEXO,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ANTERIOR,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ACTUAL,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ANTERIOR,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ACTUAL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.AFILIADO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NOVEDAD_COD,dos);
					
					// String
				
						writeString(this.NOVEDAD_CAMP,dos);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.FECHA_REGISTRO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ORDEN_NOVEDAD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ORDEN_CAMPO);
					
					// String
				
						writeString(this.SIGLA_TDOCUMENTO,dos);
					
					// String
				
						writeString(this.SIGLA_SEXO,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ANTERIOR,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ACTUAL,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ANTERIOR,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ACTUAL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AFILIADO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NOVEDAD_COD="+NOVEDAD_COD);
		sb.append(",NOVEDAD_CAMP="+NOVEDAD_CAMP);
		sb.append(",VANTERIOR="+VANTERIOR);
		sb.append(",VACTUAL="+VACTUAL);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",FECHA_NACIMIENTO="+FECHA_NACIMIENTO);
		sb.append(",FECHA_REGISTRO="+FECHA_REGISTRO);
		sb.append(",ORDEN_NOVEDAD="+String.valueOf(ORDEN_NOVEDAD));
		sb.append(",ORDEN_CAMPO="+String.valueOf(ORDEN_CAMPO));
		sb.append(",SIGLA_TDOCUMENTO="+SIGLA_TDOCUMENTO);
		sb.append(",SIGLA_SEXO="+SIGLA_SEXO);
		sb.append(",DOCUMENTO_ANTERIOR="+DOCUMENTO_ANTERIOR);
		sb.append(",DOCUMENTO_ACTUAL="+DOCUMENTO_ACTUAL);
		sb.append(",TDOCUMENTO_ANTERIOR="+TDOCUMENTO_ANTERIOR);
		sb.append(",TDOCUMENTO_ACTUAL="+TDOCUMENTO_ACTUAL);
		sb.append(",AFILIADO_ID="+String.valueOf(AFILIADO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
    final static byte[] commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];
    static byte[] commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];

	
			    public String NOVEDAD_COD;

				public String getNOVEDAD_COD () {
					return this.NOVEDAD_COD;
				}

				public Boolean NOVEDAD_CODIsNullable(){
				    return false;
				}
				public Boolean NOVEDAD_CODIsKey(){
				    return false;
				}
				public Integer NOVEDAD_CODLength(){
				    return 5;
				}
				public Integer NOVEDAD_CODPrecision(){
				    return 0;
				}
				public String NOVEDAD_CODDefault(){
				
					return null;
				
				}
				public String NOVEDAD_CODComment(){
				
				    return "";
				
				}
				public String NOVEDAD_CODPattern(){
				
					return "";
				
				}
				public String NOVEDAD_CODOriginalDbColumnName(){
				
					return "NOVEDAD_COD";
				
				}

				
			    public String NOVEDAD_CAMP;

				public String getNOVEDAD_CAMP () {
					return this.NOVEDAD_CAMP;
				}

				public Boolean NOVEDAD_CAMPIsNullable(){
				    return true;
				}
				public Boolean NOVEDAD_CAMPIsKey(){
				    return false;
				}
				public Integer NOVEDAD_CAMPLength(){
				    return 150;
				}
				public Integer NOVEDAD_CAMPPrecision(){
				    return 0;
				}
				public String NOVEDAD_CAMPDefault(){
				
					return null;
				
				}
				public String NOVEDAD_CAMPComment(){
				
				    return "";
				
				}
				public String NOVEDAD_CAMPPattern(){
				
					return "";
				
				}
				public String NOVEDAD_CAMPOriginalDbColumnName(){
				
					return "NOVEDAD_CAMP";
				
				}

				
			    public String VANTERIOR;

				public String getVANTERIOR () {
					return this.VANTERIOR;
				}

				public Boolean VANTERIORIsNullable(){
				    return true;
				}
				public Boolean VANTERIORIsKey(){
				    return false;
				}
				public Integer VANTERIORLength(){
				    return 2000;
				}
				public Integer VANTERIORPrecision(){
				    return 0;
				}
				public String VANTERIORDefault(){
				
					return null;
				
				}
				public String VANTERIORComment(){
				
				    return "";
				
				}
				public String VANTERIORPattern(){
				
					return "";
				
				}
				public String VANTERIOROriginalDbColumnName(){
				
					return "VANTERIOR";
				
				}

				
			    public String VACTUAL;

				public String getVACTUAL () {
					return this.VACTUAL;
				}

				public Boolean VACTUALIsNullable(){
				    return true;
				}
				public Boolean VACTUALIsKey(){
				    return false;
				}
				public Integer VACTUALLength(){
				    return 2000;
				}
				public Integer VACTUALPrecision(){
				    return 0;
				}
				public String VACTUALDefault(){
				
					return null;
				
				}
				public String VACTUALComment(){
				
				    return "";
				
				}
				public String VACTUALPattern(){
				
					return "";
				
				}
				public String VACTUALOriginalDbColumnName(){
				
					return "VACTUAL";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 100;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 100;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 100;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 100;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String FECHA_NACIMIENTO;

				public String getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return 10;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return 0;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public String FECHA_REGISTRO;

				public String getFECHA_REGISTRO () {
					return this.FECHA_REGISTRO;
				}

				public Boolean FECHA_REGISTROIsNullable(){
				    return true;
				}
				public Boolean FECHA_REGISTROIsKey(){
				    return false;
				}
				public Integer FECHA_REGISTROLength(){
				    return 10;
				}
				public Integer FECHA_REGISTROPrecision(){
				    return 0;
				}
				public String FECHA_REGISTRODefault(){
				
					return null;
				
				}
				public String FECHA_REGISTROComment(){
				
				    return "";
				
				}
				public String FECHA_REGISTROPattern(){
				
					return "";
				
				}
				public String FECHA_REGISTROOriginalDbColumnName(){
				
					return "FECHA_REGISTRO";
				
				}

				
			    public BigDecimal ORDEN_NOVEDAD;

				public BigDecimal getORDEN_NOVEDAD () {
					return this.ORDEN_NOVEDAD;
				}

				public Boolean ORDEN_NOVEDADIsNullable(){
				    return true;
				}
				public Boolean ORDEN_NOVEDADIsKey(){
				    return false;
				}
				public Integer ORDEN_NOVEDADLength(){
				    return 0;
				}
				public Integer ORDEN_NOVEDADPrecision(){
				    return null;
				}
				public String ORDEN_NOVEDADDefault(){
				
					return "";
				
				}
				public String ORDEN_NOVEDADComment(){
				
				    return "";
				
				}
				public String ORDEN_NOVEDADPattern(){
				
					return "";
				
				}
				public String ORDEN_NOVEDADOriginalDbColumnName(){
				
					return "ORDEN_NOVEDAD";
				
				}

				
			    public BigDecimal ORDEN_CAMPO;

				public BigDecimal getORDEN_CAMPO () {
					return this.ORDEN_CAMPO;
				}

				public Boolean ORDEN_CAMPOIsNullable(){
				    return true;
				}
				public Boolean ORDEN_CAMPOIsKey(){
				    return false;
				}
				public Integer ORDEN_CAMPOLength(){
				    return 0;
				}
				public Integer ORDEN_CAMPOPrecision(){
				    return null;
				}
				public String ORDEN_CAMPODefault(){
				
					return "";
				
				}
				public String ORDEN_CAMPOComment(){
				
				    return "";
				
				}
				public String ORDEN_CAMPOPattern(){
				
					return "";
				
				}
				public String ORDEN_CAMPOOriginalDbColumnName(){
				
					return "ORDEN_CAMPO";
				
				}

				
			    public String SIGLA_TDOCUMENTO;

				public String getSIGLA_TDOCUMENTO () {
					return this.SIGLA_TDOCUMENTO;
				}

				public Boolean SIGLA_TDOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean SIGLA_TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer SIGLA_TDOCUMENTOLength(){
				    return 5;
				}
				public Integer SIGLA_TDOCUMENTOPrecision(){
				    return 0;
				}
				public String SIGLA_TDOCUMENTODefault(){
				
					return null;
				
				}
				public String SIGLA_TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String SIGLA_TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String SIGLA_TDOCUMENTOOriginalDbColumnName(){
				
					return "SIGLA_TDOCUMENTO";
				
				}

				
			    public String SIGLA_SEXO;

				public String getSIGLA_SEXO () {
					return this.SIGLA_SEXO;
				}

				public Boolean SIGLA_SEXOIsNullable(){
				    return false;
				}
				public Boolean SIGLA_SEXOIsKey(){
				    return false;
				}
				public Integer SIGLA_SEXOLength(){
				    return 1;
				}
				public Integer SIGLA_SEXOPrecision(){
				    return 0;
				}
				public String SIGLA_SEXODefault(){
				
					return null;
				
				}
				public String SIGLA_SEXOComment(){
				
				    return "";
				
				}
				public String SIGLA_SEXOPattern(){
				
					return "";
				
				}
				public String SIGLA_SEXOOriginalDbColumnName(){
				
					return "SIGLA_SEXO";
				
				}

				
			    public String DOCUMENTO_ANTERIOR;

				public String getDOCUMENTO_ANTERIOR () {
					return this.DOCUMENTO_ANTERIOR;
				}

				public Boolean DOCUMENTO_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_ANTERIORIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_ANTERIORLength(){
				    return 2000;
				}
				public Integer DOCUMENTO_ANTERIORPrecision(){
				    return 0;
				}
				public String DOCUMENTO_ANTERIORDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_ANTERIORComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_ANTERIORPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_ANTERIOROriginalDbColumnName(){
				
					return "DOCUMENTO_ANTERIOR";
				
				}

				
			    public String DOCUMENTO_ACTUAL;

				public String getDOCUMENTO_ACTUAL () {
					return this.DOCUMENTO_ACTUAL;
				}

				public Boolean DOCUMENTO_ACTUALIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_ACTUALIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_ACTUALLength(){
				    return 2000;
				}
				public Integer DOCUMENTO_ACTUALPrecision(){
				    return 0;
				}
				public String DOCUMENTO_ACTUALDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_ACTUALComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_ACTUALPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_ACTUALOriginalDbColumnName(){
				
					return "DOCUMENTO_ACTUAL";
				
				}

				
			    public String TDOCUMENTO_ANTERIOR;

				public String getTDOCUMENTO_ANTERIOR () {
					return this.TDOCUMENTO_ANTERIOR;
				}

				public Boolean TDOCUMENTO_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_ANTERIORIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_ANTERIORLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_ANTERIORPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_ANTERIORDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_ANTERIORComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_ANTERIORPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_ANTERIOROriginalDbColumnName(){
				
					return "TDOCUMENTO_ANTERIOR";
				
				}

				
			    public String TDOCUMENTO_ACTUAL;

				public String getTDOCUMENTO_ACTUAL () {
					return this.TDOCUMENTO_ACTUAL;
				}

				public Boolean TDOCUMENTO_ACTUALIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_ACTUALIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_ACTUALLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_ACTUALPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_ACTUALDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_ACTUALComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_ACTUALPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_ACTUALOriginalDbColumnName(){
				
					return "TDOCUMENTO_ACTUAL";
				
				}

				
			    public BigDecimal AFILIADO_ID;

				public BigDecimal getAFILIADO_ID () {
					return this.AFILIADO_ID;
				}

				public Boolean AFILIADO_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADO_IDIsKey(){
				    return false;
				}
				public Integer AFILIADO_IDLength(){
				    return 0;
				}
				public Integer AFILIADO_IDPrecision(){
				    return null;
				}
				public String AFILIADO_IDDefault(){
				
					return "";
				
				}
				public String AFILIADO_IDComment(){
				
				    return "";
				
				}
				public String AFILIADO_IDPattern(){
				
					return "";
				
				}
				public String AFILIADO_IDOriginalDbColumnName(){
				
					return "AFILIADO_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length) {
				if(length < 1024 && commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length == 0) {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[1024];
				} else {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length);
			strReturn = new String(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length) {
				if(length < 1024 && commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length == 0) {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[1024];
				} else {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length);
			strReturn = new String(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
					this.NOVEDAD_COD = readString(dis);
					
					this.NOVEDAD_CAMP = readString(dis);
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.FECHA_REGISTRO = readString(dis);
					
						this.ORDEN_NOVEDAD = (BigDecimal) dis.readObject();
					
						this.ORDEN_CAMPO = (BigDecimal) dis.readObject();
					
					this.SIGLA_TDOCUMENTO = readString(dis);
					
					this.SIGLA_SEXO = readString(dis);
					
					this.DOCUMENTO_ANTERIOR = readString(dis);
					
					this.DOCUMENTO_ACTUAL = readString(dis);
					
					this.TDOCUMENTO_ANTERIOR = readString(dis);
					
					this.TDOCUMENTO_ACTUAL = readString(dis);
					
						this.AFILIADO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
					this.NOVEDAD_COD = readString(dis);
					
					this.NOVEDAD_CAMP = readString(dis);
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.FECHA_REGISTRO = readString(dis);
					
						this.ORDEN_NOVEDAD = (BigDecimal) dis.readObject();
					
						this.ORDEN_CAMPO = (BigDecimal) dis.readObject();
					
					this.SIGLA_TDOCUMENTO = readString(dis);
					
					this.SIGLA_SEXO = readString(dis);
					
					this.DOCUMENTO_ANTERIOR = readString(dis);
					
					this.DOCUMENTO_ACTUAL = readString(dis);
					
					this.TDOCUMENTO_ANTERIOR = readString(dis);
					
					this.TDOCUMENTO_ACTUAL = readString(dis);
					
						this.AFILIADO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NOVEDAD_COD,dos);
					
					// String
				
						writeString(this.NOVEDAD_CAMP,dos);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.FECHA_REGISTRO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDEN_NOVEDAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDEN_CAMPO);
					
					// String
				
						writeString(this.SIGLA_TDOCUMENTO,dos);
					
					// String
				
						writeString(this.SIGLA_SEXO,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ANTERIOR,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ACTUAL,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ANTERIOR,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ACTUAL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.AFILIADO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NOVEDAD_COD,dos);
					
					// String
				
						writeString(this.NOVEDAD_CAMP,dos);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.FECHA_REGISTRO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ORDEN_NOVEDAD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ORDEN_CAMPO);
					
					// String
				
						writeString(this.SIGLA_TDOCUMENTO,dos);
					
					// String
				
						writeString(this.SIGLA_SEXO,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ANTERIOR,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ACTUAL,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ANTERIOR,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ACTUAL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AFILIADO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NOVEDAD_COD="+NOVEDAD_COD);
		sb.append(",NOVEDAD_CAMP="+NOVEDAD_CAMP);
		sb.append(",VANTERIOR="+VANTERIOR);
		sb.append(",VACTUAL="+VACTUAL);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",FECHA_NACIMIENTO="+FECHA_NACIMIENTO);
		sb.append(",FECHA_REGISTRO="+FECHA_REGISTRO);
		sb.append(",ORDEN_NOVEDAD="+String.valueOf(ORDEN_NOVEDAD));
		sb.append(",ORDEN_CAMPO="+String.valueOf(ORDEN_CAMPO));
		sb.append(",SIGLA_TDOCUMENTO="+SIGLA_TDOCUMENTO);
		sb.append(",SIGLA_SEXO="+SIGLA_SEXO);
		sb.append(",DOCUMENTO_ANTERIOR="+DOCUMENTO_ANTERIOR);
		sb.append(",DOCUMENTO_ACTUAL="+DOCUMENTO_ACTUAL);
		sb.append(",TDOCUMENTO_ANTERIOR="+TDOCUMENTO_ANTERIOR);
		sb.append(",TDOCUMENTO_ACTUAL="+TDOCUMENTO_ACTUAL);
		sb.append(",AFILIADO_ID="+String.valueOf(AFILIADO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfout6Struct implements routines.system.IPersistableRow<copyOfout6Struct> {
    final static byte[] commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];
    static byte[] commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];

	
			    public String NOVEDAD_COD;

				public String getNOVEDAD_COD () {
					return this.NOVEDAD_COD;
				}

				public Boolean NOVEDAD_CODIsNullable(){
				    return false;
				}
				public Boolean NOVEDAD_CODIsKey(){
				    return false;
				}
				public Integer NOVEDAD_CODLength(){
				    return 5;
				}
				public Integer NOVEDAD_CODPrecision(){
				    return 0;
				}
				public String NOVEDAD_CODDefault(){
				
					return null;
				
				}
				public String NOVEDAD_CODComment(){
				
				    return "";
				
				}
				public String NOVEDAD_CODPattern(){
				
					return "";
				
				}
				public String NOVEDAD_CODOriginalDbColumnName(){
				
					return "NOVEDAD_COD";
				
				}

				
			    public String NOVEDAD_CAMP;

				public String getNOVEDAD_CAMP () {
					return this.NOVEDAD_CAMP;
				}

				public Boolean NOVEDAD_CAMPIsNullable(){
				    return true;
				}
				public Boolean NOVEDAD_CAMPIsKey(){
				    return false;
				}
				public Integer NOVEDAD_CAMPLength(){
				    return 150;
				}
				public Integer NOVEDAD_CAMPPrecision(){
				    return 0;
				}
				public String NOVEDAD_CAMPDefault(){
				
					return null;
				
				}
				public String NOVEDAD_CAMPComment(){
				
				    return "";
				
				}
				public String NOVEDAD_CAMPPattern(){
				
					return "";
				
				}
				public String NOVEDAD_CAMPOriginalDbColumnName(){
				
					return "NOVEDAD_CAMP";
				
				}

				
			    public String VANTERIOR;

				public String getVANTERIOR () {
					return this.VANTERIOR;
				}

				public Boolean VANTERIORIsNullable(){
				    return true;
				}
				public Boolean VANTERIORIsKey(){
				    return false;
				}
				public Integer VANTERIORLength(){
				    return 2000;
				}
				public Integer VANTERIORPrecision(){
				    return 0;
				}
				public String VANTERIORDefault(){
				
					return null;
				
				}
				public String VANTERIORComment(){
				
				    return "";
				
				}
				public String VANTERIORPattern(){
				
					return "";
				
				}
				public String VANTERIOROriginalDbColumnName(){
				
					return "VANTERIOR";
				
				}

				
			    public String VACTUAL;

				public String getVACTUAL () {
					return this.VACTUAL;
				}

				public Boolean VACTUALIsNullable(){
				    return true;
				}
				public Boolean VACTUALIsKey(){
				    return false;
				}
				public Integer VACTUALLength(){
				    return 2000;
				}
				public Integer VACTUALPrecision(){
				    return 0;
				}
				public String VACTUALDefault(){
				
					return null;
				
				}
				public String VACTUALComment(){
				
				    return "";
				
				}
				public String VACTUALPattern(){
				
					return "";
				
				}
				public String VACTUALOriginalDbColumnName(){
				
					return "VACTUAL";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 100;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 100;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 100;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 100;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String FECHA_NACIMIENTO;

				public String getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return 10;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return 0;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public String FECHA_REGISTRO;

				public String getFECHA_REGISTRO () {
					return this.FECHA_REGISTRO;
				}

				public Boolean FECHA_REGISTROIsNullable(){
				    return true;
				}
				public Boolean FECHA_REGISTROIsKey(){
				    return false;
				}
				public Integer FECHA_REGISTROLength(){
				    return 10;
				}
				public Integer FECHA_REGISTROPrecision(){
				    return 0;
				}
				public String FECHA_REGISTRODefault(){
				
					return null;
				
				}
				public String FECHA_REGISTROComment(){
				
				    return "";
				
				}
				public String FECHA_REGISTROPattern(){
				
					return "";
				
				}
				public String FECHA_REGISTROOriginalDbColumnName(){
				
					return "FECHA_REGISTRO";
				
				}

				
			    public BigDecimal ORDEN_NOVEDAD;

				public BigDecimal getORDEN_NOVEDAD () {
					return this.ORDEN_NOVEDAD;
				}

				public Boolean ORDEN_NOVEDADIsNullable(){
				    return true;
				}
				public Boolean ORDEN_NOVEDADIsKey(){
				    return false;
				}
				public Integer ORDEN_NOVEDADLength(){
				    return 0;
				}
				public Integer ORDEN_NOVEDADPrecision(){
				    return null;
				}
				public String ORDEN_NOVEDADDefault(){
				
					return "";
				
				}
				public String ORDEN_NOVEDADComment(){
				
				    return "";
				
				}
				public String ORDEN_NOVEDADPattern(){
				
					return "";
				
				}
				public String ORDEN_NOVEDADOriginalDbColumnName(){
				
					return "ORDEN_NOVEDAD";
				
				}

				
			    public BigDecimal ORDEN_CAMPO;

				public BigDecimal getORDEN_CAMPO () {
					return this.ORDEN_CAMPO;
				}

				public Boolean ORDEN_CAMPOIsNullable(){
				    return true;
				}
				public Boolean ORDEN_CAMPOIsKey(){
				    return false;
				}
				public Integer ORDEN_CAMPOLength(){
				    return 0;
				}
				public Integer ORDEN_CAMPOPrecision(){
				    return null;
				}
				public String ORDEN_CAMPODefault(){
				
					return "";
				
				}
				public String ORDEN_CAMPOComment(){
				
				    return "";
				
				}
				public String ORDEN_CAMPOPattern(){
				
					return "";
				
				}
				public String ORDEN_CAMPOOriginalDbColumnName(){
				
					return "ORDEN_CAMPO";
				
				}

				
			    public String SIGLA_TDOCUMENTO;

				public String getSIGLA_TDOCUMENTO () {
					return this.SIGLA_TDOCUMENTO;
				}

				public Boolean SIGLA_TDOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean SIGLA_TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer SIGLA_TDOCUMENTOLength(){
				    return 5;
				}
				public Integer SIGLA_TDOCUMENTOPrecision(){
				    return 0;
				}
				public String SIGLA_TDOCUMENTODefault(){
				
					return null;
				
				}
				public String SIGLA_TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String SIGLA_TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String SIGLA_TDOCUMENTOOriginalDbColumnName(){
				
					return "SIGLA_TDOCUMENTO";
				
				}

				
			    public String SIGLA_SEXO;

				public String getSIGLA_SEXO () {
					return this.SIGLA_SEXO;
				}

				public Boolean SIGLA_SEXOIsNullable(){
				    return false;
				}
				public Boolean SIGLA_SEXOIsKey(){
				    return false;
				}
				public Integer SIGLA_SEXOLength(){
				    return 1;
				}
				public Integer SIGLA_SEXOPrecision(){
				    return 0;
				}
				public String SIGLA_SEXODefault(){
				
					return null;
				
				}
				public String SIGLA_SEXOComment(){
				
				    return "";
				
				}
				public String SIGLA_SEXOPattern(){
				
					return "";
				
				}
				public String SIGLA_SEXOOriginalDbColumnName(){
				
					return "SIGLA_SEXO";
				
				}

				
			    public String DOCUMENTO_ANTERIOR;

				public String getDOCUMENTO_ANTERIOR () {
					return this.DOCUMENTO_ANTERIOR;
				}

				public Boolean DOCUMENTO_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_ANTERIORIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_ANTERIORLength(){
				    return 2000;
				}
				public Integer DOCUMENTO_ANTERIORPrecision(){
				    return 0;
				}
				public String DOCUMENTO_ANTERIORDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_ANTERIORComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_ANTERIORPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_ANTERIOROriginalDbColumnName(){
				
					return "DOCUMENTO_ANTERIOR";
				
				}

				
			    public String DOCUMENTO_ACTUAL;

				public String getDOCUMENTO_ACTUAL () {
					return this.DOCUMENTO_ACTUAL;
				}

				public Boolean DOCUMENTO_ACTUALIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_ACTUALIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_ACTUALLength(){
				    return 2000;
				}
				public Integer DOCUMENTO_ACTUALPrecision(){
				    return 0;
				}
				public String DOCUMENTO_ACTUALDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_ACTUALComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_ACTUALPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_ACTUALOriginalDbColumnName(){
				
					return "DOCUMENTO_ACTUAL";
				
				}

				
			    public String TDOCUMENTO_ANTERIOR;

				public String getTDOCUMENTO_ANTERIOR () {
					return this.TDOCUMENTO_ANTERIOR;
				}

				public Boolean TDOCUMENTO_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_ANTERIORIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_ANTERIORLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_ANTERIORPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_ANTERIORDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_ANTERIORComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_ANTERIORPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_ANTERIOROriginalDbColumnName(){
				
					return "TDOCUMENTO_ANTERIOR";
				
				}

				
			    public String TDOCUMENTO_ACTUAL;

				public String getTDOCUMENTO_ACTUAL () {
					return this.TDOCUMENTO_ACTUAL;
				}

				public Boolean TDOCUMENTO_ACTUALIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_ACTUALIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_ACTUALLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_ACTUALPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_ACTUALDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_ACTUALComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_ACTUALPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_ACTUALOriginalDbColumnName(){
				
					return "TDOCUMENTO_ACTUAL";
				
				}

				
			    public BigDecimal AFILIADO_ID;

				public BigDecimal getAFILIADO_ID () {
					return this.AFILIADO_ID;
				}

				public Boolean AFILIADO_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADO_IDIsKey(){
				    return false;
				}
				public Integer AFILIADO_IDLength(){
				    return 0;
				}
				public Integer AFILIADO_IDPrecision(){
				    return null;
				}
				public String AFILIADO_IDDefault(){
				
					return "";
				
				}
				public String AFILIADO_IDComment(){
				
				    return "";
				
				}
				public String AFILIADO_IDPattern(){
				
					return "";
				
				}
				public String AFILIADO_IDOriginalDbColumnName(){
				
					return "AFILIADO_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length) {
				if(length < 1024 && commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length == 0) {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[1024];
				} else {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length);
			strReturn = new String(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length) {
				if(length < 1024 && commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length == 0) {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[1024];
				} else {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length);
			strReturn = new String(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
					this.NOVEDAD_COD = readString(dis);
					
					this.NOVEDAD_CAMP = readString(dis);
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.FECHA_REGISTRO = readString(dis);
					
						this.ORDEN_NOVEDAD = (BigDecimal) dis.readObject();
					
						this.ORDEN_CAMPO = (BigDecimal) dis.readObject();
					
					this.SIGLA_TDOCUMENTO = readString(dis);
					
					this.SIGLA_SEXO = readString(dis);
					
					this.DOCUMENTO_ANTERIOR = readString(dis);
					
					this.DOCUMENTO_ACTUAL = readString(dis);
					
					this.TDOCUMENTO_ANTERIOR = readString(dis);
					
					this.TDOCUMENTO_ACTUAL = readString(dis);
					
						this.AFILIADO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
					this.NOVEDAD_COD = readString(dis);
					
					this.NOVEDAD_CAMP = readString(dis);
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.FECHA_REGISTRO = readString(dis);
					
						this.ORDEN_NOVEDAD = (BigDecimal) dis.readObject();
					
						this.ORDEN_CAMPO = (BigDecimal) dis.readObject();
					
					this.SIGLA_TDOCUMENTO = readString(dis);
					
					this.SIGLA_SEXO = readString(dis);
					
					this.DOCUMENTO_ANTERIOR = readString(dis);
					
					this.DOCUMENTO_ACTUAL = readString(dis);
					
					this.TDOCUMENTO_ANTERIOR = readString(dis);
					
					this.TDOCUMENTO_ACTUAL = readString(dis);
					
						this.AFILIADO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NOVEDAD_COD,dos);
					
					// String
				
						writeString(this.NOVEDAD_CAMP,dos);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.FECHA_REGISTRO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDEN_NOVEDAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDEN_CAMPO);
					
					// String
				
						writeString(this.SIGLA_TDOCUMENTO,dos);
					
					// String
				
						writeString(this.SIGLA_SEXO,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ANTERIOR,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ACTUAL,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ANTERIOR,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ACTUAL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.AFILIADO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NOVEDAD_COD,dos);
					
					// String
				
						writeString(this.NOVEDAD_CAMP,dos);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.FECHA_REGISTRO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ORDEN_NOVEDAD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ORDEN_CAMPO);
					
					// String
				
						writeString(this.SIGLA_TDOCUMENTO,dos);
					
					// String
				
						writeString(this.SIGLA_SEXO,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ANTERIOR,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ACTUAL,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ANTERIOR,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ACTUAL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AFILIADO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NOVEDAD_COD="+NOVEDAD_COD);
		sb.append(",NOVEDAD_CAMP="+NOVEDAD_CAMP);
		sb.append(",VANTERIOR="+VANTERIOR);
		sb.append(",VACTUAL="+VACTUAL);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",FECHA_NACIMIENTO="+FECHA_NACIMIENTO);
		sb.append(",FECHA_REGISTRO="+FECHA_REGISTRO);
		sb.append(",ORDEN_NOVEDAD="+String.valueOf(ORDEN_NOVEDAD));
		sb.append(",ORDEN_CAMPO="+String.valueOf(ORDEN_CAMPO));
		sb.append(",SIGLA_TDOCUMENTO="+SIGLA_TDOCUMENTO);
		sb.append(",SIGLA_SEXO="+SIGLA_SEXO);
		sb.append(",DOCUMENTO_ANTERIOR="+DOCUMENTO_ANTERIOR);
		sb.append(",DOCUMENTO_ACTUAL="+DOCUMENTO_ACTUAL);
		sb.append(",TDOCUMENTO_ANTERIOR="+TDOCUMENTO_ANTERIOR);
		sb.append(",TDOCUMENTO_ACTUAL="+TDOCUMENTO_ACTUAL);
		sb.append(",AFILIADO_ID="+String.valueOf(AFILIADO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfout6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out7Struct implements routines.system.IPersistableRow<out7Struct> {
    final static byte[] commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];
    static byte[] commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];

	
			    public String NOVEDAD_COD;

				public String getNOVEDAD_COD () {
					return this.NOVEDAD_COD;
				}

				public Boolean NOVEDAD_CODIsNullable(){
				    return false;
				}
				public Boolean NOVEDAD_CODIsKey(){
				    return false;
				}
				public Integer NOVEDAD_CODLength(){
				    return 5;
				}
				public Integer NOVEDAD_CODPrecision(){
				    return 0;
				}
				public String NOVEDAD_CODDefault(){
				
					return null;
				
				}
				public String NOVEDAD_CODComment(){
				
				    return "";
				
				}
				public String NOVEDAD_CODPattern(){
				
					return "";
				
				}
				public String NOVEDAD_CODOriginalDbColumnName(){
				
					return "NOVEDAD_COD";
				
				}

				
			    public String NOVEDAD_CAMP;

				public String getNOVEDAD_CAMP () {
					return this.NOVEDAD_CAMP;
				}

				public Boolean NOVEDAD_CAMPIsNullable(){
				    return true;
				}
				public Boolean NOVEDAD_CAMPIsKey(){
				    return false;
				}
				public Integer NOVEDAD_CAMPLength(){
				    return 150;
				}
				public Integer NOVEDAD_CAMPPrecision(){
				    return 0;
				}
				public String NOVEDAD_CAMPDefault(){
				
					return null;
				
				}
				public String NOVEDAD_CAMPComment(){
				
				    return "";
				
				}
				public String NOVEDAD_CAMPPattern(){
				
					return "";
				
				}
				public String NOVEDAD_CAMPOriginalDbColumnName(){
				
					return "NOVEDAD_CAMP";
				
				}

				
			    public String VANTERIOR;

				public String getVANTERIOR () {
					return this.VANTERIOR;
				}

				public Boolean VANTERIORIsNullable(){
				    return true;
				}
				public Boolean VANTERIORIsKey(){
				    return false;
				}
				public Integer VANTERIORLength(){
				    return 2000;
				}
				public Integer VANTERIORPrecision(){
				    return 0;
				}
				public String VANTERIORDefault(){
				
					return null;
				
				}
				public String VANTERIORComment(){
				
				    return "";
				
				}
				public String VANTERIORPattern(){
				
					return "";
				
				}
				public String VANTERIOROriginalDbColumnName(){
				
					return "VANTERIOR";
				
				}

				
			    public String VACTUAL;

				public String getVACTUAL () {
					return this.VACTUAL;
				}

				public Boolean VACTUALIsNullable(){
				    return true;
				}
				public Boolean VACTUALIsKey(){
				    return false;
				}
				public Integer VACTUALLength(){
				    return 2000;
				}
				public Integer VACTUALPrecision(){
				    return 0;
				}
				public String VACTUALDefault(){
				
					return null;
				
				}
				public String VACTUALComment(){
				
				    return "";
				
				}
				public String VACTUALPattern(){
				
					return "";
				
				}
				public String VACTUALOriginalDbColumnName(){
				
					return "VACTUAL";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 100;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 100;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 100;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 100;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String FECHA_NACIMIENTO;

				public String getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return 10;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return 0;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public String FECHA_REGISTRO;

				public String getFECHA_REGISTRO () {
					return this.FECHA_REGISTRO;
				}

				public Boolean FECHA_REGISTROIsNullable(){
				    return true;
				}
				public Boolean FECHA_REGISTROIsKey(){
				    return false;
				}
				public Integer FECHA_REGISTROLength(){
				    return 10;
				}
				public Integer FECHA_REGISTROPrecision(){
				    return 0;
				}
				public String FECHA_REGISTRODefault(){
				
					return null;
				
				}
				public String FECHA_REGISTROComment(){
				
				    return "";
				
				}
				public String FECHA_REGISTROPattern(){
				
					return "";
				
				}
				public String FECHA_REGISTROOriginalDbColumnName(){
				
					return "FECHA_REGISTRO";
				
				}

				
			    public BigDecimal ORDEN_NOVEDAD;

				public BigDecimal getORDEN_NOVEDAD () {
					return this.ORDEN_NOVEDAD;
				}

				public Boolean ORDEN_NOVEDADIsNullable(){
				    return true;
				}
				public Boolean ORDEN_NOVEDADIsKey(){
				    return false;
				}
				public Integer ORDEN_NOVEDADLength(){
				    return 0;
				}
				public Integer ORDEN_NOVEDADPrecision(){
				    return null;
				}
				public String ORDEN_NOVEDADDefault(){
				
					return "";
				
				}
				public String ORDEN_NOVEDADComment(){
				
				    return "";
				
				}
				public String ORDEN_NOVEDADPattern(){
				
					return "";
				
				}
				public String ORDEN_NOVEDADOriginalDbColumnName(){
				
					return "ORDEN_NOVEDAD";
				
				}

				
			    public BigDecimal ORDEN_CAMPO;

				public BigDecimal getORDEN_CAMPO () {
					return this.ORDEN_CAMPO;
				}

				public Boolean ORDEN_CAMPOIsNullable(){
				    return true;
				}
				public Boolean ORDEN_CAMPOIsKey(){
				    return false;
				}
				public Integer ORDEN_CAMPOLength(){
				    return 0;
				}
				public Integer ORDEN_CAMPOPrecision(){
				    return null;
				}
				public String ORDEN_CAMPODefault(){
				
					return "";
				
				}
				public String ORDEN_CAMPOComment(){
				
				    return "";
				
				}
				public String ORDEN_CAMPOPattern(){
				
					return "";
				
				}
				public String ORDEN_CAMPOOriginalDbColumnName(){
				
					return "ORDEN_CAMPO";
				
				}

				
			    public String SIGLA_TDOCUMENTO;

				public String getSIGLA_TDOCUMENTO () {
					return this.SIGLA_TDOCUMENTO;
				}

				public Boolean SIGLA_TDOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean SIGLA_TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer SIGLA_TDOCUMENTOLength(){
				    return 5;
				}
				public Integer SIGLA_TDOCUMENTOPrecision(){
				    return 0;
				}
				public String SIGLA_TDOCUMENTODefault(){
				
					return null;
				
				}
				public String SIGLA_TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String SIGLA_TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String SIGLA_TDOCUMENTOOriginalDbColumnName(){
				
					return "SIGLA_TDOCUMENTO";
				
				}

				
			    public String SIGLA_SEXO;

				public String getSIGLA_SEXO () {
					return this.SIGLA_SEXO;
				}

				public Boolean SIGLA_SEXOIsNullable(){
				    return false;
				}
				public Boolean SIGLA_SEXOIsKey(){
				    return false;
				}
				public Integer SIGLA_SEXOLength(){
				    return 1;
				}
				public Integer SIGLA_SEXOPrecision(){
				    return 0;
				}
				public String SIGLA_SEXODefault(){
				
					return null;
				
				}
				public String SIGLA_SEXOComment(){
				
				    return "";
				
				}
				public String SIGLA_SEXOPattern(){
				
					return "";
				
				}
				public String SIGLA_SEXOOriginalDbColumnName(){
				
					return "SIGLA_SEXO";
				
				}

				
			    public String DOCUMENTO_ANTERIOR;

				public String getDOCUMENTO_ANTERIOR () {
					return this.DOCUMENTO_ANTERIOR;
				}

				public Boolean DOCUMENTO_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_ANTERIORIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_ANTERIORLength(){
				    return 2000;
				}
				public Integer DOCUMENTO_ANTERIORPrecision(){
				    return 0;
				}
				public String DOCUMENTO_ANTERIORDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_ANTERIORComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_ANTERIORPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_ANTERIOROriginalDbColumnName(){
				
					return "DOCUMENTO_ANTERIOR";
				
				}

				
			    public String DOCUMENTO_ACTUAL;

				public String getDOCUMENTO_ACTUAL () {
					return this.DOCUMENTO_ACTUAL;
				}

				public Boolean DOCUMENTO_ACTUALIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_ACTUALIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_ACTUALLength(){
				    return 2000;
				}
				public Integer DOCUMENTO_ACTUALPrecision(){
				    return 0;
				}
				public String DOCUMENTO_ACTUALDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_ACTUALComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_ACTUALPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_ACTUALOriginalDbColumnName(){
				
					return "DOCUMENTO_ACTUAL";
				
				}

				
			    public String TDOCUMENTO_ANTERIOR;

				public String getTDOCUMENTO_ANTERIOR () {
					return this.TDOCUMENTO_ANTERIOR;
				}

				public Boolean TDOCUMENTO_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_ANTERIORIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_ANTERIORLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_ANTERIORPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_ANTERIORDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_ANTERIORComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_ANTERIORPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_ANTERIOROriginalDbColumnName(){
				
					return "TDOCUMENTO_ANTERIOR";
				
				}

				
			    public String TDOCUMENTO_ACTUAL;

				public String getTDOCUMENTO_ACTUAL () {
					return this.TDOCUMENTO_ACTUAL;
				}

				public Boolean TDOCUMENTO_ACTUALIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_ACTUALIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_ACTUALLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_ACTUALPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_ACTUALDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_ACTUALComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_ACTUALPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_ACTUALOriginalDbColumnName(){
				
					return "TDOCUMENTO_ACTUAL";
				
				}

				
			    public BigDecimal AFILIADO_ID;

				public BigDecimal getAFILIADO_ID () {
					return this.AFILIADO_ID;
				}

				public Boolean AFILIADO_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADO_IDIsKey(){
				    return false;
				}
				public Integer AFILIADO_IDLength(){
				    return 0;
				}
				public Integer AFILIADO_IDPrecision(){
				    return null;
				}
				public String AFILIADO_IDDefault(){
				
					return "";
				
				}
				public String AFILIADO_IDComment(){
				
				    return "";
				
				}
				public String AFILIADO_IDPattern(){
				
					return "";
				
				}
				public String AFILIADO_IDOriginalDbColumnName(){
				
					return "AFILIADO_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length) {
				if(length < 1024 && commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length == 0) {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[1024];
				} else {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length);
			strReturn = new String(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length) {
				if(length < 1024 && commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length == 0) {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[1024];
				} else {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length);
			strReturn = new String(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
					this.NOVEDAD_COD = readString(dis);
					
					this.NOVEDAD_CAMP = readString(dis);
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.FECHA_REGISTRO = readString(dis);
					
						this.ORDEN_NOVEDAD = (BigDecimal) dis.readObject();
					
						this.ORDEN_CAMPO = (BigDecimal) dis.readObject();
					
					this.SIGLA_TDOCUMENTO = readString(dis);
					
					this.SIGLA_SEXO = readString(dis);
					
					this.DOCUMENTO_ANTERIOR = readString(dis);
					
					this.DOCUMENTO_ACTUAL = readString(dis);
					
					this.TDOCUMENTO_ANTERIOR = readString(dis);
					
					this.TDOCUMENTO_ACTUAL = readString(dis);
					
						this.AFILIADO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
					this.NOVEDAD_COD = readString(dis);
					
					this.NOVEDAD_CAMP = readString(dis);
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.FECHA_REGISTRO = readString(dis);
					
						this.ORDEN_NOVEDAD = (BigDecimal) dis.readObject();
					
						this.ORDEN_CAMPO = (BigDecimal) dis.readObject();
					
					this.SIGLA_TDOCUMENTO = readString(dis);
					
					this.SIGLA_SEXO = readString(dis);
					
					this.DOCUMENTO_ANTERIOR = readString(dis);
					
					this.DOCUMENTO_ACTUAL = readString(dis);
					
					this.TDOCUMENTO_ANTERIOR = readString(dis);
					
					this.TDOCUMENTO_ACTUAL = readString(dis);
					
						this.AFILIADO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NOVEDAD_COD,dos);
					
					// String
				
						writeString(this.NOVEDAD_CAMP,dos);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.FECHA_REGISTRO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDEN_NOVEDAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDEN_CAMPO);
					
					// String
				
						writeString(this.SIGLA_TDOCUMENTO,dos);
					
					// String
				
						writeString(this.SIGLA_SEXO,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ANTERIOR,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ACTUAL,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ANTERIOR,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ACTUAL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.AFILIADO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NOVEDAD_COD,dos);
					
					// String
				
						writeString(this.NOVEDAD_CAMP,dos);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.FECHA_REGISTRO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ORDEN_NOVEDAD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ORDEN_CAMPO);
					
					// String
				
						writeString(this.SIGLA_TDOCUMENTO,dos);
					
					// String
				
						writeString(this.SIGLA_SEXO,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ANTERIOR,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ACTUAL,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ANTERIOR,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ACTUAL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AFILIADO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NOVEDAD_COD="+NOVEDAD_COD);
		sb.append(",NOVEDAD_CAMP="+NOVEDAD_CAMP);
		sb.append(",VANTERIOR="+VANTERIOR);
		sb.append(",VACTUAL="+VACTUAL);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",FECHA_NACIMIENTO="+FECHA_NACIMIENTO);
		sb.append(",FECHA_REGISTRO="+FECHA_REGISTRO);
		sb.append(",ORDEN_NOVEDAD="+String.valueOf(ORDEN_NOVEDAD));
		sb.append(",ORDEN_CAMPO="+String.valueOf(ORDEN_CAMPO));
		sb.append(",SIGLA_TDOCUMENTO="+SIGLA_TDOCUMENTO);
		sb.append(",SIGLA_SEXO="+SIGLA_SEXO);
		sb.append(",DOCUMENTO_ANTERIOR="+DOCUMENTO_ANTERIOR);
		sb.append(",DOCUMENTO_ACTUAL="+DOCUMENTO_ACTUAL);
		sb.append(",TDOCUMENTO_ANTERIOR="+TDOCUMENTO_ANTERIOR);
		sb.append(",TDOCUMENTO_ACTUAL="+TDOCUMENTO_ACTUAL);
		sb.append(",AFILIADO_ID="+String.valueOf(AFILIADO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out6Struct implements routines.system.IPersistableRow<out6Struct> {
    final static byte[] commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];
    static byte[] commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];

	
			    public BigDecimal AFILIADO_ID;

				public BigDecimal getAFILIADO_ID () {
					return this.AFILIADO_ID;
				}

				public Boolean AFILIADO_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADO_IDIsKey(){
				    return false;
				}
				public Integer AFILIADO_IDLength(){
				    return 0;
				}
				public Integer AFILIADO_IDPrecision(){
				    return null;
				}
				public String AFILIADO_IDDefault(){
				
					return "";
				
				}
				public String AFILIADO_IDComment(){
				
				    return "";
				
				}
				public String AFILIADO_IDPattern(){
				
					return "";
				
				}
				public String AFILIADO_IDOriginalDbColumnName(){
				
					return "AFILIADO_ID";
				
				}

				
			    public BigDecimal HAFILIADOS_ID;

				public BigDecimal getHAFILIADOS_ID () {
					return this.HAFILIADOS_ID;
				}

				public Boolean HAFILIADOS_IDIsNullable(){
				    return false;
				}
				public Boolean HAFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer HAFILIADOS_IDLength(){
				    return 0;
				}
				public Integer HAFILIADOS_IDPrecision(){
				    return null;
				}
				public String HAFILIADOS_IDDefault(){
				
					return "";
				
				}
				public String HAFILIADOS_IDComment(){
				
				    return "";
				
				}
				public String HAFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String HAFILIADOS_IDOriginalDbColumnName(){
				
					return "HAFILIADOS_ID";
				
				}

				
			    public String NOVEDAD_COD;

				public String getNOVEDAD_COD () {
					return this.NOVEDAD_COD;
				}

				public Boolean NOVEDAD_CODIsNullable(){
				    return false;
				}
				public Boolean NOVEDAD_CODIsKey(){
				    return false;
				}
				public Integer NOVEDAD_CODLength(){
				    return 5;
				}
				public Integer NOVEDAD_CODPrecision(){
				    return 0;
				}
				public String NOVEDAD_CODDefault(){
				
					return null;
				
				}
				public String NOVEDAD_CODComment(){
				
				    return "";
				
				}
				public String NOVEDAD_CODPattern(){
				
					return "";
				
				}
				public String NOVEDAD_CODOriginalDbColumnName(){
				
					return "NOVEDAD_COD";
				
				}

				
			    public String NOVEDAD_CAMP;

				public String getNOVEDAD_CAMP () {
					return this.NOVEDAD_CAMP;
				}

				public Boolean NOVEDAD_CAMPIsNullable(){
				    return true;
				}
				public Boolean NOVEDAD_CAMPIsKey(){
				    return false;
				}
				public Integer NOVEDAD_CAMPLength(){
				    return 150;
				}
				public Integer NOVEDAD_CAMPPrecision(){
				    return 0;
				}
				public String NOVEDAD_CAMPDefault(){
				
					return null;
				
				}
				public String NOVEDAD_CAMPComment(){
				
				    return "";
				
				}
				public String NOVEDAD_CAMPPattern(){
				
					return "";
				
				}
				public String NOVEDAD_CAMPOriginalDbColumnName(){
				
					return "NOVEDAD_CAMP";
				
				}

				
			    public String VANTERIOR;

				public String getVANTERIOR () {
					return this.VANTERIOR;
				}

				public Boolean VANTERIORIsNullable(){
				    return true;
				}
				public Boolean VANTERIORIsKey(){
				    return false;
				}
				public Integer VANTERIORLength(){
				    return 2000;
				}
				public Integer VANTERIORPrecision(){
				    return 0;
				}
				public String VANTERIORDefault(){
				
					return null;
				
				}
				public String VANTERIORComment(){
				
				    return "";
				
				}
				public String VANTERIORPattern(){
				
					return "";
				
				}
				public String VANTERIOROriginalDbColumnName(){
				
					return "VANTERIOR";
				
				}

				
			    public String VACTUAL;

				public String getVACTUAL () {
					return this.VACTUAL;
				}

				public Boolean VACTUALIsNullable(){
				    return true;
				}
				public Boolean VACTUALIsKey(){
				    return false;
				}
				public Integer VACTUALLength(){
				    return 2000;
				}
				public Integer VACTUALPrecision(){
				    return 0;
				}
				public String VACTUALDefault(){
				
					return null;
				
				}
				public String VACTUALComment(){
				
				    return "";
				
				}
				public String VACTUALPattern(){
				
					return "";
				
				}
				public String VACTUALOriginalDbColumnName(){
				
					return "VACTUAL";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 100;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 100;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 100;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 100;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String FECHA_NACIMIENTO;

				public String getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return 10;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return 0;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public String FECHA_REGISTRO;

				public String getFECHA_REGISTRO () {
					return this.FECHA_REGISTRO;
				}

				public Boolean FECHA_REGISTROIsNullable(){
				    return true;
				}
				public Boolean FECHA_REGISTROIsKey(){
				    return false;
				}
				public Integer FECHA_REGISTROLength(){
				    return 10;
				}
				public Integer FECHA_REGISTROPrecision(){
				    return 0;
				}
				public String FECHA_REGISTRODefault(){
				
					return null;
				
				}
				public String FECHA_REGISTROComment(){
				
				    return "";
				
				}
				public String FECHA_REGISTROPattern(){
				
					return "";
				
				}
				public String FECHA_REGISTROOriginalDbColumnName(){
				
					return "FECHA_REGISTRO";
				
				}

				
			    public BigDecimal ORDEN_NOVEDAD;

				public BigDecimal getORDEN_NOVEDAD () {
					return this.ORDEN_NOVEDAD;
				}

				public Boolean ORDEN_NOVEDADIsNullable(){
				    return true;
				}
				public Boolean ORDEN_NOVEDADIsKey(){
				    return false;
				}
				public Integer ORDEN_NOVEDADLength(){
				    return 0;
				}
				public Integer ORDEN_NOVEDADPrecision(){
				    return null;
				}
				public String ORDEN_NOVEDADDefault(){
				
					return "";
				
				}
				public String ORDEN_NOVEDADComment(){
				
				    return "";
				
				}
				public String ORDEN_NOVEDADPattern(){
				
					return "";
				
				}
				public String ORDEN_NOVEDADOriginalDbColumnName(){
				
					return "ORDEN_NOVEDAD";
				
				}

				
			    public BigDecimal ORDEN_CAMPO;

				public BigDecimal getORDEN_CAMPO () {
					return this.ORDEN_CAMPO;
				}

				public Boolean ORDEN_CAMPOIsNullable(){
				    return true;
				}
				public Boolean ORDEN_CAMPOIsKey(){
				    return false;
				}
				public Integer ORDEN_CAMPOLength(){
				    return 0;
				}
				public Integer ORDEN_CAMPOPrecision(){
				    return null;
				}
				public String ORDEN_CAMPODefault(){
				
					return "";
				
				}
				public String ORDEN_CAMPOComment(){
				
				    return "";
				
				}
				public String ORDEN_CAMPOPattern(){
				
					return "";
				
				}
				public String ORDEN_CAMPOOriginalDbColumnName(){
				
					return "ORDEN_CAMPO";
				
				}

				
			    public String SIGLA_TDOCUMENTO;

				public String getSIGLA_TDOCUMENTO () {
					return this.SIGLA_TDOCUMENTO;
				}

				public Boolean SIGLA_TDOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean SIGLA_TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer SIGLA_TDOCUMENTOLength(){
				    return 5;
				}
				public Integer SIGLA_TDOCUMENTOPrecision(){
				    return 0;
				}
				public String SIGLA_TDOCUMENTODefault(){
				
					return null;
				
				}
				public String SIGLA_TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String SIGLA_TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String SIGLA_TDOCUMENTOOriginalDbColumnName(){
				
					return "SIGLA_TDOCUMENTO";
				
				}

				
			    public String SIGLA_SEXO;

				public String getSIGLA_SEXO () {
					return this.SIGLA_SEXO;
				}

				public Boolean SIGLA_SEXOIsNullable(){
				    return false;
				}
				public Boolean SIGLA_SEXOIsKey(){
				    return false;
				}
				public Integer SIGLA_SEXOLength(){
				    return 1;
				}
				public Integer SIGLA_SEXOPrecision(){
				    return 0;
				}
				public String SIGLA_SEXODefault(){
				
					return null;
				
				}
				public String SIGLA_SEXOComment(){
				
				    return "";
				
				}
				public String SIGLA_SEXOPattern(){
				
					return "";
				
				}
				public String SIGLA_SEXOOriginalDbColumnName(){
				
					return "SIGLA_SEXO";
				
				}

				
			    public String DOCUMENTO_ANTERIOR;

				public String getDOCUMENTO_ANTERIOR () {
					return this.DOCUMENTO_ANTERIOR;
				}

				public Boolean DOCUMENTO_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_ANTERIORIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_ANTERIORLength(){
				    return 2000;
				}
				public Integer DOCUMENTO_ANTERIORPrecision(){
				    return 0;
				}
				public String DOCUMENTO_ANTERIORDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_ANTERIORComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_ANTERIORPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_ANTERIOROriginalDbColumnName(){
				
					return "DOCUMENTO_ANTERIOR";
				
				}

				
			    public String DOCUMENTO_ACTUAL;

				public String getDOCUMENTO_ACTUAL () {
					return this.DOCUMENTO_ACTUAL;
				}

				public Boolean DOCUMENTO_ACTUALIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_ACTUALIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_ACTUALLength(){
				    return 2000;
				}
				public Integer DOCUMENTO_ACTUALPrecision(){
				    return 0;
				}
				public String DOCUMENTO_ACTUALDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_ACTUALComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_ACTUALPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_ACTUALOriginalDbColumnName(){
				
					return "DOCUMENTO_ACTUAL";
				
				}

				
			    public String TDOCUMENTO_ANTERIOR;

				public String getTDOCUMENTO_ANTERIOR () {
					return this.TDOCUMENTO_ANTERIOR;
				}

				public Boolean TDOCUMENTO_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_ANTERIORIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_ANTERIORLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_ANTERIORPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_ANTERIORDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_ANTERIORComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_ANTERIORPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_ANTERIOROriginalDbColumnName(){
				
					return "TDOCUMENTO_ANTERIOR";
				
				}

				
			    public String TDOCUMENTO_ACTUAL;

				public String getTDOCUMENTO_ACTUAL () {
					return this.TDOCUMENTO_ACTUAL;
				}

				public Boolean TDOCUMENTO_ACTUALIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_ACTUALIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_ACTUALLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_ACTUALPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_ACTUALDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_ACTUALComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_ACTUALPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_ACTUALOriginalDbColumnName(){
				
					return "TDOCUMENTO_ACTUAL";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length) {
				if(length < 1024 && commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length == 0) {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[1024];
				} else {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length);
			strReturn = new String(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length) {
				if(length < 1024 && commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length == 0) {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[1024];
				} else {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length);
			strReturn = new String(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
						this.AFILIADO_ID = (BigDecimal) dis.readObject();
					
						this.HAFILIADOS_ID = (BigDecimal) dis.readObject();
					
					this.NOVEDAD_COD = readString(dis);
					
					this.NOVEDAD_CAMP = readString(dis);
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.FECHA_REGISTRO = readString(dis);
					
						this.ORDEN_NOVEDAD = (BigDecimal) dis.readObject();
					
						this.ORDEN_CAMPO = (BigDecimal) dis.readObject();
					
					this.SIGLA_TDOCUMENTO = readString(dis);
					
					this.SIGLA_SEXO = readString(dis);
					
					this.DOCUMENTO_ANTERIOR = readString(dis);
					
					this.DOCUMENTO_ACTUAL = readString(dis);
					
					this.TDOCUMENTO_ANTERIOR = readString(dis);
					
					this.TDOCUMENTO_ACTUAL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
						this.AFILIADO_ID = (BigDecimal) dis.readObject();
					
						this.HAFILIADOS_ID = (BigDecimal) dis.readObject();
					
					this.NOVEDAD_COD = readString(dis);
					
					this.NOVEDAD_CAMP = readString(dis);
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.FECHA_REGISTRO = readString(dis);
					
						this.ORDEN_NOVEDAD = (BigDecimal) dis.readObject();
					
						this.ORDEN_CAMPO = (BigDecimal) dis.readObject();
					
					this.SIGLA_TDOCUMENTO = readString(dis);
					
					this.SIGLA_SEXO = readString(dis);
					
					this.DOCUMENTO_ANTERIOR = readString(dis);
					
					this.DOCUMENTO_ACTUAL = readString(dis);
					
					this.TDOCUMENTO_ANTERIOR = readString(dis);
					
					this.TDOCUMENTO_ACTUAL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.AFILIADO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.HAFILIADOS_ID);
					
					// String
				
						writeString(this.NOVEDAD_COD,dos);
					
					// String
				
						writeString(this.NOVEDAD_CAMP,dos);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.FECHA_REGISTRO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDEN_NOVEDAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDEN_CAMPO);
					
					// String
				
						writeString(this.SIGLA_TDOCUMENTO,dos);
					
					// String
				
						writeString(this.SIGLA_SEXO,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ANTERIOR,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ACTUAL,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ANTERIOR,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ACTUAL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AFILIADO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.HAFILIADOS_ID);
					
					// String
				
						writeString(this.NOVEDAD_COD,dos);
					
					// String
				
						writeString(this.NOVEDAD_CAMP,dos);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.FECHA_REGISTRO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ORDEN_NOVEDAD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ORDEN_CAMPO);
					
					// String
				
						writeString(this.SIGLA_TDOCUMENTO,dos);
					
					// String
				
						writeString(this.SIGLA_SEXO,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ANTERIOR,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ACTUAL,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ANTERIOR,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ACTUAL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADO_ID="+String.valueOf(AFILIADO_ID));
		sb.append(",HAFILIADOS_ID="+String.valueOf(HAFILIADOS_ID));
		sb.append(",NOVEDAD_COD="+NOVEDAD_COD);
		sb.append(",NOVEDAD_CAMP="+NOVEDAD_CAMP);
		sb.append(",VANTERIOR="+VANTERIOR);
		sb.append(",VACTUAL="+VACTUAL);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",FECHA_NACIMIENTO="+FECHA_NACIMIENTO);
		sb.append(",FECHA_REGISTRO="+FECHA_REGISTRO);
		sb.append(",ORDEN_NOVEDAD="+String.valueOf(ORDEN_NOVEDAD));
		sb.append(",ORDEN_CAMPO="+String.valueOf(ORDEN_CAMPO));
		sb.append(",SIGLA_TDOCUMENTO="+SIGLA_TDOCUMENTO);
		sb.append(",SIGLA_SEXO="+SIGLA_SEXO);
		sb.append(",DOCUMENTO_ANTERIOR="+DOCUMENTO_ANTERIOR);
		sb.append(",DOCUMENTO_ACTUAL="+DOCUMENTO_ACTUAL);
		sb.append(",TDOCUMENTO_ANTERIOR="+TDOCUMENTO_ANTERIOR);
		sb.append(",TDOCUMENTO_ACTUAL="+TDOCUMENTO_ACTUAL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];
    static byte[] commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];

	
			    public BigDecimal AFILIADO_ID;

				public BigDecimal getAFILIADO_ID () {
					return this.AFILIADO_ID;
				}

				public Boolean AFILIADO_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADO_IDIsKey(){
				    return false;
				}
				public Integer AFILIADO_IDLength(){
				    return 0;
				}
				public Integer AFILIADO_IDPrecision(){
				    return null;
				}
				public String AFILIADO_IDDefault(){
				
					return "";
				
				}
				public String AFILIADO_IDComment(){
				
				    return "";
				
				}
				public String AFILIADO_IDPattern(){
				
					return "";
				
				}
				public String AFILIADO_IDOriginalDbColumnName(){
				
					return "AFILIADO_ID";
				
				}

				
			    public BigDecimal HAFILIADOS_ID;

				public BigDecimal getHAFILIADOS_ID () {
					return this.HAFILIADOS_ID;
				}

				public Boolean HAFILIADOS_IDIsNullable(){
				    return false;
				}
				public Boolean HAFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer HAFILIADOS_IDLength(){
				    return 0;
				}
				public Integer HAFILIADOS_IDPrecision(){
				    return null;
				}
				public String HAFILIADOS_IDDefault(){
				
					return "";
				
				}
				public String HAFILIADOS_IDComment(){
				
				    return "";
				
				}
				public String HAFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String HAFILIADOS_IDOriginalDbColumnName(){
				
					return "HAFILIADOS_ID";
				
				}

				
			    public String NOVEDAD_COD;

				public String getNOVEDAD_COD () {
					return this.NOVEDAD_COD;
				}

				public Boolean NOVEDAD_CODIsNullable(){
				    return false;
				}
				public Boolean NOVEDAD_CODIsKey(){
				    return false;
				}
				public Integer NOVEDAD_CODLength(){
				    return 5;
				}
				public Integer NOVEDAD_CODPrecision(){
				    return 0;
				}
				public String NOVEDAD_CODDefault(){
				
					return null;
				
				}
				public String NOVEDAD_CODComment(){
				
				    return "";
				
				}
				public String NOVEDAD_CODPattern(){
				
					return "";
				
				}
				public String NOVEDAD_CODOriginalDbColumnName(){
				
					return "NOVEDAD_COD";
				
				}

				
			    public String NOVEDAD_CAMP;

				public String getNOVEDAD_CAMP () {
					return this.NOVEDAD_CAMP;
				}

				public Boolean NOVEDAD_CAMPIsNullable(){
				    return true;
				}
				public Boolean NOVEDAD_CAMPIsKey(){
				    return false;
				}
				public Integer NOVEDAD_CAMPLength(){
				    return 150;
				}
				public Integer NOVEDAD_CAMPPrecision(){
				    return 0;
				}
				public String NOVEDAD_CAMPDefault(){
				
					return null;
				
				}
				public String NOVEDAD_CAMPComment(){
				
				    return "";
				
				}
				public String NOVEDAD_CAMPPattern(){
				
					return "";
				
				}
				public String NOVEDAD_CAMPOriginalDbColumnName(){
				
					return "NOVEDAD_CAMP";
				
				}

				
			    public String VANTERIOR;

				public String getVANTERIOR () {
					return this.VANTERIOR;
				}

				public Boolean VANTERIORIsNullable(){
				    return true;
				}
				public Boolean VANTERIORIsKey(){
				    return false;
				}
				public Integer VANTERIORLength(){
				    return 2000;
				}
				public Integer VANTERIORPrecision(){
				    return 0;
				}
				public String VANTERIORDefault(){
				
					return null;
				
				}
				public String VANTERIORComment(){
				
				    return "";
				
				}
				public String VANTERIORPattern(){
				
					return "";
				
				}
				public String VANTERIOROriginalDbColumnName(){
				
					return "VANTERIOR";
				
				}

				
			    public String VACTUAL;

				public String getVACTUAL () {
					return this.VACTUAL;
				}

				public Boolean VACTUALIsNullable(){
				    return true;
				}
				public Boolean VACTUALIsKey(){
				    return false;
				}
				public Integer VACTUALLength(){
				    return 2000;
				}
				public Integer VACTUALPrecision(){
				    return 0;
				}
				public String VACTUALDefault(){
				
					return null;
				
				}
				public String VACTUALComment(){
				
				    return "";
				
				}
				public String VACTUALPattern(){
				
					return "";
				
				}
				public String VACTUALOriginalDbColumnName(){
				
					return "VACTUAL";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 100;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 100;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 100;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 100;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String FECHA_NACIMIENTO;

				public String getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return 10;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return 0;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public String FECHA_REGISTRO;

				public String getFECHA_REGISTRO () {
					return this.FECHA_REGISTRO;
				}

				public Boolean FECHA_REGISTROIsNullable(){
				    return true;
				}
				public Boolean FECHA_REGISTROIsKey(){
				    return false;
				}
				public Integer FECHA_REGISTROLength(){
				    return 10;
				}
				public Integer FECHA_REGISTROPrecision(){
				    return 0;
				}
				public String FECHA_REGISTRODefault(){
				
					return null;
				
				}
				public String FECHA_REGISTROComment(){
				
				    return "";
				
				}
				public String FECHA_REGISTROPattern(){
				
					return "";
				
				}
				public String FECHA_REGISTROOriginalDbColumnName(){
				
					return "FECHA_REGISTRO";
				
				}

				
			    public BigDecimal ORDEN_NOVEDAD;

				public BigDecimal getORDEN_NOVEDAD () {
					return this.ORDEN_NOVEDAD;
				}

				public Boolean ORDEN_NOVEDADIsNullable(){
				    return true;
				}
				public Boolean ORDEN_NOVEDADIsKey(){
				    return false;
				}
				public Integer ORDEN_NOVEDADLength(){
				    return 0;
				}
				public Integer ORDEN_NOVEDADPrecision(){
				    return null;
				}
				public String ORDEN_NOVEDADDefault(){
				
					return "";
				
				}
				public String ORDEN_NOVEDADComment(){
				
				    return "";
				
				}
				public String ORDEN_NOVEDADPattern(){
				
					return "";
				
				}
				public String ORDEN_NOVEDADOriginalDbColumnName(){
				
					return "ORDEN_NOVEDAD";
				
				}

				
			    public BigDecimal ORDEN_CAMPO;

				public BigDecimal getORDEN_CAMPO () {
					return this.ORDEN_CAMPO;
				}

				public Boolean ORDEN_CAMPOIsNullable(){
				    return true;
				}
				public Boolean ORDEN_CAMPOIsKey(){
				    return false;
				}
				public Integer ORDEN_CAMPOLength(){
				    return 0;
				}
				public Integer ORDEN_CAMPOPrecision(){
				    return null;
				}
				public String ORDEN_CAMPODefault(){
				
					return "";
				
				}
				public String ORDEN_CAMPOComment(){
				
				    return "";
				
				}
				public String ORDEN_CAMPOPattern(){
				
					return "";
				
				}
				public String ORDEN_CAMPOOriginalDbColumnName(){
				
					return "ORDEN_CAMPO";
				
				}

				
			    public String SIGLA_TDOCUMENTO;

				public String getSIGLA_TDOCUMENTO () {
					return this.SIGLA_TDOCUMENTO;
				}

				public Boolean SIGLA_TDOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean SIGLA_TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer SIGLA_TDOCUMENTOLength(){
				    return 5;
				}
				public Integer SIGLA_TDOCUMENTOPrecision(){
				    return 0;
				}
				public String SIGLA_TDOCUMENTODefault(){
				
					return null;
				
				}
				public String SIGLA_TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String SIGLA_TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String SIGLA_TDOCUMENTOOriginalDbColumnName(){
				
					return "SIGLA_TDOCUMENTO";
				
				}

				
			    public String SIGLA_SEXO;

				public String getSIGLA_SEXO () {
					return this.SIGLA_SEXO;
				}

				public Boolean SIGLA_SEXOIsNullable(){
				    return false;
				}
				public Boolean SIGLA_SEXOIsKey(){
				    return false;
				}
				public Integer SIGLA_SEXOLength(){
				    return 1;
				}
				public Integer SIGLA_SEXOPrecision(){
				    return 0;
				}
				public String SIGLA_SEXODefault(){
				
					return null;
				
				}
				public String SIGLA_SEXOComment(){
				
				    return "";
				
				}
				public String SIGLA_SEXOPattern(){
				
					return "";
				
				}
				public String SIGLA_SEXOOriginalDbColumnName(){
				
					return "SIGLA_SEXO";
				
				}

				
			    public String DOCUMENTO_ANTERIOR;

				public String getDOCUMENTO_ANTERIOR () {
					return this.DOCUMENTO_ANTERIOR;
				}

				public Boolean DOCUMENTO_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_ANTERIORIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_ANTERIORLength(){
				    return 2000;
				}
				public Integer DOCUMENTO_ANTERIORPrecision(){
				    return 0;
				}
				public String DOCUMENTO_ANTERIORDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_ANTERIORComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_ANTERIORPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_ANTERIOROriginalDbColumnName(){
				
					return "DOCUMENTO_ANTERIOR";
				
				}

				
			    public String DOCUMENTO_ACTUAL;

				public String getDOCUMENTO_ACTUAL () {
					return this.DOCUMENTO_ACTUAL;
				}

				public Boolean DOCUMENTO_ACTUALIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_ACTUALIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_ACTUALLength(){
				    return 2000;
				}
				public Integer DOCUMENTO_ACTUALPrecision(){
				    return 0;
				}
				public String DOCUMENTO_ACTUALDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_ACTUALComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_ACTUALPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_ACTUALOriginalDbColumnName(){
				
					return "DOCUMENTO_ACTUAL";
				
				}

				
			    public String TDOCUMENTO_ANTERIOR;

				public String getTDOCUMENTO_ANTERIOR () {
					return this.TDOCUMENTO_ANTERIOR;
				}

				public Boolean TDOCUMENTO_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_ANTERIORIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_ANTERIORLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_ANTERIORPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_ANTERIORDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_ANTERIORComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_ANTERIORPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_ANTERIOROriginalDbColumnName(){
				
					return "TDOCUMENTO_ANTERIOR";
				
				}

				
			    public String TDOCUMENTO_ACTUAL;

				public String getTDOCUMENTO_ACTUAL () {
					return this.TDOCUMENTO_ACTUAL;
				}

				public Boolean TDOCUMENTO_ACTUALIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_ACTUALIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_ACTUALLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_ACTUALPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_ACTUALDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_ACTUALComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_ACTUALPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_ACTUALOriginalDbColumnName(){
				
					return "TDOCUMENTO_ACTUAL";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length) {
				if(length < 1024 && commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length == 0) {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[1024];
				} else {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length);
			strReturn = new String(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length) {
				if(length < 1024 && commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length == 0) {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[1024];
				} else {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length);
			strReturn = new String(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
						this.AFILIADO_ID = (BigDecimal) dis.readObject();
					
						this.HAFILIADOS_ID = (BigDecimal) dis.readObject();
					
					this.NOVEDAD_COD = readString(dis);
					
					this.NOVEDAD_CAMP = readString(dis);
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.FECHA_REGISTRO = readString(dis);
					
						this.ORDEN_NOVEDAD = (BigDecimal) dis.readObject();
					
						this.ORDEN_CAMPO = (BigDecimal) dis.readObject();
					
					this.SIGLA_TDOCUMENTO = readString(dis);
					
					this.SIGLA_SEXO = readString(dis);
					
					this.DOCUMENTO_ANTERIOR = readString(dis);
					
					this.DOCUMENTO_ACTUAL = readString(dis);
					
					this.TDOCUMENTO_ANTERIOR = readString(dis);
					
					this.TDOCUMENTO_ACTUAL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
						this.AFILIADO_ID = (BigDecimal) dis.readObject();
					
						this.HAFILIADOS_ID = (BigDecimal) dis.readObject();
					
					this.NOVEDAD_COD = readString(dis);
					
					this.NOVEDAD_CAMP = readString(dis);
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.FECHA_REGISTRO = readString(dis);
					
						this.ORDEN_NOVEDAD = (BigDecimal) dis.readObject();
					
						this.ORDEN_CAMPO = (BigDecimal) dis.readObject();
					
					this.SIGLA_TDOCUMENTO = readString(dis);
					
					this.SIGLA_SEXO = readString(dis);
					
					this.DOCUMENTO_ANTERIOR = readString(dis);
					
					this.DOCUMENTO_ACTUAL = readString(dis);
					
					this.TDOCUMENTO_ANTERIOR = readString(dis);
					
					this.TDOCUMENTO_ACTUAL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.AFILIADO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.HAFILIADOS_ID);
					
					// String
				
						writeString(this.NOVEDAD_COD,dos);
					
					// String
				
						writeString(this.NOVEDAD_CAMP,dos);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.FECHA_REGISTRO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDEN_NOVEDAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDEN_CAMPO);
					
					// String
				
						writeString(this.SIGLA_TDOCUMENTO,dos);
					
					// String
				
						writeString(this.SIGLA_SEXO,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ANTERIOR,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ACTUAL,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ANTERIOR,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ACTUAL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AFILIADO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.HAFILIADOS_ID);
					
					// String
				
						writeString(this.NOVEDAD_COD,dos);
					
					// String
				
						writeString(this.NOVEDAD_CAMP,dos);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.FECHA_REGISTRO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ORDEN_NOVEDAD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ORDEN_CAMPO);
					
					// String
				
						writeString(this.SIGLA_TDOCUMENTO,dos);
					
					// String
				
						writeString(this.SIGLA_SEXO,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ANTERIOR,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ACTUAL,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ANTERIOR,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ACTUAL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADO_ID="+String.valueOf(AFILIADO_ID));
		sb.append(",HAFILIADOS_ID="+String.valueOf(HAFILIADOS_ID));
		sb.append(",NOVEDAD_COD="+NOVEDAD_COD);
		sb.append(",NOVEDAD_CAMP="+NOVEDAD_CAMP);
		sb.append(",VANTERIOR="+VANTERIOR);
		sb.append(",VACTUAL="+VACTUAL);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",FECHA_NACIMIENTO="+FECHA_NACIMIENTO);
		sb.append(",FECHA_REGISTRO="+FECHA_REGISTRO);
		sb.append(",ORDEN_NOVEDAD="+String.valueOf(ORDEN_NOVEDAD));
		sb.append(",ORDEN_CAMPO="+String.valueOf(ORDEN_CAMPO));
		sb.append(",SIGLA_TDOCUMENTO="+SIGLA_TDOCUMENTO);
		sb.append(",SIGLA_SEXO="+SIGLA_SEXO);
		sb.append(",DOCUMENTO_ANTERIOR="+DOCUMENTO_ANTERIOR);
		sb.append(",DOCUMENTO_ACTUAL="+DOCUMENTO_ACTUAL);
		sb.append(",TDOCUMENTO_ANTERIOR="+TDOCUMENTO_ANTERIOR);
		sb.append(",TDOCUMENTO_ACTUAL="+TDOCUMENTO_ACTUAL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];
    static byte[] commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];

	
			    public BigDecimal AFILIADO_ID;

				public BigDecimal getAFILIADO_ID () {
					return this.AFILIADO_ID;
				}

				public Boolean AFILIADO_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADO_IDIsKey(){
				    return false;
				}
				public Integer AFILIADO_IDLength(){
				    return 0;
				}
				public Integer AFILIADO_IDPrecision(){
				    return null;
				}
				public String AFILIADO_IDDefault(){
				
					return "";
				
				}
				public String AFILIADO_IDComment(){
				
				    return "";
				
				}
				public String AFILIADO_IDPattern(){
				
					return "";
				
				}
				public String AFILIADO_IDOriginalDbColumnName(){
				
					return "AFILIADO_ID";
				
				}

				
			    public BigDecimal HAFILIADOS_ID;

				public BigDecimal getHAFILIADOS_ID () {
					return this.HAFILIADOS_ID;
				}

				public Boolean HAFILIADOS_IDIsNullable(){
				    return false;
				}
				public Boolean HAFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer HAFILIADOS_IDLength(){
				    return 0;
				}
				public Integer HAFILIADOS_IDPrecision(){
				    return null;
				}
				public String HAFILIADOS_IDDefault(){
				
					return "";
				
				}
				public String HAFILIADOS_IDComment(){
				
				    return "";
				
				}
				public String HAFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String HAFILIADOS_IDOriginalDbColumnName(){
				
					return "HAFILIADOS_ID";
				
				}

				
			    public String NOVEDAD_COD;

				public String getNOVEDAD_COD () {
					return this.NOVEDAD_COD;
				}

				public Boolean NOVEDAD_CODIsNullable(){
				    return false;
				}
				public Boolean NOVEDAD_CODIsKey(){
				    return false;
				}
				public Integer NOVEDAD_CODLength(){
				    return 5;
				}
				public Integer NOVEDAD_CODPrecision(){
				    return 0;
				}
				public String NOVEDAD_CODDefault(){
				
					return null;
				
				}
				public String NOVEDAD_CODComment(){
				
				    return "";
				
				}
				public String NOVEDAD_CODPattern(){
				
					return "";
				
				}
				public String NOVEDAD_CODOriginalDbColumnName(){
				
					return "NOVEDAD_COD";
				
				}

				
			    public String NOVEDAD_CAMP;

				public String getNOVEDAD_CAMP () {
					return this.NOVEDAD_CAMP;
				}

				public Boolean NOVEDAD_CAMPIsNullable(){
				    return true;
				}
				public Boolean NOVEDAD_CAMPIsKey(){
				    return false;
				}
				public Integer NOVEDAD_CAMPLength(){
				    return 150;
				}
				public Integer NOVEDAD_CAMPPrecision(){
				    return 0;
				}
				public String NOVEDAD_CAMPDefault(){
				
					return null;
				
				}
				public String NOVEDAD_CAMPComment(){
				
				    return "";
				
				}
				public String NOVEDAD_CAMPPattern(){
				
					return "";
				
				}
				public String NOVEDAD_CAMPOriginalDbColumnName(){
				
					return "NOVEDAD_CAMP";
				
				}

				
			    public BigDecimal R;

				public BigDecimal getR () {
					return this.R;
				}

				public Boolean RIsNullable(){
				    return true;
				}
				public Boolean RIsKey(){
				    return false;
				}
				public Integer RLength(){
				    return 0;
				}
				public Integer RPrecision(){
				    return null;
				}
				public String RDefault(){
				
					return "";
				
				}
				public String RComment(){
				
				    return "";
				
				}
				public String RPattern(){
				
					return "";
				
				}
				public String ROriginalDbColumnName(){
				
					return "R";
				
				}

				
			    public String VANTERIOR;

				public String getVANTERIOR () {
					return this.VANTERIOR;
				}

				public Boolean VANTERIORIsNullable(){
				    return true;
				}
				public Boolean VANTERIORIsKey(){
				    return false;
				}
				public Integer VANTERIORLength(){
				    return 2000;
				}
				public Integer VANTERIORPrecision(){
				    return 0;
				}
				public String VANTERIORDefault(){
				
					return null;
				
				}
				public String VANTERIORComment(){
				
				    return "";
				
				}
				public String VANTERIORPattern(){
				
					return "";
				
				}
				public String VANTERIOROriginalDbColumnName(){
				
					return "VANTERIOR";
				
				}

				
			    public String VACTUAL;

				public String getVACTUAL () {
					return this.VACTUAL;
				}

				public Boolean VACTUALIsNullable(){
				    return true;
				}
				public Boolean VACTUALIsKey(){
				    return false;
				}
				public Integer VACTUALLength(){
				    return 2000;
				}
				public Integer VACTUALPrecision(){
				    return 0;
				}
				public String VACTUALDefault(){
				
					return null;
				
				}
				public String VACTUALComment(){
				
				    return "";
				
				}
				public String VACTUALPattern(){
				
					return "";
				
				}
				public String VACTUALOriginalDbColumnName(){
				
					return "VACTUAL";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 100;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 100;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 100;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 100;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String FECHA_NACIMIENTO;

				public String getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return 10;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return 0;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public String FECHA_REGISTRO;

				public String getFECHA_REGISTRO () {
					return this.FECHA_REGISTRO;
				}

				public Boolean FECHA_REGISTROIsNullable(){
				    return true;
				}
				public Boolean FECHA_REGISTROIsKey(){
				    return false;
				}
				public Integer FECHA_REGISTROLength(){
				    return 10;
				}
				public Integer FECHA_REGISTROPrecision(){
				    return 0;
				}
				public String FECHA_REGISTRODefault(){
				
					return null;
				
				}
				public String FECHA_REGISTROComment(){
				
				    return "";
				
				}
				public String FECHA_REGISTROPattern(){
				
					return "";
				
				}
				public String FECHA_REGISTROOriginalDbColumnName(){
				
					return "FECHA_REGISTRO";
				
				}

				
			    public BigDecimal ORDEN_NOVEDAD;

				public BigDecimal getORDEN_NOVEDAD () {
					return this.ORDEN_NOVEDAD;
				}

				public Boolean ORDEN_NOVEDADIsNullable(){
				    return true;
				}
				public Boolean ORDEN_NOVEDADIsKey(){
				    return false;
				}
				public Integer ORDEN_NOVEDADLength(){
				    return 0;
				}
				public Integer ORDEN_NOVEDADPrecision(){
				    return null;
				}
				public String ORDEN_NOVEDADDefault(){
				
					return "";
				
				}
				public String ORDEN_NOVEDADComment(){
				
				    return "";
				
				}
				public String ORDEN_NOVEDADPattern(){
				
					return "";
				
				}
				public String ORDEN_NOVEDADOriginalDbColumnName(){
				
					return "ORDEN_NOVEDAD";
				
				}

				
			    public BigDecimal ORDEN_CAMPO;

				public BigDecimal getORDEN_CAMPO () {
					return this.ORDEN_CAMPO;
				}

				public Boolean ORDEN_CAMPOIsNullable(){
				    return true;
				}
				public Boolean ORDEN_CAMPOIsKey(){
				    return false;
				}
				public Integer ORDEN_CAMPOLength(){
				    return 0;
				}
				public Integer ORDEN_CAMPOPrecision(){
				    return null;
				}
				public String ORDEN_CAMPODefault(){
				
					return "";
				
				}
				public String ORDEN_CAMPOComment(){
				
				    return "";
				
				}
				public String ORDEN_CAMPOPattern(){
				
					return "";
				
				}
				public String ORDEN_CAMPOOriginalDbColumnName(){
				
					return "ORDEN_CAMPO";
				
				}

				
			    public String SIGLA_TDOCUMENTO;

				public String getSIGLA_TDOCUMENTO () {
					return this.SIGLA_TDOCUMENTO;
				}

				public Boolean SIGLA_TDOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean SIGLA_TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer SIGLA_TDOCUMENTOLength(){
				    return 5;
				}
				public Integer SIGLA_TDOCUMENTOPrecision(){
				    return 0;
				}
				public String SIGLA_TDOCUMENTODefault(){
				
					return null;
				
				}
				public String SIGLA_TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String SIGLA_TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String SIGLA_TDOCUMENTOOriginalDbColumnName(){
				
					return "SIGLA_TDOCUMENTO";
				
				}

				
			    public String SIGLA_SEXO;

				public String getSIGLA_SEXO () {
					return this.SIGLA_SEXO;
				}

				public Boolean SIGLA_SEXOIsNullable(){
				    return false;
				}
				public Boolean SIGLA_SEXOIsKey(){
				    return false;
				}
				public Integer SIGLA_SEXOLength(){
				    return 1;
				}
				public Integer SIGLA_SEXOPrecision(){
				    return 0;
				}
				public String SIGLA_SEXODefault(){
				
					return null;
				
				}
				public String SIGLA_SEXOComment(){
				
				    return "";
				
				}
				public String SIGLA_SEXOPattern(){
				
					return "";
				
				}
				public String SIGLA_SEXOOriginalDbColumnName(){
				
					return "SIGLA_SEXO";
				
				}

				
			    public String DOCUMENTO_ANTERIOR;

				public String getDOCUMENTO_ANTERIOR () {
					return this.DOCUMENTO_ANTERIOR;
				}

				public Boolean DOCUMENTO_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_ANTERIORIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_ANTERIORLength(){
				    return 2000;
				}
				public Integer DOCUMENTO_ANTERIORPrecision(){
				    return 0;
				}
				public String DOCUMENTO_ANTERIORDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_ANTERIORComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_ANTERIORPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_ANTERIOROriginalDbColumnName(){
				
					return "DOCUMENTO_ANTERIOR";
				
				}

				
			    public String DOCUMENTO_ACTUAL;

				public String getDOCUMENTO_ACTUAL () {
					return this.DOCUMENTO_ACTUAL;
				}

				public Boolean DOCUMENTO_ACTUALIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_ACTUALIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_ACTUALLength(){
				    return 2000;
				}
				public Integer DOCUMENTO_ACTUALPrecision(){
				    return 0;
				}
				public String DOCUMENTO_ACTUALDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_ACTUALComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_ACTUALPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_ACTUALOriginalDbColumnName(){
				
					return "DOCUMENTO_ACTUAL";
				
				}

				
			    public String TDOCUMENTO_ANTERIOR;

				public String getTDOCUMENTO_ANTERIOR () {
					return this.TDOCUMENTO_ANTERIOR;
				}

				public Boolean TDOCUMENTO_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_ANTERIORIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_ANTERIORLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_ANTERIORPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_ANTERIORDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_ANTERIORComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_ANTERIORPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_ANTERIOROriginalDbColumnName(){
				
					return "TDOCUMENTO_ANTERIOR";
				
				}

				
			    public String TDOCUMENTO_ACTUAL;

				public String getTDOCUMENTO_ACTUAL () {
					return this.TDOCUMENTO_ACTUAL;
				}

				public Boolean TDOCUMENTO_ACTUALIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_ACTUALIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_ACTUALLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_ACTUALPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_ACTUALDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_ACTUALComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_ACTUALPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_ACTUALOriginalDbColumnName(){
				
					return "TDOCUMENTO_ACTUAL";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length) {
				if(length < 1024 && commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length == 0) {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[1024];
				} else {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length);
			strReturn = new String(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length) {
				if(length < 1024 && commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length == 0) {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[1024];
				} else {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length);
			strReturn = new String(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
						this.AFILIADO_ID = (BigDecimal) dis.readObject();
					
						this.HAFILIADOS_ID = (BigDecimal) dis.readObject();
					
					this.NOVEDAD_COD = readString(dis);
					
					this.NOVEDAD_CAMP = readString(dis);
					
						this.R = (BigDecimal) dis.readObject();
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.FECHA_REGISTRO = readString(dis);
					
						this.ORDEN_NOVEDAD = (BigDecimal) dis.readObject();
					
						this.ORDEN_CAMPO = (BigDecimal) dis.readObject();
					
					this.SIGLA_TDOCUMENTO = readString(dis);
					
					this.SIGLA_SEXO = readString(dis);
					
					this.DOCUMENTO_ANTERIOR = readString(dis);
					
					this.DOCUMENTO_ACTUAL = readString(dis);
					
					this.TDOCUMENTO_ANTERIOR = readString(dis);
					
					this.TDOCUMENTO_ACTUAL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
						this.AFILIADO_ID = (BigDecimal) dis.readObject();
					
						this.HAFILIADOS_ID = (BigDecimal) dis.readObject();
					
					this.NOVEDAD_COD = readString(dis);
					
					this.NOVEDAD_CAMP = readString(dis);
					
						this.R = (BigDecimal) dis.readObject();
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.FECHA_REGISTRO = readString(dis);
					
						this.ORDEN_NOVEDAD = (BigDecimal) dis.readObject();
					
						this.ORDEN_CAMPO = (BigDecimal) dis.readObject();
					
					this.SIGLA_TDOCUMENTO = readString(dis);
					
					this.SIGLA_SEXO = readString(dis);
					
					this.DOCUMENTO_ANTERIOR = readString(dis);
					
					this.DOCUMENTO_ACTUAL = readString(dis);
					
					this.TDOCUMENTO_ANTERIOR = readString(dis);
					
					this.TDOCUMENTO_ACTUAL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.AFILIADO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.HAFILIADOS_ID);
					
					// String
				
						writeString(this.NOVEDAD_COD,dos);
					
					// String
				
						writeString(this.NOVEDAD_CAMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.R);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.FECHA_REGISTRO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDEN_NOVEDAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDEN_CAMPO);
					
					// String
				
						writeString(this.SIGLA_TDOCUMENTO,dos);
					
					// String
				
						writeString(this.SIGLA_SEXO,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ANTERIOR,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ACTUAL,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ANTERIOR,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ACTUAL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AFILIADO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.HAFILIADOS_ID);
					
					// String
				
						writeString(this.NOVEDAD_COD,dos);
					
					// String
				
						writeString(this.NOVEDAD_CAMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.R);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.FECHA_REGISTRO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ORDEN_NOVEDAD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ORDEN_CAMPO);
					
					// String
				
						writeString(this.SIGLA_TDOCUMENTO,dos);
					
					// String
				
						writeString(this.SIGLA_SEXO,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ANTERIOR,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ACTUAL,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ANTERIOR,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ACTUAL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADO_ID="+String.valueOf(AFILIADO_ID));
		sb.append(",HAFILIADOS_ID="+String.valueOf(HAFILIADOS_ID));
		sb.append(",NOVEDAD_COD="+NOVEDAD_COD);
		sb.append(",NOVEDAD_CAMP="+NOVEDAD_CAMP);
		sb.append(",R="+String.valueOf(R));
		sb.append(",VANTERIOR="+VANTERIOR);
		sb.append(",VACTUAL="+VACTUAL);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",FECHA_NACIMIENTO="+FECHA_NACIMIENTO);
		sb.append(",FECHA_REGISTRO="+FECHA_REGISTRO);
		sb.append(",ORDEN_NOVEDAD="+String.valueOf(ORDEN_NOVEDAD));
		sb.append(",ORDEN_CAMPO="+String.valueOf(ORDEN_CAMPO));
		sb.append(",SIGLA_TDOCUMENTO="+SIGLA_TDOCUMENTO);
		sb.append(",SIGLA_SEXO="+SIGLA_SEXO);
		sb.append(",DOCUMENTO_ANTERIOR="+DOCUMENTO_ANTERIOR);
		sb.append(",DOCUMENTO_ACTUAL="+DOCUMENTO_ACTUAL);
		sb.append(",TDOCUMENTO_ANTERIOR="+TDOCUMENTO_ANTERIOR);
		sb.append(",TDOCUMENTO_ACTUAL="+TDOCUMENTO_ACTUAL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_1Struct implements routines.system.IPersistableRow<after_tOracleInput_1Struct> {
    final static byte[] commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];
    static byte[] commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];

	
			    public BigDecimal AFILIADO_ID;

				public BigDecimal getAFILIADO_ID () {
					return this.AFILIADO_ID;
				}

				public Boolean AFILIADO_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADO_IDIsKey(){
				    return false;
				}
				public Integer AFILIADO_IDLength(){
				    return 0;
				}
				public Integer AFILIADO_IDPrecision(){
				    return null;
				}
				public String AFILIADO_IDDefault(){
				
					return "";
				
				}
				public String AFILIADO_IDComment(){
				
				    return "";
				
				}
				public String AFILIADO_IDPattern(){
				
					return "";
				
				}
				public String AFILIADO_IDOriginalDbColumnName(){
				
					return "AFILIADO_ID";
				
				}

				
			    public BigDecimal HAFILIADOS_ID;

				public BigDecimal getHAFILIADOS_ID () {
					return this.HAFILIADOS_ID;
				}

				public Boolean HAFILIADOS_IDIsNullable(){
				    return false;
				}
				public Boolean HAFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer HAFILIADOS_IDLength(){
				    return 0;
				}
				public Integer HAFILIADOS_IDPrecision(){
				    return null;
				}
				public String HAFILIADOS_IDDefault(){
				
					return "";
				
				}
				public String HAFILIADOS_IDComment(){
				
				    return "";
				
				}
				public String HAFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String HAFILIADOS_IDOriginalDbColumnName(){
				
					return "HAFILIADOS_ID";
				
				}

				
			    public String NOVEDAD_COD;

				public String getNOVEDAD_COD () {
					return this.NOVEDAD_COD;
				}

				public Boolean NOVEDAD_CODIsNullable(){
				    return false;
				}
				public Boolean NOVEDAD_CODIsKey(){
				    return false;
				}
				public Integer NOVEDAD_CODLength(){
				    return 5;
				}
				public Integer NOVEDAD_CODPrecision(){
				    return 0;
				}
				public String NOVEDAD_CODDefault(){
				
					return null;
				
				}
				public String NOVEDAD_CODComment(){
				
				    return "";
				
				}
				public String NOVEDAD_CODPattern(){
				
					return "";
				
				}
				public String NOVEDAD_CODOriginalDbColumnName(){
				
					return "NOVEDAD_COD";
				
				}

				
			    public String NOVEDAD_CAMP;

				public String getNOVEDAD_CAMP () {
					return this.NOVEDAD_CAMP;
				}

				public Boolean NOVEDAD_CAMPIsNullable(){
				    return true;
				}
				public Boolean NOVEDAD_CAMPIsKey(){
				    return false;
				}
				public Integer NOVEDAD_CAMPLength(){
				    return 150;
				}
				public Integer NOVEDAD_CAMPPrecision(){
				    return 0;
				}
				public String NOVEDAD_CAMPDefault(){
				
					return null;
				
				}
				public String NOVEDAD_CAMPComment(){
				
				    return "";
				
				}
				public String NOVEDAD_CAMPPattern(){
				
					return "";
				
				}
				public String NOVEDAD_CAMPOriginalDbColumnName(){
				
					return "NOVEDAD_CAMP";
				
				}

				
			    public BigDecimal R;

				public BigDecimal getR () {
					return this.R;
				}

				public Boolean RIsNullable(){
				    return true;
				}
				public Boolean RIsKey(){
				    return false;
				}
				public Integer RLength(){
				    return 0;
				}
				public Integer RPrecision(){
				    return null;
				}
				public String RDefault(){
				
					return "";
				
				}
				public String RComment(){
				
				    return "";
				
				}
				public String RPattern(){
				
					return "";
				
				}
				public String ROriginalDbColumnName(){
				
					return "R";
				
				}

				
			    public String VANTERIOR;

				public String getVANTERIOR () {
					return this.VANTERIOR;
				}

				public Boolean VANTERIORIsNullable(){
				    return true;
				}
				public Boolean VANTERIORIsKey(){
				    return false;
				}
				public Integer VANTERIORLength(){
				    return 2000;
				}
				public Integer VANTERIORPrecision(){
				    return 0;
				}
				public String VANTERIORDefault(){
				
					return null;
				
				}
				public String VANTERIORComment(){
				
				    return "";
				
				}
				public String VANTERIORPattern(){
				
					return "";
				
				}
				public String VANTERIOROriginalDbColumnName(){
				
					return "VANTERIOR";
				
				}

				
			    public String VACTUAL;

				public String getVACTUAL () {
					return this.VACTUAL;
				}

				public Boolean VACTUALIsNullable(){
				    return true;
				}
				public Boolean VACTUALIsKey(){
				    return false;
				}
				public Integer VACTUALLength(){
				    return 2000;
				}
				public Integer VACTUALPrecision(){
				    return 0;
				}
				public String VACTUALDefault(){
				
					return null;
				
				}
				public String VACTUALComment(){
				
				    return "";
				
				}
				public String VACTUALPattern(){
				
					return "";
				
				}
				public String VACTUALOriginalDbColumnName(){
				
					return "VACTUAL";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 100;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 100;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 100;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 100;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String FECHA_NACIMIENTO;

				public String getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return 10;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return 0;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public String FECHA_REGISTRO;

				public String getFECHA_REGISTRO () {
					return this.FECHA_REGISTRO;
				}

				public Boolean FECHA_REGISTROIsNullable(){
				    return true;
				}
				public Boolean FECHA_REGISTROIsKey(){
				    return false;
				}
				public Integer FECHA_REGISTROLength(){
				    return 10;
				}
				public Integer FECHA_REGISTROPrecision(){
				    return 0;
				}
				public String FECHA_REGISTRODefault(){
				
					return null;
				
				}
				public String FECHA_REGISTROComment(){
				
				    return "";
				
				}
				public String FECHA_REGISTROPattern(){
				
					return "";
				
				}
				public String FECHA_REGISTROOriginalDbColumnName(){
				
					return "FECHA_REGISTRO";
				
				}

				
			    public BigDecimal ORDEN_NOVEDAD;

				public BigDecimal getORDEN_NOVEDAD () {
					return this.ORDEN_NOVEDAD;
				}

				public Boolean ORDEN_NOVEDADIsNullable(){
				    return true;
				}
				public Boolean ORDEN_NOVEDADIsKey(){
				    return false;
				}
				public Integer ORDEN_NOVEDADLength(){
				    return 0;
				}
				public Integer ORDEN_NOVEDADPrecision(){
				    return null;
				}
				public String ORDEN_NOVEDADDefault(){
				
					return "";
				
				}
				public String ORDEN_NOVEDADComment(){
				
				    return "";
				
				}
				public String ORDEN_NOVEDADPattern(){
				
					return "";
				
				}
				public String ORDEN_NOVEDADOriginalDbColumnName(){
				
					return "ORDEN_NOVEDAD";
				
				}

				
			    public BigDecimal ORDEN_CAMPO;

				public BigDecimal getORDEN_CAMPO () {
					return this.ORDEN_CAMPO;
				}

				public Boolean ORDEN_CAMPOIsNullable(){
				    return true;
				}
				public Boolean ORDEN_CAMPOIsKey(){
				    return false;
				}
				public Integer ORDEN_CAMPOLength(){
				    return 0;
				}
				public Integer ORDEN_CAMPOPrecision(){
				    return null;
				}
				public String ORDEN_CAMPODefault(){
				
					return "";
				
				}
				public String ORDEN_CAMPOComment(){
				
				    return "";
				
				}
				public String ORDEN_CAMPOPattern(){
				
					return "";
				
				}
				public String ORDEN_CAMPOOriginalDbColumnName(){
				
					return "ORDEN_CAMPO";
				
				}

				
			    public String SIGLA_TDOCUMENTO;

				public String getSIGLA_TDOCUMENTO () {
					return this.SIGLA_TDOCUMENTO;
				}

				public Boolean SIGLA_TDOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean SIGLA_TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer SIGLA_TDOCUMENTOLength(){
				    return 5;
				}
				public Integer SIGLA_TDOCUMENTOPrecision(){
				    return 0;
				}
				public String SIGLA_TDOCUMENTODefault(){
				
					return null;
				
				}
				public String SIGLA_TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String SIGLA_TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String SIGLA_TDOCUMENTOOriginalDbColumnName(){
				
					return "SIGLA_TDOCUMENTO";
				
				}

				
			    public String SIGLA_SEXO;

				public String getSIGLA_SEXO () {
					return this.SIGLA_SEXO;
				}

				public Boolean SIGLA_SEXOIsNullable(){
				    return false;
				}
				public Boolean SIGLA_SEXOIsKey(){
				    return false;
				}
				public Integer SIGLA_SEXOLength(){
				    return 1;
				}
				public Integer SIGLA_SEXOPrecision(){
				    return 0;
				}
				public String SIGLA_SEXODefault(){
				
					return null;
				
				}
				public String SIGLA_SEXOComment(){
				
				    return "";
				
				}
				public String SIGLA_SEXOPattern(){
				
					return "";
				
				}
				public String SIGLA_SEXOOriginalDbColumnName(){
				
					return "SIGLA_SEXO";
				
				}

				
			    public String DOCUMENTO_ANTERIOR;

				public String getDOCUMENTO_ANTERIOR () {
					return this.DOCUMENTO_ANTERIOR;
				}

				public Boolean DOCUMENTO_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_ANTERIORIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_ANTERIORLength(){
				    return 2000;
				}
				public Integer DOCUMENTO_ANTERIORPrecision(){
				    return 0;
				}
				public String DOCUMENTO_ANTERIORDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_ANTERIORComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_ANTERIORPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_ANTERIOROriginalDbColumnName(){
				
					return "DOCUMENTO_ANTERIOR";
				
				}

				
			    public String DOCUMENTO_ACTUAL;

				public String getDOCUMENTO_ACTUAL () {
					return this.DOCUMENTO_ACTUAL;
				}

				public Boolean DOCUMENTO_ACTUALIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_ACTUALIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_ACTUALLength(){
				    return 2000;
				}
				public Integer DOCUMENTO_ACTUALPrecision(){
				    return 0;
				}
				public String DOCUMENTO_ACTUALDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_ACTUALComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_ACTUALPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_ACTUALOriginalDbColumnName(){
				
					return "DOCUMENTO_ACTUAL";
				
				}

				
			    public String TDOCUMENTO_ANTERIOR;

				public String getTDOCUMENTO_ANTERIOR () {
					return this.TDOCUMENTO_ANTERIOR;
				}

				public Boolean TDOCUMENTO_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_ANTERIORIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_ANTERIORLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_ANTERIORPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_ANTERIORDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_ANTERIORComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_ANTERIORPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_ANTERIOROriginalDbColumnName(){
				
					return "TDOCUMENTO_ANTERIOR";
				
				}

				
			    public String TDOCUMENTO_ACTUAL;

				public String getTDOCUMENTO_ACTUAL () {
					return this.TDOCUMENTO_ACTUAL;
				}

				public Boolean TDOCUMENTO_ACTUALIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_ACTUALIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_ACTUALLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_ACTUALPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_ACTUALDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_ACTUALComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_ACTUALPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_ACTUALOriginalDbColumnName(){
				
					return "TDOCUMENTO_ACTUAL";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length) {
				if(length < 1024 && commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length == 0) {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[1024];
				} else {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length);
			strReturn = new String(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length) {
				if(length < 1024 && commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length == 0) {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[1024];
				} else {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length);
			strReturn = new String(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
						this.AFILIADO_ID = (BigDecimal) dis.readObject();
					
						this.HAFILIADOS_ID = (BigDecimal) dis.readObject();
					
					this.NOVEDAD_COD = readString(dis);
					
					this.NOVEDAD_CAMP = readString(dis);
					
						this.R = (BigDecimal) dis.readObject();
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.FECHA_REGISTRO = readString(dis);
					
						this.ORDEN_NOVEDAD = (BigDecimal) dis.readObject();
					
						this.ORDEN_CAMPO = (BigDecimal) dis.readObject();
					
					this.SIGLA_TDOCUMENTO = readString(dis);
					
					this.SIGLA_SEXO = readString(dis);
					
					this.DOCUMENTO_ANTERIOR = readString(dis);
					
					this.DOCUMENTO_ACTUAL = readString(dis);
					
					this.TDOCUMENTO_ANTERIOR = readString(dis);
					
					this.TDOCUMENTO_ACTUAL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
						this.AFILIADO_ID = (BigDecimal) dis.readObject();
					
						this.HAFILIADOS_ID = (BigDecimal) dis.readObject();
					
					this.NOVEDAD_COD = readString(dis);
					
					this.NOVEDAD_CAMP = readString(dis);
					
						this.R = (BigDecimal) dis.readObject();
					
					this.VANTERIOR = readString(dis);
					
					this.VACTUAL = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.FECHA_REGISTRO = readString(dis);
					
						this.ORDEN_NOVEDAD = (BigDecimal) dis.readObject();
					
						this.ORDEN_CAMPO = (BigDecimal) dis.readObject();
					
					this.SIGLA_TDOCUMENTO = readString(dis);
					
					this.SIGLA_SEXO = readString(dis);
					
					this.DOCUMENTO_ANTERIOR = readString(dis);
					
					this.DOCUMENTO_ACTUAL = readString(dis);
					
					this.TDOCUMENTO_ANTERIOR = readString(dis);
					
					this.TDOCUMENTO_ACTUAL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.AFILIADO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.HAFILIADOS_ID);
					
					// String
				
						writeString(this.NOVEDAD_COD,dos);
					
					// String
				
						writeString(this.NOVEDAD_CAMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.R);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.FECHA_REGISTRO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDEN_NOVEDAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDEN_CAMPO);
					
					// String
				
						writeString(this.SIGLA_TDOCUMENTO,dos);
					
					// String
				
						writeString(this.SIGLA_SEXO,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ANTERIOR,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ACTUAL,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ANTERIOR,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ACTUAL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AFILIADO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.HAFILIADOS_ID);
					
					// String
				
						writeString(this.NOVEDAD_COD,dos);
					
					// String
				
						writeString(this.NOVEDAD_CAMP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.R);
					
					// String
				
						writeString(this.VANTERIOR,dos);
					
					// String
				
						writeString(this.VACTUAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.FECHA_REGISTRO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ORDEN_NOVEDAD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ORDEN_CAMPO);
					
					// String
				
						writeString(this.SIGLA_TDOCUMENTO,dos);
					
					// String
				
						writeString(this.SIGLA_SEXO,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ANTERIOR,dos);
					
					// String
				
						writeString(this.DOCUMENTO_ACTUAL,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ANTERIOR,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_ACTUAL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADO_ID="+String.valueOf(AFILIADO_ID));
		sb.append(",HAFILIADOS_ID="+String.valueOf(HAFILIADOS_ID));
		sb.append(",NOVEDAD_COD="+NOVEDAD_COD);
		sb.append(",NOVEDAD_CAMP="+NOVEDAD_CAMP);
		sb.append(",R="+String.valueOf(R));
		sb.append(",VANTERIOR="+VANTERIOR);
		sb.append(",VACTUAL="+VACTUAL);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",FECHA_NACIMIENTO="+FECHA_NACIMIENTO);
		sb.append(",FECHA_REGISTRO="+FECHA_REGISTRO);
		sb.append(",ORDEN_NOVEDAD="+String.valueOf(ORDEN_NOVEDAD));
		sb.append(",ORDEN_CAMPO="+String.valueOf(ORDEN_CAMPO));
		sb.append(",SIGLA_TDOCUMENTO="+SIGLA_TDOCUMENTO);
		sb.append(",SIGLA_SEXO="+SIGLA_SEXO);
		sb.append(",DOCUMENTO_ANTERIOR="+DOCUMENTO_ANTERIOR);
		sb.append(",DOCUMENTO_ACTUAL="+DOCUMENTO_ACTUAL);
		sb.append(",TDOCUMENTO_ANTERIOR="+TDOCUMENTO_ANTERIOR);
		sb.append(",TDOCUMENTO_ACTUAL="+TDOCUMENTO_ACTUAL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tOracleInput_2Process(globalMap);
		tOracleInput_3Process(globalMap);
		tOracleInput_4Process(globalMap);
		tOracleInput_6Process(globalMap);
		tOracleInput_5Process(globalMap);

		row1Struct row1 = new row1Struct();
out1Struct out1 = new out1Struct();
out6Struct out6 = new out6Struct();
out7Struct out7 = new out7Struct();
copyOfout6Struct copyOfout6 = new copyOfout6Struct();
row5Struct row5 = new row5Struct();
row6Struct row6 = new row6Struct();
out2Struct out2 = new out2Struct();








	
	/**
	 * [tAggregateRow_1_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGOUT", false);
		start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfout6");
					}
				
		int tos_count_tAggregateRow_1_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_1 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_1 utilClass_tAggregateRow_1 = new UtilClass_tAggregateRow_1();

	

	class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				String NOVEDAD_COD;
    				String DOCUMENTO;
    				String PRIMER_APELLIDO;
    				String SEGUNDO_APELLIDO;
    				String PRIMER_NOMBRE;
    				String SEGUNDO_NOMBRE;
    				String FECHA_NACIMIENTO;
    				BigDecimal ORDEN_NOVEDAD;
    				BigDecimal ORDEN_CAMPO;
    				String SIGLA_TDOCUMENTO;
    				String SIGLA_SEXO;
    				BigDecimal AFILIADO_ID;
         			String DOCUMENTO_ANTERIOR_max;
         			String DOCUMENTO_ACTUAL_max;
         			String TDOCUMENTO_ANTERIOR_max;
         			String TDOCUMENTO_ACTUAL_max;
         			String VANTERIOR_max;
         			String VACTUAL_max;
         			String NOVEDAD_CAMP_max;
         			String FECHA_REGISTRO_max;
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.NOVEDAD_COD == null) ? 0 : this.NOVEDAD_COD.hashCode());
							
							result = prime * result + ((this.DOCUMENTO == null) ? 0 : this.DOCUMENTO.hashCode());
							
							result = prime * result + ((this.PRIMER_APELLIDO == null) ? 0 : this.PRIMER_APELLIDO.hashCode());
							
							result = prime * result + ((this.SEGUNDO_APELLIDO == null) ? 0 : this.SEGUNDO_APELLIDO.hashCode());
							
							result = prime * result + ((this.PRIMER_NOMBRE == null) ? 0 : this.PRIMER_NOMBRE.hashCode());
							
							result = prime * result + ((this.SEGUNDO_NOMBRE == null) ? 0 : this.SEGUNDO_NOMBRE.hashCode());
							
							result = prime * result + ((this.FECHA_NACIMIENTO == null) ? 0 : this.FECHA_NACIMIENTO.hashCode());
							
							result = prime * result + ((this.ORDEN_NOVEDAD == null) ? 0 : this.ORDEN_NOVEDAD.hashCode());
							
							result = prime * result + ((this.ORDEN_CAMPO == null) ? 0 : this.ORDEN_CAMPO.hashCode());
							
							result = prime * result + ((this.SIGLA_TDOCUMENTO == null) ? 0 : this.SIGLA_TDOCUMENTO.hashCode());
							
							result = prime * result + ((this.SIGLA_SEXO == null) ? 0 : this.SIGLA_SEXO.hashCode());
							
							result = prime * result + ((this.AFILIADO_ID == null) ? 0 : this.AFILIADO_ID.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;
			
							if (this.NOVEDAD_COD == null) {
								if (other.NOVEDAD_COD != null) 
									return false;
							} else if (!this.NOVEDAD_COD.equals(other.NOVEDAD_COD)) 
								return false;
						
							if (this.DOCUMENTO == null) {
								if (other.DOCUMENTO != null) 
									return false;
							} else if (!this.DOCUMENTO.equals(other.DOCUMENTO)) 
								return false;
						
							if (this.PRIMER_APELLIDO == null) {
								if (other.PRIMER_APELLIDO != null) 
									return false;
							} else if (!this.PRIMER_APELLIDO.equals(other.PRIMER_APELLIDO)) 
								return false;
						
							if (this.SEGUNDO_APELLIDO == null) {
								if (other.SEGUNDO_APELLIDO != null) 
									return false;
							} else if (!this.SEGUNDO_APELLIDO.equals(other.SEGUNDO_APELLIDO)) 
								return false;
						
							if (this.PRIMER_NOMBRE == null) {
								if (other.PRIMER_NOMBRE != null) 
									return false;
							} else if (!this.PRIMER_NOMBRE.equals(other.PRIMER_NOMBRE)) 
								return false;
						
							if (this.SEGUNDO_NOMBRE == null) {
								if (other.SEGUNDO_NOMBRE != null) 
									return false;
							} else if (!this.SEGUNDO_NOMBRE.equals(other.SEGUNDO_NOMBRE)) 
								return false;
						
							if (this.FECHA_NACIMIENTO == null) {
								if (other.FECHA_NACIMIENTO != null) 
									return false;
							} else if (!this.FECHA_NACIMIENTO.equals(other.FECHA_NACIMIENTO)) 
								return false;
						
							if (this.ORDEN_NOVEDAD == null) {
								if (other.ORDEN_NOVEDAD != null) 
									return false;
							} else if (!this.ORDEN_NOVEDAD.equals(other.ORDEN_NOVEDAD)) 
								return false;
						
							if (this.ORDEN_CAMPO == null) {
								if (other.ORDEN_CAMPO != null) 
									return false;
							} else if (!this.ORDEN_CAMPO.equals(other.ORDEN_CAMPO)) 
								return false;
						
							if (this.SIGLA_TDOCUMENTO == null) {
								if (other.SIGLA_TDOCUMENTO != null) 
									return false;
							} else if (!this.SIGLA_TDOCUMENTO.equals(other.SIGLA_TDOCUMENTO)) 
								return false;
						
							if (this.SIGLA_SEXO == null) {
								if (other.SIGLA_SEXO != null) 
									return false;
							} else if (!this.SIGLA_SEXO.equals(other.SIGLA_SEXO)) 
								return false;
						
							if (this.AFILIADO_ID == null) {
								if (other.AFILIADO_ID != null) 
									return false;
							} else if (!this.AFILIADO_ID.equals(other.AFILIADO_ID)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
	AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
	java.util.Map<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1>();
	

 



/**
 * [tAggregateRow_1_AGGOUT begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out7");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) 
					globalMap.get( "tHash_Lookup_row9" ))
					;					
					
	

row9Struct row9HashKey = new row9Struct();
row9Struct row9Default = new row9Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfout6Struct copyOfout6_tmp = new copyOfout6Struct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out6");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
					globalMap.get( "tHash_Lookup_row4" ))
					;					
					
	

row4Struct row4HashKey = new row4Struct();
row4Struct row4Default = new row4Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
out7Struct out7_tmp = new out7Struct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) 
					globalMap.get( "tHash_Lookup_row3" ))
					;					
					
	

row3Struct row3HashKey = new row3Struct();
row3Struct row3Default = new row3Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
out6Struct out6_tmp = new out6Struct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
					globalMap.get( "tHash_Lookup_row2" ))
					;					
					
	

row2Struct row2HashKey = new row2Struct();
row2Struct row2Default = new row2Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_1", false);
		start_Hash.put("tOracleInput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_1";
	
	
		int tos_count_tOracleInput_1 = 0;
		
	


	
		    int nb_line_tOracleInput_1 = 0;
		    java.sql.Connection conn_tOracleInput_1 = null;
				conn_tOracleInput_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_1 = false;
				boolean isConnectionWrapped_tOracleInput_1 = !(conn_tOracleInput_1 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_1.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_1 = null;
                if (isConnectionWrapped_tOracleInput_1) {
					unwrappedOraConn_tOracleInput_1 = conn_tOracleInput_1.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_1 != null) {
                        isTimeZoneNull_tOracleInput_1 = (unwrappedOraConn_tOracleInput_1.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_1 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_1).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_1) {
					java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_1 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_1.next()) {
						sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_1 && unwrappedOraConn_tOracleInput_1 != null) {
                        unwrappedOraConn_tOracleInput_1.setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_1).setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_1.setFetchSize(1000);


		    String dbquery_tOracleInput_1 = "SELECT *\nFROM (\n  SELECT     GA.ID AS AFILIADO_ID\n          ,  AFHA.ID AS HAFILIADOS_ID          \n          ,  DECO"
+"DE(AFRN.CODIGO, 'N21', 'N09',  AFRN.CODIGO) AS NOVEDAD_COD\n          ,  AFHA.CAMPO AS NOVEDAD_CAMP\n          ,  ROW_NU"
+"MBER() OVER (PARTITION BY GA.ID,AFRN.CODIGO,AFHA.CAMPO  ORDER BY AFPRO.FECHA_REGISTRO DESC) R        \n          ,  CASE"
+" \n                    WHEN AFRN.CODIGO = 'N01' \n                     AND AFHA.CAMPO = 'FECHA_NACIMIENTO' \n           "
+"         THEN  TO_CHAR(TO_DATE(SUBSTR(AFHA.VANTERIOR, 0, 10),'DD/MM/YYYY'), 'DD/MM/YYYY')\n                    WHEN AFRN"
+".CODIGO = 'N21' \n                     AND AFHA.CAMPO = 'FECHA_DEFUNCION' \n                    THEN  TO_CHAR(TO_DATE(SU"
+"BSTR(AFHA.VANTERIOR, 0, 10),'DD/MM/YYYY'), 'DD/MM/YYYY')\n					ELSE NVL( TDOC_ANT.SIGLA,TRIM(AFHA.VANTERIOR) )\n        "
+"      END  AS VANTERIOR\n          , CASE \n                  WHEN AFRN.CODIGO = 'N01' \n                   AND AFHA.CAM"
+"PO = 'DOCUMENTO' \n                   AND AFHA.VACTUAL IS NULL \n                  THEN GP.DOCUMENTO \n                 "
+" WHEN AFRN.CODIGO = 'N01' \n                   AND AFHA.CAMPO = 'TDOCUMENTOS_ID' \n                   AND AFHA.VACTUAL I"
+"S NULL \n                  THEN TD.SIGLA \n                  WHEN AFRN.CODIGO = 'N01' \n                   AND AFHA.CAMP"
+"O = 'FECHA_NACIMIENTO' \n                  THEN TO_CHAR(TO_DATE(SUBSTR(AFHA.VACTUAL, 0, 10),'DD/MM/YYYY'), 'DD/MM/YYYY')"
+"\n                  WHEN AFRN.CODIGO = 'N21' \n                   AND AFHA.CAMPO = 'FECHA_DEFUNCION' \n                 "
+" THEN TO_CHAR(TO_DATE(SUBSTR(AFHA.VACTUAL, 0, 10),'DD/MM/YYYY'), 'DD/MM/YYYY')\n				  ELSE NVL(  TDOC_ACT.SIGLA, TRIM( T"
+"RIM( TRAILING ',' FROM  AFHA.VACTUAL) ) )\n                END  AS VACTUAL\n          , GP.DOCUMENTO AS DOCUMENTO\n     "
+"     , GP.PRIMER_APELLIDO AS PRIMER_APELLIDO\n          , GP.SEGUNDO_APELLIDO AS SEGUNDO_APELLIDO\n          , GP.PRIMER"
+"_NOMBRE AS PRIMER_NOMBRE\n          , GP.SEGUNDO_NOMBRE AS SEGUNDO_NOMBRE\n          , TO_CHAR(GP.FECHA_NACIMIENTO, 'dd/"
+"mm/YYYY') AS FECHA_NACIMIENTO\n           , DECODE(AFRN.CODIGO, 'N21', TO_CHAR(TO_DATE(SUBSTR(AFHA.VACTUAL, 0, 10),'DD/M"
+"M/YYYY'), 'DD/MM/YYYY'),TO_CHAR(AFPRO.FECHA_REGISTRO, 'dd/mm/YYYY')) AS FECHA_REGISTRO                    \n          , "
+"AFRN.ORDEN AS ORDEN_NOVEDAD\n          , CASE \n              WHEN AFHA.CAMPO = 'TDOCUMENTOS_ID' \n              THEN 1 "
+"\n              WHEN AFHA.CAMPO = 'DOCUMENTO' \n              THEN 1\n              WHEN AFHA.CAMPO = 'FECHA_NACIMIENTO'"
+" \n              THEN 2\n            ELSE 3\n            END AS ORDEN_CAMPO\n          , TD.SIGLA AS SIGLA_TDOCUMENTO\n "
+"         , SEX.SIGLA AS SIGLA_SEXO         \n          , CASE\n              WHEN AFRN.CODIGO = 'N01' \n               A"
+"ND AFHA.CAMPO = 'DOCUMENTO'\n              THEN TRIM(AFHA.VANTERIOR)\n            END AS DOCUMENTO_ANTERIOR\n          ,"
+" CASE\n              WHEN AFRN.CODIGO = 'N01' \n               AND AFHA.CAMPO = 'DOCUMENTO'\n              THEN TRIM( TR"
+"IM( TRAILING ',' FROM  AFHA.VACTUAL) )\n            END AS DOCUMENTO_ACTUAL\n          , CASE\n              WHEN AFRN.C"
+"ODIGO = 'N01' \n               AND AFHA.CAMPO = 'TDOCUMENTOS_ID'\n              THEN TDOC_ANT.SIGLA\n            END AS "
+"TDOCUMENTO_ANTERIOR\n         , CASE\n              WHEN AFRN.CODIGO = 'N01' \n               AND AFHA.CAMPO = 'TDOCUMEN"
+"TOS_ID'\n              THEN TDOC_ACT.SIGLA\n            END AS TDOCUMENTO_ACTUAL\n  FROM AFI_RNOVEDADES AFRN\n  INNER JO"
+"IN AFI_HAFILIADOS AFHA ON AFHA.RNOVEDADES_ID = AFRN.ID \n  INNER JOIN AFI_PROCESOS AFPRO ON AFPRO.ID = AFHA.PROCESOS_ID"
+"\n  INNER JOIN GEN_AFILIADOS GA ON GA.ID = AFHA.AFILIADOS_ID\n  INNER JOIN AFI_PLANAFILIACIONES AFPL ON  AFPL.ID  = GA.PL"
+"ANAFILIACIONES_ID \n  INNER JOIN GEN_PERSONAS GP ON GP.ID = GA.PERSONAS_ID\n  INNER JOIN GEN_TDOCUMENTOS TD ON TD.ID = G"
+"P.TDOCUMENTOS_ID\n  INNER JOIN GEN_SEXOS SEX ON SEX.ID = GP.SEXO_ID\n  INNER JOIN GEN_DIVIPOLA DIV ON DIV.ID = GP.LUGAR_"
+"RESIDENCIA\n  LEFT JOIN GEN_TDOCUMENTOS TDOC_ANT ON ( TO_CHAR(TDOC_ANT.ID) =  TRIM(AFHA.VANTERIOR) AND AFHA.CAMPO = 'TDO"
+"CUMENTOS_ID' AND AFRN.CODIGO = 'N01' )\n  LEFT JOIN GEN_TDOCUMENTOS TDOC_ACT ON ( TO_CHAR(TDOC_ACT.ID) =  TRIM(AFHA.VACT"
+"UAL) AND AFHA.CAMPO = 'TDOCUMENTOS_ID' AND AFRN.CODIGO = 'N01' )\n  WHERE  AFRN.CODIGO IN ('N01', 'N02', 'N03', 'N04', '"
+"N09','N14', 'N17', 'N21')\n    AND AFPRO.FECHA_REGISTRO BETWEEN TO_DATE('"+context.FECHA_INICIO+"', 'DD/MM/YYYY') \n                                 AND SYSDATE + 1  \n    AND AFHA.ESTREGISTRO_ID = 1\n    AND AFPRO.E"
+"STREGISTRO_ID = 1\n    AND GA.ESTREGISTRO_ID = 1\n    AND GP.ESTREGISTRO_ID = 1\n) WHERE R = 1";
		    

		    globalMap.put("tOracleInput_1_QUERY",dbquery_tOracleInput_1);

		    java.sql.ResultSet rs_tOracleInput_1 = null;

		    try {
		    	rs_tOracleInput_1 = stmt_tOracleInput_1.executeQuery(dbquery_tOracleInput_1);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1.getMetaData();
		    	int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1.getColumnCount();

		    String tmpContent_tOracleInput_1 = null;
		    
		    
		    while (rs_tOracleInput_1.next()) {
		        nb_line_tOracleInput_1++;
		        
							if(colQtyInRs_tOracleInput_1 < 1) {
								row1.AFILIADO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(1) != null) {
						row1.AFILIADO_ID = rs_tOracleInput_1.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 2) {
								row1.HAFILIADOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(2) != null) {
						row1.HAFILIADOS_ID = rs_tOracleInput_1.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 3) {
								row1.NOVEDAD_COD = null;
							} else {
	                         		
        	row1.NOVEDAD_COD = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 4) {
								row1.NOVEDAD_CAMP = null;
							} else {
	                         		
        	row1.NOVEDAD_CAMP = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 5) {
								row1.R = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(5) != null) {
						row1.R = rs_tOracleInput_1.getBigDecimal(5);
					} else {
				
						row1.R = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 6) {
								row1.VANTERIOR = null;
							} else {
	                         		
        	row1.VANTERIOR = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 7) {
								row1.VACTUAL = null;
							} else {
	                         		
        	row1.VACTUAL = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 8) {
								row1.DOCUMENTO = null;
							} else {
	                         		
        	row1.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 9) {
								row1.PRIMER_APELLIDO = null;
							} else {
	                         		
        	row1.PRIMER_APELLIDO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 9, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 10) {
								row1.SEGUNDO_APELLIDO = null;
							} else {
	                         		
        	row1.SEGUNDO_APELLIDO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 10, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 11) {
								row1.PRIMER_NOMBRE = null;
							} else {
	                         		
        	row1.PRIMER_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 11, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 12) {
								row1.SEGUNDO_NOMBRE = null;
							} else {
	                         		
        	row1.SEGUNDO_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 12, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 13) {
								row1.FECHA_NACIMIENTO = null;
							} else {
	                         		
        	row1.FECHA_NACIMIENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 13, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 14) {
								row1.FECHA_REGISTRO = null;
							} else {
	                         		
        	row1.FECHA_REGISTRO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 14, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 15) {
								row1.ORDEN_NOVEDAD = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(15) != null) {
						row1.ORDEN_NOVEDAD = rs_tOracleInput_1.getBigDecimal(15);
					} else {
				
						row1.ORDEN_NOVEDAD = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 16) {
								row1.ORDEN_CAMPO = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(16) != null) {
						row1.ORDEN_CAMPO = rs_tOracleInput_1.getBigDecimal(16);
					} else {
				
						row1.ORDEN_CAMPO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 17) {
								row1.SIGLA_TDOCUMENTO = null;
							} else {
	                         		
        	row1.SIGLA_TDOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 17, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 18) {
								row1.SIGLA_SEXO = null;
							} else {
	                         		
        	row1.SIGLA_SEXO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 18, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 19) {
								row1.DOCUMENTO_ANTERIOR = null;
							} else {
	                         		
        	row1.DOCUMENTO_ANTERIOR = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 19, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 20) {
								row1.DOCUMENTO_ACTUAL = null;
							} else {
	                         		
        	row1.DOCUMENTO_ACTUAL = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 20, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 21) {
								row1.TDOCUMENTO_ANTERIOR = null;
							} else {
	                         		
        	row1.TDOCUMENTO_ANTERIOR = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 21, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 22) {
								row1.TDOCUMENTO_ACTUAL = null;
							} else {
	                         		
        	row1.TDOCUMENTO_ACTUAL = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 22, false);
		                    }
					




 



/**
 * [tOracleInput_1 begin ] stop
 */
	
	/**
	 * [tOracleInput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 


	tos_count_tOracleInput_1++;

/**
 * [tOracleInput_1 main ] stop
 */
	
	/**
	 * [tOracleInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
						row2Struct row2 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row2" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow2 = false;
       		  	    	
       		  	    	
 							row2Struct row2ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row2HashKey.AFILIADO_ID = row1.AFILIADO_ID ;
                        		    		

								
		                        	row2HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row2.lookup( row2HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row2.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow2 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow2 = true;
			           		  	} // G 21
                    		  	
                    		

							
                    		  	 
							

								while ((tHash_Lookup_row2 != null && tHash_Lookup_row2.hasNext()) || forceLooprow2) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row2'
									
                    		  	 
							   
                    		  	 
	       		  	    	row2Struct fromLookup_row2 = null;
							row2 = row2Default;
										 
							
								
								if(!forceLooprow2) { // G 46
								
							
								 
							
								
								fromLookup_row2 = tHash_Lookup_row2.next();

							

							if(fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow2 = false;
									 	
							
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out1 = null;


// # Output table : 'out1'
// # Filter conditions 
if( 

row2.AFILIADO_ID == null

 ) {
out1_tmp.AFILIADO_ID = row1.AFILIADO_ID ;
out1_tmp.HAFILIADOS_ID = row1.HAFILIADOS_ID ;
out1_tmp.NOVEDAD_COD = row1.NOVEDAD_COD ;
out1_tmp.NOVEDAD_CAMP = row1.NOVEDAD_CAMP ;
out1_tmp.VANTERIOR = row1.VANTERIOR ;
out1_tmp.VACTUAL = row1.VACTUAL ;
out1_tmp.DOCUMENTO = row1.DOCUMENTO ;
out1_tmp.PRIMER_APELLIDO = row1.PRIMER_APELLIDO ;
out1_tmp.SEGUNDO_APELLIDO = row1.SEGUNDO_APELLIDO ;
out1_tmp.PRIMER_NOMBRE = row1.PRIMER_NOMBRE ;
out1_tmp.SEGUNDO_NOMBRE = row1.SEGUNDO_NOMBRE ;
out1_tmp.FECHA_NACIMIENTO = row1.FECHA_NACIMIENTO ;
out1_tmp.FECHA_REGISTRO = row1.FECHA_REGISTRO ;
out1_tmp.ORDEN_NOVEDAD = row1.ORDEN_NOVEDAD ;
out1_tmp.ORDEN_CAMPO = row1.ORDEN_CAMPO ;
out1_tmp.SIGLA_TDOCUMENTO = row1.SIGLA_TDOCUMENTO ;
out1_tmp.SIGLA_SEXO = row1.SIGLA_SEXO ;
out1_tmp.DOCUMENTO_ANTERIOR = row1.DOCUMENTO_ANTERIOR ;
out1_tmp.DOCUMENTO_ACTUAL = row1.DOCUMENTO_ACTUAL ;
out1_tmp.TDOCUMENTO_ANTERIOR = row1.TDOCUMENTO_ANTERIOR ;
out1_tmp.TDOCUMENTO_ACTUAL = row1.TDOCUMENTO_ACTUAL ;
out1 = out1_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
						row3Struct row3 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row3" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow3 = false;
       		  	    	
       		  	    	
 							row3Struct row3ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    row3HashKey.HAFILIADOS_ID = out1.HAFILIADOS_ID ;
                        		    		
                        		    		    row3HashKey.NOVEDAD = out1.NOVEDAD_COD ;
                        		    		

								
		                        	row3HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row3.lookup( row3HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row3.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow3 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow3 = true;
			           		  	} // G 21
                    		  	
                    		

							
                    		  	 
							

								while ((tHash_Lookup_row3 != null && tHash_Lookup_row3.hasNext()) || forceLooprow3) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row3'
									
                    		  	 
							   
                    		  	 
	       		  	    	row3Struct fromLookup_row3 = null;
							row3 = row3Default;
										 
							
								
								if(!forceLooprow3) { // G 46
								
							
								 
							
								
								fromLookup_row3 = tHash_Lookup_row3.next();

							

							if(fromLookup_row3 != null) {
								row3 = fromLookup_row3;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow3 = false;
									 	
							
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

out6 = null;


// # Output table : 'out6'
// # Filter conditions 
if( 

row3.HAFILIADOS_ID ==null

 ) {
out6_tmp.AFILIADO_ID = out1.AFILIADO_ID ;
out6_tmp.HAFILIADOS_ID = out1.HAFILIADOS_ID ;
out6_tmp.NOVEDAD_COD = out1.NOVEDAD_COD ;
out6_tmp.NOVEDAD_CAMP = out1.NOVEDAD_CAMP ;
out6_tmp.VANTERIOR = out1.VANTERIOR ;
out6_tmp.VACTUAL = out1.VACTUAL ;
out6_tmp.DOCUMENTO = out1.DOCUMENTO ;
out6_tmp.PRIMER_APELLIDO = out1.PRIMER_APELLIDO ;
out6_tmp.SEGUNDO_APELLIDO = out1.SEGUNDO_APELLIDO ;
out6_tmp.PRIMER_NOMBRE = out1.PRIMER_NOMBRE ;
out6_tmp.SEGUNDO_NOMBRE = out1.SEGUNDO_NOMBRE ;
out6_tmp.FECHA_NACIMIENTO = out1.FECHA_NACIMIENTO ;
out6_tmp.FECHA_REGISTRO = out1.FECHA_REGISTRO ;
out6_tmp.ORDEN_NOVEDAD = out1.ORDEN_NOVEDAD ;
out6_tmp.ORDEN_CAMPO = out1.ORDEN_CAMPO ;
out6_tmp.SIGLA_TDOCUMENTO = out1.SIGLA_TDOCUMENTO ;
out6_tmp.SIGLA_SEXO = out1.SIGLA_SEXO ;
out6_tmp.DOCUMENTO_ANTERIOR = out1.DOCUMENTO_ANTERIOR ;
out6_tmp.DOCUMENTO_ACTUAL = out1.DOCUMENTO_ACTUAL ;
out6_tmp.TDOCUMENTO_ANTERIOR = out1.TDOCUMENTO_ANTERIOR ;
out6_tmp.TDOCUMENTO_ACTUAL = out1.TDOCUMENTO_ACTUAL ;
out6 = out6_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "out6"
if(out6 != null) { 



	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out6"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
						row4Struct row4 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_6 = false;
		boolean mainRowRejected_tMap_6 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row4" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow4 = false;
       		  	    	
       		  	    	
 							row4Struct row4ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    row4HashKey.AFILIADOS_ID = out6.AFILIADO_ID ;
                        		    		
                        		    		    row4HashKey.NOVEDAD = out6.NOVEDAD_COD ;
                        		    		

								
		                        	row4HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row4.lookup( row4HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row4.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow4 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow4 = true;
			           		  	} // G 21
                    		  	
                    		

							
                    		  	 
							

								while ((tHash_Lookup_row4 != null && tHash_Lookup_row4.hasNext()) || forceLooprow4) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row4'
									
                    		  	 
							   
                    		  	 
	       		  	    	row4Struct fromLookup_row4 = null;
							row4 = row4Default;
										 
							
								
								if(!forceLooprow4) { // G 46
								
							
								 
							
								
								fromLookup_row4 = tHash_Lookup_row4.next();

							

							if(fromLookup_row4 != null) {
								row4 = fromLookup_row4;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow4 = false;
									 	
							
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

out7 = null;


// # Output table : 'out7'
// # Filter conditions 
if( 

row4.AFILIADOS_ID == null

 ) {
out7_tmp.NOVEDAD_COD = out6.NOVEDAD_COD ;
out7_tmp.NOVEDAD_CAMP = out6.NOVEDAD_CAMP ;
out7_tmp.VANTERIOR = out6.VANTERIOR ;
out7_tmp.VACTUAL = out6.VACTUAL ;
out7_tmp.DOCUMENTO = out6.DOCUMENTO ;
out7_tmp.PRIMER_APELLIDO = out6.PRIMER_APELLIDO ;
out7_tmp.SEGUNDO_APELLIDO = out6.SEGUNDO_APELLIDO ;
out7_tmp.PRIMER_NOMBRE = out6.PRIMER_NOMBRE ;
out7_tmp.SEGUNDO_NOMBRE = out6.SEGUNDO_NOMBRE ;
out7_tmp.FECHA_NACIMIENTO = out6.FECHA_NACIMIENTO ;
out7_tmp.FECHA_REGISTRO = out6.FECHA_REGISTRO ;
out7_tmp.ORDEN_NOVEDAD = out6.ORDEN_NOVEDAD ;
out7_tmp.ORDEN_CAMPO = out6.ORDEN_CAMPO ;
out7_tmp.SIGLA_TDOCUMENTO = out6.SIGLA_TDOCUMENTO ;
out7_tmp.SIGLA_SEXO = out6.SIGLA_SEXO ;
out7_tmp.DOCUMENTO_ANTERIOR = out6.DOCUMENTO_ANTERIOR ;
out7_tmp.DOCUMENTO_ACTUAL = out6.DOCUMENTO_ACTUAL ;
out7_tmp.TDOCUMENTO_ANTERIOR = out6.TDOCUMENTO_ANTERIOR ;
out7_tmp.TDOCUMENTO_ACTUAL = out6.TDOCUMENTO_ACTUAL ;
out7_tmp.AFILIADO_ID = out6.AFILIADO_ID ;
out7 = out7_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "out7"
if(out7 != null) { 



	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out7"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
						row9Struct row9 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_4 = false;
		boolean mainRowRejected_tMap_4 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row9" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow9 = false;
       		  	    	
       		  	    	
 							row9Struct row9ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    row9HashKey.AFILIADOS_ID = out7.AFILIADO_ID ;
                        		    		
                        		    		    row9HashKey.NOVEDAD = out7.NOVEDAD_COD ;
                        		    		

								
		                        	row9HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row9.lookup( row9HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row9.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow9 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow9 = true;
			           		  	} // G 21
                    		  	
                    		

							
                    		  	 
							

								while ((tHash_Lookup_row9 != null && tHash_Lookup_row9.hasNext()) || forceLooprow9) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row9'
									
                    		  	 
							   
                    		  	 
	       		  	    	row9Struct fromLookup_row9 = null;
							row9 = row9Default;
										 
							
								
								if(!forceLooprow9) { // G 46
								
							
								 
							
								
								fromLookup_row9 = tHash_Lookup_row9.next();

							

							if(fromLookup_row9 != null) {
								row9 = fromLookup_row9;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow9 = false;
									 	
							
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

copyOfout6 = null;


// # Output table : 'copyOfout6'
// # Filter conditions 
if( 

row9.AFILIADOS_ID ==null

 ) {
copyOfout6_tmp.NOVEDAD_COD = out7.NOVEDAD_COD;
copyOfout6_tmp.NOVEDAD_CAMP = out7.NOVEDAD_CAMP;
copyOfout6_tmp.VANTERIOR = out7.VANTERIOR;
copyOfout6_tmp.VACTUAL = out7.VACTUAL;
copyOfout6_tmp.DOCUMENTO = out7.DOCUMENTO;
copyOfout6_tmp.PRIMER_APELLIDO = out7.PRIMER_APELLIDO;
copyOfout6_tmp.SEGUNDO_APELLIDO = out7.SEGUNDO_APELLIDO;
copyOfout6_tmp.PRIMER_NOMBRE = out7.PRIMER_NOMBRE;
copyOfout6_tmp.SEGUNDO_NOMBRE = out7.SEGUNDO_NOMBRE;
copyOfout6_tmp.FECHA_NACIMIENTO = out7.FECHA_NACIMIENTO;
copyOfout6_tmp.FECHA_REGISTRO = out7.FECHA_REGISTRO;
copyOfout6_tmp.ORDEN_NOVEDAD = out7.ORDEN_NOVEDAD;
copyOfout6_tmp.ORDEN_CAMPO = out7.ORDEN_CAMPO;
copyOfout6_tmp.SIGLA_TDOCUMENTO = out7.SIGLA_TDOCUMENTO;
copyOfout6_tmp.SIGLA_SEXO = out7.SIGLA_SEXO;
copyOfout6_tmp.DOCUMENTO_ANTERIOR = out7.DOCUMENTO_ANTERIOR;
copyOfout6_tmp.DOCUMENTO_ACTUAL = out7.DOCUMENTO_ACTUAL;
copyOfout6_tmp.TDOCUMENTO_ANTERIOR = out7.TDOCUMENTO_ANTERIOR;
copyOfout6_tmp.TDOCUMENTO_ACTUAL = out7.TDOCUMENTO_ACTUAL;
copyOfout6_tmp.AFILIADO_ID = out7.AFILIADO_ID;
copyOfout6 = copyOfout6_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "copyOfout6"
if(copyOfout6 != null) { 



	
	/**
	 * [tAggregateRow_1_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfout6"
						
						);
					}
					
	
operation_finder_tAggregateRow_1.NOVEDAD_COD = copyOfout6.NOVEDAD_COD;
			operation_finder_tAggregateRow_1.DOCUMENTO = copyOfout6.DOCUMENTO;
			operation_finder_tAggregateRow_1.PRIMER_APELLIDO = copyOfout6.PRIMER_APELLIDO;
			operation_finder_tAggregateRow_1.SEGUNDO_APELLIDO = copyOfout6.SEGUNDO_APELLIDO;
			operation_finder_tAggregateRow_1.PRIMER_NOMBRE = copyOfout6.PRIMER_NOMBRE;
			operation_finder_tAggregateRow_1.SEGUNDO_NOMBRE = copyOfout6.SEGUNDO_NOMBRE;
			operation_finder_tAggregateRow_1.FECHA_NACIMIENTO = copyOfout6.FECHA_NACIMIENTO;
			operation_finder_tAggregateRow_1.ORDEN_NOVEDAD = copyOfout6.ORDEN_NOVEDAD;
			operation_finder_tAggregateRow_1.ORDEN_CAMPO = copyOfout6.ORDEN_CAMPO;
			operation_finder_tAggregateRow_1.SIGLA_TDOCUMENTO = copyOfout6.SIGLA_TDOCUMENTO;
			operation_finder_tAggregateRow_1.SIGLA_SEXO = copyOfout6.SIGLA_SEXO;
			operation_finder_tAggregateRow_1.AFILIADO_ID = copyOfout6.AFILIADO_ID;
			

	operation_finder_tAggregateRow_1.hashCodeDirty = true;
	
	operation_result_tAggregateRow_1 = hash_tAggregateRow_1.get(operation_finder_tAggregateRow_1);

	
		boolean isFirstAdd_tAggregateRow_1 = false;
	

	if(operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

		operation_result_tAggregateRow_1.NOVEDAD_COD = operation_finder_tAggregateRow_1.NOVEDAD_COD;
				operation_result_tAggregateRow_1.DOCUMENTO = operation_finder_tAggregateRow_1.DOCUMENTO;
				operation_result_tAggregateRow_1.PRIMER_APELLIDO = operation_finder_tAggregateRow_1.PRIMER_APELLIDO;
				operation_result_tAggregateRow_1.SEGUNDO_APELLIDO = operation_finder_tAggregateRow_1.SEGUNDO_APELLIDO;
				operation_result_tAggregateRow_1.PRIMER_NOMBRE = operation_finder_tAggregateRow_1.PRIMER_NOMBRE;
				operation_result_tAggregateRow_1.SEGUNDO_NOMBRE = operation_finder_tAggregateRow_1.SEGUNDO_NOMBRE;
				operation_result_tAggregateRow_1.FECHA_NACIMIENTO = operation_finder_tAggregateRow_1.FECHA_NACIMIENTO;
				operation_result_tAggregateRow_1.ORDEN_NOVEDAD = operation_finder_tAggregateRow_1.ORDEN_NOVEDAD;
				operation_result_tAggregateRow_1.ORDEN_CAMPO = operation_finder_tAggregateRow_1.ORDEN_CAMPO;
				operation_result_tAggregateRow_1.SIGLA_TDOCUMENTO = operation_finder_tAggregateRow_1.SIGLA_TDOCUMENTO;
				operation_result_tAggregateRow_1.SIGLA_SEXO = operation_finder_tAggregateRow_1.SIGLA_SEXO;
				operation_result_tAggregateRow_1.AFILIADO_ID = operation_finder_tAggregateRow_1.AFILIADO_ID;
				
		
		
			isFirstAdd_tAggregateRow_1 = true;
		

		hash_tAggregateRow_1.put(operation_result_tAggregateRow_1, operation_result_tAggregateRow_1);
	
	} // G_OutMain_AggR_001


	
				if(copyOfout6.DOCUMENTO_ANTERIOR != null) { // G_OutMain_AggR_546
				
					if( 
						
							operation_result_tAggregateRow_1.DOCUMENTO_ANTERIOR_max == null || copyOfout6.DOCUMENTO_ANTERIOR.compareTo(operation_result_tAggregateRow_1.DOCUMENTO_ANTERIOR_max) > 0
						
					) {
						operation_result_tAggregateRow_1.DOCUMENTO_ANTERIOR_max = copyOfout6.DOCUMENTO_ANTERIOR;
					}
					
				} // G_OutMain_AggR_546
				
				if(copyOfout6.DOCUMENTO_ACTUAL != null) { // G_OutMain_AggR_546
				
					if( 
						
							operation_result_tAggregateRow_1.DOCUMENTO_ACTUAL_max == null || copyOfout6.DOCUMENTO_ACTUAL.compareTo(operation_result_tAggregateRow_1.DOCUMENTO_ACTUAL_max) > 0
						
					) {
						operation_result_tAggregateRow_1.DOCUMENTO_ACTUAL_max = copyOfout6.DOCUMENTO_ACTUAL;
					}
					
				} // G_OutMain_AggR_546
				
				if(copyOfout6.TDOCUMENTO_ANTERIOR != null) { // G_OutMain_AggR_546
				
					if( 
						
							operation_result_tAggregateRow_1.TDOCUMENTO_ANTERIOR_max == null || copyOfout6.TDOCUMENTO_ANTERIOR.compareTo(operation_result_tAggregateRow_1.TDOCUMENTO_ANTERIOR_max) > 0
						
					) {
						operation_result_tAggregateRow_1.TDOCUMENTO_ANTERIOR_max = copyOfout6.TDOCUMENTO_ANTERIOR;
					}
					
				} // G_OutMain_AggR_546
				
				if(copyOfout6.TDOCUMENTO_ACTUAL != null) { // G_OutMain_AggR_546
				
					if( 
						
							operation_result_tAggregateRow_1.TDOCUMENTO_ACTUAL_max == null || copyOfout6.TDOCUMENTO_ACTUAL.compareTo(operation_result_tAggregateRow_1.TDOCUMENTO_ACTUAL_max) > 0
						
					) {
						operation_result_tAggregateRow_1.TDOCUMENTO_ACTUAL_max = copyOfout6.TDOCUMENTO_ACTUAL;
					}
					
				} // G_OutMain_AggR_546
				
				if(copyOfout6.VANTERIOR != null) { // G_OutMain_AggR_546
				
					if( 
						
							operation_result_tAggregateRow_1.VANTERIOR_max == null || copyOfout6.VANTERIOR.compareTo(operation_result_tAggregateRow_1.VANTERIOR_max) > 0
						
					) {
						operation_result_tAggregateRow_1.VANTERIOR_max = copyOfout6.VANTERIOR;
					}
					
				} // G_OutMain_AggR_546
				
				if(copyOfout6.VACTUAL != null) { // G_OutMain_AggR_546
				
					if( 
						
							operation_result_tAggregateRow_1.VACTUAL_max == null || copyOfout6.VACTUAL.compareTo(operation_result_tAggregateRow_1.VACTUAL_max) > 0
						
					) {
						operation_result_tAggregateRow_1.VACTUAL_max = copyOfout6.VACTUAL;
					}
					
				} // G_OutMain_AggR_546
				
				if(copyOfout6.NOVEDAD_CAMP != null) { // G_OutMain_AggR_546
				
					if( 
						
							operation_result_tAggregateRow_1.NOVEDAD_CAMP_max == null || copyOfout6.NOVEDAD_CAMP.compareTo(operation_result_tAggregateRow_1.NOVEDAD_CAMP_max) > 0
						
					) {
						operation_result_tAggregateRow_1.NOVEDAD_CAMP_max = copyOfout6.NOVEDAD_CAMP;
					}
					
				} // G_OutMain_AggR_546
				
				if(copyOfout6.FECHA_REGISTRO != null) { // G_OutMain_AggR_546
				
					if( 
						
							operation_result_tAggregateRow_1.FECHA_REGISTRO_max == null || copyOfout6.FECHA_REGISTRO.compareTo(operation_result_tAggregateRow_1.FECHA_REGISTRO_max) > 0
						
					) {
						operation_result_tAggregateRow_1.FECHA_REGISTRO_max = copyOfout6.FECHA_REGISTRO;
					}
					
				} // G_OutMain_AggR_546
				


 


	tos_count_tAggregateRow_1_AGGOUT++;

/**
 * [tAggregateRow_1_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_end ] stop
 */

} // End of branch "copyOfout6"



	
		} // close loop of lookup 'row9' // G_TM_M_043
	
	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_end ] stop
 */

} // End of branch "out7"



	
		} // close loop of lookup 'row4' // G_TM_M_043
	
	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_end ] stop
 */

} // End of branch "out6"



	
		} // close loop of lookup 'row3' // G_TM_M_043
	
	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */

} // End of branch "out1"



	
		} // close loop of lookup 'row2' // G_TM_M_043
	
	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

}
}finally{
	if (rs_tOracleInput_1 != null) {
		rs_tOracleInput_1.close();
	}
	if (stmt_tOracleInput_1 != null) {
		stmt_tOracleInput_1.close();
	}
}

globalMap.put("tOracleInput_1_NB_LINE",nb_line_tOracleInput_1);
 

ok_Hash.put("tOracleInput_1", true);
end_Hash.put("tOracleInput_1", System.currentTimeMillis());




/**
 * [tOracleInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row2 != null) {
						tHash_Lookup_row2.endGet();
					}
					globalMap.remove( "tHash_Lookup_row2" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row3 != null) {
						tHash_Lookup_row3.endGet();
					}
					globalMap.remove( "tHash_Lookup_row3" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row4 != null) {
						tHash_Lookup_row4.endGet();
					}
					globalMap.remove( "tHash_Lookup_row4" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out6");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row9 != null) {
						tHash_Lookup_row9.endGet();
					}
					globalMap.remove( "tHash_Lookup_row9" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out7");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfout6");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_1_AGGOUT", true);
end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGOUT end ] stop
 */


	
	/**
	 * [tSortRow_2_SortOut begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_2_SortOut", false);
		start_Hash.put("tSortRow_2_SortOut", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortOut";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tSortRow_2_SortOut = 0;
		


class Comparablerow5Struct extends row5Struct implements Comparable<Comparablerow5Struct> {
	
	public int compareTo(Comparablerow5Struct other) {

		if(this.PRIMER_APELLIDO == null && other.PRIMER_APELLIDO != null){
			return -1;
						
		}else if(this.PRIMER_APELLIDO != null && other.PRIMER_APELLIDO == null){
			return 1;
						
		}else if(this.PRIMER_APELLIDO != null && other.PRIMER_APELLIDO != null){
			if(!this.PRIMER_APELLIDO.equals(other.PRIMER_APELLIDO)){
				return this.PRIMER_APELLIDO.compareTo(other.PRIMER_APELLIDO);
			}
		}
		if(this.SEGUNDO_APELLIDO == null && other.SEGUNDO_APELLIDO != null){
			return -1;
						
		}else if(this.SEGUNDO_APELLIDO != null && other.SEGUNDO_APELLIDO == null){
			return 1;
						
		}else if(this.SEGUNDO_APELLIDO != null && other.SEGUNDO_APELLIDO != null){
			if(!this.SEGUNDO_APELLIDO.equals(other.SEGUNDO_APELLIDO)){
				return this.SEGUNDO_APELLIDO.compareTo(other.SEGUNDO_APELLIDO);
			}
		}
		if(this.PRIMER_NOMBRE == null && other.PRIMER_NOMBRE != null){
			return -1;
						
		}else if(this.PRIMER_NOMBRE != null && other.PRIMER_NOMBRE == null){
			return 1;
						
		}else if(this.PRIMER_NOMBRE != null && other.PRIMER_NOMBRE != null){
			if(!this.PRIMER_NOMBRE.equals(other.PRIMER_NOMBRE)){
				return this.PRIMER_NOMBRE.compareTo(other.PRIMER_NOMBRE);
			}
		}
		if(this.SEGUNDO_NOMBRE == null && other.SEGUNDO_NOMBRE != null){
			return -1;
						
		}else if(this.SEGUNDO_NOMBRE != null && other.SEGUNDO_NOMBRE == null){
			return 1;
						
		}else if(this.SEGUNDO_NOMBRE != null && other.SEGUNDO_NOMBRE != null){
			if(!this.SEGUNDO_NOMBRE.equals(other.SEGUNDO_NOMBRE)){
				return this.SEGUNDO_NOMBRE.compareTo(other.SEGUNDO_NOMBRE);
			}
		}
		if(this.ORDEN_NOVEDAD == null && other.ORDEN_NOVEDAD != null){
			return -1;
						
		}else if(this.ORDEN_NOVEDAD != null && other.ORDEN_NOVEDAD == null){
			return 1;
						
		}else if(this.ORDEN_NOVEDAD != null && other.ORDEN_NOVEDAD != null){
			if(!this.ORDEN_NOVEDAD.equals(other.ORDEN_NOVEDAD)){
				return this.ORDEN_NOVEDAD.compareTo(other.ORDEN_NOVEDAD);
			}
		}
		if(this.ORDEN_CAMPO == null && other.ORDEN_CAMPO != null){
			return -1;
						
		}else if(this.ORDEN_CAMPO != null && other.ORDEN_CAMPO == null){
			return 1;
						
		}else if(this.ORDEN_CAMPO != null && other.ORDEN_CAMPO != null){
			if(!this.ORDEN_CAMPO.equals(other.ORDEN_CAMPO)){
				return this.ORDEN_CAMPO.compareTo(other.ORDEN_CAMPO);
			}
		}
		return 0;
	}
}

java.util.List<Comparablerow5Struct> list_tSortRow_2_SortOut = new java.util.ArrayList<Comparablerow5Struct>();


 



/**
 * [tSortRow_2_SortOut begin ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGIN", false);
		start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	
		int tos_count_tAggregateRow_1_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1.values();

globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

for(AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600



 



/**
 * [tAggregateRow_1_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	

            				    row5.NOVEDAD_COD = aggregated_row_tAggregateRow_1.NOVEDAD_COD;
            				    
                                row5.NOVEDAD_CAMP = aggregated_row_tAggregateRow_1.NOVEDAD_CAMP_max;
                                row5.VANTERIOR = aggregated_row_tAggregateRow_1.VANTERIOR_max;
                                row5.VACTUAL = aggregated_row_tAggregateRow_1.VACTUAL_max;
            				    row5.DOCUMENTO = aggregated_row_tAggregateRow_1.DOCUMENTO;
            				    
            				    row5.PRIMER_APELLIDO = aggregated_row_tAggregateRow_1.PRIMER_APELLIDO;
            				    
            				    row5.SEGUNDO_APELLIDO = aggregated_row_tAggregateRow_1.SEGUNDO_APELLIDO;
            				    
            				    row5.PRIMER_NOMBRE = aggregated_row_tAggregateRow_1.PRIMER_NOMBRE;
            				    
            				    row5.SEGUNDO_NOMBRE = aggregated_row_tAggregateRow_1.SEGUNDO_NOMBRE;
            				    
            				    row5.FECHA_NACIMIENTO = aggregated_row_tAggregateRow_1.FECHA_NACIMIENTO;
            				    
                                row5.FECHA_REGISTRO = aggregated_row_tAggregateRow_1.FECHA_REGISTRO_max;
            				    row5.ORDEN_NOVEDAD = aggregated_row_tAggregateRow_1.ORDEN_NOVEDAD;
            				    
            				    row5.ORDEN_CAMPO = aggregated_row_tAggregateRow_1.ORDEN_CAMPO;
            				    
            				    row5.SIGLA_TDOCUMENTO = aggregated_row_tAggregateRow_1.SIGLA_TDOCUMENTO;
            				    
            				    row5.SIGLA_SEXO = aggregated_row_tAggregateRow_1.SIGLA_SEXO;
            				    
                                row5.DOCUMENTO_ANTERIOR = aggregated_row_tAggregateRow_1.DOCUMENTO_ANTERIOR_max;
                                row5.DOCUMENTO_ACTUAL = aggregated_row_tAggregateRow_1.DOCUMENTO_ACTUAL_max;
                                row5.TDOCUMENTO_ANTERIOR = aggregated_row_tAggregateRow_1.TDOCUMENTO_ANTERIOR_max;
                                row5.TDOCUMENTO_ACTUAL = aggregated_row_tAggregateRow_1.TDOCUMENTO_ACTUAL_max;
            				    row5.AFILIADO_ID = aggregated_row_tAggregateRow_1.AFILIADO_ID;
            				    

 


	tos_count_tAggregateRow_1_AGGIN++;

/**
 * [tAggregateRow_1_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	

 



/**
 * [tAggregateRow_1_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tSortRow_2_SortOut main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortOut";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					



	Comparablerow5Struct arrayRowtSortRow_2_SortOut = new Comparablerow5Struct();

	arrayRowtSortRow_2_SortOut.NOVEDAD_COD = row5.NOVEDAD_COD;
	arrayRowtSortRow_2_SortOut.NOVEDAD_CAMP = row5.NOVEDAD_CAMP;
	arrayRowtSortRow_2_SortOut.VANTERIOR = row5.VANTERIOR;
	arrayRowtSortRow_2_SortOut.VACTUAL = row5.VACTUAL;
	arrayRowtSortRow_2_SortOut.DOCUMENTO = row5.DOCUMENTO;
	arrayRowtSortRow_2_SortOut.PRIMER_APELLIDO = row5.PRIMER_APELLIDO;
	arrayRowtSortRow_2_SortOut.SEGUNDO_APELLIDO = row5.SEGUNDO_APELLIDO;
	arrayRowtSortRow_2_SortOut.PRIMER_NOMBRE = row5.PRIMER_NOMBRE;
	arrayRowtSortRow_2_SortOut.SEGUNDO_NOMBRE = row5.SEGUNDO_NOMBRE;
	arrayRowtSortRow_2_SortOut.FECHA_NACIMIENTO = row5.FECHA_NACIMIENTO;
	arrayRowtSortRow_2_SortOut.FECHA_REGISTRO = row5.FECHA_REGISTRO;
	arrayRowtSortRow_2_SortOut.ORDEN_NOVEDAD = row5.ORDEN_NOVEDAD;
	arrayRowtSortRow_2_SortOut.ORDEN_CAMPO = row5.ORDEN_CAMPO;
	arrayRowtSortRow_2_SortOut.SIGLA_TDOCUMENTO = row5.SIGLA_TDOCUMENTO;
	arrayRowtSortRow_2_SortOut.SIGLA_SEXO = row5.SIGLA_SEXO;
	arrayRowtSortRow_2_SortOut.DOCUMENTO_ANTERIOR = row5.DOCUMENTO_ANTERIOR;
	arrayRowtSortRow_2_SortOut.DOCUMENTO_ACTUAL = row5.DOCUMENTO_ACTUAL;
	arrayRowtSortRow_2_SortOut.TDOCUMENTO_ANTERIOR = row5.TDOCUMENTO_ANTERIOR;
	arrayRowtSortRow_2_SortOut.TDOCUMENTO_ACTUAL = row5.TDOCUMENTO_ACTUAL;
	arrayRowtSortRow_2_SortOut.AFILIADO_ID = row5.AFILIADO_ID;	
	list_tSortRow_2_SortOut.add(arrayRowtSortRow_2_SortOut);

 


	tos_count_tSortRow_2_SortOut++;

/**
 * [tSortRow_2_SortOut main ] stop
 */
	
	/**
	 * [tSortRow_2_SortOut process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortOut";
	
	

 



/**
 * [tSortRow_2_SortOut process_data_begin ] stop
 */
	
	/**
	 * [tSortRow_2_SortOut process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortOut";
	
	

 



/**
 * [tSortRow_2_SortOut process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	

 



/**
 * [tAggregateRow_1_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_1_AGGIN", true);
end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGIN end ] stop
 */

	
	/**
	 * [tSortRow_2_SortOut end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortOut";
	
	

row5Struct[] array_tSortRow_2_SortOut = list_tSortRow_2_SortOut.toArray(new Comparablerow5Struct[0]);

java.util.Arrays.sort(array_tSortRow_2_SortOut);

globalMap.put("tSortRow_2",array_tSortRow_2_SortOut);


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tSortRow_2_SortOut", true);
end_Hash.put("tSortRow_2_SortOut", System.currentTimeMillis());




/**
 * [tSortRow_2_SortOut end ] stop
 */



	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out2");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
					globalMap.get( "tHash_Lookup_row8" ))
					;					
					
	

row8Struct row8HashKey = new row8Struct();
row8Struct row8Default = new row8Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
	Integer conteo;
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
out2Struct out2_tmp = new out2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tSortRow_2_SortIn begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_2_SortIn", false);
		start_Hash.put("tSortRow_2_SortIn", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortIn";
	
	
		int tos_count_tSortRow_2_SortIn = 0;
		


row5Struct[] array_tSortRow_2_SortIn = (row5Struct[]) globalMap.remove("tSortRow_2");

int nb_line_tSortRow_2_SortIn = 0;

row5Struct current_tSortRow_2_SortIn = null;

for(int i_tSortRow_2_SortIn = 0; i_tSortRow_2_SortIn < array_tSortRow_2_SortIn.length; i_tSortRow_2_SortIn++){
	current_tSortRow_2_SortIn = array_tSortRow_2_SortIn[i_tSortRow_2_SortIn];
	row6.NOVEDAD_COD = current_tSortRow_2_SortIn.NOVEDAD_COD;
	row6.NOVEDAD_CAMP = current_tSortRow_2_SortIn.NOVEDAD_CAMP;
	row6.VANTERIOR = current_tSortRow_2_SortIn.VANTERIOR;
	row6.VACTUAL = current_tSortRow_2_SortIn.VACTUAL;
	row6.DOCUMENTO = current_tSortRow_2_SortIn.DOCUMENTO;
	row6.PRIMER_APELLIDO = current_tSortRow_2_SortIn.PRIMER_APELLIDO;
	row6.SEGUNDO_APELLIDO = current_tSortRow_2_SortIn.SEGUNDO_APELLIDO;
	row6.PRIMER_NOMBRE = current_tSortRow_2_SortIn.PRIMER_NOMBRE;
	row6.SEGUNDO_NOMBRE = current_tSortRow_2_SortIn.SEGUNDO_NOMBRE;
	row6.FECHA_NACIMIENTO = current_tSortRow_2_SortIn.FECHA_NACIMIENTO;
	row6.FECHA_REGISTRO = current_tSortRow_2_SortIn.FECHA_REGISTRO;
	row6.ORDEN_NOVEDAD = current_tSortRow_2_SortIn.ORDEN_NOVEDAD;
	row6.ORDEN_CAMPO = current_tSortRow_2_SortIn.ORDEN_CAMPO;
	row6.SIGLA_TDOCUMENTO = current_tSortRow_2_SortIn.SIGLA_TDOCUMENTO;
	row6.SIGLA_SEXO = current_tSortRow_2_SortIn.SIGLA_SEXO;
	row6.DOCUMENTO_ANTERIOR = current_tSortRow_2_SortIn.DOCUMENTO_ANTERIOR;
	row6.DOCUMENTO_ACTUAL = current_tSortRow_2_SortIn.DOCUMENTO_ACTUAL;
	row6.TDOCUMENTO_ANTERIOR = current_tSortRow_2_SortIn.TDOCUMENTO_ANTERIOR;
	row6.TDOCUMENTO_ACTUAL = current_tSortRow_2_SortIn.TDOCUMENTO_ACTUAL;
	row6.AFILIADO_ID = current_tSortRow_2_SortIn.AFILIADO_ID;
	// increase number of line sorted
	nb_line_tSortRow_2_SortIn++;

 



/**
 * [tSortRow_2_SortIn begin ] stop
 */
	
	/**
	 * [tSortRow_2_SortIn main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortIn";
	
	

 


	tos_count_tSortRow_2_SortIn++;

/**
 * [tSortRow_2_SortIn main ] stop
 */
	
	/**
	 * [tSortRow_2_SortIn process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortIn";
	
	

 



/**
 * [tSortRow_2_SortIn process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
						row8Struct row8 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row8" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow8 = false;
       		  	    	
       		  	    	
 							row8Struct row8ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row8HashKey.AFILIADO_ID = row6.AFILIADO_ID ;
                        		    		

								
		                        	row8HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row8.lookup( row8HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row8Struct fromLookup_row8 = null;
							row8 = row8Default;
										 
							
								 
							
							
								if (tHash_Lookup_row8 !=null && tHash_Lookup_row8.hasNext()) { // G 099
								
							
								
								fromLookup_row8 = tHash_Lookup_row8.next();

							
							
								} // G 099
							
							

							if(fromLookup_row8 != null) {
								row8 = fromLookup_row8;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;
Var.conteo = Numeric.sequence("s1",1,1) ;// ###############################
        // ###############################
        // # Output tables

out2 = null;


// # Output table : 'out2'
out2_tmp.conteo = Var.conteo ;
out2_tmp.NOVEDAD_COD = row6.NOVEDAD_COD ;
out2_tmp.NOVEDAD_CAMP = row6.NOVEDAD_CAMP ;
out2_tmp.VANTERIOR = row6.VANTERIOR ;
out2_tmp.VACTUAL = row6.VACTUAL ;
out2_tmp.DOCUMENTO = row6.DOCUMENTO ;
out2_tmp.PRIMER_APELLIDO = row6.PRIMER_APELLIDO ;
out2_tmp.SEGUNDO_APELLIDO = row6.SEGUNDO_APELLIDO ;
out2_tmp.PRIMER_NOMBRE = row6.PRIMER_NOMBRE ;
out2_tmp.SEGUNDO_NOMBRE = row6.SEGUNDO_NOMBRE ;
out2_tmp.FECHA_NACIMIENTO = row6.FECHA_NACIMIENTO ;
out2_tmp.FECHA_REGISTRO = row6.FECHA_REGISTRO ;
out2_tmp.ORDEN_NOVEDAD = row6.ORDEN_NOVEDAD ;
out2_tmp.ORDEN_CAMPO = row6.ORDEN_CAMPO ;
out2_tmp.SIGLA_TDOCUMENTO = row6.SIGLA_TDOCUMENTO ;
out2_tmp.SIGLA_SEXO = row6.SIGLA_SEXO ;
out2_tmp.DOCUMENTO_ANTERIOR = row6.DOCUMENTO_ANTERIOR ;
out2_tmp.DOCUMENTO_ACTUAL = row6.DOCUMENTO_ACTUAL ;
out2_tmp.TDOCUMENTO_ANTERIOR = row6.TDOCUMENTO_ANTERIOR ;
out2_tmp.TDOCUMENTO_ACTUAL = row6.TDOCUMENTO_ACTUAL ;
out2_tmp.PRI_NOMBRE_ANT = row8.PRI_NOMBRE_ANT ;
out2_tmp.SEG_NOMBRE_ANT = row8.SEG_NOMBRE_ANT ;
out2_tmp.PRI_APELLIDO_ANT = row8.PRI_APELLIDO_ANT ;
out2_tmp.SEG_APELLIDO_ANT = row8.SEG_APELLIDO_ANT ;
out2_tmp.FNACIMIENTO_ANT = row8.FNACIMIENTO_ANT ;
out2_tmp.TDOCUMENTO_ANT = row8.TDOCUMENTO_ANT ;
out2_tmp.DOCUMENTO_ANT = row8.DOCUMENTO_ANT ;
out2 = out2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "out2"
if(out2 != null) { 



	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out2"
						
						);
					}
					

    			//Code generate according to input schema and output schema
			  /*output_row.conteo = out2.conteo;
			  output_row.NOVEDAD_COD = out2.NOVEDAD_COD;
			  output_row.NOVEDAD_CAMP = out2.NOVEDAD_CAMP;
			  output_row.VANTERIOR = out2.VANTERIOR;
			  output_row.VACTUAL = out2.VACTUAL;
			  output_row.DOCUMENTO = out2.DOCUMENTO;
			  output_row.PRIMER_APELLIDO = out2.PRIMER_APELLIDO;
			  output_row.SEGUNDO_APELLIDO = out2.SEGUNDO_APELLIDO;
			  output_row.PRIMER_NOMBRE = out2.PRIMER_NOMBRE;
			  output_row.SEGUNDO_NOMBRE = out2.SEGUNDO_NOMBRE;
			  output_row.FECHA_NACIMIENTO = out2.FECHA_NACIMIENTO;
			  output_row.FECHA_REGISTRO = out2.FECHA_REGISTRO;
			  output_row.ORDEN_NOVEDAD = out2.ORDEN_NOVEDAD;
			  output_row.ORDEN_CAMPO = out2.ORDEN_CAMPO;
			  output_row.SIGLA_TDOCUMENTO = out2.SIGLA_TDOCUMENTO;
			  output_row.SIGLA_SEXO = out2.SIGLA_SEXO;
			  output_row.DOCUMENTO_ANTERIOR = out2.DOCUMENTO_ANTERIOR;
			  output_row.DOCUMENTO_ACTUAL = out2.DOCUMENTO_ACTUAL;
			  output_row.TDOCUMENTO_ANTERIOR = out2.TDOCUMENTO_ANTERIOR;
			  output_row.TDOCUMENTO_ACTUAL = out2.TDOCUMENTO_ACTUAL;
			  output_row.PRI_NOMBRE_ANT = out2.PRI_NOMBRE_ANT;
			  output_row.SEG_NOMBRE_ANT = out2.SEG_NOMBRE_ANT;
			  output_row.PRI_APELLIDO_ANT = out2.PRI_APELLIDO_ANT;
			  output_row.SEG_APELLIDO_ANT = out2.SEG_APELLIDO_ANT;
			  output_row.FNACIMIENTO_ANT = out2.FNACIMIENTO_ANT;
			  output_row.TDOCUMENTO_ANT = out2.TDOCUMENTO_ANT;
			  output_row.DOCUMENTO_ANT = out2.DOCUMENTO_ANT;*/

			  switch(out2.NOVEDAD_COD) {
			    case "N01":
			      // TDOCUMENTO, DOCUMENTO 
			      if (out2.NOVEDAD_CAMP.equals("TDOCUMENTOS_ID") || out2.NOVEDAD_CAMP.equals("DOCUMENTO")){
			      	   	
			   
			  context.SI_UPDATE =	(out2.TDOCUMENTO_ANTERIOR == null ? "1":"0");


			  		context.FILA= out2.conteo
			  						 +","+"FMS001"
			  						 +","+ out2.TDOCUMENTO_ANT
			  				 		 +","+ out2.DOCUMENTO_ANT
			  				 		 +","+ GenerarUuid.blankIfNull(out2.PRI_APELLIDO_ANT)
			  				 		 +","+ GenerarUuid.blankIfNull(out2.SEG_APELLIDO_ANT)
			  				 		 +","+ GenerarUuid.blankIfNull(out2.PRI_NOMBRE_ANT)
			  				 		 +","+ GenerarUuid.blankIfNull(out2.SEG_NOMBRE_ANT) 						 
			  				 		 +","+ out2.FNACIMIENTO_ANT
			  				 		 +","+ "01"
			  				 		 +","+ "002"
			  				 		 +","+ out2.NOVEDAD_COD
			  				 		 +","+ out2.FECHA_REGISTRO
			  				 		 +","+ out2.SIGLA_TDOCUMENTO
			  				 		 +","+ out2.DOCUMENTO
			  				 		 +","+ out2.FNACIMIENTO_ANT
			  				 		 +","+ context.SI_UPDATE
			  				 		 +",,,";    	
			      } else {
			      // FECHA NACIMIENTO
			      	context.SI_UPDATE = "1";    	
			      	context.FILA= 	out2.conteo
			      						+","+ "FMS001"
			      						+","+ out2.SIGLA_TDOCUMENTO
			      						+","+ out2.DOCUMENTO
			      						+","+ GenerarUuid.blankIfNull(out2.PRI_APELLIDO_ANT)
			  				 		 	+","+ GenerarUuid.blankIfNull(out2.SEG_APELLIDO_ANT)
			  				 		 	+","+ GenerarUuid.blankIfNull(out2.PRI_NOMBRE_ANT)
			  				 		 	+","+ GenerarUuid.blankIfNull(out2.SEG_NOMBRE_ANT) 
			      						+","+ GenerarUuid.blankIfNull(out2.VANTERIOR)
			      						+","+"01"
			      						+","+"002"
			      						+","+ out2.NOVEDAD_COD
			      						+","+ out2.FECHA_REGISTRO
			      						+","+ out2.SIGLA_TDOCUMENTO
			      						+","+ out2.DOCUMENTO
			      						+","+ out2.VACTUAL
			      						+","+ context.SI_UPDATE
			      						+",,,";
			      }    
			      break;
			    case "N02":  
			    //NOMBRES DE AFILIADO	
			    	context.FILA= 	out2.conteo
			      					+","+ "FMS001"
			      					+","+ out2.SIGLA_TDOCUMENTO
			      					+","+ out2.DOCUMENTO
			      					+","+ GenerarUuid.blankIfNull(out2.PRI_APELLIDO_ANT)
			  				 		+","+ GenerarUuid.blankIfNull(out2.SEG_APELLIDO_ANT)
			  				 		+","+ GenerarUuid.blankIfNull(out2.PRI_NOMBRE_ANT)
			  				 		+","+ GenerarUuid.blankIfNull(out2.SEG_NOMBRE_ANT)
			     					+","+ out2.FECHA_NACIMIENTO
			      					+","+"01"
			      					+","+"002"
			      					+","+ out2.NOVEDAD_COD
			      					+","+ out2.FECHA_REGISTRO
			      					+","+ GenerarUuid.blankIfNull(out2.PRIMER_NOMBRE)
			  				 		+","+ GenerarUuid.blankIfNull(out2.SEGUNDO_NOMBRE)  
			      					+",,,,,"; 
			      break;
			    case "N03":
			    //APELLIDOS DE AFILIADO
			    	context.FILA= 	out2.conteo
			      					+","+ "FMS001"
			      					+","+ out2.SIGLA_TDOCUMENTO
			      					+","+ out2.DOCUMENTO
			      					+","+ GenerarUuid.blankIfNull(out2.PRI_APELLIDO_ANT)
			  				 		+","+ GenerarUuid.blankIfNull(out2.SEG_APELLIDO_ANT)
			  				 		+","+ GenerarUuid.blankIfNull(out2.PRIMER_NOMBRE)
			  				 		+","+ GenerarUuid.blankIfNull(out2.SEGUNDO_NOMBRE)      					
			     					+","+ out2.FECHA_NACIMIENTO
			      					+","+"01"
			      					+","+"002"
			      					+","+ out2.NOVEDAD_COD
			      					+","+ out2.FECHA_REGISTRO
			      					+","+ GenerarUuid.blankIfNull(out2.PRIMER_APELLIDO)
			  				 		+","+ GenerarUuid.blankIfNull(out2.SEGUNDO_APELLIDO)  
			      					+",,,,,"; 
			      break;
			     case "N04":
			     //CAMBIO DE MUNICIPIO
			     	context.FILA= 	out2.conteo
			      					+","+ "FMS001"
			      					+","+ out2.SIGLA_TDOCUMENTO
			      					+","+ out2.DOCUMENTO
			      					+","+ out2.PRIMER_APELLIDO
			  				 		+","+ GenerarUuid.blankIfNull(out2.SEGUNDO_APELLIDO)
			  				 		+","+ out2.PRIMER_NOMBRE
			  				 		+","+ GenerarUuid.blankIfNull(out2.SEGUNDO_NOMBRE) 
			     						+","+ out2.FECHA_NACIMIENTO
			      					+","+"01"
			      					+","+"002"
			      					+","+ out2.NOVEDAD_COD
			      					+","+ out2.FECHA_REGISTRO
			      					+","+"01"
			      					+","+"002"
			      					+",,,,,"; 
			     break;    
			    case "N09":
			    //Retiro por muerte
			    	context.FILA= 	out2.conteo
			      					+","+ "FMS001"
			      					+","+ out2.SIGLA_TDOCUMENTO
			      					+","+ out2.DOCUMENTO
			      					+","+ out2.PRIMER_APELLIDO
			  				 		+","+ GenerarUuid.blankIfNull(out2.SEGUNDO_APELLIDO)
			  				 		+","+ out2.PRIMER_NOMBRE
			  				 		+","+ GenerarUuid.blankIfNull(out2.SEGUNDO_NOMBRE) 
			     					+","+ out2.FECHA_NACIMIENTO
			      					+","+"01"
			      					+","+"002"
			      					+","+ out2.NOVEDAD_COD
			      					+","+ out2.FECHA_REGISTRO
			      					+",,,,,,,"; 
			    break;
			    case "N14":
			    // retiro por paso a inactivo
			    	context.FILA= 	out2.conteo
			      					+","+ "FMS001"
			      					+","+ out2.SIGLA_TDOCUMENTO
			      					+","+ out2.DOCUMENTO
			      					+","+ out2.PRIMER_APELLIDO
			  				 		+","+ GenerarUuid.blankIfNull(out2.SEGUNDO_APELLIDO)
			  				 		+","+ out2.PRIMER_NOMBRE
			  				 		+","+ GenerarUuid.blankIfNull(out2.SEGUNDO_NOMBRE )
			     					+","+ out2.FECHA_NACIMIENTO
			      					+","+"01"
			      					+","+"002"
			      					+","+ out2.NOVEDAD_COD
			      					+","+ out2.FECHA_REGISTRO
			      					+","+"RE"
			      					+",,,,,,";   	
			    break;
			    case "N17":
			    //cambio de sexo
			    	context.FILA= 	out2.conteo
			      					+","+ "FMS001"
			      					+","+ out2.SIGLA_TDOCUMENTO
			      					+","+ out2.DOCUMENTO
			      					+","+ out2.PRIMER_APELLIDO
			  				 		+","+ GenerarUuid.blankIfNull(out2.SEGUNDO_APELLIDO)
			  				 		+","+ out2.PRIMER_NOMBRE
			  				 		+","+ GenerarUuid.blankIfNull(out2.SEGUNDO_NOMBRE) 
			     					+","+ out2.FECHA_NACIMIENTO
			      					+","+"01"
			      					+","+"002"
			      					+","+ out2.NOVEDAD_COD
			      					+","+ out2.FECHA_REGISTRO
			      					+","+ out2.SIGLA_SEXO
			      					+",,,,,,";   
			    break;			    
			  }


			  ////guarda el contenido y el salto de linea 
			  context.NOVEDAD = (out2.conteo.equals(1)?context.FILA:"\r\n"+context.FILA);
			  ////Escribre en el archivo
			  File archivo = new File(context.RutaSistema+"/"+context.Area+"/"+context.NombreArchivoSalida);	
			  OutputStreamWriter bw = new OutputStreamWriter(new FileOutputStream(archivo,true), "ISO-8859-15");	
			  bw.append(context.NOVEDAD);
			  bw.close();

    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */

} // End of branch "out2"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tSortRow_2_SortIn process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortIn";
	
	

 



/**
 * [tSortRow_2_SortIn process_data_end ] stop
 */
	
	/**
	 * [tSortRow_2_SortIn end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortIn";
	
	


}

globalMap.put("tSortRow_2_SortIn_NB_LINE",nb_line_tSortRow_2_SortIn);

 

ok_Hash.put("tSortRow_2_SortIn", true);
end_Hash.put("tSortRow_2_SortIn", System.currentTimeMillis());




/**
 * [tSortRow_2_SortIn end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row8 != null) {
						tHash_Lookup_row8.endGet();
					}
					globalMap.remove( "tHash_Lookup_row8" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out2");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */






























				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tOracleInput_10Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row8"); 
				     			
							//free memory for "tSortRow_2_SortIn"
							globalMap.remove("tSortRow_2");
						
							//free memory for "tAggregateRow_1_AGGIN"
							globalMap.remove("tAggregateRow_1");
						
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row9"); 
				     			
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_row4"); 
				     			
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row3"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row2"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	

 



/**
 * [tAggregateRow_1_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	

 



/**
 * [tAggregateRow_1_AGGIN finally ] stop
 */

	
	/**
	 * [tSortRow_2_SortOut finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortOut";
	
	

 



/**
 * [tSortRow_2_SortOut finally ] stop
 */

	
	/**
	 * [tSortRow_2_SortIn finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortIn";
	
	

 



/**
 * [tSortRow_2_SortIn finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 finally ] stop
 */






























				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row27Struct implements routines.system.IPersistableRow<row27Struct> {
    final static byte[] commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];
    static byte[] commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];

	
			    public BigDecimal TPROCESO;

				public BigDecimal getTPROCESO () {
					return this.TPROCESO;
				}

				public Boolean TPROCESOIsNullable(){
				    return false;
				}
				public Boolean TPROCESOIsKey(){
				    return false;
				}
				public Integer TPROCESOLength(){
				    return 0;
				}
				public Integer TPROCESOPrecision(){
				    return null;
				}
				public String TPROCESODefault(){
				
					return "";
				
				}
				public String TPROCESOComment(){
				
				    return "";
				
				}
				public String TPROCESOPattern(){
				
					return "";
				
				}
				public String TPROCESOOriginalDbColumnName(){
				
					return "TPROCESO";
				
				}

				
			    public BigDecimal TARCHIVO;

				public BigDecimal getTARCHIVO () {
					return this.TARCHIVO;
				}

				public Boolean TARCHIVOIsNullable(){
				    return true;
				}
				public Boolean TARCHIVOIsKey(){
				    return false;
				}
				public Integer TARCHIVOLength(){
				    return 0;
				}
				public Integer TARCHIVOPrecision(){
				    return null;
				}
				public String TARCHIVODefault(){
				
					return "";
				
				}
				public String TARCHIVOComment(){
				
				    return "";
				
				}
				public String TARCHIVOPattern(){
				
					return "";
				
				}
				public String TARCHIVOOriginalDbColumnName(){
				
					return "TARCHIVO";
				
				}

				
			    public BigDecimal ESTADO;

				public BigDecimal getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 0;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return "";
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
						this.TPROCESO = (BigDecimal) dis.readObject();
					
						this.TARCHIVO = (BigDecimal) dis.readObject();
					
						this.ESTADO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
						this.TPROCESO = (BigDecimal) dis.readObject();
					
						this.TARCHIVO = (BigDecimal) dis.readObject();
					
						this.ESTADO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.TPROCESO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TARCHIVO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TPROCESO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TARCHIVO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TPROCESO="+String.valueOf(TPROCESO));
		sb.append(",TARCHIVO="+String.valueOf(TARCHIVO));
		sb.append(",ESTADO="+String.valueOf(ESTADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row27Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row27Struct row27 = new row27Struct();




	
	/**
	 * [tJavaRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_3", false);
		start_Hash.put("tJavaRow_3", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row27");
					}
				
		int tos_count_tJavaRow_3 = 0;
		

int nb_line_tJavaRow_3 = 0;

 



/**
 * [tJavaRow_3 begin ] stop
 */



	
	/**
	 * [tOracleInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_10", false);
		start_Hash.put("tOracleInput_10", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_10";
	
	
		int tos_count_tOracleInput_10 = 0;
		
	


	
		    int nb_line_tOracleInput_10 = 0;
		    java.sql.Connection conn_tOracleInput_10 = null;
				conn_tOracleInput_10 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_10 = false;
				boolean isConnectionWrapped_tOracleInput_10 = !(conn_tOracleInput_10 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_10.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_10 = null;
                if (isConnectionWrapped_tOracleInput_10) {
					unwrappedOraConn_tOracleInput_10 = conn_tOracleInput_10.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_10 != null) {
                        isTimeZoneNull_tOracleInput_10 = (unwrappedOraConn_tOracleInput_10.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_10 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_10).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_10) {
					java.sql.Statement stmtGetTZ_tOracleInput_10 = conn_tOracleInput_10.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_10 = stmtGetTZ_tOracleInput_10.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_10 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_10.next()) {
						sessionTimezone_tOracleInput_10 = rsGetTZ_tOracleInput_10.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_10 && unwrappedOraConn_tOracleInput_10 != null) {
                        unwrappedOraConn_tOracleInput_10.setSessionTimeZone(sessionTimezone_tOracleInput_10);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_10).setSessionTimeZone(sessionTimezone_tOracleInput_10);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_10 = conn_tOracleInput_10.createStatement();

		    String dbquery_tOracleInput_10 = " SELECT \n   ATP.ID  AS TPROCESO,\n   TA.ID AS TARCHIVO,\n   AE.ID AS ESTADO\n  FROM AFI_TPROCESOS ATP \n  LEFT JOIN ( "
+"SELECT TA.ID FROM AFI_TARCHIVOS TA WHERE TA.CODIGO = '10') TA ON 1 = 1\n  LEFT JOIN ( SELECT AE.ID FROM AFI_ESTEXTDERECH"
+"OS AE WHERE AE.CODIGO = '6') AE ON 1 = 1\n  WHERE ATP.CODIGO = '21'";
		    

		    globalMap.put("tOracleInput_10_QUERY",dbquery_tOracleInput_10);

		    java.sql.ResultSet rs_tOracleInput_10 = null;

		    try {
		    	rs_tOracleInput_10 = stmt_tOracleInput_10.executeQuery(dbquery_tOracleInput_10);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_10 = rs_tOracleInput_10.getMetaData();
		    	int colQtyInRs_tOracleInput_10 = rsmd_tOracleInput_10.getColumnCount();

		    String tmpContent_tOracleInput_10 = null;
		    
		    
		    while (rs_tOracleInput_10.next()) {
		        nb_line_tOracleInput_10++;
		        
							if(colQtyInRs_tOracleInput_10 < 1) {
								row27.TPROCESO = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(1) != null) {
						row27.TPROCESO = rs_tOracleInput_10.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 2) {
								row27.TARCHIVO = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(2) != null) {
						row27.TARCHIVO = rs_tOracleInput_10.getBigDecimal(2);
					} else {
				
						row27.TARCHIVO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 3) {
								row27.ESTADO = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(3) != null) {
						row27.ESTADO = rs_tOracleInput_10.getBigDecimal(3);
					} else {
				
						row27.ESTADO = null;
					}
		                    }
					




 



/**
 * [tOracleInput_10 begin ] stop
 */
	
	/**
	 * [tOracleInput_10 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 


	tos_count_tOracleInput_10++;

/**
 * [tOracleInput_10 main ] stop
 */
	
	/**
	 * [tOracleInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 



/**
 * [tOracleInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_3 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row27"
						
						);
					}
					

    // code sample:
//
// multiply by 2 the row identifier
// output_row.id = row27.id * 2;
//
// lowercase the name
// output_row.name = row27.name.toLowerCase();

context.TipoProceso = row27.TPROCESO;
context.TipoArchivo = row27.TARCHIVO;
context.Estado = row27.ESTADO;

    nb_line_tJavaRow_3++;   

 


	tos_count_tJavaRow_3++;

/**
 * [tJavaRow_3 main ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 



/**
 * [tOracleInput_10 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_10 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

}
}finally{
	if (rs_tOracleInput_10 != null) {
		rs_tOracleInput_10.close();
	}
	if (stmt_tOracleInput_10 != null) {
		stmt_tOracleInput_10.close();
	}
}

globalMap.put("tOracleInput_10_NB_LINE",nb_line_tOracleInput_10);
 

ok_Hash.put("tOracleInput_10", true);
end_Hash.put("tOracleInput_10", System.currentTimeMillis());




/**
 * [tOracleInput_10 end ] stop
 */

	
	/**
	 * [tJavaRow_3 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

globalMap.put("tJavaRow_3_NB_LINE",nb_line_tJavaRow_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row27");
			  	}
			  	
 

ok_Hash.put("tJavaRow_3", true);
end_Hash.put("tJavaRow_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk14", 0, "ok");
				}
				tFixedFlowInput_4Process(globalMap);



/**
 * [tJavaRow_3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_10 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 



/**
 * [tOracleInput_10 finally ] stop
 */

	
	/**
	 * [tJavaRow_3 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_10_SUBPROCESS_STATE", 1);
	}
	


public static class row28Struct implements routines.system.IPersistableRow<row28Struct> {
    final static byte[] commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];
    static byte[] commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];

	
			    public java.util.Date FECHA_REGISTRO;

				public java.util.Date getFECHA_REGISTRO () {
					return this.FECHA_REGISTRO;
				}

				public Boolean FECHA_REGISTROIsNullable(){
				    return true;
				}
				public Boolean FECHA_REGISTROIsKey(){
				    return false;
				}
				public Integer FECHA_REGISTROLength(){
				    return null;
				}
				public Integer FECHA_REGISTROPrecision(){
				    return null;
				}
				public String FECHA_REGISTRODefault(){
				
					return null;
				
				}
				public String FECHA_REGISTROComment(){
				
				    return "";
				
				}
				public String FECHA_REGISTROPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_REGISTROOriginalDbColumnName(){
				
					return "FECHA_REGISTRO";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return true;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return null;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return null;
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public String OBSERVACIONES;

				public String getOBSERVACIONES () {
					return this.OBSERVACIONES;
				}

				public Boolean OBSERVACIONESIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONESIsKey(){
				    return false;
				}
				public Integer OBSERVACIONESLength(){
				    return null;
				}
				public Integer OBSERVACIONESPrecision(){
				    return null;
				}
				public String OBSERVACIONESDefault(){
				
					return null;
				
				}
				public String OBSERVACIONESComment(){
				
				    return "";
				
				}
				public String OBSERVACIONESPattern(){
				
					return "";
				
				}
				public String OBSERVACIONESOriginalDbColumnName(){
				
					return "OBSERVACIONES";
				
				}

				
			    public BigDecimal TPROCESOS_ID;

				public BigDecimal getTPROCESOS_ID () {
					return this.TPROCESOS_ID;
				}

				public Boolean TPROCESOS_IDIsNullable(){
				    return true;
				}
				public Boolean TPROCESOS_IDIsKey(){
				    return false;
				}
				public Integer TPROCESOS_IDLength(){
				    return null;
				}
				public Integer TPROCESOS_IDPrecision(){
				    return null;
				}
				public String TPROCESOS_IDDefault(){
				
					return null;
				
				}
				public String TPROCESOS_IDComment(){
				
				    return "";
				
				}
				public String TPROCESOS_IDPattern(){
				
					return "";
				
				}
				public String TPROCESOS_IDOriginalDbColumnName(){
				
					return "TPROCESOS_ID";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length) {
				if(length < 1024 && commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length == 0) {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[1024];
				} else {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length);
			strReturn = new String(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length) {
				if(length < 1024 && commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length == 0) {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[1024];
				} else {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length);
			strReturn = new String(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
					this.FECHA_REGISTRO = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
					this.OBSERVACIONES = readString(dis);
					
						this.TPROCESOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
					this.FECHA_REGISTRO = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
					this.OBSERVACIONES = readString(dis);
					
						this.TPROCESOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.FECHA_REGISTRO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TPROCESOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.FECHA_REGISTRO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TPROCESOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FECHA_REGISTRO="+String.valueOf(FECHA_REGISTRO));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",OBSERVACIONES="+OBSERVACIONES);
		sb.append(",TPROCESOS_ID="+String.valueOf(TPROCESOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row28Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row28Struct row28 = new row28Struct();




	
	/**
	 * [tOracleOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_2", false);
		start_Hash.put("tOracleOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row28");
					}
				
		int tos_count_tOracleOutput_2 = 0;
		






    
    int nb_line_tOracleOutput_2 = 0;
    int nb_line_update_tOracleOutput_2 = 0;
    int nb_line_inserted_tOracleOutput_2 = 0;
    int nb_line_deleted_tOracleOutput_2 = 0;
    int nb_line_rejected_tOracleOutput_2 = 0;

    int tmp_batchUpdateCount_tOracleOutput_2 = 0;

    int deletedCount_tOracleOutput_2=0;
    int updatedCount_tOracleOutput_2=0;
    int insertedCount_tOracleOutput_2=0;
    int rowsToCommitCount_tOracleOutput_2=0;
    int rejectedCount_tOracleOutput_2=0;

    boolean whetherReject_tOracleOutput_2 = false;

    java.sql.Connection conn_tOracleOutput_2 = null;

    //optional table
    String dbschema_tOracleOutput_2 = null;
    String tableName_tOracleOutput_2 = null;
        dbschema_tOracleOutput_2 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_2=0;

        if(dbschema_tOracleOutput_2 == null || dbschema_tOracleOutput_2.trim().length() == 0) {
            tableName_tOracleOutput_2 = ("AFI_PROCESOS");
        } else {
            tableName_tOracleOutput_2 = dbschema_tOracleOutput_2 + "." + ("AFI_PROCESOS");
        }
                String insert_tOracleOutput_2 = "INSERT INTO " + tableName_tOracleOutput_2 + " (FECHA_REGISTRO,USUARIOS_ID,OBSERVACIONES,TPROCESOS_ID) VALUES (?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_2 = conn_tOracleOutput_2.prepareStatement(insert_tOracleOutput_2);
                        resourceMap.put("pstmt_tOracleOutput_2", pstmt_tOracleOutput_2);





 



/**
 * [tOracleOutput_2 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_4", false);
		start_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_4";
	
	
		int tos_count_tFixedFlowInput_4 = 0;
		

	    for (int i_tFixedFlowInput_4 = 0 ; i_tFixedFlowInput_4 < 1 ; i_tFixedFlowInput_4++) {
	                	            	
    	            		row28.FECHA_REGISTRO = TalendDate.getCurrentDate();
    	            	        	            	
    	            		row28.USUARIOS_ID = context.Usuario;
    	            	        	            	
    	            		row28.OBSERVACIONES = "Generar reporte archivo novedades de afiliados NE";
    	            	        	            	
    	            		row28.TPROCESOS_ID = context.TipoProceso;
    	            	

 



/**
 * [tFixedFlowInput_4 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 


	tos_count_tFixedFlowInput_4++;

/**
 * [tFixedFlowInput_4 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 



/**
 * [tFixedFlowInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row28"
						
						);
					}
					



        whetherReject_tOracleOutput_2 = false;
                        if(row28.FECHA_REGISTRO != null) {
pstmt_tOracleOutput_2.setObject(1, new java.sql.Timestamp(row28.FECHA_REGISTRO.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_2.setNull(1, java.sql.Types.DATE);
}

                        pstmt_tOracleOutput_2.setBigDecimal(2, row28.USUARIOS_ID);

                        if(row28.OBSERVACIONES == null) {
pstmt_tOracleOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_2.setString(3, row28.OBSERVACIONES);
}

                        pstmt_tOracleOutput_2.setBigDecimal(4, row28.TPROCESOS_ID);

                try {
                    nb_line_tOracleOutput_2++;
                    int processedCount_tOracleOutput_2 = pstmt_tOracleOutput_2.executeUpdate();
                    insertedCount_tOracleOutput_2 += processedCount_tOracleOutput_2;
                    rowsToCommitCount_tOracleOutput_2 += processedCount_tOracleOutput_2;
                } catch(java.lang.Exception e_tOracleOutput_2) {
globalMap.put("tOracleOutput_2_ERROR_MESSAGE",e_tOracleOutput_2.getMessage());
                    whetherReject_tOracleOutput_2 = true;
                            System.err.print(e_tOracleOutput_2.getMessage());
                }
            if(!whetherReject_tOracleOutput_2) {
            }

 


	tos_count_tOracleOutput_2++;

/**
 * [tOracleOutput_2 main ] stop
 */
	
	/**
	 * [tOracleOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	

 



/**
 * [tOracleOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	

 



/**
 * [tOracleOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 



/**
 * [tFixedFlowInput_4 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

        }
        globalMap.put("tFixedFlowInput_4_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_4", true);
end_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());




/**
 * [tFixedFlowInput_4 end ] stop
 */

	
	/**
	 * [tOracleOutput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	
	



	
        if(pstmt_tOracleOutput_2 != null) {
			
				pstmt_tOracleOutput_2.close();
				resourceMap.remove("pstmt_tOracleOutput_2");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_2", true);

	
	nb_line_deleted_tOracleOutput_2=nb_line_deleted_tOracleOutput_2+ deletedCount_tOracleOutput_2;
	nb_line_update_tOracleOutput_2=nb_line_update_tOracleOutput_2 + updatedCount_tOracleOutput_2;
	nb_line_inserted_tOracleOutput_2=nb_line_inserted_tOracleOutput_2 + insertedCount_tOracleOutput_2;
	nb_line_rejected_tOracleOutput_2=nb_line_rejected_tOracleOutput_2 + rejectedCount_tOracleOutput_2;
	
        globalMap.put("tOracleOutput_2_NB_LINE",nb_line_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_UPDATED",nb_line_update_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_2);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row28");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_2", true);
end_Hash.put("tOracleOutput_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk13", 0, "ok");
				}
				tOracleInput_9Process(globalMap);



/**
 * [tOracleOutput_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_4 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 



/**
 * [tFixedFlowInput_4 finally ] stop
 */

	
	/**
	 * [tOracleOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_2 = null;
                if ((pstmtToClose_tOracleOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_2")) != null) {
                    pstmtToClose_tOracleOutput_2.close();
                }
    }
 



/**
 * [tOracleOutput_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row29Struct implements routines.system.IPersistableRow<row29Struct> {
    final static byte[] commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];
    static byte[] commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row29Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row29Struct row29 = new row29Struct();




	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row29");
					}
				
		int tos_count_tJavaRow_2 = 0;
		

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tOracleInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_9", false);
		start_Hash.put("tOracleInput_9", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_9";
	
	
		int tos_count_tOracleInput_9 = 0;
		
	


	
		    int nb_line_tOracleInput_9 = 0;
		    java.sql.Connection conn_tOracleInput_9 = null;
				conn_tOracleInput_9 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_9 = false;
				boolean isConnectionWrapped_tOracleInput_9 = !(conn_tOracleInput_9 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_9.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_9 = null;
                if (isConnectionWrapped_tOracleInput_9) {
					unwrappedOraConn_tOracleInput_9 = conn_tOracleInput_9.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_9 != null) {
                        isTimeZoneNull_tOracleInput_9 = (unwrappedOraConn_tOracleInput_9.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_9 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_9).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_9) {
					java.sql.Statement stmtGetTZ_tOracleInput_9 = conn_tOracleInput_9.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_9 = stmtGetTZ_tOracleInput_9.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_9 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_9.next()) {
						sessionTimezone_tOracleInput_9 = rsGetTZ_tOracleInput_9.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_9 && unwrappedOraConn_tOracleInput_9 != null) {
                        unwrappedOraConn_tOracleInput_9.setSessionTimeZone(sessionTimezone_tOracleInput_9);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_9).setSessionTimeZone(sessionTimezone_tOracleInput_9);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_9 = conn_tOracleInput_9.createStatement();

		    String dbquery_tOracleInput_9 = " SELECT MAX(P.ID) AS ID FROM AFI_PROCESOS P WHERE P.TPROCESOS_ID= "+context.TipoProceso;
		    

		    globalMap.put("tOracleInput_9_QUERY",dbquery_tOracleInput_9);

		    java.sql.ResultSet rs_tOracleInput_9 = null;

		    try {
		    	rs_tOracleInput_9 = stmt_tOracleInput_9.executeQuery(dbquery_tOracleInput_9);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_9 = rs_tOracleInput_9.getMetaData();
		    	int colQtyInRs_tOracleInput_9 = rsmd_tOracleInput_9.getColumnCount();

		    String tmpContent_tOracleInput_9 = null;
		    
		    
		    while (rs_tOracleInput_9.next()) {
		        nb_line_tOracleInput_9++;
		        
							if(colQtyInRs_tOracleInput_9 < 1) {
								row29.ID = null;
							} else {
		                          
					if(rs_tOracleInput_9.getObject(1) != null) {
						row29.ID = rs_tOracleInput_9.getBigDecimal(1);
					} else {
				
						row29.ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_9 begin ] stop
 */
	
	/**
	 * [tOracleInput_9 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 


	tos_count_tOracleInput_9++;

/**
 * [tOracleInput_9 main ] stop
 */
	
	/**
	 * [tOracleInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row29"
						
						);
					}
					

    context.IdProceso = row29.ID;
    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_9 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

}
}finally{
	if (rs_tOracleInput_9 != null) {
		rs_tOracleInput_9.close();
	}
	if (stmt_tOracleInput_9 != null) {
		stmt_tOracleInput_9.close();
	}
}

globalMap.put("tOracleInput_9_NB_LINE",nb_line_tOracleInput_9);
 

ok_Hash.put("tOracleInput_9", true);
end_Hash.put("tOracleInput_9", System.currentTimeMillis());




/**
 * [tOracleInput_9 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row29");
			  	}
			  	
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk11", 0, "ok");
				}
				tFixedFlowInput_3Process(globalMap);



/**
 * [tJavaRow_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_9 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class row30Struct implements routines.system.IPersistableRow<row30Struct> {
    final static byte[] commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];
    static byte[] commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];

	
			    public BigDecimal ESTADO;

				public BigDecimal getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String ARCHIVO;

				public String getARCHIVO () {
					return this.ARCHIVO;
				}

				public Boolean ARCHIVOIsNullable(){
				    return true;
				}
				public Boolean ARCHIVOIsKey(){
				    return false;
				}
				public Integer ARCHIVOLength(){
				    return null;
				}
				public Integer ARCHIVOPrecision(){
				    return null;
				}
				public String ARCHIVODefault(){
				
					return null;
				
				}
				public String ARCHIVOComment(){
				
				    return "";
				
				}
				public String ARCHIVOPattern(){
				
					return "";
				
				}
				public String ARCHIVOOriginalDbColumnName(){
				
					return "ARCHIVO";
				
				}

				
			    public BigDecimal TARCHIVOS_ID;

				public BigDecimal getTARCHIVOS_ID () {
					return this.TARCHIVOS_ID;
				}

				public Boolean TARCHIVOS_IDIsNullable(){
				    return true;
				}
				public Boolean TARCHIVOS_IDIsKey(){
				    return false;
				}
				public Integer TARCHIVOS_IDLength(){
				    return null;
				}
				public Integer TARCHIVOS_IDPrecision(){
				    return null;
				}
				public String TARCHIVOS_IDDefault(){
				
					return null;
				
				}
				public String TARCHIVOS_IDComment(){
				
				    return "";
				
				}
				public String TARCHIVOS_IDPattern(){
				
					return "";
				
				}
				public String TARCHIVOS_IDOriginalDbColumnName(){
				
					return "TARCHIVOS_ID";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return true;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return null;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return null;
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return null;
				}
				public Integer CODIGOPrecision(){
				    return null;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String ARCHIVOFS;

				public String getARCHIVOFS () {
					return this.ARCHIVOFS;
				}

				public Boolean ARCHIVOFSIsNullable(){
				    return true;
				}
				public Boolean ARCHIVOFSIsKey(){
				    return false;
				}
				public Integer ARCHIVOFSLength(){
				    return null;
				}
				public Integer ARCHIVOFSPrecision(){
				    return null;
				}
				public String ARCHIVOFSDefault(){
				
					return null;
				
				}
				public String ARCHIVOFSComment(){
				
				    return "";
				
				}
				public String ARCHIVOFSPattern(){
				
					return "";
				
				}
				public String ARCHIVOFSOriginalDbColumnName(){
				
					return "ARCHIVOFS";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return null;
				}
				public Integer FECHAPrecision(){
				    return null;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public String EXTENSION;

				public String getEXTENSION () {
					return this.EXTENSION;
				}

				public Boolean EXTENSIONIsNullable(){
				    return true;
				}
				public Boolean EXTENSIONIsKey(){
				    return false;
				}
				public Integer EXTENSIONLength(){
				    return null;
				}
				public Integer EXTENSIONPrecision(){
				    return null;
				}
				public String EXTENSIONDefault(){
				
					return null;
				
				}
				public String EXTENSIONComment(){
				
				    return "";
				
				}
				public String EXTENSIONPattern(){
				
					return "";
				
				}
				public String EXTENSIONOriginalDbColumnName(){
				
					return "EXTENSION";
				
				}

				
			    public java.util.Date FECHA_INICIO;

				public java.util.Date getFECHA_INICIO () {
					return this.FECHA_INICIO;
				}

				public Boolean FECHA_INICIOIsNullable(){
				    return true;
				}
				public Boolean FECHA_INICIOIsKey(){
				    return false;
				}
				public Integer FECHA_INICIOLength(){
				    return null;
				}
				public Integer FECHA_INICIOPrecision(){
				    return null;
				}
				public String FECHA_INICIODefault(){
				
					return null;
				
				}
				public String FECHA_INICIOComment(){
				
				    return "";
				
				}
				public String FECHA_INICIOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_INICIOOriginalDbColumnName(){
				
					return "FECHA_INICIO";
				
				}

				
			    public java.util.Date FECHA_FIN;

				public java.util.Date getFECHA_FIN () {
					return this.FECHA_FIN;
				}

				public Boolean FECHA_FINIsNullable(){
				    return true;
				}
				public Boolean FECHA_FINIsKey(){
				    return false;
				}
				public Integer FECHA_FINLength(){
				    return null;
				}
				public Integer FECHA_FINPrecision(){
				    return null;
				}
				public String FECHA_FINDefault(){
				
					return null;
				
				}
				public String FECHA_FINComment(){
				
				    return "";
				
				}
				public String FECHA_FINPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_FINOriginalDbColumnName(){
				
					return "FECHA_FIN";
				
				}

				
			    public BigDecimal PROCESO_ID;

				public BigDecimal getPROCESO_ID () {
					return this.PROCESO_ID;
				}

				public Boolean PROCESO_IDIsNullable(){
				    return true;
				}
				public Boolean PROCESO_IDIsKey(){
				    return false;
				}
				public Integer PROCESO_IDLength(){
				    return null;
				}
				public Integer PROCESO_IDPrecision(){
				    return null;
				}
				public String PROCESO_IDDefault(){
				
					return null;
				
				}
				public String PROCESO_IDComment(){
				
				    return "";
				
				}
				public String PROCESO_IDPattern(){
				
					return "";
				
				}
				public String PROCESO_IDOriginalDbColumnName(){
				
					return "PROCESO_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length) {
				if(length < 1024 && commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length == 0) {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[1024];
				} else {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length);
			strReturn = new String(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length) {
				if(length < 1024 && commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length == 0) {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[1024];
				} else {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length);
			strReturn = new String(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
						this.ESTADO = (BigDecimal) dis.readObject();
					
					this.ARCHIVO = readString(dis);
					
						this.TARCHIVOS_ID = (BigDecimal) dis.readObject();
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
					this.CODIGO = readString(dis);
					
					this.ARCHIVOFS = readString(dis);
					
					this.FECHA = readDate(dis);
					
					this.EXTENSION = readString(dis);
					
					this.FECHA_INICIO = readDate(dis);
					
					this.FECHA_FIN = readDate(dis);
					
						this.PROCESO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
						this.ESTADO = (BigDecimal) dis.readObject();
					
					this.ARCHIVO = readString(dis);
					
						this.TARCHIVOS_ID = (BigDecimal) dis.readObject();
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
					this.CODIGO = readString(dis);
					
					this.ARCHIVOFS = readString(dis);
					
					this.FECHA = readDate(dis);
					
					this.EXTENSION = readString(dis);
					
					this.FECHA_INICIO = readDate(dis);
					
					this.FECHA_FIN = readDate(dis);
					
						this.PROCESO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ESTADO);
					
					// String
				
						writeString(this.ARCHIVO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TARCHIVOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.ARCHIVOFS,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.EXTENSION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_INICIO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_FIN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTADO);
					
					// String
				
						writeString(this.ARCHIVO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TARCHIVOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.ARCHIVOFS,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.EXTENSION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_INICIO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_FIN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ESTADO="+String.valueOf(ESTADO));
		sb.append(",ARCHIVO="+ARCHIVO);
		sb.append(",TARCHIVOS_ID="+String.valueOf(TARCHIVOS_ID));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",CODIGO="+CODIGO);
		sb.append(",ARCHIVOFS="+ARCHIVOFS);
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",EXTENSION="+EXTENSION);
		sb.append(",FECHA_INICIO="+String.valueOf(FECHA_INICIO));
		sb.append(",FECHA_FIN="+String.valueOf(FECHA_FIN));
		sb.append(",PROCESO_ID="+String.valueOf(PROCESO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row30Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row30Struct row30 = new row30Struct();




	
	/**
	 * [tOracleOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_1", false);
		start_Hash.put("tOracleOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row30");
					}
				
		int tos_count_tOracleOutput_1 = 0;
		






    
    int nb_line_tOracleOutput_1 = 0;
    int nb_line_update_tOracleOutput_1 = 0;
    int nb_line_inserted_tOracleOutput_1 = 0;
    int nb_line_deleted_tOracleOutput_1 = 0;
    int nb_line_rejected_tOracleOutput_1 = 0;

    int tmp_batchUpdateCount_tOracleOutput_1 = 0;

    int deletedCount_tOracleOutput_1=0;
    int updatedCount_tOracleOutput_1=0;
    int insertedCount_tOracleOutput_1=0;
    int rowsToCommitCount_tOracleOutput_1=0;
    int rejectedCount_tOracleOutput_1=0;

    boolean whetherReject_tOracleOutput_1 = false;

    java.sql.Connection conn_tOracleOutput_1 = null;

    //optional table
    String dbschema_tOracleOutput_1 = null;
    String tableName_tOracleOutput_1 = null;
        dbschema_tOracleOutput_1 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_1=0;

        if(dbschema_tOracleOutput_1 == null || dbschema_tOracleOutput_1.trim().length() == 0) {
            tableName_tOracleOutput_1 = ("AFI_ARCHIVOS");
        } else {
            tableName_tOracleOutput_1 = dbschema_tOracleOutput_1 + "." + ("AFI_ARCHIVOS");
        }
                String insert_tOracleOutput_1 = "INSERT INTO " + tableName_tOracleOutput_1 + " (ESTADO,ARCHIVO,TARCHIVOS_ID,USUARIOS_ID,CODIGO,ARCHIVOFS,FECHA,EXTENSION,FECHA_INICIO,FECHA_FIN,PROCESO_ID) VALUES (?,?,?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_1 = conn_tOracleOutput_1.prepareStatement(insert_tOracleOutput_1);
                        resourceMap.put("pstmt_tOracleOutput_1", pstmt_tOracleOutput_1);





 



/**
 * [tOracleOutput_1 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_3", false);
		start_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_3";
	
	
		int tos_count_tFixedFlowInput_3 = 0;
		

	    for (int i_tFixedFlowInput_3 = 0 ; i_tFixedFlowInput_3 < 1 ; i_tFixedFlowInput_3++) {
	                	            	
    	            		row30.ESTADO = context.Estado;
    	            	        	            	
    	            		row30.ARCHIVO = "Novedades de afiliados NE "+ context.IdProceso;
    	            	        	            	
    	            		row30.TARCHIVOS_ID = context.TipoArchivo;
    	            	        	            	
    	            		row30.USUARIOS_ID = context.Usuario;
    	            	        	            	
    	            		row30.CODIGO = "AFI_"+context.TipoArchivo+"-"+context.Usuario;
    	            	        	            	
    	            		row30.ARCHIVOFS = context.NombreArchivoSalida;
    	            	        	            	
    	            		row30.FECHA = TalendDate.getCurrentDate();
    	            	        	            	
    	            		row30.EXTENSION = "txt";
    	            	        	            	
    	            		row30.FECHA_INICIO = new SimpleDateFormat("dd/MM/yyyy").parse(context.FECHA_INICIO);
    	            	        	            	
    	            		row30.FECHA_FIN = TalendDate.getCurrentDate();
    	            	        	            	
    	            		row30.PROCESO_ID = context.IdProceso;
    	            	

 



/**
 * [tFixedFlowInput_3 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 


	tos_count_tFixedFlowInput_3++;

/**
 * [tFixedFlowInput_3 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row30"
						
						);
					}
					



        whetherReject_tOracleOutput_1 = false;
                        pstmt_tOracleOutput_1.setBigDecimal(1, row30.ESTADO);

                        if(row30.ARCHIVO == null) {
pstmt_tOracleOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(2, row30.ARCHIVO);
}

                        pstmt_tOracleOutput_1.setBigDecimal(3, row30.TARCHIVOS_ID);

                        pstmt_tOracleOutput_1.setBigDecimal(4, row30.USUARIOS_ID);

                        if(row30.CODIGO == null) {
pstmt_tOracleOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(5, row30.CODIGO);
}

                        if(row30.ARCHIVOFS == null) {
pstmt_tOracleOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(6, row30.ARCHIVOFS);
}

                        if(row30.FECHA != null) {
pstmt_tOracleOutput_1.setObject(7, new java.sql.Timestamp(row30.FECHA.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_1.setNull(7, java.sql.Types.DATE);
}

                        if(row30.EXTENSION == null) {
pstmt_tOracleOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(8, row30.EXTENSION);
}

                        if(row30.FECHA_INICIO != null) {
pstmt_tOracleOutput_1.setObject(9, new java.sql.Timestamp(row30.FECHA_INICIO.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_1.setNull(9, java.sql.Types.DATE);
}

                        if(row30.FECHA_FIN != null) {
pstmt_tOracleOutput_1.setObject(10, new java.sql.Timestamp(row30.FECHA_FIN.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_1.setNull(10, java.sql.Types.DATE);
}

                        pstmt_tOracleOutput_1.setBigDecimal(11, row30.PROCESO_ID);

                try {
                    nb_line_tOracleOutput_1++;
                    int processedCount_tOracleOutput_1 = pstmt_tOracleOutput_1.executeUpdate();
                    insertedCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                    rowsToCommitCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                } catch(java.lang.Exception e_tOracleOutput_1) {
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
                    whetherReject_tOracleOutput_1 = true;
                            System.err.print(e_tOracleOutput_1.getMessage());
                }
            if(!whetherReject_tOracleOutput_1) {
            }

 


	tos_count_tOracleOutput_1++;

/**
 * [tOracleOutput_1 main ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

        }
        globalMap.put("tFixedFlowInput_3_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_3", true);
end_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());




/**
 * [tFixedFlowInput_3 end ] stop
 */

	
	/**
	 * [tOracleOutput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
	



	
        if(pstmt_tOracleOutput_1 != null) {
			
				pstmt_tOracleOutput_1.close();
				resourceMap.remove("pstmt_tOracleOutput_1");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_1", true);

	
	nb_line_deleted_tOracleOutput_1=nb_line_deleted_tOracleOutput_1+ deletedCount_tOracleOutput_1;
	nb_line_update_tOracleOutput_1=nb_line_update_tOracleOutput_1 + updatedCount_tOracleOutput_1;
	nb_line_inserted_tOracleOutput_1=nb_line_inserted_tOracleOutput_1 + insertedCount_tOracleOutput_1;
	nb_line_rejected_tOracleOutput_1=nb_line_rejected_tOracleOutput_1 + rejectedCount_tOracleOutput_1;
	
        globalMap.put("tOracleOutput_1_NB_LINE",nb_line_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_UPDATED",nb_line_update_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_1);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row30");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_1", true);
end_Hash.put("tOracleOutput_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk12", 0, "ok");
				}
				tJava_4Process(globalMap);



/**
 * [tOracleOutput_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_3 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 finally ] stop
 */

	
	/**
	 * [tOracleOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_1 = null;
                if ((pstmtToClose_tOracleOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_1")) != null) {
                    pstmtToClose_tOracleOutput_1.close();
                }
    }
 



/**
 * [tOracleOutput_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 1);
	}
	


public void tJava_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_4", false);
		start_Hash.put("tJava_4", System.currentTimeMillis());
		
	
	currentComponent="tJava_4";
	
	
		int tos_count_tJava_4 = 0;
		


System.out.println("Finalizo exitosamente job nuevas afiliaciones etapa1");
context.ESTADO_EXEC = "Succes";
 



/**
 * [tJava_4 begin ] stop
 */
	
	/**
	 * [tJava_4 main ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 


	tos_count_tJava_4++;

/**
 * [tJava_4 main ] stop
 */
	
	/**
	 * [tJava_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 process_data_begin ] stop
 */
	
	/**
	 * [tJava_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 process_data_end ] stop
 */
	
	/**
	 * [tJava_4 end ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 

ok_Hash.put("tJava_4", true);
end_Hash.put("tJava_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk15", 0, "ok");
				}
				tFixedFlowInput_5Process(globalMap);



/**
 * [tJava_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_4 finally ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}
	


public static class row31Struct implements routines.system.IPersistableRow<row31Struct> {
    final static byte[] commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];
    static byte[] commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];

	
			    public Integer RESULT;

				public Integer getRESULT () {
					return this.RESULT;
				}

				public Boolean RESULTIsNullable(){
				    return true;
				}
				public Boolean RESULTIsKey(){
				    return false;
				}
				public Integer RESULTLength(){
				    return null;
				}
				public Integer RESULTPrecision(){
				    return null;
				}
				public String RESULTDefault(){
				
					return null;
				
				}
				public String RESULTComment(){
				
				    return "";
				
				}
				public String RESULTPattern(){
				
					return "";
				
				}
				public String RESULTOriginalDbColumnName(){
				
					return "RESULT";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
						this.RESULT = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
						this.RESULT = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.RESULT,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.RESULT,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("RESULT="+String.valueOf(RESULT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row31Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row31Struct row31 = new row31Struct();




	
	/**
	 * [tBufferOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tBufferOutput_1", false);
		start_Hash.put("tBufferOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tBufferOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row31");
					}
				
		int tos_count_tBufferOutput_1 = 0;
		

 



/**
 * [tBufferOutput_1 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_5", false);
		start_Hash.put("tFixedFlowInput_5", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_5";
	
	
		int tos_count_tFixedFlowInput_5 = 0;
		

	    for (int i_tFixedFlowInput_5 = 0 ; i_tFixedFlowInput_5 < 1 ; i_tFixedFlowInput_5++) {
	                	            	
    	            		row31.RESULT = 1;
    	            	

 



/**
 * [tFixedFlowInput_5 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_5 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";
	
	

 


	tos_count_tFixedFlowInput_5++;

/**
 * [tFixedFlowInput_5 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";
	
	

 



/**
 * [tFixedFlowInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tBufferOutput_1 main ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row31"
						
						);
					}
					



String[] row_tBufferOutput_1=new String[]{"",};		
	    if(row31.RESULT != null){
	        
	            row_tBufferOutput_1[0] = String.valueOf(row31.RESULT);
	                        			    
	    }else{
	    	row_tBufferOutput_1[0] = null;
	    }
	globalBuffer.add(row_tBufferOutput_1);	
	
 


	tos_count_tBufferOutput_1++;

/**
 * [tBufferOutput_1 main ] stop
 */
	
	/**
	 * [tBufferOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";
	
	

 



/**
 * [tBufferOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tBufferOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";
	
	

 



/**
 * [tBufferOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";
	
	

 



/**
 * [tFixedFlowInput_5 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_5 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";
	
	

        }
        globalMap.put("tFixedFlowInput_5_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_5", true);
end_Hash.put("tFixedFlowInput_5", System.currentTimeMillis());




/**
 * [tFixedFlowInput_5 end ] stop
 */

	
	/**
	 * [tBufferOutput_1 end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row31");
			  	}
			  	
 

ok_Hash.put("tBufferOutput_1", true);
end_Hash.put("tBufferOutput_1", System.currentTimeMillis());




/**
 * [tBufferOutput_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_5 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";
	
	

 



/**
 * [tFixedFlowInput_5 finally ] stop
 */

	
	/**
	 * [tBufferOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";
	
	

 



/**
 * [tBufferOutput_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
    final static byte[] commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];
    static byte[] commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal AFILIADO_ID;

				public BigDecimal getAFILIADO_ID () {
					return this.AFILIADO_ID;
				}

				public Boolean AFILIADO_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADO_IDIsKey(){
				    return false;
				}
				public Integer AFILIADO_IDLength(){
				    return 0;
				}
				public Integer AFILIADO_IDPrecision(){
				    return null;
				}
				public String AFILIADO_IDDefault(){
				
					return "";
				
				}
				public String AFILIADO_IDComment(){
				
				    return "";
				
				}
				public String AFILIADO_IDPattern(){
				
					return "";
				
				}
				public String AFILIADO_IDOriginalDbColumnName(){
				
					return "AFILIADO_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.AFILIADO_ID == null) ? 0 : this.AFILIADO_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.AFILIADO_ID == null) {
							if (other.AFILIADO_ID != null)
								return false;
						
						} else if (!this.AFILIADO_ID.equals(other.AFILIADO_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.AFILIADO_ID = this.AFILIADO_ID;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.AFILIADO_ID = this.AFILIADO_ID;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
						this.AFILIADO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
						this.AFILIADO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.AFILIADO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AFILIADO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
        	}
        	finally {}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADO_ID="+String.valueOf(AFILIADO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.AFILIADO_ID, other.AFILIADO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tAdvancedHash_row2 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row2", false);
		start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tAdvancedHash_row2 = 0;
		

			   		// connection name:row2
			   		// source node:tOracleInput_2 - inputs:(after_tOracleInput_1) outputs:(row2,row2) | target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row2) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row2Struct>getLookup(matchingModeEnum_row2);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row2 begin ] stop
 */



	
	/**
	 * [tOracleInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_2", false);
		start_Hash.put("tOracleInput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_2";
	
	
		int tos_count_tOracleInput_2 = 0;
		
	


	
		    int nb_line_tOracleInput_2 = 0;
		    java.sql.Connection conn_tOracleInput_2 = null;
				conn_tOracleInput_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_2 = false;
				boolean isConnectionWrapped_tOracleInput_2 = !(conn_tOracleInput_2 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_2.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_2 = null;
                if (isConnectionWrapped_tOracleInput_2) {
					unwrappedOraConn_tOracleInput_2 = conn_tOracleInput_2.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_2 != null) {
                        isTimeZoneNull_tOracleInput_2 = (unwrappedOraConn_tOracleInput_2.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_2 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_2).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_2) {
					java.sql.Statement stmtGetTZ_tOracleInput_2 = conn_tOracleInput_2.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_2 = stmtGetTZ_tOracleInput_2.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_2 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_2.next()) {
						sessionTimezone_tOracleInput_2 = rsGetTZ_tOracleInput_2.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_2 && unwrappedOraConn_tOracleInput_2 != null) {
                        unwrappedOraConn_tOracleInput_2.setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_2).setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_2 = conn_tOracleInput_2.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_2.setFetchSize(1000);


		    String dbquery_tOracleInput_2 = "SELECT  GA.ID AS AFILIADO_ID         \nFROM AFI_PLANAFILIACIONES AFP\nINNER JOIN GEN_AFILIADOS GA ON GA.PLANAFILIACIONE"
+"S_ID = AFP.ID     \nINNER JOIN GEN_PERSONAS GP ON GA.PERSONAS_ID = GP.ID                         \nWHERE AFP.CODIGO IN ("
+" 1, 2, 3, 4, 6, 11, 12, 14, 18 ) \n  AND GA.REGAFILIACION = 'Si'\n  AND GA.FECHAI BETWEEN TO_DATE('"+context.FECHA_INICIO+"','DD/MM/YYYY') \n                    AND SYSDATE + 1\n  AND GA.ESTAFILIACION <> 'Inactivo'\n  AND GA.ESTREGISTRO_ID = "
+"1\n  AND GP.ESTREGISTRO_ID = 1 ";
		    

		    globalMap.put("tOracleInput_2_QUERY",dbquery_tOracleInput_2);

		    java.sql.ResultSet rs_tOracleInput_2 = null;

		    try {
		    	rs_tOracleInput_2 = stmt_tOracleInput_2.executeQuery(dbquery_tOracleInput_2);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_2 = rs_tOracleInput_2.getMetaData();
		    	int colQtyInRs_tOracleInput_2 = rsmd_tOracleInput_2.getColumnCount();

		    String tmpContent_tOracleInput_2 = null;
		    
		    
		    while (rs_tOracleInput_2.next()) {
		        nb_line_tOracleInput_2++;
		        
							if(colQtyInRs_tOracleInput_2 < 1) {
								row2.AFILIADO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(1) != null) {
						row2.AFILIADO_ID = rs_tOracleInput_2.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
					




 



/**
 * [tOracleInput_2 begin ] stop
 */
	
	/**
	 * [tOracleInput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 


	tos_count_tOracleInput_2++;

/**
 * [tOracleInput_2 main ] stop
 */
	
	/**
	 * [tOracleInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					


			   
			   

					row2Struct row2_HashRow = new row2Struct();
		   	   	   
				
				row2_HashRow.AFILIADO_ID = row2.AFILIADO_ID;
				
			tHash_Lookup_row2.put(row2_HashRow);
			
            




 


	tos_count_tAdvancedHash_row2++;

/**
 * [tAdvancedHash_row2 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";
	
	

 



/**
 * [tAdvancedHash_row2 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";
	
	

 



/**
 * [tAdvancedHash_row2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

}
}finally{
	if (rs_tOracleInput_2 != null) {
		rs_tOracleInput_2.close();
	}
	if (stmt_tOracleInput_2 != null) {
		stmt_tOracleInput_2.close();
	}
}

globalMap.put("tOracleInput_2_NB_LINE",nb_line_tOracleInput_2);
 

ok_Hash.put("tOracleInput_2", true);
end_Hash.put("tOracleInput_2", System.currentTimeMillis());




/**
 * [tOracleInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";
	
	

tHash_Lookup_row2.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row2", true);
end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());




/**
 * [tAdvancedHash_row2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";
	
	

 



/**
 * [tAdvancedHash_row2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableComparableLookupRow<row3Struct> {
    final static byte[] commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];
    static byte[] commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal HAFILIADOS_ID;

				public BigDecimal getHAFILIADOS_ID () {
					return this.HAFILIADOS_ID;
				}

				public Boolean HAFILIADOS_IDIsNullable(){
				    return false;
				}
				public Boolean HAFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer HAFILIADOS_IDLength(){
				    return 0;
				}
				public Integer HAFILIADOS_IDPrecision(){
				    return null;
				}
				public String HAFILIADOS_IDDefault(){
				
					return "";
				
				}
				public String HAFILIADOS_IDComment(){
				
				    return "";
				
				}
				public String HAFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String HAFILIADOS_IDOriginalDbColumnName(){
				
					return "HAFILIADOS_ID";
				
				}

				
			    public String NOVEDAD;

				public String getNOVEDAD () {
					return this.NOVEDAD;
				}

				public Boolean NOVEDADIsNullable(){
				    return true;
				}
				public Boolean NOVEDADIsKey(){
				    return false;
				}
				public Integer NOVEDADLength(){
				    return null;
				}
				public Integer NOVEDADPrecision(){
				    return null;
				}
				public String NOVEDADDefault(){
				
					return null;
				
				}
				public String NOVEDADComment(){
				
				    return "";
				
				}
				public String NOVEDADPattern(){
				
					return "";
				
				}
				public String NOVEDADOriginalDbColumnName(){
				
					return "NOVEDAD";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.HAFILIADOS_ID == null) ? 0 : this.HAFILIADOS_ID.hashCode());
					
						result = prime * result + ((this.NOVEDAD == null) ? 0 : this.NOVEDAD.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row3Struct other = (row3Struct) obj;
		
						if (this.HAFILIADOS_ID == null) {
							if (other.HAFILIADOS_ID != null)
								return false;
						
						} else if (!this.HAFILIADOS_ID.equals(other.HAFILIADOS_ID))
						
							return false;
					
						if (this.NOVEDAD == null) {
							if (other.NOVEDAD != null)
								return false;
						
						} else if (!this.NOVEDAD.equals(other.NOVEDAD))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row3Struct other) {

		other.HAFILIADOS_ID = this.HAFILIADOS_ID;
	            other.NOVEDAD = this.NOVEDAD;
	            
	}

	public void copyKeysDataTo(row3Struct other) {

		other.HAFILIADOS_ID = this.HAFILIADOS_ID;
	            	other.NOVEDAD = this.NOVEDAD;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length) {
				if(length < 1024 && commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length == 0) {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[1024];
				} else {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length);
			strReturn = new String(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length) {
				if(length < 1024 && commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length == 0) {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[1024];
				} else {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length);
			strReturn = new String(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
						this.HAFILIADOS_ID = (BigDecimal) dis.readObject();
					
					this.NOVEDAD = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
						this.HAFILIADOS_ID = (BigDecimal) dis.readObject();
					
					this.NOVEDAD = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.HAFILIADOS_ID);
					
					// String
				
						writeString(this.NOVEDAD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.HAFILIADOS_ID);
					
					// String
				
						writeString(this.NOVEDAD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
        	}
        	finally {}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("HAFILIADOS_ID="+String.valueOf(HAFILIADOS_ID));
		sb.append(",NOVEDAD="+NOVEDAD);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.HAFILIADOS_ID, other.HAFILIADOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.NOVEDAD, other.NOVEDAD);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tAdvancedHash_row3 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row3", false);
		start_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tAdvancedHash_row3 = 0;
		

			   		// connection name:row3
			   		// source node:tOracleInput_3 - inputs:(after_tOracleInput_1) outputs:(row3,row3) | target node:tAdvancedHash_row3 - inputs:(row3) outputs:()
			   		// linked node: tMap_3 - inputs:(out1,row3) outputs:(out6)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row3Struct>getLookup(matchingModeEnum_row3);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row3 begin ] stop
 */



	
	/**
	 * [tOracleInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_3", false);
		start_Hash.put("tOracleInput_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_3";
	
	
		int tos_count_tOracleInput_3 = 0;
		
	


	
		    int nb_line_tOracleInput_3 = 0;
		    java.sql.Connection conn_tOracleInput_3 = null;
				conn_tOracleInput_3 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_3 = false;
				boolean isConnectionWrapped_tOracleInput_3 = !(conn_tOracleInput_3 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_3.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_3 = null;
                if (isConnectionWrapped_tOracleInput_3) {
					unwrappedOraConn_tOracleInput_3 = conn_tOracleInput_3.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_3 != null) {
                        isTimeZoneNull_tOracleInput_3 = (unwrappedOraConn_tOracleInput_3.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_3 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_3).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_3) {
					java.sql.Statement stmtGetTZ_tOracleInput_3 = conn_tOracleInput_3.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_3 = stmtGetTZ_tOracleInput_3.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_3 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_3.next()) {
						sessionTimezone_tOracleInput_3 = rsGetTZ_tOracleInput_3.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_3 && unwrappedOraConn_tOracleInput_3 != null) {
                        unwrappedOraConn_tOracleInput_3.setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_3).setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_3 = conn_tOracleInput_3.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_3.setFetchSize(1000);


		    String dbquery_tOracleInput_3 = "SELECT AHA.ID AS HAFILIADOS_ID, ARN.CODIGO AS NOVEDAD                                              \nFROM AFI_RNOVEDADE"
+"S ARN\nINNER JOIN AFI_HAFILIADOS AHA ON AHA.RNOVEDADES_ID = ARN.ID  \nINNER JOIN AFI_ESTADOS AE ON ( ( AE.NOMBRE = AHA.V"
+"ACTUAL OR TO_CHAR(AE.ID) = AHA.VACTUAL ) AND AE.SIGLA <> 'IN' )\nINNER JOIN AFI_PROCESOS AF ON AF.ID = AHA.PROCESOS_ID "
+"\nWHERE ARN.CODIGO = 'N14'     \n  AND AF.FECHA_REGISTRO BETWEEN to_date('"+context.FECHA_INICIO+"','DD/MM/YYYY') \n                            AND SYSDATE + 1\n  AND AHA.ESTREGISTRO_ID = 1\n  AND AF.ESTREGISTRO_ID = "
+"1";
		    

		    globalMap.put("tOracleInput_3_QUERY",dbquery_tOracleInput_3);

		    java.sql.ResultSet rs_tOracleInput_3 = null;

		    try {
		    	rs_tOracleInput_3 = stmt_tOracleInput_3.executeQuery(dbquery_tOracleInput_3);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_3 = rs_tOracleInput_3.getMetaData();
		    	int colQtyInRs_tOracleInput_3 = rsmd_tOracleInput_3.getColumnCount();

		    String tmpContent_tOracleInput_3 = null;
		    
		    
		    while (rs_tOracleInput_3.next()) {
		        nb_line_tOracleInput_3++;
		        
							if(colQtyInRs_tOracleInput_3 < 1) {
								row3.HAFILIADOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(1) != null) {
						row3.HAFILIADOS_ID = rs_tOracleInput_3.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 2) {
								row3.NOVEDAD = null;
							} else {
	                         		
        	row3.NOVEDAD = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 2, false);
		                    }
					




 



/**
 * [tOracleInput_3 begin ] stop
 */
	
	/**
	 * [tOracleInput_3 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 


	tos_count_tOracleInput_3++;

/**
 * [tOracleInput_3 main ] stop
 */
	
	/**
	 * [tOracleInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					


			   
			   

					row3Struct row3_HashRow = new row3Struct();
		   	   	   
				
				row3_HashRow.HAFILIADOS_ID = row3.HAFILIADOS_ID;
				
				row3_HashRow.NOVEDAD = row3.NOVEDAD;
				
			tHash_Lookup_row3.put(row3_HashRow);
			
            




 


	tos_count_tAdvancedHash_row3++;

/**
 * [tAdvancedHash_row3 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";
	
	

 



/**
 * [tAdvancedHash_row3 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row3 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";
	
	

 



/**
 * [tAdvancedHash_row3 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_3 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

}
}finally{
	if (rs_tOracleInput_3 != null) {
		rs_tOracleInput_3.close();
	}
	if (stmt_tOracleInput_3 != null) {
		stmt_tOracleInput_3.close();
	}
}

globalMap.put("tOracleInput_3_NB_LINE",nb_line_tOracleInput_3);
 

ok_Hash.put("tOracleInput_3", true);
end_Hash.put("tOracleInput_3", System.currentTimeMillis());




/**
 * [tOracleInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";
	
	

tHash_Lookup_row3.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row3", true);
end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());




/**
 * [tAdvancedHash_row3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";
	
	

 



/**
 * [tAdvancedHash_row3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableComparableLookupRow<row4Struct> {
    final static byte[] commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];
    static byte[] commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal AFILIADOS_ID;

				public BigDecimal getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 0;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return null;
				}
				public String AFILIADOS_IDDefault(){
				
					return "";
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public String NOVEDAD;

				public String getNOVEDAD () {
					return this.NOVEDAD;
				}

				public Boolean NOVEDADIsNullable(){
				    return true;
				}
				public Boolean NOVEDADIsKey(){
				    return false;
				}
				public Integer NOVEDADLength(){
				    return null;
				}
				public Integer NOVEDADPrecision(){
				    return null;
				}
				public String NOVEDADDefault(){
				
					return null;
				
				}
				public String NOVEDADComment(){
				
				    return "";
				
				}
				public String NOVEDADPattern(){
				
					return "";
				
				}
				public String NOVEDADOriginalDbColumnName(){
				
					return "NOVEDAD";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.AFILIADOS_ID == null) ? 0 : this.AFILIADOS_ID.hashCode());
					
						result = prime * result + ((this.NOVEDAD == null) ? 0 : this.NOVEDAD.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row4Struct other = (row4Struct) obj;
		
						if (this.AFILIADOS_ID == null) {
							if (other.AFILIADOS_ID != null)
								return false;
						
						} else if (!this.AFILIADOS_ID.equals(other.AFILIADOS_ID))
						
							return false;
					
						if (this.NOVEDAD == null) {
							if (other.NOVEDAD != null)
								return false;
						
						} else if (!this.NOVEDAD.equals(other.NOVEDAD))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row4Struct other) {

		other.AFILIADOS_ID = this.AFILIADOS_ID;
	            other.NOVEDAD = this.NOVEDAD;
	            
	}

	public void copyKeysDataTo(row4Struct other) {

		other.AFILIADOS_ID = this.AFILIADOS_ID;
	            	other.NOVEDAD = this.NOVEDAD;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length) {
				if(length < 1024 && commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length == 0) {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[1024];
				} else {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length);
			strReturn = new String(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length) {
				if(length < 1024 && commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length == 0) {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[1024];
				} else {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length);
			strReturn = new String(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
						this.AFILIADOS_ID = (BigDecimal) dis.readObject();
					
					this.NOVEDAD = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
						this.AFILIADOS_ID = (BigDecimal) dis.readObject();
					
					this.NOVEDAD = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.AFILIADOS_ID);
					
					// String
				
						writeString(this.NOVEDAD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AFILIADOS_ID);
					
					// String
				
						writeString(this.NOVEDAD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
        	}
        	finally {}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",NOVEDAD="+NOVEDAD);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.AFILIADOS_ID, other.AFILIADOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.NOVEDAD, other.NOVEDAD);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tAdvancedHash_row4 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row4", false);
		start_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tAdvancedHash_row4 = 0;
		

			   		// connection name:row4
			   		// source node:tOracleInput_4 - inputs:(after_tOracleInput_1) outputs:(row4,row4) | target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
			   		// linked node: tMap_6 - inputs:(out6,row4) outputs:(out7)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row4Struct>getLookup(matchingModeEnum_row4);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row4 begin ] stop
 */



	
	/**
	 * [tOracleInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_4", false);
		start_Hash.put("tOracleInput_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_4";
	
	
		int tos_count_tOracleInput_4 = 0;
		
	


	
		    int nb_line_tOracleInput_4 = 0;
		    java.sql.Connection conn_tOracleInput_4 = null;
				conn_tOracleInput_4 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_4 = false;
				boolean isConnectionWrapped_tOracleInput_4 = !(conn_tOracleInput_4 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_4.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_4 = null;
                if (isConnectionWrapped_tOracleInput_4) {
					unwrappedOraConn_tOracleInput_4 = conn_tOracleInput_4.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_4 != null) {
                        isTimeZoneNull_tOracleInput_4 = (unwrappedOraConn_tOracleInput_4.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_4 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_4).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_4) {
					java.sql.Statement stmtGetTZ_tOracleInput_4 = conn_tOracleInput_4.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_4 = stmtGetTZ_tOracleInput_4.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_4 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_4.next()) {
						sessionTimezone_tOracleInput_4 = rsGetTZ_tOracleInput_4.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_4 && unwrappedOraConn_tOracleInput_4 != null) {
                        unwrappedOraConn_tOracleInput_4.setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_4).setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_4 = conn_tOracleInput_4.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_4.setFetchSize(1000);


		    String dbquery_tOracleInput_4 = "SELECT AFHA3.AFILIADOS_ID, AFRN3.CODIGO AS NOVEDAD\nFROM AFI_RNOVEDADES AFRN3\nINNER JOIN AFI_HAFILIADOS AFHA3 ON AFHA3"
+".RNOVEDADES_ID = AFRN3.ID  \nINNER JOIN AFI_PROCESOS AFPRO3 ON AFPRO3.ID = AFHA3.PROCESOS_ID\nINNER JOIN AFI_ESTADOS AEA"
+" ON ( ( AEA.NOMBRE = AFHA3.VANTERIOR OR TO_CHAR( AEA.ID ) = AFHA3.VANTERIOR ) AND AEA.SIGLA = 'IN' )\nINNER JOIN AFI_EST"
+"ADOS AEV ON ( ( AEV.NOMBRE = AFHA3.VACTUAL OR TO_CHAR( AEV.ID ) = AFHA3.VACTUAL ) AND AEV.SIGLA IN  ('AC', 'PR', 'RI') )"
+"\nWHERE AFRN3.CODIGO = 'N14'  \n  AND AFPRO3.FECHA_REGISTRO BETWEEN to_date( '"+context.FECHA_INICIO+"','DD/MM/YYYY') \n                                AND SYSDATE + 1\n  AND AFHA3.ESTREGISTRO_ID = 1 \n  AND AFPRO3.ESTREG"
+"ISTRO_ID = 1   ";
		    

		    globalMap.put("tOracleInput_4_QUERY",dbquery_tOracleInput_4);

		    java.sql.ResultSet rs_tOracleInput_4 = null;

		    try {
		    	rs_tOracleInput_4 = stmt_tOracleInput_4.executeQuery(dbquery_tOracleInput_4);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_4 = rs_tOracleInput_4.getMetaData();
		    	int colQtyInRs_tOracleInput_4 = rsmd_tOracleInput_4.getColumnCount();

		    String tmpContent_tOracleInput_4 = null;
		    
		    
		    while (rs_tOracleInput_4.next()) {
		        nb_line_tOracleInput_4++;
		        
							if(colQtyInRs_tOracleInput_4 < 1) {
								row4.AFILIADOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(1) != null) {
						row4.AFILIADOS_ID = rs_tOracleInput_4.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 2) {
								row4.NOVEDAD = null;
							} else {
	                         		
        	row4.NOVEDAD = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 2, false);
		                    }
					




 



/**
 * [tOracleInput_4 begin ] stop
 */
	
	/**
	 * [tOracleInput_4 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 


	tos_count_tOracleInput_4++;

/**
 * [tOracleInput_4 main ] stop
 */
	
	/**
	 * [tOracleInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					


			   
			   

					row4Struct row4_HashRow = new row4Struct();
		   	   	   
				
				row4_HashRow.AFILIADOS_ID = row4.AFILIADOS_ID;
				
				row4_HashRow.NOVEDAD = row4.NOVEDAD;
				
			tHash_Lookup_row4.put(row4_HashRow);
			
            




 


	tos_count_tAdvancedHash_row4++;

/**
 * [tAdvancedHash_row4 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";
	
	

 



/**
 * [tAdvancedHash_row4 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";
	
	

 



/**
 * [tAdvancedHash_row4 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_4 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

}
}finally{
	if (rs_tOracleInput_4 != null) {
		rs_tOracleInput_4.close();
	}
	if (stmt_tOracleInput_4 != null) {
		stmt_tOracleInput_4.close();
	}
}

globalMap.put("tOracleInput_4_NB_LINE",nb_line_tOracleInput_4);
 

ok_Hash.put("tOracleInput_4", true);
end_Hash.put("tOracleInput_4", System.currentTimeMillis());




/**
 * [tOracleInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";
	
	

tHash_Lookup_row4.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row4", true);
end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());




/**
 * [tAdvancedHash_row4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";
	
	

 



/**
 * [tAdvancedHash_row4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row9Struct implements routines.system.IPersistableComparableLookupRow<row9Struct> {
    final static byte[] commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];
    static byte[] commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal AFILIADOS_ID;

				public BigDecimal getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 0;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return null;
				}
				public String AFILIADOS_IDDefault(){
				
					return "";
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public String NOVEDAD;

				public String getNOVEDAD () {
					return this.NOVEDAD;
				}

				public Boolean NOVEDADIsNullable(){
				    return true;
				}
				public Boolean NOVEDADIsKey(){
				    return false;
				}
				public Integer NOVEDADLength(){
				    return null;
				}
				public Integer NOVEDADPrecision(){
				    return null;
				}
				public String NOVEDADDefault(){
				
					return null;
				
				}
				public String NOVEDADComment(){
				
				    return "";
				
				}
				public String NOVEDADPattern(){
				
					return "";
				
				}
				public String NOVEDADOriginalDbColumnName(){
				
					return "NOVEDAD";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.AFILIADOS_ID == null) ? 0 : this.AFILIADOS_ID.hashCode());
					
						result = prime * result + ((this.NOVEDAD == null) ? 0 : this.NOVEDAD.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row9Struct other = (row9Struct) obj;
		
						if (this.AFILIADOS_ID == null) {
							if (other.AFILIADOS_ID != null)
								return false;
						
						} else if (!this.AFILIADOS_ID.equals(other.AFILIADOS_ID))
						
							return false;
					
						if (this.NOVEDAD == null) {
							if (other.NOVEDAD != null)
								return false;
						
						} else if (!this.NOVEDAD.equals(other.NOVEDAD))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row9Struct other) {

		other.AFILIADOS_ID = this.AFILIADOS_ID;
	            other.NOVEDAD = this.NOVEDAD;
	            
	}

	public void copyKeysDataTo(row9Struct other) {

		other.AFILIADOS_ID = this.AFILIADOS_ID;
	            	other.NOVEDAD = this.NOVEDAD;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length) {
				if(length < 1024 && commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length == 0) {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[1024];
				} else {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length);
			strReturn = new String(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length) {
				if(length < 1024 && commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length == 0) {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[1024];
				} else {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length);
			strReturn = new String(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
						this.AFILIADOS_ID = (BigDecimal) dis.readObject();
					
					this.NOVEDAD = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
						this.AFILIADOS_ID = (BigDecimal) dis.readObject();
					
					this.NOVEDAD = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.AFILIADOS_ID);
					
					// String
				
						writeString(this.NOVEDAD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AFILIADOS_ID);
					
					// String
				
						writeString(this.NOVEDAD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
        	}
        	finally {}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",NOVEDAD="+NOVEDAD);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.AFILIADOS_ID, other.AFILIADOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.NOVEDAD, other.NOVEDAD);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();




	
	/**
	 * [tAdvancedHash_row9 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row9", false);
		start_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tAdvancedHash_row9 = 0;
		

			   		// connection name:row9
			   		// source node:tOracleInput_6 - inputs:(after_tOracleInput_1) outputs:(row9,row9) | target node:tAdvancedHash_row9 - inputs:(row9) outputs:()
			   		// linked node: tMap_4 - inputs:(out7,row9) outputs:(copyOfout6)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row9 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row9Struct>getLookup(matchingModeEnum_row9);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row9", tHash_Lookup_row9);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row9 begin ] stop
 */



	
	/**
	 * [tOracleInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_6", false);
		start_Hash.put("tOracleInput_6", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_6";
	
	
		int tos_count_tOracleInput_6 = 0;
		
	


	
		    int nb_line_tOracleInput_6 = 0;
		    java.sql.Connection conn_tOracleInput_6 = null;
				conn_tOracleInput_6 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_6 = false;
				boolean isConnectionWrapped_tOracleInput_6 = !(conn_tOracleInput_6 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_6.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_6 = null;
                if (isConnectionWrapped_tOracleInput_6) {
					unwrappedOraConn_tOracleInput_6 = conn_tOracleInput_6.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_6 != null) {
                        isTimeZoneNull_tOracleInput_6 = (unwrappedOraConn_tOracleInput_6.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_6 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_6).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_6) {
					java.sql.Statement stmtGetTZ_tOracleInput_6 = conn_tOracleInput_6.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_6 = stmtGetTZ_tOracleInput_6.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_6 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_6.next()) {
						sessionTimezone_tOracleInput_6 = rsGetTZ_tOracleInput_6.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_6 && unwrappedOraConn_tOracleInput_6 != null) {
                        unwrappedOraConn_tOracleInput_6.setSessionTimeZone(sessionTimezone_tOracleInput_6);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_6).setSessionTimeZone(sessionTimezone_tOracleInput_6);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_6 = conn_tOracleInput_6.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_6.setFetchSize(1000);


		    String dbquery_tOracleInput_6 = "SELECT AHA.AFILIADOS_ID AS AFILIADOS_ID, 'N14' AS NOVEDAD\nFROM AFI_RNOVEDADES ARN\nINNER JOIN AFI_HAFILIADOS AHA ON AH"
+"A.RNOVEDADES_ID = ARN.ID  \nINNER JOIN AFI_PROCESOS AF ON AF.ID = AHA.PROCESOS_ID \nWHERE ARN.CODIGO = 'N21' \n  AND AF."
+"FECHA_REGISTRO   BETWEEN to_date( '"+context.FECHA_INICIO+"','DD/MM/YYYY') \n                                AND SYSDATE + 1\n  AND AHA.ESTREGISTRO_ID = 1\n  AND AF.ESTREGISTRO_I"
+"D = 1";
		    

		    globalMap.put("tOracleInput_6_QUERY",dbquery_tOracleInput_6);

		    java.sql.ResultSet rs_tOracleInput_6 = null;

		    try {
		    	rs_tOracleInput_6 = stmt_tOracleInput_6.executeQuery(dbquery_tOracleInput_6);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_6 = rs_tOracleInput_6.getMetaData();
		    	int colQtyInRs_tOracleInput_6 = rsmd_tOracleInput_6.getColumnCount();

		    String tmpContent_tOracleInput_6 = null;
		    
		    
		    while (rs_tOracleInput_6.next()) {
		        nb_line_tOracleInput_6++;
		        
							if(colQtyInRs_tOracleInput_6 < 1) {
								row9.AFILIADOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(1) != null) {
						row9.AFILIADOS_ID = rs_tOracleInput_6.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 2) {
								row9.NOVEDAD = null;
							} else {
	                         		
        	row9.NOVEDAD = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 2, false);
		                    }
					




 



/**
 * [tOracleInput_6 begin ] stop
 */
	
	/**
	 * [tOracleInput_6 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 


	tos_count_tOracleInput_6++;

/**
 * [tOracleInput_6 main ] stop
 */
	
	/**
	 * [tOracleInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					


			   
			   

					row9Struct row9_HashRow = new row9Struct();
		   	   	   
				
				row9_HashRow.AFILIADOS_ID = row9.AFILIADOS_ID;
				
				row9_HashRow.NOVEDAD = row9.NOVEDAD;
				
			tHash_Lookup_row9.put(row9_HashRow);
			
            




 


	tos_count_tAdvancedHash_row9++;

/**
 * [tAdvancedHash_row9 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	

 



/**
 * [tAdvancedHash_row9 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row9 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	

 



/**
 * [tAdvancedHash_row9 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_6 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

}
}finally{
	if (rs_tOracleInput_6 != null) {
		rs_tOracleInput_6.close();
	}
	if (stmt_tOracleInput_6 != null) {
		stmt_tOracleInput_6.close();
	}
}

globalMap.put("tOracleInput_6_NB_LINE",nb_line_tOracleInput_6);
 

ok_Hash.put("tOracleInput_6", true);
end_Hash.put("tOracleInput_6", System.currentTimeMillis());




/**
 * [tOracleInput_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	

tHash_Lookup_row9.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row9", true);
end_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());




/**
 * [tAdvancedHash_row9 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_6 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	

 



/**
 * [tAdvancedHash_row9 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableComparableLookupRow<row8Struct> {
    final static byte[] commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];
    static byte[] commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal AFILIADO_ID;

				public BigDecimal getAFILIADO_ID () {
					return this.AFILIADO_ID;
				}

				public Boolean AFILIADO_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADO_IDIsKey(){
				    return false;
				}
				public Integer AFILIADO_IDLength(){
				    return null;
				}
				public Integer AFILIADO_IDPrecision(){
				    return null;
				}
				public String AFILIADO_IDDefault(){
				
					return "";
				
				}
				public String AFILIADO_IDComment(){
				
				    return "";
				
				}
				public String AFILIADO_IDPattern(){
				
					return "";
				
				}
				public String AFILIADO_IDOriginalDbColumnName(){
				
					return "AFILIADO_ID";
				
				}

				
			    public String PRI_NOMBRE_ANT;

				public String getPRI_NOMBRE_ANT () {
					return this.PRI_NOMBRE_ANT;
				}

				public Boolean PRI_NOMBRE_ANTIsNullable(){
				    return true;
				}
				public Boolean PRI_NOMBRE_ANTIsKey(){
				    return false;
				}
				public Integer PRI_NOMBRE_ANTLength(){
				    return null;
				}
				public Integer PRI_NOMBRE_ANTPrecision(){
				    return null;
				}
				public String PRI_NOMBRE_ANTDefault(){
				
					return null;
				
				}
				public String PRI_NOMBRE_ANTComment(){
				
				    return "";
				
				}
				public String PRI_NOMBRE_ANTPattern(){
				
					return "";
				
				}
				public String PRI_NOMBRE_ANTOriginalDbColumnName(){
				
					return "PRI_NOMBRE_ANT";
				
				}

				
			    public String SEG_NOMBRE_ANT;

				public String getSEG_NOMBRE_ANT () {
					return this.SEG_NOMBRE_ANT;
				}

				public Boolean SEG_NOMBRE_ANTIsNullable(){
				    return true;
				}
				public Boolean SEG_NOMBRE_ANTIsKey(){
				    return false;
				}
				public Integer SEG_NOMBRE_ANTLength(){
				    return null;
				}
				public Integer SEG_NOMBRE_ANTPrecision(){
				    return null;
				}
				public String SEG_NOMBRE_ANTDefault(){
				
					return null;
				
				}
				public String SEG_NOMBRE_ANTComment(){
				
				    return "";
				
				}
				public String SEG_NOMBRE_ANTPattern(){
				
					return "";
				
				}
				public String SEG_NOMBRE_ANTOriginalDbColumnName(){
				
					return "SEG_NOMBRE_ANT";
				
				}

				
			    public String PRI_APELLIDO_ANT;

				public String getPRI_APELLIDO_ANT () {
					return this.PRI_APELLIDO_ANT;
				}

				public Boolean PRI_APELLIDO_ANTIsNullable(){
				    return true;
				}
				public Boolean PRI_APELLIDO_ANTIsKey(){
				    return false;
				}
				public Integer PRI_APELLIDO_ANTLength(){
				    return null;
				}
				public Integer PRI_APELLIDO_ANTPrecision(){
				    return null;
				}
				public String PRI_APELLIDO_ANTDefault(){
				
					return null;
				
				}
				public String PRI_APELLIDO_ANTComment(){
				
				    return "";
				
				}
				public String PRI_APELLIDO_ANTPattern(){
				
					return "";
				
				}
				public String PRI_APELLIDO_ANTOriginalDbColumnName(){
				
					return "PRI_APELLIDO_ANT";
				
				}

				
			    public String SEG_APELLIDO_ANT;

				public String getSEG_APELLIDO_ANT () {
					return this.SEG_APELLIDO_ANT;
				}

				public Boolean SEG_APELLIDO_ANTIsNullable(){
				    return true;
				}
				public Boolean SEG_APELLIDO_ANTIsKey(){
				    return false;
				}
				public Integer SEG_APELLIDO_ANTLength(){
				    return null;
				}
				public Integer SEG_APELLIDO_ANTPrecision(){
				    return null;
				}
				public String SEG_APELLIDO_ANTDefault(){
				
					return null;
				
				}
				public String SEG_APELLIDO_ANTComment(){
				
				    return "";
				
				}
				public String SEG_APELLIDO_ANTPattern(){
				
					return "";
				
				}
				public String SEG_APELLIDO_ANTOriginalDbColumnName(){
				
					return "SEG_APELLIDO_ANT";
				
				}

				
			    public String FNACIMIENTO_ANT;

				public String getFNACIMIENTO_ANT () {
					return this.FNACIMIENTO_ANT;
				}

				public Boolean FNACIMIENTO_ANTIsNullable(){
				    return true;
				}
				public Boolean FNACIMIENTO_ANTIsKey(){
				    return false;
				}
				public Integer FNACIMIENTO_ANTLength(){
				    return null;
				}
				public Integer FNACIMIENTO_ANTPrecision(){
				    return null;
				}
				public String FNACIMIENTO_ANTDefault(){
				
					return null;
				
				}
				public String FNACIMIENTO_ANTComment(){
				
				    return "";
				
				}
				public String FNACIMIENTO_ANTPattern(){
				
					return "";
				
				}
				public String FNACIMIENTO_ANTOriginalDbColumnName(){
				
					return "FNACIMIENTO_ANT";
				
				}

				
			    public String TDOCUMENTO_ANT;

				public String getTDOCUMENTO_ANT () {
					return this.TDOCUMENTO_ANT;
				}

				public Boolean TDOCUMENTO_ANTIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_ANTIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_ANTLength(){
				    return null;
				}
				public Integer TDOCUMENTO_ANTPrecision(){
				    return null;
				}
				public String TDOCUMENTO_ANTDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_ANTComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_ANTPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_ANTOriginalDbColumnName(){
				
					return "TDOCUMENTO_ANT";
				
				}

				
			    public String DOCUMENTO_ANT;

				public String getDOCUMENTO_ANT () {
					return this.DOCUMENTO_ANT;
				}

				public Boolean DOCUMENTO_ANTIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_ANTIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_ANTLength(){
				    return null;
				}
				public Integer DOCUMENTO_ANTPrecision(){
				    return null;
				}
				public String DOCUMENTO_ANTDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_ANTComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_ANTPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_ANTOriginalDbColumnName(){
				
					return "DOCUMENTO_ANT";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.AFILIADO_ID == null) ? 0 : this.AFILIADO_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row8Struct other = (row8Struct) obj;
		
						if (this.AFILIADO_ID == null) {
							if (other.AFILIADO_ID != null)
								return false;
						
						} else if (!this.AFILIADO_ID.equals(other.AFILIADO_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row8Struct other) {

		other.AFILIADO_ID = this.AFILIADO_ID;
	            other.PRI_NOMBRE_ANT = this.PRI_NOMBRE_ANT;
	            other.SEG_NOMBRE_ANT = this.SEG_NOMBRE_ANT;
	            other.PRI_APELLIDO_ANT = this.PRI_APELLIDO_ANT;
	            other.SEG_APELLIDO_ANT = this.SEG_APELLIDO_ANT;
	            other.FNACIMIENTO_ANT = this.FNACIMIENTO_ANT;
	            other.TDOCUMENTO_ANT = this.TDOCUMENTO_ANT;
	            other.DOCUMENTO_ANT = this.DOCUMENTO_ANT;
	            
	}

	public void copyKeysDataTo(row8Struct other) {

		other.AFILIADO_ID = this.AFILIADO_ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
						this.AFILIADO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
						this.AFILIADO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.AFILIADO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AFILIADO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.PRI_NOMBRE_ANT = readString(dis,ois);
					
						this.SEG_NOMBRE_ANT = readString(dis,ois);
					
						this.PRI_APELLIDO_ANT = readString(dis,ois);
					
						this.SEG_APELLIDO_ANT = readString(dis,ois);
					
						this.FNACIMIENTO_ANT = readString(dis,ois);
					
						this.TDOCUMENTO_ANT = readString(dis,ois);
					
						this.DOCUMENTO_ANT = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.PRI_NOMBRE_ANT = readString(dis,objectIn);
					
						this.SEG_NOMBRE_ANT = readString(dis,objectIn);
					
						this.PRI_APELLIDO_ANT = readString(dis,objectIn);
					
						this.SEG_APELLIDO_ANT = readString(dis,objectIn);
					
						this.FNACIMIENTO_ANT = readString(dis,objectIn);
					
						this.TDOCUMENTO_ANT = readString(dis,objectIn);
					
						this.DOCUMENTO_ANT = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.PRI_NOMBRE_ANT, dos, oos);
					
						writeString(this.SEG_NOMBRE_ANT, dos, oos);
					
						writeString(this.PRI_APELLIDO_ANT, dos, oos);
					
						writeString(this.SEG_APELLIDO_ANT, dos, oos);
					
						writeString(this.FNACIMIENTO_ANT, dos, oos);
					
						writeString(this.TDOCUMENTO_ANT, dos, oos);
					
						writeString(this.DOCUMENTO_ANT, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.PRI_NOMBRE_ANT, dos, objectOut);
					
						writeString(this.SEG_NOMBRE_ANT, dos, objectOut);
					
						writeString(this.PRI_APELLIDO_ANT, dos, objectOut);
					
						writeString(this.SEG_APELLIDO_ANT, dos, objectOut);
					
						writeString(this.FNACIMIENTO_ANT, dos, objectOut);
					
						writeString(this.TDOCUMENTO_ANT, dos, objectOut);
					
						writeString(this.DOCUMENTO_ANT, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADO_ID="+String.valueOf(AFILIADO_ID));
		sb.append(",PRI_NOMBRE_ANT="+PRI_NOMBRE_ANT);
		sb.append(",SEG_NOMBRE_ANT="+SEG_NOMBRE_ANT);
		sb.append(",PRI_APELLIDO_ANT="+PRI_APELLIDO_ANT);
		sb.append(",SEG_APELLIDO_ANT="+SEG_APELLIDO_ANT);
		sb.append(",FNACIMIENTO_ANT="+FNACIMIENTO_ANT);
		sb.append(",TDOCUMENTO_ANT="+TDOCUMENTO_ANT);
		sb.append(",DOCUMENTO_ANT="+DOCUMENTO_ANT);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.AFILIADO_ID, other.AFILIADO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();




	
	/**
	 * [tAdvancedHash_row8 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row8", false);
		start_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tAdvancedHash_row8 = 0;
		

			   		// connection name:row8
			   		// source node:tOracleInput_5 - inputs:(after_tOracleInput_1) outputs:(row8,row8) | target node:tAdvancedHash_row8 - inputs:(row8) outputs:()
			   		// linked node: tMap_2 - inputs:(row6,row8) outputs:(out2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row8 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row8Struct>getLookup(matchingModeEnum_row8);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row8", tHash_Lookup_row8);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row8 begin ] stop
 */



	
	/**
	 * [tOracleInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_5", false);
		start_Hash.put("tOracleInput_5", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_5";
	
	
		int tos_count_tOracleInput_5 = 0;
		
	


	
		    int nb_line_tOracleInput_5 = 0;
		    java.sql.Connection conn_tOracleInput_5 = null;
				conn_tOracleInput_5 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_5 = false;
				boolean isConnectionWrapped_tOracleInput_5 = !(conn_tOracleInput_5 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_5.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_5 = null;
                if (isConnectionWrapped_tOracleInput_5) {
					unwrappedOraConn_tOracleInput_5 = conn_tOracleInput_5.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_5 != null) {
                        isTimeZoneNull_tOracleInput_5 = (unwrappedOraConn_tOracleInput_5.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_5 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_5).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_5) {
					java.sql.Statement stmtGetTZ_tOracleInput_5 = conn_tOracleInput_5.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_5 = stmtGetTZ_tOracleInput_5.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_5 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_5.next()) {
						sessionTimezone_tOracleInput_5 = rsGetTZ_tOracleInput_5.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_5 && unwrappedOraConn_tOracleInput_5 != null) {
                        unwrappedOraConn_tOracleInput_5.setSessionTimeZone(sessionTimezone_tOracleInput_5);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_5).setSessionTimeZone(sessionTimezone_tOracleInput_5);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_5 = conn_tOracleInput_5.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_5.setFetchSize(1000);


		    String dbquery_tOracleInput_5 = "SELECT    afi.AFILIADO_ID \n        , NVL( MAX( afi.PRIMER_NOMBRE_ANT ), afi.PRIMER_NOMBRE) AS PRI_NOMBRE_ANT\n        "
+", NVL( MAX( afi.SEGUNDO_NOMBRE_ANT ), afi.SEGUNDO_NOMBRE) AS SEG_NOMBRE_ANT\n        , NVL( MAX( afi.PRIMER_APELLIDO_ANT"
+" ), afi.PRIMER_APELLIDO) AS PRI_APELLIDO_ANT\n        , NVL( MAX( afi.SEGUNDO_APELLIDO_ANT ), afi.SEGUNDO_APELLIDO) AS S"
+"EG_APELLIDO_ANT\n        , NVL( MAX( afi.FECHA_NACIMIENTO_ANT ), afi.FECHA_NACIMIENTO) AS FNACIMIENTO_ANT\n        , NVL"
+"( MAX( afi.TDOCUMENTO_ANT ), afi.TDOCUMENTO) AS TDOCUMENTO_ANT\n        , NVL( MAX( afi.DOCUMENTO_ANT ), afi.DOCUMENTO )"
+" AS DOCUMENTO_ANT       \nFROM (\n  SELECT     GA.ID AS AFILIADO_ID            \n          ,  ROW_NUMBER() OVER (PARTITI"
+"ON BY GA.ID,AFRN.CODIGO,AFHA.CAMPO  ORDER BY AFPRO.FECHA_REGISTRO DESC) R \n          ,  CASE  \n                WHEN (A"
+"FRN.CODIGO = 'N02' AND AFHA.CAMPO = 'PRIMER_NOMBRE') OR (AFRN.CODIGO = 'N02' AND AFHA.CAMPO = 'AMBOS_NOMBRES')\n        "
+"        THEN AFHA.VANTERIOR--RTRIM (REGEXP_SUBSTR (AFHA.VANTERIOR, '[^,]*,', 1, 3), ',') \n             END AS PRIMER_NO"
+"MBRE_ANT\n          ,  CASE  \n                WHEN (AFRN.CODIGO = 'N02' AND AFHA.CAMPO = 'SEGUNDO_NOMBRE') OR (AFRN.COD"
+"IGO = 'N02' AND AFHA.CAMPO = 'AMBOS_NOMBRES')\n                THEN AFHA.VANTERIOR--LTRIM (REGEXP_SUBSTR (AFHA.VANTERIOR"
+", ',[^,]*', 1, 3), ',')\n             END AS SEGUNDO_NOMBRE_ANT\n          ,  CASE  \n                WHEN (AFRN.CODIGO "
+"= 'N03' AND AFHA.CAMPO = 'PRIMER_APELLIDO') OR (AFRN.CODIGO = 'N03' AND AFHA.CAMPO = 'AMBOS_APELLIDOS')\n               "
+" THEN AFHA.VANTERIOR--RTRIM (REGEXP_SUBSTR (AFHA.VANTERIOR, '[^,]*,', 1, 1), ',')    \n             END AS PRIMER_APELLI"
+"DO_ANT \n          ,  CASE  \n                WHEN (AFRN.CODIGO = 'N03' AND AFHA.CAMPO = 'SEGUNDO_APELLIDO') OR (AFRN.CO"
+"DIGO = 'N03' AND AFHA.CAMPO = 'AMBOS_APELLIDOS')\n                THEN AFHA.VANTERIOR--THEN RTRIM (REGEXP_SUBSTR (AFHA.V"
+"ANTERIOR, '[^,]*,', 1, 2), ',')    \n             END AS SEGUNDO_APELLIDO_ANT \n          \n          ,  CASE \n        "
+"         WHEN AFRN.CODIGO = 'N01' AND AFHA.CAMPO = 'FECHA_NACIMIENTO' \n                 THEN  TO_CHAR(TO_DATE(SUBSTR(AF"
+"HA.VANTERIOR, 0, 10),'DD/MM/YYYY'), 'DD/MM/YYYY')                \n             END  AS FECHA_NACIMIENTO_ANT\n          "
+",  TDOC_ANT.SIGLA  AS TDOCUMENTO_ANT\n          ,  CASE \n                 WHEN AFRN.CODIGO = 'N01' AND AFHA.CAMPO = 'DO"
+"CUMENTO' \n                 THEN  AFHA.VANTERIOR                  \n             END  AS DOCUMENTO_ANT \n          ,  GP"
+".PRIMER_NOMBRE\n          ,  GP.SEGUNDO_NOMBRE\n          ,  GP.PRIMER_APELLIDO\n          ,  GP.SEGUNDO_APELLIDO\n     "
+"     ,  TO_CHAR( GP.FECHA_NACIMIENTO, 'DD/MM/YYYY') AS FECHA_NACIMIENTO\n          ,  GP.DOCUMENTO\n          ,  TD.SIGL"
+"A AS TDOCUMENTO\n  FROM AFI_RNOVEDADES AFRN\n  INNER JOIN AFI_HAFILIADOS AFHA ON AFHA.RNOVEDADES_ID = AFRN.ID \n  INNER "
+"JOIN AFI_PROCESOS AFPRO ON AFPRO.ID = AFHA.PROCESOS_ID\n  INNER JOIN GEN_AFILIADOS GA ON GA.ID = AFHA.AFILIADOS_ID  \n  "
+"INNER JOIN GEN_PERSONAS GP ON GP.ID = GA.PERSONAS_ID\n  INNER JOIN GEN_TDOCUMENTOS TD ON TD.ID = GP.TDOCUMENTOS_ID\n  LE"
+"FT JOIN GEN_TDOCUMENTOS TDOC_ANT ON ( TO_CHAR(TDOC_ANT.ID) =  TRIM(AFHA.VANTERIOR) AND AFHA.CAMPO = 'TDOCUMENTOS_ID' AND"
+" AFRN.CODIGO = 'N01' )\n  LEFT JOIN GEN_TDOCUMENTOS TDOC_ACT ON ( TO_CHAR(TDOC_ACT.ID) =  TRIM(AFHA.VACTUAL) AND AFHA.CA"
+"MPO = 'TDOCUMENTOS_ID' AND AFRN.CODIGO = 'N01' )\n  WHERE  AFRN.CODIGO IN ('N01', 'N02', 'N03')\n    AND AFPRO.FECHA_REG"
+"ISTRO BETWEEN to_date( '"+context.FECHA_INICIO+"','DD/MM/YYYY') \n                                 AND SYSDATE + 1  \n    AND AFHA.ESTREGISTRO_ID = 1\n    AND AFPRO.ES"
+"TREGISTRO_ID = 1\n    AND GA.ESTREGISTRO_ID = 1\n    AND GP.ESTREGISTRO_ID = 1\n) afi\nWHERE afi.R = 1\nGROUP BY  afi.AF"
+"ILIADO_ID \n  , afi.PRIMER_NOMBRE\n  , afi.SEGUNDO_NOMBRE\n  , afi.PRIMER_APELLIDO\n  , afi.SEGUNDO_APELLIDO\n  , afi.FE"
+"CHA_NACIMIENTO\n  , afi.TDOCUMENTO\n  , afi.DOCUMENTO";
		    

		    globalMap.put("tOracleInput_5_QUERY",dbquery_tOracleInput_5);

		    java.sql.ResultSet rs_tOracleInput_5 = null;

		    try {
		    	rs_tOracleInput_5 = stmt_tOracleInput_5.executeQuery(dbquery_tOracleInput_5);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_5 = rs_tOracleInput_5.getMetaData();
		    	int colQtyInRs_tOracleInput_5 = rsmd_tOracleInput_5.getColumnCount();

		    String tmpContent_tOracleInput_5 = null;
		    
		    
		    while (rs_tOracleInput_5.next()) {
		        nb_line_tOracleInput_5++;
		        
							if(colQtyInRs_tOracleInput_5 < 1) {
								row8.AFILIADO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(1) != null) {
						row8.AFILIADO_ID = rs_tOracleInput_5.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_5 < 2) {
								row8.PRI_NOMBRE_ANT = null;
							} else {
	                         		
        	row8.PRI_NOMBRE_ANT = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 3) {
								row8.SEG_NOMBRE_ANT = null;
							} else {
	                         		
        	row8.SEG_NOMBRE_ANT = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 4) {
								row8.PRI_APELLIDO_ANT = null;
							} else {
	                         		
        	row8.PRI_APELLIDO_ANT = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 5) {
								row8.SEG_APELLIDO_ANT = null;
							} else {
	                         		
        	row8.SEG_APELLIDO_ANT = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 6) {
								row8.FNACIMIENTO_ANT = null;
							} else {
	                         		
        	row8.FNACIMIENTO_ANT = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 7) {
								row8.TDOCUMENTO_ANT = null;
							} else {
	                         		
        	row8.TDOCUMENTO_ANT = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 8) {
								row8.DOCUMENTO_ANT = null;
							} else {
	                         		
        	row8.DOCUMENTO_ANT = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 8, false);
		                    }
					




 



/**
 * [tOracleInput_5 begin ] stop
 */
	
	/**
	 * [tOracleInput_5 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 


	tos_count_tOracleInput_5++;

/**
 * [tOracleInput_5 main ] stop
 */
	
	/**
	 * [tOracleInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					


			   
			   

					row8Struct row8_HashRow = new row8Struct();
		   	   	   
				
				row8_HashRow.AFILIADO_ID = row8.AFILIADO_ID;
				
				row8_HashRow.PRI_NOMBRE_ANT = row8.PRI_NOMBRE_ANT;
				
				row8_HashRow.SEG_NOMBRE_ANT = row8.SEG_NOMBRE_ANT;
				
				row8_HashRow.PRI_APELLIDO_ANT = row8.PRI_APELLIDO_ANT;
				
				row8_HashRow.SEG_APELLIDO_ANT = row8.SEG_APELLIDO_ANT;
				
				row8_HashRow.FNACIMIENTO_ANT = row8.FNACIMIENTO_ANT;
				
				row8_HashRow.TDOCUMENTO_ANT = row8.TDOCUMENTO_ANT;
				
				row8_HashRow.DOCUMENTO_ANT = row8.DOCUMENTO_ANT;
				
			tHash_Lookup_row8.put(row8_HashRow);
			
            




 


	tos_count_tAdvancedHash_row8++;

/**
 * [tAdvancedHash_row8 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

 



/**
 * [tAdvancedHash_row8 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

 



/**
 * [tAdvancedHash_row8 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_5 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

}
}finally{
	if (rs_tOracleInput_5 != null) {
		rs_tOracleInput_5.close();
	}
	if (stmt_tOracleInput_5 != null) {
		stmt_tOracleInput_5.close();
	}
}

globalMap.put("tOracleInput_5_NB_LINE",nb_line_tOracleInput_5);
 

ok_Hash.put("tOracleInput_5", true);
end_Hash.put("tOracleInput_5", System.currentTimeMillis());




/**
 * [tOracleInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

tHash_Lookup_row8.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row8", true);
end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());




/**
 * [tAdvancedHash_row8 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_5 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

 



/**
 * [tAdvancedHash_row8 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 1);
	}
	


public void tPrejob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_2", false);
		start_Hash.put("tPrejob_2", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_2";
	
	
		int tos_count_tPrejob_2 = 0;
		

 



/**
 * [tPrejob_2 begin ] stop
 */
	
	/**
	 * [tPrejob_2 main ] start
	 */

	

	
	
	currentComponent="tPrejob_2";
	
	

 


	tos_count_tPrejob_2++;

/**
 * [tPrejob_2 main ] stop
 */
	
	/**
	 * [tPrejob_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_2";
	
	

 



/**
 * [tPrejob_2 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_2";
	
	

 



/**
 * [tPrejob_2 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_2 end ] start
	 */

	

	
	
	currentComponent="tPrejob_2";
	
	

 

ok_Hash.put("tPrejob_2", true);
end_Hash.put("tPrejob_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk31", 0, "ok");
				}
				tFileInputXML_1Process(globalMap);



/**
 * [tPrejob_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_2 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_2";
	
	

 



/**
 * [tPrejob_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_2_SUBPROCESS_STATE", 1);
	}
	


public static class row42Struct implements routines.system.IPersistableRow<row42Struct> {
    final static byte[] commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];
    static byte[] commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[0];

	
			    public String Host;

				public String getHost () {
					return this.Host;
				}

				public Boolean HostIsNullable(){
				    return true;
				}
				public Boolean HostIsKey(){
				    return false;
				}
				public Integer HostLength(){
				    return 15;
				}
				public Integer HostPrecision(){
				    return 0;
				}
				public String HostDefault(){
				
					return null;
				
				}
				public String HostComment(){
				
				    return "";
				
				}
				public String HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HostOriginalDbColumnName(){
				
					return "Host";
				
				}

				
			    public String Port;

				public String getPort () {
					return this.Port;
				}

				public Boolean PortIsNullable(){
				    return true;
				}
				public Boolean PortIsKey(){
				    return false;
				}
				public Integer PortLength(){
				    return 4;
				}
				public Integer PortPrecision(){
				    return 0;
				}
				public String PortDefault(){
				
					return null;
				
				}
				public String PortComment(){
				
				    return "";
				
				}
				public String PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PortOriginalDbColumnName(){
				
					return "Port";
				
				}

				
			    public String Sid;

				public String getSid () {
					return this.Sid;
				}

				public Boolean SidIsNullable(){
				    return true;
				}
				public Boolean SidIsKey(){
				    return false;
				}
				public Integer SidLength(){
				    return 4;
				}
				public Integer SidPrecision(){
				    return 0;
				}
				public String SidDefault(){
				
					return null;
				
				}
				public String SidComment(){
				
				    return "";
				
				}
				public String SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SidOriginalDbColumnName(){
				
					return "Sid";
				
				}

				
			    public String ServiceName;

				public String getServiceName () {
					return this.ServiceName;
				}

				public Boolean ServiceNameIsNullable(){
				    return true;
				}
				public Boolean ServiceNameIsKey(){
				    return false;
				}
				public Integer ServiceNameLength(){
				    return 7;
				}
				public Integer ServiceNamePrecision(){
				    return 0;
				}
				public String ServiceNameDefault(){
				
					return null;
				
				}
				public String ServiceNameComment(){
				
				    return "";
				
				}
				public String ServiceNamePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ServiceNameOriginalDbColumnName(){
				
					return "ServiceName";
				
				}

				
			    public String Schema;

				public String getSchema () {
					return this.Schema;
				}

				public Boolean SchemaIsNullable(){
				    return true;
				}
				public Boolean SchemaIsKey(){
				    return false;
				}
				public Integer SchemaLength(){
				    return 8;
				}
				public Integer SchemaPrecision(){
				    return 0;
				}
				public String SchemaDefault(){
				
					return null;
				
				}
				public String SchemaComment(){
				
				    return "";
				
				}
				public String SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SchemaOriginalDbColumnName(){
				
					return "Schema";
				
				}

				
			    public String User;

				public String getUser () {
					return this.User;
				}

				public Boolean UserIsNullable(){
				    return true;
				}
				public Boolean UserIsKey(){
				    return false;
				}
				public Integer UserLength(){
				    return 8;
				}
				public Integer UserPrecision(){
				    return 0;
				}
				public String UserDefault(){
				
					return null;
				
				}
				public String UserComment(){
				
				    return "";
				
				}
				public String UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UserOriginalDbColumnName(){
				
					return "User";
				
				}

				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}

				public Boolean PasswordIsNullable(){
				    return true;
				}
				public Boolean PasswordIsKey(){
				    return false;
				}
				public Integer PasswordLength(){
				    return 15;
				}
				public Integer PasswordPrecision(){
				    return 0;
				}
				public String PasswordDefault(){
				
					return null;
				
				}
				public String PasswordComment(){
				
				    return "";
				
				}
				public String PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordOriginalDbColumnName(){
				
					return "Password";
				
				}

				
			    public String PathStorage;

				public String getPathStorage () {
					return this.PathStorage;
				}

				public Boolean PathStorageIsNullable(){
				    return true;
				}
				public Boolean PathStorageIsKey(){
				    return false;
				}
				public Integer PathStorageLength(){
				    return 44;
				}
				public Integer PathStoragePrecision(){
				    return 0;
				}
				public String PathStorageDefault(){
				
					return null;
				
				}
				public String PathStorageComment(){
				
				    return "";
				
				}
				public String PathStoragePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PathStorageOriginalDbColumnName(){
				
					return "PathStorage";
				
				}

				
			    public String SMTPHost;

				public String getSMTPHost () {
					return this.SMTPHost;
				}

				public Boolean SMTPHostIsNullable(){
				    return true;
				}
				public Boolean SMTPHostIsKey(){
				    return false;
				}
				public Integer SMTPHostLength(){
				    return 14;
				}
				public Integer SMTPHostPrecision(){
				    return 0;
				}
				public String SMTPHostDefault(){
				
					return null;
				
				}
				public String SMTPHostComment(){
				
				    return "";
				
				}
				public String SMTPHostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPHostOriginalDbColumnName(){
				
					return "SMTPHost";
				
				}

				
			    public String SMTPPort;

				public String getSMTPPort () {
					return this.SMTPPort;
				}

				public Boolean SMTPPortIsNullable(){
				    return true;
				}
				public Boolean SMTPPortIsKey(){
				    return false;
				}
				public Integer SMTPPortLength(){
				    return 3;
				}
				public Integer SMTPPortPrecision(){
				    return 0;
				}
				public String SMTPPortDefault(){
				
					return null;
				
				}
				public String SMTPPortComment(){
				
				    return "";
				
				}
				public String SMTPPortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPPortOriginalDbColumnName(){
				
					return "SMTPPort";
				
				}

				
			    public String UsernameMail;

				public String getUsernameMail () {
					return this.UsernameMail;
				}

				public Boolean UsernameMailIsNullable(){
				    return true;
				}
				public Boolean UsernameMailIsKey(){
				    return false;
				}
				public Integer UsernameMailLength(){
				    return 34;
				}
				public Integer UsernameMailPrecision(){
				    return 0;
				}
				public String UsernameMailDefault(){
				
					return null;
				
				}
				public String UsernameMailComment(){
				
				    return "";
				
				}
				public String UsernameMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UsernameMailOriginalDbColumnName(){
				
					return "UsernameMail";
				
				}

				
			    public String PasswordMail;

				public String getPasswordMail () {
					return this.PasswordMail;
				}

				public Boolean PasswordMailIsNullable(){
				    return true;
				}
				public Boolean PasswordMailIsKey(){
				    return false;
				}
				public Integer PasswordMailLength(){
				    return 13;
				}
				public Integer PasswordMailPrecision(){
				    return 0;
				}
				public String PasswordMailDefault(){
				
					return null;
				
				}
				public String PasswordMailComment(){
				
				    return "";
				
				}
				public String PasswordMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordMailOriginalDbColumnName(){
				
					return "PasswordMail";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length) {
				if(length < 1024 && commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length == 0) {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[1024];
				} else {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length);
			strReturn = new String(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length) {
				if(length < 1024 && commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1.length == 0) {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[1024];
				} else {
   					commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length);
			strReturn = new String(commonByteArray_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.PathStorage = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_NOVEDADES_AFILIADO_NovedadesAfiliadosEtapa1) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.PathStorage = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.PathStorage,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.PathStorage,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Host="+Host);
		sb.append(",Port="+Port);
		sb.append(",Sid="+Sid);
		sb.append(",ServiceName="+ServiceName);
		sb.append(",Schema="+Schema);
		sb.append(",User="+User);
		sb.append(",Password="+Password);
		sb.append(",PathStorage="+PathStorage);
		sb.append(",SMTPHost="+SMTPHost);
		sb.append(",SMTPPort="+SMTPPort);
		sb.append(",UsernameMail="+UsernameMail);
		sb.append(",PasswordMail="+PasswordMail);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row42Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row42Struct row42 = new row42Struct();




	
	/**
	 * [tJavaRow_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_7", false);
		start_Hash.put("tJavaRow_7", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row42");
					}
				
		int tos_count_tJavaRow_7 = 0;
		

int nb_line_tJavaRow_7 = 0;

 



/**
 * [tJavaRow_7 begin ] stop
 */



	
	/**
	 * [tFileInputXML_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_1", false);
		start_Hash.put("tFileInputXML_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_1";
	
	
		int tos_count_tFileInputXML_1 = 0;
		

	

int nb_line_tFileInputXML_1 = 0;

	String os_tFileInputXML_1 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_1=false;
	if(os_tFileInputXML_1.indexOf("windows") > -1 || os_tFileInputXML_1.indexOf("nt") > -1){
		isWindows_tFileInputXML_1=true;
	}
class XML_API_tFileInputXML_1{
	public boolean isDefNull(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0] != null && node[1]!=null && ("true").equals(node[1])){
        	return true;
        }
        return false;
    }

    public boolean isMissing(String[] node) throws javax.xml.transform.TransformerException {
        return node[0] == null ? true : false;
    }

    public boolean isEmpty(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0]!=null ){
        	return node[0].length() == 0;
        }
        return false;
    }
}
XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();

String[] queryPaths_tFileInputXML_1 = new String[]{	
	"Host"		
	,"Host"+"/@xsi:nil"	
	,"Port"		
	,"Port"+"/@xsi:nil"	
	,"Sid"		
	,"Sid"+"/@xsi:nil"	
	,"ServiceName"		
	,"ServiceName"+"/@xsi:nil"	
	,"Schema"		
	,"Schema"+"/@xsi:nil"	
	,"User"		
	,"User"+"/@xsi:nil"	
	,"Password"		
	,"Password"+"/@xsi:nil"	
	,"PathStorage"		
	,"PathStorage"+"/@xsi:nil"	
	,"SMTPHost"		
	,"SMTPHost"+"/@xsi:nil"	
	,"SMTPPort"		
	,"SMTPPort"+"/@xsi:nil"	
	,"UsernameMail"		
	,"UsernameMail"+"/@xsi:nil"	
	,"PasswordMail"		
	,"PasswordMail"+"/@xsi:nil"
};

boolean[] asXMLs_tFileInputXML_1 = new boolean[]{	
	false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false
};

String str_tFileInputXML_1 = "";
String[] node_tFileInputXML_1 = null;
org.talend.xml.sax.SAXLooper looper_tFileInputXML_1 = new org.talend.xml.sax.SAXLooper("/connectionStrings",queryPaths_tFileInputXML_1,asXMLs_tFileInputXML_1);
looper_tFileInputXML_1.setEncoding("UTF-8");
Object filename_tFileInputXML_1 = null;
try {
	filename_tFileInputXML_1 = context.ORIGEN;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_1 != null && filename_tFileInputXML_1 instanceof String && filename_tFileInputXML_1.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_1){
		filename_tFileInputXML_1 = filename_tFileInputXML_1.toString().replaceFirst("//","/");
	}
}
if(filename_tFileInputXML_1 instanceof java.io.InputStream){
	looper_tFileInputXML_1.parse((java.io.InputStream)filename_tFileInputXML_1);
}else{
	looper_tFileInputXML_1.parse(String.valueOf(filename_tFileInputXML_1));
}
java.util.Iterator<java.util.Map<String, String>> it_tFileInputXML_1  = looper_tFileInputXML_1.iterator();
while (it_tFileInputXML_1.hasNext()) {
	java.util.Map<String, String> row_tFileInputXML_1 = it_tFileInputXML_1.next();
	if (nb_line_tFileInputXML_1>=50) {
	
			looper_tFileInputXML_1.stopRead();
	
		break;
	}
		nb_line_tFileInputXML_1++;
		
	row42 = null;			
	boolean whetherReject_tFileInputXML_1 = false;
	row42 = new row42Struct();
	try{
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Host");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Host"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row42.Host =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row42.Host ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row42.Host =null;
									}else{
		row42.Host = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Port");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Port"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row42.Port =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row42.Port ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row42.Port =null;
									}else{
		row42.Port = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Sid");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Sid"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row42.Sid =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row42.Sid ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row42.Sid =null;
									}else{
		row42.Sid = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("ServiceName");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("ServiceName"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row42.ServiceName =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row42.ServiceName ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row42.ServiceName =null;
									}else{
		row42.ServiceName = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Schema");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Schema"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row42.Schema =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row42.Schema ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row42.Schema =null;
									}else{
		row42.Schema = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("User");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("User"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row42.User =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row42.User ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row42.User =null;
									}else{
		row42.User = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Password");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Password"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row42.Password =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row42.Password ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row42.Password =null;
									}else{
		row42.Password = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("PathStorage");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("PathStorage"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row42.PathStorage =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row42.PathStorage ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row42.PathStorage =null;
									}else{
		row42.PathStorage = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("SMTPHost");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("SMTPHost"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row42.SMTPHost =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row42.SMTPHost ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row42.SMTPHost =null;
									}else{
		row42.SMTPHost = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("SMTPPort");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("SMTPPort"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row42.SMTPPort =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row42.SMTPPort ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row42.SMTPPort =null;
									}else{
		row42.SMTPPort = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("UsernameMail");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("UsernameMail"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row42.UsernameMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row42.UsernameMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row42.UsernameMail =null;
									}else{
		row42.UsernameMail = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("PasswordMail");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("PasswordMail"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row42.PasswordMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row42.PasswordMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row42.PasswordMail =null;
									}else{
		row42.PasswordMail = str_tFileInputXML_1;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_1 = true;
                System.err.println(e.getMessage());
                row42 = null;
    }
			
			

 



/**
 * [tFileInputXML_1 begin ] stop
 */
	
	/**
	 * [tFileInputXML_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 


	tos_count_tFileInputXML_1++;

/**
 * [tFileInputXML_1 main ] stop
 */
	
	/**
	 * [tFileInputXML_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_begin ] stop
 */
// Start of branch "row42"
if(row42 != null) { 



	
	/**
	 * [tJavaRow_7 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row42"
						
						);
					}
					

    //Guarda en variables de contexto los parametros de conexión a la bd saludsis
context.db_origen_Server = row42.Host;
context.db_origen_Port = row42.Port;
context.db_origen_ServiceName = row42.ServiceName;
context.db_origen_Schema = row42.Schema;
context.db_origen_Login = row42.User;
context.db_origen_Password = row42.Password;


//Guarda en variables de contexto la fecha de ejecución y la hora de inicio

context.FECHA_EJECUCION = TalendDate.getDate("DD/MM/YYYY");
context.HORA_INICIO = TalendDate.getDate("HH:mm:ss");
context.JOB = jobName;
context.RutaSistema = row42.PathStorage;

//Imprime en consola el job, la fecha de ejecución y la hora de inicio
System.out.println(context.JOB+" :-Start: "+context.FECHA_EJECUCION+" "+context.HORA_INICIO);


    nb_line_tJavaRow_7++;   

 


	tos_count_tJavaRow_7++;

/**
 * [tJavaRow_7 main ] stop
 */
	
	/**
	 * [tJavaRow_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 process_data_end ] stop
 */

} // End of branch "row42"




	
	/**
	 * [tFileInputXML_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	


	}
	try {
		looper_tFileInputXML_1.handleTaskResponse();
	} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
		if(!(e.getCause() instanceof org.talend.xml.sax.exception.EnoughDataException))
	
		
		System.err.println(e.getMessage());	
	
	}
	globalMap.put("tFileInputXML_1_NB_LINE",nb_line_tFileInputXML_1);

	

 

ok_Hash.put("tFileInputXML_1", true);
end_Hash.put("tFileInputXML_1", System.currentTimeMillis());




/**
 * [tFileInputXML_1 end ] stop
 */

	
	/**
	 * [tJavaRow_7 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

globalMap.put("tJavaRow_7_NB_LINE",nb_line_tJavaRow_7);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row42");
			  	}
			  	
 

ok_Hash.put("tJavaRow_7", true);
end_Hash.put("tJavaRow_7", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk32", 0, "ok");
				}
				tOracleConnection_1Process(globalMap);



/**
 * [tJavaRow_7 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_7 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_1", false);
		start_Hash.put("tOracleConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_1";
	
	
		int tos_count_tOracleConnection_1 = 0;
		
	

	
        String url_tOracleConnection_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_1", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_1 = context.db_origen_Login;
	
	
		
	final String decryptedPassword_tOracleConnection_1 = context.db_origen_Password; 
		String dbPwd_tOracleConnection_1 = decryptedPassword_tOracleConnection_1;
	
	
	java.sql.Connection conn_tOracleConnection_1 = null;
	
		
			String driverClass_tOracleConnection_1 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_1 = java.lang.Class.forName(driverClass_tOracleConnection_1);
			globalMap.put("driverClass_tOracleConnection_1", driverClass_tOracleConnection_1);
		
			java.util.Properties atnParamsPrope_tOracleConnection_1 = new java.util.Properties();
			    atnParamsPrope_tOracleConnection_1.put("user",dbUser_tOracleConnection_1);
			    atnParamsPrope_tOracleConnection_1.put("password",dbPwd_tOracleConnection_1);
			if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                atnParamsPrope_tOracleConnection_1.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tOracleConnection_1 = java.sql.DriverManager.getConnection(url_tOracleConnection_1, atnParamsPrope_tOracleConnection_1);

		globalMap.put("conn_tOracleConnection_1", conn_tOracleConnection_1);
	if (null != conn_tOracleConnection_1) {
		
			conn_tOracleConnection_1.setAutoCommit(true);
	}
        globalMap.put("host_" + "tOracleConnection_1",context.db_origen_Server);
        globalMap.put("port_" + "tOracleConnection_1",context.db_origen_Port);
        globalMap.put("dbname_" + "tOracleConnection_1",context.db_origen_ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_1", context.db_origen_Schema);
	globalMap.put("username_" + "tOracleConnection_1",context.db_origen_Login);
	globalMap.put("password_" + "tOracleConnection_1",dbPwd_tOracleConnection_1);

 



/**
 * [tOracleConnection_1 begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 


	tos_count_tOracleConnection_1++;

/**
 * [tOracleConnection_1 main ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_1 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 

ok_Hash.put("tOracleConnection_1", true);
end_Hash.put("tOracleConnection_1", System.currentTimeMillis());




/**
 * [tOracleConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };

    private SyncInt runningThreadCount =new SyncInt();

    private class SyncInt
    {
        private int count = 0;
        public synchronized void add(int i)
        {
            count +=i;
        }

        public synchronized int getCount()
        {
            return count;
        }
    }

    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final NovedadesAfiliadosEtapa1 NovedadesAfiliadosEtapa1Class = new NovedadesAfiliadosEtapa1();

        int exitCode = NovedadesAfiliadosEtapa1Class.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = (String[][])globalBuffer.toArray(new String[globalBuffer.size()][]);

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        		hastBufferOutput = true;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = NovedadesAfiliadosEtapa1.class.getClassLoader().getResourceAsStream("afi_novedades_afiliado/novedadesafiliadosetapa1_0_2/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = NovedadesAfiliadosEtapa1.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }
            
            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("db_origen_AdditionalParams", "id_String");
                        if(context.getStringValue("db_origen_AdditionalParams") == null) {
                            context.db_origen_AdditionalParams = null;
                        } else {
                            context.db_origen_AdditionalParams=(String) context.getProperty("db_origen_AdditionalParams");
                        }
                        context.setContextType("db_origen_Login", "id_String");
                        if(context.getStringValue("db_origen_Login") == null) {
                            context.db_origen_Login = null;
                        } else {
                            context.db_origen_Login=(String) context.getProperty("db_origen_Login");
                        }
                        context.setContextType("db_origen_Password", "id_Password");
                        if(context.getStringValue("db_origen_Password") == null) {
                            context.db_origen_Password = null;
                        } else {
                            String pwd_db_origen_Password_value = context.getProperty("db_origen_Password");
                            context.db_origen_Password = null;
                            if(pwd_db_origen_Password_value!=null) {
                                if(context_param.containsKey("db_origen_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_origen_Password = pwd_db_origen_Password_value;
                                } else if (!pwd_db_origen_Password_value.isEmpty()) {
                                    try {
                                        context.db_origen_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_origen_Password_value);
                                        context.put("db_origen_Password",context.db_origen_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_origen_Port", "id_String");
                        if(context.getStringValue("db_origen_Port") == null) {
                            context.db_origen_Port = null;
                        } else {
                            context.db_origen_Port=(String) context.getProperty("db_origen_Port");
                        }
                        context.setContextType("db_origen_Schema", "id_String");
                        if(context.getStringValue("db_origen_Schema") == null) {
                            context.db_origen_Schema = null;
                        } else {
                            context.db_origen_Schema=(String) context.getProperty("db_origen_Schema");
                        }
                        context.setContextType("db_origen_Server", "id_String");
                        if(context.getStringValue("db_origen_Server") == null) {
                            context.db_origen_Server = null;
                        } else {
                            context.db_origen_Server=(String) context.getProperty("db_origen_Server");
                        }
                        context.setContextType("db_origen_ServiceName", "id_String");
                        if(context.getStringValue("db_origen_ServiceName") == null) {
                            context.db_origen_ServiceName = null;
                        } else {
                            context.db_origen_ServiceName=(String) context.getProperty("db_origen_ServiceName");
                        }
                        context.setContextType("HORA_FINAL", "id_String");
                        if(context.getStringValue("HORA_FINAL") == null) {
                            context.HORA_FINAL = null;
                        } else {
                            context.HORA_FINAL=(String) context.getProperty("HORA_FINAL");
                        }
                        context.setContextType("JOB", "id_String");
                        if(context.getStringValue("JOB") == null) {
                            context.JOB = null;
                        } else {
                            context.JOB=(String) context.getProperty("JOB");
                        }
                        context.setContextType("LOGS_ERROR", "id_String");
                        if(context.getStringValue("LOGS_ERROR") == null) {
                            context.LOGS_ERROR = null;
                        } else {
                            context.LOGS_ERROR=(String) context.getProperty("LOGS_ERROR");
                        }
                        context.setContextType("LOGS_EXECUTION", "id_String");
                        if(context.getStringValue("LOGS_EXECUTION") == null) {
                            context.LOGS_EXECUTION = null;
                        } else {
                            context.LOGS_EXECUTION=(String) context.getProperty("LOGS_EXECUTION");
                        }
                        context.setContextType("Area", "id_String");
                        if(context.getStringValue("Area") == null) {
                            context.Area = null;
                        } else {
                            context.Area=(String) context.getProperty("Area");
                        }
                        context.setContextType("BODEGA", "id_String");
                        if(context.getStringValue("BODEGA") == null) {
                            context.BODEGA = null;
                        } else {
                            context.BODEGA=(String) context.getProperty("BODEGA");
                        }
                        context.setContextType("ERROR", "id_String");
                        if(context.getStringValue("ERROR") == null) {
                            context.ERROR = null;
                        } else {
                            context.ERROR=(String) context.getProperty("ERROR");
                        }
                        context.setContextType("Estado", "id_BigDecimal");
                        if(context.getStringValue("Estado") == null) {
                            context.Estado = null;
                        } else {
                            try{
                                context.Estado=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("Estado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "Estado", e.getMessage()));
                                context.Estado=null;
                            }
                        }
                        context.setContextType("ESTADO_EXEC", "id_String");
                        if(context.getStringValue("ESTADO_EXEC") == null) {
                            context.ESTADO_EXEC = null;
                        } else {
                            context.ESTADO_EXEC=(String) context.getProperty("ESTADO_EXEC");
                        }
                        context.setContextType("FECHA_EJECUCION", "id_String");
                        if(context.getStringValue("FECHA_EJECUCION") == null) {
                            context.FECHA_EJECUCION = null;
                        } else {
                            context.FECHA_EJECUCION=(String) context.getProperty("FECHA_EJECUCION");
                        }
                        context.setContextType("FECHA_INICIO", "id_String");
                        if(context.getStringValue("FECHA_INICIO") == null) {
                            context.FECHA_INICIO = null;
                        } else {
                            context.FECHA_INICIO=(String) context.getProperty("FECHA_INICIO");
                        }
                        context.setContextType("HORA_FIN", "id_String");
                        if(context.getStringValue("HORA_FIN") == null) {
                            context.HORA_FIN = null;
                        } else {
                            context.HORA_FIN=(String) context.getProperty("HORA_FIN");
                        }
                        context.setContextType("HORA_INICIO", "id_String");
                        if(context.getStringValue("HORA_INICIO") == null) {
                            context.HORA_INICIO = null;
                        } else {
                            context.HORA_INICIO=(String) context.getProperty("HORA_INICIO");
                        }
                        context.setContextType("IdProceso", "id_BigDecimal");
                        if(context.getStringValue("IdProceso") == null) {
                            context.IdProceso = null;
                        } else {
                            try{
                                context.IdProceso=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("IdProceso"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "IdProceso", e.getMessage()));
                                context.IdProceso=null;
                            }
                        }
                        context.setContextType("LOG_EJECUCION", "id_String");
                        if(context.getStringValue("LOG_EJECUCION") == null) {
                            context.LOG_EJECUCION = null;
                        } else {
                            context.LOG_EJECUCION=(String) context.getProperty("LOG_EJECUCION");
                        }
                        context.setContextType("NombreArchivoSalida", "id_String");
                        if(context.getStringValue("NombreArchivoSalida") == null) {
                            context.NombreArchivoSalida = null;
                        } else {
                            context.NombreArchivoSalida=(String) context.getProperty("NombreArchivoSalida");
                        }
                        context.setContextType("ORIGEN", "id_String");
                        if(context.getStringValue("ORIGEN") == null) {
                            context.ORIGEN = null;
                        } else {
                            context.ORIGEN=(String) context.getProperty("ORIGEN");
                        }
                        context.setContextType("RutaSistema", "id_String");
                        if(context.getStringValue("RutaSistema") == null) {
                            context.RutaSistema = null;
                        } else {
                            context.RutaSistema=(String) context.getProperty("RutaSistema");
                        }
                        context.setContextType("TipoArchivo", "id_BigDecimal");
                        if(context.getStringValue("TipoArchivo") == null) {
                            context.TipoArchivo = null;
                        } else {
                            try{
                                context.TipoArchivo=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("TipoArchivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "TipoArchivo", e.getMessage()));
                                context.TipoArchivo=null;
                            }
                        }
                        context.setContextType("TipoProceso", "id_BigDecimal");
                        if(context.getStringValue("TipoProceso") == null) {
                            context.TipoProceso = null;
                        } else {
                            try{
                                context.TipoProceso=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("TipoProceso"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "TipoProceso", e.getMessage()));
                                context.TipoProceso=null;
                            }
                        }
                        context.setContextType("Usuario", "id_BigDecimal");
                        if(context.getStringValue("Usuario") == null) {
                            context.Usuario = null;
                        } else {
                            try{
                                context.Usuario=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("Usuario"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "Usuario", e.getMessage()));
                                context.Usuario=null;
                            }
                        }
                        context.setContextType("mail_From", "id_String");
                        if(context.getStringValue("mail_From") == null) {
                            context.mail_From = null;
                        } else {
                            context.mail_From=(String) context.getProperty("mail_From");
                        }
                        context.setContextType("mail_Message", "id_String");
                        if(context.getStringValue("mail_Message") == null) {
                            context.mail_Message = null;
                        } else {
                            context.mail_Message=(String) context.getProperty("mail_Message");
                        }
                        context.setContextType("mail_Password", "id_Password");
                        if(context.getStringValue("mail_Password") == null) {
                            context.mail_Password = null;
                        } else {
                            String pwd_mail_Password_value = context.getProperty("mail_Password");
                            context.mail_Password = null;
                            if(pwd_mail_Password_value!=null) {
                                if(context_param.containsKey("mail_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.mail_Password = pwd_mail_Password_value;
                                } else if (!pwd_mail_Password_value.isEmpty()) {
                                    try {
                                        context.mail_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_mail_Password_value);
                                        context.put("mail_Password",context.mail_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("mail_Sendername", "id_String");
                        if(context.getStringValue("mail_Sendername") == null) {
                            context.mail_Sendername = null;
                        } else {
                            context.mail_Sendername=(String) context.getProperty("mail_Sendername");
                        }
                        context.setContextType("mail_SMTP_Host", "id_String");
                        if(context.getStringValue("mail_SMTP_Host") == null) {
                            context.mail_SMTP_Host = null;
                        } else {
                            context.mail_SMTP_Host=(String) context.getProperty("mail_SMTP_Host");
                        }
                        context.setContextType("mail_SMTP_Port", "id_String");
                        if(context.getStringValue("mail_SMTP_Port") == null) {
                            context.mail_SMTP_Port = null;
                        } else {
                            context.mail_SMTP_Port=(String) context.getProperty("mail_SMTP_Port");
                        }
                        context.setContextType("mail_Subject", "id_String");
                        if(context.getStringValue("mail_Subject") == null) {
                            context.mail_Subject = null;
                        } else {
                            context.mail_Subject=(String) context.getProperty("mail_Subject");
                        }
                        context.setContextType("mail_To", "id_String");
                        if(context.getStringValue("mail_To") == null) {
                            context.mail_To = null;
                        } else {
                            context.mail_To=(String) context.getProperty("mail_To");
                        }
                        context.setContextType("mail_User", "id_String");
                        if(context.getStringValue("mail_User") == null) {
                            context.mail_User = null;
                        } else {
                            context.mail_User=(String) context.getProperty("mail_User");
                        }
                        context.setContextType("PasswordMail", "id_String");
                        if(context.getStringValue("PasswordMail") == null) {
                            context.PasswordMail = null;
                        } else {
                            context.PasswordMail=(String) context.getProperty("PasswordMail");
                        }
                        context.setContextType("SMTPHost", "id_String");
                        if(context.getStringValue("SMTPHost") == null) {
                            context.SMTPHost = null;
                        } else {
                            context.SMTPHost=(String) context.getProperty("SMTPHost");
                        }
                        context.setContextType("SMTPPort", "id_String");
                        if(context.getStringValue("SMTPPort") == null) {
                            context.SMTPPort = null;
                        } else {
                            context.SMTPPort=(String) context.getProperty("SMTPPort");
                        }
                        context.setContextType("UsernameMail", "id_String");
                        if(context.getStringValue("UsernameMail") == null) {
                            context.UsernameMail = null;
                        } else {
                            context.UsernameMail=(String) context.getProperty("UsernameMail");
                        }
                        context.setContextType("DOCUMENTO_ACTUAL", "id_String");
                        if(context.getStringValue("DOCUMENTO_ACTUAL") == null) {
                            context.DOCUMENTO_ACTUAL = null;
                        } else {
                            context.DOCUMENTO_ACTUAL=(String) context.getProperty("DOCUMENTO_ACTUAL");
                        }
                        context.setContextType("DOCUMENTO_ANTERIOR", "id_String");
                        if(context.getStringValue("DOCUMENTO_ANTERIOR") == null) {
                            context.DOCUMENTO_ANTERIOR = null;
                        } else {
                            context.DOCUMENTO_ANTERIOR=(String) context.getProperty("DOCUMENTO_ANTERIOR");
                        }
                        context.setContextType("FILA", "id_String");
                        if(context.getStringValue("FILA") == null) {
                            context.FILA = null;
                        } else {
                            context.FILA=(String) context.getProperty("FILA");
                        }
                        context.setContextType("NOVEDAD", "id_String");
                        if(context.getStringValue("NOVEDAD") == null) {
                            context.NOVEDAD = null;
                        } else {
                            context.NOVEDAD=(String) context.getProperty("NOVEDAD");
                        }
                        context.setContextType("SI_UPDATE", "id_String");
                        if(context.getStringValue("SI_UPDATE") == null) {
                            context.SI_UPDATE = null;
                        } else {
                            context.SI_UPDATE=(String) context.getProperty("SI_UPDATE");
                        }
                        context.setContextType("TDOCUMENTO_ACTUAL", "id_String");
                        if(context.getStringValue("TDOCUMENTO_ACTUAL") == null) {
                            context.TDOCUMENTO_ACTUAL = null;
                        } else {
                            context.TDOCUMENTO_ACTUAL=(String) context.getProperty("TDOCUMENTO_ACTUAL");
                        }
                        context.setContextType("TDOCUMENTO_ANTERIOR", "id_String");
                        if(context.getStringValue("TDOCUMENTO_ANTERIOR") == null) {
                            context.TDOCUMENTO_ANTERIOR = null;
                        } else {
                            context.TDOCUMENTO_ANTERIOR=(String) context.getProperty("TDOCUMENTO_ANTERIOR");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("db_origen_AdditionalParams")) {
                context.db_origen_AdditionalParams = (String) parentContextMap.get("db_origen_AdditionalParams");
            }if (parentContextMap.containsKey("db_origen_Login")) {
                context.db_origen_Login = (String) parentContextMap.get("db_origen_Login");
            }if (parentContextMap.containsKey("db_origen_Password")) {
                context.db_origen_Password = (java.lang.String) parentContextMap.get("db_origen_Password");
            }if (parentContextMap.containsKey("db_origen_Port")) {
                context.db_origen_Port = (String) parentContextMap.get("db_origen_Port");
            }if (parentContextMap.containsKey("db_origen_Schema")) {
                context.db_origen_Schema = (String) parentContextMap.get("db_origen_Schema");
            }if (parentContextMap.containsKey("db_origen_Server")) {
                context.db_origen_Server = (String) parentContextMap.get("db_origen_Server");
            }if (parentContextMap.containsKey("db_origen_ServiceName")) {
                context.db_origen_ServiceName = (String) parentContextMap.get("db_origen_ServiceName");
            }if (parentContextMap.containsKey("HORA_FINAL")) {
                context.HORA_FINAL = (String) parentContextMap.get("HORA_FINAL");
            }if (parentContextMap.containsKey("JOB")) {
                context.JOB = (String) parentContextMap.get("JOB");
            }if (parentContextMap.containsKey("LOGS_ERROR")) {
                context.LOGS_ERROR = (String) parentContextMap.get("LOGS_ERROR");
            }if (parentContextMap.containsKey("LOGS_EXECUTION")) {
                context.LOGS_EXECUTION = (String) parentContextMap.get("LOGS_EXECUTION");
            }if (parentContextMap.containsKey("Area")) {
                context.Area = (String) parentContextMap.get("Area");
            }if (parentContextMap.containsKey("BODEGA")) {
                context.BODEGA = (String) parentContextMap.get("BODEGA");
            }if (parentContextMap.containsKey("ERROR")) {
                context.ERROR = (String) parentContextMap.get("ERROR");
            }if (parentContextMap.containsKey("Estado")) {
                context.Estado = (BigDecimal) parentContextMap.get("Estado");
            }if (parentContextMap.containsKey("ESTADO_EXEC")) {
                context.ESTADO_EXEC = (String) parentContextMap.get("ESTADO_EXEC");
            }if (parentContextMap.containsKey("FECHA_EJECUCION")) {
                context.FECHA_EJECUCION = (String) parentContextMap.get("FECHA_EJECUCION");
            }if (parentContextMap.containsKey("FECHA_INICIO")) {
                context.FECHA_INICIO = (String) parentContextMap.get("FECHA_INICIO");
            }if (parentContextMap.containsKey("HORA_FIN")) {
                context.HORA_FIN = (String) parentContextMap.get("HORA_FIN");
            }if (parentContextMap.containsKey("HORA_INICIO")) {
                context.HORA_INICIO = (String) parentContextMap.get("HORA_INICIO");
            }if (parentContextMap.containsKey("IdProceso")) {
                context.IdProceso = (BigDecimal) parentContextMap.get("IdProceso");
            }if (parentContextMap.containsKey("LOG_EJECUCION")) {
                context.LOG_EJECUCION = (String) parentContextMap.get("LOG_EJECUCION");
            }if (parentContextMap.containsKey("NombreArchivoSalida")) {
                context.NombreArchivoSalida = (String) parentContextMap.get("NombreArchivoSalida");
            }if (parentContextMap.containsKey("ORIGEN")) {
                context.ORIGEN = (String) parentContextMap.get("ORIGEN");
            }if (parentContextMap.containsKey("RutaSistema")) {
                context.RutaSistema = (String) parentContextMap.get("RutaSistema");
            }if (parentContextMap.containsKey("TipoArchivo")) {
                context.TipoArchivo = (BigDecimal) parentContextMap.get("TipoArchivo");
            }if (parentContextMap.containsKey("TipoProceso")) {
                context.TipoProceso = (BigDecimal) parentContextMap.get("TipoProceso");
            }if (parentContextMap.containsKey("Usuario")) {
                context.Usuario = (BigDecimal) parentContextMap.get("Usuario");
            }if (parentContextMap.containsKey("mail_From")) {
                context.mail_From = (String) parentContextMap.get("mail_From");
            }if (parentContextMap.containsKey("mail_Message")) {
                context.mail_Message = (String) parentContextMap.get("mail_Message");
            }if (parentContextMap.containsKey("mail_Password")) {
                context.mail_Password = (java.lang.String) parentContextMap.get("mail_Password");
            }if (parentContextMap.containsKey("mail_Sendername")) {
                context.mail_Sendername = (String) parentContextMap.get("mail_Sendername");
            }if (parentContextMap.containsKey("mail_SMTP_Host")) {
                context.mail_SMTP_Host = (String) parentContextMap.get("mail_SMTP_Host");
            }if (parentContextMap.containsKey("mail_SMTP_Port")) {
                context.mail_SMTP_Port = (String) parentContextMap.get("mail_SMTP_Port");
            }if (parentContextMap.containsKey("mail_Subject")) {
                context.mail_Subject = (String) parentContextMap.get("mail_Subject");
            }if (parentContextMap.containsKey("mail_To")) {
                context.mail_To = (String) parentContextMap.get("mail_To");
            }if (parentContextMap.containsKey("mail_User")) {
                context.mail_User = (String) parentContextMap.get("mail_User");
            }if (parentContextMap.containsKey("PasswordMail")) {
                context.PasswordMail = (String) parentContextMap.get("PasswordMail");
            }if (parentContextMap.containsKey("SMTPHost")) {
                context.SMTPHost = (String) parentContextMap.get("SMTPHost");
            }if (parentContextMap.containsKey("SMTPPort")) {
                context.SMTPPort = (String) parentContextMap.get("SMTPPort");
            }if (parentContextMap.containsKey("UsernameMail")) {
                context.UsernameMail = (String) parentContextMap.get("UsernameMail");
            }if (parentContextMap.containsKey("DOCUMENTO_ACTUAL")) {
                context.DOCUMENTO_ACTUAL = (String) parentContextMap.get("DOCUMENTO_ACTUAL");
            }if (parentContextMap.containsKey("DOCUMENTO_ANTERIOR")) {
                context.DOCUMENTO_ANTERIOR = (String) parentContextMap.get("DOCUMENTO_ANTERIOR");
            }if (parentContextMap.containsKey("FILA")) {
                context.FILA = (String) parentContextMap.get("FILA");
            }if (parentContextMap.containsKey("NOVEDAD")) {
                context.NOVEDAD = (String) parentContextMap.get("NOVEDAD");
            }if (parentContextMap.containsKey("SI_UPDATE")) {
                context.SI_UPDATE = (String) parentContextMap.get("SI_UPDATE");
            }if (parentContextMap.containsKey("TDOCUMENTO_ACTUAL")) {
                context.TDOCUMENTO_ACTUAL = (String) parentContextMap.get("TDOCUMENTO_ACTUAL");
            }if (parentContextMap.containsKey("TDOCUMENTO_ANTERIOR")) {
                context.TDOCUMENTO_ANTERIOR = (String) parentContextMap.get("TDOCUMENTO_ANTERIOR");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("db_origen_Password");
			parametersToEncrypt.add("mail_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_2) {
globalMap.put("tPrejob_2_SUBPROCESS_STATE", -1);

e_tPrejob_2.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs
final Thread launchingThread = Thread.currentThread();
        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tOracleInput_13Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tOracleInput_13) {
globalMap.put("tOracleInput_13_SUBPROCESS_STATE", -1);

e_tOracleInput_13.printStackTrace();

}catch (java.lang.Error e_tOracleInput_13) {
globalMap.put("tOracleInput_13_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tOracleInput_13;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

    boolean interrupted = false;
    while (runningThreadCount.getCount() > 0) {
        try {
            Thread.sleep(10);
        } catch (java.lang.InterruptedException e) {
            interrupted = true;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }

    if (interrupted) {
        Thread.currentThread().interrupt();
    }



this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : NovedadesAfiliadosEtapa1");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;

        Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
        String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
        if (localErrorCode != null) {
            if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                   errorCode = localErrorCode;
            }
        }
        if (localStatus != null && !status.equals("failure")){
            status = localStatus;
        }

    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tOracleConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tOracleConnection_1", globalMap.get("conn_tOracleConnection_1"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--context_file")) {
        	String keyValue = arg.substring(15);
        	String filePath = new String(java.util.Base64.getDecoder().decode(keyValue));
        	java.nio.file.Path contextFile = java.nio.file.Paths.get(filePath);
            try (java.io.BufferedReader reader = java.nio.file.Files.newBufferedReader(contextFile)) {
                String line;
                while ((line = reader.readLine()) != null) {
                    int index = -1;
                    if ( (index = line.indexOf('=')) > -1) {
							if (line.startsWith("--context_param")) {
								if ("id_Password".equals(context_param.getContextType(line.substring(16, index)))) {
									context_param.put(line.substring(16, index), routines.system.PasswordEncryptUtil.decryptPassword(
											line.substring(index + 1)));
								} else {
									context_param.put(line.substring(16, index), line.substring(index + 1));
								}
							}else {//--context_type
								context_param.setContextType(line.substring(15, index), line.substring(index + 1));
							}
                    }
                }
            } catch (java.io.IOException e) {
            	System.err.println("Could not load the context file: " + filePath);
                e.printStackTrace();
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     829531 characters generated by Talend Open Studio for ESB 
 *     on the October 28, 2024, 11:19:32 AM COT
 ************************************************************************************************/