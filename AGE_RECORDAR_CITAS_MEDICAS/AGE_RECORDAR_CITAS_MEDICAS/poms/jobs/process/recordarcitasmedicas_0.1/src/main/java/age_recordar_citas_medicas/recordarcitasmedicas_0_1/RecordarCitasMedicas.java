// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package age_recordar_citas_medicas.recordarcitasmedicas_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.Utils;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJavaRow_2
	//import java.util.List;

	//the import part of tJavaRow_3
	//import java.util.List;

	//the import part of tJavaRow_5
	//import java.util.List;

	//the import part of tJavaRow_6
	//import java.util.List;

	//the import part of tJava_4
	//import java.util.List;

	//the import part of tJavaRow_7
	//import java.util.List;

	//the import part of tJavaRow_8
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;

	//the import part of tJava_3
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: RecordarCitasMedicas Purpose: Recordar citas medicas via correo y sms<br>
 * Description: Recordar citas medicas via correo y sms <br>
 * @author jorgejlhc@gmail.com
 * @version 8.8.8.20240722_1936-SNAPSHOT
 * @status 
 */
public class RecordarCitasMedicas implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(FANTERIOR != null){
				
					this.setProperty("FANTERIOR", FANTERIOR.toString());
				
			}
			
			if(ACTUALIZACION_TOTAL != null){
				
					this.setProperty("ACTUALIZACION_TOTAL", ACTUALIZACION_TOTAL.toString());
				
			}
			
			if(ERROR != null){
				
					this.setProperty("ERROR", ERROR.toString());
				
			}
			
			if(FECHA_EJECUCION != null){
				
					this.setProperty("FECHA_EJECUCION", FECHA_EJECUCION.toString());
				
			}
			
			if(HORA_INICIO != null){
				
					this.setProperty("HORA_INICIO", HORA_INICIO.toString());
				
			}
			
			if(HORA_FINAL != null){
				
					this.setProperty("HORA_FINAL", HORA_FINAL.toString());
				
			}
			
			if(ESTADO != null){
				
					this.setProperty("ESTADO", ESTADO.toString());
				
			}
			
			if(LOGS_ERROR != null){
				
					this.setProperty("LOGS_ERROR", LOGS_ERROR.toString());
				
			}
			
			if(LOGS_EXECUTION != null){
				
					this.setProperty("LOGS_EXECUTION", LOGS_EXECUTION.toString());
				
			}
			
			if(ORIGEN != null){
				
					this.setProperty("ORIGEN", ORIGEN.toString());
				
			}
			
			if(BODEGA != null){
				
					this.setProperty("BODEGA", BODEGA.toString());
				
			}
			
			if(ID_SOLICITUD != null){
				
					this.setProperty("ID_SOLICITUD", ID_SOLICITUD.toString());
				
			}
			
			if(ESTADO_EXEC != null){
				
					this.setProperty("ESTADO_EXEC", ESTADO_EXEC.toString());
				
			}
			
			if(LAST_DAYS != null){
				
					this.setProperty("LAST_DAYS", LAST_DAYS.toString());
				
			}
			
			if(FECHA_TERMINACION != null){
				
					this.setProperty("FECHA_TERMINACION", FECHA_TERMINACION.toString());
				
			}
			
			if(LOGS_STAT != null){
				
					this.setProperty("LOGS_STAT", LOGS_STAT.toString());
				
			}
			
			if(RutaSistema != null){
				
					this.setProperty("RutaSistema", RutaSistema.toString());
				
			}
			
			if(CONDITION != null){
				
					this.setProperty("CONDITION", CONDITION.toString());
				
			}
			
			if(CONDITION_PRINCIPAL != null){
				
					this.setProperty("CONDITION_PRINCIPAL", CONDITION_PRINCIPAL.toString());
				
			}
			
			if(JOB != null){
				
					this.setProperty("JOB", JOB.toString());
				
			}
			
			if(db_destino_ServiceName != null){
				
					this.setProperty("db_destino_ServiceName", db_destino_ServiceName.toString());
				
			}
			
			if(db_destino_AdditionalParams != null){
				
					this.setProperty("db_destino_AdditionalParams", db_destino_AdditionalParams.toString());
				
			}
			
			if(db_destino_Login != null){
				
					this.setProperty("db_destino_Login", db_destino_Login.toString());
				
			}
			
			if(db_destino_Port != null){
				
					this.setProperty("db_destino_Port", db_destino_Port.toString());
				
			}
			
			if(db_destino_Schema != null){
				
					this.setProperty("db_destino_Schema", db_destino_Schema.toString());
				
			}
			
			if(db_destino_Server != null){
				
					this.setProperty("db_destino_Server", db_destino_Server.toString());
				
			}
			
			if(db_destino_Password != null){
				
					this.setProperty("db_destino_Password", db_destino_Password.toString());
				
			}
			
			if(db_origen_ServiceName != null){
				
					this.setProperty("db_origen_ServiceName", db_origen_ServiceName.toString());
				
			}
			
			if(db_origen_Server != null){
				
					this.setProperty("db_origen_Server", db_origen_Server.toString());
				
			}
			
			if(db_origen_Login != null){
				
					this.setProperty("db_origen_Login", db_origen_Login.toString());
				
			}
			
			if(db_origen_Schema != null){
				
					this.setProperty("db_origen_Schema", db_origen_Schema.toString());
				
			}
			
			if(db_origen_Password != null){
				
					this.setProperty("db_origen_Password", db_origen_Password.toString());
				
			}
			
			if(db_origen_AdditionalParams != null){
				
					this.setProperty("db_origen_AdditionalParams", db_origen_AdditionalParams.toString());
				
			}
			
			if(db_origen_Port != null){
				
					this.setProperty("db_origen_Port", db_origen_Port.toString());
				
			}
			
			if(JasperServer != null){
				
					this.setProperty("JasperServer", JasperServer.toString());
				
			}
			
			if(UsernameMail != null){
				
					this.setProperty("UsernameMail", UsernameMail.toString());
				
			}
			
			if(SMTPPort != null){
				
					this.setProperty("SMTPPort", SMTPPort.toString());
				
			}
			
			if(PasswordMail != null){
				
					this.setProperty("PasswordMail", PasswordMail.toString());
				
			}
			
			if(SmsUser != null){
				
					this.setProperty("SmsUser", SmsUser.toString());
				
			}
			
			if(JasperPassword != null){
				
					this.setProperty("JasperPassword", JasperPassword.toString());
				
			}
			
			if(JasperAmbiente != null){
				
					this.setProperty("JasperAmbiente", JasperAmbiente.toString());
				
			}
			
			if(SmsPassword != null){
				
					this.setProperty("SmsPassword", SmsPassword.toString());
				
			}
			
			if(SMTPHost != null){
				
					this.setProperty("SMTPHost", SMTPHost.toString());
				
			}
			
			if(JasperUser != null){
				
					this.setProperty("JasperUser", JasperUser.toString());
				
			}
			
			if(SmsServer != null){
				
					this.setProperty("SmsServer", SmsServer.toString());
				
			}
			
			if(FromMail != null){
				
					this.setProperty("FromMail", FromMail.toString());
				
			}
			
			if(MensajeEmail != null){
				
					this.setProperty("MensajeEmail", MensajeEmail.toString());
				
			}
			
			if(TiempoCita != null){
				
					this.setProperty("TiempoCita", TiempoCita.toString());
				
			}
			
			if(PacienteCita != null){
				
					this.setProperty("PacienteCita", PacienteCita.toString());
				
			}
			
			if(SendMail != null){
				
					this.setProperty("SendMail", SendMail.toString());
				
			}
			
			if(MensajeSms != null){
				
					this.setProperty("MensajeSms", MensajeSms.toString());
				
			}
			
			if(SendSms != null){
				
					this.setProperty("SendSms", SendSms.toString());
				
			}
			
			if(SmsAuth != null){
				
					this.setProperty("SmsAuth", SmsAuth.toString());
				
			}
			
			if(EmailTo != null){
				
					this.setProperty("EmailTo", EmailTo.toString());
				
			}
			
			if(SmsTo != null){
				
					this.setProperty("SmsTo", SmsTo.toString());
				
			}
			
			if(RecordatorioExitoso != null){
				
					this.setProperty("RecordatorioExitoso", RecordatorioExitoso.toString());
				
			}
			
			if(CitaId != null){
				
					this.setProperty("CitaId", CitaId.toString());
				
			}
			
			if(SmsErrorBody != null){
				
					this.setProperty("SmsErrorBody", SmsErrorBody.toString());
				
			}
			
			if(SmsErrorCode != null){
				
					this.setProperty("SmsErrorCode", SmsErrorCode.toString());
				
			}
			
			if(SmsBody != null){
				
					this.setProperty("SmsBody", SmsBody.toString());
				
			}
			
			if(PathStorage != null){
				
					this.setProperty("PathStorage", PathStorage.toString());
				
			}
			
			if(SmsAuthProvider != null){
				
					this.setProperty("SmsAuthProvider", SmsAuthProvider.toString());
				
			}
			
			if(SmsAuthServer != null){
				
					this.setProperty("SmsAuthServer", SmsAuthServer.toString());
				
			}
			
			if(SMTPPortSecure != null){
				
					this.setProperty("SMTPPortSecure", SMTPPortSecure.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String FANTERIOR;
public String getFANTERIOR(){
	return this.FANTERIOR;
}
public Boolean ACTUALIZACION_TOTAL;
public Boolean getACTUALIZACION_TOTAL(){
	return this.ACTUALIZACION_TOTAL;
}
public String ERROR;
public String getERROR(){
	return this.ERROR;
}
public String FECHA_EJECUCION;
public String getFECHA_EJECUCION(){
	return this.FECHA_EJECUCION;
}
public String HORA_INICIO;
public String getHORA_INICIO(){
	return this.HORA_INICIO;
}
public String HORA_FINAL;
public String getHORA_FINAL(){
	return this.HORA_FINAL;
}
public String ESTADO;
public String getESTADO(){
	return this.ESTADO;
}
public String LOGS_ERROR;
public String getLOGS_ERROR(){
	return this.LOGS_ERROR;
}
public String LOGS_EXECUTION;
public String getLOGS_EXECUTION(){
	return this.LOGS_EXECUTION;
}
public String ORIGEN;
public String getORIGEN(){
	return this.ORIGEN;
}
public String BODEGA;
public String getBODEGA(){
	return this.BODEGA;
}
public Integer ID_SOLICITUD;
public Integer getID_SOLICITUD(){
	return this.ID_SOLICITUD;
}
public String ESTADO_EXEC;
public String getESTADO_EXEC(){
	return this.ESTADO_EXEC;
}
public Integer LAST_DAYS;
public Integer getLAST_DAYS(){
	return this.LAST_DAYS;
}
public String FECHA_TERMINACION;
public String getFECHA_TERMINACION(){
	return this.FECHA_TERMINACION;
}
public String LOGS_STAT;
public String getLOGS_STAT(){
	return this.LOGS_STAT;
}
public String RutaSistema;
public String getRutaSistema(){
	return this.RutaSistema;
}
public String CONDITION;
public String getCONDITION(){
	return this.CONDITION;
}
public String CONDITION_PRINCIPAL;
public String getCONDITION_PRINCIPAL(){
	return this.CONDITION_PRINCIPAL;
}
public String JOB;
public String getJOB(){
	return this.JOB;
}
public String db_destino_ServiceName;
public String getDb_destino_ServiceName(){
	return this.db_destino_ServiceName;
}
public String db_destino_AdditionalParams;
public String getDb_destino_AdditionalParams(){
	return this.db_destino_AdditionalParams;
}
public String db_destino_Login;
public String getDb_destino_Login(){
	return this.db_destino_Login;
}
public String db_destino_Port;
public String getDb_destino_Port(){
	return this.db_destino_Port;
}
public String db_destino_Schema;
public String getDb_destino_Schema(){
	return this.db_destino_Schema;
}
public String db_destino_Server;
public String getDb_destino_Server(){
	return this.db_destino_Server;
}
public java.lang.String db_destino_Password;
public java.lang.String getDb_destino_Password(){
	return this.db_destino_Password;
}
public String db_origen_ServiceName;
public String getDb_origen_ServiceName(){
	return this.db_origen_ServiceName;
}
public String db_origen_Server;
public String getDb_origen_Server(){
	return this.db_origen_Server;
}
public String db_origen_Login;
public String getDb_origen_Login(){
	return this.db_origen_Login;
}
public String db_origen_Schema;
public String getDb_origen_Schema(){
	return this.db_origen_Schema;
}
public java.lang.String db_origen_Password;
public java.lang.String getDb_origen_Password(){
	return this.db_origen_Password;
}
public String db_origen_AdditionalParams;
public String getDb_origen_AdditionalParams(){
	return this.db_origen_AdditionalParams;
}
public String db_origen_Port;
public String getDb_origen_Port(){
	return this.db_origen_Port;
}
public String JasperServer;
public String getJasperServer(){
	return this.JasperServer;
}
public String UsernameMail;
public String getUsernameMail(){
	return this.UsernameMail;
}
public String SMTPPort;
public String getSMTPPort(){
	return this.SMTPPort;
}
public String PasswordMail;
public String getPasswordMail(){
	return this.PasswordMail;
}
public String SmsUser;
public String getSmsUser(){
	return this.SmsUser;
}
public String JasperPassword;
public String getJasperPassword(){
	return this.JasperPassword;
}
public String JasperAmbiente;
public String getJasperAmbiente(){
	return this.JasperAmbiente;
}
public String SmsPassword;
public String getSmsPassword(){
	return this.SmsPassword;
}
public String SMTPHost;
public String getSMTPHost(){
	return this.SMTPHost;
}
public String JasperUser;
public String getJasperUser(){
	return this.JasperUser;
}
public String SmsServer;
public String getSmsServer(){
	return this.SmsServer;
}
public String FromMail;
public String getFromMail(){
	return this.FromMail;
}
public String MensajeEmail;
public String getMensajeEmail(){
	return this.MensajeEmail;
}
public String TiempoCita;
public String getTiempoCita(){
	return this.TiempoCita;
}
public String PacienteCita;
public String getPacienteCita(){
	return this.PacienteCita;
}
public String SendMail;
public String getSendMail(){
	return this.SendMail;
}
public String MensajeSms;
public String getMensajeSms(){
	return this.MensajeSms;
}
public String SendSms;
public String getSendSms(){
	return this.SendSms;
}
public String SmsAuth;
public String getSmsAuth(){
	return this.SmsAuth;
}
public String EmailTo;
public String getEmailTo(){
	return this.EmailTo;
}
public String SmsTo;
public String getSmsTo(){
	return this.SmsTo;
}
public String RecordatorioExitoso;
public String getRecordatorioExitoso(){
	return this.RecordatorioExitoso;
}
public BigDecimal CitaId;
public BigDecimal getCitaId(){
	return this.CitaId;
}
public String SmsErrorBody;
public String getSmsErrorBody(){
	return this.SmsErrorBody;
}
public Integer SmsErrorCode;
public Integer getSmsErrorCode(){
	return this.SmsErrorCode;
}
public String SmsBody;
public String getSmsBody(){
	return this.SmsBody;
}
public String PathStorage;
public String getPathStorage(){
	return this.PathStorage;
}
public String SmsAuthProvider;
public String getSmsAuthProvider(){
	return this.SmsAuthProvider;
}
public String SmsAuthServer;
public String getSmsAuthServer(){
	return this.SmsAuthServer;
}
public String SMTPPortSecure;
public String getSMTPPortSecure(){
	return this.SMTPPortSecure;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "RecordarCitasMedicas";
	private final String projectName = "AGE_RECORDAR_CITAS_MEDICAS";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				RecordarCitasMedicas.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(RecordarCitasMedicas.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowToIterate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tREST_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleCommit_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowToIterate_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBCommit_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	









public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tFileInputXML_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];
    static byte[] commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];

	
			    public String Host;

				public String getHost () {
					return this.Host;
				}

				public Boolean HostIsNullable(){
				    return true;
				}
				public Boolean HostIsKey(){
				    return false;
				}
				public Integer HostLength(){
				    return 15;
				}
				public Integer HostPrecision(){
				    return 0;
				}
				public String HostDefault(){
				
					return null;
				
				}
				public String HostComment(){
				
				    return "";
				
				}
				public String HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HostOriginalDbColumnName(){
				
					return "Host";
				
				}

				
			    public String Port;

				public String getPort () {
					return this.Port;
				}

				public Boolean PortIsNullable(){
				    return true;
				}
				public Boolean PortIsKey(){
				    return false;
				}
				public Integer PortLength(){
				    return 4;
				}
				public Integer PortPrecision(){
				    return 0;
				}
				public String PortDefault(){
				
					return null;
				
				}
				public String PortComment(){
				
				    return "";
				
				}
				public String PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PortOriginalDbColumnName(){
				
					return "Port";
				
				}

				
			    public String Sid;

				public String getSid () {
					return this.Sid;
				}

				public Boolean SidIsNullable(){
				    return true;
				}
				public Boolean SidIsKey(){
				    return false;
				}
				public Integer SidLength(){
				    return 4;
				}
				public Integer SidPrecision(){
				    return 0;
				}
				public String SidDefault(){
				
					return null;
				
				}
				public String SidComment(){
				
				    return "";
				
				}
				public String SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SidOriginalDbColumnName(){
				
					return "Sid";
				
				}

				
			    public String ServiceName;

				public String getServiceName () {
					return this.ServiceName;
				}

				public Boolean ServiceNameIsNullable(){
				    return true;
				}
				public Boolean ServiceNameIsKey(){
				    return false;
				}
				public Integer ServiceNameLength(){
				    return 7;
				}
				public Integer ServiceNamePrecision(){
				    return 0;
				}
				public String ServiceNameDefault(){
				
					return null;
				
				}
				public String ServiceNameComment(){
				
				    return "";
				
				}
				public String ServiceNamePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ServiceNameOriginalDbColumnName(){
				
					return "ServiceName";
				
				}

				
			    public String Schema;

				public String getSchema () {
					return this.Schema;
				}

				public Boolean SchemaIsNullable(){
				    return true;
				}
				public Boolean SchemaIsKey(){
				    return false;
				}
				public Integer SchemaLength(){
				    return 8;
				}
				public Integer SchemaPrecision(){
				    return 0;
				}
				public String SchemaDefault(){
				
					return null;
				
				}
				public String SchemaComment(){
				
				    return "";
				
				}
				public String SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SchemaOriginalDbColumnName(){
				
					return "Schema";
				
				}

				
			    public String User;

				public String getUser () {
					return this.User;
				}

				public Boolean UserIsNullable(){
				    return true;
				}
				public Boolean UserIsKey(){
				    return false;
				}
				public Integer UserLength(){
				    return 8;
				}
				public Integer UserPrecision(){
				    return 0;
				}
				public String UserDefault(){
				
					return null;
				
				}
				public String UserComment(){
				
				    return "";
				
				}
				public String UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UserOriginalDbColumnName(){
				
					return "User";
				
				}

				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}

				public Boolean PasswordIsNullable(){
				    return true;
				}
				public Boolean PasswordIsKey(){
				    return false;
				}
				public Integer PasswordLength(){
				    return 15;
				}
				public Integer PasswordPrecision(){
				    return 0;
				}
				public String PasswordDefault(){
				
					return null;
				
				}
				public String PasswordComment(){
				
				    return "";
				
				}
				public String PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordOriginalDbColumnName(){
				
					return "Password";
				
				}

				
			    public String PathStorage;

				public String getPathStorage () {
					return this.PathStorage;
				}

				public Boolean PathStorageIsNullable(){
				    return true;
				}
				public Boolean PathStorageIsKey(){
				    return false;
				}
				public Integer PathStorageLength(){
				    return 44;
				}
				public Integer PathStoragePrecision(){
				    return 0;
				}
				public String PathStorageDefault(){
				
					return null;
				
				}
				public String PathStorageComment(){
				
				    return "";
				
				}
				public String PathStoragePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PathStorageOriginalDbColumnName(){
				
					return "PathStorage";
				
				}

				
			    public String SMTPHost;

				public String getSMTPHost () {
					return this.SMTPHost;
				}

				public Boolean SMTPHostIsNullable(){
				    return true;
				}
				public Boolean SMTPHostIsKey(){
				    return false;
				}
				public Integer SMTPHostLength(){
				    return 14;
				}
				public Integer SMTPHostPrecision(){
				    return 0;
				}
				public String SMTPHostDefault(){
				
					return null;
				
				}
				public String SMTPHostComment(){
				
				    return "";
				
				}
				public String SMTPHostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPHostOriginalDbColumnName(){
				
					return "SMTPHost";
				
				}

				
			    public String SMTPPort;

				public String getSMTPPort () {
					return this.SMTPPort;
				}

				public Boolean SMTPPortIsNullable(){
				    return true;
				}
				public Boolean SMTPPortIsKey(){
				    return false;
				}
				public Integer SMTPPortLength(){
				    return 10;
				}
				public Integer SMTPPortPrecision(){
				    return 0;
				}
				public String SMTPPortDefault(){
				
					return null;
				
				}
				public String SMTPPortComment(){
				
				    return "";
				
				}
				public String SMTPPortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPPortOriginalDbColumnName(){
				
					return "SMTPPort";
				
				}

				
			    public String SMTPPortSecure;

				public String getSMTPPortSecure () {
					return this.SMTPPortSecure;
				}

				public Boolean SMTPPortSecureIsNullable(){
				    return true;
				}
				public Boolean SMTPPortSecureIsKey(){
				    return false;
				}
				public Integer SMTPPortSecureLength(){
				    return 10;
				}
				public Integer SMTPPortSecurePrecision(){
				    return null;
				}
				public String SMTPPortSecureDefault(){
				
					return null;
				
				}
				public String SMTPPortSecureComment(){
				
				    return "";
				
				}
				public String SMTPPortSecurePattern(){
				
					return "";
				
				}
				public String SMTPPortSecureOriginalDbColumnName(){
				
					return "SMTPPortSecure";
				
				}

				
			    public String FromMail;

				public String getFromMail () {
					return this.FromMail;
				}

				public Boolean FromMailIsNullable(){
				    return true;
				}
				public Boolean FromMailIsKey(){
				    return false;
				}
				public Integer FromMailLength(){
				    return null;
				}
				public Integer FromMailPrecision(){
				    return null;
				}
				public String FromMailDefault(){
				
					return null;
				
				}
				public String FromMailComment(){
				
				    return "";
				
				}
				public String FromMailPattern(){
				
					return "";
				
				}
				public String FromMailOriginalDbColumnName(){
				
					return "FromMail";
				
				}

				
			    public String UsernameMail;

				public String getUsernameMail () {
					return this.UsernameMail;
				}

				public Boolean UsernameMailIsNullable(){
				    return true;
				}
				public Boolean UsernameMailIsKey(){
				    return false;
				}
				public Integer UsernameMailLength(){
				    return 34;
				}
				public Integer UsernameMailPrecision(){
				    return 0;
				}
				public String UsernameMailDefault(){
				
					return null;
				
				}
				public String UsernameMailComment(){
				
				    return "";
				
				}
				public String UsernameMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UsernameMailOriginalDbColumnName(){
				
					return "UsernameMail";
				
				}

				
			    public String PasswordMail;

				public String getPasswordMail () {
					return this.PasswordMail;
				}

				public Boolean PasswordMailIsNullable(){
				    return true;
				}
				public Boolean PasswordMailIsKey(){
				    return false;
				}
				public Integer PasswordMailLength(){
				    return 13;
				}
				public Integer PasswordMailPrecision(){
				    return 0;
				}
				public String PasswordMailDefault(){
				
					return null;
				
				}
				public String PasswordMailComment(){
				
				    return "";
				
				}
				public String PasswordMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordMailOriginalDbColumnName(){
				
					return "PasswordMail";
				
				}

				
			    public String JasperServer;

				public String getJasperServer () {
					return this.JasperServer;
				}

				public Boolean JasperServerIsNullable(){
				    return true;
				}
				public Boolean JasperServerIsKey(){
				    return false;
				}
				public Integer JasperServerLength(){
				    return null;
				}
				public Integer JasperServerPrecision(){
				    return null;
				}
				public String JasperServerDefault(){
				
					return null;
				
				}
				public String JasperServerComment(){
				
				    return "";
				
				}
				public String JasperServerPattern(){
				
					return "";
				
				}
				public String JasperServerOriginalDbColumnName(){
				
					return "JasperServer";
				
				}

				
			    public String JasperUser;

				public String getJasperUser () {
					return this.JasperUser;
				}

				public Boolean JasperUserIsNullable(){
				    return true;
				}
				public Boolean JasperUserIsKey(){
				    return false;
				}
				public Integer JasperUserLength(){
				    return null;
				}
				public Integer JasperUserPrecision(){
				    return null;
				}
				public String JasperUserDefault(){
				
					return null;
				
				}
				public String JasperUserComment(){
				
				    return "";
				
				}
				public String JasperUserPattern(){
				
					return "";
				
				}
				public String JasperUserOriginalDbColumnName(){
				
					return "JasperUser";
				
				}

				
			    public String JasperPassword;

				public String getJasperPassword () {
					return this.JasperPassword;
				}

				public Boolean JasperPasswordIsNullable(){
				    return true;
				}
				public Boolean JasperPasswordIsKey(){
				    return false;
				}
				public Integer JasperPasswordLength(){
				    return null;
				}
				public Integer JasperPasswordPrecision(){
				    return null;
				}
				public String JasperPasswordDefault(){
				
					return null;
				
				}
				public String JasperPasswordComment(){
				
				    return "";
				
				}
				public String JasperPasswordPattern(){
				
					return "";
				
				}
				public String JasperPasswordOriginalDbColumnName(){
				
					return "JasperPassword";
				
				}

				
			    public String JasperAmbiente;

				public String getJasperAmbiente () {
					return this.JasperAmbiente;
				}

				public Boolean JasperAmbienteIsNullable(){
				    return true;
				}
				public Boolean JasperAmbienteIsKey(){
				    return false;
				}
				public Integer JasperAmbienteLength(){
				    return null;
				}
				public Integer JasperAmbientePrecision(){
				    return null;
				}
				public String JasperAmbienteDefault(){
				
					return null;
				
				}
				public String JasperAmbienteComment(){
				
				    return "";
				
				}
				public String JasperAmbientePattern(){
				
					return "";
				
				}
				public String JasperAmbienteOriginalDbColumnName(){
				
					return "JasperAmbiente";
				
				}

				
			    public String SmsServer;

				public String getSmsServer () {
					return this.SmsServer;
				}

				public Boolean SmsServerIsNullable(){
				    return true;
				}
				public Boolean SmsServerIsKey(){
				    return false;
				}
				public Integer SmsServerLength(){
				    return null;
				}
				public Integer SmsServerPrecision(){
				    return null;
				}
				public String SmsServerDefault(){
				
					return null;
				
				}
				public String SmsServerComment(){
				
				    return "";
				
				}
				public String SmsServerPattern(){
				
					return "";
				
				}
				public String SmsServerOriginalDbColumnName(){
				
					return "SmsServer";
				
				}

				
			    public String SmsUser;

				public String getSmsUser () {
					return this.SmsUser;
				}

				public Boolean SmsUserIsNullable(){
				    return true;
				}
				public Boolean SmsUserIsKey(){
				    return false;
				}
				public Integer SmsUserLength(){
				    return null;
				}
				public Integer SmsUserPrecision(){
				    return null;
				}
				public String SmsUserDefault(){
				
					return null;
				
				}
				public String SmsUserComment(){
				
				    return "";
				
				}
				public String SmsUserPattern(){
				
					return "";
				
				}
				public String SmsUserOriginalDbColumnName(){
				
					return "SmsUser";
				
				}

				
			    public String SmsPassword;

				public String getSmsPassword () {
					return this.SmsPassword;
				}

				public Boolean SmsPasswordIsNullable(){
				    return true;
				}
				public Boolean SmsPasswordIsKey(){
				    return false;
				}
				public Integer SmsPasswordLength(){
				    return null;
				}
				public Integer SmsPasswordPrecision(){
				    return null;
				}
				public String SmsPasswordDefault(){
				
					return null;
				
				}
				public String SmsPasswordComment(){
				
				    return "";
				
				}
				public String SmsPasswordPattern(){
				
					return "";
				
				}
				public String SmsPasswordOriginalDbColumnName(){
				
					return "SmsPassword";
				
				}

				
			    public String SmsAuthProvider;

				public String getSmsAuthProvider () {
					return this.SmsAuthProvider;
				}

				public Boolean SmsAuthProviderIsNullable(){
				    return true;
				}
				public Boolean SmsAuthProviderIsKey(){
				    return false;
				}
				public Integer SmsAuthProviderLength(){
				    return null;
				}
				public Integer SmsAuthProviderPrecision(){
				    return null;
				}
				public String SmsAuthProviderDefault(){
				
					return null;
				
				}
				public String SmsAuthProviderComment(){
				
				    return "";
				
				}
				public String SmsAuthProviderPattern(){
				
					return "";
				
				}
				public String SmsAuthProviderOriginalDbColumnName(){
				
					return "SmsAuthProvider";
				
				}

				
			    public String SmsAuthServer;

				public String getSmsAuthServer () {
					return this.SmsAuthServer;
				}

				public Boolean SmsAuthServerIsNullable(){
				    return true;
				}
				public Boolean SmsAuthServerIsKey(){
				    return false;
				}
				public Integer SmsAuthServerLength(){
				    return null;
				}
				public Integer SmsAuthServerPrecision(){
				    return null;
				}
				public String SmsAuthServerDefault(){
				
					return null;
				
				}
				public String SmsAuthServerComment(){
				
				    return "";
				
				}
				public String SmsAuthServerPattern(){
				
					return "";
				
				}
				public String SmsAuthServerOriginalDbColumnName(){
				
					return "SmsAuthServer";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.PathStorage = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.SMTPPortSecure = readString(dis);
					
					this.FromMail = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
					this.JasperServer = readString(dis);
					
					this.JasperUser = readString(dis);
					
					this.JasperPassword = readString(dis);
					
					this.JasperAmbiente = readString(dis);
					
					this.SmsServer = readString(dis);
					
					this.SmsUser = readString(dis);
					
					this.SmsPassword = readString(dis);
					
					this.SmsAuthProvider = readString(dis);
					
					this.SmsAuthServer = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.PathStorage = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.SMTPPortSecure = readString(dis);
					
					this.FromMail = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
					this.JasperServer = readString(dis);
					
					this.JasperUser = readString(dis);
					
					this.JasperPassword = readString(dis);
					
					this.JasperAmbiente = readString(dis);
					
					this.SmsServer = readString(dis);
					
					this.SmsUser = readString(dis);
					
					this.SmsPassword = readString(dis);
					
					this.SmsAuthProvider = readString(dis);
					
					this.SmsAuthServer = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.PathStorage,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.SMTPPortSecure,dos);
					
					// String
				
						writeString(this.FromMail,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
					// String
				
						writeString(this.JasperServer,dos);
					
					// String
				
						writeString(this.JasperUser,dos);
					
					// String
				
						writeString(this.JasperPassword,dos);
					
					// String
				
						writeString(this.JasperAmbiente,dos);
					
					// String
				
						writeString(this.SmsServer,dos);
					
					// String
				
						writeString(this.SmsUser,dos);
					
					// String
				
						writeString(this.SmsPassword,dos);
					
					// String
				
						writeString(this.SmsAuthProvider,dos);
					
					// String
				
						writeString(this.SmsAuthServer,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.PathStorage,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.SMTPPortSecure,dos);
					
					// String
				
						writeString(this.FromMail,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
					// String
				
						writeString(this.JasperServer,dos);
					
					// String
				
						writeString(this.JasperUser,dos);
					
					// String
				
						writeString(this.JasperPassword,dos);
					
					// String
				
						writeString(this.JasperAmbiente,dos);
					
					// String
				
						writeString(this.SmsServer,dos);
					
					// String
				
						writeString(this.SmsUser,dos);
					
					// String
				
						writeString(this.SmsPassword,dos);
					
					// String
				
						writeString(this.SmsAuthProvider,dos);
					
					// String
				
						writeString(this.SmsAuthServer,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Host="+Host);
		sb.append(",Port="+Port);
		sb.append(",Sid="+Sid);
		sb.append(",ServiceName="+ServiceName);
		sb.append(",Schema="+Schema);
		sb.append(",User="+User);
		sb.append(",Password="+Password);
		sb.append(",PathStorage="+PathStorage);
		sb.append(",SMTPHost="+SMTPHost);
		sb.append(",SMTPPort="+SMTPPort);
		sb.append(",SMTPPortSecure="+SMTPPortSecure);
		sb.append(",FromMail="+FromMail);
		sb.append(",UsernameMail="+UsernameMail);
		sb.append(",PasswordMail="+PasswordMail);
		sb.append(",JasperServer="+JasperServer);
		sb.append(",JasperUser="+JasperUser);
		sb.append(",JasperPassword="+JasperPassword);
		sb.append(",JasperAmbiente="+JasperAmbiente);
		sb.append(",SmsServer="+SmsServer);
		sb.append(",SmsUser="+SmsUser);
		sb.append(",SmsPassword="+SmsPassword);
		sb.append(",SmsAuthProvider="+SmsAuthProvider);
		sb.append(",SmsAuthServer="+SmsAuthServer);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tFileInputXML_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_1", false);
		start_Hash.put("tFileInputXML_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_1";
	
	
		int tos_count_tFileInputXML_1 = 0;
		

	

int nb_line_tFileInputXML_1 = 0;

	String os_tFileInputXML_1 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_1=false;
	if(os_tFileInputXML_1.indexOf("windows") > -1 || os_tFileInputXML_1.indexOf("nt") > -1){
		isWindows_tFileInputXML_1=true;
	}
class XML_API_tFileInputXML_1{
	public boolean isDefNull(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0] != null && node[1]!=null && ("true").equals(node[1])){
        	return true;
        }
        return false;
    }

    public boolean isMissing(String[] node) throws javax.xml.transform.TransformerException {
        return node[0] == null ? true : false;
    }

    public boolean isEmpty(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0]!=null ){
        	return node[0].length() == 0;
        }
        return false;
    }
}
XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();

String[] queryPaths_tFileInputXML_1 = new String[]{	
	"Host"		
	,"Host"+"/@xsi:nil"	
	,"Port"		
	,"Port"+"/@xsi:nil"	
	,"Sid"		
	,"Sid"+"/@xsi:nil"	
	,"ServiceName"		
	,"ServiceName"+"/@xsi:nil"	
	,"Schema"		
	,"Schema"+"/@xsi:nil"	
	,"User"		
	,"User"+"/@xsi:nil"	
	,"Password"		
	,"Password"+"/@xsi:nil"	
	,"PathStorage"		
	,"PathStorage"+"/@xsi:nil"	
	,"SMTPHost"		
	,"SMTPHost"+"/@xsi:nil"	
	,"SMTPPort"		
	,"SMTPPort"+"/@xsi:nil"	
	,"SMTPPortSecure"		
	,"SMTPPortSecure"+"/@xsi:nil"	
	,"FromMail"		
	,"FromMail"+"/@xsi:nil"	
	,"UsernameMail"		
	,"UsernameMail"+"/@xsi:nil"	
	,"PasswordMail"		
	,"PasswordMail"+"/@xsi:nil"	
	,"JasperServer"		
	,"JasperServer"+"/@xsi:nil"	
	,"JasperUser"		
	,"JasperUser"+"/@xsi:nil"	
	,"JasperPassword"		
	,"JasperPassword"+"/@xsi:nil"	
	,"JasperAmbiente"		
	,"JasperAmbiente"+"/@xsi:nil"	
	,"SmsServer"		
	,"SmsServer"+"/@xsi:nil"	
	,"SmsUser"		
	,"SmsUser"+"/@xsi:nil"	
	,"SmsPassword"		
	,"SmsPassword"+"/@xsi:nil"	
	,"SmsAuthProvider"		
	,"SmsAuthProvider"+"/@xsi:nil"	
	,"SmsAuthServer"		
	,"SmsAuthServer"+"/@xsi:nil"
};

boolean[] asXMLs_tFileInputXML_1 = new boolean[]{	
	false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false
};

String str_tFileInputXML_1 = "";
String[] node_tFileInputXML_1 = null;
org.talend.xml.sax.SAXLooper looper_tFileInputXML_1 = new org.talend.xml.sax.SAXLooper("/connectionStrings",queryPaths_tFileInputXML_1,asXMLs_tFileInputXML_1);
looper_tFileInputXML_1.setEncoding("UTF-8");
Object filename_tFileInputXML_1 = null;
try {
	filename_tFileInputXML_1 = context.ORIGEN;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_1 != null && filename_tFileInputXML_1 instanceof String && filename_tFileInputXML_1.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_1){
		filename_tFileInputXML_1 = filename_tFileInputXML_1.toString().replaceFirst("//","/");
	}
}
if(filename_tFileInputXML_1 instanceof java.io.InputStream){
	looper_tFileInputXML_1.parse((java.io.InputStream)filename_tFileInputXML_1);
}else{
	looper_tFileInputXML_1.parse(String.valueOf(filename_tFileInputXML_1));
}
java.util.Iterator<java.util.Map<String, String>> it_tFileInputXML_1  = looper_tFileInputXML_1.iterator();
while (it_tFileInputXML_1.hasNext()) {
	java.util.Map<String, String> row_tFileInputXML_1 = it_tFileInputXML_1.next();
	if (nb_line_tFileInputXML_1>=50) {
	
			looper_tFileInputXML_1.stopRead();
	
		break;
	}
		nb_line_tFileInputXML_1++;
		
	row1 = null;			
	boolean whetherReject_tFileInputXML_1 = false;
	row1 = new row1Struct();
	try{
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Host");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Host"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Host =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Host ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Host =null;
									}else{
		row1.Host = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Port");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Port"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Port =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Port ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Port =null;
									}else{
		row1.Port = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Sid");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Sid"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Sid =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Sid ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Sid =null;
									}else{
		row1.Sid = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("ServiceName");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("ServiceName"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.ServiceName =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.ServiceName ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.ServiceName =null;
									}else{
		row1.ServiceName = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Schema");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Schema"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Schema =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Schema ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Schema =null;
									}else{
		row1.Schema = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("User");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("User"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.User =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.User ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.User =null;
									}else{
		row1.User = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Password");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Password"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Password =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Password ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Password =null;
									}else{
		row1.Password = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("PathStorage");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("PathStorage"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.PathStorage =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.PathStorage ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.PathStorage =null;
									}else{
		row1.PathStorage = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("SMTPHost");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("SMTPHost"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.SMTPHost =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.SMTPHost ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.SMTPHost =null;
									}else{
		row1.SMTPHost = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("SMTPPort");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("SMTPPort"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.SMTPPort =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.SMTPPort ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.SMTPPort =null;
									}else{
		row1.SMTPPort = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("SMTPPortSecure");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("SMTPPortSecure"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.SMTPPortSecure =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.SMTPPortSecure ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.SMTPPortSecure =null;
									}else{
		row1.SMTPPortSecure = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("FromMail");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("FromMail"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.FromMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.FromMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.FromMail =null;
									}else{
		row1.FromMail = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("UsernameMail");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("UsernameMail"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.UsernameMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.UsernameMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.UsernameMail =null;
									}else{
		row1.UsernameMail = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("PasswordMail");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("PasswordMail"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.PasswordMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.PasswordMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.PasswordMail =null;
									}else{
		row1.PasswordMail = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("JasperServer");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("JasperServer"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.JasperServer =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.JasperServer ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.JasperServer =null;
									}else{
		row1.JasperServer = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("JasperUser");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("JasperUser"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.JasperUser =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.JasperUser ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.JasperUser =null;
									}else{
		row1.JasperUser = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("JasperPassword");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("JasperPassword"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.JasperPassword =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.JasperPassword ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.JasperPassword =null;
									}else{
		row1.JasperPassword = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("JasperAmbiente");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("JasperAmbiente"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.JasperAmbiente =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.JasperAmbiente ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.JasperAmbiente =null;
									}else{
		row1.JasperAmbiente = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("SmsServer");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("SmsServer"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.SmsServer =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.SmsServer ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.SmsServer =null;
									}else{
		row1.SmsServer = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("SmsUser");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("SmsUser"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.SmsUser =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.SmsUser ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.SmsUser =null;
									}else{
		row1.SmsUser = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("SmsPassword");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("SmsPassword"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.SmsPassword =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.SmsPassword ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.SmsPassword =null;
									}else{
		row1.SmsPassword = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("SmsAuthProvider");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("SmsAuthProvider"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.SmsAuthProvider =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.SmsAuthProvider ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.SmsAuthProvider =null;
									}else{
		row1.SmsAuthProvider = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("SmsAuthServer");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("SmsAuthServer"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.SmsAuthServer =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.SmsAuthServer ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.SmsAuthServer =null;
									}else{
		row1.SmsAuthServer = str_tFileInputXML_1;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_1 = true;
                System.err.println(e.getMessage());
                row1 = null;
    }
			
			

 



/**
 * [tFileInputXML_1 begin ] stop
 */
	
	/**
	 * [tFileInputXML_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 


	tos_count_tFileInputXML_1++;

/**
 * [tFileInputXML_1 main ] stop
 */
	
	/**
	 * [tFileInputXML_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

    //Guarda en variables de contexto los parametros de conexión a la bd saludsis

context.db_origen_Server = row1.Host;
context.db_origen_Port = row1.Port;
context.db_origen_ServiceName = row1.ServiceName;
context.db_origen_Schema = row1.Schema;
context.db_origen_Login = row1.User;
context.db_origen_Password = row1.Password;

// Mail
context.SMTPHost = row1.SMTPHost;
context.SMTPPort = row1.SMTPPortSecure;
context.FromMail = row1.FromMail;
context.UsernameMail = row1.UsernameMail;
context.PasswordMail = row1.PasswordMail;

// Jasper
context.JasperServer = row1.JasperServer;
context.JasperUser = row1.JasperUser;
context.JasperPassword = row1.JasperPassword;
context.JasperAmbiente = row1.JasperAmbiente;

// SMS Server
context.SmsServer = row1.SmsServer;
context.SmsUser = row1.SmsUser;
context.SmsPassword = row1.SmsPassword;
context.SmsAuthProvider = row1.SmsAuthProvider;
context.SmsAuthServer = row1.SmsAuthServer;
//Opciones: cloudcitysms, basic
System.out.println("Auth provider sms: " + row1.SmsAuthProvider);
context.SmsAuth = Utils.GetAuthHeaderSmsProvider(row1.SmsAuthServer, row1.SmsUser, row1.SmsPassword, row1.SmsAuthProvider);

System.out.println("Auth header sms: " + context.SmsAuth);

//Guarda en variables de contexto la fecha de ejecución y la hora de inicio

context.FECHA_EJECUCION = TalendDate.getDate("YYYY-MM-DD");
context.HORA_INICIO = TalendDate.getDate("HH:mm:ss");
context.JOB = "RecordatorioCitas";
context.ESTADO_EXEC = "Succes";

//Imprime en consola el job, la fecha de ejecución y la hora de inicio
System.out.println(context.JOB+" :-Start: "+context.FECHA_EJECUCION+" "+context.HORA_INICIO);


//Logs
// ../../Log/error.csv

context.LOGS_ERROR = "../../Log/error_" + context.FECHA_EJECUCION + ".csv";
System.out.println("DirLog: " + context.LOGS_ERROR);



    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputXML_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	


	}
	try {
		looper_tFileInputXML_1.handleTaskResponse();
	} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
		if(!(e.getCause() instanceof org.talend.xml.sax.exception.EnoughDataException))
	
		
		System.err.println(e.getMessage());	
	
	}
	globalMap.put("tFileInputXML_1_NB_LINE",nb_line_tFileInputXML_1);

	

 

ok_Hash.put("tFileInputXML_1", true);
end_Hash.put("tFileInputXML_1", System.currentTimeMillis());




/**
 * [tFileInputXML_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tOracleConnection_1Process(globalMap);



/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_1", false);
		start_Hash.put("tOracleConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_1";
	
	
		int tos_count_tOracleConnection_1 = 0;
		
	

	
        String url_tOracleConnection_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + "1521" + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_1", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_1 = context.db_origen_Login;
	
	
		
	final String decryptedPassword_tOracleConnection_1 = context.db_origen_Password; 
		String dbPwd_tOracleConnection_1 = decryptedPassword_tOracleConnection_1;
	
	
	java.sql.Connection conn_tOracleConnection_1 = null;
	
		
			String driverClass_tOracleConnection_1 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_1 = java.lang.Class.forName(driverClass_tOracleConnection_1);
			globalMap.put("driverClass_tOracleConnection_1", driverClass_tOracleConnection_1);
		
			java.util.Properties atnParamsPrope_tOracleConnection_1 = new java.util.Properties();
			    atnParamsPrope_tOracleConnection_1.put("user",dbUser_tOracleConnection_1);
			    atnParamsPrope_tOracleConnection_1.put("password",dbPwd_tOracleConnection_1);
			if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                atnParamsPrope_tOracleConnection_1.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tOracleConnection_1 = java.sql.DriverManager.getConnection(url_tOracleConnection_1, atnParamsPrope_tOracleConnection_1);

		globalMap.put("conn_tOracleConnection_1", conn_tOracleConnection_1);
	if (null != conn_tOracleConnection_1) {
		
			conn_tOracleConnection_1.setAutoCommit(false);
	}
        globalMap.put("host_" + "tOracleConnection_1",context.db_origen_Server);
        globalMap.put("port_" + "tOracleConnection_1","1521");
        globalMap.put("dbname_" + "tOracleConnection_1",context.db_origen_ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_1", context.db_origen_Schema);
	globalMap.put("username_" + "tOracleConnection_1",context.db_origen_Login);
	globalMap.put("password_" + "tOracleConnection_1",dbPwd_tOracleConnection_1);

 



/**
 * [tOracleConnection_1 begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 


	tos_count_tOracleConnection_1++;

/**
 * [tOracleConnection_1 main ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_1 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 

ok_Hash.put("tOracleConnection_1", true);
end_Hash.put("tOracleConnection_1", System.currentTimeMillis());




/**
 * [tOracleConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";
	
	
		int tos_count_tJava_1 = 0;
		


context.FECHA_EJECUCION = TalendDate.getDate("DD/MM/YYYY");

System.out.println("\nFecha de ejecución: "+context.FECHA_EJECUCION);

 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tOracleInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];
    static byte[] commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];

	
			    public BigDecimal CitaId;

				public BigDecimal getCitaId () {
					return this.CitaId;
				}

				public Boolean CitaIdIsNullable(){
				    return false;
				}
				public Boolean CitaIdIsKey(){
				    return false;
				}
				public Integer CitaIdLength(){
				    return 0;
				}
				public Integer CitaIdPrecision(){
				    return null;
				}
				public String CitaIdDefault(){
				
					return "";
				
				}
				public String CitaIdComment(){
				
				    return "";
				
				}
				public String CitaIdPattern(){
				
					return "";
				
				}
				public String CitaIdOriginalDbColumnName(){
				
					return "CitaId";
				
				}

				
			    public String RecordatorioExitoso;

				public String getRecordatorioExitoso () {
					return this.RecordatorioExitoso;
				}

				public Boolean RecordatorioExitosoIsNullable(){
				    return false;
				}
				public Boolean RecordatorioExitosoIsKey(){
				    return false;
				}
				public Integer RecordatorioExitosoLength(){
				    return null;
				}
				public Integer RecordatorioExitosoPrecision(){
				    return null;
				}
				public String RecordatorioExitosoDefault(){
				
					return null;
				
				}
				public String RecordatorioExitosoComment(){
				
				    return "";
				
				}
				public String RecordatorioExitosoPattern(){
				
					return "";
				
				}
				public String RecordatorioExitosoOriginalDbColumnName(){
				
					return "RecordatorioExitoso";
				
				}

				
			    public int SmsErrorCode;

				public int getSmsErrorCode () {
					return this.SmsErrorCode;
				}

				public Boolean SmsErrorCodeIsNullable(){
				    return false;
				}
				public Boolean SmsErrorCodeIsKey(){
				    return false;
				}
				public Integer SmsErrorCodeLength(){
				    return null;
				}
				public Integer SmsErrorCodePrecision(){
				    return null;
				}
				public String SmsErrorCodeDefault(){
				
					return null;
				
				}
				public String SmsErrorCodeComment(){
				
				    return "";
				
				}
				public String SmsErrorCodePattern(){
				
					return "";
				
				}
				public String SmsErrorCodeOriginalDbColumnName(){
				
					return "SmsErrorCode";
				
				}

				
			    public String SmsErrorBody;

				public String getSmsErrorBody () {
					return this.SmsErrorBody;
				}

				public Boolean SmsErrorBodyIsNullable(){
				    return false;
				}
				public Boolean SmsErrorBodyIsKey(){
				    return false;
				}
				public Integer SmsErrorBodyLength(){
				    return null;
				}
				public Integer SmsErrorBodyPrecision(){
				    return null;
				}
				public String SmsErrorBodyDefault(){
				
					return null;
				
				}
				public String SmsErrorBodyComment(){
				
				    return "";
				
				}
				public String SmsErrorBodyPattern(){
				
					return "";
				
				}
				public String SmsErrorBodyOriginalDbColumnName(){
				
					return "SmsErrorBody";
				
				}

				
			    public String SendMail;

				public String getSendMail () {
					return this.SendMail;
				}

				public Boolean SendMailIsNullable(){
				    return false;
				}
				public Boolean SendMailIsKey(){
				    return false;
				}
				public Integer SendMailLength(){
				    return null;
				}
				public Integer SendMailPrecision(){
				    return null;
				}
				public String SendMailDefault(){
				
					return null;
				
				}
				public String SendMailComment(){
				
				    return "";
				
				}
				public String SendMailPattern(){
				
					return "";
				
				}
				public String SendMailOriginalDbColumnName(){
				
					return "SendMail";
				
				}

				
			    public String MensajeEmail;

				public String getMensajeEmail () {
					return this.MensajeEmail;
				}

				public Boolean MensajeEmailIsNullable(){
				    return false;
				}
				public Boolean MensajeEmailIsKey(){
				    return false;
				}
				public Integer MensajeEmailLength(){
				    return null;
				}
				public Integer MensajeEmailPrecision(){
				    return null;
				}
				public String MensajeEmailDefault(){
				
					return null;
				
				}
				public String MensajeEmailComment(){
				
				    return "";
				
				}
				public String MensajeEmailPattern(){
				
					return "";
				
				}
				public String MensajeEmailOriginalDbColumnName(){
				
					return "MensajeEmail";
				
				}

				
			    public String TiempoCita;

				public String getTiempoCita () {
					return this.TiempoCita;
				}

				public Boolean TiempoCitaIsNullable(){
				    return false;
				}
				public Boolean TiempoCitaIsKey(){
				    return false;
				}
				public Integer TiempoCitaLength(){
				    return null;
				}
				public Integer TiempoCitaPrecision(){
				    return null;
				}
				public String TiempoCitaDefault(){
				
					return null;
				
				}
				public String TiempoCitaComment(){
				
				    return "";
				
				}
				public String TiempoCitaPattern(){
				
					return "";
				
				}
				public String TiempoCitaOriginalDbColumnName(){
				
					return "TiempoCita";
				
				}

				
			    public String PacienteCita;

				public String getPacienteCita () {
					return this.PacienteCita;
				}

				public Boolean PacienteCitaIsNullable(){
				    return false;
				}
				public Boolean PacienteCitaIsKey(){
				    return false;
				}
				public Integer PacienteCitaLength(){
				    return null;
				}
				public Integer PacienteCitaPrecision(){
				    return null;
				}
				public String PacienteCitaDefault(){
				
					return null;
				
				}
				public String PacienteCitaComment(){
				
				    return "";
				
				}
				public String PacienteCitaPattern(){
				
					return "";
				
				}
				public String PacienteCitaOriginalDbColumnName(){
				
					return "PacienteCita";
				
				}

				
			    public String EmailTo;

				public String getEmailTo () {
					return this.EmailTo;
				}

				public Boolean EmailToIsNullable(){
				    return true;
				}
				public Boolean EmailToIsKey(){
				    return false;
				}
				public Integer EmailToLength(){
				    return null;
				}
				public Integer EmailToPrecision(){
				    return null;
				}
				public String EmailToDefault(){
				
					return null;
				
				}
				public String EmailToComment(){
				
				    return "";
				
				}
				public String EmailToPattern(){
				
					return "";
				
				}
				public String EmailToOriginalDbColumnName(){
				
					return "EmailTo";
				
				}

				
			    public String SendSms;

				public String getSendSms () {
					return this.SendSms;
				}

				public Boolean SendSmsIsNullable(){
				    return false;
				}
				public Boolean SendSmsIsKey(){
				    return false;
				}
				public Integer SendSmsLength(){
				    return null;
				}
				public Integer SendSmsPrecision(){
				    return null;
				}
				public String SendSmsDefault(){
				
					return null;
				
				}
				public String SendSmsComment(){
				
				    return "";
				
				}
				public String SendSmsPattern(){
				
					return "";
				
				}
				public String SendSmsOriginalDbColumnName(){
				
					return "SendSms";
				
				}

				
			    public String MensajeSms;

				public String getMensajeSms () {
					return this.MensajeSms;
				}

				public Boolean MensajeSmsIsNullable(){
				    return false;
				}
				public Boolean MensajeSmsIsKey(){
				    return false;
				}
				public Integer MensajeSmsLength(){
				    return null;
				}
				public Integer MensajeSmsPrecision(){
				    return null;
				}
				public String MensajeSmsDefault(){
				
					return null;
				
				}
				public String MensajeSmsComment(){
				
				    return "";
				
				}
				public String MensajeSmsPattern(){
				
					return "";
				
				}
				public String MensajeSmsOriginalDbColumnName(){
				
					return "MensajeSms";
				
				}

				
			    public String SmsTo;

				public String getSmsTo () {
					return this.SmsTo;
				}

				public Boolean SmsToIsNullable(){
				    return true;
				}
				public Boolean SmsToIsKey(){
				    return false;
				}
				public Integer SmsToLength(){
				    return null;
				}
				public Integer SmsToPrecision(){
				    return null;
				}
				public String SmsToDefault(){
				
					return null;
				
				}
				public String SmsToComment(){
				
				    return "";
				
				}
				public String SmsToPattern(){
				
					return "";
				
				}
				public String SmsToOriginalDbColumnName(){
				
					return "SmsTo";
				
				}

				
			    public String SmsBody;

				public String getSmsBody () {
					return this.SmsBody;
				}

				public Boolean SmsBodyIsNullable(){
				    return false;
				}
				public Boolean SmsBodyIsKey(){
				    return false;
				}
				public Integer SmsBodyLength(){
				    return null;
				}
				public Integer SmsBodyPrecision(){
				    return null;
				}
				public String SmsBodyDefault(){
				
					return null;
				
				}
				public String SmsBodyComment(){
				
				    return "";
				
				}
				public String SmsBodyPattern(){
				
					return "";
				
				}
				public String SmsBodyOriginalDbColumnName(){
				
					return "SmsBody";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
						this.CitaId = (BigDecimal) dis.readObject();
					
					this.RecordatorioExitoso = readString(dis);
					
			        this.SmsErrorCode = dis.readInt();
					
					this.SmsErrorBody = readString(dis);
					
					this.SendMail = readString(dis);
					
					this.MensajeEmail = readString(dis);
					
					this.TiempoCita = readString(dis);
					
					this.PacienteCita = readString(dis);
					
					this.EmailTo = readString(dis);
					
					this.SendSms = readString(dis);
					
					this.MensajeSms = readString(dis);
					
					this.SmsTo = readString(dis);
					
					this.SmsBody = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
						this.CitaId = (BigDecimal) dis.readObject();
					
					this.RecordatorioExitoso = readString(dis);
					
			        this.SmsErrorCode = dis.readInt();
					
					this.SmsErrorBody = readString(dis);
					
					this.SendMail = readString(dis);
					
					this.MensajeEmail = readString(dis);
					
					this.TiempoCita = readString(dis);
					
					this.PacienteCita = readString(dis);
					
					this.EmailTo = readString(dis);
					
					this.SendSms = readString(dis);
					
					this.MensajeSms = readString(dis);
					
					this.SmsTo = readString(dis);
					
					this.SmsBody = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.CitaId);
					
					// String
				
						writeString(this.RecordatorioExitoso,dos);
					
					// int
				
		            	dos.writeInt(this.SmsErrorCode);
					
					// String
				
						writeString(this.SmsErrorBody,dos);
					
					// String
				
						writeString(this.SendMail,dos);
					
					// String
				
						writeString(this.MensajeEmail,dos);
					
					// String
				
						writeString(this.TiempoCita,dos);
					
					// String
				
						writeString(this.PacienteCita,dos);
					
					// String
				
						writeString(this.EmailTo,dos);
					
					// String
				
						writeString(this.SendSms,dos);
					
					// String
				
						writeString(this.MensajeSms,dos);
					
					// String
				
						writeString(this.SmsTo,dos);
					
					// String
				
						writeString(this.SmsBody,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CitaId);
					
					// String
				
						writeString(this.RecordatorioExitoso,dos);
					
					// int
				
		            	dos.writeInt(this.SmsErrorCode);
					
					// String
				
						writeString(this.SmsErrorBody,dos);
					
					// String
				
						writeString(this.SendMail,dos);
					
					// String
				
						writeString(this.MensajeEmail,dos);
					
					// String
				
						writeString(this.TiempoCita,dos);
					
					// String
				
						writeString(this.PacienteCita,dos);
					
					// String
				
						writeString(this.EmailTo,dos);
					
					// String
				
						writeString(this.SendSms,dos);
					
					// String
				
						writeString(this.MensajeSms,dos);
					
					// String
				
						writeString(this.SmsTo,dos);
					
					// String
				
						writeString(this.SmsBody,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CitaId="+String.valueOf(CitaId));
		sb.append(",RecordatorioExitoso="+RecordatorioExitoso);
		sb.append(",SmsErrorCode="+String.valueOf(SmsErrorCode));
		sb.append(",SmsErrorBody="+SmsErrorBody);
		sb.append(",SendMail="+SendMail);
		sb.append(",MensajeEmail="+MensajeEmail);
		sb.append(",TiempoCita="+TiempoCita);
		sb.append(",PacienteCita="+PacienteCita);
		sb.append(",EmailTo="+EmailTo);
		sb.append(",SendSms="+SendSms);
		sb.append(",MensajeSms="+MensajeSms);
		sb.append(",SmsTo="+SmsTo);
		sb.append(",SmsBody="+SmsBody);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];
    static byte[] commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];

	
			    public BigDecimal CitaId;

				public BigDecimal getCitaId () {
					return this.CitaId;
				}

				public Boolean CitaIdIsNullable(){
				    return false;
				}
				public Boolean CitaIdIsKey(){
				    return false;
				}
				public Integer CitaIdLength(){
				    return 0;
				}
				public Integer CitaIdPrecision(){
				    return null;
				}
				public String CitaIdDefault(){
				
					return "";
				
				}
				public String CitaIdComment(){
				
				    return "";
				
				}
				public String CitaIdPattern(){
				
					return "";
				
				}
				public String CitaIdOriginalDbColumnName(){
				
					return "CitaId";
				
				}

				
			    public String RecordatorioExitoso;

				public String getRecordatorioExitoso () {
					return this.RecordatorioExitoso;
				}

				public Boolean RecordatorioExitosoIsNullable(){
				    return false;
				}
				public Boolean RecordatorioExitosoIsKey(){
				    return false;
				}
				public Integer RecordatorioExitosoLength(){
				    return null;
				}
				public Integer RecordatorioExitosoPrecision(){
				    return null;
				}
				public String RecordatorioExitosoDefault(){
				
					return null;
				
				}
				public String RecordatorioExitosoComment(){
				
				    return "";
				
				}
				public String RecordatorioExitosoPattern(){
				
					return "";
				
				}
				public String RecordatorioExitosoOriginalDbColumnName(){
				
					return "RecordatorioExitoso";
				
				}

				
			    public int SmsErrorCode;

				public int getSmsErrorCode () {
					return this.SmsErrorCode;
				}

				public Boolean SmsErrorCodeIsNullable(){
				    return false;
				}
				public Boolean SmsErrorCodeIsKey(){
				    return false;
				}
				public Integer SmsErrorCodeLength(){
				    return null;
				}
				public Integer SmsErrorCodePrecision(){
				    return null;
				}
				public String SmsErrorCodeDefault(){
				
					return null;
				
				}
				public String SmsErrorCodeComment(){
				
				    return "";
				
				}
				public String SmsErrorCodePattern(){
				
					return "";
				
				}
				public String SmsErrorCodeOriginalDbColumnName(){
				
					return "SmsErrorCode";
				
				}

				
			    public String SmsErrorBody;

				public String getSmsErrorBody () {
					return this.SmsErrorBody;
				}

				public Boolean SmsErrorBodyIsNullable(){
				    return false;
				}
				public Boolean SmsErrorBodyIsKey(){
				    return false;
				}
				public Integer SmsErrorBodyLength(){
				    return null;
				}
				public Integer SmsErrorBodyPrecision(){
				    return null;
				}
				public String SmsErrorBodyDefault(){
				
					return null;
				
				}
				public String SmsErrorBodyComment(){
				
				    return "";
				
				}
				public String SmsErrorBodyPattern(){
				
					return "";
				
				}
				public String SmsErrorBodyOriginalDbColumnName(){
				
					return "SmsErrorBody";
				
				}

				
			    public String SendMail;

				public String getSendMail () {
					return this.SendMail;
				}

				public Boolean SendMailIsNullable(){
				    return false;
				}
				public Boolean SendMailIsKey(){
				    return false;
				}
				public Integer SendMailLength(){
				    return null;
				}
				public Integer SendMailPrecision(){
				    return null;
				}
				public String SendMailDefault(){
				
					return null;
				
				}
				public String SendMailComment(){
				
				    return "";
				
				}
				public String SendMailPattern(){
				
					return "";
				
				}
				public String SendMailOriginalDbColumnName(){
				
					return "SendMail";
				
				}

				
			    public String MensajeEmail;

				public String getMensajeEmail () {
					return this.MensajeEmail;
				}

				public Boolean MensajeEmailIsNullable(){
				    return false;
				}
				public Boolean MensajeEmailIsKey(){
				    return false;
				}
				public Integer MensajeEmailLength(){
				    return null;
				}
				public Integer MensajeEmailPrecision(){
				    return null;
				}
				public String MensajeEmailDefault(){
				
					return null;
				
				}
				public String MensajeEmailComment(){
				
				    return "";
				
				}
				public String MensajeEmailPattern(){
				
					return "";
				
				}
				public String MensajeEmailOriginalDbColumnName(){
				
					return "MensajeEmail";
				
				}

				
			    public String TiempoCita;

				public String getTiempoCita () {
					return this.TiempoCita;
				}

				public Boolean TiempoCitaIsNullable(){
				    return false;
				}
				public Boolean TiempoCitaIsKey(){
				    return false;
				}
				public Integer TiempoCitaLength(){
				    return null;
				}
				public Integer TiempoCitaPrecision(){
				    return null;
				}
				public String TiempoCitaDefault(){
				
					return null;
				
				}
				public String TiempoCitaComment(){
				
				    return "";
				
				}
				public String TiempoCitaPattern(){
				
					return "";
				
				}
				public String TiempoCitaOriginalDbColumnName(){
				
					return "TiempoCita";
				
				}

				
			    public String PacienteCita;

				public String getPacienteCita () {
					return this.PacienteCita;
				}

				public Boolean PacienteCitaIsNullable(){
				    return false;
				}
				public Boolean PacienteCitaIsKey(){
				    return false;
				}
				public Integer PacienteCitaLength(){
				    return null;
				}
				public Integer PacienteCitaPrecision(){
				    return null;
				}
				public String PacienteCitaDefault(){
				
					return null;
				
				}
				public String PacienteCitaComment(){
				
				    return "";
				
				}
				public String PacienteCitaPattern(){
				
					return "";
				
				}
				public String PacienteCitaOriginalDbColumnName(){
				
					return "PacienteCita";
				
				}

				
			    public String EmailTo;

				public String getEmailTo () {
					return this.EmailTo;
				}

				public Boolean EmailToIsNullable(){
				    return true;
				}
				public Boolean EmailToIsKey(){
				    return false;
				}
				public Integer EmailToLength(){
				    return null;
				}
				public Integer EmailToPrecision(){
				    return null;
				}
				public String EmailToDefault(){
				
					return null;
				
				}
				public String EmailToComment(){
				
				    return "";
				
				}
				public String EmailToPattern(){
				
					return "";
				
				}
				public String EmailToOriginalDbColumnName(){
				
					return "EmailTo";
				
				}

				
			    public String SendSms;

				public String getSendSms () {
					return this.SendSms;
				}

				public Boolean SendSmsIsNullable(){
				    return false;
				}
				public Boolean SendSmsIsKey(){
				    return false;
				}
				public Integer SendSmsLength(){
				    return null;
				}
				public Integer SendSmsPrecision(){
				    return null;
				}
				public String SendSmsDefault(){
				
					return null;
				
				}
				public String SendSmsComment(){
				
				    return "";
				
				}
				public String SendSmsPattern(){
				
					return "";
				
				}
				public String SendSmsOriginalDbColumnName(){
				
					return "SendSms";
				
				}

				
			    public String MensajeSms;

				public String getMensajeSms () {
					return this.MensajeSms;
				}

				public Boolean MensajeSmsIsNullable(){
				    return false;
				}
				public Boolean MensajeSmsIsKey(){
				    return false;
				}
				public Integer MensajeSmsLength(){
				    return null;
				}
				public Integer MensajeSmsPrecision(){
				    return null;
				}
				public String MensajeSmsDefault(){
				
					return null;
				
				}
				public String MensajeSmsComment(){
				
				    return "";
				
				}
				public String MensajeSmsPattern(){
				
					return "";
				
				}
				public String MensajeSmsOriginalDbColumnName(){
				
					return "MensajeSms";
				
				}

				
			    public String SmsTo;

				public String getSmsTo () {
					return this.SmsTo;
				}

				public Boolean SmsToIsNullable(){
				    return true;
				}
				public Boolean SmsToIsKey(){
				    return false;
				}
				public Integer SmsToLength(){
				    return null;
				}
				public Integer SmsToPrecision(){
				    return null;
				}
				public String SmsToDefault(){
				
					return null;
				
				}
				public String SmsToComment(){
				
				    return "";
				
				}
				public String SmsToPattern(){
				
					return "";
				
				}
				public String SmsToOriginalDbColumnName(){
				
					return "SmsTo";
				
				}

				
			    public String SmsBody;

				public String getSmsBody () {
					return this.SmsBody;
				}

				public Boolean SmsBodyIsNullable(){
				    return false;
				}
				public Boolean SmsBodyIsKey(){
				    return false;
				}
				public Integer SmsBodyLength(){
				    return null;
				}
				public Integer SmsBodyPrecision(){
				    return null;
				}
				public String SmsBodyDefault(){
				
					return null;
				
				}
				public String SmsBodyComment(){
				
				    return "";
				
				}
				public String SmsBodyPattern(){
				
					return "";
				
				}
				public String SmsBodyOriginalDbColumnName(){
				
					return "SmsBody";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
						this.CitaId = (BigDecimal) dis.readObject();
					
					this.RecordatorioExitoso = readString(dis);
					
			        this.SmsErrorCode = dis.readInt();
					
					this.SmsErrorBody = readString(dis);
					
					this.SendMail = readString(dis);
					
					this.MensajeEmail = readString(dis);
					
					this.TiempoCita = readString(dis);
					
					this.PacienteCita = readString(dis);
					
					this.EmailTo = readString(dis);
					
					this.SendSms = readString(dis);
					
					this.MensajeSms = readString(dis);
					
					this.SmsTo = readString(dis);
					
					this.SmsBody = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
						this.CitaId = (BigDecimal) dis.readObject();
					
					this.RecordatorioExitoso = readString(dis);
					
			        this.SmsErrorCode = dis.readInt();
					
					this.SmsErrorBody = readString(dis);
					
					this.SendMail = readString(dis);
					
					this.MensajeEmail = readString(dis);
					
					this.TiempoCita = readString(dis);
					
					this.PacienteCita = readString(dis);
					
					this.EmailTo = readString(dis);
					
					this.SendSms = readString(dis);
					
					this.MensajeSms = readString(dis);
					
					this.SmsTo = readString(dis);
					
					this.SmsBody = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.CitaId);
					
					// String
				
						writeString(this.RecordatorioExitoso,dos);
					
					// int
				
		            	dos.writeInt(this.SmsErrorCode);
					
					// String
				
						writeString(this.SmsErrorBody,dos);
					
					// String
				
						writeString(this.SendMail,dos);
					
					// String
				
						writeString(this.MensajeEmail,dos);
					
					// String
				
						writeString(this.TiempoCita,dos);
					
					// String
				
						writeString(this.PacienteCita,dos);
					
					// String
				
						writeString(this.EmailTo,dos);
					
					// String
				
						writeString(this.SendSms,dos);
					
					// String
				
						writeString(this.MensajeSms,dos);
					
					// String
				
						writeString(this.SmsTo,dos);
					
					// String
				
						writeString(this.SmsBody,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CitaId);
					
					// String
				
						writeString(this.RecordatorioExitoso,dos);
					
					// int
				
		            	dos.writeInt(this.SmsErrorCode);
					
					// String
				
						writeString(this.SmsErrorBody,dos);
					
					// String
				
						writeString(this.SendMail,dos);
					
					// String
				
						writeString(this.MensajeEmail,dos);
					
					// String
				
						writeString(this.TiempoCita,dos);
					
					// String
				
						writeString(this.PacienteCita,dos);
					
					// String
				
						writeString(this.EmailTo,dos);
					
					// String
				
						writeString(this.SendSms,dos);
					
					// String
				
						writeString(this.MensajeSms,dos);
					
					// String
				
						writeString(this.SmsTo,dos);
					
					// String
				
						writeString(this.SmsBody,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CitaId="+String.valueOf(CitaId));
		sb.append(",RecordatorioExitoso="+RecordatorioExitoso);
		sb.append(",SmsErrorCode="+String.valueOf(SmsErrorCode));
		sb.append(",SmsErrorBody="+SmsErrorBody);
		sb.append(",SendMail="+SendMail);
		sb.append(",MensajeEmail="+MensajeEmail);
		sb.append(",TiempoCita="+TiempoCita);
		sb.append(",PacienteCita="+PacienteCita);
		sb.append(",EmailTo="+EmailTo);
		sb.append(",SendSms="+SendSms);
		sb.append(",MensajeSms="+MensajeSms);
		sb.append(",SmsTo="+SmsTo);
		sb.append(",SmsBody="+SmsBody);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];
    static byte[] commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];

	
			    public BigDecimal CitaId;

				public BigDecimal getCitaId () {
					return this.CitaId;
				}

				public Boolean CitaIdIsNullable(){
				    return false;
				}
				public Boolean CitaIdIsKey(){
				    return false;
				}
				public Integer CitaIdLength(){
				    return 0;
				}
				public Integer CitaIdPrecision(){
				    return null;
				}
				public String CitaIdDefault(){
				
					return "";
				
				}
				public String CitaIdComment(){
				
				    return "";
				
				}
				public String CitaIdPattern(){
				
					return "";
				
				}
				public String CitaIdOriginalDbColumnName(){
				
					return "CitaId";
				
				}

				
			    public String RecordatorioExitoso;

				public String getRecordatorioExitoso () {
					return this.RecordatorioExitoso;
				}

				public Boolean RecordatorioExitosoIsNullable(){
				    return false;
				}
				public Boolean RecordatorioExitosoIsKey(){
				    return false;
				}
				public Integer RecordatorioExitosoLength(){
				    return null;
				}
				public Integer RecordatorioExitosoPrecision(){
				    return null;
				}
				public String RecordatorioExitosoDefault(){
				
					return null;
				
				}
				public String RecordatorioExitosoComment(){
				
				    return "";
				
				}
				public String RecordatorioExitosoPattern(){
				
					return "";
				
				}
				public String RecordatorioExitosoOriginalDbColumnName(){
				
					return "RecordatorioExitoso";
				
				}

				
			    public int SmsErrorCode;

				public int getSmsErrorCode () {
					return this.SmsErrorCode;
				}

				public Boolean SmsErrorCodeIsNullable(){
				    return false;
				}
				public Boolean SmsErrorCodeIsKey(){
				    return false;
				}
				public Integer SmsErrorCodeLength(){
				    return null;
				}
				public Integer SmsErrorCodePrecision(){
				    return null;
				}
				public String SmsErrorCodeDefault(){
				
					return null;
				
				}
				public String SmsErrorCodeComment(){
				
				    return "";
				
				}
				public String SmsErrorCodePattern(){
				
					return "";
				
				}
				public String SmsErrorCodeOriginalDbColumnName(){
				
					return "SmsErrorCode";
				
				}

				
			    public String SmsErrorBody;

				public String getSmsErrorBody () {
					return this.SmsErrorBody;
				}

				public Boolean SmsErrorBodyIsNullable(){
				    return false;
				}
				public Boolean SmsErrorBodyIsKey(){
				    return false;
				}
				public Integer SmsErrorBodyLength(){
				    return null;
				}
				public Integer SmsErrorBodyPrecision(){
				    return null;
				}
				public String SmsErrorBodyDefault(){
				
					return null;
				
				}
				public String SmsErrorBodyComment(){
				
				    return "";
				
				}
				public String SmsErrorBodyPattern(){
				
					return "";
				
				}
				public String SmsErrorBodyOriginalDbColumnName(){
				
					return "SmsErrorBody";
				
				}

				
			    public String SendMail;

				public String getSendMail () {
					return this.SendMail;
				}

				public Boolean SendMailIsNullable(){
				    return false;
				}
				public Boolean SendMailIsKey(){
				    return false;
				}
				public Integer SendMailLength(){
				    return null;
				}
				public Integer SendMailPrecision(){
				    return null;
				}
				public String SendMailDefault(){
				
					return null;
				
				}
				public String SendMailComment(){
				
				    return "";
				
				}
				public String SendMailPattern(){
				
					return "";
				
				}
				public String SendMailOriginalDbColumnName(){
				
					return "SendMail";
				
				}

				
			    public String MensajeEmail;

				public String getMensajeEmail () {
					return this.MensajeEmail;
				}

				public Boolean MensajeEmailIsNullable(){
				    return false;
				}
				public Boolean MensajeEmailIsKey(){
				    return false;
				}
				public Integer MensajeEmailLength(){
				    return null;
				}
				public Integer MensajeEmailPrecision(){
				    return null;
				}
				public String MensajeEmailDefault(){
				
					return null;
				
				}
				public String MensajeEmailComment(){
				
				    return "";
				
				}
				public String MensajeEmailPattern(){
				
					return "";
				
				}
				public String MensajeEmailOriginalDbColumnName(){
				
					return "MensajeEmail";
				
				}

				
			    public String TiempoCita;

				public String getTiempoCita () {
					return this.TiempoCita;
				}

				public Boolean TiempoCitaIsNullable(){
				    return false;
				}
				public Boolean TiempoCitaIsKey(){
				    return false;
				}
				public Integer TiempoCitaLength(){
				    return null;
				}
				public Integer TiempoCitaPrecision(){
				    return null;
				}
				public String TiempoCitaDefault(){
				
					return null;
				
				}
				public String TiempoCitaComment(){
				
				    return "";
				
				}
				public String TiempoCitaPattern(){
				
					return "";
				
				}
				public String TiempoCitaOriginalDbColumnName(){
				
					return "TiempoCita";
				
				}

				
			    public String PacienteCita;

				public String getPacienteCita () {
					return this.PacienteCita;
				}

				public Boolean PacienteCitaIsNullable(){
				    return false;
				}
				public Boolean PacienteCitaIsKey(){
				    return false;
				}
				public Integer PacienteCitaLength(){
				    return null;
				}
				public Integer PacienteCitaPrecision(){
				    return null;
				}
				public String PacienteCitaDefault(){
				
					return null;
				
				}
				public String PacienteCitaComment(){
				
				    return "";
				
				}
				public String PacienteCitaPattern(){
				
					return "";
				
				}
				public String PacienteCitaOriginalDbColumnName(){
				
					return "PacienteCita";
				
				}

				
			    public String EmailTo;

				public String getEmailTo () {
					return this.EmailTo;
				}

				public Boolean EmailToIsNullable(){
				    return true;
				}
				public Boolean EmailToIsKey(){
				    return false;
				}
				public Integer EmailToLength(){
				    return null;
				}
				public Integer EmailToPrecision(){
				    return null;
				}
				public String EmailToDefault(){
				
					return null;
				
				}
				public String EmailToComment(){
				
				    return "";
				
				}
				public String EmailToPattern(){
				
					return "";
				
				}
				public String EmailToOriginalDbColumnName(){
				
					return "EmailTo";
				
				}

				
			    public String SendSms;

				public String getSendSms () {
					return this.SendSms;
				}

				public Boolean SendSmsIsNullable(){
				    return false;
				}
				public Boolean SendSmsIsKey(){
				    return false;
				}
				public Integer SendSmsLength(){
				    return null;
				}
				public Integer SendSmsPrecision(){
				    return null;
				}
				public String SendSmsDefault(){
				
					return null;
				
				}
				public String SendSmsComment(){
				
				    return "";
				
				}
				public String SendSmsPattern(){
				
					return "";
				
				}
				public String SendSmsOriginalDbColumnName(){
				
					return "SendSms";
				
				}

				
			    public String MensajeSms;

				public String getMensajeSms () {
					return this.MensajeSms;
				}

				public Boolean MensajeSmsIsNullable(){
				    return false;
				}
				public Boolean MensajeSmsIsKey(){
				    return false;
				}
				public Integer MensajeSmsLength(){
				    return null;
				}
				public Integer MensajeSmsPrecision(){
				    return null;
				}
				public String MensajeSmsDefault(){
				
					return null;
				
				}
				public String MensajeSmsComment(){
				
				    return "";
				
				}
				public String MensajeSmsPattern(){
				
					return "";
				
				}
				public String MensajeSmsOriginalDbColumnName(){
				
					return "MensajeSms";
				
				}

				
			    public String SmsTo;

				public String getSmsTo () {
					return this.SmsTo;
				}

				public Boolean SmsToIsNullable(){
				    return true;
				}
				public Boolean SmsToIsKey(){
				    return false;
				}
				public Integer SmsToLength(){
				    return null;
				}
				public Integer SmsToPrecision(){
				    return null;
				}
				public String SmsToDefault(){
				
					return null;
				
				}
				public String SmsToComment(){
				
				    return "";
				
				}
				public String SmsToPattern(){
				
					return "";
				
				}
				public String SmsToOriginalDbColumnName(){
				
					return "SmsTo";
				
				}

				
			    public String SmsBody;

				public String getSmsBody () {
					return this.SmsBody;
				}

				public Boolean SmsBodyIsNullable(){
				    return false;
				}
				public Boolean SmsBodyIsKey(){
				    return false;
				}
				public Integer SmsBodyLength(){
				    return null;
				}
				public Integer SmsBodyPrecision(){
				    return null;
				}
				public String SmsBodyDefault(){
				
					return null;
				
				}
				public String SmsBodyComment(){
				
				    return "";
				
				}
				public String SmsBodyPattern(){
				
					return "";
				
				}
				public String SmsBodyOriginalDbColumnName(){
				
					return "SmsBody";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
						this.CitaId = (BigDecimal) dis.readObject();
					
					this.RecordatorioExitoso = readString(dis);
					
			        this.SmsErrorCode = dis.readInt();
					
					this.SmsErrorBody = readString(dis);
					
					this.SendMail = readString(dis);
					
					this.MensajeEmail = readString(dis);
					
					this.TiempoCita = readString(dis);
					
					this.PacienteCita = readString(dis);
					
					this.EmailTo = readString(dis);
					
					this.SendSms = readString(dis);
					
					this.MensajeSms = readString(dis);
					
					this.SmsTo = readString(dis);
					
					this.SmsBody = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
						this.CitaId = (BigDecimal) dis.readObject();
					
					this.RecordatorioExitoso = readString(dis);
					
			        this.SmsErrorCode = dis.readInt();
					
					this.SmsErrorBody = readString(dis);
					
					this.SendMail = readString(dis);
					
					this.MensajeEmail = readString(dis);
					
					this.TiempoCita = readString(dis);
					
					this.PacienteCita = readString(dis);
					
					this.EmailTo = readString(dis);
					
					this.SendSms = readString(dis);
					
					this.MensajeSms = readString(dis);
					
					this.SmsTo = readString(dis);
					
					this.SmsBody = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.CitaId);
					
					// String
				
						writeString(this.RecordatorioExitoso,dos);
					
					// int
				
		            	dos.writeInt(this.SmsErrorCode);
					
					// String
				
						writeString(this.SmsErrorBody,dos);
					
					// String
				
						writeString(this.SendMail,dos);
					
					// String
				
						writeString(this.MensajeEmail,dos);
					
					// String
				
						writeString(this.TiempoCita,dos);
					
					// String
				
						writeString(this.PacienteCita,dos);
					
					// String
				
						writeString(this.EmailTo,dos);
					
					// String
				
						writeString(this.SendSms,dos);
					
					// String
				
						writeString(this.MensajeSms,dos);
					
					// String
				
						writeString(this.SmsTo,dos);
					
					// String
				
						writeString(this.SmsBody,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CitaId);
					
					// String
				
						writeString(this.RecordatorioExitoso,dos);
					
					// int
				
		            	dos.writeInt(this.SmsErrorCode);
					
					// String
				
						writeString(this.SmsErrorBody,dos);
					
					// String
				
						writeString(this.SendMail,dos);
					
					// String
				
						writeString(this.MensajeEmail,dos);
					
					// String
				
						writeString(this.TiempoCita,dos);
					
					// String
				
						writeString(this.PacienteCita,dos);
					
					// String
				
						writeString(this.EmailTo,dos);
					
					// String
				
						writeString(this.SendSms,dos);
					
					// String
				
						writeString(this.MensajeSms,dos);
					
					// String
				
						writeString(this.SmsTo,dos);
					
					// String
				
						writeString(this.SmsBody,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CitaId="+String.valueOf(CitaId));
		sb.append(",RecordatorioExitoso="+RecordatorioExitoso);
		sb.append(",SmsErrorCode="+String.valueOf(SmsErrorCode));
		sb.append(",SmsErrorBody="+SmsErrorBody);
		sb.append(",SendMail="+SendMail);
		sb.append(",MensajeEmail="+MensajeEmail);
		sb.append(",TiempoCita="+TiempoCita);
		sb.append(",PacienteCita="+PacienteCita);
		sb.append(",EmailTo="+EmailTo);
		sb.append(",SendSms="+SendSms);
		sb.append(",MensajeSms="+MensajeSms);
		sb.append(",SmsTo="+SmsTo);
		sb.append(",SmsBody="+SmsBody);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];
    static byte[] commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String SIGLADOC;

				public String getSIGLADOC () {
					return this.SIGLADOC;
				}

				public Boolean SIGLADOCIsNullable(){
				    return true;
				}
				public Boolean SIGLADOCIsKey(){
				    return false;
				}
				public Integer SIGLADOCLength(){
				    return null;
				}
				public Integer SIGLADOCPrecision(){
				    return null;
				}
				public String SIGLADOCDefault(){
				
					return null;
				
				}
				public String SIGLADOCComment(){
				
				    return "";
				
				}
				public String SIGLADOCPattern(){
				
					return "";
				
				}
				public String SIGLADOCOriginalDbColumnName(){
				
					return "SIGLADOC";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String FECHACITA;

				public String getFECHACITA () {
					return this.FECHACITA;
				}

				public Boolean FECHACITAIsNullable(){
				    return false;
				}
				public Boolean FECHACITAIsKey(){
				    return false;
				}
				public Integer FECHACITALength(){
				    return 75;
				}
				public Integer FECHACITAPrecision(){
				    return 0;
				}
				public String FECHACITADefault(){
				
					return null;
				
				}
				public String FECHACITAComment(){
				
				    return "";
				
				}
				public String FECHACITAPattern(){
				
					return "";
				
				}
				public String FECHACITAOriginalDbColumnName(){
				
					return "FECHACITA";
				
				}

				
			    public String TIPO_CITA;

				public String getTIPO_CITA () {
					return this.TIPO_CITA;
				}

				public Boolean TIPO_CITAIsNullable(){
				    return false;
				}
				public Boolean TIPO_CITAIsKey(){
				    return false;
				}
				public Integer TIPO_CITALength(){
				    return 1024;
				}
				public Integer TIPO_CITAPrecision(){
				    return 0;
				}
				public String TIPO_CITADefault(){
				
					return null;
				
				}
				public String TIPO_CITAComment(){
				
				    return "";
				
				}
				public String TIPO_CITAPattern(){
				
					return "";
				
				}
				public String TIPO_CITAOriginalDbColumnName(){
				
					return "TIPO_CITA";
				
				}

				
			    public String ESPECIALIDAD;

				public String getESPECIALIDAD () {
					return this.ESPECIALIDAD;
				}

				public Boolean ESPECIALIDADIsNullable(){
				    return false;
				}
				public Boolean ESPECIALIDADIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADLength(){
				    return 500;
				}
				public Integer ESPECIALIDADPrecision(){
				    return 0;
				}
				public String ESPECIALIDADDefault(){
				
					return null;
				
				}
				public String ESPECIALIDADComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADOriginalDbColumnName(){
				
					return "ESPECIALIDAD";
				
				}

				
			    public String SIGLA_UNIDAD_ORGANIZACIONAL;

				public String getSIGLA_UNIDAD_ORGANIZACIONAL () {
					return this.SIGLA_UNIDAD_ORGANIZACIONAL;
				}

				public Boolean SIGLA_UNIDAD_ORGANIZACIONALIsNullable(){
				    return false;
				}
				public Boolean SIGLA_UNIDAD_ORGANIZACIONALIsKey(){
				    return false;
				}
				public Integer SIGLA_UNIDAD_ORGANIZACIONALLength(){
				    return 100;
				}
				public Integer SIGLA_UNIDAD_ORGANIZACIONALPrecision(){
				    return 0;
				}
				public String SIGLA_UNIDAD_ORGANIZACIONALDefault(){
				
					return null;
				
				}
				public String SIGLA_UNIDAD_ORGANIZACIONALComment(){
				
				    return "";
				
				}
				public String SIGLA_UNIDAD_ORGANIZACIONALPattern(){
				
					return "";
				
				}
				public String SIGLA_UNIDAD_ORGANIZACIONALOriginalDbColumnName(){
				
					return "SIGLA_UNIDAD_ORGANIZACIONAL";
				
				}

				
			    public String PROFESIONAL;

				public String getPROFESIONAL () {
					return this.PROFESIONAL;
				}

				public Boolean PROFESIONALIsNullable(){
				    return false;
				}
				public Boolean PROFESIONALIsKey(){
				    return false;
				}
				public Integer PROFESIONALLength(){
				    return 232;
				}
				public Integer PROFESIONALPrecision(){
				    return 0;
				}
				public String PROFESIONALDefault(){
				
					return null;
				
				}
				public String PROFESIONALComment(){
				
				    return "";
				
				}
				public String PROFESIONALPattern(){
				
					return "";
				
				}
				public String PROFESIONALOriginalDbColumnName(){
				
					return "PROFESIONAL";
				
				}

				
			    public String PACIENTE;

				public String getPACIENTE () {
					return this.PACIENTE;
				}

				public Boolean PACIENTEIsNullable(){
				    return false;
				}
				public Boolean PACIENTEIsKey(){
				    return false;
				}
				public Integer PACIENTELength(){
				    return 496;
				}
				public Integer PACIENTEPrecision(){
				    return 0;
				}
				public String PACIENTEDefault(){
				
					return null;
				
				}
				public String PACIENTEComment(){
				
				    return "";
				
				}
				public String PACIENTEPattern(){
				
					return "";
				
				}
				public String PACIENTEOriginalDbColumnName(){
				
					return "PACIENTE";
				
				}

				
			    public String CELULAR;

				public String getCELULAR () {
					return this.CELULAR;
				}

				public Boolean CELULARIsNullable(){
				    return true;
				}
				public Boolean CELULARIsKey(){
				    return false;
				}
				public Integer CELULARLength(){
				    return 20;
				}
				public Integer CELULARPrecision(){
				    return 0;
				}
				public String CELULARDefault(){
				
					return null;
				
				}
				public String CELULARComment(){
				
				    return "";
				
				}
				public String CELULARPattern(){
				
					return "";
				
				}
				public String CELULAROriginalDbColumnName(){
				
					return "CELULAR";
				
				}

				
			    public String EMAIL;

				public String getEMAIL () {
					return this.EMAIL;
				}

				public Boolean EMAILIsNullable(){
				    return true;
				}
				public Boolean EMAILIsKey(){
				    return false;
				}
				public Integer EMAILLength(){
				    return 100;
				}
				public Integer EMAILPrecision(){
				    return 0;
				}
				public String EMAILDefault(){
				
					return null;
				
				}
				public String EMAILComment(){
				
				    return "";
				
				}
				public String EMAILPattern(){
				
					return "";
				
				}
				public String EMAILOriginalDbColumnName(){
				
					return "EMAIL";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.SIGLADOC = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.FECHACITA = readString(dis);
					
					this.TIPO_CITA = readString(dis);
					
					this.ESPECIALIDAD = readString(dis);
					
					this.SIGLA_UNIDAD_ORGANIZACIONAL = readString(dis);
					
					this.PROFESIONAL = readString(dis);
					
					this.PACIENTE = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.EMAIL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.SIGLADOC = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.FECHACITA = readString(dis);
					
					this.TIPO_CITA = readString(dis);
					
					this.ESPECIALIDAD = readString(dis);
					
					this.SIGLA_UNIDAD_ORGANIZACIONAL = readString(dis);
					
					this.PROFESIONAL = readString(dis);
					
					this.PACIENTE = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.EMAIL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.SIGLADOC,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.FECHACITA,dos);
					
					// String
				
						writeString(this.TIPO_CITA,dos);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.SIGLA_UNIDAD_ORGANIZACIONAL,dos);
					
					// String
				
						writeString(this.PROFESIONAL,dos);
					
					// String
				
						writeString(this.PACIENTE,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// String
				
						writeString(this.EMAIL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.SIGLADOC,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.FECHACITA,dos);
					
					// String
				
						writeString(this.TIPO_CITA,dos);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.SIGLA_UNIDAD_ORGANIZACIONAL,dos);
					
					// String
				
						writeString(this.PROFESIONAL,dos);
					
					// String
				
						writeString(this.PACIENTE,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// String
				
						writeString(this.EMAIL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",SIGLADOC="+SIGLADOC);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",FECHACITA="+FECHACITA);
		sb.append(",TIPO_CITA="+TIPO_CITA);
		sb.append(",ESPECIALIDAD="+ESPECIALIDAD);
		sb.append(",SIGLA_UNIDAD_ORGANIZACIONAL="+SIGLA_UNIDAD_ORGANIZACIONAL);
		sb.append(",PROFESIONAL="+PROFESIONAL);
		sb.append(",PACIENTE="+PACIENTE);
		sb.append(",CELULAR="+CELULAR);
		sb.append(",EMAIL="+EMAIL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();
row8Struct row8 = new row8Struct();
row8Struct row9 = row8;
row10Struct row10 = new row10Struct();







	
	/**
	 * [tHashOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_2", false);
		start_Hash.put("tHashOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tHashOutput_2 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct> tHashFile_tHashOutput_2 = null;
		String hashKey_tHashOutput_2 = "tHashFile_RecordarCitasMedicas_" + pid + "_tHashOutput_2";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_2)){
			    if(mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2) == null){
	      		    mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }else{
			    	tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }
			}
        int nb_line_tHashOutput_2 = 0;

 



/**
 * [tHashOutput_2 begin ] stop
 */



	
	/**
	 * [tFilterRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_1", false);
		start_Hash.put("tFilterRow_1", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tFilterRow_1 = 0;
		
    int nb_line_tFilterRow_1 = 0;
    int nb_line_ok_tFilterRow_1 = 0;
    int nb_line_reject_tFilterRow_1 = 0;

    class Operator_tFilterRow_1 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_1(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_1 begin ] stop
 */



	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tHashOutput_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row8Struct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_RecordarCitasMedicas_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
			    if(mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null){
	      		    mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row8Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }else{
			    	tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }
			}
        int nb_line_tHashOutput_1 = 0;

 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tJavaRow_2 = 0;
		

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tOracleInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_1", false);
		start_Hash.put("tOracleInput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_1";
	
	
		int tos_count_tOracleInput_1 = 0;
		
	


	
		    int nb_line_tOracleInput_1 = 0;
		    java.sql.Connection conn_tOracleInput_1 = null;
				conn_tOracleInput_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_1 = false;
				boolean isConnectionWrapped_tOracleInput_1 = !(conn_tOracleInput_1 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_1.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_1 = null;
                if (isConnectionWrapped_tOracleInput_1) {
					unwrappedOraConn_tOracleInput_1 = conn_tOracleInput_1.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_1 != null) {
                        isTimeZoneNull_tOracleInput_1 = (unwrappedOraConn_tOracleInput_1.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_1 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_1).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_1) {
					java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_1 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_1.next()) {
						sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_1 && unwrappedOraConn_tOracleInput_1 != null) {
                        unwrappedOraConn_tOracleInput_1.setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_1).setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_1.setFetchSize(10000);


		    String dbquery_tOracleInput_1 = "SELECT AC.ID,\n	   GT.SIGLA AS SIGLADOC,\n       GP.DOCUMENTO AS DOCUMENTO,\n       TO_CHAR(DECODE(AC.FECHAI, NULL, AC."
+"FECHA_EXTRA, AC.FECHAI), 'YYYY-MM-DD HH24:MI') AS FECHACITA,\n       AT.NOMBRE AS TIPO_CITA,\n       GE.NOMBRE AS ESPECI"
+"ALIDAD,\n       GU1.SIGLA AS SIGLA_UNIDAD_ORGANIZACIONAL,\n       GP1.PRIMER_NOMBRE || ' ' || GP1.PRIMER_APELLIDO AS PRO"
+"FESIONAL,\n       GP.PRIMER_NOMBRE || ' ' || GP.SEGUNDO_NOMBRE || ' ' || GP.PRIMER_APELLIDO || ' ' || GP.SEGUNDO_APELLID"
+"O AS PACIENTE,\n          GP.CELULAR, -- '3128751348' AS CELULAR, --\n         GP.EMAIL -- 'frankyjquintero@gmail.com' a"
+"s EMAIL --\nFROM   SALUDSIS.AGE_CITAS AC\nINNER  JOIN AGE_TESTCITAS AESTC ON AESTC.ID = AC.ESTADO_ID\nINNER  JOIN SALUDS"
+"IS.AGE_TCITAS AT ON (AC.TCITAS_ID = AT.ID)\nINNER  JOIN SALUDSIS.GEN_UORG GU1 ON (AC.UORG_ID = GU1.ID)\nINNER  JOIN SALU"
+"DSIS.AGE_SCITAS ACT ON (AC.SCITAS_ID = ACT.ID)\nINNER  JOIN SALUDSIS.GEN_PERSONAS GP ON (ACT.PERSONAS_ID = GP.ID)\nINNER"
+"  JOIN SALUDSIS.GEN_ESPECIALIDADES GE ON (ACT.ESPECIALIDADES_ID = GE.ID)\nINNER  JOIN SALUDSIS.AGE_TURNOS_CITAS ATC ON ("
+"AC.ID = ATC.CITAS_ID)\nINNER  JOIN SALUDSIS.AGE_TURNOS AT4 ON (ATC.TURNOS_ID = AT4.ID)\nINNER  JOIN SALUDSIS.AGE_AGENDA_"
+"TURNOS AAT ON (AT4.ID = AAT.TURNOS_ID)\nINNER  JOIN SALUDSIS.AGE_AGENDA AA ON (AAT.AGENDA_ID = AA.ID)\nINNER  JOIN SALUD"
+"SIS.AGE_AGENDA_USUARIOS AAU ON (AA.ID = AAU.AGENDA_ID)\nINNER  JOIN SALUDSIS.POR_RRHHESM PR ON (AAU.RRHHESM_ID = PR.ID)"
+"\nINNER  JOIN SALUDSIS.GEN_PERSONAS GP1 ON (PR.PERSONAS_ID = GP1.ID)\nINNER  JOIN SALUDSIS.GEN_TDOCUMENTOS gt ON GT.ID = "
+"GP.TDOCUMENTOS_ID\nWHERE  AC.ESTREGISTRO_ID = 1  AND AESTC.NOMBRE = 'Asignada' AND AC.RECORDATORIO = 'No'  AND\n      TO"
+"_CHAR(DECODE(AC.FECHAI, NULL, AC.FECHA_EXTRA, AC.FECHAI), 'YYYY-MM-DD') = TO_CHAR(SYSDATE + 1, 'YYYY-MM-DD') AND\n     ("
+"GP.CELULAR IS NOT NULL OR GP.EMAIL IS NOT NULL)\n--AND AC.ID = 17635566\nORDER  BY FECHACITA";
		    

		    globalMap.put("tOracleInput_1_QUERY",dbquery_tOracleInput_1);

		    java.sql.ResultSet rs_tOracleInput_1 = null;

		    try {
		    	rs_tOracleInput_1 = stmt_tOracleInput_1.executeQuery(dbquery_tOracleInput_1);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1.getMetaData();
		    	int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1.getColumnCount();

		    String tmpContent_tOracleInput_1 = null;
		    
		    
		    while (rs_tOracleInput_1.next()) {
		        nb_line_tOracleInput_1++;
		        
							if(colQtyInRs_tOracleInput_1 < 1) {
								row2.ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(1) != null) {
						row2.ID = rs_tOracleInput_1.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 2) {
								row2.SIGLADOC = null;
							} else {
	                         		
        	row2.SIGLADOC = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 3) {
								row2.DOCUMENTO = null;
							} else {
	                         		
        	row2.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 4) {
								row2.FECHACITA = null;
							} else {
	                         		
        	row2.FECHACITA = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 5) {
								row2.TIPO_CITA = null;
							} else {
	                         		
        	row2.TIPO_CITA = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 6) {
								row2.ESPECIALIDAD = null;
							} else {
	                         		
        	row2.ESPECIALIDAD = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 7) {
								row2.SIGLA_UNIDAD_ORGANIZACIONAL = null;
							} else {
	                         		
        	row2.SIGLA_UNIDAD_ORGANIZACIONAL = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 8) {
								row2.PROFESIONAL = null;
							} else {
	                         		
        	row2.PROFESIONAL = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 9) {
								row2.PACIENTE = null;
							} else {
	                         		
        	row2.PACIENTE = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 9, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 10) {
								row2.CELULAR = null;
							} else {
	                         		
        	row2.CELULAR = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 10, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 11) {
								row2.EMAIL = null;
							} else {
	                         		
        	row2.EMAIL = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 11, false);
		                    }
					




 



/**
 * [tOracleInput_1 begin ] stop
 */
	
	/**
	 * [tOracleInput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 


	tos_count_tOracleInput_1++;

/**
 * [tOracleInput_1 main ] stop
 */
	
	/**
	 * [tOracleInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					

    
row8.CitaId = row2.ID;
row8.RecordatorioExitoso = "0";
row8.SmsErrorCode = 0;
row8.SmsErrorBody = "";

// System.out.println("Recordando CitaId: " + row8.CitaId);

String mensajeHoraCita = "";
if (row2.TIPO_CITA == "Extra")
{
    mensajeHoraCita = row2.FECHACITA + " EXTRA";
}
else
{
    mensajeHoraCita = row2.FECHACITA;
}

if(row2.EMAIL != null && !row2.EMAIL.trim().isEmpty()) 
{

    row8.SendMail = "1";
    int hora = Integer.parseInt(TalendDate.getDate("HH"));
    String mensajeTiempo = "";

    if (hora >= 0 && hora < 12) { mensajeTiempo = "Buenos días"; }
    if (hora >= 12 && hora < 19) { mensajeTiempo = "Buenas tardes"; }
    if (hora >= 19 && hora < 24) { mensajeTiempo = "Buenas noches"; }


                
    String mensajeBodyGenerado = "Señor(a) usuario " + row2.SIGLADOC + row2.DOCUMENTO + " le recordamos que tiene una cita el: " + mensajeHoraCita + ", en: " 	
        + row2.SIGLA_UNIDAD_ORGANIZACIONAL + ", con el profesional: " 
        + row2.PROFESIONAL + ", y especialidad: " + row2.ESPECIALIDAD;

    row8.MensajeEmail = mensajeBodyGenerado;
    row8.TiempoCita = mensajeTiempo;
    row8.PacienteCita = row2.PACIENTE;
    row8.EmailTo = row2.EMAIL;
	
}else{
	row8.SendMail = "0";
    row8.MensajeEmail = "";
    row8.TiempoCita = "";
    row8.PacienteCita = "";
    row8.EmailTo = "";
}


if(row2.CELULAR != null && !row2.CELULAR.trim().isEmpty()) 
{

    row8.SendSms = "1";
                
    String mensajeBodyGenerado = "SALUD.SIS Señor(a) " + row2.SIGLADOC + row2.DOCUMENTO + " le recordamos que tiene una cita el " + mensajeHoraCita + " de " + row2.ESPECIALIDAD +
                                 " en " + row2.SIGLA_UNIDAD_ORGANIZACIONAL + " con " + row2.PROFESIONAL;

    // Limitamos el mensaje a 160 carcateres
    row8.MensajeSms = Utils.firstNChars(mensajeBodyGenerado, 160);
    row8.SmsTo = "57"+row2.CELULAR;
    
    
    if ("basic".equals(context.SmsAuthProvider)) {
     	row8.SmsBody = "{"+
                   "\"from\" : \"SALUD.SIS\","+
                   "\"to\" :  [ \"" + row8.SmsTo + "\" ],"+
                   "\"text\" : \"" + row8.MensajeSms + "\"" +
                   "}";
   	} else {
    	row8.SmsBody = "{"+
                   "\"title\" : \"ETL-RecordatorioCitas\","+
                   "\"sender\" : \"SALUD\","+
                   "\"to\" : \"" + row8.SmsTo + "\"" + "," +
                   "\"text\" : \"" + row8.MensajeSms + "\"" +
                   "}";
}
    

    
	//System.out.println("JsonBody: " + row8.SmsBody);
}else{
	row8.SendSms = "0";
    row8.MensajeSms = "";
    row8.SmsTo = "";
    row8.SmsBody = "";
}


//context.SendSms.equals("1")
// context.SendMail.equals("1")
    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					



    
		row8Struct oneRow_tHashOutput_1 = new row8Struct();
				
					oneRow_tHashOutput_1.CitaId = row8.CitaId;
					oneRow_tHashOutput_1.RecordatorioExitoso = row8.RecordatorioExitoso;
					oneRow_tHashOutput_1.SmsErrorCode = row8.SmsErrorCode;
					oneRow_tHashOutput_1.SmsErrorBody = row8.SmsErrorBody;
					oneRow_tHashOutput_1.SendMail = row8.SendMail;
					oneRow_tHashOutput_1.MensajeEmail = row8.MensajeEmail;
					oneRow_tHashOutput_1.TiempoCita = row8.TiempoCita;
					oneRow_tHashOutput_1.PacienteCita = row8.PacienteCita;
					oneRow_tHashOutput_1.EmailTo = row8.EmailTo;
					oneRow_tHashOutput_1.SendSms = row8.SendSms;
					oneRow_tHashOutput_1.MensajeSms = row8.MensajeSms;
					oneRow_tHashOutput_1.SmsTo = row8.SmsTo;
					oneRow_tHashOutput_1.SmsBody = row8.SmsBody;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;

 
     row9 = row8;


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */

	
	/**
	 * [tFilterRow_1 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					

          row10 = null;
    Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("||");    
        ope_tFilterRow_1.matches((row9.SendMail == null? false : row9.SendMail.matches("1") == true)
                       , " SendMail.matches(\"1\") == true failed");    
        ope_tFilterRow_1.matches((row9.SendSms == null? false : row9.SendSms.matches("1") == true)
                       , " SendSms.matches(\"1\") == true failed");
    
    if (ope_tFilterRow_1.getMatchFlag()) {
              if(row10 == null){ 
                row10 = new row10Struct();
              }
               row10.CitaId = row9.CitaId;
               row10.RecordatorioExitoso = row9.RecordatorioExitoso;
               row10.SmsErrorCode = row9.SmsErrorCode;
               row10.SmsErrorBody = row9.SmsErrorBody;
               row10.SendMail = row9.SendMail;
               row10.MensajeEmail = row9.MensajeEmail;
               row10.TiempoCita = row9.TiempoCita;
               row10.PacienteCita = row9.PacienteCita;
               row10.EmailTo = row9.EmailTo;
               row10.SendSms = row9.SendSms;
               row10.MensajeSms = row9.MensajeSms;
               row10.SmsTo = row9.SmsTo;
               row10.SmsBody = row9.SmsBody;    
      nb_line_ok_tFilterRow_1++;
    } else {
      nb_line_reject_tFilterRow_1++;
    }

nb_line_tFilterRow_1++;

 


	tos_count_tFilterRow_1++;

/**
 * [tFilterRow_1 main ] stop
 */
	
	/**
	 * [tFilterRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";
	
	

 



/**
 * [tFilterRow_1 process_data_begin ] stop
 */
// Start of branch "row10"
if(row10 != null) { 



	
	/**
	 * [tHashOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					



    
		row10Struct oneRow_tHashOutput_2 = new row10Struct();
				
					oneRow_tHashOutput_2.CitaId = row10.CitaId;
					oneRow_tHashOutput_2.RecordatorioExitoso = row10.RecordatorioExitoso;
					oneRow_tHashOutput_2.SmsErrorCode = row10.SmsErrorCode;
					oneRow_tHashOutput_2.SmsErrorBody = row10.SmsErrorBody;
					oneRow_tHashOutput_2.SendMail = row10.SendMail;
					oneRow_tHashOutput_2.MensajeEmail = row10.MensajeEmail;
					oneRow_tHashOutput_2.TiempoCita = row10.TiempoCita;
					oneRow_tHashOutput_2.PacienteCita = row10.PacienteCita;
					oneRow_tHashOutput_2.EmailTo = row10.EmailTo;
					oneRow_tHashOutput_2.SendSms = row10.SendSms;
					oneRow_tHashOutput_2.MensajeSms = row10.MensajeSms;
					oneRow_tHashOutput_2.SmsTo = row10.SmsTo;
					oneRow_tHashOutput_2.SmsBody = row10.SmsBody;
		
        tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
        nb_line_tHashOutput_2 ++;

 


	tos_count_tHashOutput_2++;

/**
 * [tHashOutput_2 main ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_end ] stop
 */

} // End of branch "row10"




	
	/**
	 * [tFilterRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";
	
	

 



/**
 * [tFilterRow_1 process_data_end ] stop
 */



	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

}
}finally{
	if (rs_tOracleInput_1 != null) {
		rs_tOracleInput_1.close();
	}
	if (stmt_tOracleInput_1 != null) {
		stmt_tOracleInput_1.close();
	}
}

globalMap.put("tOracleInput_1_NB_LINE",nb_line_tOracleInput_1);
 

ok_Hash.put("tOracleInput_1", true);
end_Hash.put("tOracleInput_1", System.currentTimeMillis());




/**
 * [tOracleInput_1 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());




/**
 * [tJavaRow_2 end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());




/**
 * [tHashOutput_1 end ] stop
 */

	
	/**
	 * [tFilterRow_1 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";
	
	
    globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tFilterRow_1", true);
end_Hash.put("tFilterRow_1", System.currentTimeMillis());




/**
 * [tFilterRow_1 end ] stop
 */

	
	/**
	 * [tHashOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tHashOutput_2", true);
end_Hash.put("tHashOutput_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tHashInput_1Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tHashInput_2Process(globalMap);



/**
 * [tHashOutput_2 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 finally ] stop
 */

	
	/**
	 * [tFilterRow_1 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";
	
	

 



/**
 * [tFilterRow_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];
    static byte[] commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];

	
			    public String Body;

				public String getBody () {
					return this.Body;
				}

				public Boolean BodyIsNullable(){
				    return true;
				}
				public Boolean BodyIsKey(){
				    return false;
				}
				public Integer BodyLength(){
				    return 0;
				}
				public Integer BodyPrecision(){
				    return 0;
				}
				public String BodyDefault(){
				
					return null;
				
				}
				public String BodyComment(){
				
				    return null;
				
				}
				public String BodyPattern(){
				
				    return null;
				
				}
				public String BodyOriginalDbColumnName(){
				
					return "Body";
				
				}

				
			    public Integer ERROR_CODE;

				public Integer getERROR_CODE () {
					return this.ERROR_CODE;
				}

				public Boolean ERROR_CODEIsNullable(){
				    return true;
				}
				public Boolean ERROR_CODEIsKey(){
				    return false;
				}
				public Integer ERROR_CODELength(){
				    return 0;
				}
				public Integer ERROR_CODEPrecision(){
				    return 0;
				}
				public String ERROR_CODEDefault(){
				
					return "";
				
				}
				public String ERROR_CODEComment(){
				
				    return null;
				
				}
				public String ERROR_CODEPattern(){
				
				    return null;
				
				}
				public String ERROR_CODEOriginalDbColumnName(){
				
					return "ERROR_CODE";
				
				}

				
			    public String RecordatorioExitoso;

				public String getRecordatorioExitoso () {
					return this.RecordatorioExitoso;
				}

				public Boolean RecordatorioExitosoIsNullable(){
				    return false;
				}
				public Boolean RecordatorioExitosoIsKey(){
				    return false;
				}
				public Integer RecordatorioExitosoLength(){
				    return null;
				}
				public Integer RecordatorioExitosoPrecision(){
				    return null;
				}
				public String RecordatorioExitosoDefault(){
				
					return null;
				
				}
				public String RecordatorioExitosoComment(){
				
				    return "";
				
				}
				public String RecordatorioExitosoPattern(){
				
					return "";
				
				}
				public String RecordatorioExitosoOriginalDbColumnName(){
				
					return "RecordatorioExitoso";
				
				}

				
			    public BigDecimal CitaId;

				public BigDecimal getCitaId () {
					return this.CitaId;
				}

				public Boolean CitaIdIsNullable(){
				    return false;
				}
				public Boolean CitaIdIsKey(){
				    return false;
				}
				public Integer CitaIdLength(){
				    return null;
				}
				public Integer CitaIdPrecision(){
				    return null;
				}
				public String CitaIdDefault(){
				
					return null;
				
				}
				public String CitaIdComment(){
				
				    return "";
				
				}
				public String CitaIdPattern(){
				
					return "";
				
				}
				public String CitaIdOriginalDbColumnName(){
				
					return "CitaId";
				
				}

				
			    public String SmsTo;

				public String getSmsTo () {
					return this.SmsTo;
				}

				public Boolean SmsToIsNullable(){
				    return false;
				}
				public Boolean SmsToIsKey(){
				    return false;
				}
				public Integer SmsToLength(){
				    return null;
				}
				public Integer SmsToPrecision(){
				    return null;
				}
				public String SmsToDefault(){
				
					return null;
				
				}
				public String SmsToComment(){
				
				    return "";
				
				}
				public String SmsToPattern(){
				
					return "";
				
				}
				public String SmsToOriginalDbColumnName(){
				
					return "SmsTo";
				
				}

				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}

				public Boolean errorMessageIsNullable(){
				    return true;
				}
				public Boolean errorMessageIsKey(){
				    return false;
				}
				public Integer errorMessageLength(){
				    return 255;
				}
				public Integer errorMessagePrecision(){
				    return 0;
				}
				public String errorMessageDefault(){
				
					return null;
				
				}
				public String errorMessageComment(){
				
				    return null;
				
				}
				public String errorMessagePattern(){
				
				    return null;
				
				}
				public String errorMessageOriginalDbColumnName(){
				
					return "errorMessage";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
					this.Body = readString(dis);
					
						this.ERROR_CODE = readInteger(dis);
					
					this.RecordatorioExitoso = readString(dis);
					
						this.CitaId = (BigDecimal) dis.readObject();
					
					this.SmsTo = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
					this.Body = readString(dis);
					
						this.ERROR_CODE = readInteger(dis);
					
					this.RecordatorioExitoso = readString(dis);
					
						this.CitaId = (BigDecimal) dis.readObject();
					
					this.SmsTo = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Body,dos);
					
					// Integer
				
						writeInteger(this.ERROR_CODE,dos);
					
					// String
				
						writeString(this.RecordatorioExitoso,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CitaId);
					
					// String
				
						writeString(this.SmsTo,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Body,dos);
					
					// Integer
				
						writeInteger(this.ERROR_CODE,dos);
					
					// String
				
						writeString(this.RecordatorioExitoso,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CitaId);
					
					// String
				
						writeString(this.SmsTo,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Body="+Body);
		sb.append(",ERROR_CODE="+String.valueOf(ERROR_CODE));
		sb.append(",RecordatorioExitoso="+RecordatorioExitoso);
		sb.append(",CitaId="+String.valueOf(CitaId));
		sb.append(",SmsTo="+SmsTo);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];
    static byte[] commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String RECORDATORIO;

				public String getRECORDATORIO () {
					return this.RECORDATORIO;
				}

				public Boolean RECORDATORIOIsNullable(){
				    return false;
				}
				public Boolean RECORDATORIOIsKey(){
				    return false;
				}
				public Integer RECORDATORIOLength(){
				    return null;
				}
				public Integer RECORDATORIOPrecision(){
				    return null;
				}
				public String RECORDATORIODefault(){
				
					return null;
				
				}
				public String RECORDATORIOComment(){
				
				    return "";
				
				}
				public String RECORDATORIOPattern(){
				
					return "";
				
				}
				public String RECORDATORIOOriginalDbColumnName(){
				
					return "RECORDATORIO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row6Struct other = (row6Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row6Struct other) {

		other.ID = this.ID;
	            other.RECORDATORIO = this.RECORDATORIO;
	            
	}

	public void copyKeysDataTo(row6Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.RECORDATORIO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.RECORDATORIO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.RECORDATORIO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.RECORDATORIO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECORDATORIO="+RECORDATORIO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];
    static byte[] commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String RECORDATORIO;

				public String getRECORDATORIO () {
					return this.RECORDATORIO;
				}

				public Boolean RECORDATORIOIsNullable(){
				    return false;
				}
				public Boolean RECORDATORIOIsKey(){
				    return false;
				}
				public Integer RECORDATORIOLength(){
				    return null;
				}
				public Integer RECORDATORIOPrecision(){
				    return null;
				}
				public String RECORDATORIODefault(){
				
					return null;
				
				}
				public String RECORDATORIOComment(){
				
				    return "";
				
				}
				public String RECORDATORIOPattern(){
				
					return "";
				
				}
				public String RECORDATORIOOriginalDbColumnName(){
				
					return "RECORDATORIO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row5Struct other = (row5Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row5Struct other) {

		other.ID = this.ID;
	            other.RECORDATORIO = this.RECORDATORIO;
	            
	}

	public void copyKeysDataTo(row5Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.RECORDATORIO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.RECORDATORIO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.RECORDATORIO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.RECORDATORIO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECORDATORIO="+RECORDATORIO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
    final static byte[] commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];
    static byte[] commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];

	
			    public String Body;

				public String getBody () {
					return this.Body;
				}

				public Boolean BodyIsNullable(){
				    return true;
				}
				public Boolean BodyIsKey(){
				    return false;
				}
				public Integer BodyLength(){
				    return 0;
				}
				public Integer BodyPrecision(){
				    return 0;
				}
				public String BodyDefault(){
				
					return null;
				
				}
				public String BodyComment(){
				
				    return null;
				
				}
				public String BodyPattern(){
				
				    return null;
				
				}
				public String BodyOriginalDbColumnName(){
				
					return "Body";
				
				}

				
			    public Integer ERROR_CODE;

				public Integer getERROR_CODE () {
					return this.ERROR_CODE;
				}

				public Boolean ERROR_CODEIsNullable(){
				    return true;
				}
				public Boolean ERROR_CODEIsKey(){
				    return false;
				}
				public Integer ERROR_CODELength(){
				    return 0;
				}
				public Integer ERROR_CODEPrecision(){
				    return 0;
				}
				public String ERROR_CODEDefault(){
				
					return "";
				
				}
				public String ERROR_CODEComment(){
				
				    return null;
				
				}
				public String ERROR_CODEPattern(){
				
				    return null;
				
				}
				public String ERROR_CODEOriginalDbColumnName(){
				
					return "ERROR_CODE";
				
				}

				
			    public String RecordatorioExitoso;

				public String getRecordatorioExitoso () {
					return this.RecordatorioExitoso;
				}

				public Boolean RecordatorioExitosoIsNullable(){
				    return false;
				}
				public Boolean RecordatorioExitosoIsKey(){
				    return false;
				}
				public Integer RecordatorioExitosoLength(){
				    return null;
				}
				public Integer RecordatorioExitosoPrecision(){
				    return null;
				}
				public String RecordatorioExitosoDefault(){
				
					return null;
				
				}
				public String RecordatorioExitosoComment(){
				
				    return "";
				
				}
				public String RecordatorioExitosoPattern(){
				
					return "";
				
				}
				public String RecordatorioExitosoOriginalDbColumnName(){
				
					return "RecordatorioExitoso";
				
				}

				
			    public BigDecimal CitaId;

				public BigDecimal getCitaId () {
					return this.CitaId;
				}

				public Boolean CitaIdIsNullable(){
				    return false;
				}
				public Boolean CitaIdIsKey(){
				    return false;
				}
				public Integer CitaIdLength(){
				    return null;
				}
				public Integer CitaIdPrecision(){
				    return null;
				}
				public String CitaIdDefault(){
				
					return null;
				
				}
				public String CitaIdComment(){
				
				    return "";
				
				}
				public String CitaIdPattern(){
				
					return "";
				
				}
				public String CitaIdOriginalDbColumnName(){
				
					return "CitaId";
				
				}

				
			    public String SmsTo;

				public String getSmsTo () {
					return this.SmsTo;
				}

				public Boolean SmsToIsNullable(){
				    return false;
				}
				public Boolean SmsToIsKey(){
				    return false;
				}
				public Integer SmsToLength(){
				    return null;
				}
				public Integer SmsToPrecision(){
				    return null;
				}
				public String SmsToDefault(){
				
					return null;
				
				}
				public String SmsToComment(){
				
				    return "";
				
				}
				public String SmsToPattern(){
				
					return "";
				
				}
				public String SmsToOriginalDbColumnName(){
				
					return "SmsTo";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
					this.Body = readString(dis);
					
						this.ERROR_CODE = readInteger(dis);
					
					this.RecordatorioExitoso = readString(dis);
					
						this.CitaId = (BigDecimal) dis.readObject();
					
					this.SmsTo = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
					this.Body = readString(dis);
					
						this.ERROR_CODE = readInteger(dis);
					
					this.RecordatorioExitoso = readString(dis);
					
						this.CitaId = (BigDecimal) dis.readObject();
					
					this.SmsTo = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Body,dos);
					
					// Integer
				
						writeInteger(this.ERROR_CODE,dos);
					
					// String
				
						writeString(this.RecordatorioExitoso,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CitaId);
					
					// String
				
						writeString(this.SmsTo,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Body,dos);
					
					// Integer
				
						writeInteger(this.ERROR_CODE,dos);
					
					// String
				
						writeString(this.RecordatorioExitoso,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CitaId);
					
					// String
				
						writeString(this.SmsTo,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Body="+Body);
		sb.append(",ERROR_CODE="+String.valueOf(ERROR_CODE));
		sb.append(",RecordatorioExitoso="+RecordatorioExitoso);
		sb.append(",CitaId="+String.valueOf(CitaId));
		sb.append(",SmsTo="+SmsTo);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];
    static byte[] commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];

	
			    public String Body;

				public String getBody () {
					return this.Body;
				}

				public Boolean BodyIsNullable(){
				    return true;
				}
				public Boolean BodyIsKey(){
				    return false;
				}
				public Integer BodyLength(){
				    return 0;
				}
				public Integer BodyPrecision(){
				    return 0;
				}
				public String BodyDefault(){
				
					return null;
				
				}
				public String BodyComment(){
				
				    return null;
				
				}
				public String BodyPattern(){
				
				    return null;
				
				}
				public String BodyOriginalDbColumnName(){
				
					return "Body";
				
				}

				
			    public Integer ERROR_CODE;

				public Integer getERROR_CODE () {
					return this.ERROR_CODE;
				}

				public Boolean ERROR_CODEIsNullable(){
				    return true;
				}
				public Boolean ERROR_CODEIsKey(){
				    return false;
				}
				public Integer ERROR_CODELength(){
				    return 0;
				}
				public Integer ERROR_CODEPrecision(){
				    return 0;
				}
				public String ERROR_CODEDefault(){
				
					return "";
				
				}
				public String ERROR_CODEComment(){
				
				    return null;
				
				}
				public String ERROR_CODEPattern(){
				
				    return null;
				
				}
				public String ERROR_CODEOriginalDbColumnName(){
				
					return "ERROR_CODE";
				
				}

				
			    public String RecordatorioExitoso;

				public String getRecordatorioExitoso () {
					return this.RecordatorioExitoso;
				}

				public Boolean RecordatorioExitosoIsNullable(){
				    return false;
				}
				public Boolean RecordatorioExitosoIsKey(){
				    return false;
				}
				public Integer RecordatorioExitosoLength(){
				    return null;
				}
				public Integer RecordatorioExitosoPrecision(){
				    return null;
				}
				public String RecordatorioExitosoDefault(){
				
					return null;
				
				}
				public String RecordatorioExitosoComment(){
				
				    return "";
				
				}
				public String RecordatorioExitosoPattern(){
				
					return "";
				
				}
				public String RecordatorioExitosoOriginalDbColumnName(){
				
					return "RecordatorioExitoso";
				
				}

				
			    public BigDecimal CitaId;

				public BigDecimal getCitaId () {
					return this.CitaId;
				}

				public Boolean CitaIdIsNullable(){
				    return false;
				}
				public Boolean CitaIdIsKey(){
				    return false;
				}
				public Integer CitaIdLength(){
				    return null;
				}
				public Integer CitaIdPrecision(){
				    return null;
				}
				public String CitaIdDefault(){
				
					return null;
				
				}
				public String CitaIdComment(){
				
				    return "";
				
				}
				public String CitaIdPattern(){
				
					return "";
				
				}
				public String CitaIdOriginalDbColumnName(){
				
					return "CitaId";
				
				}

				
			    public String SmsTo;

				public String getSmsTo () {
					return this.SmsTo;
				}

				public Boolean SmsToIsNullable(){
				    return false;
				}
				public Boolean SmsToIsKey(){
				    return false;
				}
				public Integer SmsToLength(){
				    return null;
				}
				public Integer SmsToPrecision(){
				    return null;
				}
				public String SmsToDefault(){
				
					return null;
				
				}
				public String SmsToComment(){
				
				    return "";
				
				}
				public String SmsToPattern(){
				
					return "";
				
				}
				public String SmsToOriginalDbColumnName(){
				
					return "SmsTo";
				
				}

				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}

				public Boolean errorMessageIsNullable(){
				    return true;
				}
				public Boolean errorMessageIsKey(){
				    return false;
				}
				public Integer errorMessageLength(){
				    return 255;
				}
				public Integer errorMessagePrecision(){
				    return 0;
				}
				public String errorMessageDefault(){
				
					return null;
				
				}
				public String errorMessageComment(){
				
				    return null;
				
				}
				public String errorMessagePattern(){
				
				    return null;
				
				}
				public String errorMessageOriginalDbColumnName(){
				
					return "errorMessage";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
					this.Body = readString(dis);
					
						this.ERROR_CODE = readInteger(dis);
					
					this.RecordatorioExitoso = readString(dis);
					
						this.CitaId = (BigDecimal) dis.readObject();
					
					this.SmsTo = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
					this.Body = readString(dis);
					
						this.ERROR_CODE = readInteger(dis);
					
					this.RecordatorioExitoso = readString(dis);
					
						this.CitaId = (BigDecimal) dis.readObject();
					
					this.SmsTo = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Body,dos);
					
					// Integer
				
						writeInteger(this.ERROR_CODE,dos);
					
					// String
				
						writeString(this.RecordatorioExitoso,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CitaId);
					
					// String
				
						writeString(this.SmsTo,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Body,dos);
					
					// Integer
				
						writeInteger(this.ERROR_CODE,dos);
					
					// String
				
						writeString(this.RecordatorioExitoso,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CitaId);
					
					// String
				
						writeString(this.SmsTo,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Body="+Body);
		sb.append(",ERROR_CODE="+String.valueOf(ERROR_CODE));
		sb.append(",RecordatorioExitoso="+RecordatorioExitoso);
		sb.append(",CitaId="+String.valueOf(CitaId));
		sb.append(",SmsTo="+SmsTo);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];
    static byte[] commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];

	
			    public String Body;

				public String getBody () {
					return this.Body;
				}

				public Boolean BodyIsNullable(){
				    return true;
				}
				public Boolean BodyIsKey(){
				    return false;
				}
				public Integer BodyLength(){
				    return 0;
				}
				public Integer BodyPrecision(){
				    return 0;
				}
				public String BodyDefault(){
				
					return null;
				
				}
				public String BodyComment(){
				
				    return null;
				
				}
				public String BodyPattern(){
				
				    return null;
				
				}
				public String BodyOriginalDbColumnName(){
				
					return "Body";
				
				}

				
			    public Integer ERROR_CODE;

				public Integer getERROR_CODE () {
					return this.ERROR_CODE;
				}

				public Boolean ERROR_CODEIsNullable(){
				    return true;
				}
				public Boolean ERROR_CODEIsKey(){
				    return false;
				}
				public Integer ERROR_CODELength(){
				    return 0;
				}
				public Integer ERROR_CODEPrecision(){
				    return 0;
				}
				public String ERROR_CODEDefault(){
				
					return "";
				
				}
				public String ERROR_CODEComment(){
				
				    return null;
				
				}
				public String ERROR_CODEPattern(){
				
				    return null;
				
				}
				public String ERROR_CODEOriginalDbColumnName(){
				
					return "ERROR_CODE";
				
				}

				
			    public String RecordatorioExitoso;

				public String getRecordatorioExitoso () {
					return this.RecordatorioExitoso;
				}

				public Boolean RecordatorioExitosoIsNullable(){
				    return false;
				}
				public Boolean RecordatorioExitosoIsKey(){
				    return false;
				}
				public Integer RecordatorioExitosoLength(){
				    return null;
				}
				public Integer RecordatorioExitosoPrecision(){
				    return null;
				}
				public String RecordatorioExitosoDefault(){
				
					return null;
				
				}
				public String RecordatorioExitosoComment(){
				
				    return "";
				
				}
				public String RecordatorioExitosoPattern(){
				
					return "";
				
				}
				public String RecordatorioExitosoOriginalDbColumnName(){
				
					return "RecordatorioExitoso";
				
				}

				
			    public BigDecimal CitaId;

				public BigDecimal getCitaId () {
					return this.CitaId;
				}

				public Boolean CitaIdIsNullable(){
				    return false;
				}
				public Boolean CitaIdIsKey(){
				    return false;
				}
				public Integer CitaIdLength(){
				    return null;
				}
				public Integer CitaIdPrecision(){
				    return null;
				}
				public String CitaIdDefault(){
				
					return null;
				
				}
				public String CitaIdComment(){
				
				    return "";
				
				}
				public String CitaIdPattern(){
				
					return "";
				
				}
				public String CitaIdOriginalDbColumnName(){
				
					return "CitaId";
				
				}

				
			    public String SmsTo;

				public String getSmsTo () {
					return this.SmsTo;
				}

				public Boolean SmsToIsNullable(){
				    return false;
				}
				public Boolean SmsToIsKey(){
				    return false;
				}
				public Integer SmsToLength(){
				    return null;
				}
				public Integer SmsToPrecision(){
				    return null;
				}
				public String SmsToDefault(){
				
					return null;
				
				}
				public String SmsToComment(){
				
				    return "";
				
				}
				public String SmsToPattern(){
				
					return "";
				
				}
				public String SmsToOriginalDbColumnName(){
				
					return "SmsTo";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
					this.Body = readString(dis);
					
						this.ERROR_CODE = readInteger(dis);
					
					this.RecordatorioExitoso = readString(dis);
					
						this.CitaId = (BigDecimal) dis.readObject();
					
					this.SmsTo = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
					this.Body = readString(dis);
					
						this.ERROR_CODE = readInteger(dis);
					
					this.RecordatorioExitoso = readString(dis);
					
						this.CitaId = (BigDecimal) dis.readObject();
					
					this.SmsTo = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Body,dos);
					
					// Integer
				
						writeInteger(this.ERROR_CODE,dos);
					
					// String
				
						writeString(this.RecordatorioExitoso,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CitaId);
					
					// String
				
						writeString(this.SmsTo,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Body,dos);
					
					// Integer
				
						writeInteger(this.ERROR_CODE,dos);
					
					// String
				
						writeString(this.RecordatorioExitoso,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CitaId);
					
					// String
				
						writeString(this.SmsTo,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Body="+Body);
		sb.append(",ERROR_CODE="+String.valueOf(ERROR_CODE));
		sb.append(",RecordatorioExitoso="+RecordatorioExitoso);
		sb.append(",CitaId="+String.valueOf(CitaId));
		sb.append(",SmsTo="+SmsTo);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];
    static byte[] commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];

	
			    public String Body;

				public String getBody () {
					return this.Body;
				}

				public Boolean BodyIsNullable(){
				    return true;
				}
				public Boolean BodyIsKey(){
				    return false;
				}
				public Integer BodyLength(){
				    return 0;
				}
				public Integer BodyPrecision(){
				    return 0;
				}
				public String BodyDefault(){
				
					return null;
				
				}
				public String BodyComment(){
				
				    return null;
				
				}
				public String BodyPattern(){
				
				    return null;
				
				}
				public String BodyOriginalDbColumnName(){
				
					return "Body";
				
				}

				
			    public Integer ERROR_CODE;

				public Integer getERROR_CODE () {
					return this.ERROR_CODE;
				}

				public Boolean ERROR_CODEIsNullable(){
				    return true;
				}
				public Boolean ERROR_CODEIsKey(){
				    return false;
				}
				public Integer ERROR_CODELength(){
				    return 0;
				}
				public Integer ERROR_CODEPrecision(){
				    return 0;
				}
				public String ERROR_CODEDefault(){
				
					return "";
				
				}
				public String ERROR_CODEComment(){
				
				    return null;
				
				}
				public String ERROR_CODEPattern(){
				
				    return null;
				
				}
				public String ERROR_CODEOriginalDbColumnName(){
				
					return "ERROR_CODE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
					this.Body = readString(dis);
					
						this.ERROR_CODE = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
					this.Body = readString(dis);
					
						this.ERROR_CODE = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Body,dos);
					
					// Integer
				
						writeInteger(this.ERROR_CODE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Body,dos);
					
					// Integer
				
						writeInteger(this.ERROR_CODE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Body="+Body);
		sb.append(",ERROR_CODE="+String.valueOf(ERROR_CODE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];
    static byte[] commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];

	
			    public BigDecimal CitaId;

				public BigDecimal getCitaId () {
					return this.CitaId;
				}

				public Boolean CitaIdIsNullable(){
				    return false;
				}
				public Boolean CitaIdIsKey(){
				    return false;
				}
				public Integer CitaIdLength(){
				    return 0;
				}
				public Integer CitaIdPrecision(){
				    return null;
				}
				public String CitaIdDefault(){
				
					return "";
				
				}
				public String CitaIdComment(){
				
				    return "";
				
				}
				public String CitaIdPattern(){
				
					return "";
				
				}
				public String CitaIdOriginalDbColumnName(){
				
					return "CitaId";
				
				}

				
			    public String RecordatorioExitoso;

				public String getRecordatorioExitoso () {
					return this.RecordatorioExitoso;
				}

				public Boolean RecordatorioExitosoIsNullable(){
				    return false;
				}
				public Boolean RecordatorioExitosoIsKey(){
				    return false;
				}
				public Integer RecordatorioExitosoLength(){
				    return null;
				}
				public Integer RecordatorioExitosoPrecision(){
				    return null;
				}
				public String RecordatorioExitosoDefault(){
				
					return null;
				
				}
				public String RecordatorioExitosoComment(){
				
				    return "";
				
				}
				public String RecordatorioExitosoPattern(){
				
					return "";
				
				}
				public String RecordatorioExitosoOriginalDbColumnName(){
				
					return "RecordatorioExitoso";
				
				}

				
			    public int SmsErrorCode;

				public int getSmsErrorCode () {
					return this.SmsErrorCode;
				}

				public Boolean SmsErrorCodeIsNullable(){
				    return false;
				}
				public Boolean SmsErrorCodeIsKey(){
				    return false;
				}
				public Integer SmsErrorCodeLength(){
				    return null;
				}
				public Integer SmsErrorCodePrecision(){
				    return null;
				}
				public String SmsErrorCodeDefault(){
				
					return "";
				
				}
				public String SmsErrorCodeComment(){
				
				    return "";
				
				}
				public String SmsErrorCodePattern(){
				
					return "";
				
				}
				public String SmsErrorCodeOriginalDbColumnName(){
				
					return "SmsErrorCode";
				
				}

				
			    public String SmsErrorBody;

				public String getSmsErrorBody () {
					return this.SmsErrorBody;
				}

				public Boolean SmsErrorBodyIsNullable(){
				    return false;
				}
				public Boolean SmsErrorBodyIsKey(){
				    return false;
				}
				public Integer SmsErrorBodyLength(){
				    return null;
				}
				public Integer SmsErrorBodyPrecision(){
				    return null;
				}
				public String SmsErrorBodyDefault(){
				
					return null;
				
				}
				public String SmsErrorBodyComment(){
				
				    return "";
				
				}
				public String SmsErrorBodyPattern(){
				
					return "";
				
				}
				public String SmsErrorBodyOriginalDbColumnName(){
				
					return "SmsErrorBody";
				
				}

				
			    public String SendMail;

				public String getSendMail () {
					return this.SendMail;
				}

				public Boolean SendMailIsNullable(){
				    return false;
				}
				public Boolean SendMailIsKey(){
				    return false;
				}
				public Integer SendMailLength(){
				    return null;
				}
				public Integer SendMailPrecision(){
				    return null;
				}
				public String SendMailDefault(){
				
					return null;
				
				}
				public String SendMailComment(){
				
				    return "";
				
				}
				public String SendMailPattern(){
				
					return "";
				
				}
				public String SendMailOriginalDbColumnName(){
				
					return "SendMail";
				
				}

				
			    public String MensajeEmail;

				public String getMensajeEmail () {
					return this.MensajeEmail;
				}

				public Boolean MensajeEmailIsNullable(){
				    return false;
				}
				public Boolean MensajeEmailIsKey(){
				    return false;
				}
				public Integer MensajeEmailLength(){
				    return null;
				}
				public Integer MensajeEmailPrecision(){
				    return null;
				}
				public String MensajeEmailDefault(){
				
					return null;
				
				}
				public String MensajeEmailComment(){
				
				    return "";
				
				}
				public String MensajeEmailPattern(){
				
					return "";
				
				}
				public String MensajeEmailOriginalDbColumnName(){
				
					return "MensajeEmail";
				
				}

				
			    public String TiempoCita;

				public String getTiempoCita () {
					return this.TiempoCita;
				}

				public Boolean TiempoCitaIsNullable(){
				    return false;
				}
				public Boolean TiempoCitaIsKey(){
				    return false;
				}
				public Integer TiempoCitaLength(){
				    return null;
				}
				public Integer TiempoCitaPrecision(){
				    return null;
				}
				public String TiempoCitaDefault(){
				
					return null;
				
				}
				public String TiempoCitaComment(){
				
				    return "";
				
				}
				public String TiempoCitaPattern(){
				
					return "";
				
				}
				public String TiempoCitaOriginalDbColumnName(){
				
					return "TiempoCita";
				
				}

				
			    public String PacienteCita;

				public String getPacienteCita () {
					return this.PacienteCita;
				}

				public Boolean PacienteCitaIsNullable(){
				    return false;
				}
				public Boolean PacienteCitaIsKey(){
				    return false;
				}
				public Integer PacienteCitaLength(){
				    return null;
				}
				public Integer PacienteCitaPrecision(){
				    return null;
				}
				public String PacienteCitaDefault(){
				
					return null;
				
				}
				public String PacienteCitaComment(){
				
				    return "";
				
				}
				public String PacienteCitaPattern(){
				
					return "";
				
				}
				public String PacienteCitaOriginalDbColumnName(){
				
					return "PacienteCita";
				
				}

				
			    public String EmailTo;

				public String getEmailTo () {
					return this.EmailTo;
				}

				public Boolean EmailToIsNullable(){
				    return false;
				}
				public Boolean EmailToIsKey(){
				    return false;
				}
				public Integer EmailToLength(){
				    return null;
				}
				public Integer EmailToPrecision(){
				    return null;
				}
				public String EmailToDefault(){
				
					return null;
				
				}
				public String EmailToComment(){
				
				    return "";
				
				}
				public String EmailToPattern(){
				
					return "";
				
				}
				public String EmailToOriginalDbColumnName(){
				
					return "EmailTo";
				
				}

				
			    public String SendSms;

				public String getSendSms () {
					return this.SendSms;
				}

				public Boolean SendSmsIsNullable(){
				    return false;
				}
				public Boolean SendSmsIsKey(){
				    return false;
				}
				public Integer SendSmsLength(){
				    return null;
				}
				public Integer SendSmsPrecision(){
				    return null;
				}
				public String SendSmsDefault(){
				
					return null;
				
				}
				public String SendSmsComment(){
				
				    return "";
				
				}
				public String SendSmsPattern(){
				
					return "";
				
				}
				public String SendSmsOriginalDbColumnName(){
				
					return "SendSms";
				
				}

				
			    public String MensajeSms;

				public String getMensajeSms () {
					return this.MensajeSms;
				}

				public Boolean MensajeSmsIsNullable(){
				    return false;
				}
				public Boolean MensajeSmsIsKey(){
				    return false;
				}
				public Integer MensajeSmsLength(){
				    return null;
				}
				public Integer MensajeSmsPrecision(){
				    return null;
				}
				public String MensajeSmsDefault(){
				
					return null;
				
				}
				public String MensajeSmsComment(){
				
				    return "";
				
				}
				public String MensajeSmsPattern(){
				
					return "";
				
				}
				public String MensajeSmsOriginalDbColumnName(){
				
					return "MensajeSms";
				
				}

				
			    public String SmsTo;

				public String getSmsTo () {
					return this.SmsTo;
				}

				public Boolean SmsToIsNullable(){
				    return false;
				}
				public Boolean SmsToIsKey(){
				    return false;
				}
				public Integer SmsToLength(){
				    return null;
				}
				public Integer SmsToPrecision(){
				    return null;
				}
				public String SmsToDefault(){
				
					return null;
				
				}
				public String SmsToComment(){
				
				    return "";
				
				}
				public String SmsToPattern(){
				
					return "";
				
				}
				public String SmsToOriginalDbColumnName(){
				
					return "SmsTo";
				
				}

				
			    public String SmsBody;

				public String getSmsBody () {
					return this.SmsBody;
				}

				public Boolean SmsBodyIsNullable(){
				    return false;
				}
				public Boolean SmsBodyIsKey(){
				    return false;
				}
				public Integer SmsBodyLength(){
				    return null;
				}
				public Integer SmsBodyPrecision(){
				    return null;
				}
				public String SmsBodyDefault(){
				
					return null;
				
				}
				public String SmsBodyComment(){
				
				    return "";
				
				}
				public String SmsBodyPattern(){
				
					return "";
				
				}
				public String SmsBodyOriginalDbColumnName(){
				
					return "SmsBody";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
						this.CitaId = (BigDecimal) dis.readObject();
					
					this.RecordatorioExitoso = readString(dis);
					
			        this.SmsErrorCode = dis.readInt();
					
					this.SmsErrorBody = readString(dis);
					
					this.SendMail = readString(dis);
					
					this.MensajeEmail = readString(dis);
					
					this.TiempoCita = readString(dis);
					
					this.PacienteCita = readString(dis);
					
					this.EmailTo = readString(dis);
					
					this.SendSms = readString(dis);
					
					this.MensajeSms = readString(dis);
					
					this.SmsTo = readString(dis);
					
					this.SmsBody = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
						this.CitaId = (BigDecimal) dis.readObject();
					
					this.RecordatorioExitoso = readString(dis);
					
			        this.SmsErrorCode = dis.readInt();
					
					this.SmsErrorBody = readString(dis);
					
					this.SendMail = readString(dis);
					
					this.MensajeEmail = readString(dis);
					
					this.TiempoCita = readString(dis);
					
					this.PacienteCita = readString(dis);
					
					this.EmailTo = readString(dis);
					
					this.SendSms = readString(dis);
					
					this.MensajeSms = readString(dis);
					
					this.SmsTo = readString(dis);
					
					this.SmsBody = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.CitaId);
					
					// String
				
						writeString(this.RecordatorioExitoso,dos);
					
					// int
				
		            	dos.writeInt(this.SmsErrorCode);
					
					// String
				
						writeString(this.SmsErrorBody,dos);
					
					// String
				
						writeString(this.SendMail,dos);
					
					// String
				
						writeString(this.MensajeEmail,dos);
					
					// String
				
						writeString(this.TiempoCita,dos);
					
					// String
				
						writeString(this.PacienteCita,dos);
					
					// String
				
						writeString(this.EmailTo,dos);
					
					// String
				
						writeString(this.SendSms,dos);
					
					// String
				
						writeString(this.MensajeSms,dos);
					
					// String
				
						writeString(this.SmsTo,dos);
					
					// String
				
						writeString(this.SmsBody,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CitaId);
					
					// String
				
						writeString(this.RecordatorioExitoso,dos);
					
					// int
				
		            	dos.writeInt(this.SmsErrorCode);
					
					// String
				
						writeString(this.SmsErrorBody,dos);
					
					// String
				
						writeString(this.SendMail,dos);
					
					// String
				
						writeString(this.MensajeEmail,dos);
					
					// String
				
						writeString(this.TiempoCita,dos);
					
					// String
				
						writeString(this.PacienteCita,dos);
					
					// String
				
						writeString(this.EmailTo,dos);
					
					// String
				
						writeString(this.SendSms,dos);
					
					// String
				
						writeString(this.MensajeSms,dos);
					
					// String
				
						writeString(this.SmsTo,dos);
					
					// String
				
						writeString(this.SmsBody,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CitaId="+String.valueOf(CitaId));
		sb.append(",RecordatorioExitoso="+RecordatorioExitoso);
		sb.append(",SmsErrorCode="+String.valueOf(SmsErrorCode));
		sb.append(",SmsErrorBody="+SmsErrorBody);
		sb.append(",SendMail="+SendMail);
		sb.append(",MensajeEmail="+MensajeEmail);
		sb.append(",TiempoCita="+TiempoCita);
		sb.append(",PacienteCita="+PacienteCita);
		sb.append(",EmailTo="+EmailTo);
		sb.append(",SendSms="+SendSms);
		sb.append(",MensajeSms="+MensajeSms);
		sb.append(",SmsTo="+SmsTo);
		sb.append(",SmsBody="+SmsBody);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];
    static byte[] commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];

	
			    public BigDecimal CitaId;

				public BigDecimal getCitaId () {
					return this.CitaId;
				}

				public Boolean CitaIdIsNullable(){
				    return false;
				}
				public Boolean CitaIdIsKey(){
				    return false;
				}
				public Integer CitaIdLength(){
				    return 0;
				}
				public Integer CitaIdPrecision(){
				    return null;
				}
				public String CitaIdDefault(){
				
					return "";
				
				}
				public String CitaIdComment(){
				
				    return "";
				
				}
				public String CitaIdPattern(){
				
					return "";
				
				}
				public String CitaIdOriginalDbColumnName(){
				
					return "CitaId";
				
				}

				
			    public String RecordatorioExitoso;

				public String getRecordatorioExitoso () {
					return this.RecordatorioExitoso;
				}

				public Boolean RecordatorioExitosoIsNullable(){
				    return false;
				}
				public Boolean RecordatorioExitosoIsKey(){
				    return false;
				}
				public Integer RecordatorioExitosoLength(){
				    return null;
				}
				public Integer RecordatorioExitosoPrecision(){
				    return null;
				}
				public String RecordatorioExitosoDefault(){
				
					return null;
				
				}
				public String RecordatorioExitosoComment(){
				
				    return "";
				
				}
				public String RecordatorioExitosoPattern(){
				
					return "";
				
				}
				public String RecordatorioExitosoOriginalDbColumnName(){
				
					return "RecordatorioExitoso";
				
				}

				
			    public int SmsErrorCode;

				public int getSmsErrorCode () {
					return this.SmsErrorCode;
				}

				public Boolean SmsErrorCodeIsNullable(){
				    return false;
				}
				public Boolean SmsErrorCodeIsKey(){
				    return false;
				}
				public Integer SmsErrorCodeLength(){
				    return null;
				}
				public Integer SmsErrorCodePrecision(){
				    return null;
				}
				public String SmsErrorCodeDefault(){
				
					return "";
				
				}
				public String SmsErrorCodeComment(){
				
				    return "";
				
				}
				public String SmsErrorCodePattern(){
				
					return "";
				
				}
				public String SmsErrorCodeOriginalDbColumnName(){
				
					return "SmsErrorCode";
				
				}

				
			    public String SmsErrorBody;

				public String getSmsErrorBody () {
					return this.SmsErrorBody;
				}

				public Boolean SmsErrorBodyIsNullable(){
				    return false;
				}
				public Boolean SmsErrorBodyIsKey(){
				    return false;
				}
				public Integer SmsErrorBodyLength(){
				    return null;
				}
				public Integer SmsErrorBodyPrecision(){
				    return null;
				}
				public String SmsErrorBodyDefault(){
				
					return null;
				
				}
				public String SmsErrorBodyComment(){
				
				    return "";
				
				}
				public String SmsErrorBodyPattern(){
				
					return "";
				
				}
				public String SmsErrorBodyOriginalDbColumnName(){
				
					return "SmsErrorBody";
				
				}

				
			    public String SendMail;

				public String getSendMail () {
					return this.SendMail;
				}

				public Boolean SendMailIsNullable(){
				    return false;
				}
				public Boolean SendMailIsKey(){
				    return false;
				}
				public Integer SendMailLength(){
				    return null;
				}
				public Integer SendMailPrecision(){
				    return null;
				}
				public String SendMailDefault(){
				
					return null;
				
				}
				public String SendMailComment(){
				
				    return "";
				
				}
				public String SendMailPattern(){
				
					return "";
				
				}
				public String SendMailOriginalDbColumnName(){
				
					return "SendMail";
				
				}

				
			    public String MensajeEmail;

				public String getMensajeEmail () {
					return this.MensajeEmail;
				}

				public Boolean MensajeEmailIsNullable(){
				    return false;
				}
				public Boolean MensajeEmailIsKey(){
				    return false;
				}
				public Integer MensajeEmailLength(){
				    return null;
				}
				public Integer MensajeEmailPrecision(){
				    return null;
				}
				public String MensajeEmailDefault(){
				
					return null;
				
				}
				public String MensajeEmailComment(){
				
				    return "";
				
				}
				public String MensajeEmailPattern(){
				
					return "";
				
				}
				public String MensajeEmailOriginalDbColumnName(){
				
					return "MensajeEmail";
				
				}

				
			    public String TiempoCita;

				public String getTiempoCita () {
					return this.TiempoCita;
				}

				public Boolean TiempoCitaIsNullable(){
				    return false;
				}
				public Boolean TiempoCitaIsKey(){
				    return false;
				}
				public Integer TiempoCitaLength(){
				    return null;
				}
				public Integer TiempoCitaPrecision(){
				    return null;
				}
				public String TiempoCitaDefault(){
				
					return null;
				
				}
				public String TiempoCitaComment(){
				
				    return "";
				
				}
				public String TiempoCitaPattern(){
				
					return "";
				
				}
				public String TiempoCitaOriginalDbColumnName(){
				
					return "TiempoCita";
				
				}

				
			    public String PacienteCita;

				public String getPacienteCita () {
					return this.PacienteCita;
				}

				public Boolean PacienteCitaIsNullable(){
				    return false;
				}
				public Boolean PacienteCitaIsKey(){
				    return false;
				}
				public Integer PacienteCitaLength(){
				    return null;
				}
				public Integer PacienteCitaPrecision(){
				    return null;
				}
				public String PacienteCitaDefault(){
				
					return null;
				
				}
				public String PacienteCitaComment(){
				
				    return "";
				
				}
				public String PacienteCitaPattern(){
				
					return "";
				
				}
				public String PacienteCitaOriginalDbColumnName(){
				
					return "PacienteCita";
				
				}

				
			    public String EmailTo;

				public String getEmailTo () {
					return this.EmailTo;
				}

				public Boolean EmailToIsNullable(){
				    return true;
				}
				public Boolean EmailToIsKey(){
				    return false;
				}
				public Integer EmailToLength(){
				    return null;
				}
				public Integer EmailToPrecision(){
				    return null;
				}
				public String EmailToDefault(){
				
					return null;
				
				}
				public String EmailToComment(){
				
				    return "";
				
				}
				public String EmailToPattern(){
				
					return "";
				
				}
				public String EmailToOriginalDbColumnName(){
				
					return "EmailTo";
				
				}

				
			    public String SendSms;

				public String getSendSms () {
					return this.SendSms;
				}

				public Boolean SendSmsIsNullable(){
				    return false;
				}
				public Boolean SendSmsIsKey(){
				    return false;
				}
				public Integer SendSmsLength(){
				    return null;
				}
				public Integer SendSmsPrecision(){
				    return null;
				}
				public String SendSmsDefault(){
				
					return null;
				
				}
				public String SendSmsComment(){
				
				    return "";
				
				}
				public String SendSmsPattern(){
				
					return "";
				
				}
				public String SendSmsOriginalDbColumnName(){
				
					return "SendSms";
				
				}

				
			    public String MensajeSms;

				public String getMensajeSms () {
					return this.MensajeSms;
				}

				public Boolean MensajeSmsIsNullable(){
				    return false;
				}
				public Boolean MensajeSmsIsKey(){
				    return false;
				}
				public Integer MensajeSmsLength(){
				    return null;
				}
				public Integer MensajeSmsPrecision(){
				    return null;
				}
				public String MensajeSmsDefault(){
				
					return null;
				
				}
				public String MensajeSmsComment(){
				
				    return "";
				
				}
				public String MensajeSmsPattern(){
				
					return "";
				
				}
				public String MensajeSmsOriginalDbColumnName(){
				
					return "MensajeSms";
				
				}

				
			    public String SmsTo;

				public String getSmsTo () {
					return this.SmsTo;
				}

				public Boolean SmsToIsNullable(){
				    return true;
				}
				public Boolean SmsToIsKey(){
				    return false;
				}
				public Integer SmsToLength(){
				    return null;
				}
				public Integer SmsToPrecision(){
				    return null;
				}
				public String SmsToDefault(){
				
					return null;
				
				}
				public String SmsToComment(){
				
				    return "";
				
				}
				public String SmsToPattern(){
				
					return "";
				
				}
				public String SmsToOriginalDbColumnName(){
				
					return "SmsTo";
				
				}

				
			    public String SmsBody;

				public String getSmsBody () {
					return this.SmsBody;
				}

				public Boolean SmsBodyIsNullable(){
				    return false;
				}
				public Boolean SmsBodyIsKey(){
				    return false;
				}
				public Integer SmsBodyLength(){
				    return null;
				}
				public Integer SmsBodyPrecision(){
				    return null;
				}
				public String SmsBodyDefault(){
				
					return null;
				
				}
				public String SmsBodyComment(){
				
				    return "";
				
				}
				public String SmsBodyPattern(){
				
					return "";
				
				}
				public String SmsBodyOriginalDbColumnName(){
				
					return "SmsBody";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
						this.CitaId = (BigDecimal) dis.readObject();
					
					this.RecordatorioExitoso = readString(dis);
					
			        this.SmsErrorCode = dis.readInt();
					
					this.SmsErrorBody = readString(dis);
					
					this.SendMail = readString(dis);
					
					this.MensajeEmail = readString(dis);
					
					this.TiempoCita = readString(dis);
					
					this.PacienteCita = readString(dis);
					
					this.EmailTo = readString(dis);
					
					this.SendSms = readString(dis);
					
					this.MensajeSms = readString(dis);
					
					this.SmsTo = readString(dis);
					
					this.SmsBody = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
						this.CitaId = (BigDecimal) dis.readObject();
					
					this.RecordatorioExitoso = readString(dis);
					
			        this.SmsErrorCode = dis.readInt();
					
					this.SmsErrorBody = readString(dis);
					
					this.SendMail = readString(dis);
					
					this.MensajeEmail = readString(dis);
					
					this.TiempoCita = readString(dis);
					
					this.PacienteCita = readString(dis);
					
					this.EmailTo = readString(dis);
					
					this.SendSms = readString(dis);
					
					this.MensajeSms = readString(dis);
					
					this.SmsTo = readString(dis);
					
					this.SmsBody = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.CitaId);
					
					// String
				
						writeString(this.RecordatorioExitoso,dos);
					
					// int
				
		            	dos.writeInt(this.SmsErrorCode);
					
					// String
				
						writeString(this.SmsErrorBody,dos);
					
					// String
				
						writeString(this.SendMail,dos);
					
					// String
				
						writeString(this.MensajeEmail,dos);
					
					// String
				
						writeString(this.TiempoCita,dos);
					
					// String
				
						writeString(this.PacienteCita,dos);
					
					// String
				
						writeString(this.EmailTo,dos);
					
					// String
				
						writeString(this.SendSms,dos);
					
					// String
				
						writeString(this.MensajeSms,dos);
					
					// String
				
						writeString(this.SmsTo,dos);
					
					// String
				
						writeString(this.SmsBody,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CitaId);
					
					// String
				
						writeString(this.RecordatorioExitoso,dos);
					
					// int
				
		            	dos.writeInt(this.SmsErrorCode);
					
					// String
				
						writeString(this.SmsErrorBody,dos);
					
					// String
				
						writeString(this.SendMail,dos);
					
					// String
				
						writeString(this.MensajeEmail,dos);
					
					// String
				
						writeString(this.TiempoCita,dos);
					
					// String
				
						writeString(this.PacienteCita,dos);
					
					// String
				
						writeString(this.EmailTo,dos);
					
					// String
				
						writeString(this.SendSms,dos);
					
					// String
				
						writeString(this.MensajeSms,dos);
					
					// String
				
						writeString(this.SmsTo,dos);
					
					// String
				
						writeString(this.SmsBody,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CitaId="+String.valueOf(CitaId));
		sb.append(",RecordatorioExitoso="+RecordatorioExitoso);
		sb.append(",SmsErrorCode="+String.valueOf(SmsErrorCode));
		sb.append(",SmsErrorBody="+SmsErrorBody);
		sb.append(",SendMail="+SendMail);
		sb.append(",MensajeEmail="+MensajeEmail);
		sb.append(",TiempoCita="+TiempoCita);
		sb.append(",PacienteCita="+PacienteCita);
		sb.append(",EmailTo="+EmailTo);
		sb.append(",SendSms="+SendSms);
		sb.append(",MensajeSms="+MensajeSms);
		sb.append(",SmsTo="+SmsTo);
		sb.append(",SmsBody="+SmsBody);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row11Struct row11 = new row11Struct();
row12Struct row12 = new row12Struct();
row4Struct row4 = new row4Struct();
row13Struct row13 = new row13Struct();
row15Struct row15 = new row15Struct();
row5Struct row5 = new row5Struct();
row6Struct row6 = new row6Struct();
row14Struct row14 = new row14Struct();
row16Struct row16 = new row16Struct();





	
	/**
	 * [tFlowToIterate_1 begin ] start
	 */

	
				TalendThreadPool mtp_tREST_1 = new TalendThreadPool(20);

				globalMap.put("lockWrite_tREST_1", new Object[0]);
				int threadIdCounter_tREST_1 =0;
						
			int NB_ITERATE_tREST_1 = 0; //for statistics
			

	
		
		ok_Hash.put("tFlowToIterate_1", false);
		start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());
		
	
	currentComponent="tFlowToIterate_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tFlowToIterate_1 = 0;
		

int nb_line_tFlowToIterate_1 = 0;
int counter_tFlowToIterate_1 = 0;

 



/**
 * [tFlowToIterate_1 begin ] stop
 */



	
	/**
	 * [tFilterRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_2", false);
		start_Hash.put("tFilterRow_2", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tFilterRow_2 = 0;
		
    int nb_line_tFilterRow_2 = 0;
    int nb_line_ok_tFilterRow_2 = 0;
    int nb_line_reject_tFilterRow_2 = 0;

    class Operator_tFilterRow_2 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_2(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_2 begin ] stop
 */



	
	/**
	 * [tHashInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_1", false);
		start_Hash.put("tHashInput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_1";
	
	
		int tos_count_tHashInput_1 = 0;
		


int nb_line_tHashInput_1 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct> tHashFile_tHashInput_1 = mf_tHashInput_1.getAdvancedMemoryHashFile("tHashFile_RecordarCitasMedicas_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_1==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row10Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
while (iterator_tHashInput_1.hasNext()) {
    row10Struct next_tHashInput_1 = iterator_tHashInput_1.next();

	row11.CitaId = next_tHashInput_1.CitaId;
	row11.RecordatorioExitoso = next_tHashInput_1.RecordatorioExitoso;
	row11.SmsErrorCode = next_tHashInput_1.SmsErrorCode;
	row11.SmsErrorBody = next_tHashInput_1.SmsErrorBody;
	row11.SendMail = next_tHashInput_1.SendMail;
	row11.MensajeEmail = next_tHashInput_1.MensajeEmail;
	row11.TiempoCita = next_tHashInput_1.TiempoCita;
	row11.PacienteCita = next_tHashInput_1.PacienteCita;
	row11.EmailTo = next_tHashInput_1.EmailTo;
	row11.SendSms = next_tHashInput_1.SendSms;
	row11.MensajeSms = next_tHashInput_1.MensajeSms;
	row11.SmsTo = next_tHashInput_1.SmsTo;
	row11.SmsBody = next_tHashInput_1.SmsBody;

 



/**
 * [tHashInput_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 main ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 


	tos_count_tHashInput_1++;

/**
 * [tHashInput_1 main ] stop
 */
	
	/**
	 * [tHashInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tFilterRow_2 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row11"
						
						);
					}
					

          row12 = null;
    Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2("&&");    
        ope_tFilterRow_2.matches((row11.SendSms == null? false : row11.SendSms.matches("1") == true)
                       , " SendSms.matches(\"1\") == true failed");
    
    if (ope_tFilterRow_2.getMatchFlag()) {
              if(row12 == null){ 
                row12 = new row12Struct();
              }
               row12.CitaId = row11.CitaId;
               row12.RecordatorioExitoso = row11.RecordatorioExitoso;
               row12.SmsErrorCode = row11.SmsErrorCode;
               row12.SmsErrorBody = row11.SmsErrorBody;
               row12.SendMail = row11.SendMail;
               row12.MensajeEmail = row11.MensajeEmail;
               row12.TiempoCita = row11.TiempoCita;
               row12.PacienteCita = row11.PacienteCita;
               row12.EmailTo = row11.EmailTo;
               row12.SendSms = row11.SendSms;
               row12.MensajeSms = row11.MensajeSms;
               row12.SmsTo = row11.SmsTo;
               row12.SmsBody = row11.SmsBody;    
      nb_line_ok_tFilterRow_2++;
    } else {
      nb_line_reject_tFilterRow_2++;
    }

nb_line_tFilterRow_2++;

 


	tos_count_tFilterRow_2++;

/**
 * [tFilterRow_2 main ] stop
 */
	
	/**
	 * [tFilterRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";
	
	

 



/**
 * [tFilterRow_2 process_data_begin ] stop
 */
// Start of branch "row12"
if(row12 != null) { 



	
	/**
	 * [tFlowToIterate_1 main ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row12"
						
						);
					}
					


    	            
            globalMap.put("row12.CitaId", row12.CitaId);
    	            
            globalMap.put("row12.RecordatorioExitoso", row12.RecordatorioExitoso);
    	            
            globalMap.put("row12.SmsErrorCode", row12.SmsErrorCode);
    	            
            globalMap.put("row12.SmsErrorBody", row12.SmsErrorBody);
    	            
            globalMap.put("row12.SendMail", row12.SendMail);
    	            
            globalMap.put("row12.MensajeEmail", row12.MensajeEmail);
    	            
            globalMap.put("row12.TiempoCita", row12.TiempoCita);
    	            
            globalMap.put("row12.PacienteCita", row12.PacienteCita);
    	            
            globalMap.put("row12.EmailTo", row12.EmailTo);
    	            
            globalMap.put("row12.SendSms", row12.SendSms);
    	            
            globalMap.put("row12.MensajeSms", row12.MensajeSms);
    	            
            globalMap.put("row12.SmsTo", row12.SmsTo);
    	            
            globalMap.put("row12.SmsBody", row12.SmsBody);
    	
 
	   nb_line_tFlowToIterate_1++;  
       counter_tFlowToIterate_1++;
       globalMap.put("tFlowToIterate_1_CURRENT_ITERATION", counter_tFlowToIterate_1);
 


	tos_count_tFlowToIterate_1++;

/**
 * [tFlowToIterate_1 main ] stop
 */
	
	/**
	 * [tFlowToIterate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 process_data_begin ] stop
 */
	NB_ITERATE_tREST_1++;
	
				
			class tREST_1Thread extends TalendThread {//implements routines.system.TalendThreadPool.PropertySettable
				class ThreadedMap extends java.util.HashMap<String, Object> {
			
					private static final long serialVersionUID = 0L;
		
					public ThreadedMap(java.util.Map<String, Object> globalMap) {
						super(globalMap);
					}
		
					@Override
					public Object put(String key, Object value) {
						
						synchronized (RecordarCitasMedicas.this.obj) {
						
							super.put(key, value);
							return RecordarCitasMedicas.this.globalMap.put(key, value);
						
						}
						
					}
				}	
				
				private java.util.Map<String, Object> globalMap = null;
				boolean isRunning = false;
				String iterateId = "";
				
				
						row11Struct row11 = new row11Struct();
row12Struct row12 = new row12Struct();
row4Struct row4 = new row4Struct();
row13Struct row13 = new row13Struct();
row15Struct row15 = new row15Struct();
row5Struct row5 = new row5Struct();
row6Struct row6 = new row6Struct();
row14Struct row14 = new row14Struct();
row16Struct row16 = new row16Struct();

					
	
				public tREST_1Thread(java.util.Map<String, Object> globalMap,row11Struct row11,row12Struct row12,row4Struct row4,row13Struct row13,row15Struct row15,row5Struct row5,row6Struct row6,row14Struct row14,row16Struct row16, int threadID) {
					super();
					
		        		if(row11 != null){
		            		
		    					this.row11.CitaId = row11.CitaId;
		    	            
		    					this.row11.RecordatorioExitoso = row11.RecordatorioExitoso;
		    	            
		    					this.row11.SmsErrorCode = row11.SmsErrorCode;
		    	            
		    					this.row11.SmsErrorBody = row11.SmsErrorBody;
		    	            
		    					this.row11.SendMail = row11.SendMail;
		    	            
		    					this.row11.MensajeEmail = row11.MensajeEmail;
		    	            
		    					this.row11.TiempoCita = row11.TiempoCita;
		    	            
		    					this.row11.PacienteCita = row11.PacienteCita;
		    	            
		    					this.row11.EmailTo = row11.EmailTo;
		    	            
		    					this.row11.SendSms = row11.SendSms;
		    	            
		    					this.row11.MensajeSms = row11.MensajeSms;
		    	            
		    					this.row11.SmsTo = row11.SmsTo;
		    	            
		    					this.row11.SmsBody = row11.SmsBody;
		    	            
		        		}
		        		
		        		if(row12 != null){
		            		
		    					this.row12.CitaId = row12.CitaId;
		    	            
		    					this.row12.RecordatorioExitoso = row12.RecordatorioExitoso;
		    	            
		    					this.row12.SmsErrorCode = row12.SmsErrorCode;
		    	            
		    					this.row12.SmsErrorBody = row12.SmsErrorBody;
		    	            
		    					this.row12.SendMail = row12.SendMail;
		    	            
		    					this.row12.MensajeEmail = row12.MensajeEmail;
		    	            
		    					this.row12.TiempoCita = row12.TiempoCita;
		    	            
		    					this.row12.PacienteCita = row12.PacienteCita;
		    	            
		    					this.row12.EmailTo = row12.EmailTo;
		    	            
		    					this.row12.SendSms = row12.SendSms;
		    	            
		    					this.row12.MensajeSms = row12.MensajeSms;
		    	            
		    					this.row12.SmsTo = row12.SmsTo;
		    	            
		    					this.row12.SmsBody = row12.SmsBody;
		    	            
		        		}
		        		
		        		if(row4 != null){
		            		
		    					this.row4.Body = row4.Body;
		    	            
		    					this.row4.ERROR_CODE = row4.ERROR_CODE;
		    	            
		        		}
		        		
		        		if(row13 != null){
		            		
		    					this.row13.Body = row13.Body;
		    	            
		    					this.row13.ERROR_CODE = row13.ERROR_CODE;
		    	            
		    					this.row13.RecordatorioExitoso = row13.RecordatorioExitoso;
		    	            
		    					this.row13.CitaId = row13.CitaId;
		    	            
		    					this.row13.SmsTo = row13.SmsTo;
		    	            
		        		}
		        		
		        		if(row14 != null){
		            		
		    					this.row14.Body = row14.Body;
		    	            
		    					this.row14.ERROR_CODE = row14.ERROR_CODE;
		    	            
		    					this.row14.RecordatorioExitoso = row14.RecordatorioExitoso;
		    	            
		    					this.row14.CitaId = row14.CitaId;
		    	            
		    					this.row14.SmsTo = row14.SmsTo;
		    	            
		    					this.row14.errorMessage = row14.errorMessage;
		    	            
		        		}
		        		
		        		if(row16 != null){
		            		
		    					this.row16.Body = row16.Body;
		    	            
		    					this.row16.ERROR_CODE = row16.ERROR_CODE;
		    	            
		    					this.row16.RecordatorioExitoso = row16.RecordatorioExitoso;
		    	            
		    					this.row16.CitaId = row16.CitaId;
		    	            
		    					this.row16.SmsTo = row16.SmsTo;
		    	            
		    					this.row16.errorMessage = row16.errorMessage;
		    	            
		        		}
		        		
		        		if(row15 != null){
		            		
		    					this.row15.Body = row15.Body;
		    	            
		    					this.row15.ERROR_CODE = row15.ERROR_CODE;
		    	            
		    					this.row15.RecordatorioExitoso = row15.RecordatorioExitoso;
		    	            
		    					this.row15.CitaId = row15.CitaId;
		    	            
		    					this.row15.SmsTo = row15.SmsTo;
		    	            
		        		}
		        		
		        		if(row5 != null){
		            		
		    					this.row5.ID = row5.ID;
		    	            
		    					this.row5.RECORDATORIO = row5.RECORDATORIO;
		    	            
		        		}
		        		
		        		if(row6 != null){
		            		
		    					this.row6.ID = row6.ID;
		    	            
		    					this.row6.RECORDATORIO = row6.RECORDATORIO;
		    	            
		        		}
		        		
					
						synchronized (RecordarCitasMedicas.this.obj) {
							this.globalMap = new ThreadedMap(globalMap);
					
						}
					iterateId = "." + threadID;
					
					
				}


				public void run() {
					

					java.util.Map threadRunResultMap = new java.util.HashMap();
					threadRunResultMap.put("errorCode", null);
					threadRunResultMap.put("status", "");
					threadLocal.set(threadRunResultMap);
					
					this.isRunning = true;
					String currentComponent = "";
					String cLabel = null;
					java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();
					
					try {			
						
							if(execStat){
								runStat.updateStatOnConnection("iterate1",0,"exec"+iterateId);
							}				
						






	
	/**
	 * [tOracleCommit_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleCommit_1", false);
		start_Hash.put("tOracleCommit_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleCommit_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tOracleCommit_1 = 0;
		

 



/**
 * [tOracleCommit_1 begin ] stop
 */



	
	/**
	 * [tOracleOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_1", false);
		start_Hash.put("tOracleOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tOracleOutput_1 = 0;
		






        int updateKeyCount_tOracleOutput_1 = 1;
        if(updateKeyCount_tOracleOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_1 == 2 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_1 = 0;
    int nb_line_update_tOracleOutput_1 = 0;
    int nb_line_inserted_tOracleOutput_1 = 0;
    int nb_line_deleted_tOracleOutput_1 = 0;
    int nb_line_rejected_tOracleOutput_1 = 0;

    int tmp_batchUpdateCount_tOracleOutput_1 = 0;

    int deletedCount_tOracleOutput_1=0;
    int updatedCount_tOracleOutput_1=0;
    int insertedCount_tOracleOutput_1=0;
    int rowsToCommitCount_tOracleOutput_1=0;
    int rejectedCount_tOracleOutput_1=0;

    boolean whetherReject_tOracleOutput_1 = false;

    java.sql.Connection conn_tOracleOutput_1 = null;

    //optional table
    String dbschema_tOracleOutput_1 = null;
    String tableName_tOracleOutput_1 = null;
        dbschema_tOracleOutput_1 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_1=0;

        if(dbschema_tOracleOutput_1 == null || dbschema_tOracleOutput_1.trim().length() == 0) {
            tableName_tOracleOutput_1 = ("AGE_CITAS");
        } else {
            tableName_tOracleOutput_1 = dbschema_tOracleOutput_1 + "." + ("AGE_CITAS");
        }
                String update_tOracleOutput_1 = "UPDATE " + tableName_tOracleOutput_1 + " SET RECORDATORIO = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_1 = conn_tOracleOutput_1.prepareStatement(update_tOracleOutput_1);
                resourceMap.put("pstmt_tOracleOutput_1", pstmt_tOracleOutput_1);





 



/**
 * [tOracleOutput_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_5", false);
		start_Hash.put("tJavaRow_5", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row15");
					}
				
		int tos_count_tJavaRow_5 = 0;
		

int nb_line_tJavaRow_5 = 0;

 



/**
 * [tJavaRow_5 begin ] stop
 */





	
	/**
	 * [tWarn_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_1", false);
		start_Hash.put("tWarn_1", System.currentTimeMillis());
		
	
	currentComponent="tWarn_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tWarn_1 = 0;
		

 



/**
 * [tWarn_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_6", false);
		start_Hash.put("tJavaRow_6", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tJavaRow_6 = 0;
		

int nb_line_tJavaRow_6 = 0;

 



/**
 * [tJavaRow_6 begin ] stop
 */



	
	/**
	 * [tFilterRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_3", false);
		start_Hash.put("tFilterRow_3", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tFilterRow_3 = 0;
		
    int nb_line_tFilterRow_3 = 0;
    int nb_line_ok_tFilterRow_3 = 0;
    int nb_line_reject_tFilterRow_3 = 0;

    class Operator_tFilterRow_3 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_3(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_3 begin ] stop
 */



	
	/**
	 * [tJavaRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_3", false);
		start_Hash.put("tJavaRow_3", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tJavaRow_3 = 0;
		

int nb_line_tJavaRow_3 = 0;

 



/**
 * [tJavaRow_3 begin ] stop
 */



	
	/**
	 * [tREST_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tREST_1", false);
		start_Hash.put("tREST_1", System.currentTimeMillis());
		
	
	currentComponent="tREST_1";
	
	
		int tos_count_tREST_1 = 0;
		
	

	
	String endpoint_tREST_1 = context.SmsServer;
	
	String trustStoreFile_tREST_1 = System.getProperty("javax.net.ssl.trustStore");
	String trustStoreType_tREST_1 = System.getProperty("javax.net.ssl.trustStoreType");
	String trustStorePWD_tREST_1 = System.getProperty("javax.net.ssl.trustStorePassword");
	
	String keyStoreFile_tREST_1 = System.getProperty("javax.net.ssl.keyStore");
	String keyStoreType_tREST_1 = System.getProperty("javax.net.ssl.keyStoreType");
	String keyStorePWD_tREST_1 = System.getProperty("javax.net.ssl.keyStorePassword");
	
	com.sun.jersey.api.client.config.ClientConfig config_tREST_1 = new com.sun.jersey.api.client.config.DefaultClientConfig();
	
	// APPINT-33909: add entitiy providers (for OSGi deployment)
	config_tREST_1.getClasses().add(com.sun.jersey.core.impl.provider.entity.StringProvider.class);
	config_tREST_1.getClasses().add(com.sun.jersey.core.impl.provider.entity.ByteArrayProvider.class);
	config_tREST_1.getClasses().add(com.sun.jersey.core.impl.provider.entity.FileProvider.class);
	config_tREST_1.getClasses().add(com.sun.jersey.core.impl.provider.entity.InputStreamProvider.class);
	config_tREST_1.getClasses().add(com.sun.jersey.core.impl.provider.entity.DataSourceProvider.class);
	config_tREST_1.getClasses().add(com.sun.jersey.core.impl.provider.entity.MimeMultipartProvider.class);
	config_tREST_1.getClasses().add(com.sun.jersey.core.impl.provider.entity.FormProvider.class);
	config_tREST_1.getClasses().add(com.sun.jersey.core.impl.provider.entity.ReaderProvider.class);
	config_tREST_1.getClasses().add(com.sun.jersey.core.impl.provider.entity.DocumentProvider.class);
	config_tREST_1.getClasses().add(com.sun.jersey.core.impl.provider.entity.StreamingOutputProvider.class);
	
	javax.net.ssl.SSLContext ctx_tREST_1 = javax.net.ssl.SSLContext.getInstance("SSL");
	
	javax.net.ssl.TrustManager[] tms_tREST_1 = null;
	if(trustStoreFile_tREST_1!=null && trustStoreType_tREST_1!=null){
		char[] password_tREST_1 = null;
		if(trustStorePWD_tREST_1!=null)
			password_tREST_1 = trustStorePWD_tREST_1.toCharArray();
		java.security.KeyStore trustStore_tREST_1 = java.security.KeyStore.getInstance(trustStoreType_tREST_1);
		trustStore_tREST_1.load(new java.io.FileInputStream(trustStoreFile_tREST_1), password_tREST_1);
		
		javax.net.ssl.TrustManagerFactory tmf_tREST_1 = javax.net.ssl.TrustManagerFactory.getInstance(javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm());
        tmf_tREST_1.init(trustStore_tREST_1);
        tms_tREST_1 = tmf_tREST_1.getTrustManagers();
	}
	
	javax.net.ssl.KeyManager[] kms_tREST_1 = null;
	if(keyStoreFile_tREST_1!=null && keyStoreType_tREST_1!=null){
		char[] password_tREST_1 = null;
		if(keyStorePWD_tREST_1!=null)
			password_tREST_1 = keyStorePWD_tREST_1.toCharArray();
		java.security.KeyStore keyStore_tREST_1 = java.security.KeyStore.getInstance(keyStoreType_tREST_1);
		keyStore_tREST_1.load(new java.io.FileInputStream(keyStoreFile_tREST_1), password_tREST_1);
		
		javax.net.ssl.KeyManagerFactory kmf_tREST_1 = javax.net.ssl.KeyManagerFactory.getInstance(javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm());
        kmf_tREST_1.init(keyStore_tREST_1,password_tREST_1);
        kms_tREST_1 = kmf_tREST_1.getKeyManagers();
	}
	
    ctx_tREST_1.init(kms_tREST_1, tms_tREST_1 , null);
    config_tREST_1.getProperties().put(com.sun.jersey.client.urlconnection.HTTPSProperties.PROPERTY_HTTPS_PROPERTIES,
                new com.sun.jersey.client.urlconnection.HTTPSProperties(new javax.net.ssl.HostnameVerifier() {

                    public boolean verify(String hostName, javax.net.ssl.SSLSession session) {
                        return true;
                    }
                }, ctx_tREST_1));

	com.sun.jersey.api.client.Client restClient_tREST_1 = com.sun.jersey.api.client.Client.create(config_tREST_1);
	
	java.util.Map<String, Object> headers_tREST_1 = new java.util.HashMap<String, Object>();
	
    	headers_tREST_1.put("Authorization",context.SmsAuth);
	
    	headers_tREST_1.put("Content-Type","application/json");
	
	
	Object transfer_encoding_tREST_1 = headers_tREST_1.get("Transfer-Encoding");
	if(transfer_encoding_tREST_1!=null && "chunked".equals(transfer_encoding_tREST_1)) {
		restClient_tREST_1.setChunkedEncodingSize(4096);
	}
	
	com.sun.jersey.api.client.WebResource restResource_tREST_1;
	if(endpoint_tREST_1!=null && !("").equals(endpoint_tREST_1)){
		restResource_tREST_1 = restClient_tREST_1.resource(endpoint_tREST_1);
	}else{
		throw new IllegalArgumentException("url can't be empty!");
	}
	
	com.sun.jersey.api.client.ClientResponse errorResponse_tREST_1 = null;
	String restResponse_tREST_1 = "";
	try{
		
		com.sun.jersey.api.client.WebResource.Builder builder_tREST_1 = null;
		for(java.util.Map.Entry<String, Object> header_tREST_1 : headers_tREST_1.entrySet()) {
			if(builder_tREST_1 == null) {
				builder_tREST_1 = restResource_tREST_1.header(header_tREST_1.getKey(), header_tREST_1.getValue());
			} else {
				builder_tREST_1.header(header_tREST_1.getKey(), header_tREST_1.getValue());
			}
		}
		
		
			if(builder_tREST_1!=null) {
				restResponse_tREST_1 = builder_tREST_1.post(String.class,row12.SmsBody);
			} else {
				restResponse_tREST_1 = restResource_tREST_1.post(String.class,row12.SmsBody);
			}
		
	}catch (com.sun.jersey.api.client.UniformInterfaceException ue) {
globalMap.put("tREST_1_ERROR_MESSAGE",ue.getMessage());
        errorResponse_tREST_1 = ue.getResponse();
    }
	
	// for output
			
				row4 = new row4Struct();
				if(errorResponse_tREST_1!=null){
					row4.ERROR_CODE = errorResponse_tREST_1.getStatus();
					if(row4.ERROR_CODE!=204){
					    row4.Body = errorResponse_tREST_1.getEntity(String.class);
					}
				}else{
					row4.Body = restResponse_tREST_1;
				}
			

 



/**
 * [tREST_1 begin ] stop
 */
	
	/**
	 * [tREST_1 main ] start
	 */

	

	
	
	currentComponent="tREST_1";
	
	

 


	tos_count_tREST_1++;

/**
 * [tREST_1 main ] stop
 */
	
	/**
	 * [tREST_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tREST_1";
	
	

 



/**
 * [tREST_1 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_3 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					

    
//System.out.println("CitaId: " + row12.CitaId + " SmsTo: " + row12.SmsTo +  " SmsBody: " + row12.SmsBody + " - Rest ERROR_CODE: " + row4.ERROR_CODE + " - Rest Body: " + row4.Body);

System.out.println("CitaId: " + row12.CitaId + " SmsTo: " + row12.SmsTo + " - Rest ERROR_CODE: " + row4.ERROR_CODE + " - Rest Body: " + row4.Body);


row13.CitaId = row12.CitaId;
row13.SmsTo = row12.SmsTo;

row13.ERROR_CODE = row4.ERROR_CODE;
row13.Body = row4.Body;

// Validamos respuesta de API esto puede cambiar dependiendo el proveedor
if(row4.ERROR_CODE == null)
{
	//System.out.println("RecordatorioExitoso");
	row13.RecordatorioExitoso = "1";
}else{
	//System.out.println("RecordatorioFallido");
	row13.RecordatorioExitoso = "0";
}

    nb_line_tJavaRow_3++;   

 


	tos_count_tJavaRow_3++;

/**
 * [tJavaRow_3 main ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_begin ] stop
 */

	
	/**
	 * [tFilterRow_3 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row13"
						
						);
					}
					

          row14 = null;
          row15 = null;
    Operator_tFilterRow_3 ope_tFilterRow_3 = new Operator_tFilterRow_3("&&");    
        ope_tFilterRow_3.matches((row13.RecordatorioExitoso == null? false : row13.RecordatorioExitoso.matches("1") == true)
                       , " RecordatorioExitoso.matches(\"1\") == true failed");
    
    if (ope_tFilterRow_3.getMatchFlag()) {
              if(row15 == null){ 
                row15 = new row15Struct();
              }
               row15.Body = row13.Body;
               row15.ERROR_CODE = row13.ERROR_CODE;
               row15.RecordatorioExitoso = row13.RecordatorioExitoso;
               row15.CitaId = row13.CitaId;
               row15.SmsTo = row13.SmsTo;    
      nb_line_ok_tFilterRow_3++;
    } else {
            if (row14 == null){
              row14 = new row14Struct();
            }
                row14.Body = row13.Body;
                row14.ERROR_CODE = row13.ERROR_CODE;
                row14.RecordatorioExitoso = row13.RecordatorioExitoso;
                row14.CitaId = row13.CitaId;
                row14.SmsTo = row13.SmsTo;
	            row14.errorMessage = ope_tFilterRow_3.getErrorMsg();
      nb_line_reject_tFilterRow_3++;
    }

nb_line_tFilterRow_3++;

 


	tos_count_tFilterRow_3++;

/**
 * [tFilterRow_3 main ] stop
 */
	
	/**
	 * [tFilterRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";
	
	

 



/**
 * [tFilterRow_3 process_data_begin ] stop
 */
// Start of branch "row15"
if(row15 != null) { 



	
	/**
	 * [tJavaRow_5 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row15"
						
						);
					}
					

    //Code generated according to input schema and output schema
//row5.Body = row15.Body;
//row5.ERROR_CODE = row15.ERROR_CODE;
//row5.RecordatorioExitoso = row15.RecordatorioExitoso;
//row5.CitaId = row15.CitaId;
//row5.SmsTo = row15.SmsTo;

//Code generate according to input schema and output schema
row5.ID = row15.CitaId;
row5.RECORDATORIO = "Si";

//System.out.println("CitaId: " + row5.ID + " OK RECORDATORIO:" + row5.RECORDATORIO);


    nb_line_tJavaRow_5++;   

 


	tos_count_tJavaRow_5++;

/**
 * [tJavaRow_5 main ] stop
 */
	
	/**
	 * [tJavaRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					



            row6 = null;
        whetherReject_tOracleOutput_1 = false;
                    if(row5.RECORDATORIO == null) {
pstmt_tOracleOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(1, row5.RECORDATORIO);
}


                    pstmt_tOracleOutput_1.setBigDecimal(2 + count_tOracleOutput_1, row5.ID);

                try {
                    nb_line_tOracleOutput_1++;
                    int processedCount_tOracleOutput_1 = pstmt_tOracleOutput_1.executeUpdate();
                    updatedCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                    rowsToCommitCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                } catch(java.lang.Exception e_tOracleOutput_1) {
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
                    whetherReject_tOracleOutput_1 = true;
                        throw(e_tOracleOutput_1);
                }
            if(!whetherReject_tOracleOutput_1) {
                            row6 = new row6Struct();
                                row6.ID = row5.ID;
                                row6.RECORDATORIO = row5.RECORDATORIO;
            }

 


	tos_count_tOracleOutput_1++;

/**
 * [tOracleOutput_1 main ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_begin ] stop
 */
// Start of branch "row6"
if(row6 != null) { 



	
	/**
	 * [tOracleCommit_1 main ] start
	 */

	

	
	
	currentComponent="tOracleCommit_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					

	java.sql.Connection conn_tOracleCommit_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");

if(conn_tOracleCommit_1 != null && !conn_tOracleCommit_1.isClosed()) {
	
			
			conn_tOracleCommit_1.commit();
			
	
}

 


	tos_count_tOracleCommit_1++;

/**
 * [tOracleCommit_1 main ] stop
 */
	
	/**
	 * [tOracleCommit_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleCommit_1";
	
	

 



/**
 * [tOracleCommit_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleCommit_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleCommit_1";
	
	

 



/**
 * [tOracleCommit_1 process_data_end ] stop
 */

} // End of branch "row6"




	
	/**
	 * [tOracleOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_end ] stop
 */

} // End of branch "row15"




// Start of branch "row14"
if(row14 != null) { 



	
	/**
	 * [tJavaRow_6 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row14"
						
						);
					}
					

    //Code generated according to input schema and output schema
row16.Body = row14.Body;
row16.ERROR_CODE = row14.ERROR_CODE;
row16.RecordatorioExitoso = row14.RecordatorioExitoso;
row16.CitaId = row14.CitaId;
row16.SmsTo = row14.SmsTo;
row16.errorMessage = row14.errorMessage;

System.out.println("CitaId: " + row14.CitaId + " FAIL ");
    nb_line_tJavaRow_6++;   

 


	tos_count_tJavaRow_6++;

/**
 * [tJavaRow_6 main ] stop
 */
	
	/**
	 * [tJavaRow_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

 



/**
 * [tJavaRow_6 process_data_begin ] stop
 */

	
	/**
	 * [tWarn_1 main ] start
	 */

	

	
	
	currentComponent="tWarn_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row16"
						
						);
					}
					

		
try {
	
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_1", "", Thread.currentThread().getId() + "", "WARN","","CitaId: " + row16.CitaId + " SmsTo: " + row16.SmsTo + " - SMS_REST ERROR_CODE: " +row16.ERROR_CODE + " - SMS_REST Body: " +row16.Body,"", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_1", 4, "CitaId: " + row16.CitaId + " SmsTo: " + row16.SmsTo + " - SMS_REST ERROR_CODE: " +row16.ERROR_CODE + " - SMS_REST Body: " +row16.Body, 42);
	tLogCatcher_1Process(globalMap);
	globalMap.put("tWarn_1_WARN_MESSAGES", "CitaId: " + row16.CitaId + " SmsTo: " + row16.SmsTo + " - SMS_REST ERROR_CODE: " +row16.ERROR_CODE + " - SMS_REST Body: " +row16.Body); 
	globalMap.put("tWarn_1_WARN_PRIORITY", 4);
	globalMap.put("tWarn_1_WARN_CODE", 42);
	
} catch (Exception e_tWarn_1) {
globalMap.put("tWarn_1_ERROR_MESSAGE",e_tWarn_1.getMessage());
	logIgnoredError(String.format("tWarn_1 - tWarn failed to log message due to internal error: %s", e_tWarn_1), e_tWarn_1);
}


 


	tos_count_tWarn_1++;

/**
 * [tWarn_1 main ] stop
 */
	
	/**
	 * [tWarn_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tWarn_1";
	
	

 



/**
 * [tWarn_1 process_data_begin ] stop
 */
	
	/**
	 * [tWarn_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tWarn_1";
	
	

 



/**
 * [tWarn_1 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

 



/**
 * [tJavaRow_6 process_data_end ] stop
 */

} // End of branch "row14"




	
	/**
	 * [tFilterRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";
	
	

 



/**
 * [tFilterRow_3 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_end ] stop
 */



	
	/**
	 * [tREST_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tREST_1";
	
	

 



/**
 * [tREST_1 process_data_end ] stop
 */
	
	/**
	 * [tREST_1 end ] start
	 */

	

	
	
	currentComponent="tREST_1";
	
	

 

ok_Hash.put("tREST_1", true);
end_Hash.put("tREST_1", System.currentTimeMillis());




/**
 * [tREST_1 end ] stop
 */

	
	/**
	 * [tJavaRow_3 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

globalMap.put("tJavaRow_3_NB_LINE",nb_line_tJavaRow_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tJavaRow_3", true);
end_Hash.put("tJavaRow_3", System.currentTimeMillis());




/**
 * [tJavaRow_3 end ] stop
 */

	
	/**
	 * [tFilterRow_3 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";
	
	
    globalMap.put("tFilterRow_3_NB_LINE", nb_line_tFilterRow_3);
    globalMap.put("tFilterRow_3_NB_LINE_OK", nb_line_ok_tFilterRow_3);
    globalMap.put("tFilterRow_3_NB_LINE_REJECT", nb_line_reject_tFilterRow_3);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tFilterRow_3", true);
end_Hash.put("tFilterRow_3", System.currentTimeMillis());




/**
 * [tFilterRow_3 end ] stop
 */

	
	/**
	 * [tJavaRow_5 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

globalMap.put("tJavaRow_5_NB_LINE",nb_line_tJavaRow_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row15");
			  	}
			  	
 

ok_Hash.put("tJavaRow_5", true);
end_Hash.put("tJavaRow_5", System.currentTimeMillis());




/**
 * [tJavaRow_5 end ] stop
 */

	
	/**
	 * [tOracleOutput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
	



	
        if(pstmt_tOracleOutput_1 != null) {
			
				pstmt_tOracleOutput_1.close();
				resourceMap.remove("pstmt_tOracleOutput_1");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_1", true);

	
	nb_line_deleted_tOracleOutput_1=nb_line_deleted_tOracleOutput_1+ deletedCount_tOracleOutput_1;
	nb_line_update_tOracleOutput_1=nb_line_update_tOracleOutput_1 + updatedCount_tOracleOutput_1;
	nb_line_inserted_tOracleOutput_1=nb_line_inserted_tOracleOutput_1 + insertedCount_tOracleOutput_1;
	nb_line_rejected_tOracleOutput_1=nb_line_rejected_tOracleOutput_1 + rejectedCount_tOracleOutput_1;
	
        globalMap.put("tOracleOutput_1_NB_LINE",nb_line_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_UPDATED",nb_line_update_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_1);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_1", true);
end_Hash.put("tOracleOutput_1", System.currentTimeMillis());




/**
 * [tOracleOutput_1 end ] stop
 */

	
	/**
	 * [tOracleCommit_1 end ] start
	 */

	

	
	
	currentComponent="tOracleCommit_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tOracleCommit_1", true);
end_Hash.put("tOracleCommit_1", System.currentTimeMillis());




/**
 * [tOracleCommit_1 end ] stop
 */










	
	/**
	 * [tJavaRow_6 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

globalMap.put("tJavaRow_6_NB_LINE",nb_line_tJavaRow_6);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tJavaRow_6", true);
end_Hash.put("tJavaRow_6", System.currentTimeMillis());




/**
 * [tJavaRow_6 end ] stop
 */

	
	/**
	 * [tWarn_1 end ] start
	 */

	

	
	
	currentComponent="tWarn_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tWarn_1", true);
end_Hash.put("tWarn_1", System.currentTimeMillis());




/**
 * [tWarn_1 end ] stop
 */












					if(execStat){
						runStat.updateStatOnConnection("iterate1",2,"exec"+iterateId);
					}				
				
						} catch (java.lang.Exception e) {
							this.status = "failure";
							Integer localErrorCode = (Integer) (((java.util.Map) threadLocal.get()).get("errorCode"));
							if (localErrorCode != null) {
								if (this.errorCode == null || localErrorCode.compareTo(this.errorCode) > 0) {
									this.errorCode = localErrorCode;
								}
							}					
				            		            
		                    TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
							
							this.exception = te;
							talendThreadPool.setErrorThread(this);
				            talendThreadPool.stopAllWorkers();
	
						} catch (java.lang.Error error){
							this.status = "failure";
							Integer localErrorCode = (Integer) (((java.util.Map) threadLocal.get()).get("errorCode"));
							if (localErrorCode != null) {
								if (this.errorCode == null || localErrorCode.compareTo(this.errorCode) > 0) {
									this.errorCode = localErrorCode;
								}
							}					
							this.error = error;				            		            
							talendThreadPool.setErrorThread(this);
				            talendThreadPool.stopAllWorkers();
						} finally {
							try{
								
	
	/**
	 * [tREST_1 finally ] start
	 */

	

	
	
	currentComponent="tREST_1";
	
	

 



/**
 * [tREST_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_3 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 finally ] stop
 */

	
	/**
	 * [tFilterRow_3 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";
	
	

 



/**
 * [tFilterRow_3 finally ] stop
 */

	
	/**
	 * [tJavaRow_5 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 finally ] stop
 */

	
	/**
	 * [tOracleOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_1 = null;
                if ((pstmtToClose_tOracleOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_1")) != null) {
                    pstmtToClose_tOracleOutput_1.close();
                }
    }
 



/**
 * [tOracleOutput_1 finally ] stop
 */

	
	/**
	 * [tOracleCommit_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleCommit_1";
	
	

 



/**
 * [tOracleCommit_1 finally ] stop
 */










	
	/**
	 * [tJavaRow_6 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

 



/**
 * [tJavaRow_6 finally ] stop
 */

	
	/**
	 * [tWarn_1 finally ] start
	 */

	

	
	
	currentComponent="tWarn_1";
	
	

 



/**
 * [tWarn_1 finally ] stop
 */












							}catch(java.lang.Exception e){	
								//ignore
							}catch(java.lang.Error error){
								//ignore
							}
							resourceMap = null;
						}
						this.isRunning = false;
				
						Integer localErrorCode = (Integer) (((java.util.Map) threadLocal.get()).get("errorCode"));
						String localStatus = (String) (((java.util.Map) threadLocal.get()).get("status"));
						if (localErrorCode != null) {
							if (this.errorCode == null || localErrorCode.compareTo(this.errorCode) > 0) {
								this.errorCode = localErrorCode;
							}
						} 
						if (!this.status.equals("failure")) {
							this.status = localStatus;
						}
						
						talendThreadPool.getTalendThreadResult().setErrorCode(this.errorCode);
						talendThreadPool.getTalendThreadResult().setStatus(this.status);						
					}
				}

				tREST_1Thread bt_tREST_1 = new tREST_1Thread(globalMap,row11,row12,row4,row13,row15,row5,row6,row14,row16,threadIdCounter_tREST_1++);
				mtp_tREST_1.execute(bt_tREST_1);

				




	
	/**
	 * [tFlowToIterate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 process_data_end ] stop
 */

} // End of branch "row12"




	
	/**
	 * [tFilterRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";
	
	

 



/**
 * [tFilterRow_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_1 end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	
    

		
			nb_line_tHashInput_1++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_RecordarCitasMedicas_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);       

 

ok_Hash.put("tHashInput_1", true);
end_Hash.put("tHashInput_1", System.currentTimeMillis());




/**
 * [tHashInput_1 end ] stop
 */

	
	/**
	 * [tFilterRow_2 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";
	
	
    globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_OK", nb_line_ok_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_REJECT", nb_line_reject_tFilterRow_2);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tFilterRow_2", true);
end_Hash.put("tFilterRow_2", System.currentTimeMillis());




/**
 * [tFilterRow_2 end ] stop
 */

	
	/**
	 * [tFlowToIterate_1 end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

globalMap.put("tFlowToIterate_1_NB_LINE",nb_line_tFlowToIterate_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tFlowToIterate_1", true);
end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());


			mtp_tREST_1.waitForEndOfQueue();
			
			TalendThread errorThread_tREST_1 = mtp_tREST_1.getErrorThread();

	if(errorThread_tREST_1 != null) {
		if (errorThread_tREST_1.errorCode != null) {
			if (errorCode == null
					|| errorThread_tREST_1.errorCode.compareTo(errorCode) > 0) {
				errorCode = errorThread_tREST_1.errorCode;
			}
		} 
		if (!status.equals("failure")) {
			status = errorThread_tREST_1.status;
		}
		if(errorThread_tREST_1.exception!=null){
			throw errorThread_tREST_1.exception;
		}
		if(errorThread_tREST_1.error!=null){
			throw errorThread_tREST_1.error;
		}
	}else{				
		Integer threadErrorCode = mtp_tREST_1.getTalendThreadResult().getErrorCode();
		String threadStatus = mtp_tREST_1.getTalendThreadResult().getStatus();
		
		if (threadErrorCode != null) {
			if (errorCode == null
					|| threadErrorCode.compareTo(errorCode) > 0) {
				errorCode = threadErrorCode;
			}
		} 
		if (!status.equals("failure")) {
			status = threadStatus;
		}
	 }			
			
			


/**
 * [tFlowToIterate_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 finally ] stop
 */

	
	/**
	 * [tFilterRow_2 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";
	
	

 



/**
 * [tFilterRow_2 finally ] stop
 */

	
	/**
	 * [tFlowToIterate_1 finally ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row25Struct implements routines.system.IPersistableRow<row25Struct> {
    final static byte[] commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];
    static byte[] commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String RECORDATORIO;

				public String getRECORDATORIO () {
					return this.RECORDATORIO;
				}

				public Boolean RECORDATORIOIsNullable(){
				    return false;
				}
				public Boolean RECORDATORIOIsKey(){
				    return false;
				}
				public Integer RECORDATORIOLength(){
				    return null;
				}
				public Integer RECORDATORIOPrecision(){
				    return null;
				}
				public String RECORDATORIODefault(){
				
					return null;
				
				}
				public String RECORDATORIOComment(){
				
				    return "";
				
				}
				public String RECORDATORIOPattern(){
				
					return "";
				
				}
				public String RECORDATORIOOriginalDbColumnName(){
				
					return "RECORDATORIO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row25Struct other = (row25Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row25Struct other) {

		other.ID = this.ID;
	            other.RECORDATORIO = this.RECORDATORIO;
	            
	}

	public void copyKeysDataTo(row25Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.RECORDATORIO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.RECORDATORIO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.RECORDATORIO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.RECORDATORIO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECORDATORIO="+RECORDATORIO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row25Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];
    static byte[] commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String RECORDATORIO;

				public String getRECORDATORIO () {
					return this.RECORDATORIO;
				}

				public Boolean RECORDATORIOIsNullable(){
				    return false;
				}
				public Boolean RECORDATORIOIsKey(){
				    return false;
				}
				public Integer RECORDATORIOLength(){
				    return null;
				}
				public Integer RECORDATORIOPrecision(){
				    return null;
				}
				public String RECORDATORIODefault(){
				
					return null;
				
				}
				public String RECORDATORIOComment(){
				
				    return "";
				
				}
				public String RECORDATORIOPattern(){
				
					return "";
				
				}
				public String RECORDATORIOOriginalDbColumnName(){
				
					return "RECORDATORIO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row7Struct other = (row7Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row7Struct other) {

		other.ID = this.ID;
	            other.RECORDATORIO = this.RECORDATORIO;
	            
	}

	public void copyKeysDataTo(row7Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.RECORDATORIO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.RECORDATORIO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.RECORDATORIO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.RECORDATORIO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECORDATORIO="+RECORDATORIO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
    final static byte[] commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];
    static byte[] commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];

	
			    public BigDecimal CitaId;

				public BigDecimal getCitaId () {
					return this.CitaId;
				}

				public Boolean CitaIdIsNullable(){
				    return false;
				}
				public Boolean CitaIdIsKey(){
				    return false;
				}
				public Integer CitaIdLength(){
				    return 0;
				}
				public Integer CitaIdPrecision(){
				    return null;
				}
				public String CitaIdDefault(){
				
					return "";
				
				}
				public String CitaIdComment(){
				
				    return "";
				
				}
				public String CitaIdPattern(){
				
					return "";
				
				}
				public String CitaIdOriginalDbColumnName(){
				
					return "CitaId";
				
				}

				
			    public String RecordatorioExitoso;

				public String getRecordatorioExitoso () {
					return this.RecordatorioExitoso;
				}

				public Boolean RecordatorioExitosoIsNullable(){
				    return false;
				}
				public Boolean RecordatorioExitosoIsKey(){
				    return false;
				}
				public Integer RecordatorioExitosoLength(){
				    return null;
				}
				public Integer RecordatorioExitosoPrecision(){
				    return null;
				}
				public String RecordatorioExitosoDefault(){
				
					return null;
				
				}
				public String RecordatorioExitosoComment(){
				
				    return "";
				
				}
				public String RecordatorioExitosoPattern(){
				
					return "";
				
				}
				public String RecordatorioExitosoOriginalDbColumnName(){
				
					return "RecordatorioExitoso";
				
				}

				
			    public String EmailTo;

				public String getEmailTo () {
					return this.EmailTo;
				}

				public Boolean EmailToIsNullable(){
				    return false;
				}
				public Boolean EmailToIsKey(){
				    return false;
				}
				public Integer EmailToLength(){
				    return null;
				}
				public Integer EmailToPrecision(){
				    return null;
				}
				public String EmailToDefault(){
				
					return null;
				
				}
				public String EmailToComment(){
				
				    return "";
				
				}
				public String EmailToPattern(){
				
					return "";
				
				}
				public String EmailToOriginalDbColumnName(){
				
					return "EmailTo";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
						this.CitaId = (BigDecimal) dis.readObject();
					
					this.RecordatorioExitoso = readString(dis);
					
					this.EmailTo = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
						this.CitaId = (BigDecimal) dis.readObject();
					
					this.RecordatorioExitoso = readString(dis);
					
					this.EmailTo = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.CitaId);
					
					// String
				
						writeString(this.RecordatorioExitoso,dos);
					
					// String
				
						writeString(this.EmailTo,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CitaId);
					
					// String
				
						writeString(this.RecordatorioExitoso,dos);
					
					// String
				
						writeString(this.EmailTo,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CitaId="+String.valueOf(CitaId));
		sb.append(",RecordatorioExitoso="+RecordatorioExitoso);
		sb.append(",EmailTo="+EmailTo);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
    final static byte[] commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];
    static byte[] commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];

	
			    public BigDecimal CitaId;

				public BigDecimal getCitaId () {
					return this.CitaId;
				}

				public Boolean CitaIdIsNullable(){
				    return false;
				}
				public Boolean CitaIdIsKey(){
				    return false;
				}
				public Integer CitaIdLength(){
				    return 0;
				}
				public Integer CitaIdPrecision(){
				    return null;
				}
				public String CitaIdDefault(){
				
					return "";
				
				}
				public String CitaIdComment(){
				
				    return "";
				
				}
				public String CitaIdPattern(){
				
					return "";
				
				}
				public String CitaIdOriginalDbColumnName(){
				
					return "CitaId";
				
				}

				
			    public String RecordatorioExitoso;

				public String getRecordatorioExitoso () {
					return this.RecordatorioExitoso;
				}

				public Boolean RecordatorioExitosoIsNullable(){
				    return false;
				}
				public Boolean RecordatorioExitosoIsKey(){
				    return false;
				}
				public Integer RecordatorioExitosoLength(){
				    return null;
				}
				public Integer RecordatorioExitosoPrecision(){
				    return null;
				}
				public String RecordatorioExitosoDefault(){
				
					return null;
				
				}
				public String RecordatorioExitosoComment(){
				
				    return "";
				
				}
				public String RecordatorioExitosoPattern(){
				
					return "";
				
				}
				public String RecordatorioExitosoOriginalDbColumnName(){
				
					return "RecordatorioExitoso";
				
				}

				
			    public String EmailTo;

				public String getEmailTo () {
					return this.EmailTo;
				}

				public Boolean EmailToIsNullable(){
				    return false;
				}
				public Boolean EmailToIsKey(){
				    return false;
				}
				public Integer EmailToLength(){
				    return null;
				}
				public Integer EmailToPrecision(){
				    return null;
				}
				public String EmailToDefault(){
				
					return null;
				
				}
				public String EmailToComment(){
				
				    return "";
				
				}
				public String EmailToPattern(){
				
					return "";
				
				}
				public String EmailToOriginalDbColumnName(){
				
					return "EmailTo";
				
				}

				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}

				public Boolean errorMessageIsNullable(){
				    return true;
				}
				public Boolean errorMessageIsKey(){
				    return false;
				}
				public Integer errorMessageLength(){
				    return 255;
				}
				public Integer errorMessagePrecision(){
				    return 0;
				}
				public String errorMessageDefault(){
				
					return null;
				
				}
				public String errorMessageComment(){
				
				    return null;
				
				}
				public String errorMessagePattern(){
				
				    return null;
				
				}
				public String errorMessageOriginalDbColumnName(){
				
					return "errorMessage";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
						this.CitaId = (BigDecimal) dis.readObject();
					
					this.RecordatorioExitoso = readString(dis);
					
					this.EmailTo = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
						this.CitaId = (BigDecimal) dis.readObject();
					
					this.RecordatorioExitoso = readString(dis);
					
					this.EmailTo = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.CitaId);
					
					// String
				
						writeString(this.RecordatorioExitoso,dos);
					
					// String
				
						writeString(this.EmailTo,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CitaId);
					
					// String
				
						writeString(this.RecordatorioExitoso,dos);
					
					// String
				
						writeString(this.EmailTo,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CitaId="+String.valueOf(CitaId));
		sb.append(",RecordatorioExitoso="+RecordatorioExitoso);
		sb.append(",EmailTo="+EmailTo);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row23Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
    final static byte[] commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];
    static byte[] commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];

	
			    public BigDecimal CitaId;

				public BigDecimal getCitaId () {
					return this.CitaId;
				}

				public Boolean CitaIdIsNullable(){
				    return false;
				}
				public Boolean CitaIdIsKey(){
				    return false;
				}
				public Integer CitaIdLength(){
				    return 0;
				}
				public Integer CitaIdPrecision(){
				    return null;
				}
				public String CitaIdDefault(){
				
					return "";
				
				}
				public String CitaIdComment(){
				
				    return "";
				
				}
				public String CitaIdPattern(){
				
					return "";
				
				}
				public String CitaIdOriginalDbColumnName(){
				
					return "CitaId";
				
				}

				
			    public String RecordatorioExitoso;

				public String getRecordatorioExitoso () {
					return this.RecordatorioExitoso;
				}

				public Boolean RecordatorioExitosoIsNullable(){
				    return false;
				}
				public Boolean RecordatorioExitosoIsKey(){
				    return false;
				}
				public Integer RecordatorioExitosoLength(){
				    return null;
				}
				public Integer RecordatorioExitosoPrecision(){
				    return null;
				}
				public String RecordatorioExitosoDefault(){
				
					return null;
				
				}
				public String RecordatorioExitosoComment(){
				
				    return "";
				
				}
				public String RecordatorioExitosoPattern(){
				
					return "";
				
				}
				public String RecordatorioExitosoOriginalDbColumnName(){
				
					return "RecordatorioExitoso";
				
				}

				
			    public String EmailTo;

				public String getEmailTo () {
					return this.EmailTo;
				}

				public Boolean EmailToIsNullable(){
				    return false;
				}
				public Boolean EmailToIsKey(){
				    return false;
				}
				public Integer EmailToLength(){
				    return null;
				}
				public Integer EmailToPrecision(){
				    return null;
				}
				public String EmailToDefault(){
				
					return null;
				
				}
				public String EmailToComment(){
				
				    return "";
				
				}
				public String EmailToPattern(){
				
					return "";
				
				}
				public String EmailToOriginalDbColumnName(){
				
					return "EmailTo";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
						this.CitaId = (BigDecimal) dis.readObject();
					
					this.RecordatorioExitoso = readString(dis);
					
					this.EmailTo = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
						this.CitaId = (BigDecimal) dis.readObject();
					
					this.RecordatorioExitoso = readString(dis);
					
					this.EmailTo = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.CitaId);
					
					// String
				
						writeString(this.RecordatorioExitoso,dos);
					
					// String
				
						writeString(this.EmailTo,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CitaId);
					
					// String
				
						writeString(this.RecordatorioExitoso,dos);
					
					// String
				
						writeString(this.EmailTo,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CitaId="+String.valueOf(CitaId));
		sb.append(",RecordatorioExitoso="+RecordatorioExitoso);
		sb.append(",EmailTo="+EmailTo);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
    final static byte[] commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];
    static byte[] commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];

	
			    public BigDecimal CitaId;

				public BigDecimal getCitaId () {
					return this.CitaId;
				}

				public Boolean CitaIdIsNullable(){
				    return false;
				}
				public Boolean CitaIdIsKey(){
				    return false;
				}
				public Integer CitaIdLength(){
				    return 0;
				}
				public Integer CitaIdPrecision(){
				    return null;
				}
				public String CitaIdDefault(){
				
					return "";
				
				}
				public String CitaIdComment(){
				
				    return "";
				
				}
				public String CitaIdPattern(){
				
					return "";
				
				}
				public String CitaIdOriginalDbColumnName(){
				
					return "CitaId";
				
				}

				
			    public String RecordatorioExitoso;

				public String getRecordatorioExitoso () {
					return this.RecordatorioExitoso;
				}

				public Boolean RecordatorioExitosoIsNullable(){
				    return false;
				}
				public Boolean RecordatorioExitosoIsKey(){
				    return false;
				}
				public Integer RecordatorioExitosoLength(){
				    return null;
				}
				public Integer RecordatorioExitosoPrecision(){
				    return null;
				}
				public String RecordatorioExitosoDefault(){
				
					return null;
				
				}
				public String RecordatorioExitosoComment(){
				
				    return "";
				
				}
				public String RecordatorioExitosoPattern(){
				
					return "";
				
				}
				public String RecordatorioExitosoOriginalDbColumnName(){
				
					return "RecordatorioExitoso";
				
				}

				
			    public String EmailTo;

				public String getEmailTo () {
					return this.EmailTo;
				}

				public Boolean EmailToIsNullable(){
				    return false;
				}
				public Boolean EmailToIsKey(){
				    return false;
				}
				public Integer EmailToLength(){
				    return null;
				}
				public Integer EmailToPrecision(){
				    return null;
				}
				public String EmailToDefault(){
				
					return null;
				
				}
				public String EmailToComment(){
				
				    return "";
				
				}
				public String EmailToPattern(){
				
					return "";
				
				}
				public String EmailToOriginalDbColumnName(){
				
					return "EmailTo";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
						this.CitaId = (BigDecimal) dis.readObject();
					
					this.RecordatorioExitoso = readString(dis);
					
					this.EmailTo = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
						this.CitaId = (BigDecimal) dis.readObject();
					
					this.RecordatorioExitoso = readString(dis);
					
					this.EmailTo = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.CitaId);
					
					// String
				
						writeString(this.RecordatorioExitoso,dos);
					
					// String
				
						writeString(this.EmailTo,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CitaId);
					
					// String
				
						writeString(this.RecordatorioExitoso,dos);
					
					// String
				
						writeString(this.EmailTo,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CitaId="+String.valueOf(CitaId));
		sb.append(",RecordatorioExitoso="+RecordatorioExitoso);
		sb.append(",EmailTo="+EmailTo);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row21Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
    final static byte[] commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];
    static byte[] commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];

	
			    public BigDecimal CitaId;

				public BigDecimal getCitaId () {
					return this.CitaId;
				}

				public Boolean CitaIdIsNullable(){
				    return false;
				}
				public Boolean CitaIdIsKey(){
				    return false;
				}
				public Integer CitaIdLength(){
				    return 0;
				}
				public Integer CitaIdPrecision(){
				    return null;
				}
				public String CitaIdDefault(){
				
					return "";
				
				}
				public String CitaIdComment(){
				
				    return "";
				
				}
				public String CitaIdPattern(){
				
					return "";
				
				}
				public String CitaIdOriginalDbColumnName(){
				
					return "CitaId";
				
				}

				
			    public String RecordatorioExitoso;

				public String getRecordatorioExitoso () {
					return this.RecordatorioExitoso;
				}

				public Boolean RecordatorioExitosoIsNullable(){
				    return false;
				}
				public Boolean RecordatorioExitosoIsKey(){
				    return false;
				}
				public Integer RecordatorioExitosoLength(){
				    return null;
				}
				public Integer RecordatorioExitosoPrecision(){
				    return null;
				}
				public String RecordatorioExitosoDefault(){
				
					return null;
				
				}
				public String RecordatorioExitosoComment(){
				
				    return "";
				
				}
				public String RecordatorioExitosoPattern(){
				
					return "";
				
				}
				public String RecordatorioExitosoOriginalDbColumnName(){
				
					return "RecordatorioExitoso";
				
				}

				
			    public int SmsErrorCode;

				public int getSmsErrorCode () {
					return this.SmsErrorCode;
				}

				public Boolean SmsErrorCodeIsNullable(){
				    return false;
				}
				public Boolean SmsErrorCodeIsKey(){
				    return false;
				}
				public Integer SmsErrorCodeLength(){
				    return null;
				}
				public Integer SmsErrorCodePrecision(){
				    return null;
				}
				public String SmsErrorCodeDefault(){
				
					return "";
				
				}
				public String SmsErrorCodeComment(){
				
				    return "";
				
				}
				public String SmsErrorCodePattern(){
				
					return "";
				
				}
				public String SmsErrorCodeOriginalDbColumnName(){
				
					return "SmsErrorCode";
				
				}

				
			    public String SmsErrorBody;

				public String getSmsErrorBody () {
					return this.SmsErrorBody;
				}

				public Boolean SmsErrorBodyIsNullable(){
				    return false;
				}
				public Boolean SmsErrorBodyIsKey(){
				    return false;
				}
				public Integer SmsErrorBodyLength(){
				    return null;
				}
				public Integer SmsErrorBodyPrecision(){
				    return null;
				}
				public String SmsErrorBodyDefault(){
				
					return null;
				
				}
				public String SmsErrorBodyComment(){
				
				    return "";
				
				}
				public String SmsErrorBodyPattern(){
				
					return "";
				
				}
				public String SmsErrorBodyOriginalDbColumnName(){
				
					return "SmsErrorBody";
				
				}

				
			    public String SendMail;

				public String getSendMail () {
					return this.SendMail;
				}

				public Boolean SendMailIsNullable(){
				    return false;
				}
				public Boolean SendMailIsKey(){
				    return false;
				}
				public Integer SendMailLength(){
				    return null;
				}
				public Integer SendMailPrecision(){
				    return null;
				}
				public String SendMailDefault(){
				
					return null;
				
				}
				public String SendMailComment(){
				
				    return "";
				
				}
				public String SendMailPattern(){
				
					return "";
				
				}
				public String SendMailOriginalDbColumnName(){
				
					return "SendMail";
				
				}

				
			    public String MensajeEmail;

				public String getMensajeEmail () {
					return this.MensajeEmail;
				}

				public Boolean MensajeEmailIsNullable(){
				    return false;
				}
				public Boolean MensajeEmailIsKey(){
				    return false;
				}
				public Integer MensajeEmailLength(){
				    return null;
				}
				public Integer MensajeEmailPrecision(){
				    return null;
				}
				public String MensajeEmailDefault(){
				
					return null;
				
				}
				public String MensajeEmailComment(){
				
				    return "";
				
				}
				public String MensajeEmailPattern(){
				
					return "";
				
				}
				public String MensajeEmailOriginalDbColumnName(){
				
					return "MensajeEmail";
				
				}

				
			    public String TiempoCita;

				public String getTiempoCita () {
					return this.TiempoCita;
				}

				public Boolean TiempoCitaIsNullable(){
				    return false;
				}
				public Boolean TiempoCitaIsKey(){
				    return false;
				}
				public Integer TiempoCitaLength(){
				    return null;
				}
				public Integer TiempoCitaPrecision(){
				    return null;
				}
				public String TiempoCitaDefault(){
				
					return null;
				
				}
				public String TiempoCitaComment(){
				
				    return "";
				
				}
				public String TiempoCitaPattern(){
				
					return "";
				
				}
				public String TiempoCitaOriginalDbColumnName(){
				
					return "TiempoCita";
				
				}

				
			    public String PacienteCita;

				public String getPacienteCita () {
					return this.PacienteCita;
				}

				public Boolean PacienteCitaIsNullable(){
				    return false;
				}
				public Boolean PacienteCitaIsKey(){
				    return false;
				}
				public Integer PacienteCitaLength(){
				    return null;
				}
				public Integer PacienteCitaPrecision(){
				    return null;
				}
				public String PacienteCitaDefault(){
				
					return null;
				
				}
				public String PacienteCitaComment(){
				
				    return "";
				
				}
				public String PacienteCitaPattern(){
				
					return "";
				
				}
				public String PacienteCitaOriginalDbColumnName(){
				
					return "PacienteCita";
				
				}

				
			    public String EmailTo;

				public String getEmailTo () {
					return this.EmailTo;
				}

				public Boolean EmailToIsNullable(){
				    return true;
				}
				public Boolean EmailToIsKey(){
				    return false;
				}
				public Integer EmailToLength(){
				    return null;
				}
				public Integer EmailToPrecision(){
				    return null;
				}
				public String EmailToDefault(){
				
					return null;
				
				}
				public String EmailToComment(){
				
				    return "";
				
				}
				public String EmailToPattern(){
				
					return "";
				
				}
				public String EmailToOriginalDbColumnName(){
				
					return "EmailTo";
				
				}

				
			    public String SendSms;

				public String getSendSms () {
					return this.SendSms;
				}

				public Boolean SendSmsIsNullable(){
				    return false;
				}
				public Boolean SendSmsIsKey(){
				    return false;
				}
				public Integer SendSmsLength(){
				    return null;
				}
				public Integer SendSmsPrecision(){
				    return null;
				}
				public String SendSmsDefault(){
				
					return null;
				
				}
				public String SendSmsComment(){
				
				    return "";
				
				}
				public String SendSmsPattern(){
				
					return "";
				
				}
				public String SendSmsOriginalDbColumnName(){
				
					return "SendSms";
				
				}

				
			    public String MensajeSms;

				public String getMensajeSms () {
					return this.MensajeSms;
				}

				public Boolean MensajeSmsIsNullable(){
				    return false;
				}
				public Boolean MensajeSmsIsKey(){
				    return false;
				}
				public Integer MensajeSmsLength(){
				    return null;
				}
				public Integer MensajeSmsPrecision(){
				    return null;
				}
				public String MensajeSmsDefault(){
				
					return null;
				
				}
				public String MensajeSmsComment(){
				
				    return "";
				
				}
				public String MensajeSmsPattern(){
				
					return "";
				
				}
				public String MensajeSmsOriginalDbColumnName(){
				
					return "MensajeSms";
				
				}

				
			    public String SmsTo;

				public String getSmsTo () {
					return this.SmsTo;
				}

				public Boolean SmsToIsNullable(){
				    return true;
				}
				public Boolean SmsToIsKey(){
				    return false;
				}
				public Integer SmsToLength(){
				    return null;
				}
				public Integer SmsToPrecision(){
				    return null;
				}
				public String SmsToDefault(){
				
					return null;
				
				}
				public String SmsToComment(){
				
				    return "";
				
				}
				public String SmsToPattern(){
				
					return "";
				
				}
				public String SmsToOriginalDbColumnName(){
				
					return "SmsTo";
				
				}

				
			    public String SmsBody;

				public String getSmsBody () {
					return this.SmsBody;
				}

				public Boolean SmsBodyIsNullable(){
				    return false;
				}
				public Boolean SmsBodyIsKey(){
				    return false;
				}
				public Integer SmsBodyLength(){
				    return null;
				}
				public Integer SmsBodyPrecision(){
				    return null;
				}
				public String SmsBodyDefault(){
				
					return null;
				
				}
				public String SmsBodyComment(){
				
				    return "";
				
				}
				public String SmsBodyPattern(){
				
					return "";
				
				}
				public String SmsBodyOriginalDbColumnName(){
				
					return "SmsBody";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
						this.CitaId = (BigDecimal) dis.readObject();
					
					this.RecordatorioExitoso = readString(dis);
					
			        this.SmsErrorCode = dis.readInt();
					
					this.SmsErrorBody = readString(dis);
					
					this.SendMail = readString(dis);
					
					this.MensajeEmail = readString(dis);
					
					this.TiempoCita = readString(dis);
					
					this.PacienteCita = readString(dis);
					
					this.EmailTo = readString(dis);
					
					this.SendSms = readString(dis);
					
					this.MensajeSms = readString(dis);
					
					this.SmsTo = readString(dis);
					
					this.SmsBody = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
						this.CitaId = (BigDecimal) dis.readObject();
					
					this.RecordatorioExitoso = readString(dis);
					
			        this.SmsErrorCode = dis.readInt();
					
					this.SmsErrorBody = readString(dis);
					
					this.SendMail = readString(dis);
					
					this.MensajeEmail = readString(dis);
					
					this.TiempoCita = readString(dis);
					
					this.PacienteCita = readString(dis);
					
					this.EmailTo = readString(dis);
					
					this.SendSms = readString(dis);
					
					this.MensajeSms = readString(dis);
					
					this.SmsTo = readString(dis);
					
					this.SmsBody = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.CitaId);
					
					// String
				
						writeString(this.RecordatorioExitoso,dos);
					
					// int
				
		            	dos.writeInt(this.SmsErrorCode);
					
					// String
				
						writeString(this.SmsErrorBody,dos);
					
					// String
				
						writeString(this.SendMail,dos);
					
					// String
				
						writeString(this.MensajeEmail,dos);
					
					// String
				
						writeString(this.TiempoCita,dos);
					
					// String
				
						writeString(this.PacienteCita,dos);
					
					// String
				
						writeString(this.EmailTo,dos);
					
					// String
				
						writeString(this.SendSms,dos);
					
					// String
				
						writeString(this.MensajeSms,dos);
					
					// String
				
						writeString(this.SmsTo,dos);
					
					// String
				
						writeString(this.SmsBody,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CitaId);
					
					// String
				
						writeString(this.RecordatorioExitoso,dos);
					
					// int
				
		            	dos.writeInt(this.SmsErrorCode);
					
					// String
				
						writeString(this.SmsErrorBody,dos);
					
					// String
				
						writeString(this.SendMail,dos);
					
					// String
				
						writeString(this.MensajeEmail,dos);
					
					// String
				
						writeString(this.TiempoCita,dos);
					
					// String
				
						writeString(this.PacienteCita,dos);
					
					// String
				
						writeString(this.EmailTo,dos);
					
					// String
				
						writeString(this.SendSms,dos);
					
					// String
				
						writeString(this.MensajeSms,dos);
					
					// String
				
						writeString(this.SmsTo,dos);
					
					// String
				
						writeString(this.SmsBody,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CitaId="+String.valueOf(CitaId));
		sb.append(",RecordatorioExitoso="+RecordatorioExitoso);
		sb.append(",SmsErrorCode="+String.valueOf(SmsErrorCode));
		sb.append(",SmsErrorBody="+SmsErrorBody);
		sb.append(",SendMail="+SendMail);
		sb.append(",MensajeEmail="+MensajeEmail);
		sb.append(",TiempoCita="+TiempoCita);
		sb.append(",PacienteCita="+PacienteCita);
		sb.append(",EmailTo="+EmailTo);
		sb.append(",SendSms="+SendSms);
		sb.append(",MensajeSms="+MensajeSms);
		sb.append(",SmsTo="+SmsTo);
		sb.append(",SmsBody="+SmsBody);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];
    static byte[] commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];

	
			    public BigDecimal CitaId;

				public BigDecimal getCitaId () {
					return this.CitaId;
				}

				public Boolean CitaIdIsNullable(){
				    return false;
				}
				public Boolean CitaIdIsKey(){
				    return false;
				}
				public Integer CitaIdLength(){
				    return 0;
				}
				public Integer CitaIdPrecision(){
				    return null;
				}
				public String CitaIdDefault(){
				
					return "";
				
				}
				public String CitaIdComment(){
				
				    return "";
				
				}
				public String CitaIdPattern(){
				
					return "";
				
				}
				public String CitaIdOriginalDbColumnName(){
				
					return "CitaId";
				
				}

				
			    public String RecordatorioExitoso;

				public String getRecordatorioExitoso () {
					return this.RecordatorioExitoso;
				}

				public Boolean RecordatorioExitosoIsNullable(){
				    return false;
				}
				public Boolean RecordatorioExitosoIsKey(){
				    return false;
				}
				public Integer RecordatorioExitosoLength(){
				    return null;
				}
				public Integer RecordatorioExitosoPrecision(){
				    return null;
				}
				public String RecordatorioExitosoDefault(){
				
					return null;
				
				}
				public String RecordatorioExitosoComment(){
				
				    return "";
				
				}
				public String RecordatorioExitosoPattern(){
				
					return "";
				
				}
				public String RecordatorioExitosoOriginalDbColumnName(){
				
					return "RecordatorioExitoso";
				
				}

				
			    public int SmsErrorCode;

				public int getSmsErrorCode () {
					return this.SmsErrorCode;
				}

				public Boolean SmsErrorCodeIsNullable(){
				    return false;
				}
				public Boolean SmsErrorCodeIsKey(){
				    return false;
				}
				public Integer SmsErrorCodeLength(){
				    return null;
				}
				public Integer SmsErrorCodePrecision(){
				    return null;
				}
				public String SmsErrorCodeDefault(){
				
					return "";
				
				}
				public String SmsErrorCodeComment(){
				
				    return "";
				
				}
				public String SmsErrorCodePattern(){
				
					return "";
				
				}
				public String SmsErrorCodeOriginalDbColumnName(){
				
					return "SmsErrorCode";
				
				}

				
			    public String SmsErrorBody;

				public String getSmsErrorBody () {
					return this.SmsErrorBody;
				}

				public Boolean SmsErrorBodyIsNullable(){
				    return false;
				}
				public Boolean SmsErrorBodyIsKey(){
				    return false;
				}
				public Integer SmsErrorBodyLength(){
				    return null;
				}
				public Integer SmsErrorBodyPrecision(){
				    return null;
				}
				public String SmsErrorBodyDefault(){
				
					return null;
				
				}
				public String SmsErrorBodyComment(){
				
				    return "";
				
				}
				public String SmsErrorBodyPattern(){
				
					return "";
				
				}
				public String SmsErrorBodyOriginalDbColumnName(){
				
					return "SmsErrorBody";
				
				}

				
			    public String SendMail;

				public String getSendMail () {
					return this.SendMail;
				}

				public Boolean SendMailIsNullable(){
				    return false;
				}
				public Boolean SendMailIsKey(){
				    return false;
				}
				public Integer SendMailLength(){
				    return null;
				}
				public Integer SendMailPrecision(){
				    return null;
				}
				public String SendMailDefault(){
				
					return null;
				
				}
				public String SendMailComment(){
				
				    return "";
				
				}
				public String SendMailPattern(){
				
					return "";
				
				}
				public String SendMailOriginalDbColumnName(){
				
					return "SendMail";
				
				}

				
			    public String MensajeEmail;

				public String getMensajeEmail () {
					return this.MensajeEmail;
				}

				public Boolean MensajeEmailIsNullable(){
				    return false;
				}
				public Boolean MensajeEmailIsKey(){
				    return false;
				}
				public Integer MensajeEmailLength(){
				    return null;
				}
				public Integer MensajeEmailPrecision(){
				    return null;
				}
				public String MensajeEmailDefault(){
				
					return null;
				
				}
				public String MensajeEmailComment(){
				
				    return "";
				
				}
				public String MensajeEmailPattern(){
				
					return "";
				
				}
				public String MensajeEmailOriginalDbColumnName(){
				
					return "MensajeEmail";
				
				}

				
			    public String TiempoCita;

				public String getTiempoCita () {
					return this.TiempoCita;
				}

				public Boolean TiempoCitaIsNullable(){
				    return false;
				}
				public Boolean TiempoCitaIsKey(){
				    return false;
				}
				public Integer TiempoCitaLength(){
				    return null;
				}
				public Integer TiempoCitaPrecision(){
				    return null;
				}
				public String TiempoCitaDefault(){
				
					return null;
				
				}
				public String TiempoCitaComment(){
				
				    return "";
				
				}
				public String TiempoCitaPattern(){
				
					return "";
				
				}
				public String TiempoCitaOriginalDbColumnName(){
				
					return "TiempoCita";
				
				}

				
			    public String PacienteCita;

				public String getPacienteCita () {
					return this.PacienteCita;
				}

				public Boolean PacienteCitaIsNullable(){
				    return false;
				}
				public Boolean PacienteCitaIsKey(){
				    return false;
				}
				public Integer PacienteCitaLength(){
				    return null;
				}
				public Integer PacienteCitaPrecision(){
				    return null;
				}
				public String PacienteCitaDefault(){
				
					return null;
				
				}
				public String PacienteCitaComment(){
				
				    return "";
				
				}
				public String PacienteCitaPattern(){
				
					return "";
				
				}
				public String PacienteCitaOriginalDbColumnName(){
				
					return "PacienteCita";
				
				}

				
			    public String EmailTo;

				public String getEmailTo () {
					return this.EmailTo;
				}

				public Boolean EmailToIsNullable(){
				    return true;
				}
				public Boolean EmailToIsKey(){
				    return false;
				}
				public Integer EmailToLength(){
				    return null;
				}
				public Integer EmailToPrecision(){
				    return null;
				}
				public String EmailToDefault(){
				
					return null;
				
				}
				public String EmailToComment(){
				
				    return "";
				
				}
				public String EmailToPattern(){
				
					return "";
				
				}
				public String EmailToOriginalDbColumnName(){
				
					return "EmailTo";
				
				}

				
			    public String SendSms;

				public String getSendSms () {
					return this.SendSms;
				}

				public Boolean SendSmsIsNullable(){
				    return false;
				}
				public Boolean SendSmsIsKey(){
				    return false;
				}
				public Integer SendSmsLength(){
				    return null;
				}
				public Integer SendSmsPrecision(){
				    return null;
				}
				public String SendSmsDefault(){
				
					return null;
				
				}
				public String SendSmsComment(){
				
				    return "";
				
				}
				public String SendSmsPattern(){
				
					return "";
				
				}
				public String SendSmsOriginalDbColumnName(){
				
					return "SendSms";
				
				}

				
			    public String MensajeSms;

				public String getMensajeSms () {
					return this.MensajeSms;
				}

				public Boolean MensajeSmsIsNullable(){
				    return false;
				}
				public Boolean MensajeSmsIsKey(){
				    return false;
				}
				public Integer MensajeSmsLength(){
				    return null;
				}
				public Integer MensajeSmsPrecision(){
				    return null;
				}
				public String MensajeSmsDefault(){
				
					return null;
				
				}
				public String MensajeSmsComment(){
				
				    return "";
				
				}
				public String MensajeSmsPattern(){
				
					return "";
				
				}
				public String MensajeSmsOriginalDbColumnName(){
				
					return "MensajeSms";
				
				}

				
			    public String SmsTo;

				public String getSmsTo () {
					return this.SmsTo;
				}

				public Boolean SmsToIsNullable(){
				    return true;
				}
				public Boolean SmsToIsKey(){
				    return false;
				}
				public Integer SmsToLength(){
				    return null;
				}
				public Integer SmsToPrecision(){
				    return null;
				}
				public String SmsToDefault(){
				
					return null;
				
				}
				public String SmsToComment(){
				
				    return "";
				
				}
				public String SmsToPattern(){
				
					return "";
				
				}
				public String SmsToOriginalDbColumnName(){
				
					return "SmsTo";
				
				}

				
			    public String SmsBody;

				public String getSmsBody () {
					return this.SmsBody;
				}

				public Boolean SmsBodyIsNullable(){
				    return false;
				}
				public Boolean SmsBodyIsKey(){
				    return false;
				}
				public Integer SmsBodyLength(){
				    return null;
				}
				public Integer SmsBodyPrecision(){
				    return null;
				}
				public String SmsBodyDefault(){
				
					return "";
				
				}
				public String SmsBodyComment(){
				
				    return "";
				
				}
				public String SmsBodyPattern(){
				
					return "";
				
				}
				public String SmsBodyOriginalDbColumnName(){
				
					return "SmsBody";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
						this.CitaId = (BigDecimal) dis.readObject();
					
					this.RecordatorioExitoso = readString(dis);
					
			        this.SmsErrorCode = dis.readInt();
					
					this.SmsErrorBody = readString(dis);
					
					this.SendMail = readString(dis);
					
					this.MensajeEmail = readString(dis);
					
					this.TiempoCita = readString(dis);
					
					this.PacienteCita = readString(dis);
					
					this.EmailTo = readString(dis);
					
					this.SendSms = readString(dis);
					
					this.MensajeSms = readString(dis);
					
					this.SmsTo = readString(dis);
					
					this.SmsBody = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
						this.CitaId = (BigDecimal) dis.readObject();
					
					this.RecordatorioExitoso = readString(dis);
					
			        this.SmsErrorCode = dis.readInt();
					
					this.SmsErrorBody = readString(dis);
					
					this.SendMail = readString(dis);
					
					this.MensajeEmail = readString(dis);
					
					this.TiempoCita = readString(dis);
					
					this.PacienteCita = readString(dis);
					
					this.EmailTo = readString(dis);
					
					this.SendSms = readString(dis);
					
					this.MensajeSms = readString(dis);
					
					this.SmsTo = readString(dis);
					
					this.SmsBody = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.CitaId);
					
					// String
				
						writeString(this.RecordatorioExitoso,dos);
					
					// int
				
		            	dos.writeInt(this.SmsErrorCode);
					
					// String
				
						writeString(this.SmsErrorBody,dos);
					
					// String
				
						writeString(this.SendMail,dos);
					
					// String
				
						writeString(this.MensajeEmail,dos);
					
					// String
				
						writeString(this.TiempoCita,dos);
					
					// String
				
						writeString(this.PacienteCita,dos);
					
					// String
				
						writeString(this.EmailTo,dos);
					
					// String
				
						writeString(this.SendSms,dos);
					
					// String
				
						writeString(this.MensajeSms,dos);
					
					// String
				
						writeString(this.SmsTo,dos);
					
					// String
				
						writeString(this.SmsBody,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CitaId);
					
					// String
				
						writeString(this.RecordatorioExitoso,dos);
					
					// int
				
		            	dos.writeInt(this.SmsErrorCode);
					
					// String
				
						writeString(this.SmsErrorBody,dos);
					
					// String
				
						writeString(this.SendMail,dos);
					
					// String
				
						writeString(this.MensajeEmail,dos);
					
					// String
				
						writeString(this.TiempoCita,dos);
					
					// String
				
						writeString(this.PacienteCita,dos);
					
					// String
				
						writeString(this.EmailTo,dos);
					
					// String
				
						writeString(this.SendSms,dos);
					
					// String
				
						writeString(this.MensajeSms,dos);
					
					// String
				
						writeString(this.SmsTo,dos);
					
					// String
				
						writeString(this.SmsBody,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CitaId="+String.valueOf(CitaId));
		sb.append(",RecordatorioExitoso="+RecordatorioExitoso);
		sb.append(",SmsErrorCode="+String.valueOf(SmsErrorCode));
		sb.append(",SmsErrorBody="+SmsErrorBody);
		sb.append(",SendMail="+SendMail);
		sb.append(",MensajeEmail="+MensajeEmail);
		sb.append(",TiempoCita="+TiempoCita);
		sb.append(",PacienteCita="+PacienteCita);
		sb.append(",EmailTo="+EmailTo);
		sb.append(",SendSms="+SendSms);
		sb.append(",MensajeSms="+MensajeSms);
		sb.append(",SmsTo="+SmsTo);
		sb.append(",SmsBody="+SmsBody);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row17Struct row17 = new row17Struct();
row18Struct row18 = new row18Struct();
row21Struct row21 = new row21Struct();
row22Struct row22 = new row22Struct();
row20Struct row20 = new row20Struct();
row7Struct row7 = new row7Struct();
row25Struct row25 = new row25Struct();
row23Struct row23 = new row23Struct();





	
	/**
	 * [tFlowToIterate_2 begin ] start
	 */

	
				TalendThreadPool mtp_tJava_4 = new TalendThreadPool(10);

				globalMap.put("lockWrite_tJava_4", new Object[0]);
				int threadIdCounter_tJava_4 =0;
						
			int NB_ITERATE_tJava_4 = 0; //for statistics
			

	
		
		ok_Hash.put("tFlowToIterate_2", false);
		start_Hash.put("tFlowToIterate_2", System.currentTimeMillis());
		
	
	currentComponent="tFlowToIterate_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row18");
					}
				
		int tos_count_tFlowToIterate_2 = 0;
		

int nb_line_tFlowToIterate_2 = 0;
int counter_tFlowToIterate_2 = 0;

 



/**
 * [tFlowToIterate_2 begin ] stop
 */



	
	/**
	 * [tFilterRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_4", false);
		start_Hash.put("tFilterRow_4", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row17");
					}
				
		int tos_count_tFilterRow_4 = 0;
		
    int nb_line_tFilterRow_4 = 0;
    int nb_line_ok_tFilterRow_4 = 0;
    int nb_line_reject_tFilterRow_4 = 0;

    class Operator_tFilterRow_4 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_4(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_4 begin ] stop
 */



	
	/**
	 * [tHashInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_2", false);
		start_Hash.put("tHashInput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_2";
	
	
		int tos_count_tHashInput_2 = 0;
		


int nb_line_tHashInput_2 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct> tHashFile_tHashInput_2 = mf_tHashInput_2.getAdvancedMemoryHashFile("tHashFile_RecordarCitasMedicas_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_2==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row10Struct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
while (iterator_tHashInput_2.hasNext()) {
    row10Struct next_tHashInput_2 = iterator_tHashInput_2.next();

	row17.CitaId = next_tHashInput_2.CitaId;
	row17.RecordatorioExitoso = next_tHashInput_2.RecordatorioExitoso;
	row17.SmsErrorCode = next_tHashInput_2.SmsErrorCode;
	row17.SmsErrorBody = next_tHashInput_2.SmsErrorBody;
	row17.SendMail = next_tHashInput_2.SendMail;
	row17.MensajeEmail = next_tHashInput_2.MensajeEmail;
	row17.TiempoCita = next_tHashInput_2.TiempoCita;
	row17.PacienteCita = next_tHashInput_2.PacienteCita;
	row17.EmailTo = next_tHashInput_2.EmailTo;
	row17.SendSms = next_tHashInput_2.SendSms;
	row17.MensajeSms = next_tHashInput_2.MensajeSms;
	row17.SmsTo = next_tHashInput_2.SmsTo;
	row17.SmsBody = next_tHashInput_2.SmsBody;

 



/**
 * [tHashInput_2 begin ] stop
 */
	
	/**
	 * [tHashInput_2 main ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 


	tos_count_tHashInput_2++;

/**
 * [tHashInput_2 main ] stop
 */
	
	/**
	 * [tHashInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tFilterRow_4 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row17"
						
						);
					}
					

          row18 = null;
    Operator_tFilterRow_4 ope_tFilterRow_4 = new Operator_tFilterRow_4("&&");    
        ope_tFilterRow_4.matches((row17.SendMail == null? false : row17.SendMail.matches("1") == true)
                       , " SendMail.matches(\"1\") == true failed");
    
    if (ope_tFilterRow_4.getMatchFlag()) {
              if(row18 == null){ 
                row18 = new row18Struct();
              }
               row18.CitaId = row17.CitaId;
               row18.RecordatorioExitoso = row17.RecordatorioExitoso;
               row18.SmsErrorCode = row17.SmsErrorCode;
               row18.SmsErrorBody = row17.SmsErrorBody;
               row18.SendMail = row17.SendMail;
               row18.MensajeEmail = row17.MensajeEmail;
               row18.TiempoCita = row17.TiempoCita;
               row18.PacienteCita = row17.PacienteCita;
               row18.EmailTo = row17.EmailTo;
               row18.SendSms = row17.SendSms;
               row18.MensajeSms = row17.MensajeSms;
               row18.SmsTo = row17.SmsTo;
               row18.SmsBody = row17.SmsBody;    
      nb_line_ok_tFilterRow_4++;
    } else {
      nb_line_reject_tFilterRow_4++;
    }

nb_line_tFilterRow_4++;

 


	tos_count_tFilterRow_4++;

/**
 * [tFilterRow_4 main ] stop
 */
	
	/**
	 * [tFilterRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";
	
	

 



/**
 * [tFilterRow_4 process_data_begin ] stop
 */
// Start of branch "row18"
if(row18 != null) { 



	
	/**
	 * [tFlowToIterate_2 main ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row18"
						
						);
					}
					


    	            
            globalMap.put("row18.CitaId", row18.CitaId);
    	            
            globalMap.put("row18.RecordatorioExitoso", row18.RecordatorioExitoso);
    	            
            globalMap.put("row18.SmsErrorCode", row18.SmsErrorCode);
    	            
            globalMap.put("row18.SmsErrorBody", row18.SmsErrorBody);
    	            
            globalMap.put("row18.SendMail", row18.SendMail);
    	            
            globalMap.put("row18.MensajeEmail", row18.MensajeEmail);
    	            
            globalMap.put("row18.TiempoCita", row18.TiempoCita);
    	            
            globalMap.put("row18.PacienteCita", row18.PacienteCita);
    	            
            globalMap.put("row18.EmailTo", row18.EmailTo);
    	            
            globalMap.put("row18.SendSms", row18.SendSms);
    	            
            globalMap.put("row18.MensajeSms", row18.MensajeSms);
    	            
            globalMap.put("row18.SmsTo", row18.SmsTo);
    	            
            globalMap.put("row18.SmsBody", row18.SmsBody);
    	
 
	   nb_line_tFlowToIterate_2++;  
       counter_tFlowToIterate_2++;
       globalMap.put("tFlowToIterate_2_CURRENT_ITERATION", counter_tFlowToIterate_2);
 


	tos_count_tFlowToIterate_2++;

/**
 * [tFlowToIterate_2 main ] stop
 */
	
	/**
	 * [tFlowToIterate_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_2";
	
	

 



/**
 * [tFlowToIterate_2 process_data_begin ] stop
 */
	NB_ITERATE_tJava_4++;
	
				
			class tJava_4Thread extends TalendThread {//implements routines.system.TalendThreadPool.PropertySettable
				class ThreadedMap extends java.util.HashMap<String, Object> {
			
					private static final long serialVersionUID = 0L;
		
					public ThreadedMap(java.util.Map<String, Object> globalMap) {
						super(globalMap);
					}
		
					@Override
					public Object put(String key, Object value) {
						
						synchronized (RecordarCitasMedicas.this.obj) {
						
							super.put(key, value);
							return RecordarCitasMedicas.this.globalMap.put(key, value);
						
						}
						
					}
				}	
				
				private java.util.Map<String, Object> globalMap = null;
				boolean isRunning = false;
				String iterateId = "";
				
				
						row17Struct row17 = new row17Struct();
row18Struct row18 = new row18Struct();
row21Struct row21 = new row21Struct();
row22Struct row22 = new row22Struct();
row20Struct row20 = new row20Struct();
row7Struct row7 = new row7Struct();
row25Struct row25 = new row25Struct();
row23Struct row23 = new row23Struct();

					
	
				public tJava_4Thread(java.util.Map<String, Object> globalMap,row17Struct row17,row18Struct row18,row21Struct row21,row22Struct row22,row20Struct row20,row7Struct row7,row25Struct row25,row23Struct row23, int threadID) {
					super();
					
		        		if(row17 != null){
		            		
		    					this.row17.CitaId = row17.CitaId;
		    	            
		    					this.row17.RecordatorioExitoso = row17.RecordatorioExitoso;
		    	            
		    					this.row17.SmsErrorCode = row17.SmsErrorCode;
		    	            
		    					this.row17.SmsErrorBody = row17.SmsErrorBody;
		    	            
		    					this.row17.SendMail = row17.SendMail;
		    	            
		    					this.row17.MensajeEmail = row17.MensajeEmail;
		    	            
		    					this.row17.TiempoCita = row17.TiempoCita;
		    	            
		    					this.row17.PacienteCita = row17.PacienteCita;
		    	            
		    					this.row17.EmailTo = row17.EmailTo;
		    	            
		    					this.row17.SendSms = row17.SendSms;
		    	            
		    					this.row17.MensajeSms = row17.MensajeSms;
		    	            
		    					this.row17.SmsTo = row17.SmsTo;
		    	            
		    					this.row17.SmsBody = row17.SmsBody;
		    	            
		        		}
		        		
		        		if(row18 != null){
		            		
		    					this.row18.CitaId = row18.CitaId;
		    	            
		    					this.row18.RecordatorioExitoso = row18.RecordatorioExitoso;
		    	            
		    					this.row18.SmsErrorCode = row18.SmsErrorCode;
		    	            
		    					this.row18.SmsErrorBody = row18.SmsErrorBody;
		    	            
		    					this.row18.SendMail = row18.SendMail;
		    	            
		    					this.row18.MensajeEmail = row18.MensajeEmail;
		    	            
		    					this.row18.TiempoCita = row18.TiempoCita;
		    	            
		    					this.row18.PacienteCita = row18.PacienteCita;
		    	            
		    					this.row18.EmailTo = row18.EmailTo;
		    	            
		    					this.row18.SendSms = row18.SendSms;
		    	            
		    					this.row18.MensajeSms = row18.MensajeSms;
		    	            
		    					this.row18.SmsTo = row18.SmsTo;
		    	            
		    					this.row18.SmsBody = row18.SmsBody;
		    	            
		        		}
		        		
		        		if(row21 != null){
		            		
		    					this.row21.CitaId = row21.CitaId;
		    	            
		    					this.row21.RecordatorioExitoso = row21.RecordatorioExitoso;
		    	            
		    					this.row21.EmailTo = row21.EmailTo;
		    	            
		        		}
		        		
		        		if(row22 != null){
		            		
		    					this.row22.CitaId = row22.CitaId;
		    	            
		    					this.row22.RecordatorioExitoso = row22.RecordatorioExitoso;
		    	            
		    					this.row22.EmailTo = row22.EmailTo;
		    	            
		        		}
		        		
		        		if(row23 != null){
		            		
		    					this.row23.CitaId = row23.CitaId;
		    	            
		    					this.row23.RecordatorioExitoso = row23.RecordatorioExitoso;
		    	            
		    					this.row23.EmailTo = row23.EmailTo;
		    	            
		    					this.row23.errorMessage = row23.errorMessage;
		    	            
		        		}
		        		
		        		if(row20 != null){
		            		
		    					this.row20.CitaId = row20.CitaId;
		    	            
		    					this.row20.RecordatorioExitoso = row20.RecordatorioExitoso;
		    	            
		    					this.row20.EmailTo = row20.EmailTo;
		    	            
		        		}
		        		
		        		if(row7 != null){
		            		
		    					this.row7.ID = row7.ID;
		    	            
		    					this.row7.RECORDATORIO = row7.RECORDATORIO;
		    	            
		        		}
		        		
		        		if(row25 != null){
		            		
		    					this.row25.ID = row25.ID;
		    	            
		    					this.row25.RECORDATORIO = row25.RECORDATORIO;
		    	            
		        		}
		        		
					
						synchronized (RecordarCitasMedicas.this.obj) {
							this.globalMap = new ThreadedMap(globalMap);
					
						}
					iterateId = "." + threadID;
					
					
				}


				public void run() {
					

					java.util.Map threadRunResultMap = new java.util.HashMap();
					threadRunResultMap.put("errorCode", null);
					threadRunResultMap.put("status", "");
					threadLocal.set(threadRunResultMap);
					
					this.isRunning = true;
					String currentComponent = "";
					String cLabel = null;
					java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();
					
					try {			
						
							if(execStat){
								runStat.updateStatOnConnection("iterate2",0,"exec"+iterateId);
							}				
						






	
	/**
	 * [tDBCommit_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBCommit_1", false);
		start_Hash.put("tDBCommit_1", System.currentTimeMillis());
		
	
	currentComponent="tDBCommit_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row25");
					}
				
		int tos_count_tDBCommit_1 = 0;
		

 



/**
 * [tDBCommit_1 begin ] stop
 */



	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tDBOutput_1 = 0;
		






        int updateKeyCount_tDBOutput_1 = 1;
        if(updateKeyCount_tDBOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_1 == 2 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tDBOutput_1 = 0;
    int nb_line_update_tDBOutput_1 = 0;
    int nb_line_inserted_tDBOutput_1 = 0;
    int nb_line_deleted_tDBOutput_1 = 0;
    int nb_line_rejected_tDBOutput_1 = 0;

    int tmp_batchUpdateCount_tDBOutput_1 = 0;

    int deletedCount_tDBOutput_1=0;
    int updatedCount_tDBOutput_1=0;
    int insertedCount_tDBOutput_1=0;
    int rowsToCommitCount_tDBOutput_1=0;
    int rejectedCount_tDBOutput_1=0;

    boolean whetherReject_tDBOutput_1 = false;

    java.sql.Connection conn_tDBOutput_1 = null;

    //optional table
    String dbschema_tDBOutput_1 = null;
    String tableName_tDBOutput_1 = null;
        dbschema_tDBOutput_1 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tDBOutput_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tDBOutput_1=0;

        if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
            tableName_tDBOutput_1 = ("AGE_CITAS");
        } else {
            tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "." + ("AGE_CITAS");
        }
                String update_tDBOutput_1 = "UPDATE " + tableName_tDBOutput_1 + " SET RECORDATORIO = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(update_tDBOutput_1);
                resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);





 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_8", false);
		start_Hash.put("tJavaRow_8", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row20");
					}
				
		int tos_count_tJavaRow_8 = 0;
		

int nb_line_tJavaRow_8 = 0;

 



/**
 * [tJavaRow_8 begin ] stop
 */




	
	/**
	 * [tWarn_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_2", false);
		start_Hash.put("tWarn_2", System.currentTimeMillis());
		
	
	currentComponent="tWarn_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row23");
					}
				
		int tos_count_tWarn_2 = 0;
		

 



/**
 * [tWarn_2 begin ] stop
 */



	
	/**
	 * [tFilterRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_5", false);
		start_Hash.put("tFilterRow_5", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row22");
					}
				
		int tos_count_tFilterRow_5 = 0;
		
    int nb_line_tFilterRow_5 = 0;
    int nb_line_ok_tFilterRow_5 = 0;
    int nb_line_reject_tFilterRow_5 = 0;

    class Operator_tFilterRow_5 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_5(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_5 begin ] stop
 */



	
	/**
	 * [tJavaRow_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_7", false);
		start_Hash.put("tJavaRow_7", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row21");
					}
				
		int tos_count_tJavaRow_7 = 0;
		

int nb_line_tJavaRow_7 = 0;

 



/**
 * [tJavaRow_7 begin ] stop
 */



	
	/**
	 * [tJava_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_4", false);
		start_Hash.put("tJava_4", System.currentTimeMillis());
		
	
	currentComponent="tJava_4";
	
	
		int tos_count_tJava_4 = 0;
		


String foo = "bar";
 



/**
 * [tJava_4 begin ] stop
 */
	
	/**
	 * [tJava_4 main ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 


	tos_count_tJava_4++;

/**
 * [tJava_4 main ] stop
 */
	
	/**
	 * [tJava_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_7 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row21"
						
						);
					}
					

    
//Code generated according to input schema and output schema
row22.CitaId = row18.CitaId;
row22.EmailTo = row18.EmailTo;



StringBuilder emailTemplate = new StringBuilder();
emailTemplate.append("<!DOCTYPE html>\n");
emailTemplate.append("<html>\n");
emailTemplate.append("<head>\n");
emailTemplate.append("    <title>Recordatorio de cita médica</title>\n");
emailTemplate.append("    <style>\n");
emailTemplate.append("        /* Estilos generales */\n");
emailTemplate.append("        body {\n");
emailTemplate.append("            font-family: Arial, sans-serif;\n");
emailTemplate.append("            margin: 0;\n");
emailTemplate.append("            padding: 0;\n");
emailTemplate.append("            background-color: #f2f2f2;\n");
emailTemplate.append("        }\n");
emailTemplate.append("        .container {\n");
emailTemplate.append("            max-width: 600px;\n");
emailTemplate.append("            margin: 0 auto;\n");
emailTemplate.append("            padding: 20px;\n");
emailTemplate.append("            background-color: #fff;\n");
emailTemplate.append("            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n");
emailTemplate.append("        }\n");
emailTemplate.append("        .logo-header {\n");
emailTemplate.append("            display: block;\n");
emailTemplate.append("            margin: 0 auto;\n");
emailTemplate.append("        }\n");
emailTemplate.append("        .header {\n");
emailTemplate.append("            text-align: center;\n");
emailTemplate.append("            color: #2a2a2a;\n");
emailTemplate.append("            font-size: 24px;\n");
emailTemplate.append("            margin-top: 20px;\n");
emailTemplate.append("        }\n");
emailTemplate.append("        .message {\n");
emailTemplate.append("            margin-top: 30px;\n");
emailTemplate.append("            padding: 20px;\n");
emailTemplate.append("            color: #444;\n");
emailTemplate.append("            font-size: 18px;\n");
emailTemplate.append("            line-height: 1.6;\n");
emailTemplate.append("            border-top: 1px solid #ccc;\n");
emailTemplate.append("            border-bottom: 1px solid #ccc;\n");
emailTemplate.append("        }\n");
emailTemplate.append("        .footer {\n");
emailTemplate.append("            text-align: center;\n");
emailTemplate.append("            font-size: 14px;\n");
emailTemplate.append("            color: #777;\n");
emailTemplate.append("            margin-top: 30px;\n");
emailTemplate.append("        }\n");
emailTemplate.append("        .logo-footer {\n");
emailTemplate.append("            display: block;\n");
emailTemplate.append("            margin: 20px auto 0;\n");
emailTemplate.append("            max-width: 180px;\n");
emailTemplate.append("        }\n");
emailTemplate.append("        .footer-content {\n");
emailTemplate.append("            margin-top: 20px;\n");
emailTemplate.append("            line-height: 1.4;\n");
emailTemplate.append("        }\n");
emailTemplate.append("        .footer a {\n");
emailTemplate.append("            color: #777;\n");
emailTemplate.append("            text-decoration: none;\n");
emailTemplate.append("        }\n");
emailTemplate.append("    </style>\n");
emailTemplate.append("</head>\n");
emailTemplate.append("<body>\n");
emailTemplate.append("    <div class=\"container\">\n");
emailTemplate.append("        <img class=\"logo-header\" src=\"https://cdn4.iconfinder.com/data/icons/miu-shadow-social/48/mail-128.png\" alt=\"Logo\" width=\"80\" height=\"80\">\n");
emailTemplate.append("        <div class=\"header\">\n");
emailTemplate.append("            <h2>Recordatorio de cita médica</h2>\n");
emailTemplate.append("            <p>${TiempoCita}, ${PacienteCita}</p>\n");
emailTemplate.append("        </div>\n");
emailTemplate.append("        <div class=\"message\">\n");
emailTemplate.append("            <p>${MensajeEmail}.</p>\n");
emailTemplate.append("        </div>\n");
emailTemplate.append("    </div>\n");
emailTemplate.append("    <div class=\"footer\">\n");
emailTemplate.append("        <img class=\"logo-footer\" src=\"https://saludsis.mil.co/Content/images/logo-min_.png\" alt=\"Logo\" width=\"180\" height=\"auto\">\n");
emailTemplate.append("        <div class=\"footer-content\">\n");
emailTemplate.append("            <p>Atentamente,</p>\n");
emailTemplate.append("            <p><b>Dirección General de Sanidad Militar - Vertical de Salud.</b></p>\n");
emailTemplate.append("            <p>Avenida Calle 26 No 69 – 76 Torre 3 Piso 4</p>\n");
emailTemplate.append("            <p>PBX: (57)1 3238555 - Línea Nacional: 018000111335</p>\n");
emailTemplate.append("            <p><a href=\"www.sanidadfuerzasmilitares.mil.co\">www.sanidadfuerzasmilitares.mil.co</a></p>\n");
emailTemplate.append("        </div>\n");
emailTemplate.append("    </div>\n");
emailTemplate.append("</body>\n");
emailTemplate.append("</html>\n");


// Reemplaza las variables en la plantilla con los valores adecuados
String emailContent = emailTemplate.toString();
String BodyMail = emailContent
                .replace("${TiempoCita}", row18.TiempoCita)
                .replace("${PacienteCita}", row18.PacienteCita)
                .replace("${MensajeEmail}", row18.MensajeEmail);



// // SendEmailSmtp(String host, String port, String username, String password, String from, String to, String subject, String body)

boolean emailSent = Utils.SendEmailSmtp(
        context.SMTPHost,
        context.SMTPPort,
        context.UsernameMail,
        context.PasswordMail,
        "SALUDSIS<" + context.FromMail+">",
        row18.EmailTo,
        "Recordatorio de cita médica",
        BodyMail);

if(emailSent){
    System.out.println("CitaId: " + row18.CitaId + " EmailTo: " + row18.EmailTo + " - Email enviado.");
    row22.RecordatorioExitoso = "1";
}else{
    System.out.println("CitaId: " + row18.CitaId + " EmailTo: " + row18.EmailTo + " - No fue posible enviar correo.");
    row22.RecordatorioExitoso = "0";
}
    nb_line_tJavaRow_7++;   

 


	tos_count_tJavaRow_7++;

/**
 * [tJavaRow_7 main ] stop
 */
	
	/**
	 * [tJavaRow_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 process_data_begin ] stop
 */

	
	/**
	 * [tFilterRow_5 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row22"
						
						);
					}
					

          row23 = null;
          row20 = null;
    Operator_tFilterRow_5 ope_tFilterRow_5 = new Operator_tFilterRow_5("&&");    
        ope_tFilterRow_5.matches((row22.RecordatorioExitoso == null? false : row22.RecordatorioExitoso.matches("1") == true)
                       , " RecordatorioExitoso.matches(\"1\") == true failed");
    
    if (ope_tFilterRow_5.getMatchFlag()) {
              if(row20 == null){ 
                row20 = new row20Struct();
              }
               row20.CitaId = row22.CitaId;
               row20.RecordatorioExitoso = row22.RecordatorioExitoso;
               row20.EmailTo = row22.EmailTo;    
      nb_line_ok_tFilterRow_5++;
    } else {
            if (row23 == null){
              row23 = new row23Struct();
            }
                row23.CitaId = row22.CitaId;
                row23.RecordatorioExitoso = row22.RecordatorioExitoso;
                row23.EmailTo = row22.EmailTo;
	            row23.errorMessage = ope_tFilterRow_5.getErrorMsg();
      nb_line_reject_tFilterRow_5++;
    }

nb_line_tFilterRow_5++;

 


	tos_count_tFilterRow_5++;

/**
 * [tFilterRow_5 main ] stop
 */
	
	/**
	 * [tFilterRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";
	
	

 



/**
 * [tFilterRow_5 process_data_begin ] stop
 */
// Start of branch "row20"
if(row20 != null) { 



	
	/**
	 * [tJavaRow_8 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row20"
						
						);
					}
					

    //Code generated according to input schema and output schema
//row7.CitaId = row20.CitaId;
//row7.RecordatorioExitoso = row20.RecordatorioExitoso;
//row7.EmailTo = row20.EmailTo;


row7.ID = row20.CitaId;
row7.RECORDATORIO = "Si";

    nb_line_tJavaRow_8++;   

 


	tos_count_tJavaRow_8++;

/**
 * [tJavaRow_8 main ] stop
 */
	
	/**
	 * [tJavaRow_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	

 



/**
 * [tJavaRow_8 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					



            row25 = null;
        whetherReject_tDBOutput_1 = false;
                    if(row7.RECORDATORIO == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(1, row7.RECORDATORIO);
}


                    pstmt_tDBOutput_1.setBigDecimal(2 + count_tDBOutput_1, row7.ID);

                try {
                    nb_line_tDBOutput_1++;
                    int processedCount_tDBOutput_1 = pstmt_tDBOutput_1.executeUpdate();
                    updatedCount_tDBOutput_1 += processedCount_tDBOutput_1;
                    rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
                } catch(java.lang.Exception e_tDBOutput_1) {
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
                    whetherReject_tDBOutput_1 = true;
                        throw(e_tDBOutput_1);
                }
            if(!whetherReject_tDBOutput_1) {
                            row25 = new row25Struct();
                                row25.ID = row7.ID;
                                row25.RECORDATORIO = row7.RECORDATORIO;
            }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
// Start of branch "row25"
if(row25 != null) { 



	
	/**
	 * [tDBCommit_1 main ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row25"
						
						);
					}
					

	java.sql.Connection conn_tDBCommit_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");

if(conn_tDBCommit_1 != null && !conn_tDBCommit_1.isClosed()) {
	
			
			conn_tDBCommit_1.commit();
			
	
}

 


	tos_count_tDBCommit_1++;

/**
 * [tDBCommit_1 main ] stop
 */
	
	/**
	 * [tDBCommit_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";
	
	

 



/**
 * [tDBCommit_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBCommit_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";
	
	

 



/**
 * [tDBCommit_1 process_data_end ] stop
 */

} // End of branch "row25"




	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	

 



/**
 * [tJavaRow_8 process_data_end ] stop
 */

} // End of branch "row20"




// Start of branch "row23"
if(row23 != null) { 



	
	/**
	 * [tWarn_2 main ] start
	 */

	

	
	
	currentComponent="tWarn_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row23"
						
						);
					}
					

		
try {
	
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_2", "", Thread.currentThread().getId() + "", "WARN","","CitaId: " + row23.CitaId + " EmailTo: " + row23.EmailTo,"", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_2", 4, "CitaId: " + row23.CitaId + " EmailTo: " + row23.EmailTo, 42);
	tLogCatcher_1Process(globalMap);
	globalMap.put("tWarn_2_WARN_MESSAGES", "CitaId: " + row23.CitaId + " EmailTo: " + row23.EmailTo); 
	globalMap.put("tWarn_2_WARN_PRIORITY", 4);
	globalMap.put("tWarn_2_WARN_CODE", 42);
	
} catch (Exception e_tWarn_2) {
globalMap.put("tWarn_2_ERROR_MESSAGE",e_tWarn_2.getMessage());
	logIgnoredError(String.format("tWarn_2 - tWarn failed to log message due to internal error: %s", e_tWarn_2), e_tWarn_2);
}


 


	tos_count_tWarn_2++;

/**
 * [tWarn_2 main ] stop
 */
	
	/**
	 * [tWarn_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tWarn_2";
	
	

 



/**
 * [tWarn_2 process_data_begin ] stop
 */
	
	/**
	 * [tWarn_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tWarn_2";
	
	

 



/**
 * [tWarn_2 process_data_end ] stop
 */

} // End of branch "row23"




	
	/**
	 * [tFilterRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";
	
	

 



/**
 * [tFilterRow_5 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 process_data_end ] stop
 */



	
	/**
	 * [tJava_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 process_data_end ] stop
 */
	
	/**
	 * [tJava_4 end ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 

ok_Hash.put("tJava_4", true);
end_Hash.put("tJava_4", System.currentTimeMillis());




/**
 * [tJava_4 end ] stop
 */

	
	/**
	 * [tJavaRow_7 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

globalMap.put("tJavaRow_7_NB_LINE",nb_line_tJavaRow_7);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row21");
			  	}
			  	
 

ok_Hash.put("tJavaRow_7", true);
end_Hash.put("tJavaRow_7", System.currentTimeMillis());




/**
 * [tJavaRow_7 end ] stop
 */

	
	/**
	 * [tFilterRow_5 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";
	
	
    globalMap.put("tFilterRow_5_NB_LINE", nb_line_tFilterRow_5);
    globalMap.put("tFilterRow_5_NB_LINE_OK", nb_line_ok_tFilterRow_5);
    globalMap.put("tFilterRow_5_NB_LINE_REJECT", nb_line_reject_tFilterRow_5);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row22");
			  	}
			  	
 

ok_Hash.put("tFilterRow_5", true);
end_Hash.put("tFilterRow_5", System.currentTimeMillis());




/**
 * [tFilterRow_5 end ] stop
 */

	
	/**
	 * [tJavaRow_8 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	

globalMap.put("tJavaRow_8_NB_LINE",nb_line_tJavaRow_8);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row20");
			  	}
			  	
 

ok_Hash.put("tJavaRow_8", true);
end_Hash.put("tJavaRow_8", System.currentTimeMillis());




/**
 * [tJavaRow_8 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	
	



	
        if(pstmt_tDBOutput_1 != null) {
			
				pstmt_tDBOutput_1.close();
				resourceMap.remove("pstmt_tDBOutput_1");
			
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);

	
	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */

	
	/**
	 * [tDBCommit_1 end ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row25");
			  	}
			  	
 

ok_Hash.put("tDBCommit_1", true);
end_Hash.put("tDBCommit_1", System.currentTimeMillis());




/**
 * [tDBCommit_1 end ] stop
 */










	
	/**
	 * [tWarn_2 end ] start
	 */

	

	
	
	currentComponent="tWarn_2";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row23");
			  	}
			  	
 

ok_Hash.put("tWarn_2", true);
end_Hash.put("tWarn_2", System.currentTimeMillis());




/**
 * [tWarn_2 end ] stop
 */









					if(execStat){
						runStat.updateStatOnConnection("iterate2",2,"exec"+iterateId);
					}				
				
						} catch (java.lang.Exception e) {
							this.status = "failure";
							Integer localErrorCode = (Integer) (((java.util.Map) threadLocal.get()).get("errorCode"));
							if (localErrorCode != null) {
								if (this.errorCode == null || localErrorCode.compareTo(this.errorCode) > 0) {
									this.errorCode = localErrorCode;
								}
							}					
				            		            
		                    TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
							
							this.exception = te;
							talendThreadPool.setErrorThread(this);
				            talendThreadPool.stopAllWorkers();
	
						} catch (java.lang.Error error){
							this.status = "failure";
							Integer localErrorCode = (Integer) (((java.util.Map) threadLocal.get()).get("errorCode"));
							if (localErrorCode != null) {
								if (this.errorCode == null || localErrorCode.compareTo(this.errorCode) > 0) {
									this.errorCode = localErrorCode;
								}
							}					
							this.error = error;				            		            
							talendThreadPool.setErrorThread(this);
				            talendThreadPool.stopAllWorkers();
						} finally {
							try{
								
	
	/**
	 * [tJava_4 finally ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 finally ] stop
 */

	
	/**
	 * [tJavaRow_7 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 finally ] stop
 */

	
	/**
	 * [tFilterRow_5 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";
	
	

 



/**
 * [tFilterRow_5 finally ] stop
 */

	
	/**
	 * [tJavaRow_8 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	

 



/**
 * [tJavaRow_8 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */

	
	/**
	 * [tDBCommit_1 finally ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";
	
	

 



/**
 * [tDBCommit_1 finally ] stop
 */










	
	/**
	 * [tWarn_2 finally ] start
	 */

	

	
	
	currentComponent="tWarn_2";
	
	

 



/**
 * [tWarn_2 finally ] stop
 */









							}catch(java.lang.Exception e){	
								//ignore
							}catch(java.lang.Error error){
								//ignore
							}
							resourceMap = null;
						}
						this.isRunning = false;
				
						Integer localErrorCode = (Integer) (((java.util.Map) threadLocal.get()).get("errorCode"));
						String localStatus = (String) (((java.util.Map) threadLocal.get()).get("status"));
						if (localErrorCode != null) {
							if (this.errorCode == null || localErrorCode.compareTo(this.errorCode) > 0) {
								this.errorCode = localErrorCode;
							}
						} 
						if (!this.status.equals("failure")) {
							this.status = localStatus;
						}
						
						talendThreadPool.getTalendThreadResult().setErrorCode(this.errorCode);
						talendThreadPool.getTalendThreadResult().setStatus(this.status);						
					}
				}

				tJava_4Thread bt_tJava_4 = new tJava_4Thread(globalMap,row17,row18,row21,row22,row20,row7,row25,row23,threadIdCounter_tJava_4++);
				mtp_tJava_4.execute(bt_tJava_4);

				




	
	/**
	 * [tFlowToIterate_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_2";
	
	

 



/**
 * [tFlowToIterate_2 process_data_end ] stop
 */

} // End of branch "row18"




	
	/**
	 * [tFilterRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";
	
	

 



/**
 * [tFilterRow_4 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_2 end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	
    

		
			nb_line_tHashInput_2++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_RecordarCitasMedicas_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);       

 

ok_Hash.put("tHashInput_2", true);
end_Hash.put("tHashInput_2", System.currentTimeMillis());




/**
 * [tHashInput_2 end ] stop
 */

	
	/**
	 * [tFilterRow_4 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";
	
	
    globalMap.put("tFilterRow_4_NB_LINE", nb_line_tFilterRow_4);
    globalMap.put("tFilterRow_4_NB_LINE_OK", nb_line_ok_tFilterRow_4);
    globalMap.put("tFilterRow_4_NB_LINE_REJECT", nb_line_reject_tFilterRow_4);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row17");
			  	}
			  	
 

ok_Hash.put("tFilterRow_4", true);
end_Hash.put("tFilterRow_4", System.currentTimeMillis());




/**
 * [tFilterRow_4 end ] stop
 */

	
	/**
	 * [tFlowToIterate_2 end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_2";
	
	

globalMap.put("tFlowToIterate_2_NB_LINE",nb_line_tFlowToIterate_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row18");
			  	}
			  	
 

ok_Hash.put("tFlowToIterate_2", true);
end_Hash.put("tFlowToIterate_2", System.currentTimeMillis());


			mtp_tJava_4.waitForEndOfQueue();
			
			TalendThread errorThread_tJava_4 = mtp_tJava_4.getErrorThread();

	if(errorThread_tJava_4 != null) {
		if (errorThread_tJava_4.errorCode != null) {
			if (errorCode == null
					|| errorThread_tJava_4.errorCode.compareTo(errorCode) > 0) {
				errorCode = errorThread_tJava_4.errorCode;
			}
		} 
		if (!status.equals("failure")) {
			status = errorThread_tJava_4.status;
		}
		if(errorThread_tJava_4.exception!=null){
			throw errorThread_tJava_4.exception;
		}
		if(errorThread_tJava_4.error!=null){
			throw errorThread_tJava_4.error;
		}
	}else{				
		Integer threadErrorCode = mtp_tJava_4.getTalendThreadResult().getErrorCode();
		String threadStatus = mtp_tJava_4.getTalendThreadResult().getStatus();
		
		if (threadErrorCode != null) {
			if (errorCode == null
					|| threadErrorCode.compareTo(errorCode) > 0) {
				errorCode = threadErrorCode;
			}
		} 
		if (!status.equals("failure")) {
			status = threadStatus;
		}
	 }			
			
			


/**
 * [tFlowToIterate_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 finally ] stop
 */

	
	/**
	 * [tFilterRow_4 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";
	
	

 



/**
 * [tFilterRow_4 finally ] stop
 */

	
	/**
	 * [tFlowToIterate_2 finally ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_2";
	
	

 



/**
 * [tFlowToIterate_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];
    static byte[] commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.LOGS_ERROR)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
        if(filetFileOutputDelimited_1.exists()){
            isFileGenerated_tFileOutputDelimited_1 = false;
        }
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("moment");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("root_pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("father_pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("project");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("job");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("context");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("priority");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("type");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("origin");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("message");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("code");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }


resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";
	
	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row3.type = lcm.getType();
		row3.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row3.priority = lcm.getPriority();
		row3.message = lcm.getMessage();
		row3.code = lcm.getCode();
		
		row3.moment = java.util.Calendar.getInstance().getTime();
	
    	row3.pid = pid;
		row3.root_pid = rootPid;
		row3.father_pid = fatherPid;
	
    	row3.project = projectName;
    	row3.job = jobName;
    	row3.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row3.moment != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(row3.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.root_pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.root_pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.father_pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.father_pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.project != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.project
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.job != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.job
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.context != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.context
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.priority != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.priority
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.type != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.type
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.origin != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.origin
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.message != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.message
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.code != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.code
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	
	}
} catch (Exception e_tLogCatcher_1) {
globalMap.put("tLogCatcher_1_ERROR_MESSAGE",e_tLogCatcher_1.getMessage());
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tJava_2Process(globalMap);



/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";
	
	
		int tos_count_tJava_2 = 0;
		


context.ESTADO_EXEC = "Fail";
 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());




/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	


public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tJava_3Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";
	
	
		int tos_count_tJava_3 = 0;
		


//Guarda en variables de contexto la hora final de ejecución del etl, actualiza el estado a succes y los imprime en consola

context.HORA_FINAL = TalendDate.getDate("HH:mm:ss");


System.out.println("- End: "+context.HORA_FINAL );
System.out.println("- Estado: "+context.ESTADO_EXEC );
 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tOracleClose_1Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tFixedFlowInput_1Process(globalMap);



/**
 * [tJava_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}
	


public void tOracleClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleClose_1", false);
		start_Hash.put("tOracleClose_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleClose_1";
	
	
		int tos_count_tOracleClose_1 = 0;
		

 



/**
 * [tOracleClose_1 begin ] stop
 */
	
	/**
	 * [tOracleClose_1 main ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

	java.sql.Connection conn_tOracleClose_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
	
	if(conn_tOracleClose_1 != null && !conn_tOracleClose_1.isClosed())
	{
		
			conn_tOracleClose_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tOracleConnection_1"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tOracleClose_1++;

/**
 * [tOracleClose_1 main ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleClose_1 end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 

ok_Hash.put("tOracleClose_1", true);
end_Hash.put("tOracleClose_1", System.currentTimeMillis());




/**
 * [tOracleClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleClose_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 1);
	}
	


public static class row4_0Struct implements routines.system.IPersistableRow<row4_0Struct> {
    final static byte[] commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];
    static byte[] commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[0];

	
			    public String FECHA_EJECUCION;

				public String getFECHA_EJECUCION () {
					return this.FECHA_EJECUCION;
				}

				public Boolean FECHA_EJECUCIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_EJECUCIONIsKey(){
				    return false;
				}
				public Integer FECHA_EJECUCIONLength(){
				    return null;
				}
				public Integer FECHA_EJECUCIONPrecision(){
				    return null;
				}
				public String FECHA_EJECUCIONDefault(){
				
					return null;
				
				}
				public String FECHA_EJECUCIONComment(){
				
				    return "";
				
				}
				public String FECHA_EJECUCIONPattern(){
				
					return "";
				
				}
				public String FECHA_EJECUCIONOriginalDbColumnName(){
				
					return "FECHA_EJECUCION";
				
				}

				
			    public String HORA_INICIO;

				public String getHORA_INICIO () {
					return this.HORA_INICIO;
				}

				public Boolean HORA_INICIOIsNullable(){
				    return true;
				}
				public Boolean HORA_INICIOIsKey(){
				    return false;
				}
				public Integer HORA_INICIOLength(){
				    return null;
				}
				public Integer HORA_INICIOPrecision(){
				    return null;
				}
				public String HORA_INICIODefault(){
				
					return null;
				
				}
				public String HORA_INICIOComment(){
				
				    return "";
				
				}
				public String HORA_INICIOPattern(){
				
					return "";
				
				}
				public String HORA_INICIOOriginalDbColumnName(){
				
					return "HORA_INICIO";
				
				}

				
			    public String HORA_FINAL;

				public String getHORA_FINAL () {
					return this.HORA_FINAL;
				}

				public Boolean HORA_FINALIsNullable(){
				    return true;
				}
				public Boolean HORA_FINALIsKey(){
				    return false;
				}
				public Integer HORA_FINALLength(){
				    return null;
				}
				public Integer HORA_FINALPrecision(){
				    return null;
				}
				public String HORA_FINALDefault(){
				
					return null;
				
				}
				public String HORA_FINALComment(){
				
				    return "";
				
				}
				public String HORA_FINALPattern(){
				
					return "";
				
				}
				public String HORA_FINALOriginalDbColumnName(){
				
					return "HORA_FINAL";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String JOBS;

				public String getJOBS () {
					return this.JOBS;
				}

				public Boolean JOBSIsNullable(){
				    return true;
				}
				public Boolean JOBSIsKey(){
				    return false;
				}
				public Integer JOBSLength(){
				    return null;
				}
				public Integer JOBSPrecision(){
				    return null;
				}
				public String JOBSDefault(){
				
					return null;
				
				}
				public String JOBSComment(){
				
				    return "";
				
				}
				public String JOBSPattern(){
				
					return "";
				
				}
				public String JOBSOriginalDbColumnName(){
				
					return "JOBS";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length) {
				if(length < 1024 && commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas.length == 0) {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[1024];
				} else {
   					commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length);
			strReturn = new String(commonByteArray_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
					this.FECHA_EJECUCION = readString(dis);
					
					this.HORA_INICIO = readString(dis);
					
					this.HORA_FINAL = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.JOBS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AGE_RECORDAR_CITAS_MEDICAS_RecordarCitasMedicas) {

        	try {

        		int length = 0;
		
					this.FECHA_EJECUCION = readString(dis);
					
					this.HORA_INICIO = readString(dis);
					
					this.HORA_FINAL = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.JOBS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FECHA_EJECUCION,dos);
					
					// String
				
						writeString(this.HORA_INICIO,dos);
					
					// String
				
						writeString(this.HORA_FINAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.JOBS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FECHA_EJECUCION,dos);
					
					// String
				
						writeString(this.HORA_INICIO,dos);
					
					// String
				
						writeString(this.HORA_FINAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.JOBS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FECHA_EJECUCION="+FECHA_EJECUCION);
		sb.append(",HORA_INICIO="+HORA_INICIO);
		sb.append(",HORA_FINAL="+HORA_FINAL);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",JOBS="+JOBS);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4_0Struct row4_0 = new row4_0Struct();




	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4_0");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File(context.LOGS_EXECUTION)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
        if(filetFileOutputDelimited_2.exists()){
            isFileGenerated_tFileOutputDelimited_2 = false;
        }
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
                                    if(filetFileOutputDelimited_2.length()==0){
                                        outtFileOutputDelimited_2.write("FECHA_EJECUCION");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("HORA_INICIO");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("HORA_FINAL");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ESTADO");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("JOBS");
                                        outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.flush();
                                    }


resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_1", false);
		start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_1";
	
	
		int tos_count_tFixedFlowInput_1 = 0;
		

	    for (int i_tFixedFlowInput_1 = 0 ; i_tFixedFlowInput_1 < 1 ; i_tFixedFlowInput_1++) {
	                	            	
    	            		row4_0.FECHA_EJECUCION = context.FECHA_EJECUCION;
    	            	        	            	
    	            		row4_0.HORA_INICIO = context.HORA_INICIO;
    	            	        	            	
    	            		row4_0.HORA_FINAL = context.HORA_FINAL;
    	            	        	            	
    	            		row4_0.ESTADO = context.ESTADO_EXEC;
    	            	        	            	
    	            		row4_0.JOBS = context.JOB;
    	            	

 



/**
 * [tFixedFlowInput_1 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 


	tos_count_tFixedFlowInput_1++;

/**
 * [tFixedFlowInput_1 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4_0"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(row4_0.FECHA_EJECUCION != null) {
                        sb_tFileOutputDelimited_2.append(
                            row4_0.FECHA_EJECUCION
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row4_0.HORA_INICIO != null) {
                        sb_tFileOutputDelimited_2.append(
                            row4_0.HORA_INICIO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row4_0.HORA_FINAL != null) {
                        sb_tFileOutputDelimited_2.append(
                            row4_0.HORA_FINAL
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row4_0.ESTADO != null) {
                        sb_tFileOutputDelimited_2.append(
                            row4_0.ESTADO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row4_0.JOBS != null) {
                        sb_tFileOutputDelimited_2.append(
                            row4_0.JOBS
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

        }
        globalMap.put("tFixedFlowInput_1_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_1", true);
end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());




/**
 * [tFixedFlowInput_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	



		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4_0");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_1 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final RecordarCitasMedicas RecordarCitasMedicasClass = new RecordarCitasMedicas();

        int exitCode = RecordarCitasMedicasClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = RecordarCitasMedicas.class.getClassLoader().getResourceAsStream("age_recordar_citas_medicas/recordarcitasmedicas_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = RecordarCitasMedicas.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }
            
            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("FANTERIOR", "id_String");
                        if(context.getStringValue("FANTERIOR") == null) {
                            context.FANTERIOR = null;
                        } else {
                            context.FANTERIOR=(String) context.getProperty("FANTERIOR");
                        }
                        context.setContextType("ACTUALIZACION_TOTAL", "id_Boolean");
                        if(context.getStringValue("ACTUALIZACION_TOTAL") == null) {
                            context.ACTUALIZACION_TOTAL = null;
                        } else {
                            try{
                                context.ACTUALIZACION_TOTAL=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("ACTUALIZACION_TOTAL"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ACTUALIZACION_TOTAL", e.getMessage()));
                                context.ACTUALIZACION_TOTAL=null;
                            }
                        }
                        context.setContextType("ERROR", "id_String");
                        if(context.getStringValue("ERROR") == null) {
                            context.ERROR = null;
                        } else {
                            context.ERROR=(String) context.getProperty("ERROR");
                        }
                        context.setContextType("FECHA_EJECUCION", "id_String");
                        if(context.getStringValue("FECHA_EJECUCION") == null) {
                            context.FECHA_EJECUCION = null;
                        } else {
                            context.FECHA_EJECUCION=(String) context.getProperty("FECHA_EJECUCION");
                        }
                        context.setContextType("HORA_INICIO", "id_String");
                        if(context.getStringValue("HORA_INICIO") == null) {
                            context.HORA_INICIO = null;
                        } else {
                            context.HORA_INICIO=(String) context.getProperty("HORA_INICIO");
                        }
                        context.setContextType("HORA_FINAL", "id_String");
                        if(context.getStringValue("HORA_FINAL") == null) {
                            context.HORA_FINAL = null;
                        } else {
                            context.HORA_FINAL=(String) context.getProperty("HORA_FINAL");
                        }
                        context.setContextType("ESTADO", "id_String");
                        if(context.getStringValue("ESTADO") == null) {
                            context.ESTADO = null;
                        } else {
                            context.ESTADO=(String) context.getProperty("ESTADO");
                        }
                        context.setContextType("LOGS_ERROR", "id_String");
                        if(context.getStringValue("LOGS_ERROR") == null) {
                            context.LOGS_ERROR = null;
                        } else {
                            context.LOGS_ERROR=(String) context.getProperty("LOGS_ERROR");
                        }
                        context.setContextType("LOGS_EXECUTION", "id_String");
                        if(context.getStringValue("LOGS_EXECUTION") == null) {
                            context.LOGS_EXECUTION = null;
                        } else {
                            context.LOGS_EXECUTION=(String) context.getProperty("LOGS_EXECUTION");
                        }
                        context.setContextType("ORIGEN", "id_String");
                        if(context.getStringValue("ORIGEN") == null) {
                            context.ORIGEN = null;
                        } else {
                            context.ORIGEN=(String) context.getProperty("ORIGEN");
                        }
                        context.setContextType("BODEGA", "id_String");
                        if(context.getStringValue("BODEGA") == null) {
                            context.BODEGA = null;
                        } else {
                            context.BODEGA=(String) context.getProperty("BODEGA");
                        }
                        context.setContextType("ID_SOLICITUD", "id_Integer");
                        if(context.getStringValue("ID_SOLICITUD") == null) {
                            context.ID_SOLICITUD = null;
                        } else {
                            try{
                                context.ID_SOLICITUD=routines.system.ParserUtils.parseTo_Integer (context.getProperty("ID_SOLICITUD"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ID_SOLICITUD", e.getMessage()));
                                context.ID_SOLICITUD=null;
                            }
                        }
                        context.setContextType("ESTADO_EXEC", "id_String");
                        if(context.getStringValue("ESTADO_EXEC") == null) {
                            context.ESTADO_EXEC = null;
                        } else {
                            context.ESTADO_EXEC=(String) context.getProperty("ESTADO_EXEC");
                        }
                        context.setContextType("LAST_DAYS", "id_Integer");
                        if(context.getStringValue("LAST_DAYS") == null) {
                            context.LAST_DAYS = null;
                        } else {
                            try{
                                context.LAST_DAYS=routines.system.ParserUtils.parseTo_Integer (context.getProperty("LAST_DAYS"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "LAST_DAYS", e.getMessage()));
                                context.LAST_DAYS=null;
                            }
                        }
                        context.setContextType("FECHA_TERMINACION", "id_String");
                        if(context.getStringValue("FECHA_TERMINACION") == null) {
                            context.FECHA_TERMINACION = null;
                        } else {
                            context.FECHA_TERMINACION=(String) context.getProperty("FECHA_TERMINACION");
                        }
                        context.setContextType("LOGS_STAT", "id_String");
                        if(context.getStringValue("LOGS_STAT") == null) {
                            context.LOGS_STAT = null;
                        } else {
                            context.LOGS_STAT=(String) context.getProperty("LOGS_STAT");
                        }
                        context.setContextType("RutaSistema", "id_String");
                        if(context.getStringValue("RutaSistema") == null) {
                            context.RutaSistema = null;
                        } else {
                            context.RutaSistema=(String) context.getProperty("RutaSistema");
                        }
                        context.setContextType("CONDITION", "id_String");
                        if(context.getStringValue("CONDITION") == null) {
                            context.CONDITION = null;
                        } else {
                            context.CONDITION=(String) context.getProperty("CONDITION");
                        }
                        context.setContextType("CONDITION_PRINCIPAL", "id_String");
                        if(context.getStringValue("CONDITION_PRINCIPAL") == null) {
                            context.CONDITION_PRINCIPAL = null;
                        } else {
                            context.CONDITION_PRINCIPAL=(String) context.getProperty("CONDITION_PRINCIPAL");
                        }
                        context.setContextType("JOB", "id_String");
                        if(context.getStringValue("JOB") == null) {
                            context.JOB = null;
                        } else {
                            context.JOB=(String) context.getProperty("JOB");
                        }
                        context.setContextType("db_destino_ServiceName", "id_String");
                        if(context.getStringValue("db_destino_ServiceName") == null) {
                            context.db_destino_ServiceName = null;
                        } else {
                            context.db_destino_ServiceName=(String) context.getProperty("db_destino_ServiceName");
                        }
                        context.setContextType("db_destino_AdditionalParams", "id_String");
                        if(context.getStringValue("db_destino_AdditionalParams") == null) {
                            context.db_destino_AdditionalParams = null;
                        } else {
                            context.db_destino_AdditionalParams=(String) context.getProperty("db_destino_AdditionalParams");
                        }
                        context.setContextType("db_destino_Login", "id_String");
                        if(context.getStringValue("db_destino_Login") == null) {
                            context.db_destino_Login = null;
                        } else {
                            context.db_destino_Login=(String) context.getProperty("db_destino_Login");
                        }
                        context.setContextType("db_destino_Port", "id_String");
                        if(context.getStringValue("db_destino_Port") == null) {
                            context.db_destino_Port = null;
                        } else {
                            context.db_destino_Port=(String) context.getProperty("db_destino_Port");
                        }
                        context.setContextType("db_destino_Schema", "id_String");
                        if(context.getStringValue("db_destino_Schema") == null) {
                            context.db_destino_Schema = null;
                        } else {
                            context.db_destino_Schema=(String) context.getProperty("db_destino_Schema");
                        }
                        context.setContextType("db_destino_Server", "id_String");
                        if(context.getStringValue("db_destino_Server") == null) {
                            context.db_destino_Server = null;
                        } else {
                            context.db_destino_Server=(String) context.getProperty("db_destino_Server");
                        }
                        context.setContextType("db_destino_Password", "id_Password");
                        if(context.getStringValue("db_destino_Password") == null) {
                            context.db_destino_Password = null;
                        } else {
                            String pwd_db_destino_Password_value = context.getProperty("db_destino_Password");
                            context.db_destino_Password = null;
                            if(pwd_db_destino_Password_value!=null) {
                                if(context_param.containsKey("db_destino_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_destino_Password = pwd_db_destino_Password_value;
                                } else if (!pwd_db_destino_Password_value.isEmpty()) {
                                    try {
                                        context.db_destino_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_destino_Password_value);
                                        context.put("db_destino_Password",context.db_destino_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_origen_ServiceName", "id_String");
                        if(context.getStringValue("db_origen_ServiceName") == null) {
                            context.db_origen_ServiceName = null;
                        } else {
                            context.db_origen_ServiceName=(String) context.getProperty("db_origen_ServiceName");
                        }
                        context.setContextType("db_origen_Server", "id_String");
                        if(context.getStringValue("db_origen_Server") == null) {
                            context.db_origen_Server = null;
                        } else {
                            context.db_origen_Server=(String) context.getProperty("db_origen_Server");
                        }
                        context.setContextType("db_origen_Login", "id_String");
                        if(context.getStringValue("db_origen_Login") == null) {
                            context.db_origen_Login = null;
                        } else {
                            context.db_origen_Login=(String) context.getProperty("db_origen_Login");
                        }
                        context.setContextType("db_origen_Schema", "id_String");
                        if(context.getStringValue("db_origen_Schema") == null) {
                            context.db_origen_Schema = null;
                        } else {
                            context.db_origen_Schema=(String) context.getProperty("db_origen_Schema");
                        }
                        context.setContextType("db_origen_Password", "id_Password");
                        if(context.getStringValue("db_origen_Password") == null) {
                            context.db_origen_Password = null;
                        } else {
                            String pwd_db_origen_Password_value = context.getProperty("db_origen_Password");
                            context.db_origen_Password = null;
                            if(pwd_db_origen_Password_value!=null) {
                                if(context_param.containsKey("db_origen_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_origen_Password = pwd_db_origen_Password_value;
                                } else if (!pwd_db_origen_Password_value.isEmpty()) {
                                    try {
                                        context.db_origen_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_origen_Password_value);
                                        context.put("db_origen_Password",context.db_origen_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_origen_AdditionalParams", "id_String");
                        if(context.getStringValue("db_origen_AdditionalParams") == null) {
                            context.db_origen_AdditionalParams = null;
                        } else {
                            context.db_origen_AdditionalParams=(String) context.getProperty("db_origen_AdditionalParams");
                        }
                        context.setContextType("db_origen_Port", "id_String");
                        if(context.getStringValue("db_origen_Port") == null) {
                            context.db_origen_Port = null;
                        } else {
                            context.db_origen_Port=(String) context.getProperty("db_origen_Port");
                        }
                        context.setContextType("JasperServer", "id_String");
                        if(context.getStringValue("JasperServer") == null) {
                            context.JasperServer = null;
                        } else {
                            context.JasperServer=(String) context.getProperty("JasperServer");
                        }
                        context.setContextType("UsernameMail", "id_String");
                        if(context.getStringValue("UsernameMail") == null) {
                            context.UsernameMail = null;
                        } else {
                            context.UsernameMail=(String) context.getProperty("UsernameMail");
                        }
                        context.setContextType("SMTPPort", "id_String");
                        if(context.getStringValue("SMTPPort") == null) {
                            context.SMTPPort = null;
                        } else {
                            context.SMTPPort=(String) context.getProperty("SMTPPort");
                        }
                        context.setContextType("PasswordMail", "id_String");
                        if(context.getStringValue("PasswordMail") == null) {
                            context.PasswordMail = null;
                        } else {
                            context.PasswordMail=(String) context.getProperty("PasswordMail");
                        }
                        context.setContextType("SmsUser", "id_String");
                        if(context.getStringValue("SmsUser") == null) {
                            context.SmsUser = null;
                        } else {
                            context.SmsUser=(String) context.getProperty("SmsUser");
                        }
                        context.setContextType("JasperPassword", "id_String");
                        if(context.getStringValue("JasperPassword") == null) {
                            context.JasperPassword = null;
                        } else {
                            context.JasperPassword=(String) context.getProperty("JasperPassword");
                        }
                        context.setContextType("JasperAmbiente", "id_String");
                        if(context.getStringValue("JasperAmbiente") == null) {
                            context.JasperAmbiente = null;
                        } else {
                            context.JasperAmbiente=(String) context.getProperty("JasperAmbiente");
                        }
                        context.setContextType("SmsPassword", "id_String");
                        if(context.getStringValue("SmsPassword") == null) {
                            context.SmsPassword = null;
                        } else {
                            context.SmsPassword=(String) context.getProperty("SmsPassword");
                        }
                        context.setContextType("SMTPHost", "id_String");
                        if(context.getStringValue("SMTPHost") == null) {
                            context.SMTPHost = null;
                        } else {
                            context.SMTPHost=(String) context.getProperty("SMTPHost");
                        }
                        context.setContextType("JasperUser", "id_String");
                        if(context.getStringValue("JasperUser") == null) {
                            context.JasperUser = null;
                        } else {
                            context.JasperUser=(String) context.getProperty("JasperUser");
                        }
                        context.setContextType("SmsServer", "id_String");
                        if(context.getStringValue("SmsServer") == null) {
                            context.SmsServer = null;
                        } else {
                            context.SmsServer=(String) context.getProperty("SmsServer");
                        }
                        context.setContextType("FromMail", "id_String");
                        if(context.getStringValue("FromMail") == null) {
                            context.FromMail = null;
                        } else {
                            context.FromMail=(String) context.getProperty("FromMail");
                        }
                        context.setContextType("MensajeEmail", "id_String");
                        if(context.getStringValue("MensajeEmail") == null) {
                            context.MensajeEmail = null;
                        } else {
                            context.MensajeEmail=(String) context.getProperty("MensajeEmail");
                        }
                        context.setContextType("TiempoCita", "id_String");
                        if(context.getStringValue("TiempoCita") == null) {
                            context.TiempoCita = null;
                        } else {
                            context.TiempoCita=(String) context.getProperty("TiempoCita");
                        }
                        context.setContextType("PacienteCita", "id_String");
                        if(context.getStringValue("PacienteCita") == null) {
                            context.PacienteCita = null;
                        } else {
                            context.PacienteCita=(String) context.getProperty("PacienteCita");
                        }
                        context.setContextType("SendMail", "id_String");
                        if(context.getStringValue("SendMail") == null) {
                            context.SendMail = null;
                        } else {
                            context.SendMail=(String) context.getProperty("SendMail");
                        }
                        context.setContextType("MensajeSms", "id_String");
                        if(context.getStringValue("MensajeSms") == null) {
                            context.MensajeSms = null;
                        } else {
                            context.MensajeSms=(String) context.getProperty("MensajeSms");
                        }
                        context.setContextType("SendSms", "id_String");
                        if(context.getStringValue("SendSms") == null) {
                            context.SendSms = null;
                        } else {
                            context.SendSms=(String) context.getProperty("SendSms");
                        }
                        context.setContextType("SmsAuth", "id_String");
                        if(context.getStringValue("SmsAuth") == null) {
                            context.SmsAuth = null;
                        } else {
                            context.SmsAuth=(String) context.getProperty("SmsAuth");
                        }
                        context.setContextType("EmailTo", "id_String");
                        if(context.getStringValue("EmailTo") == null) {
                            context.EmailTo = null;
                        } else {
                            context.EmailTo=(String) context.getProperty("EmailTo");
                        }
                        context.setContextType("SmsTo", "id_String");
                        if(context.getStringValue("SmsTo") == null) {
                            context.SmsTo = null;
                        } else {
                            context.SmsTo=(String) context.getProperty("SmsTo");
                        }
                        context.setContextType("RecordatorioExitoso", "id_String");
                        if(context.getStringValue("RecordatorioExitoso") == null) {
                            context.RecordatorioExitoso = null;
                        } else {
                            context.RecordatorioExitoso=(String) context.getProperty("RecordatorioExitoso");
                        }
                        context.setContextType("CitaId", "id_BigDecimal");
                        if(context.getStringValue("CitaId") == null) {
                            context.CitaId = null;
                        } else {
                            try{
                                context.CitaId=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("CitaId"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "CitaId", e.getMessage()));
                                context.CitaId=null;
                            }
                        }
                        context.setContextType("SmsErrorBody", "id_String");
                        if(context.getStringValue("SmsErrorBody") == null) {
                            context.SmsErrorBody = null;
                        } else {
                            context.SmsErrorBody=(String) context.getProperty("SmsErrorBody");
                        }
                        context.setContextType("SmsErrorCode", "id_Integer");
                        if(context.getStringValue("SmsErrorCode") == null) {
                            context.SmsErrorCode = null;
                        } else {
                            try{
                                context.SmsErrorCode=routines.system.ParserUtils.parseTo_Integer (context.getProperty("SmsErrorCode"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "SmsErrorCode", e.getMessage()));
                                context.SmsErrorCode=null;
                            }
                        }
                        context.setContextType("SmsBody", "id_String");
                        if(context.getStringValue("SmsBody") == null) {
                            context.SmsBody = null;
                        } else {
                            context.SmsBody=(String) context.getProperty("SmsBody");
                        }
                        context.setContextType("PathStorage", "id_String");
                        if(context.getStringValue("PathStorage") == null) {
                            context.PathStorage = null;
                        } else {
                            context.PathStorage=(String) context.getProperty("PathStorage");
                        }
                        context.setContextType("SmsAuthProvider", "id_String");
                        if(context.getStringValue("SmsAuthProvider") == null) {
                            context.SmsAuthProvider = null;
                        } else {
                            context.SmsAuthProvider=(String) context.getProperty("SmsAuthProvider");
                        }
                        context.setContextType("SmsAuthServer", "id_String");
                        if(context.getStringValue("SmsAuthServer") == null) {
                            context.SmsAuthServer = null;
                        } else {
                            context.SmsAuthServer=(String) context.getProperty("SmsAuthServer");
                        }
                        context.setContextType("SMTPPortSecure", "id_String");
                        if(context.getStringValue("SMTPPortSecure") == null) {
                            context.SMTPPortSecure = null;
                        } else {
                            context.SMTPPortSecure=(String) context.getProperty("SMTPPortSecure");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("FANTERIOR")) {
                context.FANTERIOR = (String) parentContextMap.get("FANTERIOR");
            }if (parentContextMap.containsKey("ACTUALIZACION_TOTAL")) {
                context.ACTUALIZACION_TOTAL = (Boolean) parentContextMap.get("ACTUALIZACION_TOTAL");
            }if (parentContextMap.containsKey("ERROR")) {
                context.ERROR = (String) parentContextMap.get("ERROR");
            }if (parentContextMap.containsKey("FECHA_EJECUCION")) {
                context.FECHA_EJECUCION = (String) parentContextMap.get("FECHA_EJECUCION");
            }if (parentContextMap.containsKey("HORA_INICIO")) {
                context.HORA_INICIO = (String) parentContextMap.get("HORA_INICIO");
            }if (parentContextMap.containsKey("HORA_FINAL")) {
                context.HORA_FINAL = (String) parentContextMap.get("HORA_FINAL");
            }if (parentContextMap.containsKey("ESTADO")) {
                context.ESTADO = (String) parentContextMap.get("ESTADO");
            }if (parentContextMap.containsKey("LOGS_ERROR")) {
                context.LOGS_ERROR = (String) parentContextMap.get("LOGS_ERROR");
            }if (parentContextMap.containsKey("LOGS_EXECUTION")) {
                context.LOGS_EXECUTION = (String) parentContextMap.get("LOGS_EXECUTION");
            }if (parentContextMap.containsKey("ORIGEN")) {
                context.ORIGEN = (String) parentContextMap.get("ORIGEN");
            }if (parentContextMap.containsKey("BODEGA")) {
                context.BODEGA = (String) parentContextMap.get("BODEGA");
            }if (parentContextMap.containsKey("ID_SOLICITUD")) {
                context.ID_SOLICITUD = (Integer) parentContextMap.get("ID_SOLICITUD");
            }if (parentContextMap.containsKey("ESTADO_EXEC")) {
                context.ESTADO_EXEC = (String) parentContextMap.get("ESTADO_EXEC");
            }if (parentContextMap.containsKey("LAST_DAYS")) {
                context.LAST_DAYS = (Integer) parentContextMap.get("LAST_DAYS");
            }if (parentContextMap.containsKey("FECHA_TERMINACION")) {
                context.FECHA_TERMINACION = (String) parentContextMap.get("FECHA_TERMINACION");
            }if (parentContextMap.containsKey("LOGS_STAT")) {
                context.LOGS_STAT = (String) parentContextMap.get("LOGS_STAT");
            }if (parentContextMap.containsKey("RutaSistema")) {
                context.RutaSistema = (String) parentContextMap.get("RutaSistema");
            }if (parentContextMap.containsKey("CONDITION")) {
                context.CONDITION = (String) parentContextMap.get("CONDITION");
            }if (parentContextMap.containsKey("CONDITION_PRINCIPAL")) {
                context.CONDITION_PRINCIPAL = (String) parentContextMap.get("CONDITION_PRINCIPAL");
            }if (parentContextMap.containsKey("JOB")) {
                context.JOB = (String) parentContextMap.get("JOB");
            }if (parentContextMap.containsKey("db_destino_ServiceName")) {
                context.db_destino_ServiceName = (String) parentContextMap.get("db_destino_ServiceName");
            }if (parentContextMap.containsKey("db_destino_AdditionalParams")) {
                context.db_destino_AdditionalParams = (String) parentContextMap.get("db_destino_AdditionalParams");
            }if (parentContextMap.containsKey("db_destino_Login")) {
                context.db_destino_Login = (String) parentContextMap.get("db_destino_Login");
            }if (parentContextMap.containsKey("db_destino_Port")) {
                context.db_destino_Port = (String) parentContextMap.get("db_destino_Port");
            }if (parentContextMap.containsKey("db_destino_Schema")) {
                context.db_destino_Schema = (String) parentContextMap.get("db_destino_Schema");
            }if (parentContextMap.containsKey("db_destino_Server")) {
                context.db_destino_Server = (String) parentContextMap.get("db_destino_Server");
            }if (parentContextMap.containsKey("db_destino_Password")) {
                context.db_destino_Password = (java.lang.String) parentContextMap.get("db_destino_Password");
            }if (parentContextMap.containsKey("db_origen_ServiceName")) {
                context.db_origen_ServiceName = (String) parentContextMap.get("db_origen_ServiceName");
            }if (parentContextMap.containsKey("db_origen_Server")) {
                context.db_origen_Server = (String) parentContextMap.get("db_origen_Server");
            }if (parentContextMap.containsKey("db_origen_Login")) {
                context.db_origen_Login = (String) parentContextMap.get("db_origen_Login");
            }if (parentContextMap.containsKey("db_origen_Schema")) {
                context.db_origen_Schema = (String) parentContextMap.get("db_origen_Schema");
            }if (parentContextMap.containsKey("db_origen_Password")) {
                context.db_origen_Password = (java.lang.String) parentContextMap.get("db_origen_Password");
            }if (parentContextMap.containsKey("db_origen_AdditionalParams")) {
                context.db_origen_AdditionalParams = (String) parentContextMap.get("db_origen_AdditionalParams");
            }if (parentContextMap.containsKey("db_origen_Port")) {
                context.db_origen_Port = (String) parentContextMap.get("db_origen_Port");
            }if (parentContextMap.containsKey("JasperServer")) {
                context.JasperServer = (String) parentContextMap.get("JasperServer");
            }if (parentContextMap.containsKey("UsernameMail")) {
                context.UsernameMail = (String) parentContextMap.get("UsernameMail");
            }if (parentContextMap.containsKey("SMTPPort")) {
                context.SMTPPort = (String) parentContextMap.get("SMTPPort");
            }if (parentContextMap.containsKey("PasswordMail")) {
                context.PasswordMail = (String) parentContextMap.get("PasswordMail");
            }if (parentContextMap.containsKey("SmsUser")) {
                context.SmsUser = (String) parentContextMap.get("SmsUser");
            }if (parentContextMap.containsKey("JasperPassword")) {
                context.JasperPassword = (String) parentContextMap.get("JasperPassword");
            }if (parentContextMap.containsKey("JasperAmbiente")) {
                context.JasperAmbiente = (String) parentContextMap.get("JasperAmbiente");
            }if (parentContextMap.containsKey("SmsPassword")) {
                context.SmsPassword = (String) parentContextMap.get("SmsPassword");
            }if (parentContextMap.containsKey("SMTPHost")) {
                context.SMTPHost = (String) parentContextMap.get("SMTPHost");
            }if (parentContextMap.containsKey("JasperUser")) {
                context.JasperUser = (String) parentContextMap.get("JasperUser");
            }if (parentContextMap.containsKey("SmsServer")) {
                context.SmsServer = (String) parentContextMap.get("SmsServer");
            }if (parentContextMap.containsKey("FromMail")) {
                context.FromMail = (String) parentContextMap.get("FromMail");
            }if (parentContextMap.containsKey("MensajeEmail")) {
                context.MensajeEmail = (String) parentContextMap.get("MensajeEmail");
            }if (parentContextMap.containsKey("TiempoCita")) {
                context.TiempoCita = (String) parentContextMap.get("TiempoCita");
            }if (parentContextMap.containsKey("PacienteCita")) {
                context.PacienteCita = (String) parentContextMap.get("PacienteCita");
            }if (parentContextMap.containsKey("SendMail")) {
                context.SendMail = (String) parentContextMap.get("SendMail");
            }if (parentContextMap.containsKey("MensajeSms")) {
                context.MensajeSms = (String) parentContextMap.get("MensajeSms");
            }if (parentContextMap.containsKey("SendSms")) {
                context.SendSms = (String) parentContextMap.get("SendSms");
            }if (parentContextMap.containsKey("SmsAuth")) {
                context.SmsAuth = (String) parentContextMap.get("SmsAuth");
            }if (parentContextMap.containsKey("EmailTo")) {
                context.EmailTo = (String) parentContextMap.get("EmailTo");
            }if (parentContextMap.containsKey("SmsTo")) {
                context.SmsTo = (String) parentContextMap.get("SmsTo");
            }if (parentContextMap.containsKey("RecordatorioExitoso")) {
                context.RecordatorioExitoso = (String) parentContextMap.get("RecordatorioExitoso");
            }if (parentContextMap.containsKey("CitaId")) {
                context.CitaId = (BigDecimal) parentContextMap.get("CitaId");
            }if (parentContextMap.containsKey("SmsErrorBody")) {
                context.SmsErrorBody = (String) parentContextMap.get("SmsErrorBody");
            }if (parentContextMap.containsKey("SmsErrorCode")) {
                context.SmsErrorCode = (Integer) parentContextMap.get("SmsErrorCode");
            }if (parentContextMap.containsKey("SmsBody")) {
                context.SmsBody = (String) parentContextMap.get("SmsBody");
            }if (parentContextMap.containsKey("PathStorage")) {
                context.PathStorage = (String) parentContextMap.get("PathStorage");
            }if (parentContextMap.containsKey("SmsAuthProvider")) {
                context.SmsAuthProvider = (String) parentContextMap.get("SmsAuthProvider");
            }if (parentContextMap.containsKey("SmsAuthServer")) {
                context.SmsAuthServer = (String) parentContextMap.get("SmsAuthServer");
            }if (parentContextMap.containsKey("SMTPPortSecure")) {
                context.SMTPPortSecure = (String) parentContextMap.get("SMTPPortSecure");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("db_destino_Password");
			parametersToEncrypt.add("db_origen_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tJava_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tJava_1) {
globalMap.put("tJava_1_SUBPROCESS_STATE", -1);

e_tJava_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : RecordarCitasMedicas");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tOracleConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tOracleConnection_1", globalMap.get("conn_tOracleConnection_1"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--context_file")) {
        	String keyValue = arg.substring(15);
        	String filePath = new String(java.util.Base64.getDecoder().decode(keyValue));
        	java.nio.file.Path contextFile = java.nio.file.Paths.get(filePath);
            try (java.io.BufferedReader reader = java.nio.file.Files.newBufferedReader(contextFile)) {
                String line;
                while ((line = reader.readLine()) != null) {
                    int index = -1;
                    if ( (index = line.indexOf('=')) > -1) {
							if (line.startsWith("--context_param")) {
								if ("id_Password".equals(context_param.getContextType(line.substring(16, index)))) {
									context_param.put(line.substring(16, index), routines.system.PasswordEncryptUtil.decryptPassword(
											line.substring(index + 1)));
								} else {
									context_param.put(line.substring(16, index), line.substring(index + 1));
								}
							}else {//--context_type
								context_param.setContextType(line.substring(15, index), line.substring(index + 1));
							}
                    }
                }
            } catch (java.io.IOException e) {
            	System.err.println("Could not load the context file: " + filePath);
                e.printStackTrace();
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     622018 characters generated by Talend Open Studio for ESB 
 *     on the November 1, 2024, 1:55:43 AM COT
 ************************************************************************************************/